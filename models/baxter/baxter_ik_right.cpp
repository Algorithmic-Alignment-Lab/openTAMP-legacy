/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-10-06 17:53:00.220383
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "/home/simon0xzx/Research/openrave/python/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70;
x0=IKsin(j[6]);
x1=IKcos(j[4]);
x2=((1.0)*x1);
x3=IKsin(j[0]);
x4=IKcos(j[2]);
x5=(x3*x4);
x6=IKsin(j[1]);
x7=IKsin(j[2]);
x8=IKcos(j[0]);
x9=(x7*x8);
x10=((1.0)*x9);
x11=(x10*x6);
x12=IKsin(j[4]);
x13=((1.0)*x12);
x14=IKcos(j[1]);
x15=((1.0)*x14);
x16=IKsin(j[3]);
x17=(x16*x8);
x18=IKcos(j[3]);
x19=(x3*x7);
x20=((1.0)*x19);
x21=(x4*x8);
x22=((1.0)*x21);
x23=(x22*x6);
x24=(x18*(((((-1.0)*(1.0)*x23))+(((-1.0)*(1.0)*x20)))));
x25=(x24+(((-1.0)*(1.0)*x15*x17)));
x26=(((x2*((x11+(((-1.0)*(1.0)*x5))))))+(((-1.0)*(1.0)*x13*x25)));
x27=IKcos(j[6]);
x28=IKsin(j[5]);
x29=(x15*x18*x8);
x30=(x16*((x23+x20)));
x31=(x28*((x30+(((-1.0)*(1.0)*x29)))));
x32=IKcos(j[5]);
x33=((1.0)*x5);
x34=(x12*((x11+(((-1.0)*(1.0)*x33)))));
x35=(x1*x25);
x36=(x35+x34);
x37=(x32*x36);
x38=((0.069)*x8);
x39=((0.069)*x3);
x40=((0.36442)*x14);
x41=(x4*x6);
x42=(x14*x18*x8);
x43=((0.37429)*x6);
x44=((0.01)*x6);
x45=(x20*x6);
x46=(x14*x16*x3);
x47=(x33*x6);
x48=(x18*((x9+(((-1.0)*(1.0)*x47)))));
x49=(x48+(((-1.0)*(1.0)*x46)));
x50=(((x2*((x22+x45))))+(((-1.0)*(1.0)*x13*x49)));
x51=(x14*x18*x3);
x52=((1.0)*x51);
x53=(x16*(((((-1.0)*(1.0)*x10))+x47)));
x54=(x28*(((((-1.0)*(1.0)*x52))+x53)));
x55=(x12*((x22+x45)));
x56=(x1*x49);
x57=(x55+x56);
x58=(x32*x57);
x59=(x16*x6);
x60=(x14*x18*x4);
x61=((((-1.0)*(1.0)*x60))+x59);
x62=(((x1*x15*x7))+(((-1.0)*(1.0)*x13*x61)));
x63=(x18*x6);
x64=(x14*x4);
x65=(x16*x64);
x66=(x28*((x65+x63)));
x67=(x12*x14*x7);
x68=(x1*x61);
x69=(x68+x67);
x70=(x32*x69);
eerot[0]=(((x0*x26))+((x27*((x37+x31)))));
eerot[1]=(((x26*x27))+((x0*(((((-1.0)*(1.0)*x31))+(((-1.0)*(1.0)*x37)))))));
eerot[2]=(((x28*x36))+((x32*((x29+(((-1.0)*(1.0)*x30)))))));
eetrans[0]=((0.055695)+x38+((x28*(((((0.387225)*x34))+(((0.387225)*x35))))))+(((-1.0)*(1.0)*x39*x7))+((x12*((((x44*x9))+(((-1.0)*(0.01)*x5))))))+((x1*(((((0.01)*x24))+(((-1.0)*(0.01)*x14*x17))))))+(((0.37429)*x42))+(((-1.0)*(1.0)*x38*x41))+((x40*x8))+((x16*(((((-1.0)*(0.37429)*x19))+(((-1.0)*(1.0)*x21*x43))))))+((x32*(((((0.387225)*x42))+(((-1.0)*(0.387225)*x30)))))));
eerot[3]=(((x27*((x58+x54))))+((x0*x50)));
eerot[4]=(((x0*(((((-1.0)*(1.0)*x58))+(((-1.0)*(1.0)*x54))))))+((x27*x50)));
eerot[5]=(((x32*(((((-1.0)*(1.0)*x53))+x52))))+((x28*x57)));
eetrans[1]=(x39+((x16*(((((0.37429)*x9))+(((-1.0)*(1.0)*x43*x5))))))+((x12*((((x19*x44))+(((0.01)*x21))))))+((x28*(((((0.387225)*x56))+(((0.387225)*x55))))))+((x3*x40))+(((-1.0)*(1.0)*x39*x41))+(((0.37429)*x51))+((x1*(((((-1.0)*(0.01)*x46))+(((0.01)*x48))))))+((x38*x7))+((x32*(((((0.387225)*x51))+(((-1.0)*(0.387225)*x53)))))));
eerot[6]=(((x0*x62))+((x27*((x66+x70)))));
eerot[7]=(((x27*x62))+((x0*(((((-1.0)*(1.0)*x70))+(((-1.0)*(1.0)*x66)))))));
eerot[8]=(((x32*(((((-1.0)*(1.0)*x65))+(((-1.0)*(1.0)*x63))))))+((x28*x69)));
eetrans[2]=((0.281388)+(((-1.0)*(0.37429)*x65))+(((-1.0)*(0.37429)*x63))+(((-1.0)*(0.36442)*x6))+((x1*(((((-1.0)*(0.01)*x60))+(((0.01)*x59))))))+((x32*(((((-1.0)*(0.387225)*x63))+(((-1.0)*(0.387225)*x65))))))+(((0.01)*x67))+((x28*(((((0.387225)*x68))+(((0.387225)*x67))))))+(((-1.0)*(0.069)*x64)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j16,cj16,sj16,htj16,j16mul,j15,cj15,sj15,htj15,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij16[2], _nj16,_ij15[2], _nj15;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1;  _ij15[0] = -1; _ij15[1] = -1; _nj15 = 0;
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j15=pfree[0]; cj15=cos(pfree[0]); sj15=sin(pfree[0]), htj15=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*(((1.0)*r01)));
new_r01=r00;
new_r02=r02;
new_px=((-0.055695)+px+(((-1.0)*(0.387225)*r02)));
new_r10=((-1.0)*(((1.0)*r11)));
new_r11=r10;
new_r12=r12;
new_py=(py+(((-1.0)*(0.387225)*r12)));
new_r20=((-1.0)*(((1.0)*r21)));
new_r21=r20;
new_r22=r22;
new_pz=((-0.281388)+(((-1.0)*(0.387225)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x71=((1.0)*py);
IkReal x72=((1.0)*pz);
IkReal x73=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x71))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x72)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x73)));
rxp1_0=((((-1.0)*r21*x71))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x72)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x73)));
rxp2_0=((((-1.0)*r22*x71))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x72))+((px*r22)));
rxp2_2=((((-1.0)*r12*x73))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x74=((0.01)*r20);
IkReal x75=((0.37429)*r20);
IkReal x76=(((cj15*x74))+(((-1.0)*sj15*x75)));
IkReal x77=((0.02)*cj15);
IkReal x78=(npx*sj15);
IkReal x79=((((0.74858)*x78))+(((-1.0)*npx*x77)));
IkReal x80=(r20*sj15);
IkReal x81=((1.0)*npx);
IkReal x82=((0.01)*r21);
IkReal x83=((1.0)*rxp0_2);
IkReal x84=((0.37429)*r21);
IkReal x85=((((-1.0)*sj15*x84))+((cj15*x82)));
IkReal x86=(npy*sj15);
IkReal x87=((((0.74858)*x86))+(((-1.0)*npy*x77)));
IkReal x88=((1.0)*npy);
IkReal x89=((1.0)*r21);
IkReal x90=((1.0)*rxp1_2);
IkReal x91=(r22*sj15);
IkReal x92=((-1.0)*x91);
IkReal x93=((0.01)+(((-1.0)*(1.0)*npz*sj15)));
IkReal x94=(rxp2_2*sj15);
IkReal x95=((0.01)*cj15*r22);
IkReal x96=((0.37429)*x91);
IkReal x97=(x96+(((-1.0)*x95)));
IkReal x98=(cj15*r20);
IkReal x99=((-1.0)*x98);
IkReal x100=((-1.0)*cj15*x81);
IkReal x101=((-1.0)*x89);
IkReal x102=(((cj15*rxp0_2))+x84);
IkReal x103=(cj15*x75);
IkReal x104=(sj15*x74);
IkReal x105=(x103+x104+(((-1.0)*x90)));
IkReal x106=((-1.0)*cj15*x89);
IkReal x107=((-1.0)*cj15*x88);
IkReal x108=((-1.0)*x81);
IkReal x109=((((-1.0)*x75))+((cj15*rxp1_2)));
IkReal x110=(cj15*x84);
IkReal x111=(sj15*x82);
IkReal x112=(rxp0_2+x111+x110);
IkReal x113=(x95+(((-1.0)*x96)));
IkReal x114=((-1.0)*x88);
IkReal x115=(rxp1_2+(((-1.0)*x104))+(((-1.0)*x103)));
IkReal x116=(cj15*r21);
IkReal x117=((((-1.0)*x110))+(((-1.0)*x111))+(((-1.0)*x83)));
matrixinvcoeffs[0]=x76;
matrixinvcoeffs[1]=x79;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=x80;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=((-1.0)*sj15*x81);
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=(x82+((rxp0_2*sj15)));
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=0;
matrixinvcoeffs[19]=x76;
matrixinvcoeffs[20]=x79;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=((-1.0)*x80);
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x78;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=((((-1.0)*x82))+(((-1.0)*sj15*x83)));
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x85;
matrixinvcoeffs[33]=x87;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=(r21*sj15);
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=((-1.0)*sj15*x88);
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=((((-1.0)*x74))+((rxp1_2*sj15)));
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=0;
matrixinvcoeffs[51]=x85;
matrixinvcoeffs[52]=x87;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=((-1.0)*sj15*x89);
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x86;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=((((-1.0)*sj15*x90))+x74);
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=x92;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=x93;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x94;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=x97;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=x92;
matrixinvcoeffs[87]=x93;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x94;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x97;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=x99;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=x100;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=x101;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=npy;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x102;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x105;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x99;
matrixinvcoeffs[119]=x100;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=x101;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=npy;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x102;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x105;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=x106;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=x107;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=r20;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=x108;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x109;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x112;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x106;
matrixinvcoeffs[151]=x107;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=r20;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=x108;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x109;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x112;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=x91;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=x93;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x113;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x94;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=x91;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=x93;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x113;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x94;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=x101;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=x114;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=x98;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=x100;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x115;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x102;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=x101;
matrixinvcoeffs[215]=x114;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=x98;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=x100;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x115;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x102;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=r20;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=npx;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x116;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=x107;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x117;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x109;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=r20;
matrixinvcoeffs[247]=npx;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=x116;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x107;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x117;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x109;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_3=matrixinvcoeffs[49], gclwh1_4=matrixinvcoeffs[65], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_3=matrixinvcoeffs[51], gclwh3_4=matrixinvcoeffs[67], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_8=matrixinvcoeffs[132], gclwh4_12=matrixinvcoeffs[196], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_9=matrixinvcoeffs[149], gclwh5_13=matrixinvcoeffs[213], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_11=matrixinvcoeffs[185], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh10_14=matrixinvcoeffs[234], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_11=matrixinvcoeffs[187], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_12=matrixinvcoeffs[204], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_13=matrixinvcoeffs[221], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_12=matrixinvcoeffs[206], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_9=matrixinvcoeffs[159], gclwh15_11=matrixinvcoeffs[191], gclwh15_13=matrixinvcoeffs[223], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x118=(gclwh12_14*r21);
IkReal x119=(gclwh12_2*r21);
IkReal x120=(gclwh14_14*r20);
IkReal x121=(gclwh14_2*r20);
IkReal x122=(gclwh4_2*pz);
IkReal x123=(gclwh6_14*rxp1_2);
IkReal x124=((1.49716)*rxp1_2);
IkReal x125=(gclwh8_14*rxp0_2);
IkReal x126=((1.49716)*rxp0_2);
IkReal x127=(cj15*gclwh10_14*rxp2_2);
IkReal x128=(gclwh10_2*rxp2_2);
IkReal x129=(cj15*gclwh12_14*rxp0_2);
IkReal x130=(cj15*gclwh14_14*rxp1_2);
IkReal x131=(cj15*gclwh6_14*r20);
IkReal x132=((0.2799860082)*cj15);
IkReal x133=(gclwh6_2*r20);
IkReal x134=(cj15*gclwh8_14*r21);
IkReal x135=(gclwh8_2*r21);
IkReal x136=(gclwh10_14*rxp2_2*sj15);
IkReal x137=(gclwh12_14*npy*pz);
IkReal x138=(gclwh12_14*pp*r21);
IkReal x139=(gclwh12_14*rxp0_2*sj15);
IkReal x140=((4.0)*npy*pz);
IkReal x141=((2.0)*pp);
IkReal x142=((0.04)*sj15);
IkReal x143=(gclwh14_14*npx*pz);
IkReal x144=(gclwh14_14*pp*r20);
IkReal x145=(gclwh14_14*rxp1_2*sj15);
IkReal x146=((4.0)*npx*pz);
IkReal x147=(gclwh4_2*r22*sj15);
IkReal x148=(gclwh6_14*r20*sj15);
IkReal x149=((0.0149716)*sj15);
IkReal x150=(gclwh8_14*r21*sj15);
IkReal x151=(cj15*gclwh6_14*npx*pz);
IkReal x152=(cj15*gclwh6_14*pp*r20);
IkReal x153=((2.0)*cj15*pp);
IkReal x154=(cj15*gclwh8_14*npy*pz);
IkReal x155=(cj15*gclwh8_14*pp*r21);
op[0]=((((0.86684)*cj15*gclwh8_12*npy*pz))+(((0.86684)*gclwh4_12*npz*pz*sj15))+(((-0.069)*cj15*gclwh6_10*pp*r20))+(((0.138)*cj15*gclwh8_10*npy*pz))+((gclwh14_8*pp*r20))+(((0.86684)*gclwh12_12*npy*pz))+(((-0.0005165202)*gclwh6_10*r20*sj15))+(((2.0)*gclwh12_8*npy*pz))+(((-1.0)*gclwh4_8*pp*r22*sj15))+(((-0.00138)*gclwh14_10*rxp1_2*sj15))+(((-0.74858)*cj15*gclwh12_8*rxp0_2))+(((0.060762451837022)*gclwh14_12*r20))+(((0.0096733172829)*gclwh14_10*r20))+(((2.0)*cj15*gclwh6_8*npx*pz))+(((0.0086684)*cj15*gclwh10_12*rxp2_2))+(((-0.0074858)*gclwh8_8*r21*sj15))+(((0.43342)*gclwh14_12*pp*r20))+(((-0.43342)*gclwh4_12*pp*r22*sj15))+(((-0.0074858)*gclwh6_8*r20*sj15))+(((-0.74858)*gclwh10_8*rxp2_2*sj15))+(((-0.0096595172829)*cj15*gclwh6_10*r20))+(((0.86684)*cj15*gclwh6_12*npx*pz))+(((-0.74858)*cj15*gclwh14_8*rxp1_2))+(((-0.060675767837022)*gclwh4_12*r22*sj15))+(((0.05165202)*gclwh6_10*rxp1_2))+(((-0.060675767837022)*cj15*gclwh6_12*r20))+(((-0.1399930041)*gclwh4_8*r22*sj15))+(((-0.069)*gclwh12_10*pp*r21))+(((-0.05165202)*gclwh8_10*rxp0_2))+(((-0.003244495436)*gclwh6_12*r20*sj15))+(((-0.0005165202)*gclwh8_10*r21*sj15))+(((0.00138)*cj15*gclwh10_10*rxp2_2))+(((-0.060675767837022)*cj15*gclwh8_12*r21))+(((0.138)*gclwh12_10*npy*pz))+(((-0.138)*gclwh14_10*npx*pz))+(((0.003244495436)*cj15*gclwh4_12*r22))+(((0.74858)*gclwh6_8*rxp1_2))+(((-0.0086684)*gclwh12_12*rxp0_2*sj15))+(((0.02)*cj15*gclwh10_8*rxp2_2))+(((2.0)*cj15*gclwh8_8*npy*pz))+(((-0.0086684)*gclwh14_12*rxp1_2*sj15))+(((-0.43342)*gclwh12_12*pp*r21))+(((-0.069)*cj15*gclwh8_10*pp*r21))+(((-0.3244495436)*gclwh10_12*rxp2_2*sj15))+(((-0.02)*gclwh12_8*rxp0_2*sj15))+(((-0.1401930041)*gclwh12_8*r21))+(((-0.05165202)*cj15*gclwh12_10*rxp0_2))+(((-0.00138)*gclwh12_10*rxp0_2*sj15))+(((0.0074858)*cj15*gclwh4_8*r22))+(((-1.0)*cj15*gclwh6_8*pp*r20))+(((0.138)*cj15*gclwh6_10*npx*pz))+(((-2.0)*gclwh14_8*npx*pz))+(((-0.060762451837022)*gclwh12_12*r21))+(((-0.003244495436)*gclwh8_12*r21*sj15))+(((-0.86684)*gclwh14_12*npx*pz))+(((-1.0)*gclwh12_8*pp*r21))+(((-0.0086684)*gclwh4_12*pz))+(((-0.3244495436)*cj15*gclwh12_12*rxp0_2))+(((-0.43342)*cj15*gclwh6_12*pp*r20))+(((-0.05165202)*gclwh10_10*rxp2_2*sj15))+(((-0.3244495436)*cj15*gclwh14_12*rxp1_2))+(((0.1401930041)*gclwh14_8*r20))+(((0.3244495436)*gclwh6_12*rxp1_2))+(((-0.05165202)*cj15*gclwh14_10*rxp1_2))+(((-0.3244495436)*gclwh8_12*rxp0_2))+(((-0.43342)*cj15*gclwh8_12*pp*r21))+(((-0.74858)*gclwh8_8*rxp0_2))+(((0.069)*gclwh14_10*pp*r20))+(((-0.0096733172829)*gclwh12_10*r21))+(((-0.1399930041)*cj15*gclwh6_8*r20))+(((-0.0096595172829)*cj15*gclwh8_10*r21))+(((-1.0)*cj15*gclwh8_8*pp*r21))+(((-0.1399930041)*cj15*gclwh8_8*r21))+(((-0.02)*gclwh4_8*pz))+(((2.0)*gclwh4_8*npz*pz*sj15))+(((-0.02)*gclwh14_8*rxp1_2*sj15)));
op[1]=((((-0.1044417846)*gclwh4_4*npz*pz*sj15))+(((0.74858)*cj15*gclwh12_3*pz*rxp0_2))+(((-0.0005165202)*cj15*gclwh4_3*r22))+(((0.74858)*cj15*gclwh6_14*rxp1_2*rxp2_2))+(((0.1397930041)*gclwh4_3*pz*r22*sj15))+(((-0.1399930041)*gclwh8_14*r21*rxp2_2*(cj15*cj15)))+(((2.0)*gclwh14_3*npx*(pz*pz)))+(((0.1401930041)*cj15*gclwh14_14*r20*rxp2_2))+(((-0.74858)*gclwh12_8*r22*rxp0_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh6_8*r20*r22*sj15))+(((-0.0149716)*gclwh10_4*npz*rxp2_2*(cj15*cj15)))+(((-0.2801860082)*gclwh12_3*r22*rxp0_2*(cj15*cj15)))+(((0.05913)*cj15*gclwh8_10*pp*r21))+((cj15*gclwh12_10*npz*pp*r21))+(((0.5603720164)*gclwh12_4*npz*rxp0_2*(cj15*cj15)))+(((-0.0096733172829)*gclwh14_3*r20))+(((0.069)*gclwh4_3*pp*r22*sj15))+(((0.0096595172829)*cj15*gclwh8_3*r21))+(((0.00733855819067956)*cj15*gclwh8_4*r21))+(((-2.0)*gclwh14_4*npx*pp*pz))+(((0.0074858)*gclwh6_3*pz*r20*sj15))+(((-0.004201790123)*cj15*gclwh8_3*r21*r22*sj15))+(((0.74858)*gclwh14_10*npz*rxp1_2*(cj15*cj15)))+(((-0.05165202)*gclwh6_3*rxp1_2))+(((-0.0149716)*cj15*gclwh4_3*pz*r22))+(((-0.02)*cj15*gclwh10_3*pz*rxp2_2))+(((2.0)*gclwh6_14*npx*pz*rxp2_2*(cj15*cj15)))+(((-0.02)*gclwh4_4*pp*pz))+(((0.069)*cj15*gclwh8_3*pp*r21))+(((0.002803860082)*gclwh12_4*npz*r21*sj15))+(((0.74858)*gclwh10_3*pz*rxp2_2*sj15))+(((0.1399930041)*cj15*gclwh8_3*pz*r21))+(((0.0096733172829)*gclwh12_3*r21))+(((2.0)*cj15*gclwh14_10*npx*npz*pz))+(((0.0004)*gclwh12_4*npz*rxp0_2*(sj15*sj15)))+(((-1.0)*gclwh8_14*pp*r21*rxp2_2*(cj15*cj15)))+(((0.039241231557934)*gclwh8_4*rxp0_2))+(((-0.1401930041)*cj15*gclwh14_10*npz*r20))+(((0.74858)*cj15*gclwh6_8*r22*rxp1_2))+(((0.000149716)*gclwh8_4*npz*r21*(sj15*sj15)))+(((0.0005165202)*gclwh8_3*r21*sj15))+(((0.00733855819067956)*cj15*gclwh6_4*r20))+(((-0.0011826)*cj15*gclwh10_10*rxp2_2))+(((-0.0149716)*cj15*gclwh14_3*r22*rxp1_2*sj15))+(((0.74858)*cj15*gclwh12_3*npy*pz*r22))+(((2.0)*cj15*gclwh4_8*npz*pz*r22*sj15))+(((0.069)*gclwh12_3*pp*r21))+(((0.00039241231557934)*gclwh8_4*r21*sj15))+(((0.0074858)*gclwh6_3*r22*rxp1_2*sj15))+(((0.001401930041)*gclwh14_3*r20*r22*sj15))+(((0.02)*gclwh4_3*(pz*pz)))+(((0.1401930041)*cj15*gclwh12_10*npz*r21))+(((-2.0)*cj15*gclwh14_14*npx*pz*rxp2_2))+(((-1.49716)*gclwh8_4*npy*npz*pz*(cj15*cj15)))+(((0.0442635354)*cj15*gclwh14_10*rxp1_2))+(((0.02)*gclwh10_14*(cj15*cj15)*(rxp2_2*rxp2_2)))+(((0.1399930041)*gclwh6_10*npz*r20*(cj15*cj15)))+(((-0.0442635354)*gclwh6_10*rxp1_2))+(((-0.138)*gclwh12_3*npy*pz))+(((0.74858)*gclwh6_4*pp*rxp1_2))+(((0.00138)*gclwh12_3*rxp0_2*sj15))+(((-0.0875721118)*cj15*gclwh8_4*pp*r21))+(((0.00734904236913956)*gclwh12_4*r21))+(((-0.138)*cj15*gclwh8_3*npy*pz))+(((0.02)*cj15*gclwh14_10*npz*rxp1_2*sj15))+(((0.02)*gclwh12_4*npz*pp*r21*sj15))+(((0.74858)*gclwh8_3*npy*pz*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh8_10*npz*rxp0_2))+(((0.05165202)*gclwh8_3*rxp0_2))+(((-2.0)*gclwh8_10*npy*npz*pz*(cj15*cj15)))+(((2.0)*gclwh4_4*npz*pp*pz*sj15))+(((-1.0)*cj15*gclwh14_10*npz*pp*r20))+(((0.00733855819067956)*gclwh4_4*r22*sj15))+(((-0.1399930041)*gclwh8_8*r21*r22*(cj15*cj15)))+(((-0.74858)*gclwh14_14*rxp1_2*rxp2_2*(cj15*cj15)))+(((-0.04)*cj15*gclwh8_4*npy*npz*pz*sj15))+(((0.0299432)*cj15*gclwh14_4*npz*rxp1_2*sj15))+(((-0.37429)*gclwh8_3*pp*r21*r22*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh12_4*npz*r21))+(((-0.0002)*gclwh14_3*r22*rxp1_2*(sj15*sj15)))+(((0.000442635354)*gclwh8_10*r21*sj15))+(((0.008289612332433)*gclwh12_10*r21))+(((0.1399930041)*cj15*gclwh6_3*pz*r20))+(((-0.01)*gclwh4_3*pp*(r22*r22)*(sj15*sj15)))+(((-0.2801860082)*cj15*gclwh8_3*r22*rxp0_2))+(((-0.11826)*cj15*gclwh8_10*npy*pz))+(((-0.37429)*gclwh6_3*pp*r20*r22*(cj15*cj15)))+(((2.0)*gclwh8_8*npy*pz*r22*(cj15*cj15)))+(((-2.0)*gclwh4_3*npz*sj15*(pz*pz)))+(((-0.11826)*cj15*gclwh6_10*npx*pz))+(((0.0442635354)*gclwh8_10*rxp0_2))+(((0.00138)*gclwh4_3*pz))+(((-0.1399930041)*gclwh6_8*r20*r22*(cj15*cj15)))+(((0.138)*gclwh14_3*npx*pz))+(((0.74858)*cj15*gclwh4_4*npz*pp*r22*sj15))+(((0.0074858)*cj15*gclwh4_4*pp*r22))+(((0.05165202)*cj15*gclwh12_3*rxp0_2))+(((-1.0)*cj15*gclwh8_4*r21*(pp*pp)))+(((-0.37429)*cj15*gclwh12_3*pp*r21*r22))+(((0.5603720164)*cj15*gclwh8_4*npz*rxp0_2))+(((-1.0)*gclwh6_14*pp*r20*rxp2_2*(cj15*cj15)))+(((-0.0074858)*gclwh10_3*r22*rxp2_2*(sj15*sj15)))+(((-0.02)*gclwh14_4*npz*pp*r20*sj15))+(((2.0)*cj15*gclwh6_4*npx*pp*pz))+(((0.0011826)*gclwh14_10*rxp1_2*sj15))+(((-0.00734904236913956)*gclwh14_4*r20))+((gclwh6_10*npz*pp*r20*(cj15*cj15)))+(((-0.01)*cj15*gclwh8_3*pp*r21*r22*sj15))+(((0.01)*gclwh14_3*pp*r20*r22*sj15))+(((-0.004201790123)*cj15*gclwh6_3*r20*r22*sj15))+(((0.001048417846)*gclwh12_4*rxp0_2*sj15))+(((-0.05913)*gclwh14_10*pp*r20))+(((-7.4858e-5)*gclwh8_3*r21*r22*(sj15*sj15)))+(((-0.74858)*gclwh6_3*pz*rxp1_2))+(((0.104795963009178)*gclwh8_4*npz*r21*(cj15*cj15)))+(((-0.0074858)*gclwh8_4*pp*r21*sj15))+(((-0.74858)*cj15*gclwh14_3*npx*pz*r22))+(((0.11826)*gclwh14_10*npx*pz))+(((-0.02)*cj15*gclwh14_14*rxp1_2*rxp2_2*sj15))+(((0.0149716)*cj15*gclwh4_4*npz*pz))+(((0.008403580246)*cj15*gclwh8_4*npz*r21*sj15))+(((-0.02)*gclwh12_4*pp*rxp0_2*sj15))+(((2.0)*gclwh12_4*npy*pp*pz))+(((0.2801860082)*cj15*gclwh6_3*r22*rxp1_2))+(((0.5603720164)*gclwh14_4*npz*rxp1_2*(cj15*cj15)))+(((0.0011826)*gclwh12_10*rxp0_2*sj15))+(((-0.04)*gclwh12_4*npy*npz*pz*sj15))+(((-0.052472839504589)*cj15*gclwh12_3*r21*r22))+(((2.0)*cj15*gclwh8_4*npy*pp*pz))+(((0.05913)*gclwh12_10*pp*r21))+(((0.039241231557934)*cj15*gclwh12_4*rxp0_2))+(((-0.1048417846)*cj15*gclwh6_4*npx*pz))+(((0.0004)*gclwh14_4*npz*rxp1_2*(sj15*sj15)))+(((0.039241231557934)*cj15*gclwh14_4*rxp1_2))+(((0.0074858)*gclwh8_3*pz*r21*sj15))+(((0.37429)*cj15*gclwh14_3*pp*r20*r22))+(((1.49716)*cj15*gclwh14_4*npx*npz*pz))+(((-1.0)*gclwh4_4*r22*sj15*(pp*pp)))+(((-0.104945679009178)*cj15*gclwh14_4*npz*r20))+(((0.000149716)*gclwh6_4*npz*r20*(sj15*sj15)))+(((-0.0002)*gclwh12_3*r22*rxp0_2*(sj15*sj15)))+(((-0.0074858)*cj15*gclwh8_8*r21*r22*sj15))+(((-0.001399930041)*gclwh4_3*(r22*r22)*(sj15*sj15)))+(((-1.49716)*cj15*gclwh4_4*pz*sj15*(npz*npz)))+(((-0.02)*cj15*gclwh4_8*pz*r22))+(((0.74858)*cj15*gclwh10_10*npz*rxp2_2*sj15))+(((-2.0)*cj15*gclwh12_10*npy*npz*pz))+(((0.00138)*gclwh14_3*rxp1_2*sj15))+(((-0.069)*gclwh14_3*pp*r20))+(((-0.02)*gclwh10_10*npz*rxp2_2*(cj15*cj15)))+(((-1.0)*cj15*gclwh12_8*pp*r21*r22))+(((0.002799860082)*gclwh4_4*npz*r22*(sj15*sj15)))+(((-0.04)*cj15*gclwh6_4*npx*npz*pz*sj15))+(((-2.0)*gclwh6_10*npx*npz*pz*(cj15*cj15)))+(((0.0074858)*gclwh4_8*(cj15*cj15)*(r22*r22)))+(((-0.00138)*cj15*gclwh10_3*rxp2_2))+(((0.00039241231557934)*gclwh6_4*r20*sj15))+(((-0.0875721118)*gclwh4_4*pp*r22*sj15))+(((-0.0074858)*cj15*gclwh8_14*r21*rxp2_2*sj15))+((gclwh8_10*npz*pp*r21*(cj15*cj15)))+(((-0.0074858)*gclwh8_3*r22*rxp0_2*sj15))+(((-0.74858)*cj15*gclwh10_8*r22*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh14_4*npz*pp*r20))+(((-0.0074858)*cj15*gclwh6_14*r20*rxp2_2*sj15))+(((-1.0)*cj15*gclwh6_4*r20*(pp*pp)))+(((-0.039241231557934)*gclwh6_4*rxp1_2))+(((-0.001048417846)*cj15*gclwh10_4*rxp2_2))+(((-0.2799860082)*cj15*gclwh10_3*r22*rxp2_2*sj15))+(((0.04)*gclwh14_4*npx*npz*pz*sj15))+(((-0.052323123504589)*cj15*gclwh4_3*sj15*(r22*r22)))+(((0.74858)*gclwh6_3*npx*pz*r22*(cj15*cj15)))+(((-1.0)*gclwh14_3*pp*pz*r20))+(((0.1401930041)*gclwh12_3*pz*r21))+(((0.0442635354)*gclwh10_10*rxp2_2*sj15))+(((0.02)*cj15*gclwh12_10*npz*rxp0_2*sj15))+(((-0.0149716)*cj15*gclwh12_3*r22*rxp0_2*sj15))+((gclwh4_3*pp*pz*r22*sj15))+(((0.02)*gclwh14_3*pz*rxp1_2*sj15))+(((0.02)*gclwh4_4*npz*pp*r22*(sj15*sj15)))+(((0.1399930041)*gclwh8_10*npz*r21*(cj15*cj15)))+(((-1.49716)*cj15*gclwh12_4*npy*npz*pz))+(((0.0877721118)*gclwh14_4*pp*r20))+(((-0.74858)*cj15*gclwh8_14*rxp0_2*rxp2_2))+(((-0.0875721118)*cj15*gclwh6_4*pp*r20))+(((-0.74858)*cj15*gclwh10_14*sj15*(rxp2_2*rxp2_2)))+(((0.02)*cj15*gclwh6_4*npz*pp*r20*sj15))+(((-0.01)*gclwh12_3*pp*r21*r22*sj15))+(((0.74858)*gclwh6_4*npz*pp*r20*(cj15*cj15)))+(((2.0)*gclwh8_14*npy*pz*rxp2_2*(cj15*cj15)))+((gclwh14_4*r20*(pp*pp)))+(((-0.5603720164)*cj15*gclwh6_4*npz*rxp1_2))+(((-0.02)*cj15*gclwh12_14*rxp0_2*rxp2_2*sj15))+(((-0.02)*gclwh14_3*npx*pz*r22*sj15))+(((-0.74858)*cj15*gclwh14_4*pp*rxp1_2))+(((2.0)*gclwh6_8*npx*pz*r22*(cj15*cj15)))+(((0.02)*gclwh4_3*npz*pz*r22*(sj15*sj15)))+(((-0.1048417846)*gclwh12_4*npy*pz))+(((-2.0)*cj15*gclwh14_8*npx*pz*r22))+(((-1.0)*cj15*gclwh4_8*pp*sj15*(r22*r22)))+(((0.74858)*gclwh12_10*npz*rxp0_2*(cj15*cj15)))+(((-0.11826)*gclwh12_10*npy*pz))+(((-0.37429)*cj15*gclwh4_3*pp*sj15*(r22*r22)))+(((0.74858)*cj15*gclwh12_4*npz*pp*r21))+(((-0.138)*gclwh4_3*npz*pz*sj15))+(((-0.04)*gclwh4_4*pz*(npz*npz)*(sj15*sj15)))+(((0.1048417846)*gclwh14_4*npx*pz))+(((0.0074858)*gclwh10_3*r22*rxp2_2*(cj15*cj15)))+(((-0.00039241231557934)*cj15*gclwh4_4*r22))+(((-0.74858)*cj15*gclwh12_4*pp*rxp0_2))+(((-0.74858)*gclwh8_4*pp*rxp0_2))+(((-0.008289612332433)*gclwh14_10*r20))+(((0.05913)*cj15*gclwh6_10*pp*r20))+(((0.039241231557934)*gclwh10_4*rxp2_2*sj15))+(((-0.02)*cj15*gclwh12_8*r22*rxp0_2*sj15))+(((-1.0)*gclwh12_4*r21*(pp*pp)))+(((2.0)*cj15*gclwh12_8*npy*pz*r22))+(((0.000442635354)*gclwh6_10*r20*sj15))+(((0.74858)*gclwh8_3*pz*rxp0_2))+(((0.008277786332433)*cj15*gclwh8_10*r21))+(((-0.2801860082)*gclwh14_3*r22*rxp1_2*(cj15*cj15)))+(((-0.0074858)*gclwh6_4*pp*r20*sj15))+(((-0.74858)*cj15*gclwh8_8*r22*rxp0_2))+((cj15*gclwh14_14*pp*r20*rxp2_2))+(((0.74858)*gclwh8_4*npz*pp*r21*(cj15*cj15)))+(((0.002801860082)*gclwh4_3*(cj15*cj15)*(r22*r22)))+(((0.001048417846)*gclwh4_4*pz))+(((0.104795963009178)*gclwh6_4*npz*r20*(cj15*cj15)))+(((-0.02)*gclwh14_4*pp*rxp1_2*sj15))+(((-0.002803860082)*gclwh14_4*npz*r20*sj15))+(((-0.74858)*gclwh12_14*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.74858)*cj15*gclwh4_3*npz*pz*r22*sj15))+(((0.05165202)*cj15*gclwh14_3*rxp1_2))+(((0.02)*cj15*gclwh10_4*pp*rxp2_2))+(((0.74858)*cj15*gclwh14_3*pz*rxp1_2))+(((-0.1401930041)*gclwh14_3*pz*r20))+((cj15*gclwh8_3*pp*pz*r21))+(((-0.74858)*gclwh14_8*r22*rxp1_2*(cj15*cj15)))+(((-1.0)*gclwh6_8*pp*r20*r22*(cj15*cj15)))+(((0.1401930041)*cj15*gclwh14_8*r20*r22))+(((0.104646247009178)*cj15*gclwh4_4*npz*r22*sj15))+(((-0.74858)*cj15*gclwh6_10*npz*rxp1_2))+(((2.0)*cj15*gclwh12_14*npy*pz*rxp2_2))+(((0.0149716)*gclwh8_4*npz*rxp0_2*sj15))+(((0.0074858)*cj15*gclwh6_10*npz*r20*sj15))+(((0.0005165202)*gclwh6_3*r20*sj15))+(((0.0074858)*cj15*gclwh8_10*npz*r21*sj15))+(((-7.4858e-5)*gclwh6_3*r20*r22*(sj15*sj15)))+(((-0.001401930041)*gclwh12_3*r21*r22*sj15))+(((-0.0149716)*gclwh6_4*npz*rxp1_2*sj15))+(((-0.74858)*gclwh10_4*pp*rxp2_2*sj15))+(((0.02)*gclwh12_3*pz*rxp0_2*sj15))+(((0.02)*gclwh12_3*npy*pz*r22*sj15))+(((0.008403580246)*cj15*gclwh6_4*npz*r20*sj15))+(((0.0096595172829)*gclwh4_3*r22*sj15))+(((-0.052397981504589)*gclwh8_3*r21*r22*(cj15*cj15)))+(((-0.1048417846)*cj15*gclwh8_4*npy*pz))+(((0.069)*cj15*gclwh6_3*pp*r20))+(((0.0442635354)*cj15*gclwh12_10*rxp0_2))+((cj15*gclwh6_3*pp*pz*r20))+(((-2.0)*cj15*gclwh6_3*npx*(pz*pz)))+(((0.02)*cj15*gclwh8_4*npz*pp*r21*sj15))+(((-0.0877721118)*gclwh12_4*pp*r21))+(((-0.1399930041)*cj15*gclwh4_8*sj15*(r22*r22)))+(((0.05165202)*gclwh10_3*rxp2_2*sj15))+(((-0.052397981504589)*gclwh6_3*r20*r22*(cj15*cj15)))+(((0.5599720164)*cj15*gclwh10_4*npz*rxp2_2*sj15))+((gclwh12_3*pp*pz*r21))+(((0.02)*cj15*gclwh6_3*npx*pz*r22*sj15))+(((0.0149716)*gclwh10_4*npz*rxp2_2*(sj15*sj15)))+(((0.02)*cj15*gclwh8_3*npy*pz*r22*sj15))+(((-0.01)*cj15*gclwh6_3*pp*r20*r22*sj15))+(((0.052472839504589)*cj15*gclwh14_3*r20*r22))+(((-0.138)*cj15*gclwh6_3*npx*pz))+(((0.02)*gclwh10_8*r22*rxp2_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh12_14*r21*rxp2_2))+(((0.0096595172829)*cj15*gclwh6_3*r20))+(((0.0299432)*cj15*gclwh12_4*npz*rxp0_2*sj15))+(((-0.1401930041)*cj15*gclwh12_8*r21*r22))+(((0.008277786332433)*cj15*gclwh6_10*r20))+(((-1.0)*cj15*gclwh12_14*pp*r21*rxp2_2))+(((-1.49716)*gclwh6_4*npx*npz*pz*(cj15*cj15)))+(((0.001048417846)*gclwh14_4*rxp1_2*sj15))+(((-0.005603720164)*gclwh4_4*npz*r22*(cj15*cj15)))+(((-2.0)*cj15*gclwh8_3*npy*(pz*pz)))+((cj15*gclwh14_8*pp*r20*r22))+(((-0.1399930041)*gclwh6_14*r20*rxp2_2*(cj15*cj15)))+(((-0.02)*cj15*gclwh14_8*r22*rxp1_2*sj15))+(((-2.0)*gclwh12_3*npy*(pz*pz)))+(((-1.0)*gclwh8_8*pp*r21*r22*(cj15*cj15))));
op[2]=((-0.3852277928)+(((0.0173368)*x127))+(((-1.0)*x132*x135))+(((-1.0)*gclwh8_2*x126))+(((1.73368)*x137))+(((-1.0)*x133*x153))+(((4.0)*npz*sj15*x122))+(((-1.0)*x133*x149))+(((-0.121351535674044)*x134))+(((0.2803860082)*x121))+((cj15*gclwh6_2*x146))+(((-1.0)*cj15*gclwh14_2*x124))+(((-0.121351535674044)*x131))+(((-1.73368)*x143))+(((-0.0173368)*x145))+(((-0.0173368)*x139))+(((-1.0)*x119*x141))+(((-1.0)*gclwh14_2*x146))+(((-0.2803860082)*x119))+(((-1.0)*x141*x147))+((x121*x141))+(((-0.006488990872)*x150))+(((-0.121524903674044)*x118))+((cj15*gclwh8_2*x140))+(((-0.6488990872)*x129))+(((-1.0)*cj15*gclwh12_2*x126))+(((-0.2799860082)*x147))+(((-0.006488990872)*x148))+(((-0.86684)*x152))+(((-1.0)*gclwh14_2*rxp1_2*x142))+((gclwh6_2*x124))+(((-1.0)*x135*x149))+((gclwh12_2*x140))+(((0.6488990872)*x123))+(((1.73368)*x154))+(((0.04)*cj15*x128))+(((1.73368)*x151))+(((-1.49716)*sj15*x128))+(((-1.0)*x132*x133))+(((-0.86684)*x138))+(((-0.6488990872)*x125))+(((-0.6488990872)*x130))+(((-0.6488990872)*x136))+(((0.121524903674044)*x120))+(((((0.0149716)*cj15))*((gclwh4_2*r22))))+(((-0.86684)*x155))+(((-0.04)*x122))+(((0.86684)*x144))+(((-1.0)*x135*x153))+(((-1.0)*gclwh12_2*rxp0_2*x142)));
op[3]=((((-0.0010330404)*x150))+(((-0.0193190345658)*x134))+(((-0.10330404)*x125))+(((0.0193466345658)*x120))+(((-0.138)*x155))+(((-0.0193190345658)*x131))+(((-0.276)*x143))+(((-0.0010330404)*x148))+(((-0.0193466345658)*x118))+(((-0.00276)*x145))+(((0.138)*x144))+(((-0.10330404)*x130))+(((0.276)*x151))+(((0.00276)*x127))+(((0.10330404)*x123))+(((0.276)*x154))+(((-0.138)*x138))+(((-0.10330404)*x129))+(((-0.138)*x152))+(((0.276)*x137))+(((-0.10330404)*x136))+(((-0.00276)*x139)));
op[4]=((((0.02)*gclwh12_8*rxp0_2*sj15))+(((-0.069)*cj15*gclwh6_10*pp*r20))+(((0.003244495436)*gclwh6_12*r20*sj15))+(((0.0086684)*gclwh12_12*rxp0_2*sj15))+(((0.3244495436)*cj15*gclwh14_12*rxp1_2))+(((0.138)*cj15*gclwh8_10*npy*pz))+(((0.1399930041)*cj15*gclwh6_8*r20))+(((-0.0005165202)*gclwh6_10*r20*sj15))+(((-0.3244495436)*gclwh6_12*rxp1_2))+(((-0.00138)*gclwh14_10*rxp1_2*sj15))+(((0.0096733172829)*gclwh14_10*r20))+(((0.3244495436)*gclwh8_12*rxp0_2))+(((-0.060762451837022)*gclwh14_12*r20))+(((-1.0)*gclwh14_8*pp*r20))+(((0.02)*gclwh14_8*rxp1_2*sj15))+(((0.0086684)*gclwh4_12*pz))+(((0.060675767837022)*cj15*gclwh8_12*r21))+(((0.02)*gclwh4_8*pz))+(((-0.0096595172829)*cj15*gclwh6_10*r20))+(((0.003244495436)*gclwh8_12*r21*sj15))+(((2.0)*gclwh14_8*npx*pz))+(((0.060675767837022)*cj15*gclwh6_12*r20))+(((-2.0)*cj15*gclwh6_8*npx*pz))+(((-0.02)*cj15*gclwh10_8*rxp2_2))+(((0.05165202)*gclwh6_10*rxp1_2))+(((-0.069)*gclwh12_10*pp*r21))+(((-0.05165202)*gclwh8_10*rxp0_2))+(((-0.0005165202)*gclwh8_10*r21*sj15))+(((0.3244495436)*gclwh10_12*rxp2_2*sj15))+(((0.00138)*cj15*gclwh10_10*rxp2_2))+(((0.3244495436)*cj15*gclwh12_12*rxp0_2))+(((-0.74858)*gclwh6_8*rxp1_2))+(((-0.0086684)*cj15*gclwh10_12*rxp2_2))+(((-0.43342)*gclwh14_12*pp*r20))+(((0.138)*gclwh12_10*npy*pz))+(((-0.138)*gclwh14_10*npx*pz))+((cj15*gclwh6_8*pp*r20))+(((-2.0)*gclwh4_8*npz*pz*sj15))+(((0.060675767837022)*gclwh4_12*r22*sj15))+(((0.74858)*gclwh10_8*rxp2_2*sj15))+(((-0.069)*cj15*gclwh8_10*pp*r21))+(((-0.05165202)*cj15*gclwh12_10*rxp0_2))+(((-0.00138)*gclwh12_10*rxp0_2*sj15))+(((0.138)*cj15*gclwh6_10*npx*pz))+(((0.060762451837022)*gclwh12_12*r21))+(((0.43342)*gclwh4_12*pp*r22*sj15))+(((0.0086684)*gclwh14_12*rxp1_2*sj15))+(((-2.0)*cj15*gclwh8_8*npy*pz))+(((0.86684)*gclwh14_12*npx*pz))+((gclwh4_8*pp*r22*sj15))+(((0.1399930041)*gclwh4_8*r22*sj15))+(((-0.0074858)*cj15*gclwh4_8*r22))+(((0.74858)*gclwh8_8*rxp0_2))+(((-0.05165202)*gclwh10_10*rxp2_2*sj15))+(((0.74858)*cj15*gclwh14_8*rxp1_2))+(((0.1401930041)*gclwh12_8*r21))+(((0.43342)*cj15*gclwh6_12*pp*r20))+(((-0.05165202)*cj15*gclwh14_10*rxp1_2))+(((0.74858)*cj15*gclwh12_8*rxp0_2))+(((-0.86684)*cj15*gclwh6_12*npx*pz))+(((0.069)*gclwh14_10*pp*r20))+(((-0.86684)*cj15*gclwh8_12*npy*pz))+(((-0.003244495436)*cj15*gclwh4_12*r22))+(((-0.0096733172829)*gclwh12_10*r21))+(((0.0074858)*gclwh6_8*r20*sj15))+(((0.43342)*cj15*gclwh8_12*pp*r21))+(((-0.0096595172829)*cj15*gclwh8_10*r21))+(((-0.86684)*gclwh4_12*npz*pz*sj15))+(((-2.0)*gclwh12_8*npy*pz))+(((0.43342)*gclwh12_12*pp*r21))+((cj15*gclwh8_8*pp*r21))+(((0.0074858)*gclwh8_8*r21*sj15))+((gclwh12_8*pp*r21))+(((0.1399930041)*cj15*gclwh8_8*r21))+(((-0.1401930041)*gclwh14_8*r20))+(((-0.86684)*gclwh12_12*npy*pz)));
op[5]=((((-0.1044417846)*gclwh4_4*npz*pz*sj15))+(((0.74858)*cj15*gclwh12_3*pz*rxp0_2))+(((0.74858)*cj15*gclwh6_14*rxp1_2*rxp2_2))+(((-0.0005165202)*gclwh8_3*r21*sj15))+(((0.1397930041)*gclwh4_3*pz*r22*sj15))+(((-0.1399930041)*gclwh8_14*r21*rxp2_2*(cj15*cj15)))+(((-0.00138)*gclwh4_3*pz))+(((0.138)*cj15*gclwh8_3*npy*pz))+(((2.0)*gclwh14_3*npx*(pz*pz)))+(((0.1401930041)*cj15*gclwh14_14*r20*rxp2_2))+(((0.0005165202)*cj15*gclwh4_3*r22))+(((-0.74858)*gclwh12_8*r22*rxp0_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh6_8*r20*r22*sj15))+(((-0.0149716)*gclwh10_4*npz*rxp2_2*(cj15*cj15)))+(((-0.2801860082)*gclwh12_3*r22*rxp0_2*(cj15*cj15)))+(((0.00138)*cj15*gclwh10_3*rxp2_2))+(((0.05913)*cj15*gclwh8_10*pp*r21))+((cj15*gclwh12_10*npz*pp*r21))+(((0.5603720164)*gclwh12_4*npz*rxp0_2*(cj15*cj15)))+(((0.00733855819067956)*cj15*gclwh8_4*r21))+(((-2.0)*gclwh14_4*npx*pp*pz))+(((0.0074858)*gclwh6_3*pz*r20*sj15))+(((-0.004201790123)*cj15*gclwh8_3*r21*r22*sj15))+(((0.74858)*gclwh14_10*npz*rxp1_2*(cj15*cj15)))+(((-0.0149716)*cj15*gclwh4_3*pz*r22))+(((-0.02)*cj15*gclwh10_3*pz*rxp2_2))+(((2.0)*gclwh6_14*npx*pz*rxp2_2*(cj15*cj15)))+(((-0.02)*gclwh4_4*pp*pz))+(((-0.00138)*gclwh14_3*rxp1_2*sj15))+(((0.002803860082)*gclwh12_4*npz*r21*sj15))+(((0.74858)*gclwh10_3*pz*rxp2_2*sj15))+(((0.1399930041)*cj15*gclwh8_3*pz*r21))+(((2.0)*cj15*gclwh14_10*npx*npz*pz))+(((0.0004)*gclwh12_4*npz*rxp0_2*(sj15*sj15)))+(((-1.0)*gclwh8_14*pp*r21*rxp2_2*(cj15*cj15)))+(((0.039241231557934)*gclwh8_4*rxp0_2))+(((-0.1401930041)*cj15*gclwh14_10*npz*r20))+(((0.74858)*cj15*gclwh6_8*r22*rxp1_2))+(((0.000149716)*gclwh8_4*npz*r21*(sj15*sj15)))+(((0.00733855819067956)*cj15*gclwh6_4*r20))+(((-0.0011826)*cj15*gclwh10_10*rxp2_2))+(((-0.0149716)*cj15*gclwh14_3*r22*rxp1_2*sj15))+(((0.74858)*cj15*gclwh12_3*npy*pz*r22))+(((2.0)*cj15*gclwh4_8*npz*pz*r22*sj15))+(((-0.0096595172829)*gclwh4_3*r22*sj15))+(((-0.0096733172829)*gclwh12_3*r21))+(((0.00039241231557934)*gclwh8_4*r21*sj15))+(((0.0074858)*gclwh6_3*r22*rxp1_2*sj15))+(((0.001401930041)*gclwh14_3*r20*r22*sj15))+(((0.02)*gclwh4_3*(pz*pz)))+(((0.1401930041)*cj15*gclwh12_10*npz*r21))+(((-2.0)*cj15*gclwh14_14*npx*pz*rxp2_2))+(((-1.49716)*gclwh8_4*npy*npz*pz*(cj15*cj15)))+(((0.0442635354)*cj15*gclwh14_10*rxp1_2))+(((-0.069)*cj15*gclwh8_3*pp*r21))+(((0.02)*gclwh10_14*(cj15*cj15)*(rxp2_2*rxp2_2)))+(((0.1399930041)*gclwh6_10*npz*r20*(cj15*cj15)))+(((-0.0442635354)*gclwh6_10*rxp1_2))+(((0.74858)*gclwh6_4*pp*rxp1_2))+(((-0.05165202)*gclwh8_3*rxp0_2))+(((-0.0875721118)*cj15*gclwh8_4*pp*r21))+(((-0.069)*gclwh12_3*pp*r21))+(((0.00734904236913956)*gclwh12_4*r21))+(((0.02)*cj15*gclwh14_10*npz*rxp1_2*sj15))+(((-0.0096595172829)*cj15*gclwh6_3*r20))+(((0.02)*gclwh12_4*npz*pp*r21*sj15))+(((0.05165202)*gclwh6_3*rxp1_2))+(((0.74858)*gclwh8_3*npy*pz*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh8_10*npz*rxp0_2))+(((-2.0)*gclwh8_10*npy*npz*pz*(cj15*cj15)))+(((2.0)*gclwh4_4*npz*pp*pz*sj15))+(((-1.0)*cj15*gclwh14_10*npz*pp*r20))+(((0.00733855819067956)*gclwh4_4*r22*sj15))+(((-0.1399930041)*gclwh8_8*r21*r22*(cj15*cj15)))+(((-0.74858)*gclwh14_14*rxp1_2*rxp2_2*(cj15*cj15)))+(((-0.04)*cj15*gclwh8_4*npy*npz*pz*sj15))+(((0.0299432)*cj15*gclwh14_4*npz*rxp1_2*sj15))+(((-0.05165202)*cj15*gclwh12_3*rxp0_2))+(((-0.37429)*gclwh8_3*pp*r21*r22*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh12_4*npz*r21))+(((-0.0002)*gclwh14_3*r22*rxp1_2*(sj15*sj15)))+(((0.000442635354)*gclwh8_10*r21*sj15))+(((0.008289612332433)*gclwh12_10*r21))+(((0.1399930041)*cj15*gclwh6_3*pz*r20))+(((-0.01)*gclwh4_3*pp*(r22*r22)*(sj15*sj15)))+(((-0.2801860082)*cj15*gclwh8_3*r22*rxp0_2))+(((-0.11826)*cj15*gclwh8_10*npy*pz))+(((-0.37429)*gclwh6_3*pp*r20*r22*(cj15*cj15)))+(((2.0)*gclwh8_8*npy*pz*r22*(cj15*cj15)))+(((-2.0)*gclwh4_3*npz*sj15*(pz*pz)))+(((-0.11826)*cj15*gclwh6_10*npx*pz))+(((0.0442635354)*gclwh8_10*rxp0_2))+(((-0.1399930041)*gclwh6_8*r20*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh4_4*npz*pp*r22*sj15))+(((0.0074858)*cj15*gclwh4_4*pp*r22))+(((-1.0)*cj15*gclwh8_4*r21*(pp*pp)))+(((-0.37429)*cj15*gclwh12_3*pp*r21*r22))+(((0.5603720164)*cj15*gclwh8_4*npz*rxp0_2))+(((-1.0)*gclwh6_14*pp*r20*rxp2_2*(cj15*cj15)))+(((-0.0074858)*gclwh10_3*r22*rxp2_2*(sj15*sj15)))+(((-0.02)*gclwh14_4*npz*pp*r20*sj15))+(((0.138)*gclwh4_3*npz*pz*sj15))+(((2.0)*cj15*gclwh6_4*npx*pp*pz))+(((0.0011826)*gclwh14_10*rxp1_2*sj15))+(((-0.00734904236913956)*gclwh14_4*r20))+((gclwh6_10*npz*pp*r20*(cj15*cj15)))+(((0.0096733172829)*gclwh14_3*r20))+(((-0.01)*cj15*gclwh8_3*pp*r21*r22*sj15))+(((0.01)*gclwh14_3*pp*r20*r22*sj15))+(((-0.004201790123)*cj15*gclwh6_3*r20*r22*sj15))+(((0.001048417846)*gclwh12_4*rxp0_2*sj15))+(((-0.05913)*gclwh14_10*pp*r20))+(((-7.4858e-5)*gclwh8_3*r21*r22*(sj15*sj15)))+(((-0.74858)*gclwh6_3*pz*rxp1_2))+(((0.104795963009178)*gclwh8_4*npz*r21*(cj15*cj15)))+(((-0.0074858)*gclwh8_4*pp*r21*sj15))+(((-0.74858)*cj15*gclwh14_3*npx*pz*r22))+(((0.11826)*gclwh14_10*npx*pz))+(((0.138)*gclwh12_3*npy*pz))+(((-0.02)*cj15*gclwh14_14*rxp1_2*rxp2_2*sj15))+(((0.0149716)*cj15*gclwh4_4*npz*pz))+(((0.008403580246)*cj15*gclwh8_4*npz*r21*sj15))+(((-0.02)*gclwh12_4*pp*rxp0_2*sj15))+(((2.0)*gclwh12_4*npy*pp*pz))+(((0.2801860082)*cj15*gclwh6_3*r22*rxp1_2))+(((0.5603720164)*gclwh14_4*npz*rxp1_2*(cj15*cj15)))+(((0.0011826)*gclwh12_10*rxp0_2*sj15))+(((-0.04)*gclwh12_4*npy*npz*pz*sj15))+(((-0.052472839504589)*cj15*gclwh12_3*r21*r22))+(((2.0)*cj15*gclwh8_4*npy*pp*pz))+(((0.05913)*gclwh12_10*pp*r21))+(((0.039241231557934)*cj15*gclwh12_4*rxp0_2))+(((-0.1048417846)*cj15*gclwh6_4*npx*pz))+(((0.0004)*gclwh14_4*npz*rxp1_2*(sj15*sj15)))+(((0.039241231557934)*cj15*gclwh14_4*rxp1_2))+(((0.0074858)*gclwh8_3*pz*r21*sj15))+(((0.37429)*cj15*gclwh14_3*pp*r20*r22))+(((1.49716)*cj15*gclwh14_4*npx*npz*pz))+(((-1.0)*gclwh4_4*r22*sj15*(pp*pp)))+(((-0.00138)*gclwh12_3*rxp0_2*sj15))+(((-0.104945679009178)*cj15*gclwh14_4*npz*r20))+(((0.000149716)*gclwh6_4*npz*r20*(sj15*sj15)))+(((-0.0002)*gclwh12_3*r22*rxp0_2*(sj15*sj15)))+(((-0.0074858)*cj15*gclwh8_8*r21*r22*sj15))+(((-0.001399930041)*gclwh4_3*(r22*r22)*(sj15*sj15)))+(((-1.49716)*cj15*gclwh4_4*pz*sj15*(npz*npz)))+(((-0.02)*cj15*gclwh4_8*pz*r22))+(((0.74858)*cj15*gclwh10_10*npz*rxp2_2*sj15))+(((-2.0)*cj15*gclwh12_10*npy*npz*pz))+(((-0.02)*gclwh10_10*npz*rxp2_2*(cj15*cj15)))+(((-1.0)*cj15*gclwh12_8*pp*r21*r22))+(((0.002799860082)*gclwh4_4*npz*r22*(sj15*sj15)))+(((-0.04)*cj15*gclwh6_4*npx*npz*pz*sj15))+(((-2.0)*gclwh6_10*npx*npz*pz*(cj15*cj15)))+(((0.0074858)*gclwh4_8*(cj15*cj15)*(r22*r22)))+(((-0.069)*cj15*gclwh6_3*pp*r20))+(((0.00039241231557934)*gclwh6_4*r20*sj15))+(((-0.0875721118)*gclwh4_4*pp*r22*sj15))+(((-0.0074858)*cj15*gclwh8_14*r21*rxp2_2*sj15))+((gclwh8_10*npz*pp*r21*(cj15*cj15)))+(((-0.0074858)*gclwh8_3*r22*rxp0_2*sj15))+(((-0.74858)*cj15*gclwh10_8*r22*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh14_4*npz*pp*r20))+(((-0.0074858)*cj15*gclwh6_14*r20*rxp2_2*sj15))+(((-1.0)*cj15*gclwh6_4*r20*(pp*pp)))+(((-0.039241231557934)*gclwh6_4*rxp1_2))+(((-0.001048417846)*cj15*gclwh10_4*rxp2_2))+(((-0.2799860082)*cj15*gclwh10_3*r22*rxp2_2*sj15))+(((0.04)*gclwh14_4*npx*npz*pz*sj15))+(((-0.052323123504589)*cj15*gclwh4_3*sj15*(r22*r22)))+(((0.74858)*gclwh6_3*npx*pz*r22*(cj15*cj15)))+(((-1.0)*gclwh14_3*pp*pz*r20))+(((0.1401930041)*gclwh12_3*pz*r21))+(((0.0442635354)*gclwh10_10*rxp2_2*sj15))+(((0.02)*cj15*gclwh12_10*npz*rxp0_2*sj15))+(((-0.0149716)*cj15*gclwh12_3*r22*rxp0_2*sj15))+((gclwh4_3*pp*pz*r22*sj15))+(((0.02)*gclwh14_3*pz*rxp1_2*sj15))+(((0.02)*gclwh4_4*npz*pp*r22*(sj15*sj15)))+(((0.1399930041)*gclwh8_10*npz*r21*(cj15*cj15)))+(((-1.49716)*cj15*gclwh12_4*npy*npz*pz))+(((0.0877721118)*gclwh14_4*pp*r20))+(((-0.74858)*cj15*gclwh8_14*rxp0_2*rxp2_2))+(((-0.0875721118)*cj15*gclwh6_4*pp*r20))+(((-0.74858)*cj15*gclwh10_14*sj15*(rxp2_2*rxp2_2)))+(((0.02)*cj15*gclwh6_4*npz*pp*r20*sj15))+(((-0.01)*gclwh12_3*pp*r21*r22*sj15))+(((0.74858)*gclwh6_4*npz*pp*r20*(cj15*cj15)))+(((2.0)*gclwh8_14*npy*pz*rxp2_2*(cj15*cj15)))+((gclwh14_4*r20*(pp*pp)))+(((-0.5603720164)*cj15*gclwh6_4*npz*rxp1_2))+(((-0.05165202)*cj15*gclwh14_3*rxp1_2))+(((-0.02)*cj15*gclwh12_14*rxp0_2*rxp2_2*sj15))+(((-0.02)*gclwh14_3*npx*pz*r22*sj15))+(((-0.74858)*cj15*gclwh14_4*pp*rxp1_2))+(((2.0)*gclwh6_8*npx*pz*r22*(cj15*cj15)))+(((0.02)*gclwh4_3*npz*pz*r22*(sj15*sj15)))+(((-0.1048417846)*gclwh12_4*npy*pz))+(((-2.0)*cj15*gclwh14_8*npx*pz*r22))+(((-1.0)*cj15*gclwh4_8*pp*sj15*(r22*r22)))+(((0.74858)*gclwh12_10*npz*rxp0_2*(cj15*cj15)))+(((-0.11826)*gclwh12_10*npy*pz))+(((-0.37429)*cj15*gclwh4_3*pp*sj15*(r22*r22)))+(((0.74858)*cj15*gclwh12_4*npz*pp*r21))+(((-0.0096595172829)*cj15*gclwh8_3*r21))+(((-0.04)*gclwh4_4*pz*(npz*npz)*(sj15*sj15)))+(((0.1048417846)*gclwh14_4*npx*pz))+(((0.0074858)*gclwh10_3*r22*rxp2_2*(cj15*cj15)))+(((-0.00039241231557934)*cj15*gclwh4_4*r22))+(((-0.74858)*cj15*gclwh12_4*pp*rxp0_2))+(((-0.74858)*gclwh8_4*pp*rxp0_2))+(((-0.008289612332433)*gclwh14_10*r20))+(((0.05913)*cj15*gclwh6_10*pp*r20))+(((0.039241231557934)*gclwh10_4*rxp2_2*sj15))+(((-0.02)*cj15*gclwh12_8*r22*rxp0_2*sj15))+(((-1.0)*gclwh12_4*r21*(pp*pp)))+(((2.0)*cj15*gclwh12_8*npy*pz*r22))+(((0.000442635354)*gclwh6_10*r20*sj15))+(((0.74858)*gclwh8_3*pz*rxp0_2))+(((0.069)*gclwh14_3*pp*r20))+(((0.008277786332433)*cj15*gclwh8_10*r21))+(((-0.2801860082)*gclwh14_3*r22*rxp1_2*(cj15*cj15)))+(((-0.0074858)*gclwh6_4*pp*r20*sj15))+(((-0.0005165202)*gclwh6_3*r20*sj15))+(((-0.74858)*cj15*gclwh8_8*r22*rxp0_2))+((cj15*gclwh14_14*pp*r20*rxp2_2))+(((0.74858)*gclwh8_4*npz*pp*r21*(cj15*cj15)))+(((0.002801860082)*gclwh4_3*(cj15*cj15)*(r22*r22)))+(((0.001048417846)*gclwh4_4*pz))+(((0.104795963009178)*gclwh6_4*npz*r20*(cj15*cj15)))+(((-0.02)*gclwh14_4*pp*rxp1_2*sj15))+(((-0.002803860082)*gclwh14_4*npz*r20*sj15))+(((-0.74858)*gclwh12_14*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.74858)*cj15*gclwh4_3*npz*pz*r22*sj15))+(((0.02)*cj15*gclwh10_4*pp*rxp2_2))+(((0.74858)*cj15*gclwh14_3*pz*rxp1_2))+(((-0.1401930041)*gclwh14_3*pz*r20))+((cj15*gclwh8_3*pp*pz*r21))+(((-0.74858)*gclwh14_8*r22*rxp1_2*(cj15*cj15)))+(((-1.0)*gclwh6_8*pp*r20*r22*(cj15*cj15)))+(((0.1401930041)*cj15*gclwh14_8*r20*r22))+(((0.104646247009178)*cj15*gclwh4_4*npz*r22*sj15))+(((-0.74858)*cj15*gclwh6_10*npz*rxp1_2))+(((2.0)*cj15*gclwh12_14*npy*pz*rxp2_2))+(((0.0149716)*gclwh8_4*npz*rxp0_2*sj15))+(((0.0074858)*cj15*gclwh6_10*npz*r20*sj15))+(((0.0074858)*cj15*gclwh8_10*npz*r21*sj15))+(((-0.05165202)*gclwh10_3*rxp2_2*sj15))+(((-7.4858e-5)*gclwh6_3*r20*r22*(sj15*sj15)))+(((-0.001401930041)*gclwh12_3*r21*r22*sj15))+(((-0.0149716)*gclwh6_4*npz*rxp1_2*sj15))+(((-0.74858)*gclwh10_4*pp*rxp2_2*sj15))+(((0.138)*cj15*gclwh6_3*npx*pz))+(((-0.069)*gclwh4_3*pp*r22*sj15))+(((0.02)*gclwh12_3*pz*rxp0_2*sj15))+(((0.02)*gclwh12_3*npy*pz*r22*sj15))+(((0.008403580246)*cj15*gclwh6_4*npz*r20*sj15))+(((-0.052397981504589)*gclwh8_3*r21*r22*(cj15*cj15)))+(((-0.1048417846)*cj15*gclwh8_4*npy*pz))+(((0.0442635354)*cj15*gclwh12_10*rxp0_2))+((cj15*gclwh6_3*pp*pz*r20))+(((-2.0)*cj15*gclwh6_3*npx*(pz*pz)))+(((0.02)*cj15*gclwh8_4*npz*pp*r21*sj15))+(((-0.0877721118)*gclwh12_4*pp*r21))+(((-0.1399930041)*cj15*gclwh4_8*sj15*(r22*r22)))+(((-0.052397981504589)*gclwh6_3*r20*r22*(cj15*cj15)))+(((0.5599720164)*cj15*gclwh10_4*npz*rxp2_2*sj15))+((gclwh12_3*pp*pz*r21))+(((0.02)*cj15*gclwh6_3*npx*pz*r22*sj15))+(((0.0149716)*gclwh10_4*npz*rxp2_2*(sj15*sj15)))+(((0.02)*cj15*gclwh8_3*npy*pz*r22*sj15))+(((-0.138)*gclwh14_3*npx*pz))+(((-0.01)*cj15*gclwh6_3*pp*r20*r22*sj15))+(((0.052472839504589)*cj15*gclwh14_3*r20*r22))+(((0.02)*gclwh10_8*r22*rxp2_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh12_14*r21*rxp2_2))+(((0.0299432)*cj15*gclwh12_4*npz*rxp0_2*sj15))+(((-0.1401930041)*cj15*gclwh12_8*r21*r22))+(((0.008277786332433)*cj15*gclwh6_10*r20))+(((-1.0)*cj15*gclwh12_14*pp*r21*rxp2_2))+(((-1.49716)*gclwh6_4*npx*npz*pz*(cj15*cj15)))+(((0.001048417846)*gclwh14_4*rxp1_2*sj15))+(((-0.005603720164)*gclwh4_4*npz*r22*(cj15*cj15)))+(((-2.0)*cj15*gclwh8_3*npy*(pz*pz)))+((cj15*gclwh14_8*pp*r20*r22))+(((-0.1399930041)*gclwh6_14*r20*rxp2_2*(cj15*cj15)))+(((-0.02)*cj15*gclwh14_8*r22*rxp1_2*sj15))+(((-2.0)*gclwh12_3*npy*(pz*pz)))+(((-1.0)*gclwh8_8*pp*r21*r22*(cj15*cj15))));
IkReal x156=(gclwh13_15*r21);
IkReal x157=(gclwh15_15*r20);
IkReal x158=(gclwh7_15*rxp1_2);
IkReal x159=(gclwh9_15*rxp0_2);
IkReal x160=(cj15*gclwh11_15*rxp2_2);
IkReal x161=(cj15*gclwh13_15*rxp0_2);
IkReal x162=(cj15*gclwh15_15*rxp1_2);
IkReal x163=(cj15*gclwh7_15*r20);
IkReal x164=(cj15*gclwh9_15*r21);
IkReal x165=(gclwh11_15*rxp2_2*sj15);
IkReal x166=(gclwh13_15*npy*pz);
IkReal x167=(gclwh13_15*pp*r21);
IkReal x168=(gclwh13_15*rxp0_2*sj15);
IkReal x169=(gclwh15_15*npx*pz);
IkReal x170=(gclwh15_15*pp*r20);
IkReal x171=(gclwh15_15*rxp1_2*sj15);
IkReal x172=(gclwh7_15*r20*sj15);
IkReal x173=(gclwh9_15*r21*sj15);
IkReal x174=(cj15*gclwh7_15*npx*pz);
IkReal x175=(cj15*gclwh7_15*pp*r20);
IkReal x176=(cj15*gclwh9_15*npy*pz);
IkReal x177=(cj15*gclwh9_15*pp*r21);
IkReal x178=(gclwh13_6*r21);
IkReal x179=(gclwh15_6*r20);
IkReal x180=(gclwh5_6*pz);
IkReal x181=((1.49716)*rxp1_2);
IkReal x182=((1.49716)*rxp0_2);
IkReal x183=(gclwh11_6*rxp2_2);
IkReal x184=((0.2799860082)*cj15);
IkReal x185=(gclwh7_6*r20);
IkReal x186=(gclwh9_6*r21);
IkReal x187=((4.0)*npy*pz);
IkReal x188=((2.0)*pp);
IkReal x189=((0.04)*sj15);
IkReal x190=((4.0)*npx*pz);
IkReal x191=(gclwh5_6*r22*sj15);
IkReal x192=((0.0149716)*sj15);
IkReal x193=((2.0)*cj15*pp);
op[6]=((((-0.138)*gclwh5_0*npz*pz*sj15))+(((0.039241231557934)*cj15*gclwh13_1*rxp0_2))+((gclwh13_0*pp*pz*r21))+(((0.039241231557934)*gclwh9_1*rxp0_2))+(((-0.1399930041)*gclwh7_11*npz*r20*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh13_1*npz*r21))+(((-0.1048417846)*gclwh13_1*npy*pz))+(((-2.0)*cj15*gclwh15_11*npx*npz*pz))+(((0.05165202)*cj15*gclwh15_0*rxp1_2))+(((0.1397930041)*gclwh5_0*pz*r22*sj15))+(((-0.069)*gclwh15_0*pp*r20))+(((-0.001048417846)*cj15*gclwh11_1*rxp2_2))+(((-0.02)*gclwh15_1*pp*rxp1_2*sj15))+(((0.02)*cj15*gclwh15_9*r22*rxp1_2*sj15))+(((0.74858)*gclwh9_0*npy*pz*r22*(cj15*cj15)))+(((0.5603720164)*gclwh15_1*npz*rxp1_2*(cj15*cj15)))+(((2.0)*gclwh9_11*npy*npz*pz*(cj15*cj15)))+(((-0.1401930041)*gclwh15_0*pz*r20))+(((0.069)*gclwh5_0*pp*r22*sj15))+(((0.1399930041)*gclwh9_15*r21*rxp2_2*(cj15*cj15)))+(((-0.002803860082)*gclwh15_1*npz*r20*sj15))+(((0.113235291341611)*gclwh13_11*r21))+(((-0.00734904236913956)*gclwh15_1*r20))+(((-0.02)*gclwh15_0*npx*pz*r22*sj15))+(((-0.1048417846)*cj15*gclwh7_1*npx*pz))+(((-0.74858)*cj15*gclwh11_11*npz*rxp2_2*sj15))+(((-2.0)*cj15*gclwh9_0*npy*(pz*pz)))+(((0.008403580246)*cj15*gclwh7_1*npz*r20*sj15))+(((0.74858)*cj15*gclwh11_15*sj15*(rxp2_2*rxp2_2)))+(((-0.1399930041)*gclwh9_11*npz*r21*(cj15*cj15)))+(((0.74858)*gclwh13_9*r22*rxp0_2*(cj15*cj15)))+((gclwh7_9*pp*r20*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh11_9*r22*rxp2_2*sj15))+(((0.113073749341611)*cj15*gclwh7_11*r20))+(((-0.01)*gclwh5_0*pp*(r22*r22)*(sj15*sj15)))+(((-0.0074858)*cj15*gclwh7_11*npz*r20*sj15))+(((-2.0)*gclwh5_0*npz*sj15*(pz*pz)))+(((-0.02)*cj15*gclwh11_0*pz*rxp2_2))+(((0.05165202)*gclwh9_0*rxp0_2))+((gclwh9_9*pp*r21*r22*(cj15*cj15)))+(((-0.5603720164)*cj15*gclwh7_1*npz*rxp1_2))+(((0.00138)*gclwh5_0*pz))+(((-0.0149716)*cj15*gclwh15_0*r22*rxp1_2*sj15))+(((0.74858)*cj15*gclwh5_0*npz*pz*r22*sj15))+(((-0.138)*gclwh13_0*npy*pz))+(((0.0299432)*cj15*gclwh15_1*npz*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_9*r22*rxp0_2*sj15))+(((0.02)*gclwh5_0*npz*pz*r22*(sj15*sj15)))+(((-0.02)*gclwh11_15*(cj15*cj15)*(rxp2_2*rxp2_2)))+((cj15*gclwh7_0*pp*pz*r20))+(((-0.0161542)*cj15*gclwh11_11*rxp2_2))+(((-0.04)*gclwh5_1*pz*(npz*npz)*(sj15*sj15)))+(((2.0)*cj15*gclwh9_1*npy*pp*pz))+(((0.74858)*cj15*gclwh13_0*pz*rxp0_2))+(((0.0096595172829)*gclwh5_0*r22*sj15))+(((-1.49716)*cj15*gclwh13_1*npy*npz*pz))+(((0.02)*gclwh13_0*pz*rxp0_2*sj15))+(((0.74858)*cj15*gclwh13_1*npz*pp*r21))+(((-0.113235291341611)*gclwh15_11*r20))+(((-1.0)*gclwh5_1*r22*sj15*(pp*pp)))+(((0.74858)*gclwh7_1*npz*pp*r20*(cj15*cj15)))+(((0.05165202)*cj15*gclwh13_0*rxp0_2))+(((-0.0149716)*gclwh11_1*npz*rxp2_2*(cj15*cj15)))+(((-1.49716)*gclwh9_1*npy*npz*pz*(cj15*cj15)))+(((0.002801860082)*gclwh5_0*(cj15*cj15)*(r22*r22)))+(((0.02)*gclwh13_1*npz*pp*r21*sj15))+(((0.0161542)*gclwh13_11*rxp0_2*sj15))+(((0.0074858)*cj15*gclwh9_15*r21*rxp2_2*sj15))+(((-0.0096733172829)*gclwh15_0*r20))+(((-7.4858e-5)*gclwh7_0*r20*r22*(sj15*sj15)))+(((-0.001399930041)*gclwh5_0*(r22*r22)*(sj15*sj15)))+(((2.0)*gclwh5_1*npz*pp*pz*sj15))+(((0.0074858)*cj15*gclwh9_9*r21*r22*sj15))+(((0.02)*gclwh5_0*(pz*pz)))+(((-1.61542)*cj15*gclwh9_11*npy*pz))+(((0.1399930041)*gclwh7_15*r20*rxp2_2*(cj15*cj15)))+(((0.0149716)*gclwh9_1*npz*rxp0_2*sj15))+(((-1.0)*gclwh9_11*npz*pp*r21*(cj15*cj15)))+((cj15*gclwh9_0*pp*pz*r21))+(((-0.04)*cj15*gclwh7_1*npx*npz*pz*sj15))+(((0.02)*cj15*gclwh5_9*pz*r22))+(((0.1401930041)*gclwh13_0*pz*r21))+(((-1.0)*cj15*gclwh15_9*pp*r20*r22))+(((-0.138)*cj15*gclwh9_0*npy*pz))+(((0.5599720164)*cj15*gclwh11_1*npz*rxp2_2*sj15))+(((0.0096595172829)*cj15*gclwh9_0*r21))+(((0.0299432)*cj15*gclwh13_1*npz*rxp0_2*sj15))+(((-0.04)*cj15*gclwh9_1*npy*npz*pz*sj15))+(((-0.02)*gclwh15_1*npz*pp*r20*sj15))+(((-0.039241231557934)*gclwh7_1*rxp1_2))+(((-0.02)*gclwh11_9*r22*rxp2_2*(cj15*cj15)))+(((-0.02)*gclwh13_1*pp*rxp0_2*sj15))+(((0.74858)*gclwh9_1*npz*pp*r21*(cj15*cj15)))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.74858)*cj15*gclwh15_1*pp*rxp1_2))+(((0.1401930041)*cj15*gclwh15_11*npz*r20))+(((0.04)*gclwh15_1*npx*npz*pz*sj15))+(((0.0074858)*gclwh7_0*r22*rxp1_2*sj15))+(((-0.0002)*gclwh13_0*r22*rxp0_2*(sj15*sj15)))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((0.0096595172829)*cj15*gclwh7_0*r20))+(((0.02)*gclwh5_1*npz*pp*r22*(sj15*sj15)))+(((-0.02)*gclwh5_1*pp*pz))+(((0.0074858)*gclwh7_0*pz*r20*sj15))+(((-0.052397981504589)*gclwh9_0*r21*r22*(cj15*cj15)))+(((-1.61542)*cj15*gclwh7_11*npx*pz))+(((-0.052472839504589)*cj15*gclwh13_0*r21*r22))+(((-2.0)*cj15*gclwh13_15*npy*pz*rxp2_2))+(((-1.0)*cj15*gclwh9_1*r21*(pp*pp)))+(((-0.74858)*gclwh11_1*pp*rxp2_2*sj15))+(((0.74858)*cj15*gclwh13_0*npy*pz*r22))+(((-0.04)*gclwh13_1*npy*npz*pz*sj15))+(((0.0074858)*gclwh11_0*r22*rxp2_2*(cj15*cj15)))+(((-7.4858e-5)*gclwh9_0*r21*r22*(sj15*sj15)))+(((0.1399930041)*cj15*gclwh5_9*sj15*(r22*r22)))+(((0.01)*gclwh15_0*pp*r20*r22*sj15))+(((-0.6046355518)*gclwh7_11*rxp1_2))+(((0.37429)*cj15*gclwh15_0*pp*r20*r22))+(((0.05165202)*gclwh11_0*rxp2_2*sj15))+(((2.0)*gclwh7_11*npx*npz*pz*(cj15*cj15)))+(((0.74858)*gclwh7_1*pp*rxp1_2))+(((0.052472839504589)*cj15*gclwh15_0*r20*r22))+(((-1.49716)*cj15*gclwh5_1*pz*sj15*(npz*npz)))+(((0.00138)*gclwh13_0*rxp0_2*sj15))+(((0.6046355518)*cj15*gclwh13_11*rxp0_2))+(((0.74858)*gclwh7_0*npx*pz*r22*(cj15*cj15)))+(((0.00039241231557934)*gclwh9_1*r21*sj15))+(((-0.01)*cj15*gclwh7_0*pp*r20*r22*sj15))+(((0.0074858)*gclwh9_0*pz*r21*sj15))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((0.000149716)*gclwh9_1*npz*r21*(sj15*sj15)))+(((0.039241231557934)*gclwh11_1*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh7_9*r22*rxp1_2))+(((-0.1048417846)*cj15*gclwh9_1*npy*pz))+(((0.001048417846)*gclwh5_1*pz))+(((-0.2801860082)*cj15*gclwh9_0*r22*rxp0_2))+(((0.006046355518)*gclwh9_11*r21*sj15))+(((-0.02)*cj15*gclwh13_11*npz*rxp0_2*sj15))+(((-2.0)*gclwh7_15*npx*pz*rxp2_2*(cj15*cj15)))+(((-1.0)*cj15*gclwh7_1*r20*(pp*pp)))+(((0.74858)*gclwh9_0*pz*rxp0_2))+(((-1.49716)*gclwh7_1*npx*npz*pz*(cj15*cj15)))+(((-0.0875721118)*gclwh5_1*pp*r22*sj15))+(((-0.00039241231557934)*cj15*gclwh5_1*r22))+(((0.001048417846)*gclwh13_1*rxp0_2*sj15))+(((-0.2801860082)*gclwh15_0*r22*rxp1_2*(cj15*cj15)))+(((0.0074858)*cj15*gclwh7_9*r20*r22*sj15))+(((-0.1044417846)*gclwh5_1*npz*pz*sj15))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.01)*cj15*gclwh9_0*pp*r21*r22*sj15))+(((0.80771)*gclwh13_11*pp*r21))+(((0.00039241231557934)*gclwh7_1*r20*sj15))+(((-0.2799860082)*cj15*gclwh11_0*r22*rxp2_2*sj15))+(((0.069)*gclwh13_0*pp*r21))+(((-0.74858)*cj15*gclwh9_11*npz*rxp0_2))+(((0.069)*cj15*gclwh9_0*pp*r21))+(((-0.01)*gclwh13_0*pp*r21*r22*sj15))+(((0.02)*cj15*gclwh7_1*npz*pp*r20*sj15))+(((-1.0)*cj15*gclwh15_15*pp*r20*rxp2_2))+(((-2.0)*cj15*gclwh7_0*npx*(pz*pz)))+(((0.5603720164)*cj15*gclwh9_1*npz*rxp0_2))+(((0.74858)*cj15*gclwh9_9*r22*rxp0_2))+(((0.138)*gclwh15_0*npx*pz))+(((0.104646247009178)*cj15*gclwh5_1*npz*r22*sj15))+(((-2.0)*gclwh7_9*npx*pz*r22*(cj15*cj15)))+((cj15*gclwh13_15*pp*r21*rxp2_2))+(((0.1399930041)*cj15*gclwh7_0*pz*r20))+(((0.0004)*gclwh13_1*npz*rxp0_2*(sj15*sj15)))+(((2.0)*cj15*gclwh15_9*npx*pz*r22))+(((0.02)*gclwh15_0*pz*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_15*rxp0_2*rxp2_2*sj15))+(((1.49716)*cj15*gclwh15_1*npx*npz*pz))+(((-0.0074858)*gclwh7_1*pp*r20*sj15))+(((-0.1401930041)*cj15*gclwh15_9*r20*r22))+(((-0.1401930041)*cj15*gclwh13_11*npz*r21))+(((-1.61542)*gclwh13_11*npy*pz))+(((0.039241231557934)*cj15*gclwh15_1*rxp1_2))+(((0.0149716)*cj15*gclwh5_1*npz*pz))+(((0.0096733172829)*gclwh13_0*r21))+(((-0.74858)*gclwh13_11*npz*rxp0_2*(cj15*cj15)))+(((0.002799860082)*gclwh5_1*npz*r22*(sj15*sj15)))+(((-0.001401930041)*gclwh13_0*r21*r22*sj15))+(((-2.0)*gclwh9_9*npy*pz*r22*(cj15*cj15)))+(((-0.0074858)*gclwh11_0*r22*rxp2_2*(sj15*sj15)))+(((-0.37429)*gclwh9_0*pp*r21*r22*(cj15*cj15)))+(((-2.0)*cj15*gclwh13_9*npy*pz*r22))+(((0.2801860082)*cj15*gclwh7_0*r22*rxp1_2))+(((0.104795963009178)*gclwh9_1*npz*r21*(cj15*cj15)))+((cj15*gclwh5_9*pp*sj15*(r22*r22)))+((cj15*gclwh15_11*npz*pp*r20))+(((-0.74858)*cj15*gclwh15_1*npz*pp*r20))+(((0.1399930041)*gclwh9_9*r21*r22*(cj15*cj15)))+(((2.0)*cj15*gclwh15_15*npx*pz*rxp2_2))+(((0.008403580246)*cj15*gclwh9_1*npz*r21*sj15))+(((0.74858)*gclwh13_15*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.1399930041)*gclwh7_9*r20*r22*(cj15*cj15)))+(((-0.37429)*cj15*gclwh5_0*pp*sj15*(r22*r22)))+(((-0.0005165202)*cj15*gclwh5_0*r22))+(((-1.0)*gclwh7_11*npz*pp*r20*(cj15*cj15)))+(((0.1401930041)*cj15*gclwh13_15*r21*rxp2_2))+(((-0.74858)*cj15*gclwh15_0*npx*pz*r22))+(((-0.138)*cj15*gclwh7_0*npx*pz))+(((-0.004201790123)*cj15*gclwh7_0*r20*r22*sj15))+(((0.6046355518)*gclwh11_11*rxp2_2*sj15))+(((0.0074858)*cj15*gclwh7_15*r20*rxp2_2*sj15))+((gclwh5_0*pp*pz*r22*sj15))+(((0.001401930041)*gclwh15_0*r20*r22*sj15))+(((-0.0149716)*cj15*gclwh13_0*r22*rxp0_2*sj15))+(((0.74858)*gclwh15_15*rxp1_2*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh15_9*r22*rxp1_2*(cj15*cj15)))+(((-0.05165202)*gclwh7_0*rxp1_2))+(((0.02)*cj15*gclwh11_1*pp*rxp2_2))+(((-0.0875721118)*cj15*gclwh7_1*pp*r20))+(((0.80771)*cj15*gclwh9_11*pp*r21))+(((0.02)*cj15*gclwh7_0*npx*pz*r22*sj15))+(((-0.0074858)*gclwh5_9*(cj15*cj15)*(r22*r22)))+(((1.61542)*gclwh15_11*npx*pz))+(((0.74858)*cj15*gclwh15_0*pz*rxp1_2))+(((0.0074858)*cj15*gclwh5_1*pp*r22))+(((0.0149716)*gclwh11_1*npz*rxp2_2*(sj15*sj15)))+(((0.00734904236913956)*gclwh13_1*r21))+((cj15*gclwh13_9*pp*r21*r22))+(((0.02)*gclwh13_0*npy*pz*r22*sj15))+(((-0.0074858)*cj15*gclwh9_11*npz*r21*sj15))+(((-0.37429)*cj15*gclwh13_0*pp*r21*r22))+(((-0.74858)*cj15*gclwh13_1*pp*rxp0_2))+(((-0.0002)*gclwh15_0*r22*rxp1_2*(sj15*sj15)))+(((-0.004201790123)*cj15*gclwh9_0*r21*r22*sj15))+(((2.0)*cj15*gclwh7_1*npx*pp*pz))+(((0.74858)*gclwh11_0*pz*rxp2_2*sj15))+(((0.1401930041)*cj15*gclwh13_9*r21*r22))+(((0.1399930041)*cj15*gclwh9_0*pz*r21))+(((-0.74858)*gclwh15_11*npz*rxp1_2*(cj15*cj15)))+(((0.1048417846)*gclwh15_1*npx*pz))+(((0.104795963009178)*gclwh7_1*npz*r20*(cj15*cj15)))+(((0.000149716)*gclwh7_1*npz*r20*(sj15*sj15)))+(((-0.74858)*cj15*gclwh7_15*rxp1_2*rxp2_2))+(((0.02)*cj15*gclwh9_1*npz*pp*r21*sj15))+(((0.00733855819067956)*cj15*gclwh9_1*r21))+(((2.0)*cj15*gclwh13_11*npy*npz*pz))+(((-0.37429)*gclwh7_0*pp*r20*r22*(cj15*cj15)))+(((0.0004)*gclwh15_1*npz*rxp1_2*(sj15*sj15)))+(((-1.0)*cj15*gclwh13_11*npz*pp*r21))+(((0.02)*cj15*gclwh15_15*rxp1_2*rxp2_2*sj15))+(((0.00138)*gclwh15_0*rxp1_2*sj15))+(((0.6046355518)*cj15*gclwh15_11*rxp1_2))+(((0.0005165202)*gclwh7_0*r20*sj15))+(((0.5603720164)*gclwh13_1*npz*rxp0_2*(cj15*cj15)))+(((-0.74858)*gclwh7_0*pz*rxp1_2))+((gclwh15_1*r20*(pp*pp)))+(((0.74858)*cj15*gclwh7_11*npz*rxp1_2))+(((-0.0074858)*gclwh9_1*pp*r21*sj15))+(((-0.80771)*gclwh15_11*pp*r20))+(((0.00733855819067956)*cj15*gclwh7_1*r20))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.0149716)*cj15*gclwh5_0*pz*r22))+(((-0.1401930041)*cj15*gclwh15_15*r20*rxp2_2))+(((0.74858)*cj15*gclwh5_1*npz*pp*r22*sj15))+(((-0.02)*cj15*gclwh15_11*npz*rxp1_2*sj15))+(((0.006046355518)*gclwh7_11*r20*sj15))+(((-2.0)*cj15*gclwh5_9*npz*pz*r22*sj15))+(((-0.0074858)*gclwh9_0*r22*rxp0_2*sj15))+(((-0.0875721118)*cj15*gclwh9_1*pp*r21))+(((-0.052397981504589)*gclwh7_0*r20*r22*(cj15*cj15)))+(((0.0005165202)*gclwh9_0*r21*sj15))+(((0.02)*gclwh11_11*npz*rxp2_2*(cj15*cj15)))+(((-0.052323123504589)*cj15*gclwh5_0*sj15*(r22*r22)))+(((0.0161542)*gclwh15_11*rxp1_2*sj15))+(((-0.104945679009178)*cj15*gclwh15_1*npz*r20))+(((0.113073749341611)*cj15*gclwh9_11*r21))+(((-0.74858)*gclwh9_1*pp*rxp0_2))+(((-0.2801860082)*gclwh13_0*r22*rxp0_2*(cj15*cj15)))+((gclwh9_15*pp*r21*rxp2_2*(cj15*cj15)))+(((0.02)*cj15*gclwh9_0*npy*pz*r22*sj15))+(((-0.005603720164)*gclwh5_1*npz*r22*(cj15*cj15)))+(((0.001048417846)*gclwh15_1*rxp1_2*sj15))+(((-0.0877721118)*gclwh13_1*pp*r21))+(((0.74858)*cj15*gclwh9_15*rxp0_2*rxp2_2))+(((0.0877721118)*gclwh15_1*pp*r20))+(((0.00733855819067956)*gclwh5_1*r22*sj15))+(((0.6046355518)*gclwh9_11*rxp0_2))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-2.0)*gclwh9_15*npy*pz*rxp2_2*(cj15*cj15)))+(((-0.00138)*cj15*gclwh11_0*rxp2_2))+(((0.069)*cj15*gclwh7_0*pp*r20))+(((-0.0149716)*gclwh7_1*npz*rxp1_2*sj15))+((gclwh7_15*pp*r20*rxp2_2*(cj15*cj15)))+(((0.002803860082)*gclwh13_1*npz*r21*sj15))+(((0.80771)*cj15*gclwh7_11*pp*r20)));
op[7]=((((0.060762451837022)*gclwh15_13*r20))+(((0.069)*cj15*gclwh9_11*pp*r21))+(((-2.0)*gclwh5_9*npz*pz*sj15))+(((0.05165202)*cj15*gclwh13_11*rxp0_2))+(((0.0074858)*gclwh7_9*r20*sj15))+(((0.1399930041)*gclwh5_9*r22*sj15))+(((-0.0086684)*gclwh15_13*rxp1_2*sj15))+(((0.138)*gclwh15_11*npx*pz))+(((0.1399930041)*cj15*gclwh9_9*r21))+(((-1.0)*gclwh15_9*pp*r20))+(((0.0074858)*gclwh9_9*r21*sj15))+(((0.0096595172829)*cj15*gclwh7_11*r20))+(((0.069)*cj15*gclwh7_11*pp*r20))+(((-0.74858)*gclwh7_9*rxp1_2))+(((-0.02)*cj15*gclwh11_9*rxp2_2))+(((0.003244495436)*cj15*gclwh5_13*r22))+(((-0.0074858)*cj15*gclwh5_9*r22))+(((-0.3244495436)*gclwh11_13*rxp2_2*sj15))+(((0.0005165202)*gclwh9_11*r21*sj15))+(((-0.43342)*cj15*gclwh9_13*pp*r21))+(((-0.43342)*gclwh5_13*pp*r22*sj15))+(((-0.060762451837022)*gclwh13_13*r21))+((gclwh5_9*pp*r22*sj15))+(((-0.0086684)*gclwh5_13*pz))+((gclwh13_9*pp*r21))+(((-0.0096733172829)*gclwh15_11*r20))+(((0.86684)*cj15*gclwh7_13*npx*pz))+(((-0.138)*gclwh13_11*npy*pz))+(((-0.060675767837022)*cj15*gclwh9_13*r21))+(((0.86684)*gclwh13_13*npy*pz))+(((-0.069)*gclwh15_11*pp*r20))+(((0.0096733172829)*gclwh13_11*r21))+(((0.1401930041)*gclwh13_9*r21))+(((0.00138)*gclwh15_11*rxp1_2*sj15))+(((0.43342)*gclwh15_13*pp*r20))+(((0.0005165202)*gclwh7_11*r20*sj15))+(((-0.1401930041)*gclwh15_9*r20))+(((-0.3244495436)*cj15*gclwh15_13*rxp1_2))+(((0.05165202)*gclwh9_11*rxp0_2))+(((0.0086684)*cj15*gclwh11_13*rxp2_2))+(((-0.0086684)*gclwh13_13*rxp0_2*sj15))+(((0.3244495436)*gclwh7_13*rxp1_2))+(((0.05165202)*gclwh11_11*rxp2_2*sj15))+(((-0.3244495436)*gclwh9_13*rxp0_2))+(((0.069)*gclwh13_11*pp*r21))+(((-0.138)*cj15*gclwh7_11*npx*pz))+(((0.74858)*gclwh11_9*rxp2_2*sj15))+(((0.86684)*gclwh5_13*npz*pz*sj15))+(((-0.43342)*cj15*gclwh7_13*pp*r20))+(((0.02)*gclwh13_9*rxp0_2*sj15))+(((-0.003244495436)*gclwh7_13*r20*sj15))+(((0.0096595172829)*cj15*gclwh9_11*r21))+(((-0.86684)*gclwh15_13*npx*pz))+(((0.05165202)*cj15*gclwh15_11*rxp1_2))+(((-0.43342)*gclwh13_13*pp*r21))+(((-0.003244495436)*gclwh9_13*r21*sj15))+(((-0.00138)*cj15*gclwh11_11*rxp2_2))+(((-0.3244495436)*cj15*gclwh13_13*rxp0_2))+(((0.1399930041)*cj15*gclwh7_9*r20))+(((0.02)*gclwh5_9*pz))+((cj15*gclwh9_9*pp*r21))+(((-2.0)*gclwh13_9*npy*pz))+(((0.74858)*cj15*gclwh13_9*rxp0_2))+(((0.74858)*cj15*gclwh15_9*rxp1_2))+((cj15*gclwh7_9*pp*r20))+(((-0.060675767837022)*cj15*gclwh7_13*r20))+(((0.86684)*cj15*gclwh9_13*npy*pz))+(((-2.0)*cj15*gclwh7_9*npx*pz))+(((2.0)*gclwh15_9*npx*pz))+(((-0.05165202)*gclwh7_11*rxp1_2))+(((0.74858)*gclwh9_9*rxp0_2))+(((-0.060675767837022)*gclwh5_13*r22*sj15))+(((0.02)*gclwh15_9*rxp1_2*sj15))+(((-2.0)*cj15*gclwh9_9*npy*pz))+(((-0.138)*cj15*gclwh9_11*npy*pz))+(((0.00138)*gclwh13_11*rxp0_2*sj15)));
op[8]=((((-0.00276)*x171))+(((-0.138)*x167))+(((0.276)*x166))+(((0.0193466345658)*x157))+(((-0.10330404)*x165))+(((-0.276)*x169))+(((-0.0193190345658)*x163))+(((0.00276)*x160))+(((-0.10330404)*x159))+(((-0.0193190345658)*x164))+(((-0.10330404)*x161))+(((-0.00276)*x168))+(((0.276)*x176))+(((0.138)*x170))+(((-0.0010330404)*x173))+(((0.276)*x174))+(((-0.138)*x175))+(((-0.0193466345658)*x156))+(((-0.0010330404)*x172))+(((-0.138)*x177))+(((0.10330404)*x158))+(((-0.10330404)*x162)));
op[9]=((-0.3852277928)+(((-1.0)*gclwh15_6*x190))+((x179*x188))+(((((0.0149716)*cj15))*((gclwh5_6*r22))))+(((0.6488990872)*x159))+((cj15*gclwh9_6*x187))+(((0.6488990872)*x165))+(((-0.0173368)*x160))+(((-1.0)*gclwh13_6*rxp0_2*x189))+(((0.86684)*x175))+(((0.86684)*x177))+(((-0.2799860082)*x191))+(((-0.86684)*x170))+(((-1.0)*cj15*gclwh15_6*x181))+(((0.006488990872)*x172))+(((-1.73368)*x174))+(((4.0)*npz*sj15*x180))+(((-1.49716)*sj15*x183))+(((-1.0)*x186*x193))+(((0.04)*cj15*x183))+(((-1.0)*x184*x186))+(((-1.73368)*x176))+(((-1.73368)*x166))+(((0.006488990872)*x173))+(((-0.04)*x180))+(((-1.0)*gclwh15_6*rxp1_2*x189))+(((0.121524903674044)*x156))+(((-1.0)*x186*x192))+(((0.6488990872)*x162))+(((-1.0)*x185*x192))+(((-1.0)*gclwh9_6*x182))+(((-1.0)*x178*x188))+(((0.0173368)*x168))+(((-1.0)*x185*x193))+(((0.121351535674044)*x163))+(((0.0173368)*x171))+(((0.121351535674044)*x164))+(((-0.2803860082)*x178))+(((-1.0)*x184*x185))+(((0.86684)*x167))+(((-0.121524903674044)*x157))+(((1.73368)*x169))+(((0.2803860082)*x179))+(((-1.0)*cj15*gclwh13_6*x182))+((gclwh7_6*x181))+(((-0.6488990872)*x158))+((cj15*gclwh7_6*x190))+(((-1.0)*x188*x191))+((gclwh13_6*x187))+(((0.6488990872)*x161)));
op[10]=((((0.039241231557934)*cj15*gclwh13_1*rxp0_2))+((gclwh13_0*pp*pz*r21))+(((0.039241231557934)*gclwh9_1*rxp0_2))+(((-0.1399930041)*gclwh7_11*npz*r20*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh13_1*npz*r21))+(((-0.1048417846)*gclwh13_1*npy*pz))+(((-2.0)*cj15*gclwh15_11*npx*npz*pz))+(((0.1397930041)*gclwh5_0*pz*r22*sj15))+(((-0.001048417846)*cj15*gclwh11_1*rxp2_2))+(((-0.02)*gclwh15_1*pp*rxp1_2*sj15))+(((0.02)*cj15*gclwh15_9*r22*rxp1_2*sj15))+(((0.74858)*gclwh9_0*npy*pz*r22*(cj15*cj15)))+(((0.5603720164)*gclwh15_1*npz*rxp1_2*(cj15*cj15)))+(((-0.0096595172829)*gclwh5_0*r22*sj15))+(((2.0)*gclwh9_11*npy*npz*pz*(cj15*cj15)))+(((-0.1401930041)*gclwh15_0*pz*r20))+(((0.1399930041)*gclwh9_15*r21*rxp2_2*(cj15*cj15)))+(((-0.002803860082)*gclwh15_1*npz*r20*sj15))+(((0.113235291341611)*gclwh13_11*r21))+(((-0.00734904236913956)*gclwh15_1*r20))+(((-0.02)*gclwh15_0*npx*pz*r22*sj15))+(((-0.1048417846)*cj15*gclwh7_1*npx*pz))+(((-0.74858)*cj15*gclwh11_11*npz*rxp2_2*sj15))+(((-2.0)*cj15*gclwh9_0*npy*(pz*pz)))+(((0.00138)*cj15*gclwh11_0*rxp2_2))+(((0.008403580246)*cj15*gclwh7_1*npz*r20*sj15))+(((0.74858)*cj15*gclwh11_15*sj15*(rxp2_2*rxp2_2)))+(((-0.1399930041)*gclwh9_11*npz*r21*(cj15*cj15)))+(((0.74858)*gclwh13_9*r22*rxp0_2*(cj15*cj15)))+((gclwh7_9*pp*r20*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh11_9*r22*rxp2_2*sj15))+(((0.113073749341611)*cj15*gclwh7_11*r20))+(((-0.01)*gclwh5_0*pp*(r22*r22)*(sj15*sj15)))+(((-0.0074858)*cj15*gclwh7_11*npz*r20*sj15))+(((-2.0)*gclwh5_0*npz*sj15*(pz*pz)))+(((-0.02)*cj15*gclwh11_0*pz*rxp2_2))+((gclwh9_9*pp*r21*r22*(cj15*cj15)))+(((-0.00138)*gclwh5_0*pz))+(((-0.5603720164)*cj15*gclwh7_1*npz*rxp1_2))+(((-0.0149716)*cj15*gclwh15_0*r22*rxp1_2*sj15))+(((0.74858)*cj15*gclwh5_0*npz*pz*r22*sj15))+(((0.0299432)*cj15*gclwh15_1*npz*rxp1_2*sj15))+(((0.0096733172829)*gclwh15_0*r20))+(((0.02)*cj15*gclwh13_9*r22*rxp0_2*sj15))+(((0.02)*gclwh5_0*npz*pz*r22*(sj15*sj15)))+(((-0.02)*gclwh11_15*(cj15*cj15)*(rxp2_2*rxp2_2)))+((cj15*gclwh7_0*pp*pz*r20))+(((-0.0161542)*cj15*gclwh11_11*rxp2_2))+(((-0.04)*gclwh5_1*pz*(npz*npz)*(sj15*sj15)))+(((2.0)*cj15*gclwh9_1*npy*pp*pz))+(((0.74858)*cj15*gclwh13_0*pz*rxp0_2))+(((-1.49716)*cj15*gclwh13_1*npy*npz*pz))+(((0.02)*gclwh13_0*pz*rxp0_2*sj15))+(((-0.0005165202)*gclwh7_0*r20*sj15))+(((0.74858)*cj15*gclwh13_1*npz*pp*r21))+(((0.069)*gclwh15_0*pp*r20))+(((-0.113235291341611)*gclwh15_11*r20))+(((-1.0)*gclwh5_1*r22*sj15*(pp*pp)))+(((0.74858)*gclwh7_1*npz*pp*r20*(cj15*cj15)))+(((-0.0149716)*gclwh11_1*npz*rxp2_2*(cj15*cj15)))+(((-0.0096595172829)*cj15*gclwh7_0*r20))+(((-1.49716)*gclwh9_1*npy*npz*pz*(cj15*cj15)))+(((0.002801860082)*gclwh5_0*(cj15*cj15)*(r22*r22)))+(((0.02)*gclwh13_1*npz*pp*r21*sj15))+(((0.0161542)*gclwh13_11*rxp0_2*sj15))+(((0.0074858)*cj15*gclwh9_15*r21*rxp2_2*sj15))+(((-7.4858e-5)*gclwh7_0*r20*r22*(sj15*sj15)))+(((-0.001399930041)*gclwh5_0*(r22*r22)*(sj15*sj15)))+(((2.0)*gclwh5_1*npz*pp*pz*sj15))+(((0.0074858)*cj15*gclwh9_9*r21*r22*sj15))+(((0.02)*gclwh5_0*(pz*pz)))+(((-1.61542)*cj15*gclwh9_11*npy*pz))+(((0.0005165202)*cj15*gclwh5_0*r22))+(((0.1399930041)*gclwh7_15*r20*rxp2_2*(cj15*cj15)))+(((0.0149716)*gclwh9_1*npz*rxp0_2*sj15))+(((-1.0)*gclwh9_11*npz*pp*r21*(cj15*cj15)))+((cj15*gclwh9_0*pp*pz*r21))+(((-0.04)*cj15*gclwh7_1*npx*npz*pz*sj15))+(((-0.069)*cj15*gclwh7_0*pp*r20))+(((0.02)*cj15*gclwh5_9*pz*r22))+(((0.1401930041)*gclwh13_0*pz*r21))+(((-1.0)*cj15*gclwh15_9*pp*r20*r22))+(((0.5599720164)*cj15*gclwh11_1*npz*rxp2_2*sj15))+(((-0.05165202)*cj15*gclwh13_0*rxp0_2))+(((-0.138)*gclwh15_0*npx*pz))+(((0.0299432)*cj15*gclwh13_1*npz*rxp0_2*sj15))+(((-0.04)*cj15*gclwh9_1*npy*npz*pz*sj15))+(((-0.02)*gclwh15_1*npz*pp*r20*sj15))+(((-0.039241231557934)*gclwh7_1*rxp1_2))+(((-0.02)*gclwh11_9*r22*rxp2_2*(cj15*cj15)))+(((-0.05165202)*gclwh11_0*rxp2_2*sj15))+(((-0.02)*gclwh13_1*pp*rxp0_2*sj15))+(((0.74858)*gclwh9_1*npz*pp*r21*(cj15*cj15)))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.74858)*cj15*gclwh15_1*pp*rxp1_2))+(((0.1401930041)*cj15*gclwh15_11*npz*r20))+(((0.04)*gclwh15_1*npx*npz*pz*sj15))+(((0.0074858)*gclwh7_0*r22*rxp1_2*sj15))+(((-0.0002)*gclwh13_0*r22*rxp0_2*(sj15*sj15)))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((0.02)*gclwh5_1*npz*pp*r22*(sj15*sj15)))+(((-0.02)*gclwh5_1*pp*pz))+(((0.0074858)*gclwh7_0*pz*r20*sj15))+(((-0.052397981504589)*gclwh9_0*r21*r22*(cj15*cj15)))+(((-1.61542)*cj15*gclwh7_11*npx*pz))+(((-0.052472839504589)*cj15*gclwh13_0*r21*r22))+(((-2.0)*cj15*gclwh13_15*npy*pz*rxp2_2))+(((-1.0)*cj15*gclwh9_1*r21*(pp*pp)))+(((-0.74858)*gclwh11_1*pp*rxp2_2*sj15))+(((0.74858)*cj15*gclwh13_0*npy*pz*r22))+(((-0.04)*gclwh13_1*npy*npz*pz*sj15))+(((0.0074858)*gclwh11_0*r22*rxp2_2*(cj15*cj15)))+(((0.138)*gclwh13_0*npy*pz))+(((-7.4858e-5)*gclwh9_0*r21*r22*(sj15*sj15)))+(((0.1399930041)*cj15*gclwh5_9*sj15*(r22*r22)))+(((0.01)*gclwh15_0*pp*r20*r22*sj15))+(((-0.6046355518)*gclwh7_11*rxp1_2))+(((0.37429)*cj15*gclwh15_0*pp*r20*r22))+(((-0.069)*cj15*gclwh9_0*pp*r21))+(((2.0)*gclwh7_11*npx*npz*pz*(cj15*cj15)))+(((0.74858)*gclwh7_1*pp*rxp1_2))+(((0.052472839504589)*cj15*gclwh15_0*r20*r22))+(((-1.49716)*cj15*gclwh5_1*pz*sj15*(npz*npz)))+(((0.6046355518)*cj15*gclwh13_11*rxp0_2))+(((0.74858)*gclwh7_0*npx*pz*r22*(cj15*cj15)))+(((0.00039241231557934)*gclwh9_1*r21*sj15))+(((-0.01)*cj15*gclwh7_0*pp*r20*r22*sj15))+(((0.0074858)*gclwh9_0*pz*r21*sj15))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((0.000149716)*gclwh9_1*npz*r21*(sj15*sj15)))+(((0.039241231557934)*gclwh11_1*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh7_9*r22*rxp1_2))+(((-0.1048417846)*cj15*gclwh9_1*npy*pz))+(((0.001048417846)*gclwh5_1*pz))+(((-0.2801860082)*cj15*gclwh9_0*r22*rxp0_2))+(((0.006046355518)*gclwh9_11*r21*sj15))+(((-0.02)*cj15*gclwh13_11*npz*rxp0_2*sj15))+(((-2.0)*gclwh7_15*npx*pz*rxp2_2*(cj15*cj15)))+(((-1.0)*cj15*gclwh7_1*r20*(pp*pp)))+(((0.138)*cj15*gclwh7_0*npx*pz))+(((0.74858)*gclwh9_0*pz*rxp0_2))+(((-1.49716)*gclwh7_1*npx*npz*pz*(cj15*cj15)))+(((-0.0875721118)*gclwh5_1*pp*r22*sj15))+(((-0.00039241231557934)*cj15*gclwh5_1*r22))+(((0.001048417846)*gclwh13_1*rxp0_2*sj15))+(((-0.2801860082)*gclwh15_0*r22*rxp1_2*(cj15*cj15)))+(((0.0074858)*cj15*gclwh7_9*r20*r22*sj15))+(((-0.1044417846)*gclwh5_1*npz*pz*sj15))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((0.05165202)*gclwh7_0*rxp1_2))+(((-0.01)*cj15*gclwh9_0*pp*r21*r22*sj15))+(((0.80771)*gclwh13_11*pp*r21))+(((0.00039241231557934)*gclwh7_1*r20*sj15))+(((-0.2799860082)*cj15*gclwh11_0*r22*rxp2_2*sj15))+(((-0.05165202)*gclwh9_0*rxp0_2))+(((-0.00138)*gclwh13_0*rxp0_2*sj15))+(((-0.74858)*cj15*gclwh9_11*npz*rxp0_2))+(((-0.01)*gclwh13_0*pp*r21*r22*sj15))+(((0.02)*cj15*gclwh7_1*npz*pp*r20*sj15))+(((-1.0)*cj15*gclwh15_15*pp*r20*rxp2_2))+(((-2.0)*cj15*gclwh7_0*npx*(pz*pz)))+(((0.5603720164)*cj15*gclwh9_1*npz*rxp0_2))+(((0.74858)*cj15*gclwh9_9*r22*rxp0_2))+(((0.104646247009178)*cj15*gclwh5_1*npz*r22*sj15))+(((-2.0)*gclwh7_9*npx*pz*r22*(cj15*cj15)))+(((-0.05165202)*cj15*gclwh15_0*rxp1_2))+((cj15*gclwh13_15*pp*r21*rxp2_2))+(((0.1399930041)*cj15*gclwh7_0*pz*r20))+(((0.0004)*gclwh13_1*npz*rxp0_2*(sj15*sj15)))+(((2.0)*cj15*gclwh15_9*npx*pz*r22))+(((0.02)*gclwh15_0*pz*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_15*rxp0_2*rxp2_2*sj15))+(((1.49716)*cj15*gclwh15_1*npx*npz*pz))+(((-0.0074858)*gclwh7_1*pp*r20*sj15))+(((-0.1401930041)*cj15*gclwh15_9*r20*r22))+(((-0.1401930041)*cj15*gclwh13_11*npz*r21))+(((-1.61542)*gclwh13_11*npy*pz))+(((0.039241231557934)*cj15*gclwh15_1*rxp1_2))+(((0.0149716)*cj15*gclwh5_1*npz*pz))+(((-0.74858)*gclwh13_11*npz*rxp0_2*(cj15*cj15)))+(((0.002799860082)*gclwh5_1*npz*r22*(sj15*sj15)))+(((-0.001401930041)*gclwh13_0*r21*r22*sj15))+(((-2.0)*gclwh9_9*npy*pz*r22*(cj15*cj15)))+(((-0.0096595172829)*cj15*gclwh9_0*r21))+(((-0.0074858)*gclwh11_0*r22*rxp2_2*(sj15*sj15)))+(((-0.37429)*gclwh9_0*pp*r21*r22*(cj15*cj15)))+(((-2.0)*cj15*gclwh13_9*npy*pz*r22))+(((0.2801860082)*cj15*gclwh7_0*r22*rxp1_2))+(((0.104795963009178)*gclwh9_1*npz*r21*(cj15*cj15)))+((cj15*gclwh5_9*pp*sj15*(r22*r22)))+((cj15*gclwh15_11*npz*pp*r20))+(((-0.74858)*cj15*gclwh15_1*npz*pp*r20))+(((0.1399930041)*gclwh9_9*r21*r22*(cj15*cj15)))+(((2.0)*cj15*gclwh15_15*npx*pz*rxp2_2))+(((0.008403580246)*cj15*gclwh9_1*npz*r21*sj15))+(((-0.069)*gclwh13_0*pp*r21))+(((0.74858)*gclwh13_15*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.1399930041)*gclwh7_9*r20*r22*(cj15*cj15)))+(((-0.37429)*cj15*gclwh5_0*pp*sj15*(r22*r22)))+(((-1.0)*gclwh7_11*npz*pp*r20*(cj15*cj15)))+(((0.1401930041)*cj15*gclwh13_15*r21*rxp2_2))+(((-0.74858)*cj15*gclwh15_0*npx*pz*r22))+(((-0.004201790123)*cj15*gclwh7_0*r20*r22*sj15))+(((0.6046355518)*gclwh11_11*rxp2_2*sj15))+(((0.0074858)*cj15*gclwh7_15*r20*rxp2_2*sj15))+((gclwh5_0*pp*pz*r22*sj15))+(((0.001401930041)*gclwh15_0*r20*r22*sj15))+(((-0.0149716)*cj15*gclwh13_0*r22*rxp0_2*sj15))+(((0.74858)*gclwh15_15*rxp1_2*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh15_9*r22*rxp1_2*(cj15*cj15)))+(((0.02)*cj15*gclwh11_1*pp*rxp2_2))+(((-0.0875721118)*cj15*gclwh7_1*pp*r20))+(((0.80771)*cj15*gclwh9_11*pp*r21))+(((0.02)*cj15*gclwh7_0*npx*pz*r22*sj15))+(((-0.0074858)*gclwh5_9*(cj15*cj15)*(r22*r22)))+(((1.61542)*gclwh15_11*npx*pz))+(((0.74858)*cj15*gclwh15_0*pz*rxp1_2))+(((0.0074858)*cj15*gclwh5_1*pp*r22))+(((0.0149716)*gclwh11_1*npz*rxp2_2*(sj15*sj15)))+(((0.00734904236913956)*gclwh13_1*r21))+((cj15*gclwh13_9*pp*r21*r22))+(((0.02)*gclwh13_0*npy*pz*r22*sj15))+(((-0.0074858)*cj15*gclwh9_11*npz*r21*sj15))+(((-0.37429)*cj15*gclwh13_0*pp*r21*r22))+(((-0.74858)*cj15*gclwh13_1*pp*rxp0_2))+(((-0.0002)*gclwh15_0*r22*rxp1_2*(sj15*sj15)))+(((-0.004201790123)*cj15*gclwh9_0*r21*r22*sj15))+(((2.0)*cj15*gclwh7_1*npx*pp*pz))+(((0.74858)*gclwh11_0*pz*rxp2_2*sj15))+(((0.1401930041)*cj15*gclwh13_9*r21*r22))+(((0.1399930041)*cj15*gclwh9_0*pz*r21))+(((-0.74858)*gclwh15_11*npz*rxp1_2*(cj15*cj15)))+(((0.1048417846)*gclwh15_1*npx*pz))+(((0.104795963009178)*gclwh7_1*npz*r20*(cj15*cj15)))+(((0.138)*cj15*gclwh9_0*npy*pz))+(((0.000149716)*gclwh7_1*npz*r20*(sj15*sj15)))+(((-0.74858)*cj15*gclwh7_15*rxp1_2*rxp2_2))+(((0.02)*cj15*gclwh9_1*npz*pp*r21*sj15))+(((0.00733855819067956)*cj15*gclwh9_1*r21))+(((2.0)*cj15*gclwh13_11*npy*npz*pz))+(((-0.37429)*gclwh7_0*pp*r20*r22*(cj15*cj15)))+(((0.0004)*gclwh15_1*npz*rxp1_2*(sj15*sj15)))+(((-1.0)*cj15*gclwh13_11*npz*pp*r21))+(((0.02)*cj15*gclwh15_15*rxp1_2*rxp2_2*sj15))+(((0.6046355518)*cj15*gclwh15_11*rxp1_2))+(((0.5603720164)*gclwh13_1*npz*rxp0_2*(cj15*cj15)))+(((-0.74858)*gclwh7_0*pz*rxp1_2))+((gclwh15_1*r20*(pp*pp)))+(((0.74858)*cj15*gclwh7_11*npz*rxp1_2))+(((-0.0074858)*gclwh9_1*pp*r21*sj15))+(((-0.80771)*gclwh15_11*pp*r20))+(((-0.0005165202)*gclwh9_0*r21*sj15))+(((0.00733855819067956)*cj15*gclwh7_1*r20))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.0149716)*cj15*gclwh5_0*pz*r22))+(((-0.1401930041)*cj15*gclwh15_15*r20*rxp2_2))+(((0.74858)*cj15*gclwh5_1*npz*pp*r22*sj15))+(((-0.02)*cj15*gclwh15_11*npz*rxp1_2*sj15))+(((0.006046355518)*gclwh7_11*r20*sj15))+(((-2.0)*cj15*gclwh5_9*npz*pz*r22*sj15))+(((-0.0074858)*gclwh9_0*r22*rxp0_2*sj15))+(((-0.0875721118)*cj15*gclwh9_1*pp*r21))+(((-0.052397981504589)*gclwh7_0*r20*r22*(cj15*cj15)))+(((0.02)*gclwh11_11*npz*rxp2_2*(cj15*cj15)))+(((-0.052323123504589)*cj15*gclwh5_0*sj15*(r22*r22)))+(((-0.069)*gclwh5_0*pp*r22*sj15))+(((0.0161542)*gclwh15_11*rxp1_2*sj15))+(((-0.104945679009178)*cj15*gclwh15_1*npz*r20))+(((0.138)*gclwh5_0*npz*pz*sj15))+(((0.113073749341611)*cj15*gclwh9_11*r21))+(((-0.74858)*gclwh9_1*pp*rxp0_2))+(((-0.2801860082)*gclwh13_0*r22*rxp0_2*(cj15*cj15)))+(((-0.00138)*gclwh15_0*rxp1_2*sj15))+((gclwh9_15*pp*r21*rxp2_2*(cj15*cj15)))+(((0.02)*cj15*gclwh9_0*npy*pz*r22*sj15))+(((-0.005603720164)*gclwh5_1*npz*r22*(cj15*cj15)))+(((0.001048417846)*gclwh15_1*rxp1_2*sj15))+(((-0.0877721118)*gclwh13_1*pp*r21))+(((0.74858)*cj15*gclwh9_15*rxp0_2*rxp2_2))+(((0.0877721118)*gclwh15_1*pp*r20))+(((0.00733855819067956)*gclwh5_1*r22*sj15))+(((0.6046355518)*gclwh9_11*rxp0_2))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-2.0)*gclwh9_15*npy*pz*rxp2_2*(cj15*cj15)))+(((-0.0149716)*gclwh7_1*npz*rxp1_2*sj15))+((gclwh7_15*pp*r20*rxp2_2*(cj15*cj15)))+(((0.002803860082)*gclwh13_1*npz*r21*sj15))+(((0.80771)*cj15*gclwh7_11*pp*r20))+(((-0.0096733172829)*gclwh13_0*r21)));
IkReal x194=(gclwh10_14*pz);
IkReal x195=(gclwh10_2*pz);
IkReal x196=(gclwh12_14*rxp1_2);
IkReal x197=((1.49716)*rxp1_2);
IkReal x198=(gclwh14_14*rxp0_2);
IkReal x199=((1.49716)*rxp0_2);
IkReal x200=(gclwh6_14*r21);
IkReal x201=(gclwh6_2*r21);
IkReal x202=(gclwh8_14*r20);
IkReal x203=(gclwh8_2*r20);
IkReal x204=(cj15*gclwh10_14*r22);
IkReal x205=(cj15*gclwh12_14*r20);
IkReal x206=((0.2799860082)*cj15);
IkReal x207=(gclwh12_2*r20);
IkReal x208=(cj15*gclwh14_14*r21);
IkReal x209=(gclwh14_2*r21);
IkReal x210=(gclwh4_2*rxp2_2);
IkReal x211=(cj15*gclwh6_14*rxp0_2);
IkReal x212=(cj15*gclwh8_14*rxp1_2);
IkReal x213=(gclwh10_14*r22*sj15);
IkReal x214=(gclwh10_2*r22*sj15);
IkReal x215=(gclwh12_14*r20*sj15);
IkReal x216=((0.0149716)*sj15);
IkReal x217=(gclwh14_14*r21*sj15);
IkReal x218=(gclwh6_14*npy*pz);
IkReal x219=(gclwh6_14*pp*r21);
IkReal x220=(gclwh6_14*rxp0_2*sj15);
IkReal x221=((4.0)*npy*pz);
IkReal x222=((2.0)*pp);
IkReal x223=((0.04)*sj15);
IkReal x224=(gclwh8_14*npx*pz);
IkReal x225=(gclwh8_14*pp*r20);
IkReal x226=(gclwh8_14*rxp1_2*sj15);
IkReal x227=((4.0)*npx*pz);
IkReal x228=(cj15*gclwh12_14*npx*pz);
IkReal x229=(cj15*gclwh12_14*pp*r20);
IkReal x230=((2.0)*cj15*pp);
IkReal x231=(cj15*gclwh14_14*npy*pz);
IkReal x232=(cj15*gclwh14_14*pp*r21);
IkReal x233=(gclwh10_14*npz*pz*sj15);
IkReal x234=(gclwh10_14*pp*r22*sj15);
op[11]=((((-0.74858)*cj15*gclwh15_9*rxp1_2))+(((0.069)*cj15*gclwh9_11*pp*r21))+(((0.86684)*gclwh15_13*npx*pz))+(((0.05165202)*cj15*gclwh13_11*rxp0_2))+(((-2.0)*gclwh15_9*npx*pz))+(((0.138)*gclwh15_11*npx*pz))+(((-1.0)*gclwh5_9*pp*r22*sj15))+(((0.0096595172829)*cj15*gclwh7_11*r20))+(((0.0086684)*gclwh13_13*rxp0_2*sj15))+(((0.74858)*gclwh7_9*rxp1_2))+(((0.069)*cj15*gclwh7_11*pp*r20))+(((-0.1399930041)*gclwh5_9*r22*sj15))+(((0.43342)*cj15*gclwh7_13*pp*r20))+(((0.0005165202)*gclwh9_11*r21*sj15))+(((-0.86684)*cj15*gclwh9_13*npy*pz))+(((0.060762451837022)*gclwh13_13*r21))+(((-0.0074858)*gclwh7_9*r20*sj15))+(((-1.0)*cj15*gclwh7_9*pp*r20))+(((0.0086684)*gclwh15_13*rxp1_2*sj15))+(((-0.43342)*gclwh15_13*pp*r20))+(((0.43342)*gclwh5_13*pp*r22*sj15))+(((-0.0096733172829)*gclwh15_11*r20))+(((-1.0)*cj15*gclwh9_9*pp*r21))+((gclwh15_9*pp*r20))+(((-0.138)*gclwh13_11*npy*pz))+(((2.0)*gclwh5_9*npz*pz*sj15))+(((-0.069)*gclwh15_11*pp*r20))+(((-0.0074858)*gclwh9_9*r21*sj15))+(((0.0096733172829)*gclwh13_11*r21))+(((0.00138)*gclwh15_11*rxp1_2*sj15))+(((0.0005165202)*gclwh7_11*r20*sj15))+(((-0.74858)*gclwh9_9*rxp0_2))+(((-0.86684)*gclwh13_13*npy*pz))+(((0.05165202)*gclwh9_11*rxp0_2))+(((-0.0086684)*cj15*gclwh11_13*rxp2_2))+(((-0.1399930041)*cj15*gclwh7_9*r20))+(((0.05165202)*gclwh11_11*rxp2_2*sj15))+(((0.0074858)*cj15*gclwh5_9*r22))+(((0.069)*gclwh13_11*pp*r21))+(((-0.138)*cj15*gclwh7_11*npx*pz))+(((0.1401930041)*gclwh15_9*r20))+(((0.003244495436)*gclwh7_13*r20*sj15))+(((0.060675767837022)*gclwh5_13*r22*sj15))+(((0.43342)*gclwh13_13*pp*r21))+(((0.0086684)*gclwh5_13*pz))+(((0.3244495436)*gclwh9_13*rxp0_2))+(((0.02)*cj15*gclwh11_9*rxp2_2))+(((-0.02)*gclwh5_9*pz))+(((0.060675767837022)*cj15*gclwh7_13*r20))+(((0.0096595172829)*cj15*gclwh9_11*r21))+(((0.05165202)*cj15*gclwh15_11*rxp1_2))+(((0.3244495436)*cj15*gclwh13_13*rxp0_2))+(((-0.00138)*cj15*gclwh11_11*rxp2_2))+(((-0.02)*gclwh15_9*rxp1_2*sj15))+(((2.0)*gclwh13_9*npy*pz))+(((0.003244495436)*gclwh9_13*r21*sj15))+(((0.43342)*cj15*gclwh9_13*pp*r21))+(((-0.1401930041)*gclwh13_9*r21))+(((2.0)*cj15*gclwh7_9*npx*pz))+(((-0.86684)*gclwh5_13*npz*pz*sj15))+(((0.3244495436)*cj15*gclwh15_13*rxp1_2))+(((-0.02)*gclwh13_9*rxp0_2*sj15))+(((0.3244495436)*gclwh11_13*rxp2_2*sj15))+(((-0.05165202)*gclwh7_11*rxp1_2))+(((-0.1399930041)*cj15*gclwh9_9*r21))+(((-0.74858)*cj15*gclwh13_9*rxp0_2))+(((-1.0)*gclwh13_9*pp*r21))+(((-0.3244495436)*gclwh7_13*rxp1_2))+(((2.0)*cj15*gclwh9_9*npy*pz))+(((-0.138)*cj15*gclwh9_11*npy*pz))+(((0.060675767837022)*cj15*gclwh9_13*r21))+(((-0.003244495436)*cj15*gclwh5_13*r22))+(((-0.060762451837022)*gclwh15_13*r20))+(((-0.86684)*cj15*gclwh7_13*npx*pz))+(((0.00138)*gclwh13_11*rxp0_2*sj15))+(((-0.74858)*gclwh11_9*rxp2_2*sj15)));
op[12]=((0.1830918964)+(((-1.0)*gclwh10_8*pp*r22*sj15))+(((0.0005165202)*cj15*gclwh10_10*r22))+(((-0.069)*gclwh10_10*pp*r22*sj15))+(((0.1401930041)*gclwh6_8*r21))+(((-0.0096595172829)*cj15*gclwh14_10*r21))+(((-1.0)*gclwh8_8*pp*r20))+(((-1.0)*cj15*gclwh14_8*pp*r21))+(((0.74858)*cj15*gclwh6_8*rxp0_2))+(((-0.003244495436)*gclwh12_12*r20*sj15))+(((0.0086684)*gclwh6_12*rxp0_2*sj15))+(((-0.43342)*cj15*gclwh14_12*pp*r21))+(((0.3244495436)*gclwh12_12*rxp1_2))+(((0.05165202)*cj15*gclwh6_10*rxp0_2))+(((0.86684)*cj15*gclwh14_12*npy*pz))+(((0.0096733172829)*gclwh6_10*r21))+(((0.00138)*gclwh6_10*rxp0_2*sj15))+(((-0.060675767837022)*cj15*gclwh12_12*r20))+(((0.05165202)*cj15*gclwh8_10*rxp1_2))+(((0.3244495436)*cj15*gclwh8_12*rxp1_2))+(((-0.1399930041)*cj15*gclwh12_8*r20))+(((0.138)*cj15*gclwh12_10*npx*pz))+(((-0.060675767837022)*cj15*gclwh14_12*r21))+(((0.003244495436)*cj15*gclwh10_12*r22))+(((0.3244495436)*gclwh4_12*rxp2_2*sj15))+(((0.86684)*cj15*gclwh12_12*npx*pz))+(((0.3244495436)*cj15*gclwh6_12*rxp0_2))+(((-0.069)*cj15*gclwh12_10*pp*r20))+(((0.138)*gclwh8_10*npx*pz))+(((2.0)*gclwh8_8*npx*pz))+(((-0.0096733172829)*gclwh8_10*r20))+(((-0.3244495436)*gclwh14_12*rxp0_2))+(((-2.0)*gclwh6_8*npy*pz))+(((-0.0086684)*cj15*gclwh4_12*rxp2_2))+(((-0.86684)*gclwh6_12*npy*pz))+(((-0.0005165202)*gclwh14_10*r21*sj15))+(((0.060762451837022)*gclwh6_12*r21))+(((-0.0074858)*gclwh12_8*r20*sj15))+(((2.0)*cj15*gclwh14_8*npy*pz))+(((0.069)*gclwh6_10*pp*r21))+(((-0.060675767837022)*gclwh10_12*r22*sj15))+(((-0.060762451837022)*gclwh8_12*r20))+(((0.0086684)*gclwh8_12*rxp1_2*sj15))+(((-0.069)*cj15*gclwh14_10*pp*r21))+(((0.74858)*gclwh12_8*rxp1_2))+(((2.0)*cj15*gclwh12_8*npx*pz))+(((-0.43342)*gclwh8_12*pp*r20))+(((-1.0)*cj15*gclwh12_8*pp*r20))+(((0.86684)*gclwh10_12*npz*pz*sj15))+(((0.74858)*cj15*gclwh8_8*rxp1_2))+(((-0.003244495436)*gclwh14_12*r21*sj15))+(((-0.1399930041)*gclwh10_8*r22*sj15))+(((-0.05165202)*gclwh14_10*rxp0_2))+(((-0.0005165202)*gclwh12_10*r20*sj15))+(((0.138)*cj15*gclwh14_10*npy*pz))+(((-0.74858)*gclwh14_8*rxp0_2))+(((-0.138)*gclwh6_10*npy*pz))+(((-0.1399930041)*cj15*gclwh14_8*r21))+(((-0.0096595172829)*gclwh10_10*r22*sj15))+(((0.02)*gclwh8_8*rxp1_2*sj15))+((gclwh6_8*pp*r21))+(((0.0074858)*cj15*gclwh10_8*r22))+(((0.05165202)*gclwh12_10*rxp1_2))+(((0.138)*gclwh10_10*npz*pz*sj15))+(((-0.43342)*cj15*gclwh12_12*pp*r20))+(((0.86684)*gclwh8_12*npx*pz))+(((-0.00138)*gclwh10_10*pz))+(((-0.069)*gclwh8_10*pp*r20))+(((0.02)*gclwh6_8*rxp0_2*sj15))+(((-0.0074858)*gclwh14_8*r21*sj15))+(((-0.43342)*gclwh10_12*pp*r22*sj15))+(((-0.1401930041)*gclwh8_8*r20))+(((-0.02)*gclwh10_8*pz))+(((0.74858)*gclwh4_8*rxp2_2*sj15))+(((2.0)*gclwh10_8*npz*pz*sj15))+(((0.00138)*gclwh8_10*rxp1_2*sj15))+(((-0.0086684)*gclwh10_12*pz))+(((0.43342)*gclwh6_12*pp*r21))+(((-0.0096595172829)*cj15*gclwh12_10*r20))+(((-0.02)*cj15*gclwh4_8*rxp2_2)));
op[13]=((0.05981196)+(((-0.74858)*cj15*gclwh1_3*npx*pz*r22*sj15))+(((-0.1048417846)*gclwh8_4*npx*pz))+(((-0.74858)*cj15*gclwh8_3*pz*rxp1_2))+(((-0.1044417846)*gclwh10_4*npz*pz*sj15))+(((0.74858)*cj15*gclwh10_3*npz*pz*r22*sj15))+(((0.02)*cj15*gclwh8_14*rxp1_2*rxp2_2*sj15))+(((0.052472839504589)*cj15*gclwh6_3*r21*r22))+(((-0.052397981504589)*gclwh12_3*r20*r22*(cj15*cj15)))+(((-0.0074858)*gclwh10_10*npz*r22*(cj15*cj15)))+(((-0.1399930041)*gclwh12_14*r20*rxp2_2*(cj15*cj15)))+(((0.0074858)*cj15*gclwh12_10*npz*r20*sj15))+(((-0.11826)*cj15*gclwh14_10*npy*pz))+(((-0.039241231557934)*gclwh12_4*rxp1_2))+((gclwh14_10*npz*pp*r21*(cj15*cj15)))+(((-0.04)*gclwh10_4*pz*(npz*npz)*(sj15*sj15)))+(((0.74858)*gclwh6_8*r22*rxp0_2*(cj15*cj15)))+(((0.11826)*gclwh6_10*npy*pz))+(((2.0)*gclwh12_8*npx*pz*r22*(cj15*cj15)))+(((-0.5603720164)*cj15*gclwh12_4*npz*rxp1_2))+(((-0.039241231557934)*cj15*gclwh6_4*rxp0_2))+(((-0.37429)*gclwh12_3*pp*r20*r22*(cj15*cj15)))+(((0.008289612332433)*gclwh8_10*r20))+(((0.069)*cj15*gclwh14_3*pp*r21))+(((0.74858)*cj15*gclwh12_8*r22*rxp1_2))+(((-0.74858)*gclwh8_10*npz*rxp1_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh1_3*r22*rxp1_2))+(((-0.02)*gclwh4_8*r22*rxp2_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh14_14*r21*rxp2_2*sj15))+(((0.0074858)*gclwh4_3*r22*rxp2_2*(sj15*sj15)))+(((0.02)*cj15*gclwh14_4*npz*pp*r21*sj15))+(((-0.0096733172829)*gclwh6_3*r21))+(((0.138)*gclwh1_3*npx*pz*sj15))+(((-1.0)*gclwh12_8*pp*r20*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh6_4*pp*rxp0_2))+(((0.104795963009178)*gclwh14_4*npz*r21*(cj15*cj15)))+(((0.00734904236913956)*gclwh8_4*r20))+(((0.104945679009178)*cj15*gclwh8_4*npz*r20))+(((0.74858)*gclwh14_3*pz*rxp0_2))+(((-0.039241231557934)*cj15*gclwh8_4*rxp1_2))+(((0.002799860082)*gclwh1_4*npz*r20*(sj15*sj15)))+(((-1.0)*cj15*gclwh14_4*r21*(pp*pp)))+((gclwh12_10*npz*pp*r20*(cj15*cj15)))+(((-0.02)*cj15*gclwh10_14*pz*rxp2_2))+(((-0.0074858)*cj15*gclwh14_8*r21*r22*sj15))+(((-0.0442635354)*cj15*gclwh8_10*rxp1_2))+(((0.74858)*gclwh12_3*npx*pz*r22*(cj15*cj15)))+(((2.0)*cj15*gclwh10_14*npz*pz*rxp2_2*sj15))+(((0.00733855819067956)*gclwh1_4*r20*sj15))+(((-1.0)*cj15*gclwh6_10*npz*pp*r21))+(((-0.052397981504589)*gclwh14_3*r21*r22*(cj15*cj15)))+(((0.0005165202)*gclwh14_3*r21*sj15))+(((-0.74858)*gclwh4_3*pz*rxp2_2*sj15))+(((0.0149716)*gclwh14_4*npz*rxp0_2*sj15))+(((2.0)*gclwh10_4*npz*pp*pz*sj15))+(((0.1048417846)*gclwh1_4*npx*pz*sj15))+((cj15*gclwh14_3*pp*pz*r21))+(((0.069)*gclwh10_3*pp*r22*sj15))+(((-1.0)*cj15*gclwh10_14*pp*r22*rxp2_2*sj15))+(((0.02)*cj15*gclwh6_14*rxp0_2*rxp2_2*sj15))+(((0.02)*gclwh8_3*npx*pz*r22*sj15))+(((0.138)*gclwh3_3*npy*pz*sj15))+(((-0.0299432)*cj15*gclwh8_4*npz*rxp1_2*sj15))+(((0.1048417846)*gclwh6_4*npy*pz))+(((-0.37429)*gclwh14_3*pp*r21*r22*(cj15*cj15)))+(((-2.0)*gclwh14_10*npy*npz*pz*(cj15*cj15)))+(((-2.0)*gclwh12_10*npx*npz*pz*(cj15*cj15)))+(((-0.05165202)*cj15*gclwh6_3*rxp0_2))+(((0.02)*cj15*gclwh4_3*pz*rxp2_2))+(((0.0074858)*cj15*gclwh3_3*r22*rxp0_2))+(((0.02)*cj15*gclwh12_3*npx*pz*r22*sj15))+(((0.008277786332433)*gclwh10_10*r22*sj15))+(((0.0002)*gclwh3_3*r22*rxp0_2*sj15))+(((-0.5599720164)*cj15*gclwh4_4*npz*rxp2_2*sj15))+(((0.74858)*gclwh4_4*pp*rxp2_2*sj15))+(((0.05913)*cj15*gclwh14_10*pp*r21))+(((-0.0005165202)*cj15*gclwh10_3*r22))+(((0.74858)*cj15*gclwh8_4*npz*pp*r20))+(((-0.0442635354)*gclwh12_10*rxp1_2))+(((-2.0)*cj15*gclwh8_10*npx*npz*pz))+(((-0.74858)*cj15*gclwh6_3*pz*rxp0_2))+(((2.0)*cj15*gclwh12_4*npx*pp*pz))+(((0.74858)*cj15*gclwh10_4*npz*pp*r22*sj15))+(((-2.0)*cj15*gclwh10_10*pz*sj15*(npz*npz)))+(((0.1401930041)*cj15*gclwh8_10*npz*r20))+(((2.0)*gclwh6_3*npy*(pz*pz)))+(((2.0)*gclwh3_3*npy*sj15*(pz*pz)))+(((-0.74858)*gclwh12_3*pz*rxp1_2))+(((0.02)*gclwh10_4*npz*pp*r22*(sj15*sj15)))+(((0.0011826)*gclwh10_10*pz))+(((-0.02)*gclwh6_3*npy*pz*r22*sj15))+(((-0.02)*gclwh1_3*npx*pz*r22*(sj15*sj15)))+(((0.00733855819067956)*gclwh10_4*r22*sj15))+(((-0.0004)*gclwh6_4*npz*rxp0_2*(sj15*sj15)))+(((-0.0011826)*gclwh6_10*rxp0_2*sj15))+(((-0.1401930041)*cj15*gclwh8_14*r20*rxp2_2))+(((0.104795963009178)*gclwh12_4*npz*r20*(cj15*cj15)))+(((-0.1399930041)*cj15*gclwh10_8*sj15*(r22*r22)))+(((-0.0149716)*gclwh4_4*npz*rxp2_2*(sj15*sj15)))+(((-0.02)*gclwh3_3*npy*pz*r22*(sj15*sj15)))+(((-7.4858e-5)*gclwh14_3*r21*r22*(sj15*sj15)))+(((0.1401930041)*cj15*gclwh6_14*r21*rxp2_2))+(((-0.74858)*cj15*gclwh14_8*r22*rxp0_2))+(((-0.0875721118)*cj15*gclwh14_4*pp*r21))+(((-0.004201790123)*cj15*gclwh12_3*r20*r22*sj15))+(((-0.1048417846)*cj15*gclwh14_4*npy*pz))+(((0.02)*cj15*gclwh12_4*npz*pp*r20*sj15))+(((-0.11826)*gclwh10_10*npz*pz*sj15))+(((-0.1399930041)*gclwh12_8*r20*r22*(cj15*cj15)))+(((-0.01)*cj15*gclwh14_3*pp*r21*r22*sj15))+(((0.1401930041)*gclwh8_3*pz*r20))+(((0.37429)*cj15*gclwh6_3*pp*r21*r22))+(((0.1399930041)*cj15*gclwh12_3*pz*r20))+(((0.2801860082)*cj15*gclwh12_3*r22*rxp1_2))+(((-0.0074858)*r22*sj15))+(((0.01)*gclwh1_3*pp*r20*r22*(sj15*sj15)))+(((0.1399930041)*gclwh3_3*pz*r21*sj15))+(((-0.008289612332433)*gclwh6_10*r21))+(((0.02)*gclwh6_4*pp*rxp0_2*sj15))+(((-1.49716)*cj15*gclwh10_4*pz*sj15*(npz*npz)))+(((-0.0074858)*gclwh14_4*pp*r21*sj15))+(((0.04)*gclwh6_4*npy*npz*pz*sj15))+(((-0.05913)*gclwh6_10*pp*r21))+(((0.02)*cj15*gclwh8_8*r22*rxp1_2*sj15))+(((0.002801860082)*gclwh10_3*(cj15*cj15)*(r22*r22)))+(((-0.0149716)*gclwh12_4*npz*rxp1_2*sj15))+(((-0.02)*gclwh6_4*npz*pp*r21*sj15))+(((-0.1401930041)*gclwh6_3*pz*r21))+(((-0.1924138964)*gclwh3_4*pp*r21*sj15))+(((-0.001048417846)*gclwh8_4*rxp1_2*sj15))+(((-0.069)*gclwh3_3*pp*r21*sj15))+(((-0.069)*gclwh6_3*pp*r21))+(((-0.74858)*gclwh6_10*npz*rxp0_2*(cj15*cj15)))+(((-0.052323123504589)*cj15*gclwh10_3*sj15*(r22*r22)))+(((-0.00039241231557934)*cj15*gclwh10_4*r22))+(((0.74858)*cj15*gclwh8_3*npx*pz*r22))+(((0.1399930041)*gclwh1_3*pz*r20*sj15))+(((-0.5603720164)*gclwh6_4*npz*rxp0_2*(cj15*cj15)))+(((0.039241231557934)*gclwh14_4*rxp0_2))+(((-0.001048417846)*gclwh6_4*rxp0_2*sj15))+(((-0.00138)*gclwh3_3*rxp0_2))+(((0.0096595172829)*gclwh1_3*r20*sj15))+(((-0.04)*cj15*gclwh14_4*npy*npz*pz*sj15))+(((-0.1401930041)*cj15*gclwh8_8*r20*r22))+(((-0.00039241231557934)*cj15*gclwh1_4*r20))+(((0.0005165202)*gclwh12_3*r20*sj15))+(((-0.74858)*cj15*gclwh3_3*npy*pz*r22*sj15))+(((0.74858)*gclwh12_4*npz*pp*r20*(cj15*cj15)))+(((0.0096595172829)*gclwh3_3*r21*sj15))+(((-0.004201790123)*cj15*gclwh14_3*r21*r22*sj15))+(((-0.74858)*gclwh14_4*pp*rxp0_2))+(((0.04)*gclwh1_4*npx*npz*pz*(sj15*sj15)))+(((0.5603720164)*cj15*gclwh14_4*npz*rxp0_2))+(((0.74858)*cj15*gclwh14_10*npz*rxp0_2))+(((-0.74858)*cj15*gclwh1_4*npz*pp*r20*sj15))+(((-0.1399930041)*gclwh14_8*r21*r22*(cj15*cj15)))+(((0.2801860082)*gclwh8_3*r22*rxp1_2*(cj15*cj15)))+(((0.138)*gclwh6_3*npy*pz))+(((-0.1048417846)*cj15*gclwh12_4*npx*pz))+(((2.0)*cj15*gclwh10_8*npz*pz*r22*sj15))+(((-0.0004)*gclwh8_4*npz*rxp1_2*(sj15*sj15)))+(((0.0074858)*gclwh10_14*r22*rxp2_2*(cj15*cj15)))+(((0.04)*gclwh3_4*npy*npz*pz*(sj15*sj15)))+(((0.01)*gclwh3_3*pp*r21*r22*(sj15*sj15)))+(((-0.0442635354)*cj15*gclwh6_10*rxp0_2))+(((-0.005603720164)*gclwh3_4*npz*r21*(cj15*cj15)))+(((0.008403580246)*cj15*gclwh12_4*npz*r20*sj15))+(((-0.069)*gclwh1_3*pp*r20*sj15))+(((0.0149716)*cj15*gclwh1_4*npz*rxp1_2))+(((0.00039241231557934)*gclwh14_4*r21*sj15))+(((0.0877721118)*gclwh6_4*pp*r21))+(((-0.01)*cj15*gclwh12_3*pp*r20*r22*sj15))+(((0.069)*gclwh8_3*pp*r20))+(((-0.1399930041)*cj15*r22))+(((0.0002)*gclwh8_3*r22*rxp1_2*(sj15*sj15)))+(((-0.052323123504589)*cj15*gclwh1_3*r20*r22*sj15))+(((2.0)*gclwh8_4*npx*pp*pz))+(((-0.00734904236913956)*gclwh6_4*r21))+(((0.37429)*cj15*gclwh1_3*pp*r20*r22*sj15))+(((0.1399930041)*gclwh14_10*npz*r21*(cj15*cj15)))+(((-0.02)*gclwh8_3*pz*rxp1_2*sj15))+(((-1.0)*gclwh14_14*pp*r21*rxp2_2*(cj15*cj15)))+(((-1.0)*gclwh12_14*pp*r20*rxp2_2*(cj15*cj15)))+(((2.0)*cj15*gclwh6_10*npy*npz*pz))+(((0.74858)*gclwh14_4*npz*pp*r21*(cj15*cj15)))+(((0.0074858)*gclwh12_3*pz*r20*sj15))+(((1.49716)*cj15*gclwh6_4*npy*npz*pz))+(((-0.02)*gclwh1_4*npz*pp*r20*(sj15*sj15)))+((cj15*gclwh6_8*pp*r21*r22))+(((0.1399930041)*cj15*gclwh14_3*pz*r21))+((gclwh10_3*pp*pz*r22*sj15))+(((-1.0)*cj15*gclwh12_4*r20*(pp*pp)))+(((-0.052472839504589)*cj15*gclwh8_3*r20*r22))+((cj15*gclwh8_10*npz*pp*r20))+(((0.002803860082)*gclwh8_4*npz*r20*sj15))+(((0.0096595172829)*gclwh10_3*r22*sj15))+(((-0.104945679009178)*cj15*gclwh6_4*npz*r21))+(((-0.001399930041)*gclwh1_3*r20*r22*(sj15*sj15)))+(((0.000149716)*gclwh14_4*npz*r21*(sj15*sj15)))+(((-7.4858e-5)*gclwh12_3*r20*r22*(sj15*sj15)))+(((0.74858)*gclwh8_8*r22*rxp1_2*(cj15*cj15)))+(((-0.000442635354)*cj15*gclwh10_10*r22))+(((-0.00039241231557934)*cj15*gclwh3_4*r21))+(((0.2799860082)*cj15*gclwh4_3*r22*rxp2_2*sj15))+(((-0.0149716)*cj15*gclwh3_4*npz*rxp0_2))+(((0.02)*cj15*gclwh6_8*r22*rxp0_2*sj15))+(((-2.0)*cj15*gclwh6_8*npy*pz*r22))+((cj15*gclwh6_14*pp*r21*rxp2_2))+(((-0.74858)*cj15*gclwh12_10*npz*rxp1_2))+(((-0.0074858)*cj15*gclwh12_14*r20*rxp2_2*sj15))+(((0.00733855819067956)*cj15*gclwh12_4*r20))+(((-0.1401930041)*cj15*gclwh6_10*npz*r21))+(((-0.11826)*gclwh8_10*npx*pz))+(((-0.0074858)*gclwh4_3*r22*rxp2_2*(cj15*cj15)))+(((0.0074858)*gclwh12_3*r22*rxp1_2*sj15))+(((-0.005603720164)*gclwh1_4*npz*r20*(cj15*cj15)))+(((-0.138)*gclwh8_3*npx*pz))+(((0.0004)*gclwh1_4*npz*rxp1_2*sj15))+(((-0.02)*cj15*gclwh6_10*npz*rxp0_2*sj15))+(((0.37429)*cj15*gclwh3_3*pp*r21*r22*sj15))+(((-1.0)*cj15*gclwh8_8*pp*r20*r22))+(((-0.02)*gclwh3_3*pz*rxp0_2))+(((-0.039241231557934)*gclwh4_4*rxp2_2*sj15))+(((0.0096595172829)*cj15*gclwh12_3*r20))+(((-0.005603720164)*gclwh10_4*npz*r22*(cj15*cj15)))+(((0.74858)*pz))+(((-0.11826)*cj15*gclwh12_10*npx*pz))+(((0.00138)*cj15*gclwh4_3*rxp2_2))+(((-1.0)*gclwh10_4*r22*sj15*(pp*pp)))+(((-0.01)*gclwh10_3*pp*(r22*r22)*(sj15*sj15)))+(((0.000149716)*gclwh12_4*npz*r20*(sj15*sj15)))+(((0.0074858)*cj15*gclwh14_10*npz*r21*sj15))+(((-0.0875721118)*gclwh10_4*pp*r22*sj15))+(((0.069)*cj15*gclwh12_3*pp*r20))+(((-1.49716)*cj15*gclwh8_4*npx*npz*pz))+(((-0.37429)*cj15*gclwh10_3*pp*sj15*(r22*r22)))+(((-0.001048417846)*gclwh3_4*rxp0_2))+(((-0.138)*cj15*gclwh12_3*npx*pz))+(((0.05165202)*gclwh14_3*rxp0_2))+(((-0.0004)*gclwh3_4*npz*rxp0_2*sj15))+(((-0.001399930041)*gclwh3_3*r21*r22*(sj15*sj15)))+(((0.001048417846)*gclwh10_4*pz))+(((0.02)*cj15*gclwh14_3*npy*pz*r22*sj15))+(((0.00039241231557934)*gclwh12_4*r20*sj15))+(((-2.0)*gclwh1_4*npx*pp*pz*sj15))+(((0.00138)*gclwh1_3*rxp1_2))+(((1.49716)*cj15*gclwh3_4*npy*npz*pz*sj15))+(((0.02)*gclwh8_4*pp*rxp1_2*sj15))+(((-0.74858)*cj15*gclwh14_14*rxp0_2*rxp2_2))+(((0.02)*gclwh8_4*npz*pp*r20*sj15))+(((-0.05165202)*cj15*gclwh8_3*rxp1_2))+(((0.002799860082)*gclwh10_4*npz*r22*(sj15*sj15)))+(((0.008277786332433)*cj15*gclwh12_10*r20))+(((0.0149716)*gclwh4_4*npz*rxp2_2*(cj15*cj15)))+(((0.1399930041)*gclwh12_10*npz*r20*(cj15*cj15)))+(((2.0)*gclwh14_8*npy*pz*r22*(cj15*cj15)))+(((0.00138)*gclwh10_3*pz))+(((-0.02)*gclwh10_4*pp*pz))+(((-0.02)*gclwh6_3*pz*rxp0_2*sj15))+(((0.0149716)*cj15*gclwh6_3*r22*rxp0_2*sj15))+(((0.02)*cj15*gclwh10_10*npz*pz))+(((0.02)*gclwh10_3*(pz*pz)))+(((1.49716)*cj15*gclwh1_4*npx*npz*pz*sj15))+(((0.74858)*cj15*gclwh4_8*r22*rxp2_2*sj15))+(((-2.0)*cj15*gclwh12_3*npx*(pz*pz)))+(((2.0)*cj15*gclwh8_14*npx*pz*rxp2_2))+(((0.0074858)*gclwh14_3*pz*r21*sj15))+(((2.0)*gclwh14_14*npy*pz*rxp2_2*(cj15*cj15)))+((gclwh3_4*r21*sj15*(pp*pp)))+(((0.74858)*cj15*gclwh8_4*pp*rxp1_2))+(((-0.1399930041)*cj15*gclwh10_14*r22*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh3_4*npz*pp*r21*sj15))+(((0.0074858)*gclwh10_8*(cj15*cj15)*(r22*r22)))+(((0.0074858)*cj15*gclwh10_4*pp*r22))+(((-0.0875721118)*cj15*gclwh12_4*pp*r20))+(((-0.05165202)*gclwh12_3*rxp1_2))+(((0.0096595172829)*cj15*gclwh14_3*r21))+(((-0.37429)*cj15*gclwh8_3*pp*r20*r22))+(((0.01)*gclwh6_3*pp*r21*r22*sj15))+(((0.0074858)*cj15*gclwh1_4*pp*r20))+(((0.74858)*cj15*gclwh12_14*rxp1_2*rxp2_2))+(((-2.0)*cj15*npz*pz))+(((0.001048417846)*gclwh1_4*rxp1_2))+(((0.0149716)*cj15*gclwh10_4*npz*pz))+(((-0.0074858)*cj15*gclwh12_8*r20*r22*sj15))+(((0.1399930041)*cj15*gclwh10_10*npz*r22*sj15))+(((0.104646247009178)*cj15*gclwh1_4*npz*r20*sj15))+(((-0.001399930041)*gclwh10_3*(r22*r22)*(sj15*sj15)))+(((-0.138)*cj15*gclwh14_3*npy*pz))+(((0.1048417846)*gclwh3_4*npy*pz*sj15))+(((-0.02)*gclwh1_4*pp*rxp1_2))+(((-2.0)*cj15*gclwh14_3*npy*(pz*pz)))+(((-0.002803860082)*gclwh6_4*npz*r21*sj15))+(((0.0096733172829)*gclwh8_3*r20))+(((-0.0002)*gclwh1_3*r22*rxp1_2*sj15))+(((-0.01)*gclwh8_3*pp*r20*r22*sj15))+(((-0.0074858)*cj15*gclwh1_3*pz*r20))+(((-1.0)*gclwh1_3*pp*pz*r20*sj15))+(((-2.0)*gclwh6_4*npy*pp*pz))+(((-0.02)*gclwh3_4*npz*pp*r21*(sj15*sj15)))+(((-2.0)*gclwh8_3*npx*(pz*pz)))+(((0.1401930041)*cj15*gclwh6_8*r21*r22))+(((0.05913)*gclwh10_10*pp*r22*sj15))+(((0.000442635354)*gclwh14_10*r21*sj15))+(((-1.0)*cj15*gclwh8_14*pp*r20*rxp2_2))+((gclwh8_3*pp*pz*r20))+(((-0.0005165202)*cj15*gclwh1_3*r20))+(((-0.05165202)*gclwh4_3*rxp2_2*sj15))+(((-0.02)*cj15*gclwh8_10*npz*rxp1_2*sj15))+(((0.2801860082)*gclwh6_3*r22*rxp0_2*(cj15*cj15)))+(((0.001401930041)*gclwh6_3*r21*r22*sj15))+(((0.1397930041)*gclwh10_3*pz*r22*sj15))+(((2.0)*cj15*gclwh8_8*npx*pz*r22))+(((0.0149716)*cj15*gclwh8_3*r22*rxp1_2*sj15))+(((-1.0)*cj15*gclwh10_8*pp*sj15*(r22*r22)))+(((-2.0)*gclwh10_3*npz*sj15*(pz*pz)))+(((0.008403580246)*cj15*gclwh14_4*npz*r21*sj15))+(((-1.0)*gclwh14_8*pp*r21*r22*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh3_3*pz*r21))+(((0.104646247009178)*cj15*gclwh3_4*npz*r21*sj15))+(((-0.0299432)*cj15*gclwh6_4*npz*rxp0_2*sj15))+((gclwh6_4*r21*(pp*pp)))+(((0.02)*gclwh10_3*npz*pz*r22*(sj15*sj15)))+(((2.0)*cj15*gclwh14_4*npy*pp*pz))+(((-0.0149716)*cj15*gclwh10_3*pz*r22))+(((0.00733855819067956)*cj15*gclwh14_4*r21))+(((0.02)*gclwh3_4*pp*rxp0_2))+(((0.002799860082)*gclwh3_4*npz*r21*(sj15*sj15)))+(((-0.00138)*gclwh6_3*rxp0_2*sj15))+(((-0.02)*cj15*gclwh4_4*pp*rxp2_2))+(((2.0)*gclwh12_14*npx*pz*rxp2_2*(cj15*cj15)))+(((0.0442635354)*gclwh14_10*rxp0_2))+(((-0.1924138964)*gclwh1_4*pp*r20*sj15))+(((-0.0074858)*gclwh12_4*pp*r20*sj15))+(((0.0002)*gclwh6_3*r22*rxp0_2*(sj15*sj15)))+(((-2.0)*gclwh3_4*npy*pp*pz*sj15))+(((0.05913)*gclwh8_10*pp*r20))+(((-0.0877721118)*gclwh8_4*pp*r20))+(((-0.74858)*cj15*gclwh6_4*npz*pp*r21))+(((-1.49716)*gclwh12_4*npx*npz*pz*(cj15*cj15)))+(((-1.49716)*gclwh14_4*npy*npz*pz*(cj15*cj15)))+(((0.000442635354)*gclwh12_10*r20*sj15))+(((-2.0)*cj15*gclwh6_14*npy*pz*rxp2_2))+(((-0.001401930041)*gclwh8_3*r20*r22*sj15))+(((0.002801860082)*gclwh1_3*r20*r22*(cj15*cj15)))+((cj15*pp*r22))+(((-1.0)*gclwh8_4*r20*(pp*pp)))+(((-0.04)*gclwh8_4*npx*npz*pz*sj15))+(((0.74858)*gclwh8_14*rxp1_2*rxp2_2*(cj15*cj15)))+(((-1.0)*gclwh6_3*pp*pz*r21))+(((0.002801860082)*gclwh3_3*r21*r22*(cj15*cj15)))+(((-0.02)*cj15*gclwh10_8*pz*r22))+(((0.05913)*cj15*gclwh12_10*pp*r20))+(((-0.0074858)*gclwh14_3*r22*rxp0_2*sj15))+(((-0.5603720164)*gclwh8_4*npz*rxp1_2*(cj15*cj15)))+(((0.00733855819067956)*gclwh3_4*r21*sj15))+(((-0.1399930041)*gclwh14_14*r21*rxp2_2*(cj15*cj15)))+((cj15*gclwh10_10*npz*pp*r22*sj15))+(((0.0074858)*cj15*gclwh3_4*pp*r21))+(((-0.138)*gclwh10_3*npz*pz*sj15))+(((-1.0)*gclwh3_3*pp*pz*r21*sj15))+(((-0.0011826)*gclwh8_10*rxp1_2*sj15))+(((0.02)*gclwh1_3*pz*rxp1_2))+(((0.74858)*gclwh6_14*rxp0_2*rxp2_2*(cj15*cj15)))+(((2.0)*gclwh1_3*npx*sj15*(pz*pz)))+(((-0.00138)*gclwh8_3*rxp1_2*sj15))+(((-0.74858)*cj15*gclwh6_3*npy*pz*r22))+(((-0.2801860082)*cj15*gclwh14_3*r22*rxp0_2))+(((-0.0005165202)*cj15*gclwh3_3*r21))+(((0.74858)*gclwh14_3*npy*pz*r22*(cj15*cj15)))+((gclwh1_4*r20*sj15*(pp*pp)))+(((0.008277786332433)*cj15*gclwh14_10*r21))+(((-0.052323123504589)*cj15*gclwh3_3*r21*r22*sj15))+(((-0.04)*cj15*gclwh12_4*npx*npz*pz*sj15))+(((0.001048417846)*cj15*gclwh4_4*rxp2_2))+(((0.74858)*gclwh12_4*pp*rxp1_2))+(((0.104646247009178)*cj15*gclwh10_4*npz*r22*sj15))+((cj15*gclwh12_3*pp*pz*r20)));
op[14]=((((-0.86684)*x232))+(((-1.0)*gclwh14_2*x199))+(((0.2803860082)*x201))+(((-1.0)*x207*x216))+(((-1.0)*x206*x207))+(((0.6488990872)*x212))+(((-1.0)*x206*x209))+((gclwh8_2*x227))+(((1.73368)*x233))+(((1.73368)*x231))+((gclwh8_2*rxp1_2*x223))+(((1.73368)*x228))+(((-0.86684)*x229))+(((0.0173368)*x220))+(((-0.86684)*x225))+((cj15*gclwh6_2*x199))+(((0.6488990872)*x211))+(((-0.121351535674044)*x213))+(((0.6488990872)*x196))+(((-1.0)*x209*x230))+(((-0.006488990872)*x215))+(((-1.73368)*x218))+((gclwh6_2*rxp0_2*x223))+(((-1.0)*x203*x222))+((cj15*gclwh8_2*x197))+(((1.73368)*x224))+(((0.006488990872)*x204))+(((-0.006488990872)*x217))+(((-0.04)*x195))+(((-0.2799860082)*x214))+(((-1.0)*x209*x216))+((cj15*gclwh14_2*x221))+(((-1.0)*x214*x222))+(((1.49716)*sj15*x210))+(((-0.04)*cj15*x210))+(((-0.121524903674044)*x202))+(((0.121524903674044)*x200))+(((-0.121351535674044)*x208))+(((-1.0)*x207*x230))+(((-0.2803860082)*x203))+(((-0.86684)*x234))+(((-1.0)*gclwh6_2*x221))+(((0.0173368)*x226))+(((4.0)*npz*sj15*x195))+(((-0.0173368)*x194))+((x201*x222))+((cj15*gclwh12_2*x227))+(((-0.121351535674044)*x205))+((gclwh12_2*x197))+(((-0.6488990872)*x198))+(((0.86684)*x219))+(((((0.0149716)*cj15))*((gclwh10_2*r22)))));
op[15]=((((0.276)*x231))+(((0.00276)*x226))+(((0.276)*x233))+(((0.138)*x219))+(((-0.276)*x218))+(((0.276)*x228))+(((0.10330404)*x212))+(((-0.0193190345658)*x205))+(((-0.0193466345658)*x202))+(((0.0010330404)*x204))+(((-0.138)*x225))+(((-0.138)*x232))+(((0.10330404)*x211))+(((0.10330404)*x196))+(((0.00276)*x220))+(((-0.138)*x229))+(((-0.0193190345658)*x213))+(((-0.10330404)*x198))+(((-0.138)*x234))+(((-0.0010330404)*x217))+(((0.276)*x224))+(((-0.0193190345658)*x208))+(((-0.00276)*x194))+(((-0.0010330404)*x215))+(((0.0193466345658)*x200)));
op[16]=((-0.1830918964)+(((0.0005165202)*cj15*gclwh10_10*r22))+(((-0.069)*gclwh10_10*pp*r22*sj15))+(((-0.0096595172829)*cj15*gclwh14_10*r21))+(((-1.0)*gclwh6_8*pp*r21))+(((-0.1401930041)*gclwh6_8*r21))+(((0.05165202)*cj15*gclwh6_10*rxp0_2))+(((-0.74858)*cj15*gclwh6_8*rxp0_2))+(((0.060762451837022)*gclwh8_12*r20))+(((0.0096733172829)*gclwh6_10*r21))+(((0.0086684)*cj15*gclwh4_12*rxp2_2))+(((0.00138)*gclwh6_10*rxp0_2*sj15))+(((-0.43342)*gclwh6_12*pp*r21))+(((0.05165202)*cj15*gclwh8_10*rxp1_2))+(((0.138)*cj15*gclwh12_10*npx*pz))+(((-0.86684)*gclwh8_12*npx*pz))+(((-2.0)*gclwh10_8*npz*pz*sj15))+(((-0.0086684)*gclwh8_12*rxp1_2*sj15))+(((0.43342)*gclwh8_12*pp*r20))+(((0.43342)*cj15*gclwh12_12*pp*r20))+(((-0.3244495436)*cj15*gclwh8_12*rxp1_2))+((gclwh10_8*pp*r22*sj15))+(((0.43342)*cj15*gclwh14_12*pp*r21))+((gclwh8_8*pp*r20))+((cj15*gclwh12_8*pp*r20))+(((-0.02)*gclwh6_8*rxp0_2*sj15))+(((-0.069)*cj15*gclwh12_10*pp*r20))+(((0.138)*gclwh8_10*npx*pz))+(((-0.86684)*gclwh10_12*npz*pz*sj15))+(((-0.0096733172829)*gclwh8_10*r20))+(((0.060675767837022)*gclwh10_12*r22*sj15))+(((0.1401930041)*gclwh8_8*r20))+(((-0.0005165202)*gclwh14_10*r21*sj15))+(((0.1399930041)*cj15*gclwh14_8*r21))+(((0.069)*gclwh6_10*pp*r21))+(((-0.3244495436)*cj15*gclwh6_12*rxp0_2))+(((-0.069)*cj15*gclwh14_10*pp*r21))+(((-0.74858)*gclwh12_8*rxp1_2))+(((0.0074858)*gclwh12_8*r20*sj15))+(((0.74858)*gclwh14_8*rxp0_2))+(((-2.0)*cj15*gclwh14_8*npy*pz))+(((0.0074858)*gclwh14_8*r21*sj15))+(((-2.0)*cj15*gclwh12_8*npx*pz))+(((-0.060762451837022)*gclwh6_12*r21))+(((0.1399930041)*cj15*gclwh12_8*r20))+(((-0.05165202)*gclwh14_10*rxp0_2))+(((-0.0005165202)*gclwh12_10*r20*sj15))+(((0.138)*cj15*gclwh14_10*npy*pz))+(((-0.0086684)*gclwh6_12*rxp0_2*sj15))+(((-0.138)*gclwh6_10*npy*pz))+(((-0.3244495436)*gclwh12_12*rxp1_2))+(((-0.0074858)*cj15*gclwh10_8*r22))+(((0.43342)*gclwh10_12*pp*r22*sj15))+(((0.02)*cj15*gclwh4_8*rxp2_2))+(((-0.0096595172829)*gclwh10_10*r22*sj15))+(((2.0)*gclwh6_8*npy*pz))+(((-0.86684)*cj15*gclwh14_12*npy*pz))+(((-2.0)*gclwh8_8*npx*pz))+(((0.86684)*gclwh6_12*npy*pz))+(((0.3244495436)*gclwh14_12*rxp0_2))+(((0.060675767837022)*cj15*gclwh14_12*r21))+(((0.05165202)*gclwh12_10*rxp1_2))+(((0.138)*gclwh10_10*npz*pz*sj15))+(((0.1399930041)*gclwh10_8*r22*sj15))+(((-0.02)*gclwh8_8*rxp1_2*sj15))+(((0.003244495436)*gclwh14_12*r21*sj15))+(((-0.00138)*gclwh10_10*pz))+(((-0.069)*gclwh8_10*pp*r20))+(((0.060675767837022)*cj15*gclwh12_12*r20))+(((-0.74858)*cj15*gclwh8_8*rxp1_2))+((cj15*gclwh14_8*pp*r21))+(((-0.74858)*gclwh4_8*rxp2_2*sj15))+(((0.02)*gclwh10_8*pz))+(((-0.003244495436)*cj15*gclwh10_12*r22))+(((0.003244495436)*gclwh12_12*r20*sj15))+(((-0.86684)*cj15*gclwh12_12*npx*pz))+(((-0.3244495436)*gclwh4_12*rxp2_2*sj15))+(((0.0086684)*gclwh10_12*pz))+(((0.00138)*gclwh8_10*rxp1_2*sj15))+(((-0.0096595172829)*cj15*gclwh12_10*r20)));
op[17]=((-0.05981196)+(((-0.05165202)*gclwh14_3*rxp0_2))+(((-0.74858)*cj15*gclwh1_3*npx*pz*r22*sj15))+(((-0.0096595172829)*cj15*gclwh14_3*r21))+(((-0.1048417846)*gclwh8_4*npx*pz))+(((-0.74858)*cj15*gclwh8_3*pz*rxp1_2))+(((-0.1044417846)*gclwh10_4*npz*pz*sj15))+(((0.74858)*cj15*gclwh10_3*npz*pz*r22*sj15))+(((0.02)*cj15*gclwh8_14*rxp1_2*rxp2_2*sj15))+(((0.052472839504589)*cj15*gclwh6_3*r21*r22))+(((-0.052397981504589)*gclwh12_3*r20*r22*(cj15*cj15)))+(((-0.0074858)*gclwh10_10*npz*r22*(cj15*cj15)))+(((-0.1399930041)*gclwh12_14*r20*rxp2_2*(cj15*cj15)))+(((0.0074858)*cj15*gclwh12_10*npz*r20*sj15))+(((-0.11826)*cj15*gclwh14_10*npy*pz))+(((-0.039241231557934)*gclwh12_4*rxp1_2))+((gclwh14_10*npz*pp*r21*(cj15*cj15)))+(((-0.04)*gclwh10_4*pz*(npz*npz)*(sj15*sj15)))+(((0.74858)*gclwh6_8*r22*rxp0_2*(cj15*cj15)))+(((-0.069)*cj15*gclwh12_3*pp*r20))+(((0.11826)*gclwh6_10*npy*pz))+(((0.00138)*gclwh6_3*rxp0_2*sj15))+(((2.0)*gclwh12_8*npx*pz*r22*(cj15*cj15)))+(((-0.5603720164)*cj15*gclwh12_4*npz*rxp1_2))+(((-0.0005165202)*gclwh14_3*r21*sj15))+(((-0.039241231557934)*cj15*gclwh6_4*rxp0_2))+(((-0.37429)*gclwh12_3*pp*r20*r22*(cj15*cj15)))+(((0.008289612332433)*gclwh8_10*r20))+(((0.74858)*cj15*gclwh12_8*r22*rxp1_2))+(((-0.74858)*gclwh8_10*npz*rxp1_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh1_3*r22*rxp1_2))+(((-0.02)*gclwh4_8*r22*rxp2_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh14_14*r21*rxp2_2*sj15))+(((0.0074858)*gclwh4_3*r22*rxp2_2*(sj15*sj15)))+(((0.02)*cj15*gclwh14_4*npz*pp*r21*sj15))+(((0.138)*gclwh8_3*npx*pz))+(((-1.0)*gclwh12_8*pp*r20*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh6_4*pp*rxp0_2))+(((0.104795963009178)*gclwh14_4*npz*r21*(cj15*cj15)))+(((0.00734904236913956)*gclwh8_4*r20))+(((0.104945679009178)*cj15*gclwh8_4*npz*r20))+(((0.74858)*gclwh14_3*pz*rxp0_2))+(((-0.039241231557934)*cj15*gclwh8_4*rxp1_2))+(((0.002799860082)*gclwh1_4*npz*r20*(sj15*sj15)))+(((-1.0)*cj15*gclwh14_4*r21*(pp*pp)))+((gclwh12_10*npz*pp*r20*(cj15*cj15)))+(((-0.02)*cj15*gclwh10_14*pz*rxp2_2))+(((-0.0074858)*cj15*gclwh14_8*r21*r22*sj15))+(((-0.0442635354)*cj15*gclwh8_10*rxp1_2))+(((0.74858)*gclwh12_3*npx*pz*r22*(cj15*cj15)))+(((2.0)*cj15*gclwh10_14*npz*pz*rxp2_2*sj15))+(((0.00733855819067956)*gclwh1_4*r20*sj15))+(((-1.0)*cj15*gclwh6_10*npz*pp*r21))+(((-0.052397981504589)*gclwh14_3*r21*r22*(cj15*cj15)))+(((-0.74858)*gclwh4_3*pz*rxp2_2*sj15))+(((0.0149716)*gclwh14_4*npz*rxp0_2*sj15))+(((2.0)*gclwh10_4*npz*pp*pz*sj15))+(((0.1048417846)*gclwh1_4*npx*pz*sj15))+((cj15*gclwh14_3*pp*pz*r21))+(((-1.0)*cj15*gclwh10_14*pp*r22*rxp2_2*sj15))+(((0.02)*cj15*gclwh6_14*rxp0_2*rxp2_2*sj15))+(((0.02)*gclwh8_3*npx*pz*r22*sj15))+(((-0.0299432)*cj15*gclwh8_4*npz*rxp1_2*sj15))+(((0.1048417846)*gclwh6_4*npy*pz))+(((-0.37429)*gclwh14_3*pp*r21*r22*(cj15*cj15)))+(((-2.0)*gclwh14_10*npy*npz*pz*(cj15*cj15)))+(((-2.0)*gclwh12_10*npx*npz*pz*(cj15*cj15)))+(((0.02)*cj15*gclwh4_3*pz*rxp2_2))+(((0.0074858)*cj15*gclwh3_3*r22*rxp0_2))+(((0.05165202)*gclwh4_3*rxp2_2*sj15))+(((0.02)*cj15*gclwh12_3*npx*pz*r22*sj15))+(((0.008277786332433)*gclwh10_10*r22*sj15))+(((0.0002)*gclwh3_3*r22*rxp0_2*sj15))+(((-0.5599720164)*cj15*gclwh4_4*npz*rxp2_2*sj15))+(((0.74858)*gclwh4_4*pp*rxp2_2*sj15))+(((-0.00138)*gclwh10_3*pz))+(((0.05913)*cj15*gclwh14_10*pp*r21))+(((0.74858)*cj15*gclwh8_4*npz*pp*r20))+(((-0.0442635354)*gclwh12_10*rxp1_2))+(((-2.0)*cj15*gclwh8_10*npx*npz*pz))+(((-0.74858)*cj15*gclwh6_3*pz*rxp0_2))+(((2.0)*cj15*gclwh12_4*npx*pp*pz))+(((-0.0096733172829)*gclwh8_3*r20))+(((0.74858)*cj15*gclwh10_4*npz*pp*r22*sj15))+(((-2.0)*cj15*gclwh10_10*pz*sj15*(npz*npz)))+(((0.1401930041)*cj15*gclwh8_10*npz*r20))+(((2.0)*gclwh6_3*npy*(pz*pz)))+(((2.0)*gclwh3_3*npy*sj15*(pz*pz)))+(((-0.74858)*gclwh12_3*pz*rxp1_2))+(((0.02)*gclwh10_4*npz*pp*r22*(sj15*sj15)))+(((0.0011826)*gclwh10_10*pz))+(((-0.02)*gclwh6_3*npy*pz*r22*sj15))+(((-0.02)*gclwh1_3*npx*pz*r22*(sj15*sj15)))+(((0.00733855819067956)*gclwh10_4*r22*sj15))+(((-0.0004)*gclwh6_4*npz*rxp0_2*(sj15*sj15)))+(((-0.0011826)*gclwh6_10*rxp0_2*sj15))+(((-0.1401930041)*cj15*gclwh8_14*r20*rxp2_2))+(((0.104795963009178)*gclwh12_4*npz*r20*(cj15*cj15)))+(((-0.1399930041)*cj15*gclwh10_8*sj15*(r22*r22)))+(((0.0005165202)*cj15*gclwh1_3*r20))+(((-0.0149716)*gclwh4_4*npz*rxp2_2*(sj15*sj15)))+(((-0.0005165202)*gclwh12_3*r20*sj15))+(((-0.02)*gclwh3_3*npy*pz*r22*(sj15*sj15)))+(((-7.4858e-5)*gclwh14_3*r21*r22*(sj15*sj15)))+(((0.1401930041)*cj15*gclwh6_14*r21*rxp2_2))+(((-0.74858)*cj15*gclwh14_8*r22*rxp0_2))+(((-0.0875721118)*cj15*gclwh14_4*pp*r21))+(((-0.004201790123)*cj15*gclwh12_3*r20*r22*sj15))+(((-0.1048417846)*cj15*gclwh14_4*npy*pz))+(((0.02)*cj15*gclwh12_4*npz*pp*r20*sj15))+(((-0.11826)*gclwh10_10*npz*pz*sj15))+(((-0.1399930041)*gclwh12_8*r20*r22*(cj15*cj15)))+(((-0.01)*cj15*gclwh14_3*pp*r21*r22*sj15))+(((0.1401930041)*gclwh8_3*pz*r20))+(((0.37429)*cj15*gclwh6_3*pp*r21*r22))+(((0.1399930041)*cj15*gclwh12_3*pz*r20))+(((0.2801860082)*cj15*gclwh12_3*r22*rxp1_2))+(((-0.0074858)*r22*sj15))+(((0.01)*gclwh1_3*pp*r20*r22*(sj15*sj15)))+(((0.1399930041)*gclwh3_3*pz*r21*sj15))+(((-0.008289612332433)*gclwh6_10*r21))+(((0.02)*gclwh6_4*pp*rxp0_2*sj15))+(((-1.49716)*cj15*gclwh10_4*pz*sj15*(npz*npz)))+(((-0.0074858)*gclwh14_4*pp*r21*sj15))+(((0.04)*gclwh6_4*npy*npz*pz*sj15))+(((-0.05913)*gclwh6_10*pp*r21))+(((0.02)*cj15*gclwh8_8*r22*rxp1_2*sj15))+(((0.002801860082)*gclwh10_3*(cj15*cj15)*(r22*r22)))+(((-0.0149716)*gclwh12_4*npz*rxp1_2*sj15))+(((-0.02)*gclwh6_4*npz*pp*r21*sj15))+(((0.00138)*gclwh8_3*rxp1_2*sj15))+(((-0.1401930041)*gclwh6_3*pz*r21))+(((-0.1924138964)*gclwh3_4*pp*r21*sj15))+(((-0.001048417846)*gclwh8_4*rxp1_2*sj15))+(((-0.74858)*gclwh6_10*npz*rxp0_2*(cj15*cj15)))+(((-0.052323123504589)*cj15*gclwh10_3*sj15*(r22*r22)))+(((-0.00039241231557934)*cj15*gclwh10_4*r22))+(((0.74858)*cj15*gclwh8_3*npx*pz*r22))+(((0.0096733172829)*gclwh6_3*r21))+(((0.1399930041)*gclwh1_3*pz*r20*sj15))+(((-0.5603720164)*gclwh6_4*npz*rxp0_2*(cj15*cj15)))+(((0.039241231557934)*gclwh14_4*rxp0_2))+(((-0.001048417846)*gclwh6_4*rxp0_2*sj15))+(((-0.04)*cj15*gclwh14_4*npy*npz*pz*sj15))+(((-0.1401930041)*cj15*gclwh8_8*r20*r22))+(((-0.00039241231557934)*cj15*gclwh1_4*r20))+(((-0.74858)*cj15*gclwh3_3*npy*pz*r22*sj15))+(((0.74858)*gclwh12_4*npz*pp*r20*(cj15*cj15)))+(((-0.004201790123)*cj15*gclwh14_3*r21*r22*sj15))+(((-0.74858)*gclwh14_4*pp*rxp0_2))+(((0.04)*gclwh1_4*npx*npz*pz*(sj15*sj15)))+(((0.5603720164)*cj15*gclwh14_4*npz*rxp0_2))+(((0.74858)*cj15*gclwh14_10*npz*rxp0_2))+(((-0.74858)*cj15*gclwh1_4*npz*pp*r20*sj15))+(((-0.1399930041)*gclwh14_8*r21*r22*(cj15*cj15)))+(((0.2801860082)*gclwh8_3*r22*rxp1_2*(cj15*cj15)))+(((-0.1048417846)*cj15*gclwh12_4*npx*pz))+(((2.0)*cj15*gclwh10_8*npz*pz*r22*sj15))+(((-0.0004)*gclwh8_4*npz*rxp1_2*(sj15*sj15)))+(((0.0074858)*gclwh10_14*r22*rxp2_2*(cj15*cj15)))+(((0.04)*gclwh3_4*npy*npz*pz*(sj15*sj15)))+(((0.01)*gclwh3_3*pp*r21*r22*(sj15*sj15)))+(((0.069)*gclwh6_3*pp*r21))+(((-0.0442635354)*cj15*gclwh6_10*rxp0_2))+(((-0.005603720164)*gclwh3_4*npz*r21*(cj15*cj15)))+(((0.008403580246)*cj15*gclwh12_4*npz*r20*sj15))+(((0.0149716)*cj15*gclwh1_4*npz*rxp1_2))+(((0.00039241231557934)*gclwh14_4*r21*sj15))+(((0.0877721118)*gclwh6_4*pp*r21))+(((-0.00138)*cj15*gclwh4_3*rxp2_2))+(((-0.0096595172829)*gclwh10_3*r22*sj15))+(((-0.01)*cj15*gclwh12_3*pp*r20*r22*sj15))+(((-0.1399930041)*cj15*r22))+(((0.0002)*gclwh8_3*r22*rxp1_2*(sj15*sj15)))+(((-0.052323123504589)*cj15*gclwh1_3*r20*r22*sj15))+(((2.0)*gclwh8_4*npx*pp*pz))+(((-0.00734904236913956)*gclwh6_4*r21))+(((0.37429)*cj15*gclwh1_3*pp*r20*r22*sj15))+(((0.1399930041)*gclwh14_10*npz*r21*(cj15*cj15)))+(((-0.02)*gclwh8_3*pz*rxp1_2*sj15))+(((-1.0)*gclwh14_14*pp*r21*rxp2_2*(cj15*cj15)))+(((-1.0)*gclwh12_14*pp*r20*rxp2_2*(cj15*cj15)))+(((2.0)*cj15*gclwh6_10*npy*npz*pz))+(((-0.069)*cj15*gclwh14_3*pp*r21))+(((0.74858)*gclwh14_4*npz*pp*r21*(cj15*cj15)))+(((0.0074858)*gclwh12_3*pz*r20*sj15))+(((1.49716)*cj15*gclwh6_4*npy*npz*pz))+(((-0.02)*gclwh1_4*npz*pp*r20*(sj15*sj15)))+(((0.0005165202)*cj15*gclwh3_3*r21))+((cj15*gclwh6_8*pp*r21*r22))+(((0.1399930041)*cj15*gclwh14_3*pz*r21))+((gclwh10_3*pp*pz*r22*sj15))+(((-1.0)*cj15*gclwh12_4*r20*(pp*pp)))+(((-0.0096595172829)*gclwh1_3*r20*sj15))+(((-0.052472839504589)*cj15*gclwh8_3*r20*r22))+((cj15*gclwh8_10*npz*pp*r20))+(((0.002803860082)*gclwh8_4*npz*r20*sj15))+(((-0.104945679009178)*cj15*gclwh6_4*npz*r21))+(((-0.001399930041)*gclwh1_3*r20*r22*(sj15*sj15)))+(((0.000149716)*gclwh14_4*npz*r21*(sj15*sj15)))+(((-0.138)*gclwh6_3*npy*pz))+(((-7.4858e-5)*gclwh12_3*r20*r22*(sj15*sj15)))+(((0.74858)*gclwh8_8*r22*rxp1_2*(cj15*cj15)))+(((-0.000442635354)*cj15*gclwh10_10*r22))+(((-0.00039241231557934)*cj15*gclwh3_4*r21))+(((0.2799860082)*cj15*gclwh4_3*r22*rxp2_2*sj15))+(((0.05165202)*cj15*gclwh6_3*rxp0_2))+(((-0.0149716)*cj15*gclwh3_4*npz*rxp0_2))+(((0.02)*cj15*gclwh6_8*r22*rxp0_2*sj15))+(((-2.0)*cj15*gclwh6_8*npy*pz*r22))+((cj15*gclwh6_14*pp*r21*rxp2_2))+(((-0.74858)*cj15*gclwh12_10*npz*rxp1_2))+(((-0.0074858)*cj15*gclwh12_14*r20*rxp2_2*sj15))+(((0.00733855819067956)*cj15*gclwh12_4*r20))+(((-0.1401930041)*cj15*gclwh6_10*npz*r21))+(((-0.11826)*gclwh8_10*npx*pz))+(((-0.0074858)*gclwh4_3*r22*rxp2_2*(cj15*cj15)))+(((0.0074858)*gclwh12_3*r22*rxp1_2*sj15))+(((-0.005603720164)*gclwh1_4*npz*r20*(cj15*cj15)))+(((0.0004)*gclwh1_4*npz*rxp1_2*sj15))+(((-0.02)*cj15*gclwh6_10*npz*rxp0_2*sj15))+(((0.37429)*cj15*gclwh3_3*pp*r21*r22*sj15))+(((-1.0)*cj15*gclwh8_8*pp*r20*r22))+(((-0.02)*gclwh3_3*pz*rxp0_2))+(((-0.039241231557934)*gclwh4_4*rxp2_2*sj15))+(((-0.005603720164)*gclwh10_4*npz*r22*(cj15*cj15)))+(((0.74858)*pz))+(((-0.11826)*cj15*gclwh12_10*npx*pz))+(((-1.0)*gclwh10_4*r22*sj15*(pp*pp)))+(((-0.01)*gclwh10_3*pp*(r22*r22)*(sj15*sj15)))+(((0.000149716)*gclwh12_4*npz*r20*(sj15*sj15)))+(((0.0074858)*cj15*gclwh14_10*npz*r21*sj15))+(((-0.138)*gclwh1_3*npx*pz*sj15))+(((-0.0875721118)*gclwh10_4*pp*r22*sj15))+(((-1.49716)*cj15*gclwh8_4*npx*npz*pz))+(((-0.37429)*cj15*gclwh10_3*pp*sj15*(r22*r22)))+(((-0.001048417846)*gclwh3_4*rxp0_2))+(((-0.0004)*gclwh3_4*npz*rxp0_2*sj15))+(((-0.001399930041)*gclwh3_3*r21*r22*(sj15*sj15)))+(((0.05165202)*gclwh12_3*rxp1_2))+(((-0.00138)*gclwh1_3*rxp1_2))+(((0.001048417846)*gclwh10_4*pz))+(((0.02)*cj15*gclwh14_3*npy*pz*r22*sj15))+(((0.00039241231557934)*gclwh12_4*r20*sj15))+(((-2.0)*gclwh1_4*npx*pp*pz*sj15))+(((1.49716)*cj15*gclwh3_4*npy*npz*pz*sj15))+(((0.02)*gclwh8_4*pp*rxp1_2*sj15))+(((-0.74858)*cj15*gclwh14_14*rxp0_2*rxp2_2))+(((0.02)*gclwh8_4*npz*pp*r20*sj15))+(((0.002799860082)*gclwh10_4*npz*r22*(sj15*sj15)))+(((0.008277786332433)*cj15*gclwh12_10*r20))+(((0.0149716)*gclwh4_4*npz*rxp2_2*(cj15*cj15)))+(((0.1399930041)*gclwh12_10*npz*r20*(cj15*cj15)))+(((2.0)*gclwh14_8*npy*pz*r22*(cj15*cj15)))+(((-0.02)*gclwh10_4*pp*pz))+(((-0.02)*gclwh6_3*pz*rxp0_2*sj15))+(((0.0149716)*cj15*gclwh6_3*r22*rxp0_2*sj15))+(((0.02)*cj15*gclwh10_10*npz*pz))+(((0.02)*gclwh10_3*(pz*pz)))+(((1.49716)*cj15*gclwh1_4*npx*npz*pz*sj15))+(((0.74858)*cj15*gclwh4_8*r22*rxp2_2*sj15))+(((-2.0)*cj15*gclwh12_3*npx*(pz*pz)))+(((2.0)*cj15*gclwh8_14*npx*pz*rxp2_2))+(((0.0074858)*gclwh14_3*pz*r21*sj15))+(((2.0)*gclwh14_14*npy*pz*rxp2_2*(cj15*cj15)))+(((0.069)*gclwh3_3*pp*r21*sj15))+((gclwh3_4*r21*sj15*(pp*pp)))+(((0.74858)*cj15*gclwh8_4*pp*rxp1_2))+(((-0.1399930041)*cj15*gclwh10_14*r22*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh3_4*npz*pp*r21*sj15))+(((0.0074858)*gclwh10_8*(cj15*cj15)*(r22*r22)))+(((0.0074858)*cj15*gclwh10_4*pp*r22))+(((0.138)*cj15*gclwh12_3*npx*pz))+(((-0.0875721118)*cj15*gclwh12_4*pp*r20))+(((-0.37429)*cj15*gclwh8_3*pp*r20*r22))+(((0.01)*gclwh6_3*pp*r21*r22*sj15))+(((0.0074858)*cj15*gclwh1_4*pp*r20))+(((0.74858)*cj15*gclwh12_14*rxp1_2*rxp2_2))+(((-2.0)*cj15*npz*pz))+(((0.001048417846)*gclwh1_4*rxp1_2))+(((0.0149716)*cj15*gclwh10_4*npz*pz))+(((-0.0074858)*cj15*gclwh12_8*r20*r22*sj15))+(((0.1399930041)*cj15*gclwh10_10*npz*r22*sj15))+(((-0.138)*gclwh3_3*npy*pz*sj15))+(((0.104646247009178)*cj15*gclwh1_4*npz*r20*sj15))+(((-0.001399930041)*gclwh10_3*(r22*r22)*(sj15*sj15)))+(((0.1048417846)*gclwh3_4*npy*pz*sj15))+(((-0.02)*gclwh1_4*pp*rxp1_2))+(((-2.0)*cj15*gclwh14_3*npy*(pz*pz)))+(((-0.002803860082)*gclwh6_4*npz*r21*sj15))+(((-0.0002)*gclwh1_3*r22*rxp1_2*sj15))+(((-0.01)*gclwh8_3*pp*r20*r22*sj15))+(((-0.0074858)*cj15*gclwh1_3*pz*r20))+(((-1.0)*gclwh1_3*pp*pz*r20*sj15))+(((-2.0)*gclwh6_4*npy*pp*pz))+(((-0.02)*gclwh3_4*npz*pp*r21*(sj15*sj15)))+(((-2.0)*gclwh8_3*npx*(pz*pz)))+(((0.1401930041)*cj15*gclwh6_8*r21*r22))+(((0.05913)*gclwh10_10*pp*r22*sj15))+(((0.000442635354)*gclwh14_10*r21*sj15))+(((-1.0)*cj15*gclwh8_14*pp*r20*rxp2_2))+((gclwh8_3*pp*pz*r20))+(((0.138)*gclwh10_3*npz*pz*sj15))+(((-0.02)*cj15*gclwh8_10*npz*rxp1_2*sj15))+(((0.2801860082)*gclwh6_3*r22*rxp0_2*(cj15*cj15)))+(((0.001401930041)*gclwh6_3*r21*r22*sj15))+(((0.1397930041)*gclwh10_3*pz*r22*sj15))+(((2.0)*cj15*gclwh8_8*npx*pz*r22))+(((0.0149716)*cj15*gclwh8_3*r22*rxp1_2*sj15))+(((-1.0)*cj15*gclwh10_8*pp*sj15*(r22*r22)))+(((-0.069)*gclwh8_3*pp*r20))+(((-2.0)*gclwh10_3*npz*sj15*(pz*pz)))+(((0.008403580246)*cj15*gclwh14_4*npz*r21*sj15))+(((-1.0)*gclwh14_8*pp*r21*r22*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh3_3*pz*r21))+(((0.104646247009178)*cj15*gclwh3_4*npz*r21*sj15))+(((-0.0299432)*cj15*gclwh6_4*npz*rxp0_2*sj15))+((gclwh6_4*r21*(pp*pp)))+(((0.0005165202)*cj15*gclwh10_3*r22))+(((0.02)*gclwh10_3*npz*pz*r22*(sj15*sj15)))+(((-0.0096595172829)*gclwh3_3*r21*sj15))+(((2.0)*cj15*gclwh14_4*npy*pp*pz))+(((-0.0149716)*cj15*gclwh10_3*pz*r22))+(((0.00733855819067956)*cj15*gclwh14_4*r21))+(((0.02)*gclwh3_4*pp*rxp0_2))+(((0.002799860082)*gclwh3_4*npz*r21*(sj15*sj15)))+(((-0.069)*gclwh10_3*pp*r22*sj15))+(((-0.02)*cj15*gclwh4_4*pp*rxp2_2))+(((2.0)*gclwh12_14*npx*pz*rxp2_2*(cj15*cj15)))+(((0.0442635354)*gclwh14_10*rxp0_2))+(((-0.1924138964)*gclwh1_4*pp*r20*sj15))+(((-0.0074858)*gclwh12_4*pp*r20*sj15))+(((0.0002)*gclwh6_3*r22*rxp0_2*(sj15*sj15)))+(((0.069)*gclwh1_3*pp*r20*sj15))+(((-2.0)*gclwh3_4*npy*pp*pz*sj15))+(((0.05913)*gclwh8_10*pp*r20))+(((-0.0877721118)*gclwh8_4*pp*r20))+(((-0.74858)*cj15*gclwh6_4*npz*pp*r21))+(((-1.49716)*gclwh12_4*npx*npz*pz*(cj15*cj15)))+(((-1.49716)*gclwh14_4*npy*npz*pz*(cj15*cj15)))+(((0.000442635354)*gclwh12_10*r20*sj15))+(((-2.0)*cj15*gclwh6_14*npy*pz*rxp2_2))+(((0.05165202)*cj15*gclwh8_3*rxp1_2))+(((-0.001401930041)*gclwh8_3*r20*r22*sj15))+(((0.002801860082)*gclwh1_3*r20*r22*(cj15*cj15)))+((cj15*pp*r22))+(((-1.0)*gclwh8_4*r20*(pp*pp)))+(((-0.04)*gclwh8_4*npx*npz*pz*sj15))+(((0.74858)*gclwh8_14*rxp1_2*rxp2_2*(cj15*cj15)))+(((-1.0)*gclwh6_3*pp*pz*r21))+(((0.002801860082)*gclwh3_3*r21*r22*(cj15*cj15)))+(((-0.02)*cj15*gclwh10_8*pz*r22))+(((0.05913)*cj15*gclwh12_10*pp*r20))+(((-0.0074858)*gclwh14_3*r22*rxp0_2*sj15))+(((-0.5603720164)*gclwh8_4*npz*rxp1_2*(cj15*cj15)))+(((0.00733855819067956)*gclwh3_4*r21*sj15))+(((-0.1399930041)*gclwh14_14*r21*rxp2_2*(cj15*cj15)))+((cj15*gclwh10_10*npz*pp*r22*sj15))+(((0.0074858)*cj15*gclwh3_4*pp*r21))+(((0.138)*cj15*gclwh14_3*npy*pz))+(((-1.0)*gclwh3_3*pp*pz*r21*sj15))+(((-0.0011826)*gclwh8_10*rxp1_2*sj15))+(((0.02)*gclwh1_3*pz*rxp1_2))+(((0.74858)*gclwh6_14*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.00138)*gclwh3_3*rxp0_2))+(((2.0)*gclwh1_3*npx*sj15*(pz*pz)))+(((-0.0096595172829)*cj15*gclwh12_3*r20))+(((-0.74858)*cj15*gclwh6_3*npy*pz*r22))+(((-0.2801860082)*cj15*gclwh14_3*r22*rxp0_2))+(((0.74858)*gclwh14_3*npy*pz*r22*(cj15*cj15)))+((gclwh1_4*r20*sj15*(pp*pp)))+(((0.008277786332433)*cj15*gclwh14_10*r21))+(((-0.052323123504589)*cj15*gclwh3_3*r21*r22*sj15))+(((-0.04)*cj15*gclwh12_4*npx*npz*pz*sj15))+(((0.001048417846)*cj15*gclwh4_4*rxp2_2))+(((0.74858)*gclwh12_4*pp*rxp1_2))+(((0.104646247009178)*cj15*gclwh10_4*npz*r22*sj15))+((cj15*gclwh12_3*pp*pz*r20)));
IkReal x235=(gclwh11_15*pz);
IkReal x236=(gclwh13_15*rxp1_2);
IkReal x237=(gclwh15_15*rxp0_2);
IkReal x238=(gclwh7_15*r21);
IkReal x239=(gclwh9_15*r20);
IkReal x240=(cj15*gclwh11_15*r22);
IkReal x241=(cj15*gclwh13_15*r20);
IkReal x242=(cj15*gclwh15_15*r21);
IkReal x243=(cj15*gclwh7_15*rxp0_2);
IkReal x244=(cj15*gclwh9_15*rxp1_2);
IkReal x245=(gclwh11_15*r22*sj15);
IkReal x246=(gclwh13_15*r20*sj15);
IkReal x247=(gclwh15_15*r21*sj15);
IkReal x248=(gclwh7_15*npy*pz);
IkReal x249=(gclwh7_15*pp*r21);
IkReal x250=(gclwh7_15*rxp0_2*sj15);
IkReal x251=(gclwh9_15*npx*pz);
IkReal x252=(gclwh9_15*pp*r20);
IkReal x253=(gclwh9_15*rxp1_2*sj15);
IkReal x254=(cj15*gclwh13_15*npx*pz);
IkReal x255=(cj15*gclwh13_15*pp*r20);
IkReal x256=(cj15*gclwh15_15*npy*pz);
IkReal x257=(cj15*gclwh15_15*pp*r21);
IkReal x258=(gclwh11_15*npz*pz*sj15);
IkReal x259=(gclwh11_15*pp*r22*sj15);
IkReal x260=(gclwh11_6*pz);
IkReal x261=((1.49716)*rxp1_2);
IkReal x262=((1.49716)*rxp0_2);
IkReal x263=(gclwh7_6*r21);
IkReal x264=(gclwh9_6*r20);
IkReal x265=((0.2799860082)*cj15);
IkReal x266=(gclwh13_6*r20);
IkReal x267=(gclwh15_6*r21);
IkReal x268=(gclwh5_6*rxp2_2);
IkReal x269=(gclwh11_6*r22*sj15);
IkReal x270=((0.0149716)*sj15);
IkReal x271=((4.0)*npy*pz);
IkReal x272=((2.0)*pp);
IkReal x273=((0.04)*sj15);
IkReal x274=((4.0)*npx*pz);
IkReal x275=((2.0)*cj15*pp);
op[18]=((0.05981196)+(((0.0005165202)*cj15*gclwh2_0*r21))+(((-0.01)*gclwh2_0*pp*r21*r22*(sj15*sj15)))+(((-0.5603720164)*cj15*gclwh13_1*npz*rxp1_2))+(((-0.0149716)*gclwh13_1*npz*rxp1_2*sj15))+(((-0.74858)*gclwh7_9*r22*rxp0_2*(cj15*cj15)))+(((-0.0875721118)*gclwh11_1*pp*r22*sj15))+(((0.02)*gclwh9_1*npz*pp*r20*sj15))+(((-1.0)*cj15*pp*r22))+(((-0.37429)*gclwh13_0*pp*r20*r22*(cj15*cj15)))+(((2.0)*cj15*npz*pz))+(((0.0149716)*cj15*gclwh7_0*r22*rxp0_2*sj15))+(((-0.138)*gclwh0_0*npx*pz*sj15))+(((-0.74858)*cj15*gclwh13_9*r22*rxp1_2))+(((-0.02)*gclwh9_0*pz*rxp1_2*sj15))+(((0.1399930041)*gclwh15_9*r21*r22*(cj15*cj15)))+(((-0.05165202)*cj15*gclwh9_0*rxp1_2))+(((0.0161542)*gclwh11_11*pz))+(((-0.02)*cj15*gclwh9_15*rxp1_2*rxp2_2*sj15))+(((0.05165202)*gclwh15_0*rxp0_2))+(((0.74858)*gclwh15_1*npz*pp*r21*(cj15*cj15)))+(((0.02)*cj15*gclwh15_1*npz*pp*r21*sj15))+(((-1.49716)*cj15*gclwh0_1*npx*npz*pz*sj15))+(((-0.0074858)*cj15*gclwh2_0*r22*rxp0_2))+(((0.74858)*cj15*gclwh11_1*npz*pp*r22*sj15))+(((0.74858)*cj15*gclwh15_9*r22*rxp0_2))+(((0.002799860082)*gclwh11_1*npz*r22*(sj15*sj15)))+(((-7.4858e-5)*gclwh13_0*r20*r22*(sj15*sj15)))+(((0.0149716)*gclwh15_1*npz*rxp0_2*sj15))+(((-0.0074858)*gclwh13_1*pp*r20*sj15))+(((-0.74858)*cj15*gclwh13_15*rxp1_2*rxp2_2))+(((1.49716)*cj15*gclwh7_1*npy*npz*pz))+(((-0.0161542)*gclwh9_11*rxp1_2*sj15))+(((-1.0)*gclwh15_11*npz*pp*r21*(cj15*cj15)))+(((-0.02)*cj15*gclwh11_11*npz*pz))+(((0.0096733172829)*gclwh9_0*r20))+(((-1.61542)*gclwh9_11*npx*pz))+(((0.02)*cj15*gclwh11_9*pz*r22))+((gclwh9_0*pp*pz*r20))+(((0.104646247009178)*cj15*gclwh11_1*npz*r22*sj15))+(((-1.49716)*cj15*gclwh11_1*pz*sj15*(npz*npz)))+(((-1.49716)*cj15*gclwh9_1*npx*npz*pz))+(((0.0074858)*cj15*gclwh11_1*pp*r22))+(((2.0)*gclwh11_1*npz*pp*pz*sj15))+(((0.00733855819067956)*gclwh11_1*r22*sj15))+(((-0.1399930041)*gclwh13_11*npz*r20*(cj15*cj15)))+(((-1.61542)*cj15*gclwh15_11*npy*pz))+(((0.005603720164)*gclwh2_1*npz*r21*(cj15*cj15)))+(((0.0002)*gclwh0_0*r22*rxp1_2*sj15))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.0096595172829)*cj15*gclwh15_0*r21))+(((0.80771)*cj15*gclwh13_11*pp*r20))+(((0.00039241231557934)*cj15*gclwh2_1*r21))+(((0.069)*gclwh11_0*pp*r22*sj15))+(((0.0096595172829)*cj15*gclwh13_0*r20))+(((-0.0005165202)*cj15*gclwh11_0*r22))+(((-0.1044417846)*gclwh11_1*npz*pz*sj15))+(((-0.0149716)*cj15*gclwh0_1*npz*rxp1_2))+(((-2.0)*cj15*gclwh15_0*npy*(pz*pz)))+(((0.052472839504589)*cj15*gclwh7_0*r21*r22))+(((2.0)*cj15*gclwh9_11*npx*npz*pz))+(((0.1399930041)*gclwh13_9*r20*r22*(cj15*cj15)))+(((0.001399930041)*gclwh2_0*r21*r22*(sj15*sj15)))+(((-0.069)*gclwh7_0*pp*r21))+(((-2.0)*gclwh2_0*npy*sj15*(pz*pz)))+(((0.74858)*cj15*gclwh9_1*npz*pp*r20))+(((-0.0074858)*cj15*gclwh2_1*pp*r21))+(((-0.02)*gclwh11_1*pp*pz))+(((-2.0)*cj15*gclwh9_9*npx*pz*r22))+(((-0.05165202)*cj15*gclwh7_0*rxp0_2))+(((-0.0074858)*cj15*gclwh13_11*npz*r20*sj15))+(((-0.02)*cj15*gclwh7_15*rxp0_2*rxp2_2*sj15))+(((-0.37429)*cj15*gclwh11_0*pp*sj15*(r22*r22)))+(((0.00734904236913956)*gclwh9_1*r20))+(((1.61542)*gclwh7_11*npy*pz))+(((-2.0)*gclwh0_0*npx*sj15*(pz*pz)))+(((-2.0)*gclwh15_15*npy*pz*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh7_11*npz*rxp0_2*(cj15*cj15)))+(((0.002801860082)*gclwh11_0*(cj15*cj15)*(r22*r22)))+(((-1.0)*cj15*gclwh9_11*npz*pp*r20))+(((-0.0074858)*gclwh5_0*r22*rxp2_2*(cj15*cj15)))+(((0.80771)*cj15*gclwh15_11*pp*r21))+(((0.000149716)*gclwh15_1*npz*r21*(sj15*sj15)))+(((-0.138)*cj15*gclwh15_0*npy*pz))+(((-0.052397981504589)*gclwh15_0*r21*r22*(cj15*cj15)))+(((-0.138)*gclwh9_0*npx*pz))+(((-0.1399930041)*gclwh2_0*pz*r21*sj15))+(((-0.104646247009178)*cj15*gclwh2_1*npz*r21*sj15))+(((0.74858)*gclwh13_1*npz*pp*r20*(cj15*cj15)))+(((-0.001048417846)*gclwh9_1*rxp1_2*sj15))+(((-0.02)*gclwh7_0*npy*pz*r22*sj15))+(((-0.1399930041)*gclwh0_0*pz*r20*sj15))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.02)*gclwh9_0*npx*pz*r22*sj15))+(((0.37429)*cj15*gclwh7_0*pp*r21*r22))+(((-0.5603720164)*gclwh7_1*npz*rxp0_2*(cj15*cj15)))+(((-0.0875721118)*cj15*gclwh13_1*pp*r20))+(((-0.01)*cj15*gclwh13_0*pp*r20*r22*sj15))+((cj15*gclwh9_15*pp*r20*rxp2_2))+(((0.0149716)*cj15*gclwh11_1*npz*pz))+(((0.113073749341611)*cj15*gclwh15_11*r21))+(((0.001048417846)*cj15*gclwh5_1*rxp2_2))+((gclwh15_9*pp*r21*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh13_11*npz*rxp1_2))+(((-0.74858)*cj15*gclwh5_9*r22*rxp2_2*sj15))+(((-0.05165202)*gclwh13_0*rxp1_2))+((gclwh2_0*pp*pz*r21*sj15))+(((-2.0)*gclwh11_0*npz*sj15*(pz*pz)))+(((0.74858)*gclwh13_1*pp*rxp1_2))+(((0.74858)*cj15*gclwh0_1*npz*pp*r20*sj15))+(((0.02)*cj15*gclwh7_11*npz*rxp0_2*sj15))+(((-0.039241231557934)*cj15*gclwh9_1*rxp1_2))+((cj15*gclwh13_0*pp*pz*r20))+(((-0.00733855819067956)*gclwh2_1*r21*sj15))+(((0.0005165202)*cj15*gclwh0_0*r20))+(((-0.002801860082)*gclwh0_0*r20*r22*(cj15*cj15)))+(((-0.6046355518)*cj15*gclwh9_11*rxp1_2))+(((0.1401930041)*cj15*gclwh9_9*r20*r22))+(((-0.1048417846)*gclwh2_1*npy*pz*sj15))+((cj15*gclwh15_0*pp*pz*r21))+(((0.104945679009178)*cj15*gclwh9_1*npz*r20))+(((0.008403580246)*cj15*gclwh13_1*npz*r20*sj15))+(((-0.113235291341611)*gclwh7_11*r21))+(((0.0005165202)*gclwh15_0*r21*sj15))+(((-0.1401930041)*gclwh7_0*pz*r21))+(((0.02)*gclwh2_0*pz*rxp0_2))+(((-0.00138)*gclwh0_0*rxp1_2))+(((0.001399930041)*gclwh0_0*r20*r22*(sj15*sj15)))+(((-2.0)*cj15*gclwh7_11*npy*npz*pz))+(((-0.02)*gclwh7_1*npz*pp*r21*sj15))+(((0.0149716)*cj15*gclwh2_1*npz*rxp0_2))+(((0.02)*gclwh11_0*(pz*pz)))+(((-0.1048417846)*cj15*gclwh15_1*npy*pz))+(((-0.0149716)*gclwh5_1*npz*rxp2_2*(sj15*sj15)))+(((-2.0)*cj15*gclwh9_15*npx*pz*rxp2_2))+(((0.104795963009178)*gclwh15_1*npz*r21*(cj15*cj15)))+(((0.0074858)*gclwh13_0*r22*rxp1_2*sj15))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((0.80771)*gclwh11_11*pp*r22*sj15))+(((0.0004)*gclwh2_1*npz*rxp0_2*sj15))+(((0.1397930041)*gclwh11_0*pz*r22*sj15))+(((-0.5599720164)*cj15*gclwh5_1*npz*rxp2_2*sj15))+(((-0.1401930041)*cj15*gclwh9_11*npz*r20))+(((-0.04)*cj15*gclwh15_1*npy*npz*pz*sj15))+(((-0.02)*gclwh0_0*pz*rxp1_2))+(((0.0074858)*cj15*gclwh2_0*pz*r21))+(((0.02)*gclwh7_1*pp*rxp0_2*sj15))+(((-0.039241231557934)*gclwh13_1*rxp1_2))+(((0.069)*cj15*gclwh13_0*pp*r20))+(((2.0)*cj15*gclwh13_1*npx*pp*pz))+(((0.006046355518)*gclwh13_11*r20*sj15))+(((0.00039241231557934)*gclwh15_1*r21*sj15))+(((0.052323123504589)*cj15*gclwh0_0*r20*r22*sj15))+(((0.00039241231557934)*gclwh13_1*r20*sj15))+(((0.02)*cj15*gclwh9_11*npz*rxp1_2*sj15))+(((0.1399930041)*gclwh13_15*r20*rxp2_2*(cj15*cj15)))+(((-0.0096595172829)*gclwh2_0*r21*sj15))+(((-7.4858e-5)*gclwh15_0*r21*r22*(sj15*sj15)))+(((-2.0)*cj15*gclwh11_9*npz*pz*r22*sj15))+(((-1.0)*gclwh11_1*r22*sj15*(pp*pp)))+(((-2.0)*gclwh15_9*npy*pz*r22*(cj15*cj15)))+(((-0.01)*gclwh9_0*pp*r20*r22*sj15))+(((-0.104945679009178)*cj15*gclwh7_1*npz*r21))+(((0.02)*cj15*gclwh13_1*npz*pp*r20*sj15))+(((0.74858)*cj15*gclwh0_0*npx*pz*r22*sj15))+(((-0.0877721118)*gclwh9_1*pp*r20))+(((0.0074858)*gclwh15_0*pz*r21*sj15))+(((0.00733855819067956)*cj15*gclwh13_1*r20))+(((-0.004201790123)*cj15*gclwh13_0*r20*r22*sj15))+(((-0.74858)*gclwh15_1*pp*rxp0_2))+(((0.006046355518)*gclwh15_11*r21*sj15))+(((-1.0)*cj15*gclwh7_9*pp*r21*r22))+(((-0.004201790123)*cj15*gclwh15_0*r21*r22*sj15))+(((-0.04)*gclwh2_1*npy*npz*pz*(sj15*sj15)))+(((-0.05165202)*gclwh5_0*rxp2_2*sj15))+(((-1.0)*gclwh2_1*r21*sj15*(pp*pp)))+(((2.0)*cj15*gclwh7_9*npy*pz*r22))+(((0.02)*cj15*gclwh11_15*pz*rxp2_2))+(((0.02)*cj15*gclwh5_0*pz*rxp2_2))+(((0.00039241231557934)*cj15*gclwh0_1*r20))+(((0.74858)*cj15*gclwh11_0*npz*pz*r22*sj15))+(((-1.49716)*gclwh15_1*npy*npz*pz*(cj15*cj15)))+(((2.0)*cj15*gclwh7_15*npy*pz*rxp2_2))+(((0.1399930041)*gclwh15_15*r21*rxp2_2*(cj15*cj15)))+(((0.74858)*cj15*gclwh7_1*pp*rxp0_2))+(((2.0)*gclwh13_11*npx*npz*pz*(cj15*cj15)))+(((-1.61542)*gclwh11_11*npz*pz*sj15))+(((0.0877721118)*gclwh7_1*pp*r21))+(((-0.04)*gclwh0_1*npx*npz*pz*(sj15*sj15)))+(((-0.138)*cj15*gclwh13_0*npx*pz))+(((0.008403580246)*cj15*gclwh15_1*npz*r21*sj15))+(((0.02)*cj15*gclwh15_0*npy*pz*r22*sj15))+(((0.0096595172829)*gclwh11_0*r22*sj15))+(((-0.0074858)*gclwh15_0*r22*rxp0_2*sj15))+(((0.0149716)*gclwh5_1*npz*rxp2_2*(cj15*cj15)))+(((0.039241231557934)*gclwh15_1*rxp0_2))+(((-0.74858)*cj15*gclwh7_1*npz*pp*r21))+(((-0.0096733172829)*gclwh7_0*r21))+((cj15*gclwh7_11*npz*pp*r21))+(((-0.6046355518)*cj15*gclwh7_11*rxp0_2))+(((0.0074858)*cj15*gclwh0_0*pz*r20))+(((-0.052397981504589)*gclwh13_0*r20*r22*(cj15*cj15)))+(((-0.74858)*gclwh13_0*pz*rxp1_2))+(((-0.74858)*cj15*gclwh9_0*pz*rxp1_2))+(((0.74858)*cj15*gclwh9_0*npx*pz*r22))+(((-0.0875721118)*cj15*gclwh15_1*pp*r21))+(((0.0074858)*cj15*gclwh13_9*r20*r22*sj15))+(((-0.37429)*gclwh15_0*pp*r21*r22*(cj15*cj15)))+(((-0.138)*gclwh2_0*npy*pz*sj15))+(((-1.49716)*gclwh13_1*npx*npz*pz*(cj15*cj15)))+(((2.0)*cj15*gclwh15_1*npy*pp*pz))+(((0.113073749341611)*cj15*gclwh13_11*r20))+(((-0.138)*gclwh11_0*npz*pz*sj15))+((gclwh0_0*pp*pz*r20*sj15))+(((0.0074858)*cj15*gclwh0_0*r22*rxp1_2))+(((-0.0074858)*gclwh11_9*(cj15*cj15)*(r22*r22)))+(((-0.0149716)*cj15*gclwh11_0*pz*r22))+(((-0.006046355518)*cj15*gclwh11_11*r22))+(((-0.1399930041)*gclwh15_11*npz*r21*(cj15*cj15)))+(((-0.80771)*gclwh7_11*pp*r21))+(((0.1399930041)*cj15*gclwh13_0*pz*r20))+(((-0.0004)*gclwh0_1*npz*rxp1_2*sj15))+(((0.80771)*gclwh9_11*pp*r20))+(((-0.37429)*cj15*gclwh9_0*pp*r20*r22))+(((0.74858)*gclwh15_0*npy*pz*r22*(cj15*cj15)))+(((0.5603720164)*cj15*gclwh15_1*npz*rxp0_2))+(((-0.74858)*pz))+(((-0.0074858)*gclwh15_1*pp*r21*sj15))+(((-0.001048417846)*gclwh7_1*rxp0_2*sj15))+(((-1.0)*cj15*gclwh13_1*r20*(pp*pp)))+(((0.02)*gclwh11_1*npz*pp*r22*(sj15*sj15)))+(((0.0074858)*gclwh11_11*npz*r22*(cj15*cj15)))+(((-0.74858)*gclwh9_9*r22*rxp1_2*(cj15*cj15)))+(((0.069)*gclwh9_0*pp*r20))+(((-0.02)*gclwh2_1*pp*rxp0_2))+(((0.0074858)*gclwh13_0*pz*r20*sj15))+(((0.1401930041)*cj15*gclwh7_11*npz*r21))+(((0.2801860082)*gclwh9_0*r22*rxp1_2*(cj15*cj15)))+(((-0.104646247009178)*cj15*gclwh0_1*npz*r20*sj15))+(((-0.0161542)*gclwh7_11*rxp0_2*sj15))+(((0.0002)*gclwh7_0*r22*rxp0_2*(sj15*sj15)))+(((-0.74858)*gclwh7_15*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.2801860082)*cj15*gclwh13_0*r22*rxp1_2))+(((0.74858)*cj15*gclwh2_0*npy*pz*r22*sj15))+(((-0.02)*gclwh7_0*pz*rxp0_2*sj15))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.74858)*gclwh9_11*npz*rxp1_2*(cj15*cj15)))+(((0.1399930041)*cj15*gclwh15_0*pz*r21))+(((-0.74858)*cj15*gclwh15_11*npz*rxp0_2))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.0005165202)*gclwh13_0*r20*sj15))+(((0.0002)*gclwh9_0*r22*rxp1_2*(sj15*sj15)))+(((0.0074858)*cj15*gclwh15_15*r21*rxp2_2*sj15))+((gclwh13_9*pp*r20*r22*(cj15*cj15)))+(((-0.02)*cj15*gclwh7_9*r22*rxp0_2*sj15))+(((-1.0)*cj15*gclwh7_15*pp*r21*rxp2_2))+(((0.069)*gclwh2_0*pp*r21*sj15))+(((2.0)*cj15*gclwh11_11*pz*sj15*(npz*npz)))+(((0.113073749341611)*gclwh11_11*r22*sj15))+(((0.00138)*gclwh2_0*rxp0_2))+(((0.74858)*gclwh15_0*pz*rxp0_2))+((gclwh11_0*pp*pz*r22*sj15))+((cj15*gclwh11_15*pp*r22*rxp2_2*sj15))+(((0.01)*gclwh7_0*pp*r21*r22*sj15))+(((-0.0074858)*cj15*gclwh15_11*npz*r21*sj15))+(((-0.01)*gclwh0_0*pp*r20*r22*(sj15*sj15)))+((gclwh7_1*r21*(pp*pp)))+(((0.001401930041)*gclwh7_0*r21*r22*sj15))+(((-1.49716)*cj15*gclwh2_1*npy*npz*pz*sj15))+(((0.1924138964)*gclwh0_1*pp*r20*sj15))+(((-0.5603720164)*gclwh9_1*npz*rxp1_2*(cj15*cj15)))+(((-0.02)*cj15*gclwh9_9*r22*rxp1_2*sj15))+(((0.001048417846)*gclwh11_1*pz))+(((0.1401930041)*gclwh9_0*pz*r20))+(((0.6046355518)*gclwh15_11*rxp0_2))+(((0.00138)*cj15*gclwh5_0*rxp2_2))+(((0.069)*gclwh0_0*pp*r20*sj15))+(((-0.04)*cj15*gclwh13_1*npx*npz*pz*sj15))+(((-0.74858)*gclwh5_0*pz*rxp2_2*sj15))+(((-0.0299432)*cj15*gclwh9_1*npz*rxp1_2*sj15))+(((0.04)*gclwh7_1*npy*npz*pz*sj15))+((gclwh15_15*pp*r21*rxp2_2*(cj15*cj15)))+(((-0.01)*gclwh11_0*pp*(r22*r22)*(sj15*sj15)))+(((0.1924138964)*gclwh2_1*pp*r21*sj15))+(((0.74858)*cj15*gclwh2_1*npz*pp*r21*sj15))+(((0.0074858)*r22*sj15))+(((-1.0)*gclwh13_11*npz*pp*r20*(cj15*cj15)))+(((2.0)*gclwh0_1*npx*pp*pz*sj15))+(((-0.001048417846)*gclwh0_1*rxp1_2))+(((-0.0004)*gclwh9_1*npz*rxp1_2*(sj15*sj15)))+(((0.001048417846)*gclwh2_1*rxp0_2))+(((-0.04)*gclwh11_1*pz*(npz*npz)*(sj15*sj15)))+(((-0.039241231557934)*gclwh5_1*rxp2_2*sj15))+(((0.2801860082)*gclwh7_0*r22*rxp0_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh7_15*r21*rxp2_2))+(((-2.0)*cj15*gclwh13_0*npx*(pz*pz)))+(((-0.74858)*cj15*gclwh7_0*pz*rxp0_2))+((gclwh13_15*pp*r20*rxp2_2*(cj15*cj15)))+(((-0.00138)*gclwh9_0*rxp1_2*sj15))+(((-1.0)*cj15*gclwh15_1*r21*(pp*pp)))+(((0.74858)*cj15*gclwh9_1*pp*rxp1_2))+(((-0.0074858)*gclwh11_15*r22*rxp2_2*(cj15*cj15)))+(((-0.0096595172829)*gclwh0_0*r20*sj15))+(((0.005603720164)*gclwh0_1*npz*r20*(cj15*cj15)))+(((0.02)*gclwh0_0*npx*pz*r22*(sj15*sj15)))+(((0.0149716)*cj15*gclwh9_0*r22*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_0*npx*pz*r22*sj15))+(((-0.001399930041)*gclwh11_0*(r22*r22)*(sj15*sj15)))+(((0.104795963009178)*gclwh13_1*npz*r20*(cj15*cj15)))+(((0.000149716)*gclwh13_1*npz*r20*(sj15*sj15)))+(((-0.0004)*gclwh7_1*npz*rxp0_2*(sj15*sj15)))+(((0.00733855819067956)*cj15*gclwh15_1*r21))+(((0.74858)*cj15*gclwh15_15*rxp0_2*rxp2_2))+(((-0.002799860082)*gclwh2_1*npz*r21*(sj15*sj15)))+(((-0.37429)*cj15*gclwh0_0*pp*r20*r22*sj15))+(((-1.61542)*cj15*gclwh13_11*npx*pz))+(((0.1401930041)*cj15*gclwh9_15*r20*rxp2_2))+(((0.0074858)*cj15*gclwh13_15*r20*rxp2_2*sj15))+(((-0.00138)*gclwh7_0*rxp0_2*sj15))+(((2.0)*gclwh9_1*npx*pp*pz))+(((0.02)*gclwh2_0*npy*pz*r22*(sj15*sj15)))+(((-0.002803860082)*gclwh7_1*npz*r21*sj15))+(((0.138)*gclwh7_0*npy*pz))+(((-0.1048417846)*cj15*gclwh13_1*npx*pz))+(((-0.0074858)*cj15*gclwh0_1*pp*r20))+(((0.1399930041)*cj15*gclwh11_15*r22*rxp2_2*sj15))+(((-0.1048417846)*gclwh9_1*npx*pz))+(((0.1048417846)*gclwh7_1*npy*pz))+(((-0.74858)*cj15*gclwh7_0*npy*pz*r22))+(((0.1399930041)*cj15*gclwh11_9*sj15*(r22*r22)))+(((-0.002801860082)*gclwh2_0*r21*r22*(cj15*cj15)))+(((0.02)*gclwh0_1*npz*pp*r20*(sj15*sj15)))+(((-0.1399930041)*cj15*gclwh11_11*npz*r22*sj15))+(((0.069)*cj15*gclwh15_0*pp*r21))+(((2.0)*gclwh15_11*npy*npz*pz*(cj15*cj15)))+(((0.02)*gclwh5_9*r22*rxp2_2*(cj15*cj15)))+(((0.02)*gclwh9_1*pp*rxp1_2*sj15))+(((0.113235291341611)*gclwh9_11*r20))+(((-0.00039241231557934)*cj15*gclwh11_1*r22))+(((-0.1048417846)*gclwh0_1*npx*pz*sj15))+(((-0.002799860082)*gclwh0_1*npz*r20*(sj15*sj15)))+(((-0.37429)*cj15*gclwh2_0*pp*r21*r22*sj15))+(((2.0)*gclwh2_1*npy*pp*pz*sj15))+(((-0.04)*gclwh9_1*npx*npz*pz*sj15))+(((-0.01)*cj15*gclwh15_0*pp*r21*r22*sj15))+(((0.02)*gclwh0_1*pp*rxp1_2))+(((0.0074858)*gclwh5_0*r22*rxp2_2*(sj15*sj15)))+(((-0.0002)*gclwh2_0*r22*rxp0_2*sj15))+(((-2.0)*cj15*gclwh11_15*npz*pz*rxp2_2*sj15))+(((0.74858)*gclwh13_0*npx*pz*r22*(cj15*cj15)))+(((-0.052472839504589)*cj15*gclwh9_0*r20*r22))+(((0.02)*gclwh2_1*npz*pp*r21*(sj15*sj15)))+(((0.2799860082)*cj15*gclwh5_0*r22*rxp2_2*sj15))+(((-1.0)*cj15*gclwh11_11*npz*pp*r22*sj15))+(((-0.0299432)*cj15*gclwh7_1*npz*rxp0_2*sj15))+((cj15*gclwh11_9*pp*sj15*(r22*r22)))+(((-0.2801860082)*cj15*gclwh15_0*r22*rxp0_2))+(((0.02)*gclwh11_0*npz*pz*r22*(sj15*sj15)))+(((-0.052323123504589)*cj15*gclwh11_0*sj15*(r22*r22)))+(((-1.0)*gclwh0_1*r20*sj15*(pp*pp)))+(((-0.039241231557934)*cj15*gclwh7_1*rxp0_2))+(((-0.74858)*gclwh9_15*rxp1_2*rxp2_2*(cj15*cj15)))+(((-2.0)*gclwh13_9*npx*pz*r22*(cj15*cj15)))+(((0.1399930041)*cj15*r22))+(((-0.1401930041)*cj15*gclwh7_9*r21*r22))+(((0.052323123504589)*cj15*gclwh2_0*r21*r22*sj15))+(((-0.001401930041)*gclwh9_0*r20*r22*sj15))+(((0.002803860082)*gclwh9_1*npz*r20*sj15))+((cj15*gclwh9_9*pp*r20*r22))+(((-0.00734904236913956)*gclwh7_1*r21))+(((-2.0)*gclwh13_15*npx*pz*rxp2_2*(cj15*cj15)))+(((-0.6046355518)*gclwh13_11*rxp1_2))+(((0.74858)*gclwh5_1*pp*rxp2_2*sj15))+(((-0.005603720164)*gclwh11_1*npz*r22*(cj15*cj15)))+(((0.00138)*gclwh11_0*pz))+(((0.0074858)*cj15*gclwh15_9*r21*r22*sj15))+(((-0.02)*cj15*gclwh5_1*pp*rxp2_2))+(((-0.00733855819067956)*gclwh0_1*r20*sj15)));
op[19]=((-0.1830918964)+(((0.86684)*gclwh11_13*npz*pz*sj15))+(((0.74858)*gclwh15_9*rxp0_2))+(((0.86684)*gclwh9_13*npx*pz))+(((-0.003244495436)*gclwh15_13*r21*sj15))+(((-0.43342)*cj15*gclwh13_13*pp*r20))+(((-0.0005165202)*cj15*gclwh11_11*r22))+(((0.003244495436)*cj15*gclwh11_13*r22))+(((0.86684)*cj15*gclwh15_13*npy*pz))+(((0.02)*gclwh11_9*pz))+(((-0.00138)*gclwh9_11*rxp1_2*sj15))+(((-0.060675767837022)*cj15*gclwh13_13*r20))+(((-1.0)*gclwh7_9*pp*r21))+(((0.069)*cj15*gclwh13_11*pp*r20))+(((0.3244495436)*gclwh5_13*rxp2_2*sj15))+(((0.86684)*cj15*gclwh13_13*npx*pz))+(((-2.0)*cj15*gclwh15_9*npy*pz))+(((-0.0086684)*gclwh11_13*pz))+(((-0.74858)*cj15*gclwh9_9*rxp1_2))+(((0.1399930041)*gclwh11_9*r22*sj15))+(((0.0005165202)*gclwh15_11*r21*sj15))+(((-0.0096733172829)*gclwh7_11*r21))+(((-0.138)*cj15*gclwh13_11*npx*pz))+(((-0.003244495436)*gclwh13_13*r20*sj15))+(((0.1401930041)*gclwh9_9*r20))+(((0.0005165202)*gclwh13_11*r20*sj15))+(((-0.05165202)*gclwh13_11*rxp1_2))+(((-0.1401930041)*gclwh7_9*r21))+(((0.0096595172829)*gclwh11_11*r22*sj15))+(((0.1399930041)*cj15*gclwh15_9*r21))+(((-0.86684)*gclwh7_13*npy*pz))+(((0.069)*cj15*gclwh15_11*pp*r21))+(((0.02)*cj15*gclwh5_9*rxp2_2))+(((-0.138)*gclwh11_11*npz*pz*sj15))+(((-0.05165202)*cj15*gclwh7_11*rxp0_2))+(((0.05165202)*gclwh15_11*rxp0_2))+(((-0.74858)*gclwh5_9*rxp2_2*sj15))+(((-0.43342)*gclwh9_13*pp*r20))+(((0.3244495436)*cj15*gclwh9_13*rxp1_2))+(((0.0086684)*gclwh9_13*rxp1_2*sj15))+(((-0.138)*cj15*gclwh15_11*npy*pz))+(((-0.138)*gclwh9_11*npx*pz))+(((0.0096595172829)*cj15*gclwh13_11*r20))+((cj15*gclwh15_9*pp*r21))+(((0.069)*gclwh9_11*pp*r20))+(((-2.0)*cj15*gclwh13_9*npx*pz))+(((-2.0)*gclwh9_9*npx*pz))+(((-0.74858)*cj15*gclwh7_9*rxp0_2))+(((-0.0086684)*cj15*gclwh5_13*rxp2_2))+(((-0.74858)*gclwh13_9*rxp1_2))+(((-0.0074858)*cj15*gclwh11_9*r22))+(((-0.069)*gclwh7_11*pp*r21))+(((-0.02)*gclwh9_9*rxp1_2*sj15))+(((0.3244495436)*gclwh13_13*rxp1_2))+(((-0.05165202)*cj15*gclwh9_11*rxp1_2))+((gclwh9_9*pp*r20))+(((-2.0)*gclwh11_9*npz*pz*sj15))+(((-0.43342)*gclwh11_13*pp*r22*sj15))+(((0.3244495436)*cj15*gclwh7_13*rxp0_2))+(((-0.00138)*gclwh7_11*rxp0_2*sj15))+((gclwh11_9*pp*r22*sj15))+(((0.0074858)*gclwh15_9*r21*sj15))+((cj15*gclwh13_9*pp*r20))+(((0.00138)*gclwh11_11*pz))+(((-0.060762451837022)*gclwh9_13*r20))+(((0.0074858)*gclwh13_9*r20*sj15))+(((0.069)*gclwh11_11*pp*r22*sj15))+(((2.0)*gclwh7_9*npy*pz))+(((0.0096595172829)*cj15*gclwh15_11*r21))+(((-0.060675767837022)*gclwh11_13*r22*sj15))+(((0.0096733172829)*gclwh9_11*r20))+(((0.1399930041)*cj15*gclwh13_9*r20))+(((-0.3244495436)*gclwh15_13*rxp0_2))+(((0.060762451837022)*gclwh7_13*r21))+(((-0.02)*gclwh7_9*rxp0_2*sj15))+(((-0.43342)*cj15*gclwh15_13*pp*r21))+(((0.43342)*gclwh7_13*pp*r21))+(((-0.060675767837022)*cj15*gclwh15_13*r21))+(((0.138)*gclwh7_11*npy*pz))+(((0.0086684)*gclwh7_13*rxp0_2*sj15)));
op[20]=((((0.276)*x251))+(((-0.138)*x252))+(((0.10330404)*x243))+(((-0.138)*x255))+(((0.138)*x249))+(((-0.0010330404)*x246))+(((-0.0010330404)*x247))+(((-0.0193190345658)*x242))+(((-0.00276)*x235))+(((-0.0193190345658)*x245))+(((-0.0193466345658)*x239))+(((0.10330404)*x244))+(((0.276)*x254))+(((0.0010330404)*x240))+(((0.0193466345658)*x238))+(((-0.10330404)*x237))+(((0.276)*x256))+(((0.276)*x258))+(((0.10330404)*x236))+(((-0.276)*x248))+(((-0.138)*x257))+(((0.00276)*x253))+(((0.00276)*x250))+(((-0.138)*x259))+(((-0.0193190345658)*x241)));
op[21]=((((-1.73368)*x258))+(((-0.121524903674044)*x238))+(((-0.6488990872)*x236))+((cj15*gclwh7_6*x262))+(((-0.6488990872)*x243))+(((-1.0)*x269*x272))+(((4.0)*npz*sj15*x260))+(((-1.73368)*x256))+(((((0.0149716)*cj15))*((gclwh11_6*r22))))+(((0.86684)*x257))+(((-1.0)*x267*x270))+(((1.73368)*x248))+(((0.121524903674044)*x239))+(((0.121351535674044)*x242))+(((0.121351535674044)*x245))+(((-1.73368)*x254))+(((0.86684)*x255))+(((0.86684)*x252))+(((-1.0)*x266*x270))+((gclwh9_6*x274))+(((-0.006488990872)*x240))+(((-1.0)*gclwh7_6*x271))+((cj15*gclwh13_6*x274))+(((-0.2799860082)*x269))+(((0.2803860082)*x263))+((gclwh7_6*rxp0_2*x273))+(((-1.0)*gclwh15_6*x262))+((x263*x272))+((cj15*gclwh15_6*x271))+(((-0.04)*x260))+(((-0.04)*cj15*x268))+(((0.6488990872)*x237))+((cj15*gclwh9_6*x261))+(((1.49716)*sj15*x268))+(((-0.6488990872)*x244))+((gclwh13_6*x261))+(((0.006488990872)*x247))+(((0.006488990872)*x246))+(((-1.73368)*x251))+(((-1.0)*x265*x267))+(((0.121351535674044)*x241))+((gclwh9_6*rxp1_2*x273))+(((-1.0)*x267*x275))+(((-0.0173368)*x253))+(((-0.86684)*x249))+(((-0.0173368)*x250))+(((-1.0)*x265*x266))+(((-0.2803860082)*x264))+(((-1.0)*x264*x272))+(((0.86684)*x259))+(((-1.0)*x266*x275))+(((0.0173368)*x235)));
op[22]=((-0.05981196)+(((-0.01)*gclwh2_0*pp*r21*r22*(sj15*sj15)))+(((-0.5603720164)*cj15*gclwh13_1*npz*rxp1_2))+(((-0.0149716)*gclwh13_1*npz*rxp1_2*sj15))+(((-0.74858)*gclwh7_9*r22*rxp0_2*(cj15*cj15)))+(((-0.0875721118)*gclwh11_1*pp*r22*sj15))+(((0.02)*gclwh9_1*npz*pp*r20*sj15))+(((-1.0)*cj15*pp*r22))+(((-0.37429)*gclwh13_0*pp*r20*r22*(cj15*cj15)))+(((2.0)*cj15*npz*pz))+(((-0.0096595172829)*gclwh11_0*r22*sj15))+(((0.0149716)*cj15*gclwh7_0*r22*rxp0_2*sj15))+(((-0.74858)*cj15*gclwh13_9*r22*rxp1_2))+(((-0.02)*gclwh9_0*pz*rxp1_2*sj15))+(((0.1399930041)*gclwh15_9*r21*r22*(cj15*cj15)))+(((0.0161542)*gclwh11_11*pz))+(((-0.02)*cj15*gclwh9_15*rxp1_2*rxp2_2*sj15))+(((0.74858)*gclwh15_1*npz*pp*r21*(cj15*cj15)))+(((0.02)*cj15*gclwh15_1*npz*pp*r21*sj15))+(((0.00138)*gclwh7_0*rxp0_2*sj15))+(((-1.49716)*cj15*gclwh0_1*npx*npz*pz*sj15))+(((-0.0074858)*cj15*gclwh2_0*r22*rxp0_2))+(((0.74858)*cj15*gclwh11_1*npz*pp*r22*sj15))+(((0.74858)*cj15*gclwh15_9*r22*rxp0_2))+(((0.002799860082)*gclwh11_1*npz*r22*(sj15*sj15)))+(((-7.4858e-5)*gclwh13_0*r20*r22*(sj15*sj15)))+(((0.0149716)*gclwh15_1*npz*rxp0_2*sj15))+(((-0.0074858)*gclwh13_1*pp*r20*sj15))+(((-0.74858)*cj15*gclwh13_15*rxp1_2*rxp2_2))+(((1.49716)*cj15*gclwh7_1*npy*npz*pz))+(((-0.0161542)*gclwh9_11*rxp1_2*sj15))+(((-1.0)*gclwh15_11*npz*pp*r21*(cj15*cj15)))+(((-0.02)*cj15*gclwh11_11*npz*pz))+(((0.05165202)*gclwh13_0*rxp1_2))+(((-1.61542)*gclwh9_11*npx*pz))+(((0.02)*cj15*gclwh11_9*pz*r22))+((gclwh9_0*pp*pz*r20))+(((0.104646247009178)*cj15*gclwh11_1*npz*r22*sj15))+(((-1.49716)*cj15*gclwh11_1*pz*sj15*(npz*npz)))+(((-1.49716)*cj15*gclwh9_1*npx*npz*pz))+(((0.0074858)*cj15*gclwh11_1*pp*r22))+(((2.0)*gclwh11_1*npz*pp*pz*sj15))+(((0.00733855819067956)*gclwh11_1*r22*sj15))+(((-0.1399930041)*gclwh13_11*npz*r20*(cj15*cj15)))+(((-1.61542)*cj15*gclwh15_11*npy*pz))+(((0.005603720164)*gclwh2_1*npz*r21*(cj15*cj15)))+(((0.0002)*gclwh0_0*r22*rxp1_2*sj15))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.80771)*cj15*gclwh13_11*pp*r20))+(((0.00039241231557934)*cj15*gclwh2_1*r21))+(((-0.00138)*gclwh11_0*pz))+(((-0.1044417846)*gclwh11_1*npz*pz*sj15))+(((-0.0149716)*cj15*gclwh0_1*npz*rxp1_2))+(((-2.0)*cj15*gclwh15_0*npy*(pz*pz)))+(((0.052472839504589)*cj15*gclwh7_0*r21*r22))+(((2.0)*cj15*gclwh9_11*npx*npz*pz))+(((0.1399930041)*gclwh13_9*r20*r22*(cj15*cj15)))+(((0.001399930041)*gclwh2_0*r21*r22*(sj15*sj15)))+(((-2.0)*gclwh2_0*npy*sj15*(pz*pz)))+(((0.74858)*cj15*gclwh9_1*npz*pp*r20))+(((-0.0074858)*cj15*gclwh2_1*pp*r21))+(((-0.02)*gclwh11_1*pp*pz))+(((-2.0)*cj15*gclwh9_9*npx*pz*r22))+(((-0.05165202)*gclwh15_0*rxp0_2))+(((-0.0074858)*cj15*gclwh13_11*npz*r20*sj15))+(((-0.02)*cj15*gclwh7_15*rxp0_2*rxp2_2*sj15))+(((-0.37429)*cj15*gclwh11_0*pp*sj15*(r22*r22)))+(((0.00734904236913956)*gclwh9_1*r20))+(((1.61542)*gclwh7_11*npy*pz))+(((-2.0)*gclwh0_0*npx*sj15*(pz*pz)))+(((-2.0)*gclwh15_15*npy*pz*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh7_11*npz*rxp0_2*(cj15*cj15)))+(((0.002801860082)*gclwh11_0*(cj15*cj15)*(r22*r22)))+(((-1.0)*cj15*gclwh9_11*npz*pp*r20))+(((-0.0074858)*gclwh5_0*r22*rxp2_2*(cj15*cj15)))+(((0.80771)*cj15*gclwh15_11*pp*r21))+(((0.0096595172829)*gclwh2_0*r21*sj15))+(((0.000149716)*gclwh15_1*npz*r21*(sj15*sj15)))+(((-0.052397981504589)*gclwh15_0*r21*r22*(cj15*cj15)))+(((-0.069)*cj15*gclwh13_0*pp*r20))+(((-0.1399930041)*gclwh2_0*pz*r21*sj15))+(((-0.104646247009178)*cj15*gclwh2_1*npz*r21*sj15))+(((0.74858)*gclwh13_1*npz*pp*r20*(cj15*cj15)))+(((-0.001048417846)*gclwh9_1*rxp1_2*sj15))+(((-0.02)*gclwh7_0*npy*pz*r22*sj15))+(((-0.1399930041)*gclwh0_0*pz*r20*sj15))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.02)*gclwh9_0*npx*pz*r22*sj15))+(((0.37429)*cj15*gclwh7_0*pp*r21*r22))+(((-0.069)*gclwh9_0*pp*r20))+(((-0.5603720164)*gclwh7_1*npz*rxp0_2*(cj15*cj15)))+(((-0.0875721118)*cj15*gclwh13_1*pp*r20))+(((-0.01)*cj15*gclwh13_0*pp*r20*r22*sj15))+((cj15*gclwh9_15*pp*r20*rxp2_2))+(((0.0149716)*cj15*gclwh11_1*npz*pz))+(((0.113073749341611)*cj15*gclwh15_11*r21))+(((-0.069)*gclwh11_0*pp*r22*sj15))+(((0.001048417846)*cj15*gclwh5_1*rxp2_2))+((gclwh15_9*pp*r21*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh13_11*npz*rxp1_2))+(((-0.74858)*cj15*gclwh5_9*r22*rxp2_2*sj15))+(((0.069)*gclwh7_0*pp*r21))+((gclwh2_0*pp*pz*r21*sj15))+(((-2.0)*gclwh11_0*npz*sj15*(pz*pz)))+(((0.74858)*gclwh13_1*pp*rxp1_2))+(((0.74858)*cj15*gclwh0_1*npz*pp*r20*sj15))+(((0.02)*cj15*gclwh7_11*npz*rxp0_2*sj15))+(((-0.039241231557934)*cj15*gclwh9_1*rxp1_2))+((cj15*gclwh13_0*pp*pz*r20))+(((-0.00733855819067956)*gclwh2_1*r21*sj15))+(((-0.002801860082)*gclwh0_0*r20*r22*(cj15*cj15)))+(((-0.6046355518)*cj15*gclwh9_11*rxp1_2))+(((0.1401930041)*cj15*gclwh9_9*r20*r22))+(((-0.1048417846)*gclwh2_1*npy*pz*sj15))+((cj15*gclwh15_0*pp*pz*r21))+(((0.104945679009178)*cj15*gclwh9_1*npz*r20))+(((0.008403580246)*cj15*gclwh13_1*npz*r20*sj15))+(((-0.113235291341611)*gclwh7_11*r21))+(((-0.1401930041)*gclwh7_0*pz*r21))+(((0.02)*gclwh2_0*pz*rxp0_2))+(((0.001399930041)*gclwh0_0*r20*r22*(sj15*sj15)))+(((-2.0)*cj15*gclwh7_11*npy*npz*pz))+(((-0.02)*gclwh7_1*npz*pp*r21*sj15))+(((0.0149716)*cj15*gclwh2_1*npz*rxp0_2))+(((0.02)*gclwh11_0*(pz*pz)))+(((-0.1048417846)*cj15*gclwh15_1*npy*pz))+(((-0.0149716)*gclwh5_1*npz*rxp2_2*(sj15*sj15)))+(((-2.0)*cj15*gclwh9_15*npx*pz*rxp2_2))+(((0.104795963009178)*gclwh15_1*npz*r21*(cj15*cj15)))+(((0.0074858)*gclwh13_0*r22*rxp1_2*sj15))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((0.80771)*gclwh11_11*pp*r22*sj15))+(((0.0004)*gclwh2_1*npz*rxp0_2*sj15))+(((0.1397930041)*gclwh11_0*pz*r22*sj15))+(((-0.5599720164)*cj15*gclwh5_1*npz*rxp2_2*sj15))+(((-0.1401930041)*cj15*gclwh9_11*npz*r20))+(((-0.04)*cj15*gclwh15_1*npy*npz*pz*sj15))+(((-0.02)*gclwh0_0*pz*rxp1_2))+(((0.0074858)*cj15*gclwh2_0*pz*r21))+(((0.05165202)*cj15*gclwh9_0*rxp1_2))+(((0.02)*gclwh7_1*pp*rxp0_2*sj15))+(((-0.039241231557934)*gclwh13_1*rxp1_2))+(((2.0)*cj15*gclwh13_1*npx*pp*pz))+(((0.006046355518)*gclwh13_11*r20*sj15))+(((0.00039241231557934)*gclwh15_1*r21*sj15))+(((0.0096733172829)*gclwh7_0*r21))+(((0.052323123504589)*cj15*gclwh0_0*r20*r22*sj15))+(((0.00039241231557934)*gclwh13_1*r20*sj15))+(((0.02)*cj15*gclwh9_11*npz*rxp1_2*sj15))+(((0.1399930041)*gclwh13_15*r20*rxp2_2*(cj15*cj15)))+(((-7.4858e-5)*gclwh15_0*r21*r22*(sj15*sj15)))+(((-2.0)*cj15*gclwh11_9*npz*pz*r22*sj15))+(((-1.0)*gclwh11_1*r22*sj15*(pp*pp)))+(((0.138)*gclwh11_0*npz*pz*sj15))+(((-2.0)*gclwh15_9*npy*pz*r22*(cj15*cj15)))+(((-0.01)*gclwh9_0*pp*r20*r22*sj15))+(((-0.104945679009178)*cj15*gclwh7_1*npz*r21))+(((0.02)*cj15*gclwh13_1*npz*pp*r20*sj15))+(((0.0096595172829)*gclwh0_0*r20*sj15))+(((0.74858)*cj15*gclwh0_0*npx*pz*r22*sj15))+(((-0.0877721118)*gclwh9_1*pp*r20))+(((0.0074858)*gclwh15_0*pz*r21*sj15))+(((0.00733855819067956)*cj15*gclwh13_1*r20))+(((-0.004201790123)*cj15*gclwh13_0*r20*r22*sj15))+(((-0.74858)*gclwh15_1*pp*rxp0_2))+(((0.006046355518)*gclwh15_11*r21*sj15))+(((-1.0)*cj15*gclwh7_9*pp*r21*r22))+(((-0.00138)*gclwh2_0*rxp0_2))+(((-0.004201790123)*cj15*gclwh15_0*r21*r22*sj15))+(((-0.04)*gclwh2_1*npy*npz*pz*(sj15*sj15)))+(((-0.0005165202)*gclwh15_0*r21*sj15))+(((-1.0)*gclwh2_1*r21*sj15*(pp*pp)))+(((2.0)*cj15*gclwh7_9*npy*pz*r22))+(((0.02)*cj15*gclwh11_15*pz*rxp2_2))+(((0.02)*cj15*gclwh5_0*pz*rxp2_2))+(((0.00039241231557934)*cj15*gclwh0_1*r20))+(((0.74858)*cj15*gclwh11_0*npz*pz*r22*sj15))+(((-1.49716)*gclwh15_1*npy*npz*pz*(cj15*cj15)))+(((0.0005165202)*cj15*gclwh11_0*r22))+(((2.0)*cj15*gclwh7_15*npy*pz*rxp2_2))+(((0.1399930041)*gclwh15_15*r21*rxp2_2*(cj15*cj15)))+(((0.74858)*cj15*gclwh7_1*pp*rxp0_2))+(((2.0)*gclwh13_11*npx*npz*pz*(cj15*cj15)))+(((-1.61542)*gclwh11_11*npz*pz*sj15))+(((0.0877721118)*gclwh7_1*pp*r21))+(((-0.04)*gclwh0_1*npx*npz*pz*(sj15*sj15)))+(((0.008403580246)*cj15*gclwh15_1*npz*r21*sj15))+(((0.02)*cj15*gclwh15_0*npy*pz*r22*sj15))+(((-0.0074858)*gclwh15_0*r22*rxp0_2*sj15))+(((0.0149716)*gclwh5_1*npz*rxp2_2*(cj15*cj15)))+(((0.039241231557934)*gclwh15_1*rxp0_2))+(((-0.74858)*cj15*gclwh7_1*npz*pp*r21))+((cj15*gclwh7_11*npz*pp*r21))+(((0.138)*gclwh0_0*npx*pz*sj15))+(((-0.6046355518)*cj15*gclwh7_11*rxp0_2))+(((0.0074858)*cj15*gclwh0_0*pz*r20))+(((-0.052397981504589)*gclwh13_0*r20*r22*(cj15*cj15)))+(((-0.74858)*gclwh13_0*pz*rxp1_2))+(((-0.74858)*cj15*gclwh9_0*pz*rxp1_2))+(((0.74858)*cj15*gclwh9_0*npx*pz*r22))+(((-0.0875721118)*cj15*gclwh15_1*pp*r21))+(((0.0074858)*cj15*gclwh13_9*r20*r22*sj15))+(((-0.37429)*gclwh15_0*pp*r21*r22*(cj15*cj15)))+(((-0.0005165202)*cj15*gclwh2_0*r21))+(((-1.49716)*gclwh13_1*npx*npz*pz*(cj15*cj15)))+(((2.0)*cj15*gclwh15_1*npy*pp*pz))+(((0.138)*gclwh9_0*npx*pz))+(((0.113073749341611)*cj15*gclwh13_11*r20))+(((-0.069)*cj15*gclwh15_0*pp*r21))+((gclwh0_0*pp*pz*r20*sj15))+(((0.0074858)*cj15*gclwh0_0*r22*rxp1_2))+(((-0.0074858)*gclwh11_9*(cj15*cj15)*(r22*r22)))+(((-0.0149716)*cj15*gclwh11_0*pz*r22))+(((-0.006046355518)*cj15*gclwh11_11*r22))+(((-0.1399930041)*gclwh15_11*npz*r21*(cj15*cj15)))+(((-0.80771)*gclwh7_11*pp*r21))+(((0.1399930041)*cj15*gclwh13_0*pz*r20))+(((-0.0004)*gclwh0_1*npz*rxp1_2*sj15))+(((-0.0096595172829)*cj15*gclwh15_0*r21))+(((0.80771)*gclwh9_11*pp*r20))+(((-0.37429)*cj15*gclwh9_0*pp*r20*r22))+(((0.74858)*gclwh15_0*npy*pz*r22*(cj15*cj15)))+(((0.5603720164)*cj15*gclwh15_1*npz*rxp0_2))+(((-0.74858)*pz))+(((-0.0074858)*gclwh15_1*pp*r21*sj15))+(((-0.001048417846)*gclwh7_1*rxp0_2*sj15))+(((-1.0)*cj15*gclwh13_1*r20*(pp*pp)))+(((0.02)*gclwh11_1*npz*pp*r22*(sj15*sj15)))+(((0.0074858)*gclwh11_11*npz*r22*(cj15*cj15)))+(((-0.74858)*gclwh9_9*r22*rxp1_2*(cj15*cj15)))+(((-0.02)*gclwh2_1*pp*rxp0_2))+(((0.0074858)*gclwh13_0*pz*r20*sj15))+(((0.1401930041)*cj15*gclwh7_11*npz*r21))+(((0.2801860082)*gclwh9_0*r22*rxp1_2*(cj15*cj15)))+(((-0.104646247009178)*cj15*gclwh0_1*npz*r20*sj15))+(((-0.0161542)*gclwh7_11*rxp0_2*sj15))+(((0.0002)*gclwh7_0*r22*rxp0_2*(sj15*sj15)))+(((-0.74858)*gclwh7_15*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.2801860082)*cj15*gclwh13_0*r22*rxp1_2))+(((0.74858)*cj15*gclwh2_0*npy*pz*r22*sj15))+(((-0.02)*gclwh7_0*pz*rxp0_2*sj15))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.74858)*gclwh9_11*npz*rxp1_2*(cj15*cj15)))+(((0.1399930041)*cj15*gclwh15_0*pz*r21))+(((-0.74858)*cj15*gclwh15_11*npz*rxp0_2))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.138)*gclwh7_0*npy*pz))+(((0.0002)*gclwh9_0*r22*rxp1_2*(sj15*sj15)))+(((0.0074858)*cj15*gclwh15_15*r21*rxp2_2*sj15))+(((0.138)*cj15*gclwh13_0*npx*pz))+((gclwh13_9*pp*r20*r22*(cj15*cj15)))+(((-0.02)*cj15*gclwh7_9*r22*rxp0_2*sj15))+(((-1.0)*cj15*gclwh7_15*pp*r21*rxp2_2))+(((-0.069)*gclwh0_0*pp*r20*sj15))+(((-0.069)*gclwh2_0*pp*r21*sj15))+(((2.0)*cj15*gclwh11_11*pz*sj15*(npz*npz)))+(((0.113073749341611)*gclwh11_11*r22*sj15))+(((0.05165202)*cj15*gclwh7_0*rxp0_2))+(((0.74858)*gclwh15_0*pz*rxp0_2))+((gclwh11_0*pp*pz*r22*sj15))+((cj15*gclwh11_15*pp*r22*rxp2_2*sj15))+(((0.05165202)*gclwh5_0*rxp2_2*sj15))+(((0.01)*gclwh7_0*pp*r21*r22*sj15))+(((-0.0074858)*cj15*gclwh15_11*npz*r21*sj15))+(((-0.01)*gclwh0_0*pp*r20*r22*(sj15*sj15)))+((gclwh7_1*r21*(pp*pp)))+(((0.001401930041)*gclwh7_0*r21*r22*sj15))+(((-0.0096595172829)*cj15*gclwh13_0*r20))+(((-0.0005165202)*gclwh13_0*r20*sj15))+(((-1.49716)*cj15*gclwh2_1*npy*npz*pz*sj15))+(((0.1924138964)*gclwh0_1*pp*r20*sj15))+(((-0.5603720164)*gclwh9_1*npz*rxp1_2*(cj15*cj15)))+(((-0.02)*cj15*gclwh9_9*r22*rxp1_2*sj15))+(((0.001048417846)*gclwh11_1*pz))+(((0.1401930041)*gclwh9_0*pz*r20))+(((0.6046355518)*gclwh15_11*rxp0_2))+(((-0.04)*cj15*gclwh13_1*npx*npz*pz*sj15))+(((-0.74858)*gclwh5_0*pz*rxp2_2*sj15))+(((-0.0299432)*cj15*gclwh9_1*npz*rxp1_2*sj15))+(((0.04)*gclwh7_1*npy*npz*pz*sj15))+((gclwh15_15*pp*r21*rxp2_2*(cj15*cj15)))+(((-0.01)*gclwh11_0*pp*(r22*r22)*(sj15*sj15)))+(((0.138)*gclwh2_0*npy*pz*sj15))+(((0.1924138964)*gclwh2_1*pp*r21*sj15))+(((0.74858)*cj15*gclwh2_1*npz*pp*r21*sj15))+(((0.0074858)*r22*sj15))+(((-1.0)*gclwh13_11*npz*pp*r20*(cj15*cj15)))+(((2.0)*gclwh0_1*npx*pp*pz*sj15))+(((-0.001048417846)*gclwh0_1*rxp1_2))+(((-0.0004)*gclwh9_1*npz*rxp1_2*(sj15*sj15)))+(((0.001048417846)*gclwh2_1*rxp0_2))+(((-0.04)*gclwh11_1*pz*(npz*npz)*(sj15*sj15)))+(((-0.039241231557934)*gclwh5_1*rxp2_2*sj15))+(((0.2801860082)*gclwh7_0*r22*rxp0_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh7_15*r21*rxp2_2))+(((-2.0)*cj15*gclwh13_0*npx*(pz*pz)))+(((-0.74858)*cj15*gclwh7_0*pz*rxp0_2))+((gclwh13_15*pp*r20*rxp2_2*(cj15*cj15)))+(((-1.0)*cj15*gclwh15_1*r21*(pp*pp)))+(((0.74858)*cj15*gclwh9_1*pp*rxp1_2))+(((-0.0074858)*gclwh11_15*r22*rxp2_2*(cj15*cj15)))+(((0.005603720164)*gclwh0_1*npz*r20*(cj15*cj15)))+(((0.02)*gclwh0_0*npx*pz*r22*(sj15*sj15)))+(((0.0149716)*cj15*gclwh9_0*r22*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_0*npx*pz*r22*sj15))+(((-0.001399930041)*gclwh11_0*(r22*r22)*(sj15*sj15)))+(((0.104795963009178)*gclwh13_1*npz*r20*(cj15*cj15)))+(((0.000149716)*gclwh13_1*npz*r20*(sj15*sj15)))+(((-0.0004)*gclwh7_1*npz*rxp0_2*(sj15*sj15)))+(((0.00733855819067956)*cj15*gclwh15_1*r21))+(((0.74858)*cj15*gclwh15_15*rxp0_2*rxp2_2))+(((-0.002799860082)*gclwh2_1*npz*r21*(sj15*sj15)))+(((-0.37429)*cj15*gclwh0_0*pp*r20*r22*sj15))+(((-1.61542)*cj15*gclwh13_11*npx*pz))+(((0.1401930041)*cj15*gclwh9_15*r20*rxp2_2))+(((0.0074858)*cj15*gclwh13_15*r20*rxp2_2*sj15))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.0096733172829)*gclwh9_0*r20))+(((0.02)*gclwh2_0*npy*pz*r22*(sj15*sj15)))+(((-0.002803860082)*gclwh7_1*npz*r21*sj15))+(((-0.1048417846)*cj15*gclwh13_1*npx*pz))+(((-0.0074858)*cj15*gclwh0_1*pp*r20))+(((0.1399930041)*cj15*gclwh11_15*r22*rxp2_2*sj15))+(((-0.1048417846)*gclwh9_1*npx*pz))+(((0.1048417846)*gclwh7_1*npy*pz))+(((-0.74858)*cj15*gclwh7_0*npy*pz*r22))+(((0.1399930041)*cj15*gclwh11_9*sj15*(r22*r22)))+(((-0.002801860082)*gclwh2_0*r21*r22*(cj15*cj15)))+(((0.00138)*gclwh0_0*rxp1_2))+(((0.00138)*gclwh9_0*rxp1_2*sj15))+(((0.02)*gclwh0_1*npz*pp*r20*(sj15*sj15)))+(((-0.1399930041)*cj15*gclwh11_11*npz*r22*sj15))+(((2.0)*gclwh15_11*npy*npz*pz*(cj15*cj15)))+(((0.02)*gclwh5_9*r22*rxp2_2*(cj15*cj15)))+(((0.02)*gclwh9_1*pp*rxp1_2*sj15))+(((0.113235291341611)*gclwh9_11*r20))+(((-0.00039241231557934)*cj15*gclwh11_1*r22))+(((-0.1048417846)*gclwh0_1*npx*pz*sj15))+(((-0.0005165202)*cj15*gclwh0_0*r20))+(((-0.002799860082)*gclwh0_1*npz*r20*(sj15*sj15)))+(((-0.37429)*cj15*gclwh2_0*pp*r21*r22*sj15))+(((2.0)*gclwh2_1*npy*pp*pz*sj15))+(((-0.04)*gclwh9_1*npx*npz*pz*sj15))+(((-0.01)*cj15*gclwh15_0*pp*r21*r22*sj15))+(((0.02)*gclwh0_1*pp*rxp1_2))+(((0.0074858)*gclwh5_0*r22*rxp2_2*(sj15*sj15)))+(((-0.0002)*gclwh2_0*r22*rxp0_2*sj15))+(((-2.0)*cj15*gclwh11_15*npz*pz*rxp2_2*sj15))+(((0.74858)*gclwh13_0*npx*pz*r22*(cj15*cj15)))+(((-0.052472839504589)*cj15*gclwh9_0*r20*r22))+(((0.02)*gclwh2_1*npz*pp*r21*(sj15*sj15)))+(((0.2799860082)*cj15*gclwh5_0*r22*rxp2_2*sj15))+(((-1.0)*cj15*gclwh11_11*npz*pp*r22*sj15))+(((-0.0299432)*cj15*gclwh7_1*npz*rxp0_2*sj15))+((cj15*gclwh11_9*pp*sj15*(r22*r22)))+(((-0.00138)*cj15*gclwh5_0*rxp2_2))+(((-0.2801860082)*cj15*gclwh15_0*r22*rxp0_2))+(((0.02)*gclwh11_0*npz*pz*r22*(sj15*sj15)))+(((-0.052323123504589)*cj15*gclwh11_0*sj15*(r22*r22)))+(((-1.0)*gclwh0_1*r20*sj15*(pp*pp)))+(((-0.039241231557934)*cj15*gclwh7_1*rxp0_2))+(((-0.74858)*gclwh9_15*rxp1_2*rxp2_2*(cj15*cj15)))+(((-2.0)*gclwh13_9*npx*pz*r22*(cj15*cj15)))+(((0.1399930041)*cj15*r22))+(((-0.1401930041)*cj15*gclwh7_9*r21*r22))+(((0.052323123504589)*cj15*gclwh2_0*r21*r22*sj15))+(((-0.001401930041)*gclwh9_0*r20*r22*sj15))+(((0.002803860082)*gclwh9_1*npz*r20*sj15))+((cj15*gclwh9_9*pp*r20*r22))+(((-0.00734904236913956)*gclwh7_1*r21))+(((-2.0)*gclwh13_15*npx*pz*rxp2_2*(cj15*cj15)))+(((-0.6046355518)*gclwh13_11*rxp1_2))+(((0.74858)*gclwh5_1*pp*rxp2_2*sj15))+(((-0.005603720164)*gclwh11_1*npz*r22*(cj15*cj15)))+(((0.138)*cj15*gclwh15_0*npy*pz))+(((0.0074858)*cj15*gclwh15_9*r21*r22*sj15))+(((-0.02)*cj15*gclwh5_1*pp*rxp2_2))+(((-0.00733855819067956)*gclwh0_1*r20*sj15)));
IkReal x276=((0.0193466345658)*r21);
IkReal x277=(gclwh12_10*x276);
IkReal x278=((0.0193466345658)*r20);
IkReal x279=(gclwh14_10*x278);
IkReal x280=((0.10330404)*rxp1_2);
IkReal x281=(gclwh6_10*x280);
IkReal x282=((0.10330404)*rxp0_2);
IkReal x283=(gclwh8_10*x282);
IkReal x284=((0.00276)*rxp2_2);
IkReal x285=(cj15*gclwh10_10);
IkReal x286=(x284*x285);
IkReal x287=(cj15*gclwh12_10);
IkReal x288=(x282*x287);
IkReal x289=(cj15*gclwh14_10);
IkReal x290=(x280*x289);
IkReal x291=((0.0193190345658)*cj15*r20);
IkReal x292=(gclwh6_10*x291);
IkReal x293=((0.0193190345658)*cj15*r21);
IkReal x294=(gclwh8_10*x293);
IkReal x295=((0.10330404)*rxp2_2);
IkReal x296=(gclwh10_10*sj15);
IkReal x297=(x295*x296);
IkReal x298=((0.276)*npy*pz);
IkReal x299=(gclwh12_10*x298);
IkReal x300=((0.138)*pp*r21);
IkReal x301=(gclwh12_10*x300);
IkReal x302=((0.00276)*rxp0_2);
IkReal x303=(gclwh12_10*sj15);
IkReal x304=(x302*x303);
IkReal x305=((0.276)*npx*pz);
IkReal x306=(gclwh14_10*x305);
IkReal x307=((0.138)*pp*r20);
IkReal x308=(gclwh14_10*x307);
IkReal x309=((0.00276)*rxp1_2);
IkReal x310=(gclwh14_10*sj15);
IkReal x311=(x309*x310);
IkReal x312=((0.0010330404)*r20*sj15);
IkReal x313=(gclwh6_10*x312);
IkReal x314=((0.0010330404)*r21*sj15);
IkReal x315=(gclwh8_10*x314);
IkReal x316=(cj15*gclwh6_10);
IkReal x317=(x305*x316);
IkReal x318=(x307*x316);
IkReal x319=(cj15*gclwh8_10);
IkReal x320=(x298*x319);
IkReal x321=(x300*x319);
IkReal x322=((0.00276)*pz);
IkReal x323=(cj15*gclwh10_12);
IkReal x324=(cj15*gclwh12_12);
IkReal x325=(cj15*gclwh14_12);
IkReal x326=((0.0010330404)*cj15*r22);
IkReal x327=(gclwh10_12*sj15);
IkReal x328=(gclwh12_12*sj15);
IkReal x329=(gclwh14_12*sj15);
IkReal x330=((0.0193190345658)*r22*sj15);
IkReal x331=(cj15*gclwh6_12);
IkReal x332=(cj15*gclwh8_12);
IkReal x333=(gclwh4_12*sj15);
IkReal x334=((0.276)*npz*pz);
IkReal x335=((0.138)*pp*r22);
IkReal x336=((((-1.0)*gclwh14_12*x307))+((x333*x335))+((gclwh8_12*x282))+((x300*x332))+((gclwh8_12*x293))+(((-1.0)*x284*x323))+((x282*x324))+((gclwh14_12*x305))+((gclwh6_12*x291))+(((-1.0)*gclwh6_12*x280))+((x295*x327))+(((-1.0)*x298*x332))+((x280*x325))+(((-1.0)*x305*x331))+(((-1.0)*gclwh4_12*x326))+((x307*x331))+((gclwh6_12*x312))+((gclwh4_12*x322))+(((-1.0)*gclwh14_12*x278))+((gclwh4_12*x330))+((gclwh12_12*x276))+((x302*x328))+((gclwh12_12*x300))+((x309*x329))+(((-1.0)*x333*x334))+((gclwh8_12*x314))+(((-1.0)*gclwh12_12*x298)));
IkReal x337=((0.0386932691316)*r21);
IkReal x338=((0.0386932691316)*r20);
IkReal x339=((0.00552)*pz);
IkReal x340=((0.20660808)*rxp1_2);
IkReal x341=((0.20660808)*rxp0_2);
IkReal x342=(cj15*gclwh10_5);
IkReal x343=(cj15*gclwh12_5);
IkReal x344=(cj15*gclwh14_5);
IkReal x345=((0.0020660808)*cj15*r22);
IkReal x346=((0.0386380691316)*cj15*r20);
IkReal x347=((0.0386380691316)*cj15*r21);
IkReal x348=(gclwh10_5*sj15);
IkReal x349=((0.552)*npy*pz);
IkReal x350=((0.276)*pp*r21);
IkReal x351=(gclwh12_5*sj15);
IkReal x352=((0.552)*npx*pz);
IkReal x353=((0.276)*pp*r20);
IkReal x354=(gclwh14_5*sj15);
IkReal x355=((0.0386380691316)*r22*sj15);
IkReal x356=((0.0020660808)*r20*sj15);
IkReal x357=((0.0020660808)*r21*sj15);
IkReal x358=(cj15*gclwh6_5);
IkReal x359=(cj15*gclwh8_5);
IkReal x360=(gclwh4_5*sj15);
IkReal x361=((0.552)*npz*pz);
IkReal x362=((0.276)*pp*r22);
IkReal x363=(gclwh13_11*x276);
IkReal x364=(gclwh15_11*x278);
IkReal x365=(gclwh7_11*x280);
IkReal x366=(gclwh9_11*x282);
IkReal x367=((0.00276)*cj15*rxp2_2);
IkReal x368=(gclwh11_11*x367);
IkReal x369=((0.10330404)*cj15*rxp0_2);
IkReal x370=(gclwh13_11*x369);
IkReal x371=((0.10330404)*cj15*rxp1_2);
IkReal x372=(gclwh15_11*x371);
IkReal x373=(gclwh7_11*x291);
IkReal x374=(gclwh9_11*x293);
IkReal x375=((0.10330404)*rxp2_2*sj15);
IkReal x376=(gclwh11_11*x375);
IkReal x377=(gclwh13_11*x298);
IkReal x378=(gclwh13_11*x300);
IkReal x379=((0.00276)*rxp0_2*sj15);
IkReal x380=(gclwh13_11*x379);
IkReal x381=(gclwh15_11*x305);
IkReal x382=(gclwh15_11*x307);
IkReal x383=((0.00276)*rxp1_2*sj15);
IkReal x384=(gclwh15_11*x383);
IkReal x385=(gclwh7_11*x312);
IkReal x386=(gclwh9_11*x314);
IkReal x387=(cj15*gclwh7_11);
IkReal x388=(x305*x387);
IkReal x389=(x307*x387);
IkReal x390=(cj15*gclwh9_11);
IkReal x391=(x298*x390);
IkReal x392=(x300*x390);
IkReal x393=(cj15*gclwh7_13);
IkReal x394=(cj15*gclwh9_13);
IkReal x395=(gclwh5_13*sj15);
IkReal x396=((((-1.0)*x298*x394))+((gclwh15_13*x383))+((gclwh13_13*x300))+((gclwh9_13*x293))+((x300*x394))+((gclwh9_13*x282))+((gclwh13_13*x369))+((x335*x395))+((gclwh15_13*x305))+(((-1.0)*gclwh15_13*x278))+(((-1.0)*gclwh11_13*x367))+(((-1.0)*gclwh13_13*x298))+((gclwh15_13*x371))+((gclwh13_13*x276))+(((-1.0)*gclwh15_13*x307))+(((-1.0)*gclwh5_13*x326))+(((-1.0)*x334*x395))+((gclwh7_13*x312))+((x307*x393))+((gclwh5_13*x322))+((gclwh7_13*x291))+(((-1.0)*gclwh7_13*x280))+(((-1.0)*x305*x393))+((gclwh11_13*x375))+((gclwh13_13*x379))+((gclwh9_13*x314))+((gclwh5_13*x330)));
IkReal x397=((0.00552)*cj15*rxp2_2);
IkReal x398=((0.20660808)*cj15*rxp0_2);
IkReal x399=((0.20660808)*cj15*rxp1_2);
IkReal x400=((0.20660808)*rxp2_2*sj15);
IkReal x401=((0.00552)*rxp0_2*sj15);
IkReal x402=((0.00552)*rxp1_2*sj15);
IkReal x403=(cj15*gclwh7_7);
IkReal x404=(cj15*gclwh9_7);
IkReal x405=(gclwh5_7*sj15);
IkReal x406=((0.0010330404)*r22);
IkReal x407=((0.0193190345658)*r20);
IkReal x408=((0.0193190345658)*r21);
IkReal x409=((0.0193190345658)*r22);
IkReal x410=((0.0010330404)*r20);
IkReal x411=((0.0010330404)*r21);
op[23]=((0.1830918964)+(((-0.1399930041)*cj15*gclwh13_9*r20))+(((-0.1399930041)*gclwh11_9*r22*sj15))+(((-0.0005165202)*cj15*gclwh11_11*r22))+(((-1.0)*gclwh9_9*pp*r20))+(((0.060675767837022)*gclwh11_13*r22*sj15))+(((2.0)*cj15*gclwh15_9*npy*pz))+(((0.74858)*cj15*gclwh9_9*rxp1_2))+(((0.02)*gclwh7_9*rxp0_2*sj15))+(((2.0)*gclwh9_9*npx*pz))+(((-0.00138)*gclwh9_11*rxp1_2*sj15))+(((-0.1399930041)*cj15*gclwh15_9*r21))+(((0.069)*cj15*gclwh13_11*pp*r20))+(((-0.3244495436)*cj15*gclwh9_13*rxp1_2))+(((-0.060762451837022)*gclwh7_13*r21))+(((0.060675767837022)*cj15*gclwh13_13*r20))+(((-1.0)*gclwh11_9*pp*r22*sj15))+(((0.74858)*gclwh5_9*rxp2_2*sj15))+(((0.0005165202)*gclwh15_11*r21*sj15))+(((0.43342)*gclwh9_13*pp*r20))+(((-0.0096733172829)*gclwh7_11*r21))+(((-1.0)*cj15*gclwh15_9*pp*r21))+(((-0.138)*cj15*gclwh13_11*npx*pz))+(((0.0005165202)*gclwh13_11*r20*sj15))+(((0.060675767837022)*cj15*gclwh15_13*r21))+(((-0.05165202)*gclwh13_11*rxp1_2))+(((0.0096595172829)*gclwh11_11*r22*sj15))+(((-0.02)*gclwh11_9*pz))+(((-0.3244495436)*gclwh5_13*rxp2_2*sj15))+(((0.069)*cj15*gclwh15_11*pp*r21))+(((-1.0)*cj15*gclwh13_9*pp*r20))+(((-0.138)*gclwh11_11*npz*pz*sj15))+(((-0.05165202)*cj15*gclwh7_11*rxp0_2))+(((-0.86684)*gclwh11_13*npz*pz*sj15))+(((-0.0074858)*gclwh15_9*r21*sj15))+(((2.0)*gclwh11_9*npz*pz*sj15))+(((0.05165202)*gclwh15_11*rxp0_2))+(((2.0)*cj15*gclwh13_9*npx*pz))+(((-0.02)*cj15*gclwh5_9*rxp2_2))+(((0.43342)*cj15*gclwh15_13*pp*r21))+(((-0.138)*cj15*gclwh15_11*npy*pz))+(((-0.138)*gclwh9_11*npx*pz))+(((0.0096595172829)*cj15*gclwh13_11*r20))+(((0.02)*gclwh9_9*rxp1_2*sj15))+(((0.069)*gclwh9_11*pp*r20))+(((0.74858)*gclwh13_9*rxp1_2))+(((0.74858)*cj15*gclwh7_9*rxp0_2))+(((-0.0074858)*gclwh13_9*r20*sj15))+(((-0.3244495436)*gclwh13_13*rxp1_2))+(((-0.86684)*cj15*gclwh15_13*npy*pz))+(((-0.069)*gclwh7_11*pp*r21))+(((-0.43342)*gclwh7_13*pp*r21))+(((-0.1401930041)*gclwh9_9*r20))+(((0.1401930041)*gclwh7_9*r21))+(((0.0086684)*gclwh11_13*pz))+(((0.86684)*gclwh7_13*npy*pz))+(((-0.05165202)*cj15*gclwh9_11*rxp1_2))+(((-0.74858)*gclwh15_9*rxp0_2))+(((0.0074858)*cj15*gclwh11_9*r22))+(((0.003244495436)*gclwh15_13*r21*sj15))+(((-0.00138)*gclwh7_11*rxp0_2*sj15))+((gclwh7_9*pp*r21))+(((0.00138)*gclwh11_11*pz))+(((-0.0086684)*gclwh7_13*rxp0_2*sj15))+(((0.003244495436)*gclwh13_13*r20*sj15))+(((0.0086684)*cj15*gclwh5_13*rxp2_2))+(((-2.0)*gclwh7_9*npy*pz))+(((0.069)*gclwh11_11*pp*r22*sj15))+(((-0.86684)*gclwh9_13*npx*pz))+(((0.3244495436)*gclwh15_13*rxp0_2))+(((0.0096595172829)*cj15*gclwh15_11*r21))+(((-0.0086684)*gclwh9_13*rxp1_2*sj15))+(((0.0096733172829)*gclwh9_11*r20))+(((0.43342)*cj15*gclwh13_13*pp*r20))+(((0.43342)*gclwh11_13*pp*r22*sj15))+(((0.060762451837022)*gclwh9_13*r20))+(((-0.003244495436)*cj15*gclwh11_13*r22))+(((0.138)*gclwh7_11*npy*pz))+(((-0.3244495436)*cj15*gclwh7_13*rxp0_2))+(((-0.86684)*cj15*gclwh13_13*npx*pz)));
op[24]=(x297+x292+x290+x294+x301+x306+x304+(((-1.0)*x286))+(((-1.0)*x299))+(((-1.0)*x308))+x336+x277+(((-1.0)*x281))+x321+(((-1.0)*x279))+x313+x315+x311+x318+(((-1.0)*x317))+x288+x283+(((-1.0)*x320)));
op[25]=((((-0.01425595752)*cj15*gclwh14_4*rxp1_2))+(((0.0145768)*gclwh12_3*rxp0_2*sj15))+(((1.49716)*cj15*gclwh12_8*rxp0_2))+(((-0.2803860082)*gclwh14_8*r20))+(((0.2799860082)*cj15*gclwh8_8*r21))+(((0.72884)*cj15*gclwh6_3*pp*r20))+(((4.0)*gclwh14_8*npx*pz))+(((-1.45768)*cj15*gclwh8_3*npy*pz))+(((0.038088)*cj15*gclwh6_4*npx*pz))+(((0.038088)*cj15*gclwh8_4*npy*pz))+(((-0.0145768)*cj15*gclwh10_3*rxp2_2))+(((0.0145768)*gclwh14_3*rxp1_2*sj15))+(((-0.0001425595752)*gclwh8_4*r21*sj15))+(((-0.0026660267700804)*cj15*gclwh8_4*r21))+(((-0.019044)*gclwh4_4*pp*r22*sj15))+(((-1.45768)*gclwh4_3*npz*pz*sj15))+(((-1.45768)*cj15*gclwh6_3*npx*pz))+(((1.45768)*gclwh14_3*npx*pz))+(((0.019044)*gclwh14_4*pp*r20))+(((0.5455950472)*gclwh8_3*rxp0_2))+(((0.038088)*gclwh12_4*npy*pz))+(((-0.005455950472)*cj15*gclwh4_3*r22))+(((-0.019044)*gclwh12_4*pp*r21))+(((1.49716)*gclwh10_8*rxp2_2*sj15))+(((1.49716)*cj15*gclwh14_8*rxp1_2))+(((0.0026698355700804)*gclwh14_4*r20))+(((-0.72884)*gclwh14_3*pp*r20))+(((0.0001425595752)*cj15*gclwh4_4*r22))+(((-0.04)*cj15*gclwh10_8*rxp2_2))+(((0.102032501108244)*cj15*gclwh8_3*r21))+(((0.2803860082)*gclwh12_8*r21))+(((0.72884)*cj15*gclwh8_3*pp*r21))+(((-0.102178269108244)*gclwh14_3*r20))+(((2.0)*gclwh12_8*pp*r21))+(((0.038088)*gclwh4_4*npz*pz*sj15))+(((0.005455950472)*gclwh8_3*r21*sj15))+(((0.72884)*gclwh12_3*pp*r21))+(((0.2799860082)*gclwh4_8*r22*sj15))+(((-0.0149716)*cj15*gclwh4_8*r22))+(((-0.01425595752)*gclwh8_4*rxp0_2))+(((-4.0)*gclwh12_8*npy*pz))+(((-4.0)*gclwh4_8*npz*pz*sj15))+(((0.04)*gclwh14_8*rxp1_2*sj15))+(((0.04)*gclwh12_8*rxp0_2*sj15))+(((-0.01425595752)*gclwh10_4*rxp2_2*sj15))+(((0.2799860082)*cj15*gclwh6_8*r20))+(((-2.0)*gclwh14_8*pp*r20))+(((-4.0)*cj15*gclwh8_8*npy*pz))+(((-0.0026698355700804)*gclwh12_4*r21))+(((-0.0026660267700804)*cj15*gclwh6_4*r20))+(((-0.0026660267700804)*gclwh4_4*r22*sj15))+(((0.01425595752)*gclwh6_4*rxp1_2))+(((2.0)*cj15*gclwh6_8*pp*r20))+(((-1.45768)*gclwh12_3*npy*pz))+(((0.5455950472)*gclwh10_3*rxp2_2*sj15))+(((1.49716)*gclwh8_8*rxp0_2))+(((0.5455950472)*cj15*gclwh14_3*rxp1_2))+(((-0.038088)*gclwh14_4*npx*pz))+(((0.5455950472)*cj15*gclwh12_3*rxp0_2))+(((0.102178269108244)*gclwh12_3*r21))+(((-0.019044)*cj15*gclwh6_4*pp*r20))+(((-0.00038088)*gclwh4_4*pz))+(((-0.00038088)*gclwh12_4*rxp0_2*sj15))+(((-0.0001425595752)*gclwh6_4*r20*sj15))+(((-0.019044)*cj15*gclwh8_4*pp*r21))+(((0.102032501108244)*gclwh4_3*r22*sj15))+(((0.04)*gclwh4_8*pz))+(((0.102032501108244)*cj15*gclwh6_3*r20))+(((2.0)*cj15*gclwh8_8*pp*r21))+(((0.005455950472)*gclwh6_3*r20*sj15))+(((-0.00038088)*gclwh14_4*rxp1_2*sj15))+(((-1.49716)*gclwh6_8*rxp1_2))+(((0.0149716)*gclwh6_8*r20*sj15))+(((0.0145768)*gclwh4_3*pz))+(((-0.01425595752)*cj15*gclwh12_4*rxp0_2))+(((2.0)*gclwh4_8*pp*r22*sj15))+(((0.72884)*gclwh4_3*pp*r22*sj15))+(((-4.0)*cj15*gclwh6_8*npx*pz))+(((0.0149716)*gclwh8_8*r21*sj15))+(((-0.5455950472)*gclwh6_3*rxp1_2))+(((0.00038088)*cj15*gclwh10_4*rxp2_2)));
op[26]=(((gclwh12_5*x349))+(((-1.0)*x341*x343))+((x349*x359))+(((-0.20660808)*rxp2_2*x348))+((gclwh6_5*x340))+(((-1.0)*gclwh6_5*x356))+(((-0.00552)*rxp1_2*x354))+(((-1.0)*x360*x362))+((gclwh14_5*x353))+((x360*x361))+(((-1.0)*gclwh14_5*x352))+(((-1.0)*gclwh6_5*x346))+((x352*x358))+(((-1.0)*gclwh4_5*x339))+(((0.00552)*rxp2_2*x342))+(((-1.0)*gclwh12_5*x337))+((gclwh14_5*x338))+(((-1.0)*gclwh8_5*x347))+(((-1.0)*gclwh4_5*x355))+(((-1.0)*gclwh12_5*x350))+(((-1.0)*x353*x358))+(((-1.0)*x350*x359))+(((-1.0)*x340*x344))+(((-1.0)*gclwh8_5*x341))+((gclwh4_5*x345))+(((-1.0)*gclwh8_5*x357))+(((-0.00552)*rxp0_2*x351)));
op[27]=0;
op[28]=((((-1.0)*x313))+(((-1.0)*x283))+(((-1.0)*x277))+(((-1.0)*x315))+x299+(((-1.0)*x290))+x308+(((-1.0)*x304))+(((-1.0)*x297))+(((-1.0)*x318))+x336+x279+(((-1.0)*x306))+x320+(((-1.0)*x294))+x317+(((-1.0)*x301))+(((-1.0)*x292))+(((-1.0)*x288))+x286+x281+(((-1.0)*x311))+(((-1.0)*x321)));
op[29]=((((0.019044)*cj15*gclwh6_4*pp*r20))+(((0.0145768)*gclwh12_3*rxp0_2*sj15))+(((1.49716)*cj15*gclwh12_8*rxp0_2))+(((-0.2803860082)*gclwh14_8*r20))+(((0.2799860082)*cj15*gclwh8_8*r21))+(((0.72884)*cj15*gclwh6_3*pp*r20))+(((-0.038088)*gclwh12_4*npy*pz))+(((0.0001425595752)*gclwh8_4*r21*sj15))+(((4.0)*gclwh14_8*npx*pz))+(((-1.45768)*cj15*gclwh8_3*npy*pz))+(((0.0026660267700804)*cj15*gclwh8_4*r21))+(((0.0026660267700804)*gclwh4_4*r22*sj15))+(((0.00038088)*gclwh4_4*pz))+(((-0.0145768)*cj15*gclwh10_3*rxp2_2))+(((0.0145768)*gclwh14_3*rxp1_2*sj15))+(((-1.45768)*gclwh4_3*npz*pz*sj15))+(((0.01425595752)*gclwh10_4*rxp2_2*sj15))+(((-1.45768)*cj15*gclwh6_3*npx*pz))+(((-0.038088)*cj15*gclwh6_4*npx*pz))+(((1.45768)*gclwh14_3*npx*pz))+(((0.5455950472)*gclwh8_3*rxp0_2))+(((0.01425595752)*gclwh8_4*rxp0_2))+(((-0.038088)*gclwh4_4*npz*pz*sj15))+(((-0.005455950472)*cj15*gclwh4_3*r22))+(((1.49716)*gclwh10_8*rxp2_2*sj15))+(((1.49716)*cj15*gclwh14_8*rxp1_2))+(((0.019044)*gclwh4_4*pp*r22*sj15))+(((0.0026660267700804)*cj15*gclwh6_4*r20))+(((-0.72884)*gclwh14_3*pp*r20))+(((-0.04)*cj15*gclwh10_8*rxp2_2))+(((0.102032501108244)*cj15*gclwh8_3*r21))+(((0.2803860082)*gclwh12_8*r21))+(((0.0026698355700804)*gclwh12_4*r21))+(((0.72884)*cj15*gclwh8_3*pp*r21))+(((-0.102178269108244)*gclwh14_3*r20))+(((2.0)*gclwh12_8*pp*r21))+(((0.00038088)*gclwh12_4*rxp0_2*sj15))+(((0.005455950472)*gclwh8_3*r21*sj15))+(((0.72884)*gclwh12_3*pp*r21))+(((0.2799860082)*gclwh4_8*r22*sj15))+(((-0.0149716)*cj15*gclwh4_8*r22))+(((-4.0)*gclwh12_8*npy*pz))+(((-4.0)*gclwh4_8*npz*pz*sj15))+(((0.04)*gclwh14_8*rxp1_2*sj15))+(((-0.0026698355700804)*gclwh14_4*r20))+(((0.04)*gclwh12_8*rxp0_2*sj15))+(((-0.00038088)*cj15*gclwh10_4*rxp2_2))+(((0.2799860082)*cj15*gclwh6_8*r20))+(((-0.019044)*gclwh14_4*pp*r20))+(((0.019044)*gclwh12_4*pp*r21))+(((-2.0)*gclwh14_8*pp*r20))+(((-4.0)*cj15*gclwh8_8*npy*pz))+(((2.0)*cj15*gclwh6_8*pp*r20))+(((-1.45768)*gclwh12_3*npy*pz))+(((0.01425595752)*cj15*gclwh12_4*rxp0_2))+(((0.5455950472)*gclwh10_3*rxp2_2*sj15))+(((1.49716)*gclwh8_8*rxp0_2))+(((0.5455950472)*cj15*gclwh14_3*rxp1_2))+(((0.5455950472)*cj15*gclwh12_3*rxp0_2))+(((0.102178269108244)*gclwh12_3*r21))+(((0.01425595752)*cj15*gclwh14_4*rxp1_2))+(((0.102032501108244)*gclwh4_3*r22*sj15))+(((-0.01425595752)*gclwh6_4*rxp1_2))+(((0.04)*gclwh4_8*pz))+(((0.102032501108244)*cj15*gclwh6_3*r20))+(((-0.0001425595752)*cj15*gclwh4_4*r22))+(((2.0)*cj15*gclwh8_8*pp*r21))+(((0.005455950472)*gclwh6_3*r20*sj15))+(((-1.49716)*gclwh6_8*rxp1_2))+(((-0.038088)*cj15*gclwh8_4*npy*pz))+(((0.0149716)*gclwh6_8*r20*sj15))+(((0.0145768)*gclwh4_3*pz))+(((0.0001425595752)*gclwh6_4*r20*sj15))+(((2.0)*gclwh4_8*pp*r22*sj15))+(((0.038088)*gclwh14_4*npx*pz))+(((0.00038088)*gclwh14_4*rxp1_2*sj15))+(((0.72884)*gclwh4_3*pp*r22*sj15))+(((-4.0)*cj15*gclwh6_8*npx*pz))+(((0.0149716)*gclwh8_8*r21*sj15))+(((0.019044)*cj15*gclwh8_4*pp*r21))+(((-0.5455950472)*gclwh6_3*rxp1_2)));
op[30]=((((-0.0026660267700804)*cj15*gclwh7_1*r20))+(((2.0)*gclwh13_9*pp*r21))+(((-1.45768)*cj15*gclwh9_0*npy*pz))+(((-4.0)*gclwh5_9*npz*pz*sj15))+(((-0.0145768)*cj15*gclwh11_0*rxp2_2))+(((0.00038088)*cj15*gclwh11_1*rxp2_2))+(((0.005455950472)*gclwh7_0*r20*sj15))+(((0.038088)*cj15*gclwh7_1*npx*pz))+(((-0.019044)*gclwh5_1*pp*r22*sj15))+(((0.01425595752)*gclwh7_1*rxp1_2))+(((1.49716)*cj15*gclwh13_9*rxp0_2))+(((0.102032501108244)*cj15*gclwh9_0*r21))+(((0.72884)*gclwh5_0*pp*r22*sj15))+(((-1.45768)*gclwh5_0*npz*pz*sj15))+(((-0.01425595752)*gclwh11_1*rxp2_2*sj15))+(((0.04)*gclwh13_9*rxp0_2*sj15))+(((0.038088)*cj15*gclwh9_1*npy*pz))+(((0.5455950472)*gclwh9_0*rxp0_2))+(((1.49716)*gclwh11_9*rxp2_2*sj15))+(((0.102178269108244)*gclwh13_0*r21))+(((0.005455950472)*gclwh9_0*r21*sj15))+(((-1.49716)*gclwh7_9*rxp1_2))+(((-0.2803860082)*gclwh15_9*r20))+(((-0.72884)*gclwh15_0*pp*r20))+(((0.102032501108244)*gclwh5_0*r22*sj15))+(((-0.0026660267700804)*gclwh5_1*r22*sj15))+(((0.102032501108244)*cj15*gclwh7_0*r20))+(((2.0)*cj15*gclwh9_9*pp*r21))+(((-0.00038088)*gclwh5_1*pz))+(((-0.01425595752)*cj15*gclwh15_1*rxp1_2))+(((0.0001425595752)*cj15*gclwh5_1*r22))+(((0.038088)*gclwh13_1*npy*pz))+(((-0.01425595752)*cj15*gclwh13_1*rxp0_2))+(((-0.01425595752)*gclwh9_1*rxp0_2))+(((0.019044)*gclwh15_1*pp*r20))+(((0.0145768)*gclwh13_0*rxp0_2*sj15))+(((2.0)*gclwh5_9*pp*r22*sj15))+(((0.72884)*cj15*gclwh7_0*pp*r20))+(((0.0149716)*gclwh9_9*r21*sj15))+(((-0.005455950472)*cj15*gclwh5_0*r22))+(((0.72884)*gclwh13_0*pp*r21))+(((-0.00038088)*gclwh15_1*rxp1_2*sj15))+(((1.45768)*gclwh15_0*npx*pz))+(((-0.0149716)*cj15*gclwh5_9*r22))+(((0.2799860082)*cj15*gclwh9_9*r21))+(((0.5455950472)*cj15*gclwh13_0*rxp0_2))+(((0.04)*gclwh5_9*pz))+(((-1.45768)*gclwh13_0*npy*pz))+(((-0.019044)*cj15*gclwh9_1*pp*r21))+(((2.0)*cj15*gclwh7_9*pp*r20))+(((-4.0)*cj15*gclwh9_9*npy*pz))+(((0.0145768)*gclwh5_0*pz))+(((0.5455950472)*cj15*gclwh15_0*rxp1_2))+(((-0.0001425595752)*gclwh9_1*r21*sj15))+(((-4.0)*cj15*gclwh7_9*npx*pz))+(((0.0026698355700804)*gclwh15_1*r20))+(((-0.102178269108244)*gclwh15_0*r20))+(((0.2799860082)*gclwh5_9*r22*sj15))+(((-0.038088)*gclwh15_1*npx*pz))+(((-4.0)*gclwh13_9*npy*pz))+(((-0.0026660267700804)*cj15*gclwh9_1*r21))+(((-0.04)*cj15*gclwh11_9*rxp2_2))+(((-0.0001425595752)*gclwh7_1*r20*sj15))+(((1.49716)*cj15*gclwh15_9*rxp1_2))+(((1.49716)*gclwh9_9*rxp0_2))+(((0.038088)*gclwh5_1*npz*pz*sj15))+(((0.72884)*cj15*gclwh9_0*pp*r21))+(((-0.0026698355700804)*gclwh13_1*r21))+(((-0.019044)*cj15*gclwh7_1*pp*r20))+(((0.2803860082)*gclwh13_9*r21))+(((-1.45768)*cj15*gclwh7_0*npx*pz))+(((-0.5455950472)*gclwh7_0*rxp1_2))+(((0.0145768)*gclwh15_0*rxp1_2*sj15))+(((0.04)*gclwh15_9*rxp1_2*sj15))+(((-0.00038088)*gclwh13_1*rxp0_2*sj15))+(((-0.019044)*gclwh13_1*pp*r21))+(((4.0)*gclwh15_9*npx*pz))+(((0.2799860082)*cj15*gclwh7_9*r20))+(((-2.0)*gclwh15_9*pp*r20))+(((0.5455950472)*gclwh11_0*rxp2_2*sj15))+(((0.0149716)*gclwh7_9*r20*sj15)));
op[31]=((((-1.0)*x386))+x396+x391+(((-1.0)*x374))+(((-1.0)*x384))+(((-1.0)*x392))+(((-1.0)*x372))+(((-1.0)*x370))+(((-1.0)*x380))+(((-1.0)*x385))+(((-1.0)*x363))+x388+x382+(((-1.0)*x381))+x368+x364+x365+(((-1.0)*x378))+x377+(((-1.0)*x366))+(((-1.0)*x376))+(((-1.0)*x389))+(((-1.0)*x373)));
op[32]=0;
op[33]=((((-1.0)*gclwh15_7*x399))+(((-1.0)*gclwh11_7*x400))+((gclwh15_7*x353))+(((-1.0)*gclwh15_7*x402))+((x352*x403))+((gclwh13_7*x349))+(((-1.0)*gclwh9_7*x357))+(((-1.0)*gclwh5_7*x355))+(((-1.0)*x362*x405))+(((-1.0)*gclwh13_7*x398))+(((-1.0)*gclwh13_7*x337))+((gclwh11_7*x397))+(((-1.0)*gclwh13_7*x401))+(((-1.0)*gclwh15_7*x352))+(((-1.0)*x350*x404))+((gclwh7_7*x340))+(((-1.0)*gclwh13_7*x350))+(((-1.0)*gclwh5_7*x339))+(((-1.0)*gclwh7_7*x356))+(((-1.0)*gclwh9_7*x341))+((gclwh15_7*x338))+((x361*x405))+(((-1.0)*x353*x403))+(((-1.0)*gclwh9_7*x347))+((x349*x404))+(((-1.0)*gclwh7_7*x346))+((gclwh5_7*x345)));
op[34]=((((2.0)*gclwh13_9*pp*r21))+(((-1.45768)*cj15*gclwh9_0*npy*pz))+(((-4.0)*gclwh5_9*npz*pz*sj15))+(((-0.0145768)*cj15*gclwh11_0*rxp2_2))+(((0.00038088)*gclwh5_1*pz))+(((0.005455950472)*gclwh7_0*r20*sj15))+(((1.49716)*cj15*gclwh13_9*rxp0_2))+(((0.102032501108244)*cj15*gclwh9_0*r21))+(((0.72884)*gclwh5_0*pp*r22*sj15))+(((-1.45768)*gclwh5_0*npz*pz*sj15))+(((-0.0026698355700804)*gclwh15_1*r20))+(((0.04)*gclwh13_9*rxp0_2*sj15))+(((0.0026660267700804)*gclwh5_1*r22*sj15))+(((0.5455950472)*gclwh9_0*rxp0_2))+(((1.49716)*gclwh11_9*rxp2_2*sj15))+(((0.102178269108244)*gclwh13_0*r21))+(((0.005455950472)*gclwh9_0*r21*sj15))+(((0.01425595752)*cj15*gclwh15_1*rxp1_2))+(((-1.49716)*gclwh7_9*rxp1_2))+(((-0.2803860082)*gclwh15_9*r20))+(((-0.72884)*gclwh15_0*pp*r20))+(((0.102032501108244)*gclwh5_0*r22*sj15))+(((-0.038088)*gclwh13_1*npy*pz))+(((0.102032501108244)*cj15*gclwh7_0*r20))+(((2.0)*cj15*gclwh9_9*pp*r21))+(((0.01425595752)*gclwh11_1*rxp2_2*sj15))+(((0.00038088)*gclwh13_1*rxp0_2*sj15))+(((0.0026660267700804)*cj15*gclwh7_1*r20))+(((0.019044)*gclwh5_1*pp*r22*sj15))+(((0.0145768)*gclwh13_0*rxp0_2*sj15))+(((2.0)*gclwh5_9*pp*r22*sj15))+(((-0.038088)*cj15*gclwh9_1*npy*pz))+(((0.72884)*cj15*gclwh7_0*pp*r20))+(((0.00038088)*gclwh15_1*rxp1_2*sj15))+(((0.0149716)*gclwh9_9*r21*sj15))+(((0.0026698355700804)*gclwh13_1*r21))+(((-0.005455950472)*cj15*gclwh5_0*r22))+(((0.72884)*gclwh13_0*pp*r21))+(((0.0026660267700804)*cj15*gclwh9_1*r21))+(((1.45768)*gclwh15_0*npx*pz))+(((-0.0149716)*cj15*gclwh5_9*r22))+(((-0.01425595752)*gclwh7_1*rxp1_2))+(((0.2799860082)*cj15*gclwh9_9*r21))+(((0.5455950472)*cj15*gclwh13_0*rxp0_2))+(((0.04)*gclwh5_9*pz))+(((-1.45768)*gclwh13_0*npy*pz))+(((2.0)*cj15*gclwh7_9*pp*r20))+(((-4.0)*cj15*gclwh9_9*npy*pz))+(((-0.00038088)*cj15*gclwh11_1*rxp2_2))+(((0.0145768)*gclwh5_0*pz))+(((0.038088)*gclwh15_1*npx*pz))+(((0.5455950472)*cj15*gclwh15_0*rxp1_2))+(((-4.0)*cj15*gclwh7_9*npx*pz))+(((-0.102178269108244)*gclwh15_0*r20))+(((-0.038088)*gclwh5_1*npz*pz*sj15))+(((0.2799860082)*gclwh5_9*r22*sj15))+(((0.019044)*cj15*gclwh9_1*pp*r21))+(((0.0001425595752)*gclwh9_1*r21*sj15))+(((-4.0)*gclwh13_9*npy*pz))+(((-0.04)*cj15*gclwh11_9*rxp2_2))+(((-0.019044)*gclwh15_1*pp*r20))+(((1.49716)*cj15*gclwh15_9*rxp1_2))+(((0.01425595752)*gclwh9_1*rxp0_2))+(((1.49716)*gclwh9_9*rxp0_2))+(((0.0001425595752)*gclwh7_1*r20*sj15))+(((-0.038088)*cj15*gclwh7_1*npx*pz))+(((0.72884)*cj15*gclwh9_0*pp*r21))+(((-0.0001425595752)*cj15*gclwh5_1*r22))+(((0.019044)*gclwh13_1*pp*r21))+(((0.01425595752)*cj15*gclwh13_1*rxp0_2))+(((0.2803860082)*gclwh13_9*r21))+(((-1.45768)*cj15*gclwh7_0*npx*pz))+(((-0.5455950472)*gclwh7_0*rxp1_2))+(((0.0145768)*gclwh15_0*rxp1_2*sj15))+(((0.04)*gclwh15_9*rxp1_2*sj15))+(((4.0)*gclwh15_9*npx*pz))+(((0.2799860082)*cj15*gclwh7_9*r20))+(((-2.0)*gclwh15_9*pp*r20))+(((0.5455950472)*gclwh11_0*rxp2_2*sj15))+(((0.019044)*cj15*gclwh7_1*pp*r20))+(((0.0149716)*gclwh7_9*r20*sj15)));
op[35]=((((-1.0)*x388))+x392+x396+(((-1.0)*x382))+x389+x381+x384+x386+x380+x385+(((-1.0)*x368))+x363+x366+(((-1.0)*x377))+(((-1.0)*x391))+x370+x372+x378+x374+x373+x376+(((-1.0)*x365))+(((-1.0)*x364)));
op[36]=((-0.10057992)+((gclwh6_10*x298))+((x296*x335))+(((-1.0)*gclwh6_10*x379))+(((-1.0)*gclwh6_10*x276))+(((-1.0)*x323*x406))+((gclwh10_10*x322))+((gclwh14_12*x282))+((gclwh4_12*x367))+((gclwh8_10*x278))+(((-1.0)*gclwh8_10*x383))+(((-1.0)*x296*x334))+((x310*x411))+((x307*x324))+((gclwh10_12*x322))+(((-1.0)*x289*x298))+(((-1.0)*gclwh6_12*x369))+((x329*x411))+((x327*x409))+(((-1.0)*gclwh8_10*x305))+((x325*x408))+(((-1.0)*gclwh12_12*x280))+((gclwh8_12*x278))+(((-1.0)*x305*x324))+((x300*x325))+((gclwh14_10*x282))+(((-1.0)*gclwh6_10*x369))+((x327*x335))+(((-1.0)*gclwh8_10*x371))+(((-1.0)*gclwh8_12*x305))+(((-1.0)*gclwh8_12*x383))+(((-1.0)*gclwh12_10*x280))+(((-1.0)*gclwh4_12*x375))+((x296*x409))+(((-1.0)*gclwh6_12*x276))+(((-1.0)*gclwh6_12*x379))+((gclwh6_12*x298))+(((-1.0)*gclwh6_12*x300))+(((-1.0)*x298*x325))+(((-1.0)*gclwh8_12*x371))+(((-1.0)*x285*x406))+((x287*x407))+((x324*x407))+((x303*x410))+((gclwh8_10*x307))+(((-1.0)*gclwh6_10*x300))+((gclwh8_12*x307))+(((-1.0)*x287*x305))+(((-1.0)*x327*x334))+((x289*x408))+((x328*x410))+((x287*x307))+((x289*x300)));
op[37]=((0.2465598728)+(((0.2799860082)*cj15*gclwh12_8*r20))+(((-1.45768)*gclwh8_3*npx*pz))+(((2.0)*gclwh8_8*pp*r20))+(((0.005455950472)*gclwh12_3*r20*sj15))+(((0.0145768)*cj15*gclwh4_3*rxp2_2))+(((-0.005455950472)*cj15*gclwh1_3*r20))+(((0.72884)*cj15*gclwh12_3*pp*r20))+(((1.49716)*gclwh14_8*rxp0_2))+(((-0.00038088)*gclwh1_4*rxp1_2))+(((0.01425595752)*gclwh4_4*rxp2_2*sj15))+(((0.0001425595752)*cj15*gclwh10_4*r22))+(((-1.49716)*cj15*gclwh8_8*rxp1_2))+(((0.72884)*cj15*gclwh14_3*pp*r21))+(((-0.72884)*gclwh6_3*pp*r21))+(((-0.038088)*gclwh3_4*npy*pz*sj15))+(((0.0149716)*gclwh12_8*r20*sj15))+(((0.01425595752)*cj15*gclwh8_4*rxp1_2))+(((-0.5455950472)*gclwh12_3*rxp1_2))+(((0.5455950472)*gclwh14_3*rxp0_2))+(((-0.038088)*gclwh6_4*npy*pz))+(((0.0149716)*gclwh14_8*r21*sj15))+(((0.019044)*gclwh6_4*pp*r21))+(((0.005455950472)*gclwh14_3*r21*sj15))+(((0.102032501108244)*gclwh1_3*r20*sj15))+(((0.019044)*gclwh3_4*pp*r21*sj15))+(((-0.0001425595752)*gclwh14_4*r21*sj15))+(((0.038088)*gclwh10_4*npz*pz*sj15))+(((0.102032501108244)*gclwh3_3*r21*sj15))+(((1.45768)*gclwh3_3*npy*pz*sj15))+(((2.0)*gclwh10_8*pp*r22*sj15))+(((0.2799860082)*gclwh10_8*r22*sj15))+(((0.0001425595752)*cj15*gclwh3_4*r21))+(((-0.04)*gclwh6_8*rxp0_2*sj15))+(((0.038088)*gclwh8_4*npx*pz))+(((0.72884)*gclwh10_3*pp*r22*sj15))+(((-0.00038088)*gclwh10_4*pz))+(((0.0026698355700804)*gclwh6_4*r21))+(((1.45768)*gclwh1_3*npx*pz*sj15))+(((-0.5455950472)*cj15*gclwh8_3*rxp1_2))+(((-2.0)*gclwh6_8*pp*r21))+(((0.0145768)*gclwh10_3*pz))+(((0.102032501108244)*cj15*gclwh14_3*r21))+(((-0.005455950472)*cj15*gclwh3_3*r21))+(((-0.04)*gclwh8_8*rxp1_2*sj15))+(((-1.49716)*cj15*gclwh6_8*rxp0_2))+(((-0.0026660267700804)*cj15*gclwh12_4*r20))+(((0.019044)*gclwh1_4*pp*r20*sj15))+(((-0.019044)*cj15*gclwh14_4*pp*r21))+(((-0.019044)*gclwh8_4*pp*r20))+(((2.0)*cj15*gclwh14_8*pp*r21))+(((0.72884)*gclwh8_3*pp*r20))+(((0.00038088)*gclwh8_4*rxp1_2*sj15))+(((-1.45768)*gclwh10_3*npz*pz*sj15))+(((-0.019044)*gclwh10_4*pp*r22*sj15))+(((0.2803860082)*gclwh8_8*r20))+(((-0.038088)*gclwh1_4*npx*pz*sj15))+(((-0.5455950472)*gclwh4_3*rxp2_2*sj15))+(((0.2799860082)*cj15*gclwh14_8*r21))+(((-0.005455950472)*cj15*gclwh10_3*r22))+(((0.102032501108244)*cj15*gclwh12_3*r20))+(((-0.019044)*cj15*gclwh12_4*pp*r20))+(((0.0001425595752)*cj15*gclwh1_4*r20))+(((-0.0026660267700804)*gclwh10_4*r22*sj15))+(((-0.0145768)*gclwh8_3*rxp1_2*sj15))+(((0.01425595752)*gclwh12_4*rxp1_2))+(((0.038088)*cj15*gclwh12_4*npx*pz))+(((-0.0026660267700804)*gclwh1_4*r20*sj15))+(((-1.49716)*gclwh4_8*rxp2_2*sj15))+(((0.0145768)*gclwh1_3*rxp1_2))+(((-0.0145768)*gclwh3_3*rxp0_2))+(((0.00038088)*gclwh3_4*rxp0_2))+(((-0.0145768)*gclwh6_3*rxp0_2*sj15))+(((-1.49716)*gclwh12_8*rxp1_2))+(((-0.72884)*gclwh1_3*pp*r20*sj15))+(((-0.2803860082)*gclwh6_8*r21))+(((-0.5455950472)*cj15*gclwh6_3*rxp0_2))+(((-0.0026660267700804)*cj15*gclwh14_4*r21))+(((-4.0)*cj15*gclwh12_8*npx*pz))+(((-0.01425595752)*gclwh14_4*rxp0_2))+(((0.00038088)*gclwh6_4*rxp0_2*sj15))+(((-4.0)*gclwh10_8*npz*pz*sj15))+(((-0.72884)*gclwh3_3*pp*r21*sj15))+(((-0.0001425595752)*gclwh12_4*r20*sj15))+(((0.01425595752)*cj15*gclwh6_4*rxp0_2))+(((-0.00038088)*cj15*gclwh4_4*rxp2_2))+(((0.04)*cj15*gclwh4_8*rxp2_2))+(((0.038088)*cj15*gclwh14_4*npy*pz))+(((-4.0)*gclwh8_8*npx*pz))+(((0.04)*gclwh10_8*pz))+(((4.0)*gclwh6_8*npy*pz))+(((-0.0149716)*cj15*gclwh10_8*r22))+(((0.102032501108244)*gclwh10_3*r22*sj15))+(((-0.102178269108244)*gclwh6_3*r21))+(((-0.0026698355700804)*gclwh8_4*r20))+(((-0.0026660267700804)*gclwh3_4*r21*sj15))+(((1.45768)*gclwh6_3*npy*pz))+(((0.102178269108244)*gclwh8_3*r20))+(((-4.0)*cj15*gclwh14_8*npy*pz))+(((-1.45768)*cj15*gclwh14_3*npy*pz))+(((2.0)*cj15*gclwh12_8*pp*r20))+(((-1.45768)*cj15*gclwh12_3*npx*pz)));
op[38]=((((-0.0386380691316)*r20*x343))+(((-0.0020660808)*r21*x354))+(((-0.0386380691316)*r21*x344))+((gclwh6_5*x398))+((gclwh4_5*x400))+(((-1.0)*gclwh10_5*x339))+((gclwh8_5*x402))+(((-1.0)*gclwh8_5*x353))+(((-1.0)*gclwh14_5*x341))+((gclwh12_5*x340))+((gclwh6_5*x337))+((gclwh6_5*x350))+((x344*x349))+(((-1.0)*x348*x362))+(((-1.0)*gclwh8_5*x338))+((x348*x361))+((gclwh6_5*x401))+((gclwh8_5*x352))+((gclwh8_5*x399))+((x343*x352))+(((-0.0020660808)*r20*x351))+(((-1.0)*gclwh4_5*x397))+(((-1.0)*x343*x353))+(((0.0020660808)*r22*x342))+(((-1.0)*x344*x350))+(((-0.0386380691316)*r22*x348))+(((-1.0)*gclwh6_5*x349)));
IkReal x412=((0.00276)*pz);
IkReal x413=((0.10330404)*rxp1_2);
IkReal x414=((0.10330404)*rxp0_2);
IkReal x415=((0.0193466345658)*r21);
IkReal x416=((0.0193466345658)*r20);
IkReal x417=((0.0010330404)*cj15*r22);
IkReal x418=((0.0193190345658)*cj15*r20);
IkReal x419=((0.0193190345658)*cj15*r21);
IkReal x420=((0.00276)*cj15*rxp2_2);
IkReal x421=((0.10330404)*cj15*rxp0_2);
IkReal x422=((0.10330404)*cj15*rxp1_2);
IkReal x423=((0.0193190345658)*r22*sj15);
IkReal x424=((0.0010330404)*r20*sj15);
IkReal x425=((0.0010330404)*r21*sj15);
IkReal x426=((0.10330404)*rxp2_2*sj15);
IkReal x427=((0.276)*npy*pz);
IkReal x428=((0.138)*pp*r21);
IkReal x429=((0.00276)*rxp0_2*sj15);
IkReal x430=((0.276)*npx*pz);
IkReal x431=((0.138)*pp*r20);
IkReal x432=((0.00276)*rxp1_2*sj15);
IkReal x433=(cj15*gclwh12_10);
IkReal x434=(cj15*gclwh12_12);
IkReal x435=(cj15*gclwh14_10);
IkReal x436=(cj15*gclwh14_12);
IkReal x437=(gclwh10_10*sj15);
IkReal x438=((0.276)*npz*pz);
IkReal x439=((0.138)*pp*r22);
IkReal x440=(gclwh10_12*sj15);
IkReal x441=(gclwh11_11*x412);
IkReal x442=(gclwh13_11*x413);
IkReal x443=(gclwh15_11*x414);
IkReal x444=(gclwh7_11*x415);
IkReal x445=(gclwh9_11*x416);
IkReal x446=(gclwh11_11*x417);
IkReal x447=(gclwh13_11*x418);
IkReal x448=(gclwh15_11*x419);
IkReal x449=(gclwh7_11*x421);
IkReal x450=(gclwh9_11*x422);
IkReal x451=(gclwh11_11*x423);
IkReal x452=(gclwh13_11*x424);
IkReal x453=(gclwh15_11*x425);
IkReal x454=(gclwh7_11*x427);
IkReal x455=(gclwh7_11*x428);
IkReal x456=(gclwh7_11*x429);
IkReal x457=(gclwh9_11*x430);
IkReal x458=(gclwh9_11*x431);
IkReal x459=(gclwh9_11*x432);
IkReal x460=(cj15*gclwh13_11);
IkReal x461=(x430*x460);
IkReal x462=(x431*x460);
IkReal x463=(cj15*gclwh15_11);
IkReal x464=(x427*x463);
IkReal x465=(x428*x463);
IkReal x466=(gclwh11_11*sj15);
IkReal x467=(x438*x466);
IkReal x468=(x439*x466);
IkReal x469=(cj15*gclwh13_13);
IkReal x470=(cj15*gclwh15_13);
IkReal x471=(gclwh11_13*sj15);
IkReal x472=((0.10057992)+(((-1.0)*x438*x471))+((gclwh11_13*x412))+((x428*x470))+((gclwh15_13*x414))+(((-1.0)*gclwh9_13*x422))+(((-1.0)*gclwh7_13*x429))+(((-1.0)*x430*x469))+(((-1.0)*gclwh7_13*x421))+(((-1.0)*gclwh7_13*x428))+((gclwh5_13*x420))+(((-1.0)*gclwh7_13*x415))+(((-1.0)*gclwh11_13*x417))+((gclwh9_13*x431))+((gclwh9_13*x416))+((x431*x469))+((gclwh15_13*x419))+(((-1.0)*gclwh9_13*x432))+((x439*x471))+(((-1.0)*gclwh13_13*x413))+((gclwh13_13*x418))+((gclwh15_13*x425))+(((-1.0)*gclwh9_13*x430))+((gclwh13_13*x424))+(((-1.0)*x427*x470))+(((-1.0)*gclwh5_13*x426))+((gclwh11_13*x423))+((gclwh7_13*x427)));
IkReal x473=(gclwh11_7*pz);
IkReal x474=((0.20660808)*rxp1_2);
IkReal x475=((0.20660808)*rxp0_2);
IkReal x476=(gclwh7_7*r21);
IkReal x477=(gclwh9_7*r20);
IkReal x478=((0.0386380691316)*cj15);
IkReal x479=(gclwh13_7*r20);
IkReal x480=(gclwh15_7*r21);
IkReal x481=(gclwh5_7*rxp2_2);
IkReal x482=(gclwh11_7*r22*sj15);
IkReal x483=((0.0020660808)*sj15);
IkReal x484=((0.552)*npy*pz);
IkReal x485=((0.276)*pp);
IkReal x486=((0.00552)*sj15);
IkReal x487=((0.552)*npx*pz);
IkReal x488=((0.276)*cj15*pp);
op[39]=0;
op[40]=((-0.10057992)+(((-1.0)*gclwh14_10*x425))+(((-1.0)*x438*x440))+((gclwh8_12*x416))+(((-1.0)*gclwh6_12*x428))+(((-1.0)*x430*x434))+((x428*x436))+(((-1.0)*gclwh14_10*x419))+(((-1.0)*gclwh12_12*x413))+((gclwh8_10*x432))+((gclwh6_10*x428))+((gclwh12_12*x424))+(((-1.0)*gclwh6_12*x429))+((gclwh14_12*x414))+(((-1.0)*gclwh4_12*x426))+((gclwh14_12*x419))+((gclwh6_12*x427))+((gclwh6_10*x429))+((gclwh4_12*x420))+(((-1.0)*gclwh14_10*x414))+((gclwh12_12*x418))+(((-1.0)*gclwh10_10*x412))+(((-1.0)*gclwh8_12*x422))+((gclwh10_12*x423))+((x437*x438))+((gclwh8_10*x430))+(((-1.0)*x431*x433))+(((-1.0)*gclwh10_12*x417))+((x431*x434))+(((-1.0)*x437*x439))+((gclwh6_10*x421))+((gclwh10_10*x417))+(((-1.0)*gclwh6_12*x421))+((x439*x440))+(((-1.0)*gclwh6_10*x427))+(((-1.0)*gclwh8_12*x430))+(((-1.0)*gclwh10_10*x423))+((gclwh8_10*x422))+(((-1.0)*gclwh12_10*x424))+((x427*x435))+(((-1.0)*x428*x435))+((gclwh14_12*x425))+(((-1.0)*x427*x436))+((x430*x433))+(((-1.0)*gclwh12_10*x418))+(((-1.0)*gclwh8_10*x416))+((gclwh12_10*x413))+(((-1.0)*gclwh6_12*x415))+((gclwh8_12*x431))+(((-1.0)*gclwh8_12*x432))+((gclwh10_12*x412))+((gclwh6_10*x415))+(((-1.0)*gclwh8_10*x431)));
op[41]=((0.2465598728)+(((0.2799860082)*cj15*gclwh12_8*r20))+(((-1.45768)*gclwh8_3*npx*pz))+(((2.0)*gclwh8_8*pp*r20))+(((0.005455950472)*gclwh12_3*r20*sj15))+(((0.0026660267700804)*cj15*gclwh12_4*r20))+(((0.0145768)*cj15*gclwh4_3*rxp2_2))+(((-0.005455950472)*cj15*gclwh1_3*r20))+(((0.72884)*cj15*gclwh12_3*pp*r20))+(((1.49716)*gclwh14_8*rxp0_2))+(((0.019044)*gclwh8_4*pp*r20))+(((-1.49716)*cj15*gclwh8_8*rxp1_2))+(((-0.00038088)*gclwh8_4*rxp1_2*sj15))+(((0.72884)*cj15*gclwh14_3*pp*r21))+(((-0.72884)*gclwh6_3*pp*r21))+(((0.00038088)*gclwh1_4*rxp1_2))+(((0.0149716)*gclwh12_8*r20*sj15))+(((-0.0001425595752)*cj15*gclwh10_4*r22))+(((-0.5455950472)*gclwh12_3*rxp1_2))+(((0.5455950472)*gclwh14_3*rxp0_2))+(((0.0001425595752)*gclwh12_4*r20*sj15))+(((0.0026660267700804)*gclwh1_4*r20*sj15))+(((0.0026698355700804)*gclwh8_4*r20))+(((0.0149716)*gclwh14_8*r21*sj15))+(((0.005455950472)*gclwh14_3*r21*sj15))+(((0.102032501108244)*gclwh1_3*r20*sj15))+(((-0.038088)*gclwh10_4*npz*pz*sj15))+(((0.019044)*cj15*gclwh14_4*pp*r21))+(((0.102032501108244)*gclwh3_3*r21*sj15))+(((0.01425595752)*gclwh14_4*rxp0_2))+(((1.45768)*gclwh3_3*npy*pz*sj15))+(((2.0)*gclwh10_8*pp*r22*sj15))+(((0.2799860082)*gclwh10_8*r22*sj15))+(((-0.01425595752)*gclwh12_4*rxp1_2))+(((-0.019044)*gclwh6_4*pp*r21))+(((-0.04)*gclwh6_8*rxp0_2*sj15))+(((0.72884)*gclwh10_3*pp*r22*sj15))+(((1.45768)*gclwh1_3*npx*pz*sj15))+(((0.0026660267700804)*gclwh3_4*r21*sj15))+(((0.038088)*gclwh3_4*npy*pz*sj15))+(((-0.5455950472)*cj15*gclwh8_3*rxp1_2))+(((-2.0)*gclwh6_8*pp*r21))+(((0.0145768)*gclwh10_3*pz))+(((0.102032501108244)*cj15*gclwh14_3*r21))+(((-0.005455950472)*cj15*gclwh3_3*r21))+(((-0.04)*gclwh8_8*rxp1_2*sj15))+(((-1.49716)*cj15*gclwh6_8*rxp0_2))+(((-0.0001425595752)*cj15*gclwh1_4*r20))+(((2.0)*cj15*gclwh14_8*pp*r21))+(((0.72884)*gclwh8_3*pp*r20))+(((-1.45768)*gclwh10_3*npz*pz*sj15))+(((0.2803860082)*gclwh8_8*r20))+(((0.019044)*cj15*gclwh12_4*pp*r20))+(((-0.00038088)*gclwh3_4*rxp0_2))+(((-0.5455950472)*gclwh4_3*rxp2_2*sj15))+(((0.2799860082)*cj15*gclwh14_8*r21))+(((-0.038088)*cj15*gclwh14_4*npy*pz))+(((0.0026660267700804)*cj15*gclwh14_4*r21))+(((-0.005455950472)*cj15*gclwh10_3*r22))+(((-0.01425595752)*cj15*gclwh6_4*rxp0_2))+(((0.0026660267700804)*gclwh10_4*r22*sj15))+(((0.102032501108244)*cj15*gclwh12_3*r20))+(((-0.0145768)*gclwh8_3*rxp1_2*sj15))+(((0.038088)*gclwh1_4*npx*pz*sj15))+(((0.038088)*gclwh6_4*npy*pz))+(((-1.49716)*gclwh4_8*rxp2_2*sj15))+(((0.0145768)*gclwh1_3*rxp1_2))+(((0.019044)*gclwh10_4*pp*r22*sj15))+(((-0.0145768)*gclwh3_3*rxp0_2))+(((-0.019044)*gclwh1_4*pp*r20*sj15))+(((-0.0145768)*gclwh6_3*rxp0_2*sj15))+(((-1.49716)*gclwh12_8*rxp1_2))+(((-0.72884)*gclwh1_3*pp*r20*sj15))+(((-0.2803860082)*gclwh6_8*r21))+(((-0.5455950472)*cj15*gclwh6_3*rxp0_2))+(((-4.0)*cj15*gclwh12_8*npx*pz))+(((-0.01425595752)*gclwh4_4*rxp2_2*sj15))+(((-0.019044)*gclwh3_4*pp*r21*sj15))+(((-4.0)*gclwh10_8*npz*pz*sj15))+(((-0.72884)*gclwh3_3*pp*r21*sj15))+(((0.00038088)*gclwh10_4*pz))+(((0.04)*cj15*gclwh4_8*rxp2_2))+(((-4.0)*gclwh8_8*npx*pz))+(((-0.01425595752)*cj15*gclwh8_4*rxp1_2))+(((0.04)*gclwh10_8*pz))+(((4.0)*gclwh6_8*npy*pz))+(((-0.0149716)*cj15*gclwh10_8*r22))+(((-0.0001425595752)*cj15*gclwh3_4*r21))+(((0.102032501108244)*gclwh10_3*r22*sj15))+(((-0.102178269108244)*gclwh6_3*r21))+(((-0.038088)*gclwh8_4*npx*pz))+(((-0.00038088)*gclwh6_4*rxp0_2*sj15))+(((0.00038088)*cj15*gclwh4_4*rxp2_2))+(((1.45768)*gclwh6_3*npy*pz))+(((0.102178269108244)*gclwh8_3*r20))+(((-4.0)*cj15*gclwh14_8*npy*pz))+(((0.0001425595752)*gclwh14_4*r21*sj15))+(((-0.0026698355700804)*gclwh6_4*r21))+(((-1.45768)*cj15*gclwh14_3*npy*pz))+(((-0.038088)*cj15*gclwh12_4*npx*pz))+(((2.0)*cj15*gclwh12_8*pp*r20))+(((-1.45768)*cj15*gclwh12_3*npx*pz)));
op[42]=((0.2465598728)+(((-0.5455950472)*cj15*gclwh9_0*rxp1_2))+(((-1.49716)*cj15*gclwh9_9*rxp1_2))+(((0.038088)*gclwh11_1*npz*pz*sj15))+(((0.01425595752)*cj15*gclwh7_1*rxp0_2))+(((0.038088)*gclwh0_1*npx*pz*sj15))+(((-4.0)*cj15*gclwh15_9*npy*pz))+(((2.0)*cj15*gclwh13_9*pp*r20))+(((0.00038088)*gclwh7_1*rxp0_2*sj15))+(((0.0001425595752)*cj15*gclwh11_1*r22))+(((-0.0001425595752)*gclwh13_1*r20*sj15))+(((0.2799860082)*cj15*gclwh15_9*r21))+(((-0.0026660267700804)*gclwh11_1*r22*sj15))+(((0.005455950472)*cj15*gclwh2_0*r21))+(((0.72884)*cj15*gclwh15_0*pp*r21))+(((-0.00038088)*gclwh11_1*pz))+(((-1.45768)*cj15*gclwh15_0*npy*pz))+(((0.0149716)*gclwh15_9*r21*sj15))+(((-0.0001425595752)*gclwh15_1*r21*sj15))+(((-1.45768)*cj15*gclwh13_0*npx*pz))+(((-0.00038088)*gclwh2_1*rxp0_2))+(((0.2799860082)*cj15*gclwh13_9*r20))+(((0.04)*gclwh11_9*pz))+(((0.72884)*gclwh0_0*pp*r20*sj15))+(((0.72884)*gclwh2_0*pp*r21*sj15))+(((0.72884)*gclwh9_0*pp*r20))+(((-0.102178269108244)*gclwh7_0*r21))+(((-0.04)*gclwh7_9*rxp0_2*sj15))+(((0.038088)*cj15*gclwh15_1*npy*pz))+(((-1.49716)*gclwh5_9*rxp2_2*sj15))+(((-4.0)*cj15*gclwh13_9*npx*pz))+(((0.0026660267700804)*gclwh2_1*r21*sj15))+(((0.00038088)*gclwh9_1*rxp1_2*sj15))+(((0.72884)*gclwh11_0*pp*r22*sj15))+(((-0.019044)*gclwh0_1*pp*r20*sj15))+(((-1.45768)*gclwh0_0*npx*pz*sj15))+(((-0.2803860082)*gclwh7_9*r21))+(((0.2799860082)*gclwh11_9*r22*sj15))+(((0.0149716)*gclwh13_9*r20*sj15))+(((-1.49716)*gclwh13_9*rxp1_2))+(((0.0145768)*gclwh11_0*pz))+(((2.0)*cj15*gclwh15_9*pp*r21))+(((0.102032501108244)*cj15*gclwh13_0*r20))+(((-0.0149716)*cj15*gclwh11_9*r22))+(((0.0145768)*cj15*gclwh5_0*rxp2_2))+(((-0.0145768)*gclwh0_0*rxp1_2))+(((0.102032501108244)*gclwh11_0*r22*sj15))+(((4.0)*gclwh7_9*npy*pz))+(((-0.5455950472)*gclwh13_0*rxp1_2))+(((-4.0)*gclwh9_9*npx*pz))+(((-1.45768)*gclwh2_0*npy*pz*sj15))+(((0.038088)*gclwh2_1*npy*pz*sj15))+(((0.005455950472)*gclwh15_0*r21*sj15))+(((0.5455950472)*gclwh15_0*rxp0_2))+(((-0.102032501108244)*gclwh2_0*r21*sj15))+(((-2.0)*gclwh7_9*pp*r21))+(((-0.5455950472)*gclwh5_0*rxp2_2*sj15))+(((-0.005455950472)*cj15*gclwh11_0*r22))+(((-4.0)*gclwh11_9*npz*pz*sj15))+(((2.0)*gclwh9_9*pp*r20))+(((-0.01425595752)*gclwh15_1*rxp0_2))+(((0.005455950472)*cj15*gclwh0_0*r20))+(((-0.0145768)*gclwh9_0*rxp1_2*sj15))+(((-0.5455950472)*cj15*gclwh7_0*rxp0_2))+(((0.04)*cj15*gclwh5_9*rxp2_2))+(((-0.0001425595752)*cj15*gclwh2_1*r21))+(((1.45768)*gclwh7_0*npy*pz))+(((-0.019044)*cj15*gclwh15_1*pp*r21))+(((-0.00038088)*cj15*gclwh5_1*rxp2_2))+(((-1.45768)*gclwh9_0*npx*pz))+(((-0.019044)*gclwh9_1*pp*r20))+(((-0.0026660267700804)*cj15*gclwh15_1*r21))+(((-0.72884)*gclwh7_0*pp*r21))+(((-0.0001425595752)*cj15*gclwh0_1*r20))+(((-1.45768)*gclwh11_0*npz*pz*sj15))+(((0.005455950472)*gclwh13_0*r20*sj15))+(((0.038088)*gclwh9_1*npx*pz))+(((-0.04)*gclwh9_9*rxp1_2*sj15))+(((-1.49716)*cj15*gclwh7_9*rxp0_2))+(((-0.038088)*gclwh7_1*npy*pz))+(((0.01425595752)*cj15*gclwh9_1*rxp1_2))+(((0.038088)*cj15*gclwh13_1*npx*pz))+(((-0.0145768)*gclwh7_0*rxp0_2*sj15))+(((-0.019044)*gclwh2_1*pp*r21*sj15))+(((0.01425595752)*gclwh13_1*rxp1_2))+(((-0.102032501108244)*gclwh0_0*r20*sj15))+(((0.0026660267700804)*gclwh0_1*r20*sj15))+(((-0.0026698355700804)*gclwh9_1*r20))+(((1.49716)*gclwh15_9*rxp0_2))+(((-0.0026660267700804)*cj15*gclwh13_1*r20))+(((0.019044)*gclwh7_1*pp*r21))+(((0.72884)*cj15*gclwh13_0*pp*r20))+(((0.01425595752)*gclwh5_1*rxp2_2*sj15))+(((0.0026698355700804)*gclwh7_1*r21))+(((0.00038088)*gclwh0_1*rxp1_2))+(((-0.019044)*cj15*gclwh13_1*pp*r20))+(((-0.019044)*gclwh11_1*pp*r22*sj15))+(((0.0145768)*gclwh2_0*rxp0_2))+(((2.0)*gclwh11_9*pp*r22*sj15))+(((0.2803860082)*gclwh9_9*r20))+(((0.102032501108244)*cj15*gclwh15_0*r21))+(((0.102178269108244)*gclwh9_0*r20)));
op[43]=(x472+(((-1.0)*x451))+(((-1.0)*x447))+(((-1.0)*x462))+(((-1.0)*x441))+(((-1.0)*x468))+(((-1.0)*x443))+(((-1.0)*x448))+(((-1.0)*x453))+(((-1.0)*x458))+x455+x450+x457+x459+x456+x446+x442+x449+x444+(((-1.0)*x452))+(((-1.0)*x454))+(((-1.0)*x445))+x467+x464+x461+(((-1.0)*x465)));
op[44]=0;
op[45]=(((cj15*gclwh7_7*x475))+(((-1.0)*x478*x480))+(((-0.00552)*cj15*x481))+(((-1.0)*x477*x485))+(((-1.0)*x480*x483))+(((-1.0)*gclwh7_7*x484))+(((0.0386932691316)*x476))+(((-1.0)*gclwh15_7*x475))+(((-1.0)*x479*x488))+(((-0.0386380691316)*x482))+(((0.552)*npz*sj15*x473))+((cj15*gclwh15_7*x484))+(((-1.0)*x482*x485))+((gclwh9_7*rxp1_2*x486))+((gclwh7_7*rxp0_2*x486))+((x476*x485))+((gclwh13_7*x474))+(((-0.0386932691316)*x477))+(((-1.0)*x480*x488))+(((-1.0)*x479*x483))+(((-1.0)*x478*x479))+((cj15*gclwh9_7*x474))+((gclwh9_7*x487))+(((-0.00552)*x473))+((cj15*gclwh13_7*x487))+(((0.20660808)*sj15*x481))+(((((0.0020660808)*cj15))*((gclwh11_7*r22)))));
op[46]=((0.2465598728)+(((-0.5455950472)*cj15*gclwh9_0*rxp1_2))+(((-1.49716)*cj15*gclwh9_9*rxp1_2))+(((-0.0026698355700804)*gclwh7_1*r21))+(((-0.038088)*cj15*gclwh15_1*npy*pz))+(((-4.0)*cj15*gclwh15_9*npy*pz))+(((2.0)*cj15*gclwh13_9*pp*r20))+(((-0.0026660267700804)*gclwh2_1*r21*sj15))+(((0.2799860082)*cj15*gclwh15_9*r21))+(((0.005455950472)*cj15*gclwh2_0*r21))+(((0.72884)*cj15*gclwh15_0*pp*r21))+(((-0.01425595752)*gclwh13_1*rxp1_2))+(((-0.038088)*gclwh11_1*npz*pz*sj15))+(((-1.45768)*cj15*gclwh15_0*npy*pz))+(((0.0149716)*gclwh15_9*r21*sj15))+(((0.038088)*gclwh7_1*npy*pz))+(((-1.45768)*cj15*gclwh13_0*npx*pz))+(((0.2799860082)*cj15*gclwh13_9*r20))+(((0.04)*gclwh11_9*pz))+(((0.72884)*gclwh0_0*pp*r20*sj15))+(((0.72884)*gclwh2_0*pp*r21*sj15))+(((-0.0001425595752)*cj15*gclwh11_1*r22))+(((0.72884)*gclwh9_0*pp*r20))+(((-0.102178269108244)*gclwh7_0*r21))+(((-0.04)*gclwh7_9*rxp0_2*sj15))+(((-1.49716)*gclwh5_9*rxp2_2*sj15))+(((0.0026660267700804)*cj15*gclwh13_1*r20))+(((-0.00038088)*gclwh7_1*rxp0_2*sj15))+(((-4.0)*cj15*gclwh13_9*npx*pz))+(((0.72884)*gclwh11_0*pp*r22*sj15))+(((0.0026698355700804)*gclwh9_1*r20))+(((0.0001425595752)*gclwh15_1*r21*sj15))+(((-0.01425595752)*cj15*gclwh9_1*rxp1_2))+(((-1.45768)*gclwh0_0*npx*pz*sj15))+(((0.00038088)*cj15*gclwh5_1*rxp2_2))+(((0.0001425595752)*cj15*gclwh0_1*r20))+(((-0.2803860082)*gclwh7_9*r21))+(((0.2799860082)*gclwh11_9*r22*sj15))+(((0.0149716)*gclwh13_9*r20*sj15))+(((-1.49716)*gclwh13_9*rxp1_2))+(((-0.01425595752)*cj15*gclwh7_1*rxp0_2))+(((0.0145768)*gclwh11_0*pz))+(((2.0)*cj15*gclwh15_9*pp*r21))+(((0.102032501108244)*cj15*gclwh13_0*r20))+(((-0.0149716)*cj15*gclwh11_9*r22))+(((0.0145768)*cj15*gclwh5_0*rxp2_2))+(((-0.019044)*gclwh7_1*pp*r21))+(((0.0026660267700804)*cj15*gclwh15_1*r21))+(((-0.0145768)*gclwh0_0*rxp1_2))+(((0.102032501108244)*gclwh11_0*r22*sj15))+(((0.019044)*gclwh9_1*pp*r20))+(((4.0)*gclwh7_9*npy*pz))+(((0.019044)*gclwh0_1*pp*r20*sj15))+(((-0.0026660267700804)*gclwh0_1*r20*sj15))+(((-0.038088)*gclwh9_1*npx*pz))+(((-0.5455950472)*gclwh13_0*rxp1_2))+(((0.0001425595752)*cj15*gclwh2_1*r21))+(((-4.0)*gclwh9_9*npx*pz))+(((-1.45768)*gclwh2_0*npy*pz*sj15))+(((0.019044)*cj15*gclwh13_1*pp*r20))+(((0.005455950472)*gclwh15_0*r21*sj15))+(((-0.038088)*gclwh0_1*npx*pz*sj15))+(((0.5455950472)*gclwh15_0*rxp0_2))+(((-0.102032501108244)*gclwh2_0*r21*sj15))+(((-2.0)*gclwh7_9*pp*r21))+(((-0.5455950472)*gclwh5_0*rxp2_2*sj15))+(((0.019044)*gclwh2_1*pp*r21*sj15))+(((-0.005455950472)*cj15*gclwh11_0*r22))+(((-4.0)*gclwh11_9*npz*pz*sj15))+(((2.0)*gclwh9_9*pp*r20))+(((0.005455950472)*cj15*gclwh0_0*r20))+(((-0.0145768)*gclwh9_0*rxp1_2*sj15))+(((-0.5455950472)*cj15*gclwh7_0*rxp0_2))+(((-0.038088)*cj15*gclwh13_1*npx*pz))+(((0.04)*cj15*gclwh5_9*rxp2_2))+(((-0.01425595752)*gclwh5_1*rxp2_2*sj15))+(((-0.00038088)*gclwh0_1*rxp1_2))+(((1.45768)*gclwh7_0*npy*pz))+(((-1.45768)*gclwh9_0*npx*pz))+(((-0.72884)*gclwh7_0*pp*r21))+(((-1.45768)*gclwh11_0*npz*pz*sj15))+(((0.005455950472)*gclwh13_0*r20*sj15))+(((0.019044)*gclwh11_1*pp*r22*sj15))+(((-0.04)*gclwh9_9*rxp1_2*sj15))+(((-1.49716)*cj15*gclwh7_9*rxp0_2))+(((0.019044)*cj15*gclwh15_1*pp*r21))+(((0.0026660267700804)*gclwh11_1*r22*sj15))+(((-0.0145768)*gclwh7_0*rxp0_2*sj15))+(((0.00038088)*gclwh2_1*rxp0_2))+(((-0.102032501108244)*gclwh0_0*r20*sj15))+(((1.49716)*gclwh15_9*rxp0_2))+(((0.72884)*cj15*gclwh13_0*pp*r20))+(((-0.00038088)*gclwh9_1*rxp1_2*sj15))+(((-0.038088)*gclwh2_1*npy*pz*sj15))+(((0.0145768)*gclwh2_0*rxp0_2))+(((2.0)*gclwh11_9*pp*r22*sj15))+(((0.2803860082)*gclwh9_9*r20))+(((0.102032501108244)*cj15*gclwh15_0*r21))+(((0.01425595752)*gclwh15_1*rxp0_2))+(((0.0001425595752)*gclwh13_1*r20*sj15))+(((0.102178269108244)*gclwh9_0*r20))+(((0.00038088)*gclwh11_1*pz)));
op[47]=(x472+(((-1.0)*x461))+(((-1.0)*x450))+(((-1.0)*x444))+(((-1.0)*x446))+(((-1.0)*x457))+x453+x452+x451+x458+x454+(((-1.0)*x456))+(((-1.0)*x467))+x443+x441+x448+x447+x445+(((-1.0)*x442))+(((-1.0)*x449))+(((-1.0)*x459))+(((-1.0)*x455))+(((-1.0)*x464))+x465+x468+x462);
op[48]=((((0.041356733271222)*gclwh4_12*r22*sj15))+(((0.02)*gclwh12_8*rxp0_2*sj15))+(((-0.0059084)*cj15*gclwh10_12*rxp2_2))+(((-0.069)*cj15*gclwh6_10*pp*r20))+(((0.0059084)*gclwh14_12*rxp1_2*sj15))+(((0.138)*cj15*gclwh8_10*npy*pz))+(((0.1399930041)*cj15*gclwh6_8*r20))+(((-0.0005165202)*gclwh6_10*r20*sj15))+(((-0.00138)*gclwh14_10*rxp1_2*sj15))+(((0.0096733172829)*gclwh14_10*r20))+(((-1.0)*gclwh14_8*pp*r20))+(((-0.59084)*gclwh12_12*npy*pz))+(((0.02)*gclwh14_8*rxp1_2*sj15))+(((0.02)*gclwh4_8*pz))+(((-0.0096595172829)*cj15*gclwh6_10*r20))+(((0.002211455036)*gclwh6_12*r20*sj15))+(((2.0)*gclwh14_8*npx*pz))+(((0.0059084)*gclwh4_12*pz))+(((-2.0)*cj15*gclwh6_8*npx*pz))+(((0.29542)*cj15*gclwh8_12*pp*r21))+(((-0.02)*cj15*gclwh10_8*rxp2_2))+(((-0.59084)*cj15*gclwh6_12*npx*pz))+(((-0.041415817271222)*gclwh14_12*r20))+(((0.05165202)*gclwh6_10*rxp1_2))+(((-0.069)*gclwh12_10*pp*r21))+(((-0.05165202)*gclwh8_10*rxp0_2))+(((-0.0005165202)*gclwh8_10*r21*sj15))+(((0.00138)*cj15*gclwh10_10*rxp2_2))+(((-0.2211455036)*gclwh6_12*rxp1_2))+(((-0.74858)*gclwh6_8*rxp1_2))+(((0.138)*gclwh12_10*npy*pz))+(((-0.138)*gclwh14_10*npx*pz))+(((0.002211455036)*gclwh8_12*r21*sj15))+((cj15*gclwh6_8*pp*r20))+(((-2.0)*gclwh4_8*npz*pz*sj15))+(((-0.59084)*gclwh4_12*npz*pz*sj15))+(((0.2211455036)*cj15*gclwh14_12*rxp1_2))+(((0.29542)*gclwh12_12*pp*r21))+(((0.74858)*gclwh10_8*rxp2_2*sj15))+(((0.2211455036)*gclwh10_12*rxp2_2*sj15))+(((-0.069)*cj15*gclwh8_10*pp*r21))+(((-0.05165202)*cj15*gclwh12_10*rxp0_2))+(((-0.00138)*gclwh12_10*rxp0_2*sj15))+(((-0.29542)*gclwh14_12*pp*r20))+(((0.138)*cj15*gclwh6_10*npx*pz))+(((0.041356733271222)*cj15*gclwh8_12*r21))+(((-2.0)*cj15*gclwh8_8*npy*pz))+(((0.041356733271222)*cj15*gclwh6_12*r20))+((gclwh4_8*pp*r22*sj15))+(((0.1399930041)*gclwh4_8*r22*sj15))+(((-0.0074858)*cj15*gclwh4_8*r22))+(((0.74858)*gclwh8_8*rxp0_2))+(((-0.05165202)*gclwh10_10*rxp2_2*sj15))+(((0.74858)*cj15*gclwh14_8*rxp1_2))+(((0.1401930041)*gclwh12_8*r21))+(((0.29542)*cj15*gclwh6_12*pp*r20))+(((-0.002211455036)*cj15*gclwh4_12*r22))+(((-0.59084)*cj15*gclwh8_12*npy*pz))+(((-0.05165202)*cj15*gclwh14_10*rxp1_2))+(((0.2211455036)*gclwh8_12*rxp0_2))+(((0.74858)*cj15*gclwh12_8*rxp0_2))+(((0.59084)*gclwh14_12*npx*pz))+(((0.069)*gclwh14_10*pp*r20))+(((-0.0096733172829)*gclwh12_10*r21))+(((0.0074858)*gclwh6_8*r20*sj15))+(((-0.0096595172829)*cj15*gclwh8_10*r21))+(((0.0059084)*gclwh12_12*rxp0_2*sj15))+(((-2.0)*gclwh12_8*npy*pz))+((cj15*gclwh8_8*pp*r21))+(((0.0074858)*gclwh8_8*r21*sj15))+((gclwh12_8*pp*r21))+(((0.041415817271222)*gclwh12_12*r21))+(((0.1399930041)*cj15*gclwh8_8*r21))+(((0.2211455036)*cj15*gclwh12_12*rxp0_2))+(((0.29542)*gclwh4_12*pp*r22*sj15))+(((-0.1401930041)*gclwh14_8*r20)));
op[49]=((((0.74858)*cj15*gclwh12_3*pz*rxp0_2))+(((-0.000590405046)*gclwh6_10*r20*sj15))+(((0.74858)*cj15*gclwh6_14*rxp1_2*rxp2_2))+(((-0.0005165202)*gclwh8_3*r21*sj15))+(((0.1397930041)*gclwh4_3*pz*r22*sj15))+(((-0.000590405046)*gclwh8_10*r21*sj15))+(((-0.1399930041)*gclwh8_14*r21*rxp2_2*(cj15*cj15)))+(((-0.00138)*gclwh4_3*pz))+(((0.138)*cj15*gclwh8_3*npy*pz))+(((2.0)*gclwh14_3*npx*(pz*pz)))+(((0.1401930041)*cj15*gclwh14_14*r20*rxp2_2))+(((0.0005165202)*cj15*gclwh4_3*r22))+(((-0.74858)*gclwh12_8*r22*rxp0_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh6_8*r20*r22*sj15))+(((-0.0149716)*gclwh10_4*npz*rxp2_2*(cj15*cj15)))+(((-0.000963180554)*gclwh14_4*rxp1_2*sj15))+(((-0.2801860082)*gclwh12_3*r22*rxp0_2*(cj15*cj15)))+(((0.00138)*cj15*gclwh10_3*rxp2_2))+((cj15*gclwh12_10*npz*pp*r21))+(((0.5603720164)*gclwh12_4*npz*rxp0_2*(cj15*cj15)))+(((-2.0)*gclwh14_4*npx*pp*pz))+(((0.0074858)*gclwh6_3*pz*r20*sj15))+(((-0.004201790123)*cj15*gclwh8_3*r21*r22*sj15))+(((0.74858)*gclwh14_10*npz*rxp1_2*(cj15*cj15)))+(((-0.0149716)*cj15*gclwh4_3*pz*r22))+(((-0.02)*cj15*gclwh10_3*pz*rxp2_2))+(((2.0)*gclwh6_14*npx*pz*rxp2_2*(cj15*cj15)))+(((-0.02)*gclwh4_4*pp*pz))+(((-0.00138)*gclwh14_3*rxp1_2*sj15))+(((0.002803860082)*gclwh12_4*npz*r21*sj15))+(((0.74858)*gclwh10_3*pz*rxp2_2*sj15))+(((0.1399930041)*cj15*gclwh8_3*pz*r21))+(((-0.011057022233367)*gclwh12_10*r21))+(((2.0)*cj15*gclwh14_10*npx*npz*pz))+(((0.0004)*gclwh12_4*npz*rxp0_2*(sj15*sj15)))+(((-1.0)*gclwh8_14*pp*r21*rxp2_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh14_10*npz*r20))+(((0.74858)*cj15*gclwh6_8*r22*rxp1_2))+(((0.000149716)*gclwh8_4*npz*r21*(sj15*sj15)))+(((-0.0149716)*cj15*gclwh14_3*r22*rxp1_2*sj15))+(((0.74858)*cj15*gclwh12_3*npy*pz*r22))+(((2.0)*cj15*gclwh4_8*npz*pz*r22*sj15))+(((0.0963180554)*gclwh12_4*npy*pz))+(((-0.0096595172829)*gclwh4_3*r22*sj15))+(((-0.0096733172829)*gclwh12_3*r21))+(((-0.000963180554)*gclwh12_4*rxp0_2*sj15))+(((0.0074858)*gclwh6_3*r22*rxp1_2*sj15))+(((-0.036050884955666)*cj15*gclwh12_4*rxp0_2))+(((0.001401930041)*gclwh14_3*r20*r22*sj15))+(((0.02)*gclwh4_3*(pz*pz)))+(((0.1401930041)*cj15*gclwh12_10*npz*r21))+(((-2.0)*cj15*gclwh14_14*npx*pz*rxp2_2))+(((-1.49716)*gclwh8_4*npy*npz*pz*(cj15*cj15)))+(((-0.069)*cj15*gclwh8_3*pp*r21))+(((0.02)*gclwh10_14*(cj15*cj15)*(rxp2_2*rxp2_2)))+(((0.1399930041)*gclwh6_10*npz*r20*(cj15*cj15)))+(((0.74858)*gclwh6_4*pp*rxp1_2))+(((-0.05165202)*gclwh8_3*rxp0_2))+(((-0.069)*gclwh12_3*pp*r21))+(((0.15774)*gclwh12_10*npy*pz))+(((0.02)*cj15*gclwh14_10*npz*rxp1_2*sj15))+(((-0.0096595172829)*cj15*gclwh6_3*r20))+(((0.02)*gclwh12_4*npz*pp*r21*sj15))+(((0.05165202)*gclwh6_3*rxp1_2))+(((0.00036050884955666)*cj15*gclwh4_4*r22))+(((0.74858)*gclwh8_3*npy*pz*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh8_10*npz*rxp0_2))+(((-2.0)*gclwh8_10*npy*npz*pz*(cj15*cj15)))+(((2.0)*gclwh4_4*npz*pp*pz*sj15))+(((-1.0)*cj15*gclwh14_10*npz*pp*r20))+(((-0.1399930041)*gclwh8_8*r21*r22*(cj15*cj15)))+(((-0.74858)*gclwh14_14*rxp1_2*rxp2_2*(cj15*cj15)))+(((-0.04)*cj15*gclwh8_4*npy*npz*pz*sj15))+(((0.0299432)*cj15*gclwh14_4*npz*rxp1_2*sj15))+(((-0.05165202)*cj15*gclwh12_3*rxp0_2))+(((-0.37429)*gclwh8_3*pp*r21*r22*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh12_4*npz*r21))+(((-0.0002)*gclwh14_3*r22*rxp1_2*(sj15*sj15)))+(((-0.000963180554)*gclwh4_4*pz))+(((0.1399930041)*cj15*gclwh6_3*pz*r20))+(((-0.0590405046)*gclwh8_10*rxp0_2))+(((-0.01)*gclwh4_3*pp*(r22*r22)*(sj15*sj15)))+(((-0.2801860082)*cj15*gclwh8_3*r22*rxp0_2))+(((-0.37429)*gclwh6_3*pp*r20*r22*(cj15*cj15)))+(((2.0)*gclwh8_8*npy*pz*r22*(cj15*cj15)))+(((-2.0)*gclwh4_3*npz*sj15*(pz*pz)))+(((-0.1399930041)*gclwh6_8*r20*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh4_4*npz*pp*r22*sj15))+(((0.0074858)*cj15*gclwh4_4*pp*r22))+(((0.07887)*gclwh14_10*pp*r20))+(((-1.0)*cj15*gclwh8_4*r21*(pp*pp)))+(((-0.37429)*cj15*gclwh12_3*pp*r21*r22))+(((0.5603720164)*cj15*gclwh8_4*npz*rxp0_2))+(((-1.0)*gclwh6_14*pp*r20*rxp2_2*(cj15*cj15)))+(((-0.0074858)*gclwh10_3*r22*rxp2_2*(sj15*sj15)))+(((0.011057022233367)*gclwh14_10*r20))+(((-0.02)*gclwh14_4*npz*pp*r20*sj15))+(((0.138)*gclwh4_3*npz*pz*sj15))+(((2.0)*cj15*gclwh6_4*npx*pp*pz))+((gclwh6_10*npz*pp*r20*(cj15*cj15)))+(((-0.036050884955666)*cj15*gclwh14_4*rxp1_2))+(((0.0096733172829)*gclwh14_3*r20))+(((-0.01)*cj15*gclwh8_3*pp*r21*r22*sj15))+(((0.01)*gclwh14_3*pp*r20*r22*sj15))+(((-0.004201790123)*cj15*gclwh6_3*r20*r22*sj15))+(((-0.00036050884955666)*gclwh6_4*r20*sj15))+(((-7.4858e-5)*gclwh8_3*r21*r22*(sj15*sj15)))+(((-0.74858)*gclwh6_3*pz*rxp1_2))+(((0.104795963009178)*gclwh8_4*npz*r21*(cj15*cj15)))+(((-0.0015774)*gclwh12_10*rxp0_2*sj15))+(((-0.0074858)*gclwh8_4*pp*r21*sj15))+(((-0.74858)*cj15*gclwh14_3*npx*pz*r22))+(((0.138)*gclwh12_3*npy*pz))+(((-0.02)*cj15*gclwh14_14*rxp1_2*rxp2_2*sj15))+(((0.0149716)*cj15*gclwh4_4*npz*pz))+(((0.008403580246)*cj15*gclwh8_4*npz*r21*sj15))+(((-0.02)*gclwh12_4*pp*rxp0_2*sj15))+(((-0.036050884955666)*gclwh10_4*rxp2_2*sj15))+(((2.0)*gclwh12_4*npy*pp*pz))+(((-0.07887)*cj15*gclwh8_10*pp*r21))+(((0.2801860082)*cj15*gclwh6_3*r22*rxp1_2))+(((0.5603720164)*gclwh14_4*npz*rxp1_2*(cj15*cj15)))+(((-0.04)*gclwh12_4*npy*npz*pz*sj15))+(((-0.052472839504589)*cj15*gclwh12_3*r21*r22))+(((2.0)*cj15*gclwh8_4*npy*pp*pz))+(((0.00675155876779811)*gclwh14_4*r20))+(((0.0004)*gclwh14_4*npz*rxp1_2*(sj15*sj15)))+(((0.0074858)*gclwh8_3*pz*r21*sj15))+(((0.37429)*cj15*gclwh14_3*pp*r20*r22))+(((1.49716)*cj15*gclwh14_4*npx*npz*pz))+(((-1.0)*gclwh4_4*r22*sj15*(pp*pp)))+(((-0.00138)*gclwh12_3*rxp0_2*sj15))+(((-0.104945679009178)*cj15*gclwh14_4*npz*r20))+(((0.0963180554)*cj15*gclwh6_4*npx*pz))+(((0.000149716)*gclwh6_4*npz*r20*(sj15*sj15)))+(((-0.00674192696225811)*gclwh4_4*r22*sj15))+(((-0.0002)*gclwh12_3*r22*rxp0_2*(sj15*sj15)))+(((-0.0074858)*cj15*gclwh8_8*r21*r22*sj15))+(((-0.001399930041)*gclwh4_3*(r22*r22)*(sj15*sj15)))+(((-1.49716)*cj15*gclwh4_4*pz*sj15*(npz*npz)))+(((-0.02)*cj15*gclwh4_8*pz*r22))+(((0.74858)*cj15*gclwh10_10*npz*rxp2_2*sj15))+(((-2.0)*cj15*gclwh12_10*npy*npz*pz))+(((-0.02)*gclwh10_10*npz*rxp2_2*(cj15*cj15)))+(((-1.0)*cj15*gclwh12_8*pp*r21*r22))+(((0.002799860082)*gclwh4_4*npz*r22*(sj15*sj15)))+(((-0.04)*cj15*gclwh6_4*npx*npz*pz*sj15))+(((-0.0590405046)*cj15*gclwh14_10*rxp1_2))+(((0.000963180554)*cj15*gclwh10_4*rxp2_2))+(((-2.0)*gclwh6_10*npx*npz*pz*(cj15*cj15)))+(((0.0074858)*gclwh4_8*(cj15*cj15)*(r22*r22)))+(((-0.069)*cj15*gclwh6_3*pp*r20))+(((-0.07887)*gclwh12_10*pp*r21))+(((-0.00674192696225811)*cj15*gclwh6_4*r20))+(((0.15774)*cj15*gclwh8_10*npy*pz))+(((-0.1881520318)*cj15*gclwh8_4*pp*r21))+(((-0.0074858)*cj15*gclwh8_14*r21*rxp2_2*sj15))+((gclwh8_10*npz*pp*r21*(cj15*cj15)))+(((-0.0074858)*gclwh8_3*r22*rxp0_2*sj15))+(((-0.74858)*cj15*gclwh10_8*r22*rxp2_2*sj15))+(((-0.011041248233367)*cj15*gclwh6_10*r20))+(((-0.74858)*cj15*gclwh14_4*npz*pp*r20))+(((-0.0074858)*cj15*gclwh6_14*r20*rxp2_2*sj15))+(((-1.0)*cj15*gclwh6_4*r20*(pp*pp)))+(((-0.1883520318)*gclwh12_4*pp*r21))+(((-0.00036050884955666)*gclwh8_4*r21*sj15))+(((-0.2799860082)*cj15*gclwh10_3*r22*rxp2_2*sj15))+(((0.04)*gclwh14_4*npx*npz*pz*sj15))+(((-0.052323123504589)*cj15*gclwh4_3*sj15*(r22*r22)))+(((0.74858)*gclwh6_3*npx*pz*r22*(cj15*cj15)))+(((-1.0)*gclwh14_3*pp*pz*r20))+(((0.1401930041)*gclwh12_3*pz*r21))+(((0.02)*cj15*gclwh12_10*npz*rxp0_2*sj15))+(((-0.0149716)*cj15*gclwh12_3*r22*rxp0_2*sj15))+((gclwh4_3*pp*pz*r22*sj15))+(((0.02)*gclwh14_3*pz*rxp1_2*sj15))+(((0.02)*gclwh4_4*npz*pp*r22*(sj15*sj15)))+(((-0.1881520318)*gclwh4_4*pp*r22*sj15))+(((0.1399930041)*gclwh8_10*npz*r21*(cj15*cj15)))+(((-1.49716)*cj15*gclwh12_4*npy*npz*pz))+(((-0.74858)*cj15*gclwh8_14*rxp0_2*rxp2_2))+(((-0.74858)*cj15*gclwh10_14*sj15*(rxp2_2*rxp2_2)))+(((0.02)*cj15*gclwh6_4*npz*pp*r20*sj15))+(((-0.01)*gclwh12_3*pp*r21*r22*sj15))+(((0.74858)*gclwh6_4*npz*pp*r20*(cj15*cj15)))+(((2.0)*gclwh8_14*npy*pz*rxp2_2*(cj15*cj15)))+((gclwh14_4*r20*(pp*pp)))+(((-0.5603720164)*cj15*gclwh6_4*npz*rxp1_2))+(((-0.05165202)*cj15*gclwh14_3*rxp1_2))+(((-0.02)*cj15*gclwh12_14*rxp0_2*rxp2_2*sj15))+(((0.036050884955666)*gclwh6_4*rxp1_2))+(((-0.02)*gclwh14_3*npx*pz*r22*sj15))+(((-0.74858)*cj15*gclwh14_4*pp*rxp1_2))+(((2.0)*gclwh6_8*npx*pz*r22*(cj15*cj15)))+(((0.02)*gclwh4_3*npz*pz*r22*(sj15*sj15)))+(((-2.0)*cj15*gclwh14_8*npx*pz*r22))+(((-1.0)*cj15*gclwh4_8*pp*sj15*(r22*r22)))+(((0.74858)*gclwh12_10*npz*rxp0_2*(cj15*cj15)))+(((-0.37429)*cj15*gclwh4_3*pp*sj15*(r22*r22)))+(((0.74858)*cj15*gclwh12_4*npz*pp*r21))+(((-0.0096595172829)*cj15*gclwh8_3*r21))+(((-0.04)*gclwh4_4*pz*(npz*npz)*(sj15*sj15)))+(((-0.15774)*gclwh14_10*npx*pz))+(((0.0074858)*gclwh10_3*r22*rxp2_2*(cj15*cj15)))+(((-0.00674192696225811)*cj15*gclwh8_4*r21))+(((-0.74858)*cj15*gclwh12_4*pp*rxp0_2))+(((-0.74858)*gclwh8_4*pp*rxp0_2))+(((-0.036050884955666)*gclwh8_4*rxp0_2))+(((-0.02)*cj15*gclwh12_8*r22*rxp0_2*sj15))+(((-1.0)*gclwh12_4*r21*(pp*pp)))+(((2.0)*cj15*gclwh12_8*npy*pz*r22))+(((0.74858)*gclwh8_3*pz*rxp0_2))+(((0.069)*gclwh14_3*pp*r20))+(((-0.2801860082)*gclwh14_3*r22*rxp1_2*(cj15*cj15)))+(((-0.0074858)*gclwh6_4*pp*r20*sj15))+(((-0.0005165202)*gclwh6_3*r20*sj15))+(((-0.74858)*cj15*gclwh8_8*r22*rxp0_2))+(((-0.011041248233367)*cj15*gclwh8_10*r21))+((cj15*gclwh14_14*pp*r20*rxp2_2))+(((0.74858)*gclwh8_4*npz*pp*r21*(cj15*cj15)))+(((0.002801860082)*gclwh4_3*(cj15*cj15)*(r22*r22)))+(((0.104795963009178)*gclwh6_4*npz*r20*(cj15*cj15)))+(((-0.02)*gclwh14_4*pp*rxp1_2*sj15))+(((-0.002803860082)*gclwh14_4*npz*r20*sj15))+(((-0.74858)*gclwh12_14*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.74858)*cj15*gclwh4_3*npz*pz*r22*sj15))+(((0.02)*cj15*gclwh10_4*pp*rxp2_2))+(((-0.07887)*cj15*gclwh6_10*pp*r20))+(((0.74858)*cj15*gclwh14_3*pz*rxp1_2))+(((-0.1401930041)*gclwh14_3*pz*r20))+((cj15*gclwh8_3*pp*pz*r21))+(((-0.74858)*gclwh14_8*r22*rxp1_2*(cj15*cj15)))+(((-1.0)*gclwh6_8*pp*r20*r22*(cj15*cj15)))+(((0.1401930041)*cj15*gclwh14_8*r20*r22))+(((0.0963180554)*cj15*gclwh8_4*npy*pz))+(((-0.0015774)*gclwh14_10*rxp1_2*sj15))+(((0.104646247009178)*cj15*gclwh4_4*npz*r22*sj15))+(((-0.74858)*cj15*gclwh6_10*npz*rxp1_2))+(((2.0)*cj15*gclwh12_14*npy*pz*rxp2_2))+(((0.0149716)*gclwh8_4*npz*rxp0_2*sj15))+(((0.0074858)*cj15*gclwh6_10*npz*r20*sj15))+(((0.0074858)*cj15*gclwh8_10*npz*r21*sj15))+(((-0.05165202)*gclwh10_3*rxp2_2*sj15))+(((-0.00675155876779811)*gclwh12_4*r21))+(((-7.4858e-5)*gclwh6_3*r20*r22*(sj15*sj15)))+(((0.15774)*cj15*gclwh6_10*npx*pz))+(((-0.001401930041)*gclwh12_3*r21*r22*sj15))+(((-0.0149716)*gclwh6_4*npz*rxp1_2*sj15))+(((0.1883520318)*gclwh14_4*pp*r20))+(((-0.0963180554)*gclwh14_4*npx*pz))+(((-0.74858)*gclwh10_4*pp*rxp2_2*sj15))+(((0.138)*cj15*gclwh6_3*npx*pz))+(((-0.069)*gclwh4_3*pp*r22*sj15))+(((0.02)*gclwh12_3*pz*rxp0_2*sj15))+(((0.02)*gclwh12_3*npy*pz*r22*sj15))+(((0.008403580246)*cj15*gclwh6_4*npz*r20*sj15))+(((-0.052397981504589)*gclwh8_3*r21*r22*(cj15*cj15)))+((cj15*gclwh6_3*pp*pz*r20))+(((-2.0)*cj15*gclwh6_3*npx*(pz*pz)))+(((0.02)*cj15*gclwh8_4*npz*pp*r21*sj15))+(((-0.1399930041)*cj15*gclwh4_8*sj15*(r22*r22)))+(((-0.052397981504589)*gclwh6_3*r20*r22*(cj15*cj15)))+(((0.5599720164)*cj15*gclwh10_4*npz*rxp2_2*sj15))+(((0.0967180554)*gclwh4_4*npz*pz*sj15))+(((-0.0590405046)*cj15*gclwh12_10*rxp0_2))+((gclwh12_3*pp*pz*r21))+(((0.02)*cj15*gclwh6_3*npx*pz*r22*sj15))+(((0.0149716)*gclwh10_4*npz*rxp2_2*(sj15*sj15)))+(((0.02)*cj15*gclwh8_3*npy*pz*r22*sj15))+(((0.0590405046)*gclwh6_10*rxp1_2))+(((-0.138)*gclwh14_3*npx*pz))+(((-0.01)*cj15*gclwh6_3*pp*r20*r22*sj15))+(((0.052472839504589)*cj15*gclwh14_3*r20*r22))+(((0.02)*gclwh10_8*r22*rxp2_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh12_14*r21*rxp2_2))+(((-0.1881520318)*cj15*gclwh6_4*pp*r20))+(((0.0299432)*cj15*gclwh12_4*npz*rxp0_2*sj15))+(((0.0015774)*cj15*gclwh10_10*rxp2_2))+(((-0.1401930041)*cj15*gclwh12_8*r21*r22))+(((-1.0)*cj15*gclwh12_14*pp*r21*rxp2_2))+(((-1.49716)*gclwh6_4*npx*npz*pz*(cj15*cj15)))+(((-0.005603720164)*gclwh4_4*npz*r22*(cj15*cj15)))+(((-2.0)*cj15*gclwh8_3*npy*(pz*pz)))+(((-0.0590405046)*gclwh10_10*rxp2_2*sj15))+((cj15*gclwh14_8*pp*r20*r22))+(((-0.1399930041)*gclwh6_14*r20*rxp2_2*(cj15*cj15)))+(((-0.02)*cj15*gclwh14_8*r22*rxp1_2*sj15))+(((-2.0)*gclwh12_3*npy*(pz*pz)))+(((-1.0)*gclwh8_8*pp*r21*r22*(cj15*cj15))));
IkReal x489=(gclwh12_14*r21);
IkReal x490=(gclwh12_2*r21);
IkReal x491=(gclwh14_14*r20);
IkReal x492=(gclwh14_2*r20);
IkReal x493=(gclwh4_2*pz);
IkReal x494=(gclwh6_14*rxp1_2);
IkReal x495=((1.49716)*rxp1_2);
IkReal x496=(gclwh8_14*rxp0_2);
IkReal x497=((1.49716)*rxp0_2);
IkReal x498=(cj15*gclwh10_14*rxp2_2);
IkReal x499=(gclwh10_2*rxp2_2);
IkReal x500=(cj15*gclwh12_14*rxp0_2);
IkReal x501=(cj15*gclwh14_14*rxp1_2);
IkReal x502=(cj15*gclwh6_14*r20);
IkReal x503=((0.2799860082)*cj15);
IkReal x504=(gclwh6_2*r20);
IkReal x505=(cj15*gclwh8_14*r21);
IkReal x506=(gclwh8_2*r21);
IkReal x507=(gclwh10_14*rxp2_2*sj15);
IkReal x508=(gclwh12_14*npy*pz);
IkReal x509=(gclwh12_14*pp*r21);
IkReal x510=(gclwh12_14*rxp0_2*sj15);
IkReal x511=((4.0)*npy*pz);
IkReal x512=((2.0)*pp);
IkReal x513=((0.04)*sj15);
IkReal x514=(gclwh14_14*npx*pz);
IkReal x515=(gclwh14_14*pp*r20);
IkReal x516=(gclwh14_14*rxp1_2*sj15);
IkReal x517=((4.0)*npx*pz);
IkReal x518=(gclwh4_2*r22*sj15);
IkReal x519=(gclwh6_14*r20*sj15);
IkReal x520=((0.0149716)*sj15);
IkReal x521=(gclwh8_14*r21*sj15);
IkReal x522=x151;
IkReal x523=x152;
IkReal x524=((2.0)*cj15*pp);
IkReal x525=x154;
IkReal x526=x155;
op[50]=((0.1840679528)+(((0.2799860082)*x518))+(((-0.2803860082)*x492))+((x503*x506))+(((0.04)*x493))+(((0.4422910072)*x500))+((x512*x518))+(((1.18168)*x514))+((x490*x512))+(((0.004422910072)*x521))+(((1.49716)*sj15*x499))+(((-0.0149716)*cj15*gclwh4_2*r22))+((x506*x524))+((cj15*gclwh14_2*x495))+(((-1.18168)*x522))+((x503*x504))+((gclwh14_2*x517))+(((-0.59084)*x515))+((x504*x520))+(((0.082713466542444)*x502))+(((0.59084)*x526))+(((-0.082831634542444)*x491))+(((-1.18168)*x525))+(((-1.0)*x492*x512))+((x506*x520))+(((0.59084)*x523))+(((0.2803860082)*x490))+((gclwh12_2*rxp0_2*x513))+(((0.59084)*x509))+(((0.4422910072)*x496))+(((-4.0)*npz*sj15*x493))+(((0.082713466542444)*x505))+(((-0.04)*cj15*x499))+((gclwh14_2*rxp1_2*x513))+(((-1.0)*cj15*gclwh6_2*x517))+(((-0.4422910072)*x494))+(((-1.0)*cj15*gclwh8_2*x511))+(((-0.0118168)*x498))+(((0.004422910072)*x519))+(((0.0118168)*x516))+(((0.082831634542444)*x489))+((cj15*gclwh12_2*x497))+((x504*x524))+(((-1.18168)*x508))+(((-1.0)*gclwh6_2*x495))+(((0.4422910072)*x507))+(((0.4422910072)*x501))+(((0.0118168)*x510))+(((-1.0)*gclwh12_2*x511))+((gclwh8_2*x497)));
op[51]=((((-0.276)*x522))+(((0.138)*x523))+(((-0.276)*x525))+(((0.0193466345658)*x489))+(((-0.10330404)*x494))+(((0.138)*x526))+(((0.10330404)*x501))+(((0.10330404)*x507))+(((0.10330404)*x500))+(((-0.276)*x508))+(((-0.138)*x515))+(((0.0010330404)*x521))+(((0.276)*x514))+(((0.0193190345658)*x502))+(((0.0010330404)*x519))+(((0.00276)*x516))+(((-0.0193466345658)*x491))+(((-0.00276)*x498))+(((0.00276)*x510))+(((0.0193190345658)*x505))+(((0.138)*x509))+(((0.10330404)*x496)));
op[52]=((((-0.59084)*gclwh14_12*npx*pz))+(((-0.002211455036)*gclwh6_12*r20*sj15))+(((-0.069)*cj15*gclwh6_10*pp*r20))+(((-0.29542)*gclwh4_12*pp*r22*sj15))+(((0.59084)*gclwh4_12*npz*pz*sj15))+(((-0.2211455036)*cj15*gclwh12_12*rxp0_2))+(((0.138)*cj15*gclwh8_10*npy*pz))+((gclwh14_8*pp*r20))+(((0.2211455036)*gclwh6_12*rxp1_2))+(((-0.0005165202)*gclwh6_10*r20*sj15))+(((2.0)*gclwh12_8*npy*pz))+(((-1.0)*gclwh4_8*pp*r22*sj15))+(((-0.00138)*gclwh14_10*rxp1_2*sj15))+(((-0.74858)*cj15*gclwh12_8*rxp0_2))+(((0.0096733172829)*gclwh14_10*r20))+(((2.0)*cj15*gclwh6_8*npx*pz))+(((-0.0074858)*gclwh8_8*r21*sj15))+(((-0.0074858)*gclwh6_8*r20*sj15))+(((-0.74858)*gclwh10_8*rxp2_2*sj15))+(((-0.0059084)*gclwh12_12*rxp0_2*sj15))+(((-0.0096595172829)*cj15*gclwh6_10*r20))+(((-0.041356733271222)*gclwh4_12*r22*sj15))+(((-0.29542)*cj15*gclwh6_12*pp*r20))+(((0.59084)*cj15*gclwh6_12*npx*pz))+(((-0.74858)*cj15*gclwh14_8*rxp1_2))+(((0.59084)*cj15*gclwh8_12*npy*pz))+(((0.05165202)*gclwh6_10*rxp1_2))+(((-0.1399930041)*gclwh4_8*r22*sj15))+(((-0.069)*gclwh12_10*pp*r21))+(((-0.29542)*cj15*gclwh8_12*pp*r21))+(((-0.05165202)*gclwh8_10*rxp0_2))+(((-0.0005165202)*gclwh8_10*r21*sj15))+(((0.00138)*cj15*gclwh10_10*rxp2_2))+(((0.59084)*gclwh12_12*npy*pz))+(((0.138)*gclwh12_10*npy*pz))+(((0.29542)*gclwh14_12*pp*r20))+(((-0.138)*gclwh14_10*npx*pz))+(((-0.002211455036)*gclwh8_12*r21*sj15))+(((-0.2211455036)*cj15*gclwh14_12*rxp1_2))+(((0.041415817271222)*gclwh14_12*r20))+(((0.74858)*gclwh6_8*rxp1_2))+(((0.02)*cj15*gclwh10_8*rxp2_2))+(((2.0)*cj15*gclwh8_8*npy*pz))+(((-0.041356733271222)*cj15*gclwh6_12*r20))+(((-0.069)*cj15*gclwh8_10*pp*r21))+(((-0.02)*gclwh12_8*rxp0_2*sj15))+(((-0.1401930041)*gclwh12_8*r21))+(((-0.05165202)*cj15*gclwh12_10*rxp0_2))+(((-0.00138)*gclwh12_10*rxp0_2*sj15))+(((0.0074858)*cj15*gclwh4_8*r22))+(((-1.0)*cj15*gclwh6_8*pp*r20))+(((0.138)*cj15*gclwh6_10*npx*pz))+(((-0.2211455036)*gclwh8_12*rxp0_2))+(((-2.0)*gclwh14_8*npx*pz))+(((-1.0)*gclwh12_8*pp*r21))+(((-0.05165202)*gclwh10_10*rxp2_2*sj15))+(((0.1401930041)*gclwh14_8*r20))+(((-0.05165202)*cj15*gclwh14_10*rxp1_2))+(((-0.74858)*gclwh8_8*rxp0_2))+(((0.069)*gclwh14_10*pp*r20))+(((-0.0096733172829)*gclwh12_10*r21))+(((-0.041415817271222)*gclwh12_12*r21))+(((-0.1399930041)*cj15*gclwh6_8*r20))+(((-0.0096595172829)*cj15*gclwh8_10*r21))+(((-1.0)*cj15*gclwh8_8*pp*r21))+(((-0.29542)*gclwh12_12*pp*r21))+(((0.0059084)*cj15*gclwh10_12*rxp2_2))+(((-0.2211455036)*gclwh10_12*rxp2_2*sj15))+(((-0.1399930041)*cj15*gclwh8_8*r21))+(((-0.02)*gclwh4_8*pz))+(((2.0)*gclwh4_8*npz*pz*sj15))+(((-0.041356733271222)*cj15*gclwh8_12*r21))+(((-0.0059084)*gclwh4_12*pz))+(((-0.02)*gclwh14_8*rxp1_2*sj15))+(((-0.0059084)*gclwh14_12*rxp1_2*sj15))+(((0.002211455036)*cj15*gclwh4_12*r22)));
op[53]=((((0.74858)*cj15*gclwh12_3*pz*rxp0_2))+(((-0.0005165202)*cj15*gclwh4_3*r22))+(((-0.000590405046)*gclwh6_10*r20*sj15))+(((0.74858)*cj15*gclwh6_14*rxp1_2*rxp2_2))+(((0.1397930041)*gclwh4_3*pz*r22*sj15))+(((-0.000590405046)*gclwh8_10*r21*sj15))+(((-0.1399930041)*gclwh8_14*r21*rxp2_2*(cj15*cj15)))+(((2.0)*gclwh14_3*npx*(pz*pz)))+(((0.1401930041)*cj15*gclwh14_14*r20*rxp2_2))+(((-0.74858)*gclwh12_8*r22*rxp0_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh6_8*r20*r22*sj15))+(((-0.0149716)*gclwh10_4*npz*rxp2_2*(cj15*cj15)))+(((-0.000963180554)*gclwh14_4*rxp1_2*sj15))+(((-0.2801860082)*gclwh12_3*r22*rxp0_2*(cj15*cj15)))+((cj15*gclwh12_10*npz*pp*r21))+(((0.5603720164)*gclwh12_4*npz*rxp0_2*(cj15*cj15)))+(((-0.0096733172829)*gclwh14_3*r20))+(((0.069)*gclwh4_3*pp*r22*sj15))+(((0.0096595172829)*cj15*gclwh8_3*r21))+(((-2.0)*gclwh14_4*npx*pp*pz))+(((0.0074858)*gclwh6_3*pz*r20*sj15))+(((-0.004201790123)*cj15*gclwh8_3*r21*r22*sj15))+(((0.74858)*gclwh14_10*npz*rxp1_2*(cj15*cj15)))+(((-0.05165202)*gclwh6_3*rxp1_2))+(((-0.0149716)*cj15*gclwh4_3*pz*r22))+(((-0.02)*cj15*gclwh10_3*pz*rxp2_2))+(((2.0)*gclwh6_14*npx*pz*rxp2_2*(cj15*cj15)))+(((-0.02)*gclwh4_4*pp*pz))+(((0.069)*cj15*gclwh8_3*pp*r21))+(((0.002803860082)*gclwh12_4*npz*r21*sj15))+(((0.74858)*gclwh10_3*pz*rxp2_2*sj15))+(((0.1399930041)*cj15*gclwh8_3*pz*r21))+(((0.0096733172829)*gclwh12_3*r21))+(((-0.011057022233367)*gclwh12_10*r21))+(((2.0)*cj15*gclwh14_10*npx*npz*pz))+(((0.0004)*gclwh12_4*npz*rxp0_2*(sj15*sj15)))+(((-1.0)*gclwh8_14*pp*r21*rxp2_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh14_10*npz*r20))+(((0.74858)*cj15*gclwh6_8*r22*rxp1_2))+(((0.000149716)*gclwh8_4*npz*r21*(sj15*sj15)))+(((0.0005165202)*gclwh8_3*r21*sj15))+(((-0.0149716)*cj15*gclwh14_3*r22*rxp1_2*sj15))+(((0.74858)*cj15*gclwh12_3*npy*pz*r22))+(((2.0)*cj15*gclwh4_8*npz*pz*r22*sj15))+(((0.0963180554)*gclwh12_4*npy*pz))+(((-0.000963180554)*gclwh12_4*rxp0_2*sj15))+(((0.069)*gclwh12_3*pp*r21))+(((0.0074858)*gclwh6_3*r22*rxp1_2*sj15))+(((-0.036050884955666)*cj15*gclwh12_4*rxp0_2))+(((0.001401930041)*gclwh14_3*r20*r22*sj15))+(((0.02)*gclwh4_3*(pz*pz)))+(((0.1401930041)*cj15*gclwh12_10*npz*r21))+(((-2.0)*cj15*gclwh14_14*npx*pz*rxp2_2))+(((-1.49716)*gclwh8_4*npy*npz*pz*(cj15*cj15)))+(((0.02)*gclwh10_14*(cj15*cj15)*(rxp2_2*rxp2_2)))+(((0.1399930041)*gclwh6_10*npz*r20*(cj15*cj15)))+(((-0.138)*gclwh12_3*npy*pz))+(((0.74858)*gclwh6_4*pp*rxp1_2))+(((0.00138)*gclwh12_3*rxp0_2*sj15))+(((-0.138)*cj15*gclwh8_3*npy*pz))+(((0.15774)*gclwh12_10*npy*pz))+(((0.02)*cj15*gclwh14_10*npz*rxp1_2*sj15))+(((0.02)*gclwh12_4*npz*pp*r21*sj15))+(((0.00036050884955666)*cj15*gclwh4_4*r22))+(((0.74858)*gclwh8_3*npy*pz*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh8_10*npz*rxp0_2))+(((0.05165202)*gclwh8_3*rxp0_2))+(((-2.0)*gclwh8_10*npy*npz*pz*(cj15*cj15)))+(((2.0)*gclwh4_4*npz*pp*pz*sj15))+(((-1.0)*cj15*gclwh14_10*npz*pp*r20))+(((-0.1399930041)*gclwh8_8*r21*r22*(cj15*cj15)))+(((-0.74858)*gclwh14_14*rxp1_2*rxp2_2*(cj15*cj15)))+(((-0.04)*cj15*gclwh8_4*npy*npz*pz*sj15))+(((0.0299432)*cj15*gclwh14_4*npz*rxp1_2*sj15))+(((-0.37429)*gclwh8_3*pp*r21*r22*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh12_4*npz*r21))+(((-0.0002)*gclwh14_3*r22*rxp1_2*(sj15*sj15)))+(((-0.000963180554)*gclwh4_4*pz))+(((0.1399930041)*cj15*gclwh6_3*pz*r20))+(((-0.0590405046)*gclwh8_10*rxp0_2))+(((-0.01)*gclwh4_3*pp*(r22*r22)*(sj15*sj15)))+(((-0.2801860082)*cj15*gclwh8_3*r22*rxp0_2))+(((-0.37429)*gclwh6_3*pp*r20*r22*(cj15*cj15)))+(((2.0)*gclwh8_8*npy*pz*r22*(cj15*cj15)))+(((-2.0)*gclwh4_3*npz*sj15*(pz*pz)))+(((0.00138)*gclwh4_3*pz))+(((-0.1399930041)*gclwh6_8*r20*r22*(cj15*cj15)))+(((0.138)*gclwh14_3*npx*pz))+(((0.74858)*cj15*gclwh4_4*npz*pp*r22*sj15))+(((0.0074858)*cj15*gclwh4_4*pp*r22))+(((0.05165202)*cj15*gclwh12_3*rxp0_2))+(((0.07887)*gclwh14_10*pp*r20))+(((-1.0)*cj15*gclwh8_4*r21*(pp*pp)))+(((-0.37429)*cj15*gclwh12_3*pp*r21*r22))+(((0.5603720164)*cj15*gclwh8_4*npz*rxp0_2))+(((-1.0)*gclwh6_14*pp*r20*rxp2_2*(cj15*cj15)))+(((-0.0074858)*gclwh10_3*r22*rxp2_2*(sj15*sj15)))+(((0.011057022233367)*gclwh14_10*r20))+(((-0.02)*gclwh14_4*npz*pp*r20*sj15))+(((2.0)*cj15*gclwh6_4*npx*pp*pz))+((gclwh6_10*npz*pp*r20*(cj15*cj15)))+(((-0.036050884955666)*cj15*gclwh14_4*rxp1_2))+(((-0.01)*cj15*gclwh8_3*pp*r21*r22*sj15))+(((0.01)*gclwh14_3*pp*r20*r22*sj15))+(((-0.004201790123)*cj15*gclwh6_3*r20*r22*sj15))+(((-0.00036050884955666)*gclwh6_4*r20*sj15))+(((-7.4858e-5)*gclwh8_3*r21*r22*(sj15*sj15)))+(((-0.74858)*gclwh6_3*pz*rxp1_2))+(((0.104795963009178)*gclwh8_4*npz*r21*(cj15*cj15)))+(((-0.0015774)*gclwh12_10*rxp0_2*sj15))+(((-0.0074858)*gclwh8_4*pp*r21*sj15))+(((-0.74858)*cj15*gclwh14_3*npx*pz*r22))+(((-0.02)*cj15*gclwh14_14*rxp1_2*rxp2_2*sj15))+(((0.0149716)*cj15*gclwh4_4*npz*pz))+(((0.008403580246)*cj15*gclwh8_4*npz*r21*sj15))+(((-0.02)*gclwh12_4*pp*rxp0_2*sj15))+(((-0.036050884955666)*gclwh10_4*rxp2_2*sj15))+(((2.0)*gclwh12_4*npy*pp*pz))+(((-0.07887)*cj15*gclwh8_10*pp*r21))+(((0.2801860082)*cj15*gclwh6_3*r22*rxp1_2))+(((0.5603720164)*gclwh14_4*npz*rxp1_2*(cj15*cj15)))+(((-0.04)*gclwh12_4*npy*npz*pz*sj15))+(((-0.052472839504589)*cj15*gclwh12_3*r21*r22))+(((2.0)*cj15*gclwh8_4*npy*pp*pz))+(((0.00675155876779811)*gclwh14_4*r20))+(((0.0004)*gclwh14_4*npz*rxp1_2*(sj15*sj15)))+(((0.0074858)*gclwh8_3*pz*r21*sj15))+(((0.37429)*cj15*gclwh14_3*pp*r20*r22))+(((1.49716)*cj15*gclwh14_4*npx*npz*pz))+(((-1.0)*gclwh4_4*r22*sj15*(pp*pp)))+(((-0.104945679009178)*cj15*gclwh14_4*npz*r20))+(((0.0963180554)*cj15*gclwh6_4*npx*pz))+(((0.000149716)*gclwh6_4*npz*r20*(sj15*sj15)))+(((-0.00674192696225811)*gclwh4_4*r22*sj15))+(((-0.0002)*gclwh12_3*r22*rxp0_2*(sj15*sj15)))+(((-0.0074858)*cj15*gclwh8_8*r21*r22*sj15))+(((-0.001399930041)*gclwh4_3*(r22*r22)*(sj15*sj15)))+(((-1.49716)*cj15*gclwh4_4*pz*sj15*(npz*npz)))+(((-0.02)*cj15*gclwh4_8*pz*r22))+(((0.74858)*cj15*gclwh10_10*npz*rxp2_2*sj15))+(((-2.0)*cj15*gclwh12_10*npy*npz*pz))+(((0.00138)*gclwh14_3*rxp1_2*sj15))+(((-0.069)*gclwh14_3*pp*r20))+(((-0.02)*gclwh10_10*npz*rxp2_2*(cj15*cj15)))+(((-1.0)*cj15*gclwh12_8*pp*r21*r22))+(((0.002799860082)*gclwh4_4*npz*r22*(sj15*sj15)))+(((-0.04)*cj15*gclwh6_4*npx*npz*pz*sj15))+(((-0.0590405046)*cj15*gclwh14_10*rxp1_2))+(((0.000963180554)*cj15*gclwh10_4*rxp2_2))+(((-2.0)*gclwh6_10*npx*npz*pz*(cj15*cj15)))+(((0.0074858)*gclwh4_8*(cj15*cj15)*(r22*r22)))+(((-0.00138)*cj15*gclwh10_3*rxp2_2))+(((-0.07887)*gclwh12_10*pp*r21))+(((-0.00674192696225811)*cj15*gclwh6_4*r20))+(((0.15774)*cj15*gclwh8_10*npy*pz))+(((-0.1881520318)*cj15*gclwh8_4*pp*r21))+(((-0.0074858)*cj15*gclwh8_14*r21*rxp2_2*sj15))+((gclwh8_10*npz*pp*r21*(cj15*cj15)))+(((-0.0074858)*gclwh8_3*r22*rxp0_2*sj15))+(((-0.74858)*cj15*gclwh10_8*r22*rxp2_2*sj15))+(((-0.011041248233367)*cj15*gclwh6_10*r20))+(((-0.74858)*cj15*gclwh14_4*npz*pp*r20))+(((-0.0074858)*cj15*gclwh6_14*r20*rxp2_2*sj15))+(((-1.0)*cj15*gclwh6_4*r20*(pp*pp)))+(((-0.1883520318)*gclwh12_4*pp*r21))+(((-0.00036050884955666)*gclwh8_4*r21*sj15))+(((-0.2799860082)*cj15*gclwh10_3*r22*rxp2_2*sj15))+(((0.04)*gclwh14_4*npx*npz*pz*sj15))+(((-0.052323123504589)*cj15*gclwh4_3*sj15*(r22*r22)))+(((0.74858)*gclwh6_3*npx*pz*r22*(cj15*cj15)))+(((-1.0)*gclwh14_3*pp*pz*r20))+(((0.1401930041)*gclwh12_3*pz*r21))+(((0.02)*cj15*gclwh12_10*npz*rxp0_2*sj15))+(((-0.0149716)*cj15*gclwh12_3*r22*rxp0_2*sj15))+((gclwh4_3*pp*pz*r22*sj15))+(((0.02)*gclwh14_3*pz*rxp1_2*sj15))+(((0.02)*gclwh4_4*npz*pp*r22*(sj15*sj15)))+(((-0.1881520318)*gclwh4_4*pp*r22*sj15))+(((0.1399930041)*gclwh8_10*npz*r21*(cj15*cj15)))+(((-1.49716)*cj15*gclwh12_4*npy*npz*pz))+(((-0.74858)*cj15*gclwh8_14*rxp0_2*rxp2_2))+(((-0.74858)*cj15*gclwh10_14*sj15*(rxp2_2*rxp2_2)))+(((0.02)*cj15*gclwh6_4*npz*pp*r20*sj15))+(((-0.01)*gclwh12_3*pp*r21*r22*sj15))+(((0.74858)*gclwh6_4*npz*pp*r20*(cj15*cj15)))+(((2.0)*gclwh8_14*npy*pz*rxp2_2*(cj15*cj15)))+((gclwh14_4*r20*(pp*pp)))+(((-0.5603720164)*cj15*gclwh6_4*npz*rxp1_2))+(((-0.02)*cj15*gclwh12_14*rxp0_2*rxp2_2*sj15))+(((0.036050884955666)*gclwh6_4*rxp1_2))+(((-0.02)*gclwh14_3*npx*pz*r22*sj15))+(((-0.74858)*cj15*gclwh14_4*pp*rxp1_2))+(((2.0)*gclwh6_8*npx*pz*r22*(cj15*cj15)))+(((0.02)*gclwh4_3*npz*pz*r22*(sj15*sj15)))+(((-2.0)*cj15*gclwh14_8*npx*pz*r22))+(((-1.0)*cj15*gclwh4_8*pp*sj15*(r22*r22)))+(((0.74858)*gclwh12_10*npz*rxp0_2*(cj15*cj15)))+(((-0.37429)*cj15*gclwh4_3*pp*sj15*(r22*r22)))+(((0.74858)*cj15*gclwh12_4*npz*pp*r21))+(((-0.138)*gclwh4_3*npz*pz*sj15))+(((-0.04)*gclwh4_4*pz*(npz*npz)*(sj15*sj15)))+(((-0.15774)*gclwh14_10*npx*pz))+(((0.0074858)*gclwh10_3*r22*rxp2_2*(cj15*cj15)))+(((-0.00674192696225811)*cj15*gclwh8_4*r21))+(((-0.74858)*cj15*gclwh12_4*pp*rxp0_2))+(((-0.74858)*gclwh8_4*pp*rxp0_2))+(((-0.036050884955666)*gclwh8_4*rxp0_2))+(((-0.02)*cj15*gclwh12_8*r22*rxp0_2*sj15))+(((-1.0)*gclwh12_4*r21*(pp*pp)))+(((2.0)*cj15*gclwh12_8*npy*pz*r22))+(((0.74858)*gclwh8_3*pz*rxp0_2))+(((-0.2801860082)*gclwh14_3*r22*rxp1_2*(cj15*cj15)))+(((-0.0074858)*gclwh6_4*pp*r20*sj15))+(((-0.74858)*cj15*gclwh8_8*r22*rxp0_2))+(((-0.011041248233367)*cj15*gclwh8_10*r21))+((cj15*gclwh14_14*pp*r20*rxp2_2))+(((0.74858)*gclwh8_4*npz*pp*r21*(cj15*cj15)))+(((0.002801860082)*gclwh4_3*(cj15*cj15)*(r22*r22)))+(((0.104795963009178)*gclwh6_4*npz*r20*(cj15*cj15)))+(((-0.02)*gclwh14_4*pp*rxp1_2*sj15))+(((-0.002803860082)*gclwh14_4*npz*r20*sj15))+(((-0.74858)*gclwh12_14*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.74858)*cj15*gclwh4_3*npz*pz*r22*sj15))+(((0.05165202)*cj15*gclwh14_3*rxp1_2))+(((0.02)*cj15*gclwh10_4*pp*rxp2_2))+(((-0.07887)*cj15*gclwh6_10*pp*r20))+(((0.74858)*cj15*gclwh14_3*pz*rxp1_2))+(((-0.1401930041)*gclwh14_3*pz*r20))+((cj15*gclwh8_3*pp*pz*r21))+(((-0.74858)*gclwh14_8*r22*rxp1_2*(cj15*cj15)))+(((-1.0)*gclwh6_8*pp*r20*r22*(cj15*cj15)))+(((0.1401930041)*cj15*gclwh14_8*r20*r22))+(((0.0963180554)*cj15*gclwh8_4*npy*pz))+(((-0.0015774)*gclwh14_10*rxp1_2*sj15))+(((0.104646247009178)*cj15*gclwh4_4*npz*r22*sj15))+(((-0.74858)*cj15*gclwh6_10*npz*rxp1_2))+(((2.0)*cj15*gclwh12_14*npy*pz*rxp2_2))+(((0.0149716)*gclwh8_4*npz*rxp0_2*sj15))+(((0.0074858)*cj15*gclwh6_10*npz*r20*sj15))+(((0.0005165202)*gclwh6_3*r20*sj15))+(((0.0074858)*cj15*gclwh8_10*npz*r21*sj15))+(((-0.00675155876779811)*gclwh12_4*r21))+(((-7.4858e-5)*gclwh6_3*r20*r22*(sj15*sj15)))+(((0.15774)*cj15*gclwh6_10*npx*pz))+(((-0.001401930041)*gclwh12_3*r21*r22*sj15))+(((-0.0149716)*gclwh6_4*npz*rxp1_2*sj15))+(((0.1883520318)*gclwh14_4*pp*r20))+(((-0.0963180554)*gclwh14_4*npx*pz))+(((-0.74858)*gclwh10_4*pp*rxp2_2*sj15))+(((0.02)*gclwh12_3*pz*rxp0_2*sj15))+(((0.02)*gclwh12_3*npy*pz*r22*sj15))+(((0.008403580246)*cj15*gclwh6_4*npz*r20*sj15))+(((0.0096595172829)*gclwh4_3*r22*sj15))+(((-0.052397981504589)*gclwh8_3*r21*r22*(cj15*cj15)))+(((0.069)*cj15*gclwh6_3*pp*r20))+((cj15*gclwh6_3*pp*pz*r20))+(((-2.0)*cj15*gclwh6_3*npx*(pz*pz)))+(((0.02)*cj15*gclwh8_4*npz*pp*r21*sj15))+(((-0.1399930041)*cj15*gclwh4_8*sj15*(r22*r22)))+(((0.05165202)*gclwh10_3*rxp2_2*sj15))+(((-0.052397981504589)*gclwh6_3*r20*r22*(cj15*cj15)))+(((0.5599720164)*cj15*gclwh10_4*npz*rxp2_2*sj15))+(((0.0967180554)*gclwh4_4*npz*pz*sj15))+(((-0.0590405046)*cj15*gclwh12_10*rxp0_2))+((gclwh12_3*pp*pz*r21))+(((0.02)*cj15*gclwh6_3*npx*pz*r22*sj15))+(((0.0149716)*gclwh10_4*npz*rxp2_2*(sj15*sj15)))+(((0.02)*cj15*gclwh8_3*npy*pz*r22*sj15))+(((0.0590405046)*gclwh6_10*rxp1_2))+(((-0.01)*cj15*gclwh6_3*pp*r20*r22*sj15))+(((0.052472839504589)*cj15*gclwh14_3*r20*r22))+(((-0.138)*cj15*gclwh6_3*npx*pz))+(((0.02)*gclwh10_8*r22*rxp2_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh12_14*r21*rxp2_2))+(((-0.1881520318)*cj15*gclwh6_4*pp*r20))+(((0.0096595172829)*cj15*gclwh6_3*r20))+(((0.0299432)*cj15*gclwh12_4*npz*rxp0_2*sj15))+(((0.0015774)*cj15*gclwh10_10*rxp2_2))+(((-0.1401930041)*cj15*gclwh12_8*r21*r22))+(((-1.0)*cj15*gclwh12_14*pp*r21*rxp2_2))+(((-1.49716)*gclwh6_4*npx*npz*pz*(cj15*cj15)))+(((-0.005603720164)*gclwh4_4*npz*r22*(cj15*cj15)))+(((-2.0)*cj15*gclwh8_3*npy*(pz*pz)))+(((-0.0590405046)*gclwh10_10*rxp2_2*sj15))+((cj15*gclwh14_8*pp*r20*r22))+(((-0.1399930041)*gclwh6_14*r20*rxp2_2*(cj15*cj15)))+(((-0.02)*cj15*gclwh14_8*r22*rxp1_2*sj15))+(((-2.0)*gclwh12_3*npy*(pz*pz)))+(((-1.0)*gclwh8_8*pp*r21*r22*(cj15*cj15))));
op[54]=(((gclwh13_0*pp*pz*r21))+(((-0.1399930041)*gclwh7_11*npz*r20*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh13_1*npz*r21))+(((-2.0)*cj15*gclwh15_11*npx*npz*pz))+(((0.1397930041)*gclwh5_0*pz*r22*sj15))+(((0.093888656775811)*gclwh13_11*r21))+(((-0.02)*gclwh15_1*pp*rxp1_2*sj15))+(((0.02)*cj15*gclwh15_9*r22*rxp1_2*sj15))+(((-1.33942)*gclwh13_11*npy*pz))+(((0.74858)*gclwh9_0*npy*pz*r22*(cj15*cj15)))+(((0.5603720164)*gclwh15_1*npz*rxp1_2*(cj15*cj15)))+(((-0.0096595172829)*gclwh5_0*r22*sj15))+(((2.0)*gclwh9_11*npy*npz*pz*(cj15*cj15)))+(((-0.1401930041)*gclwh15_0*pz*r20))+(((0.1399930041)*gclwh9_15*r21*rxp2_2*(cj15*cj15)))+(((-0.002803860082)*gclwh15_1*npz*r20*sj15))+(((0.5013315118)*cj15*gclwh13_11*rxp0_2))+(((-0.02)*gclwh15_0*npx*pz*r22*sj15))+(((-0.1881520318)*cj15*gclwh7_1*pp*r20))+(((-0.74858)*cj15*gclwh11_11*npz*rxp2_2*sj15))+(((-2.0)*cj15*gclwh9_0*npy*(pz*pz)))+(((0.00138)*cj15*gclwh11_0*rxp2_2))+(((0.008403580246)*cj15*gclwh7_1*npz*r20*sj15))+(((0.74858)*cj15*gclwh11_15*sj15*(rxp2_2*rxp2_2)))+(((-0.1399930041)*gclwh9_11*npz*r21*(cj15*cj15)))+(((0.74858)*gclwh13_9*r22*rxp0_2*(cj15*cj15)))+((gclwh7_9*pp*r20*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh11_9*r22*rxp2_2*sj15))+(((-0.01)*gclwh5_0*pp*(r22*r22)*(sj15*sj15)))+(((-0.0074858)*cj15*gclwh7_11*npz*r20*sj15))+(((-2.0)*gclwh5_0*npz*sj15*(pz*pz)))+(((-0.02)*cj15*gclwh11_0*pz*rxp2_2))+((gclwh9_9*pp*r21*r22*(cj15*cj15)))+(((-0.0133942)*cj15*gclwh11_11*rxp2_2))+(((-0.00138)*gclwh5_0*pz))+(((-0.5603720164)*cj15*gclwh7_1*npz*rxp1_2))+(((-0.0149716)*cj15*gclwh15_0*r22*rxp1_2*sj15))+(((0.005013315118)*gclwh9_11*r21*sj15))+(((0.74858)*cj15*gclwh5_0*npz*pz*r22*sj15))+(((0.0299432)*cj15*gclwh15_1*npz*rxp1_2*sj15))+(((0.0096733172829)*gclwh15_0*r20))+(((0.02)*cj15*gclwh13_9*r22*rxp0_2*sj15))+(((0.02)*gclwh5_0*npz*pz*r22*(sj15*sj15)))+(((-0.02)*gclwh11_15*(cj15*cj15)*(rxp2_2*rxp2_2)))+((cj15*gclwh7_0*pp*pz*r20))+(((-0.04)*gclwh5_1*pz*(npz*npz)*(sj15*sj15)))+(((2.0)*cj15*gclwh9_1*npy*pp*pz))+(((0.74858)*cj15*gclwh13_0*pz*rxp0_2))+(((-0.1883520318)*gclwh13_1*pp*r21))+(((0.5013315118)*gclwh11_11*rxp2_2*sj15))+(((-1.49716)*cj15*gclwh13_1*npy*npz*pz))+(((0.02)*gclwh13_0*pz*rxp0_2*sj15))+(((-0.0005165202)*gclwh7_0*r20*sj15))+(((0.74858)*cj15*gclwh13_1*npz*pp*r21))+(((0.069)*gclwh15_0*pp*r20))+(((-1.0)*gclwh5_1*r22*sj15*(pp*pp)))+(((1.33942)*gclwh15_11*npx*pz))+(((0.74858)*gclwh7_1*npz*pp*r20*(cj15*cj15)))+(((-0.0149716)*gclwh11_1*npz*rxp2_2*(cj15*cj15)))+(((-0.0096595172829)*cj15*gclwh7_0*r20))+(((-1.49716)*gclwh9_1*npy*npz*pz*(cj15*cj15)))+(((0.00036050884955666)*cj15*gclwh5_1*r22))+(((0.002801860082)*gclwh5_0*(cj15*cj15)*(r22*r22)))+(((0.02)*gclwh13_1*npz*pp*r21*sj15))+(((0.0074858)*cj15*gclwh9_15*r21*rxp2_2*sj15))+(((-7.4858e-5)*gclwh7_0*r20*r22*(sj15*sj15)))+(((-0.001399930041)*gclwh5_0*(r22*r22)*(sj15*sj15)))+(((-0.00036050884955666)*gclwh7_1*r20*sj15))+(((2.0)*gclwh5_1*npz*pp*pz*sj15))+(((0.0074858)*cj15*gclwh9_9*r21*r22*sj15))+(((0.02)*gclwh5_0*(pz*pz)))+(((0.0005165202)*cj15*gclwh5_0*r22))+(((0.1399930041)*gclwh7_15*r20*rxp2_2*(cj15*cj15)))+(((0.0149716)*gclwh9_1*npz*rxp0_2*sj15))+(((0.0963180554)*cj15*gclwh9_1*npy*pz))+(((-1.0)*gclwh9_11*npz*pp*r21*(cj15*cj15)))+((cj15*gclwh9_0*pp*pz*r21))+(((-0.04)*cj15*gclwh7_1*npx*npz*pz*sj15))+(((0.0967180554)*gclwh5_1*npz*pz*sj15))+(((-0.1881520318)*gclwh5_1*pp*r22*sj15))+(((-0.069)*cj15*gclwh7_0*pp*r20))+(((0.02)*cj15*gclwh5_9*pz*r22))+(((0.1401930041)*gclwh13_0*pz*r21))+(((-1.0)*cj15*gclwh15_9*pp*r20*r22))+(((0.5599720164)*cj15*gclwh11_1*npz*rxp2_2*sj15))+(((-0.05165202)*cj15*gclwh13_0*rxp0_2))+(((-0.138)*gclwh15_0*npx*pz))+(((0.0299432)*cj15*gclwh13_1*npz*rxp0_2*sj15))+(((-0.04)*cj15*gclwh9_1*npy*npz*pz*sj15))+(((-0.02)*gclwh15_1*npz*pp*r20*sj15))+(((-0.02)*gclwh11_9*r22*rxp2_2*(cj15*cj15)))+(((-0.05165202)*gclwh11_0*rxp2_2*sj15))+(((0.036050884955666)*gclwh7_1*rxp1_2))+(((-0.02)*gclwh13_1*pp*rxp0_2*sj15))+(((0.74858)*gclwh9_1*npz*pp*r21*(cj15*cj15)))+(((0.0133942)*gclwh15_11*rxp1_2*sj15))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.74858)*cj15*gclwh15_1*pp*rxp1_2))+(((0.1401930041)*cj15*gclwh15_11*npz*r20))+(((0.04)*gclwh15_1*npx*npz*pz*sj15))+(((0.0074858)*gclwh7_0*r22*rxp1_2*sj15))+(((-0.0002)*gclwh13_0*r22*rxp0_2*(sj15*sj15)))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((0.66971)*gclwh13_11*pp*r21))+(((0.02)*gclwh5_1*npz*pp*r22*(sj15*sj15)))+(((-0.02)*gclwh5_1*pp*pz))+(((0.0074858)*gclwh7_0*pz*r20*sj15))+(((-0.052397981504589)*gclwh9_0*r21*r22*(cj15*cj15)))+(((-0.052472839504589)*cj15*gclwh13_0*r21*r22))+(((-2.0)*cj15*gclwh13_15*npy*pz*rxp2_2))+(((-1.0)*cj15*gclwh9_1*r21*(pp*pp)))+(((-0.74858)*gclwh11_1*pp*rxp2_2*sj15))+(((-0.00675155876779811)*gclwh13_1*r21))+(((0.74858)*cj15*gclwh13_0*npy*pz*r22))+(((-0.04)*gclwh13_1*npy*npz*pz*sj15))+(((0.0074858)*gclwh11_0*r22*rxp2_2*(cj15*cj15)))+(((0.138)*gclwh13_0*npy*pz))+(((-7.4858e-5)*gclwh9_0*r21*r22*(sj15*sj15)))+(((0.1399930041)*cj15*gclwh5_9*sj15*(r22*r22)))+(((0.01)*gclwh15_0*pp*r20*r22*sj15))+(((0.37429)*cj15*gclwh15_0*pp*r20*r22))+(((-0.1881520318)*cj15*gclwh9_1*pp*r21))+(((-0.069)*cj15*gclwh9_0*pp*r21))+(((0.5013315118)*cj15*gclwh15_11*rxp1_2))+(((-0.000963180554)*gclwh13_1*rxp0_2*sj15))+(((2.0)*gclwh7_11*npx*npz*pz*(cj15*cj15)))+(((0.74858)*gclwh7_1*pp*rxp1_2))+(((0.052472839504589)*cj15*gclwh15_0*r20*r22))+(((-1.49716)*cj15*gclwh5_1*pz*sj15*(npz*npz)))+(((0.0133942)*gclwh13_11*rxp0_2*sj15))+(((0.74858)*gclwh7_0*npx*pz*r22*(cj15*cj15)))+(((0.000963180554)*cj15*gclwh11_1*rxp2_2))+(((-0.01)*cj15*gclwh7_0*pp*r20*r22*sj15))+(((-0.036050884955666)*cj15*gclwh13_1*rxp0_2))+(((0.0074858)*gclwh9_0*pz*r21*sj15))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((0.000149716)*gclwh9_1*npz*r21*(sj15*sj15)))+(((-0.74858)*cj15*gclwh7_9*r22*rxp1_2))+(((-0.2801860082)*cj15*gclwh9_0*r22*rxp0_2))+(((0.66971)*cj15*gclwh7_11*pp*r20))+(((-0.00674192696225811)*cj15*gclwh9_1*r21))+(((-0.02)*cj15*gclwh13_11*npz*rxp0_2*sj15))+(((-2.0)*gclwh7_15*npx*pz*rxp2_2*(cj15*cj15)))+(((-1.0)*cj15*gclwh7_1*r20*(pp*pp)))+(((0.138)*cj15*gclwh7_0*npx*pz))+(((0.74858)*gclwh9_0*pz*rxp0_2))+(((-1.49716)*gclwh7_1*npx*npz*pz*(cj15*cj15)))+(((0.0963180554)*cj15*gclwh7_1*npx*pz))+(((-0.000963180554)*gclwh15_1*rxp1_2*sj15))+(((-0.00036050884955666)*gclwh9_1*r21*sj15))+(((-0.2801860082)*gclwh15_0*r22*rxp1_2*(cj15*cj15)))+(((0.0074858)*cj15*gclwh7_9*r20*r22*sj15))+(((-0.00674192696225811)*gclwh5_1*r22*sj15))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((0.05165202)*gclwh7_0*rxp1_2))+(((-0.01)*cj15*gclwh9_0*pp*r21*r22*sj15))+(((-0.036050884955666)*gclwh9_1*rxp0_2))+(((-0.2799860082)*cj15*gclwh11_0*r22*rxp2_2*sj15))+(((-0.05165202)*gclwh9_0*rxp0_2))+(((-0.00138)*gclwh13_0*rxp0_2*sj15))+(((-0.74858)*cj15*gclwh9_11*npz*rxp0_2))+(((-0.01)*gclwh13_0*pp*r21*r22*sj15))+(((0.02)*cj15*gclwh7_1*npz*pp*r20*sj15))+(((-1.0)*cj15*gclwh15_15*pp*r20*rxp2_2))+(((-2.0)*cj15*gclwh7_0*npx*(pz*pz)))+(((0.5603720164)*cj15*gclwh9_1*npz*rxp0_2))+(((0.74858)*cj15*gclwh9_9*r22*rxp0_2))+(((0.104646247009178)*cj15*gclwh5_1*npz*r22*sj15))+(((0.00675155876779811)*gclwh15_1*r20))+(((-2.0)*gclwh7_9*npx*pz*r22*(cj15*cj15)))+(((-0.05165202)*cj15*gclwh15_0*rxp1_2))+((cj15*gclwh13_15*pp*r21*rxp2_2))+(((0.1399930041)*cj15*gclwh7_0*pz*r20))+(((0.0004)*gclwh13_1*npz*rxp0_2*(sj15*sj15)))+(((2.0)*cj15*gclwh15_9*npx*pz*r22))+(((0.02)*gclwh15_0*pz*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_15*rxp0_2*rxp2_2*sj15))+(((1.49716)*cj15*gclwh15_1*npx*npz*pz))+(((-0.0074858)*gclwh7_1*pp*r20*sj15))+(((-0.1401930041)*cj15*gclwh15_9*r20*r22))+(((-0.1401930041)*cj15*gclwh13_11*npz*r21))+(((0.0149716)*cj15*gclwh5_1*npz*pz))+(((0.0963180554)*gclwh13_1*npy*pz))+(((-0.0963180554)*gclwh15_1*npx*pz))+(((-0.74858)*gclwh13_11*npz*rxp0_2*(cj15*cj15)))+(((0.002799860082)*gclwh5_1*npz*r22*(sj15*sj15)))+(((-0.001401930041)*gclwh13_0*r21*r22*sj15))+(((-2.0)*gclwh9_9*npy*pz*r22*(cj15*cj15)))+(((-0.0096595172829)*cj15*gclwh9_0*r21))+(((-0.0074858)*gclwh11_0*r22*rxp2_2*(sj15*sj15)))+(((0.005013315118)*gclwh7_11*r20*sj15))+(((-0.37429)*gclwh9_0*pp*r21*r22*(cj15*cj15)))+(((-2.0)*cj15*gclwh13_9*npy*pz*r22))+(((0.2801860082)*cj15*gclwh7_0*r22*rxp1_2))+(((0.104795963009178)*gclwh9_1*npz*r21*(cj15*cj15)))+((cj15*gclwh5_9*pp*sj15*(r22*r22)))+((cj15*gclwh15_11*npz*pp*r20))+(((-0.74858)*cj15*gclwh15_1*npz*pp*r20))+(((0.1399930041)*gclwh9_9*r21*r22*(cj15*cj15)))+(((2.0)*cj15*gclwh15_15*npx*pz*rxp2_2))+(((0.008403580246)*cj15*gclwh9_1*npz*r21*sj15))+(((-0.069)*gclwh13_0*pp*r21))+(((0.74858)*gclwh13_15*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.1399930041)*gclwh7_9*r20*r22*(cj15*cj15)))+(((-0.37429)*cj15*gclwh5_0*pp*sj15*(r22*r22)))+(((-1.0)*gclwh7_11*npz*pp*r20*(cj15*cj15)))+(((-0.00674192696225811)*cj15*gclwh7_1*r20))+(((0.1401930041)*cj15*gclwh13_15*r21*rxp2_2))+(((-0.74858)*cj15*gclwh15_0*npx*pz*r22))+(((-0.036050884955666)*cj15*gclwh15_1*rxp1_2))+(((-0.004201790123)*cj15*gclwh7_0*r20*r22*sj15))+(((0.0074858)*cj15*gclwh7_15*r20*rxp2_2*sj15))+((gclwh5_0*pp*pz*r22*sj15))+(((0.001401930041)*gclwh15_0*r20*r22*sj15))+(((-0.0149716)*cj15*gclwh13_0*r22*rxp0_2*sj15))+(((0.74858)*gclwh15_15*rxp1_2*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh15_9*r22*rxp1_2*(cj15*cj15)))+(((0.02)*cj15*gclwh11_1*pp*rxp2_2))+(((0.02)*cj15*gclwh7_0*npx*pz*r22*sj15))+(((0.1883520318)*gclwh15_1*pp*r20))+(((-0.0074858)*gclwh5_9*(cj15*cj15)*(r22*r22)))+(((-0.000963180554)*gclwh5_1*pz))+(((0.74858)*cj15*gclwh15_0*pz*rxp1_2))+(((0.0074858)*cj15*gclwh5_1*pp*r22))+(((0.0149716)*gclwh11_1*npz*rxp2_2*(sj15*sj15)))+((cj15*gclwh13_9*pp*r21*r22))+(((0.02)*gclwh13_0*npy*pz*r22*sj15))+(((-0.0074858)*cj15*gclwh9_11*npz*r21*sj15))+(((-0.37429)*cj15*gclwh13_0*pp*r21*r22))+(((-0.74858)*cj15*gclwh13_1*pp*rxp0_2))+(((-0.0002)*gclwh15_0*r22*rxp1_2*(sj15*sj15)))+(((-0.004201790123)*cj15*gclwh9_0*r21*r22*sj15))+(((2.0)*cj15*gclwh7_1*npx*pp*pz))+(((0.74858)*gclwh11_0*pz*rxp2_2*sj15))+(((0.1401930041)*cj15*gclwh13_9*r21*r22))+(((0.1399930041)*cj15*gclwh9_0*pz*r21))+(((0.66971)*cj15*gclwh9_11*pp*r21))+(((-0.74858)*gclwh15_11*npz*rxp1_2*(cj15*cj15)))+(((0.104795963009178)*gclwh7_1*npz*r20*(cj15*cj15)))+(((0.138)*cj15*gclwh9_0*npy*pz))+(((0.000149716)*gclwh7_1*npz*r20*(sj15*sj15)))+(((-0.74858)*cj15*gclwh7_15*rxp1_2*rxp2_2))+(((0.02)*cj15*gclwh9_1*npz*pp*r21*sj15))+(((2.0)*cj15*gclwh13_11*npy*npz*pz))+(((-0.37429)*gclwh7_0*pp*r20*r22*(cj15*cj15)))+(((-0.036050884955666)*gclwh11_1*rxp2_2*sj15))+(((0.093754714775811)*cj15*gclwh7_11*r20))+(((0.0004)*gclwh15_1*npz*rxp1_2*(sj15*sj15)))+(((-1.0)*cj15*gclwh13_11*npz*pp*r21))+(((0.02)*cj15*gclwh15_15*rxp1_2*rxp2_2*sj15))+(((0.5603720164)*gclwh13_1*npz*rxp0_2*(cj15*cj15)))+(((-0.093888656775811)*gclwh15_11*r20))+(((-0.74858)*gclwh7_0*pz*rxp1_2))+(((-1.33942)*cj15*gclwh9_11*npy*pz))+((gclwh15_1*r20*(pp*pp)))+(((0.74858)*cj15*gclwh7_11*npz*rxp1_2))+(((-0.0074858)*gclwh9_1*pp*r21*sj15))+(((-0.0005165202)*gclwh9_0*r21*sj15))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.0149716)*cj15*gclwh5_0*pz*r22))+(((-0.1401930041)*cj15*gclwh15_15*r20*rxp2_2))+(((0.74858)*cj15*gclwh5_1*npz*pp*r22*sj15))+(((-0.02)*cj15*gclwh15_11*npz*rxp1_2*sj15))+(((-2.0)*cj15*gclwh5_9*npz*pz*r22*sj15))+(((-0.0074858)*gclwh9_0*r22*rxp0_2*sj15))+(((-0.052397981504589)*gclwh7_0*r20*r22*(cj15*cj15)))+(((0.02)*gclwh11_11*npz*rxp2_2*(cj15*cj15)))+(((-0.052323123504589)*cj15*gclwh5_0*sj15*(r22*r22)))+(((-0.069)*gclwh5_0*pp*r22*sj15))+(((-0.104945679009178)*cj15*gclwh15_1*npz*r20))+(((0.138)*gclwh5_0*npz*pz*sj15))+(((-0.74858)*gclwh9_1*pp*rxp0_2))+(((-0.2801860082)*gclwh13_0*r22*rxp0_2*(cj15*cj15)))+(((-0.00138)*gclwh15_0*rxp1_2*sj15))+((gclwh9_15*pp*r21*rxp2_2*(cj15*cj15)))+(((0.02)*cj15*gclwh9_0*npy*pz*r22*sj15))+(((-0.005603720164)*gclwh5_1*npz*r22*(cj15*cj15)))+(((-0.5013315118)*gclwh7_11*rxp1_2))+(((0.74858)*cj15*gclwh9_15*rxp0_2*rxp2_2))+(((-1.33942)*cj15*gclwh7_11*npx*pz))+(((-0.66971)*gclwh15_11*pp*r20))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-2.0)*gclwh9_15*npy*pz*rxp2_2*(cj15*cj15)))+(((-0.0149716)*gclwh7_1*npz*rxp1_2*sj15))+((gclwh7_15*pp*r20*rxp2_2*(cj15*cj15)))+(((0.093754714775811)*cj15*gclwh9_11*r21))+(((0.5013315118)*gclwh9_11*rxp0_2))+(((0.002803860082)*gclwh13_1*npz*r21*sj15))+(((-0.0096733172829)*gclwh13_0*r21)));
IkReal x527=(gclwh13_15*r21);
IkReal x528=(gclwh15_15*r20);
IkReal x529=(gclwh7_15*rxp1_2);
IkReal x530=(gclwh9_15*rxp0_2);
IkReal x531=(cj15*gclwh11_15*rxp2_2);
IkReal x532=(cj15*gclwh13_15*rxp0_2);
IkReal x533=(cj15*gclwh15_15*rxp1_2);
IkReal x534=(cj15*gclwh7_15*r20);
IkReal x535=(cj15*gclwh9_15*r21);
IkReal x536=(gclwh11_15*rxp2_2*sj15);
IkReal x537=(gclwh13_15*npy*pz);
IkReal x538=(gclwh13_15*pp*r21);
IkReal x539=(gclwh13_15*rxp0_2*sj15);
IkReal x540=(gclwh15_15*npx*pz);
IkReal x541=(gclwh15_15*pp*r20);
IkReal x542=(gclwh15_15*rxp1_2*sj15);
IkReal x543=(gclwh7_15*r20*sj15);
IkReal x544=(gclwh9_15*r21*sj15);
IkReal x545=x174;
IkReal x546=x175;
IkReal x547=x176;
IkReal x548=x177;
IkReal x549=(gclwh13_6*r21);
IkReal x550=(gclwh15_6*r20);
IkReal x551=(gclwh5_6*pz);
IkReal x552=((1.49716)*rxp1_2);
IkReal x553=((1.49716)*rxp0_2);
IkReal x554=(gclwh11_6*rxp2_2);
IkReal x555=((0.2799860082)*cj15);
IkReal x556=(gclwh7_6*r20);
IkReal x557=(gclwh9_6*r21);
IkReal x558=((4.0)*npy*pz);
IkReal x559=((2.0)*pp);
IkReal x560=((0.04)*sj15);
IkReal x561=((4.0)*npx*pz);
IkReal x562=(gclwh5_6*r22*sj15);
IkReal x563=((0.0149716)*sj15);
IkReal x564=((2.0)*cj15*pp);
op[55]=((((0.2211455036)*gclwh11_13*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh15_9*rxp1_2))+(((0.2211455036)*cj15*gclwh13_13*rxp0_2))+(((0.069)*cj15*gclwh9_11*pp*r21))+(((0.041356733271222)*cj15*gclwh7_13*r20))+(((0.05165202)*cj15*gclwh13_11*rxp0_2))+(((-2.0)*gclwh15_9*npx*pz))+(((0.138)*gclwh15_11*npx*pz))+(((-1.0)*gclwh5_9*pp*r22*sj15))+(((0.0096595172829)*cj15*gclwh7_11*r20))+(((0.002211455036)*gclwh9_13*r21*sj15))+(((0.74858)*gclwh7_9*rxp1_2))+(((0.069)*cj15*gclwh7_11*pp*r20))+(((-0.1399930041)*gclwh5_9*r22*sj15))+(((-0.2211455036)*gclwh7_13*rxp1_2))+(((0.29542)*gclwh5_13*pp*r22*sj15))+(((0.0059084)*gclwh13_13*rxp0_2*sj15))+(((0.0005165202)*gclwh9_11*r21*sj15))+(((-0.0074858)*gclwh7_9*r20*sj15))+(((-1.0)*cj15*gclwh7_9*pp*r20))+(((0.29542)*cj15*gclwh9_13*pp*r21))+(((0.002211455036)*gclwh7_13*r20*sj15))+(((0.59084)*gclwh15_13*npx*pz))+(((-0.0096733172829)*gclwh15_11*r20))+(((-1.0)*cj15*gclwh9_9*pp*r21))+(((-0.29542)*gclwh15_13*pp*r20))+((gclwh15_9*pp*r20))+(((-0.138)*gclwh13_11*npy*pz))+(((2.0)*gclwh5_9*npz*pz*sj15))+(((-0.069)*gclwh15_11*pp*r20))+(((-0.0074858)*gclwh9_9*r21*sj15))+(((0.0096733172829)*gclwh13_11*r21))+(((0.2211455036)*cj15*gclwh15_13*rxp1_2))+(((-0.041415817271222)*gclwh15_13*r20))+(((0.00138)*gclwh15_11*rxp1_2*sj15))+(((0.0005165202)*gclwh7_11*r20*sj15))+(((-0.74858)*gclwh9_9*rxp0_2))+(((0.05165202)*gclwh9_11*rxp0_2))+(((-0.1399930041)*cj15*gclwh7_9*r20))+(((0.05165202)*gclwh11_11*rxp2_2*sj15))+(((0.0074858)*cj15*gclwh5_9*r22))+(((0.069)*gclwh13_11*pp*r21))+(((-0.138)*cj15*gclwh7_11*npx*pz))+(((0.1401930041)*gclwh15_9*r20))+(((-0.59084)*cj15*gclwh7_13*npx*pz))+(((-0.59084)*gclwh5_13*npz*pz*sj15))+(((-0.0059084)*cj15*gclwh11_13*rxp2_2))+(((0.02)*cj15*gclwh11_9*rxp2_2))+(((-0.02)*gclwh5_9*pz))+(((0.0059084)*gclwh5_13*pz))+(((0.0096595172829)*cj15*gclwh9_11*r21))+(((-0.002211455036)*cj15*gclwh5_13*r22))+(((0.05165202)*cj15*gclwh15_11*rxp1_2))+(((-0.00138)*cj15*gclwh11_11*rxp2_2))+(((0.29542)*cj15*gclwh7_13*pp*r20))+(((-0.02)*gclwh15_9*rxp1_2*sj15))+(((2.0)*gclwh13_9*npy*pz))+(((-0.1401930041)*gclwh13_9*r21))+(((2.0)*cj15*gclwh7_9*npx*pz))+(((0.2211455036)*gclwh9_13*rxp0_2))+(((-0.02)*gclwh13_9*rxp0_2*sj15))+(((0.0059084)*gclwh15_13*rxp1_2*sj15))+(((0.29542)*gclwh13_13*pp*r21))+(((0.041356733271222)*cj15*gclwh9_13*r21))+(((-0.05165202)*gclwh7_11*rxp1_2))+(((-0.1399930041)*cj15*gclwh9_9*r21))+(((0.041356733271222)*gclwh5_13*r22*sj15))+(((-0.74858)*cj15*gclwh13_9*rxp0_2))+(((0.041415817271222)*gclwh13_13*r21))+(((-1.0)*gclwh13_9*pp*r21))+(((2.0)*cj15*gclwh9_9*npy*pz))+(((-0.138)*cj15*gclwh9_11*npy*pz))+(((-0.59084)*gclwh13_13*npy*pz))+(((-0.59084)*cj15*gclwh9_13*npy*pz))+(((0.00138)*gclwh13_11*rxp0_2*sj15))+(((-0.74858)*gclwh11_9*rxp2_2*sj15)));
op[56]=((((0.0193466345658)*x527))+(((-0.276)*x547))+(((0.138)*x546))+(((0.0010330404)*x543))+(((0.10330404)*x536))+(((0.138)*x548))+(((0.10330404)*x533))+(((0.00276)*x542))+(((0.0010330404)*x544))+(((0.138)*x538))+(((0.00276)*x539))+(((0.10330404)*x530))+(((-0.10330404)*x529))+(((0.276)*x540))+(((-0.276)*x537))+(((-0.138)*x541))+(((0.10330404)*x532))+(((-0.0193466345658)*x528))+(((-0.00276)*x531))+(((0.0193190345658)*x535))+(((0.0193190345658)*x534))+(((-0.276)*x545)));
op[57]=((0.1840679528)+(((-0.4422910072)*x532))+(((0.59084)*x541))+(((-0.0118168)*x539))+((gclwh13_6*rxp0_2*x560))+(((-0.082713466542444)*x535))+(((-0.59084)*x538))+((cj15*gclwh15_6*x552))+(((0.0118168)*x531))+(((0.082831634542444)*x528))+(((-0.004422910072)*x544))+(((0.2799860082)*x562))+(((-0.082831634542444)*x527))+(((-1.0)*cj15*gclwh9_6*x558))+(((-4.0)*npz*sj15*x551))+(((1.18168)*x547))+((gclwh9_6*x553))+((cj15*gclwh13_6*x553))+(((-0.0149716)*cj15*gclwh5_6*r22))+(((0.04)*x551))+(((1.49716)*sj15*x554))+(((-0.59084)*x548))+(((0.4422910072)*x529))+(((-1.0)*x550*x559))+(((-1.0)*gclwh7_6*x552))+(((-0.004422910072)*x543))+(((1.18168)*x545))+((x555*x557))+(((-0.59084)*x546))+(((-0.4422910072)*x536))+(((-0.0118168)*x542))+(((-0.4422910072)*x530))+(((1.18168)*x537))+((gclwh15_6*x561))+(((-1.0)*cj15*gclwh7_6*x561))+(((-1.0)*gclwh13_6*x558))+(((-0.4422910072)*x533))+((x557*x563))+((x555*x556))+(((-0.2803860082)*x550))+((x557*x564))+((x549*x559))+(((-1.18168)*x540))+((x556*x563))+((gclwh15_6*rxp1_2*x560))+((x556*x564))+((x559*x562))+(((-0.082713466542444)*x534))+(((0.2803860082)*x549))+(((-0.04)*cj15*x554)));
op[58]=((((-0.138)*gclwh5_0*npz*pz*sj15))+((gclwh13_0*pp*pz*r21))+(((-0.1399930041)*gclwh7_11*npz*r20*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh13_1*npz*r21))+(((-2.0)*cj15*gclwh15_11*npx*npz*pz))+(((0.05165202)*cj15*gclwh15_0*rxp1_2))+(((0.1397930041)*gclwh5_0*pz*r22*sj15))+(((0.093888656775811)*gclwh13_11*r21))+(((-0.069)*gclwh15_0*pp*r20))+(((-0.02)*gclwh15_1*pp*rxp1_2*sj15))+(((0.02)*cj15*gclwh15_9*r22*rxp1_2*sj15))+(((-1.33942)*gclwh13_11*npy*pz))+(((0.74858)*gclwh9_0*npy*pz*r22*(cj15*cj15)))+(((0.5603720164)*gclwh15_1*npz*rxp1_2*(cj15*cj15)))+(((2.0)*gclwh9_11*npy*npz*pz*(cj15*cj15)))+(((-0.1401930041)*gclwh15_0*pz*r20))+(((0.069)*gclwh5_0*pp*r22*sj15))+(((0.1399930041)*gclwh9_15*r21*rxp2_2*(cj15*cj15)))+(((-0.002803860082)*gclwh15_1*npz*r20*sj15))+(((0.5013315118)*cj15*gclwh13_11*rxp0_2))+(((-0.02)*gclwh15_0*npx*pz*r22*sj15))+(((-0.1881520318)*cj15*gclwh7_1*pp*r20))+(((-0.74858)*cj15*gclwh11_11*npz*rxp2_2*sj15))+(((-2.0)*cj15*gclwh9_0*npy*(pz*pz)))+(((0.008403580246)*cj15*gclwh7_1*npz*r20*sj15))+(((0.74858)*cj15*gclwh11_15*sj15*(rxp2_2*rxp2_2)))+(((-0.1399930041)*gclwh9_11*npz*r21*(cj15*cj15)))+(((0.74858)*gclwh13_9*r22*rxp0_2*(cj15*cj15)))+((gclwh7_9*pp*r20*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh11_9*r22*rxp2_2*sj15))+(((-0.01)*gclwh5_0*pp*(r22*r22)*(sj15*sj15)))+(((-0.0074858)*cj15*gclwh7_11*npz*r20*sj15))+(((-2.0)*gclwh5_0*npz*sj15*(pz*pz)))+(((-0.02)*cj15*gclwh11_0*pz*rxp2_2))+(((0.05165202)*gclwh9_0*rxp0_2))+((gclwh9_9*pp*r21*r22*(cj15*cj15)))+(((-0.0133942)*cj15*gclwh11_11*rxp2_2))+(((-0.5603720164)*cj15*gclwh7_1*npz*rxp1_2))+(((0.00138)*gclwh5_0*pz))+(((-0.0149716)*cj15*gclwh15_0*r22*rxp1_2*sj15))+(((0.005013315118)*gclwh9_11*r21*sj15))+(((0.74858)*cj15*gclwh5_0*npz*pz*r22*sj15))+(((-0.138)*gclwh13_0*npy*pz))+(((0.0299432)*cj15*gclwh15_1*npz*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_9*r22*rxp0_2*sj15))+(((0.02)*gclwh5_0*npz*pz*r22*(sj15*sj15)))+(((-0.02)*gclwh11_15*(cj15*cj15)*(rxp2_2*rxp2_2)))+((cj15*gclwh7_0*pp*pz*r20))+(((-0.04)*gclwh5_1*pz*(npz*npz)*(sj15*sj15)))+(((2.0)*cj15*gclwh9_1*npy*pp*pz))+(((0.74858)*cj15*gclwh13_0*pz*rxp0_2))+(((-0.1883520318)*gclwh13_1*pp*r21))+(((0.5013315118)*gclwh11_11*rxp2_2*sj15))+(((0.0096595172829)*gclwh5_0*r22*sj15))+(((-1.49716)*cj15*gclwh13_1*npy*npz*pz))+(((0.02)*gclwh13_0*pz*rxp0_2*sj15))+(((0.74858)*cj15*gclwh13_1*npz*pp*r21))+(((-1.0)*gclwh5_1*r22*sj15*(pp*pp)))+(((1.33942)*gclwh15_11*npx*pz))+(((0.74858)*gclwh7_1*npz*pp*r20*(cj15*cj15)))+(((0.05165202)*cj15*gclwh13_0*rxp0_2))+(((-0.0149716)*gclwh11_1*npz*rxp2_2*(cj15*cj15)))+(((-1.49716)*gclwh9_1*npy*npz*pz*(cj15*cj15)))+(((0.00036050884955666)*cj15*gclwh5_1*r22))+(((0.002801860082)*gclwh5_0*(cj15*cj15)*(r22*r22)))+(((0.02)*gclwh13_1*npz*pp*r21*sj15))+(((0.0074858)*cj15*gclwh9_15*r21*rxp2_2*sj15))+(((-0.0096733172829)*gclwh15_0*r20))+(((-7.4858e-5)*gclwh7_0*r20*r22*(sj15*sj15)))+(((-0.001399930041)*gclwh5_0*(r22*r22)*(sj15*sj15)))+(((-0.00036050884955666)*gclwh7_1*r20*sj15))+(((2.0)*gclwh5_1*npz*pp*pz*sj15))+(((0.0074858)*cj15*gclwh9_9*r21*r22*sj15))+(((0.02)*gclwh5_0*(pz*pz)))+(((0.1399930041)*gclwh7_15*r20*rxp2_2*(cj15*cj15)))+(((0.0149716)*gclwh9_1*npz*rxp0_2*sj15))+(((0.0963180554)*cj15*gclwh9_1*npy*pz))+(((-1.0)*gclwh9_11*npz*pp*r21*(cj15*cj15)))+((cj15*gclwh9_0*pp*pz*r21))+(((-0.04)*cj15*gclwh7_1*npx*npz*pz*sj15))+(((0.0967180554)*gclwh5_1*npz*pz*sj15))+(((-0.1881520318)*gclwh5_1*pp*r22*sj15))+(((0.02)*cj15*gclwh5_9*pz*r22))+(((0.1401930041)*gclwh13_0*pz*r21))+(((-1.0)*cj15*gclwh15_9*pp*r20*r22))+(((-0.138)*cj15*gclwh9_0*npy*pz))+(((0.5599720164)*cj15*gclwh11_1*npz*rxp2_2*sj15))+(((0.0096595172829)*cj15*gclwh9_0*r21))+(((0.0299432)*cj15*gclwh13_1*npz*rxp0_2*sj15))+(((-0.04)*cj15*gclwh9_1*npy*npz*pz*sj15))+(((-0.02)*gclwh15_1*npz*pp*r20*sj15))+(((-0.02)*gclwh11_9*r22*rxp2_2*(cj15*cj15)))+(((0.036050884955666)*gclwh7_1*rxp1_2))+(((-0.02)*gclwh13_1*pp*rxp0_2*sj15))+(((0.74858)*gclwh9_1*npz*pp*r21*(cj15*cj15)))+(((0.0133942)*gclwh15_11*rxp1_2*sj15))+(((-2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.74858)*cj15*gclwh15_1*pp*rxp1_2))+(((0.1401930041)*cj15*gclwh15_11*npz*r20))+(((0.04)*gclwh15_1*npx*npz*pz*sj15))+(((0.0074858)*gclwh7_0*r22*rxp1_2*sj15))+(((-0.0002)*gclwh13_0*r22*rxp0_2*(sj15*sj15)))+(((-1.0)*gclwh13_1*r21*(pp*pp)))+(((0.0096595172829)*cj15*gclwh7_0*r20))+(((0.66971)*gclwh13_11*pp*r21))+(((0.02)*gclwh5_1*npz*pp*r22*(sj15*sj15)))+(((-0.02)*gclwh5_1*pp*pz))+(((0.0074858)*gclwh7_0*pz*r20*sj15))+(((-0.052397981504589)*gclwh9_0*r21*r22*(cj15*cj15)))+(((-0.052472839504589)*cj15*gclwh13_0*r21*r22))+(((-2.0)*cj15*gclwh13_15*npy*pz*rxp2_2))+(((-1.0)*cj15*gclwh9_1*r21*(pp*pp)))+(((-0.74858)*gclwh11_1*pp*rxp2_2*sj15))+(((-0.00675155876779811)*gclwh13_1*r21))+(((0.74858)*cj15*gclwh13_0*npy*pz*r22))+(((-0.04)*gclwh13_1*npy*npz*pz*sj15))+(((0.0074858)*gclwh11_0*r22*rxp2_2*(cj15*cj15)))+(((-7.4858e-5)*gclwh9_0*r21*r22*(sj15*sj15)))+(((0.1399930041)*cj15*gclwh5_9*sj15*(r22*r22)))+(((0.01)*gclwh15_0*pp*r20*r22*sj15))+(((0.37429)*cj15*gclwh15_0*pp*r20*r22))+(((-0.1881520318)*cj15*gclwh9_1*pp*r21))+(((0.5013315118)*cj15*gclwh15_11*rxp1_2))+(((0.05165202)*gclwh11_0*rxp2_2*sj15))+(((-0.000963180554)*gclwh13_1*rxp0_2*sj15))+(((2.0)*gclwh7_11*npx*npz*pz*(cj15*cj15)))+(((0.74858)*gclwh7_1*pp*rxp1_2))+(((0.052472839504589)*cj15*gclwh15_0*r20*r22))+(((-1.49716)*cj15*gclwh5_1*pz*sj15*(npz*npz)))+(((0.0133942)*gclwh13_11*rxp0_2*sj15))+(((0.00138)*gclwh13_0*rxp0_2*sj15))+(((0.74858)*gclwh7_0*npx*pz*r22*(cj15*cj15)))+(((0.000963180554)*cj15*gclwh11_1*rxp2_2))+(((-0.01)*cj15*gclwh7_0*pp*r20*r22*sj15))+(((-0.036050884955666)*cj15*gclwh13_1*rxp0_2))+(((0.0074858)*gclwh9_0*pz*r21*sj15))+(((2.0)*gclwh15_0*npx*(pz*pz)))+(((0.000149716)*gclwh9_1*npz*r21*(sj15*sj15)))+(((-0.74858)*cj15*gclwh7_9*r22*rxp1_2))+(((-0.2801860082)*cj15*gclwh9_0*r22*rxp0_2))+(((0.66971)*cj15*gclwh7_11*pp*r20))+(((-0.00674192696225811)*cj15*gclwh9_1*r21))+(((-0.02)*cj15*gclwh13_11*npz*rxp0_2*sj15))+(((-2.0)*gclwh7_15*npx*pz*rxp2_2*(cj15*cj15)))+(((-1.0)*cj15*gclwh7_1*r20*(pp*pp)))+(((0.74858)*gclwh9_0*pz*rxp0_2))+(((-1.49716)*gclwh7_1*npx*npz*pz*(cj15*cj15)))+(((0.0963180554)*cj15*gclwh7_1*npx*pz))+(((-0.000963180554)*gclwh15_1*rxp1_2*sj15))+(((-0.00036050884955666)*gclwh9_1*r21*sj15))+(((-0.2801860082)*gclwh15_0*r22*rxp1_2*(cj15*cj15)))+(((0.0074858)*cj15*gclwh7_9*r20*r22*sj15))+(((-0.00674192696225811)*gclwh5_1*r22*sj15))+(((-1.0)*gclwh15_0*pp*pz*r20))+(((-0.01)*cj15*gclwh9_0*pp*r21*r22*sj15))+(((-0.036050884955666)*gclwh9_1*rxp0_2))+(((-0.2799860082)*cj15*gclwh11_0*r22*rxp2_2*sj15))+(((0.069)*gclwh13_0*pp*r21))+(((-0.74858)*cj15*gclwh9_11*npz*rxp0_2))+(((0.069)*cj15*gclwh9_0*pp*r21))+(((-0.01)*gclwh13_0*pp*r21*r22*sj15))+(((0.02)*cj15*gclwh7_1*npz*pp*r20*sj15))+(((-1.0)*cj15*gclwh15_15*pp*r20*rxp2_2))+(((-2.0)*cj15*gclwh7_0*npx*(pz*pz)))+(((0.5603720164)*cj15*gclwh9_1*npz*rxp0_2))+(((0.74858)*cj15*gclwh9_9*r22*rxp0_2))+(((0.138)*gclwh15_0*npx*pz))+(((0.104646247009178)*cj15*gclwh5_1*npz*r22*sj15))+(((0.00675155876779811)*gclwh15_1*r20))+(((-2.0)*gclwh7_9*npx*pz*r22*(cj15*cj15)))+((cj15*gclwh13_15*pp*r21*rxp2_2))+(((0.1399930041)*cj15*gclwh7_0*pz*r20))+(((0.0004)*gclwh13_1*npz*rxp0_2*(sj15*sj15)))+(((2.0)*cj15*gclwh15_9*npx*pz*r22))+(((0.02)*gclwh15_0*pz*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_15*rxp0_2*rxp2_2*sj15))+(((1.49716)*cj15*gclwh15_1*npx*npz*pz))+(((-0.0074858)*gclwh7_1*pp*r20*sj15))+(((-0.1401930041)*cj15*gclwh15_9*r20*r22))+(((-0.1401930041)*cj15*gclwh13_11*npz*r21))+(((0.0149716)*cj15*gclwh5_1*npz*pz))+(((0.0963180554)*gclwh13_1*npy*pz))+(((-0.0963180554)*gclwh15_1*npx*pz))+(((0.0096733172829)*gclwh13_0*r21))+(((-0.74858)*gclwh13_11*npz*rxp0_2*(cj15*cj15)))+(((0.002799860082)*gclwh5_1*npz*r22*(sj15*sj15)))+(((-0.001401930041)*gclwh13_0*r21*r22*sj15))+(((-2.0)*gclwh9_9*npy*pz*r22*(cj15*cj15)))+(((-0.0074858)*gclwh11_0*r22*rxp2_2*(sj15*sj15)))+(((0.005013315118)*gclwh7_11*r20*sj15))+(((-0.37429)*gclwh9_0*pp*r21*r22*(cj15*cj15)))+(((-2.0)*cj15*gclwh13_9*npy*pz*r22))+(((0.2801860082)*cj15*gclwh7_0*r22*rxp1_2))+(((0.104795963009178)*gclwh9_1*npz*r21*(cj15*cj15)))+((cj15*gclwh5_9*pp*sj15*(r22*r22)))+((cj15*gclwh15_11*npz*pp*r20))+(((-0.74858)*cj15*gclwh15_1*npz*pp*r20))+(((0.1399930041)*gclwh9_9*r21*r22*(cj15*cj15)))+(((2.0)*cj15*gclwh15_15*npx*pz*rxp2_2))+(((0.008403580246)*cj15*gclwh9_1*npz*r21*sj15))+(((0.74858)*gclwh13_15*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.1399930041)*gclwh7_9*r20*r22*(cj15*cj15)))+(((-0.37429)*cj15*gclwh5_0*pp*sj15*(r22*r22)))+(((-0.0005165202)*cj15*gclwh5_0*r22))+(((-1.0)*gclwh7_11*npz*pp*r20*(cj15*cj15)))+(((-0.00674192696225811)*cj15*gclwh7_1*r20))+(((0.1401930041)*cj15*gclwh13_15*r21*rxp2_2))+(((-0.74858)*cj15*gclwh15_0*npx*pz*r22))+(((-0.138)*cj15*gclwh7_0*npx*pz))+(((-0.036050884955666)*cj15*gclwh15_1*rxp1_2))+(((-0.004201790123)*cj15*gclwh7_0*r20*r22*sj15))+(((0.0074858)*cj15*gclwh7_15*r20*rxp2_2*sj15))+((gclwh5_0*pp*pz*r22*sj15))+(((0.001401930041)*gclwh15_0*r20*r22*sj15))+(((-0.0149716)*cj15*gclwh13_0*r22*rxp0_2*sj15))+(((0.74858)*gclwh15_15*rxp1_2*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh15_9*r22*rxp1_2*(cj15*cj15)))+(((-0.05165202)*gclwh7_0*rxp1_2))+(((0.02)*cj15*gclwh11_1*pp*rxp2_2))+(((0.02)*cj15*gclwh7_0*npx*pz*r22*sj15))+(((0.1883520318)*gclwh15_1*pp*r20))+(((-0.0074858)*gclwh5_9*(cj15*cj15)*(r22*r22)))+(((-0.000963180554)*gclwh5_1*pz))+(((0.74858)*cj15*gclwh15_0*pz*rxp1_2))+(((0.0074858)*cj15*gclwh5_1*pp*r22))+(((0.0149716)*gclwh11_1*npz*rxp2_2*(sj15*sj15)))+((cj15*gclwh13_9*pp*r21*r22))+(((0.02)*gclwh13_0*npy*pz*r22*sj15))+(((-0.0074858)*cj15*gclwh9_11*npz*r21*sj15))+(((-0.37429)*cj15*gclwh13_0*pp*r21*r22))+(((-0.74858)*cj15*gclwh13_1*pp*rxp0_2))+(((-0.0002)*gclwh15_0*r22*rxp1_2*(sj15*sj15)))+(((-0.004201790123)*cj15*gclwh9_0*r21*r22*sj15))+(((2.0)*cj15*gclwh7_1*npx*pp*pz))+(((0.74858)*gclwh11_0*pz*rxp2_2*sj15))+(((0.1401930041)*cj15*gclwh13_9*r21*r22))+(((0.1399930041)*cj15*gclwh9_0*pz*r21))+(((0.66971)*cj15*gclwh9_11*pp*r21))+(((-0.74858)*gclwh15_11*npz*rxp1_2*(cj15*cj15)))+(((0.104795963009178)*gclwh7_1*npz*r20*(cj15*cj15)))+(((0.000149716)*gclwh7_1*npz*r20*(sj15*sj15)))+(((-0.74858)*cj15*gclwh7_15*rxp1_2*rxp2_2))+(((0.02)*cj15*gclwh9_1*npz*pp*r21*sj15))+(((2.0)*cj15*gclwh13_11*npy*npz*pz))+(((-0.37429)*gclwh7_0*pp*r20*r22*(cj15*cj15)))+(((-0.036050884955666)*gclwh11_1*rxp2_2*sj15))+(((0.093754714775811)*cj15*gclwh7_11*r20))+(((0.0004)*gclwh15_1*npz*rxp1_2*(sj15*sj15)))+(((-1.0)*cj15*gclwh13_11*npz*pp*r21))+(((0.02)*cj15*gclwh15_15*rxp1_2*rxp2_2*sj15))+(((0.00138)*gclwh15_0*rxp1_2*sj15))+(((0.0005165202)*gclwh7_0*r20*sj15))+(((0.5603720164)*gclwh13_1*npz*rxp0_2*(cj15*cj15)))+(((-0.093888656775811)*gclwh15_11*r20))+(((-0.74858)*gclwh7_0*pz*rxp1_2))+(((-1.33942)*cj15*gclwh9_11*npy*pz))+((gclwh15_1*r20*(pp*pp)))+(((0.74858)*cj15*gclwh7_11*npz*rxp1_2))+(((-0.0074858)*gclwh9_1*pp*r21*sj15))+(((-2.0)*gclwh15_1*npx*pp*pz))+(((-0.0149716)*cj15*gclwh5_0*pz*r22))+(((-0.1401930041)*cj15*gclwh15_15*r20*rxp2_2))+(((0.74858)*cj15*gclwh5_1*npz*pp*r22*sj15))+(((-0.02)*cj15*gclwh15_11*npz*rxp1_2*sj15))+(((-2.0)*cj15*gclwh5_9*npz*pz*r22*sj15))+(((-0.0074858)*gclwh9_0*r22*rxp0_2*sj15))+(((-0.052397981504589)*gclwh7_0*r20*r22*(cj15*cj15)))+(((0.0005165202)*gclwh9_0*r21*sj15))+(((0.02)*gclwh11_11*npz*rxp2_2*(cj15*cj15)))+(((-0.052323123504589)*cj15*gclwh5_0*sj15*(r22*r22)))+(((-0.104945679009178)*cj15*gclwh15_1*npz*r20))+(((-0.74858)*gclwh9_1*pp*rxp0_2))+(((-0.2801860082)*gclwh13_0*r22*rxp0_2*(cj15*cj15)))+((gclwh9_15*pp*r21*rxp2_2*(cj15*cj15)))+(((0.02)*cj15*gclwh9_0*npy*pz*r22*sj15))+(((-0.005603720164)*gclwh5_1*npz*r22*(cj15*cj15)))+(((-0.5013315118)*gclwh7_11*rxp1_2))+(((0.74858)*cj15*gclwh9_15*rxp0_2*rxp2_2))+(((-1.33942)*cj15*gclwh7_11*npx*pz))+(((-0.66971)*gclwh15_11*pp*r20))+(((2.0)*gclwh13_1*npy*pp*pz))+(((-2.0)*gclwh9_15*npy*pz*rxp2_2*(cj15*cj15)))+(((-0.00138)*cj15*gclwh11_0*rxp2_2))+(((0.069)*cj15*gclwh7_0*pp*r20))+(((-0.0149716)*gclwh7_1*npz*rxp1_2*sj15))+((gclwh7_15*pp*r20*rxp2_2*(cj15*cj15)))+(((0.093754714775811)*cj15*gclwh9_11*r21))+(((0.5013315118)*gclwh9_11*rxp0_2))+(((0.002803860082)*gclwh13_1*npz*r21*sj15)));
op[59]=((((-0.2211455036)*gclwh9_13*rxp0_2))+(((0.069)*cj15*gclwh9_11*pp*r21))+(((-2.0)*gclwh5_9*npz*pz*sj15))+(((0.05165202)*cj15*gclwh13_11*rxp0_2))+(((0.0074858)*gclwh7_9*r20*sj15))+(((0.1399930041)*gclwh5_9*r22*sj15))+(((0.138)*gclwh15_11*npx*pz))+(((-0.59084)*gclwh15_13*npx*pz))+(((0.1399930041)*cj15*gclwh9_9*r21))+(((-0.29542)*cj15*gclwh9_13*pp*r21))+(((-1.0)*gclwh15_9*pp*r20))+(((-0.041356733271222)*cj15*gclwh9_13*r21))+(((0.0074858)*gclwh9_9*r21*sj15))+(((0.0096595172829)*cj15*gclwh7_11*r20))+(((0.069)*cj15*gclwh7_11*pp*r20))+(((-0.29542)*gclwh13_13*pp*r21))+(((-0.74858)*gclwh7_9*rxp1_2))+(((0.0059084)*cj15*gclwh11_13*rxp2_2))+(((-0.02)*cj15*gclwh11_9*rxp2_2))+(((-0.0074858)*cj15*gclwh5_9*r22))+(((0.0005165202)*gclwh9_11*r21*sj15))+((gclwh5_9*pp*r22*sj15))+(((0.59084)*gclwh13_13*npy*pz))+((gclwh13_9*pp*r21))+(((0.59084)*cj15*gclwh7_13*npx*pz))+(((-0.0096733172829)*gclwh15_11*r20))+(((0.002211455036)*cj15*gclwh5_13*r22))+(((-0.29542)*gclwh5_13*pp*r22*sj15))+(((0.041415817271222)*gclwh15_13*r20))+(((-0.138)*gclwh13_11*npy*pz))+(((-0.069)*gclwh15_11*pp*r20))+(((-0.0059084)*gclwh13_13*rxp0_2*sj15))+(((0.0096733172829)*gclwh13_11*r21))+(((0.1401930041)*gclwh13_9*r21))+(((0.00138)*gclwh15_11*rxp1_2*sj15))+(((0.0005165202)*gclwh7_11*r20*sj15))+(((-0.1401930041)*gclwh15_9*r20))+(((0.05165202)*gclwh9_11*rxp0_2))+(((0.05165202)*gclwh11_11*rxp2_2*sj15))+(((0.069)*gclwh13_11*pp*r21))+(((-0.138)*cj15*gclwh7_11*npx*pz))+(((-0.002211455036)*gclwh7_13*r20*sj15))+(((-0.2211455036)*cj15*gclwh13_13*rxp0_2))+(((0.74858)*gclwh11_9*rxp2_2*sj15))+(((-0.0059084)*gclwh15_13*rxp1_2*sj15))+(((-0.2211455036)*gclwh11_13*rxp2_2*sj15))+(((0.02)*gclwh13_9*rxp0_2*sj15))+(((0.0096595172829)*cj15*gclwh9_11*r21))+(((-0.002211455036)*gclwh9_13*r21*sj15))+(((0.05165202)*cj15*gclwh15_11*rxp1_2))+(((0.59084)*cj15*gclwh9_13*npy*pz))+(((-0.00138)*cj15*gclwh11_11*rxp2_2))+(((0.1399930041)*cj15*gclwh7_9*r20))+(((0.02)*gclwh5_9*pz))+((cj15*gclwh9_9*pp*r21))+(((-0.0059084)*gclwh5_13*pz))+(((-0.29542)*cj15*gclwh7_13*pp*r20))+(((-2.0)*gclwh13_9*npy*pz))+(((0.74858)*cj15*gclwh13_9*rxp0_2))+(((0.74858)*cj15*gclwh15_9*rxp1_2))+((cj15*gclwh7_9*pp*r20))+(((-2.0)*cj15*gclwh7_9*npx*pz))+(((0.59084)*gclwh5_13*npz*pz*sj15))+(((2.0)*gclwh15_9*npx*pz))+(((-0.2211455036)*cj15*gclwh15_13*rxp1_2))+(((-0.05165202)*gclwh7_11*rxp1_2))+(((0.74858)*gclwh9_9*rxp0_2))+(((0.29542)*gclwh15_13*pp*r20))+(((-0.041356733271222)*gclwh5_13*r22*sj15))+(((-0.041356733271222)*cj15*gclwh7_13*r20))+(((0.02)*gclwh15_9*rxp1_2*sj15))+(((0.2211455036)*gclwh7_13*rxp1_2))+(((-2.0)*cj15*gclwh9_9*npy*pz))+(((-0.138)*cj15*gclwh9_11*npy*pz))+(((-0.041415817271222)*gclwh13_13*r21))+(((0.00138)*gclwh13_11*rxp0_2*sj15)));
op[60]=((-0.0825119764)+(((0.0005165202)*cj15*gclwh10_10*r22))+(((-0.069)*gclwh10_10*pp*r22*sj15))+(((-0.0096595172829)*cj15*gclwh14_10*r21))+(((-1.0)*gclwh6_8*pp*r21))+(((-0.1401930041)*gclwh6_8*r21))+(((0.05165202)*cj15*gclwh6_10*rxp0_2))+(((-0.74858)*cj15*gclwh6_8*rxp0_2))+(((0.0096733172829)*gclwh6_10*r21))+(((0.00138)*gclwh6_10*rxp0_2*sj15))+(((0.05165202)*cj15*gclwh8_10*rxp1_2))+(((0.138)*cj15*gclwh12_10*npx*pz))+(((-2.0)*gclwh10_8*npz*pz*sj15))+(((-0.041415817271222)*gclwh6_12*r21))+((gclwh10_8*pp*r22*sj15))+(((0.041356733271222)*cj15*gclwh12_12*r20))+((gclwh8_8*pp*r20))+((cj15*gclwh12_8*pp*r20))+(((-0.02)*gclwh6_8*rxp0_2*sj15))+(((0.59084)*gclwh6_12*npy*pz))+(((-0.069)*cj15*gclwh12_10*pp*r20))+(((0.138)*gclwh8_10*npx*pz))+(((-0.0096733172829)*gclwh8_10*r20))+(((0.041415817271222)*gclwh8_12*r20))+(((0.1401930041)*gclwh8_8*r20))+(((0.29542)*gclwh8_12*pp*r20))+(((0.002211455036)*gclwh14_12*r21*sj15))+(((-0.0059084)*gclwh6_12*rxp0_2*sj15))+(((-0.0005165202)*gclwh14_10*r21*sj15))+(((-0.59084)*cj15*gclwh12_12*npx*pz))+(((-0.002211455036)*cj15*gclwh10_12*r22))+(((0.1399930041)*cj15*gclwh14_8*r21))+(((0.069)*gclwh6_10*pp*r21))+(((0.29542)*cj15*gclwh12_12*pp*r20))+(((-0.069)*cj15*gclwh14_10*pp*r21))+(((0.29542)*cj15*gclwh14_12*pp*r21))+(((-0.0059084)*gclwh8_12*rxp1_2*sj15))+(((-0.74858)*gclwh12_8*rxp1_2))+(((0.0074858)*gclwh12_8*r20*sj15))+(((-0.59084)*gclwh8_12*npx*pz))+(((0.74858)*gclwh14_8*rxp0_2))+(((-0.2211455036)*cj15*gclwh6_12*rxp0_2))+(((-2.0)*cj15*gclwh14_8*npy*pz))+(((0.0074858)*gclwh14_8*r21*sj15))+(((-2.0)*cj15*gclwh12_8*npx*pz))+(((-0.2211455036)*cj15*gclwh8_12*rxp1_2))+(((-0.59084)*gclwh10_12*npz*pz*sj15))+(((0.1399930041)*cj15*gclwh12_8*r20))+(((-0.05165202)*gclwh14_10*rxp0_2))+(((-0.2211455036)*gclwh4_12*rxp2_2*sj15))+(((-0.0005165202)*gclwh12_10*r20*sj15))+(((0.0059084)*gclwh10_12*pz))+(((0.138)*cj15*gclwh14_10*npy*pz))+(((-0.138)*gclwh6_10*npy*pz))+(((-0.0074858)*cj15*gclwh10_8*r22))+(((0.02)*cj15*gclwh4_8*rxp2_2))+(((-0.0096595172829)*gclwh10_10*r22*sj15))+(((2.0)*gclwh6_8*npy*pz))+(((-2.0)*gclwh8_8*npx*pz))+(((0.041356733271222)*gclwh10_12*r22*sj15))+(((0.0059084)*cj15*gclwh4_12*rxp2_2))+(((0.05165202)*gclwh12_10*rxp1_2))+(((0.138)*gclwh10_10*npz*pz*sj15))+(((0.041356733271222)*cj15*gclwh14_12*r21))+(((0.29542)*gclwh10_12*pp*r22*sj15))+(((0.002211455036)*gclwh12_12*r20*sj15))+(((0.1399930041)*gclwh10_8*r22*sj15))+(((-0.59084)*cj15*gclwh14_12*npy*pz))+(((-0.02)*gclwh8_8*rxp1_2*sj15))+(((-0.00138)*gclwh10_10*pz))+(((-0.069)*gclwh8_10*pp*r20))+(((-0.74858)*cj15*gclwh8_8*rxp1_2))+((cj15*gclwh14_8*pp*r21))+(((-0.74858)*gclwh4_8*rxp2_2*sj15))+(((0.02)*gclwh10_8*pz))+(((0.2211455036)*gclwh14_12*rxp0_2))+(((-0.2211455036)*gclwh12_12*rxp1_2))+(((-0.29542)*gclwh6_12*pp*r21))+(((0.00138)*gclwh8_10*rxp1_2*sj15))+(((-0.0096595172829)*cj15*gclwh12_10*r20)));
op[61]=((-0.04076796)+(((-0.05165202)*gclwh14_3*rxp0_2))+(((0.00036050884955666)*cj15*gclwh3_4*r21))+(((-0.74858)*cj15*gclwh1_3*npx*pz*r22*sj15))+(((-0.00674192696225811)*gclwh10_4*r22*sj15))+(((-0.0096595172829)*cj15*gclwh14_3*r21))+(((-0.74858)*cj15*gclwh8_3*pz*rxp1_2))+(((-0.00036050884955666)*gclwh14_4*r21*sj15))+(((0.74858)*cj15*gclwh10_3*npz*pz*r22*sj15))+(((0.02)*cj15*gclwh8_14*rxp1_2*rxp2_2*sj15))+(((0.052472839504589)*cj15*gclwh6_3*r21*r22))+(((-0.052397981504589)*gclwh12_3*r20*r22*(cj15*cj15)))+(((-0.0074858)*gclwh10_10*npz*r22*(cj15*cj15)))+(((-0.1399930041)*gclwh12_14*r20*rxp2_2*(cj15*cj15)))+(((0.0074858)*cj15*gclwh12_10*npz*r20*sj15))+((gclwh14_10*npz*pp*r21*(cj15*cj15)))+(((0.0963180554)*cj15*gclwh14_4*npy*pz))+(((-0.04)*gclwh10_4*pz*(npz*npz)*(sj15*sj15)))+(((0.74858)*gclwh6_8*r22*rxp0_2*(cj15*cj15)))+(((-0.069)*cj15*gclwh12_3*pp*r20))+(((0.00138)*gclwh6_3*rxp0_2*sj15))+(((2.0)*gclwh12_8*npx*pz*r22*(cj15*cj15)))+(((-0.5603720164)*cj15*gclwh12_4*npz*rxp1_2))+(((-0.0005165202)*gclwh14_3*r21*sj15))+(((-0.000963180554)*gclwh10_4*pz))+(((-0.37429)*gclwh12_3*pp*r20*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh12_8*r22*rxp1_2))+(((-0.74858)*gclwh8_10*npz*rxp1_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh1_3*r22*rxp1_2))+(((-0.02)*gclwh4_8*r22*rxp2_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh14_14*r21*rxp2_2*sj15))+(((0.0074858)*gclwh4_3*r22*rxp2_2*(sj15*sj15)))+(((0.02)*cj15*gclwh14_4*npz*pp*r21*sj15))+(((0.0590405046)*cj15*gclwh8_10*rxp1_2))+(((0.138)*gclwh8_3*npx*pz))+(((-1.0)*gclwh12_8*pp*r20*r22*(cj15*cj15)))+(((0.15774)*cj15*gclwh14_10*npy*pz))+(((0.74858)*cj15*gclwh6_4*pp*rxp0_2))+(((0.104795963009178)*gclwh14_4*npz*r21*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh8_4*npz*r20))+(((0.15774)*cj15*gclwh12_10*npx*pz))+(((0.74858)*gclwh14_3*pz*rxp0_2))+(((0.002799860082)*gclwh1_4*npz*r20*(sj15*sj15)))+(((-1.0)*cj15*gclwh14_4*r21*(pp*pp)))+((gclwh12_10*npz*pp*r20*(cj15*cj15)))+(((-0.000963180554)*gclwh1_4*rxp1_2))+(((-0.02)*cj15*gclwh10_14*pz*rxp2_2))+(((-0.07887)*gclwh10_10*pp*r22*sj15))+(((-0.0074858)*cj15*gclwh14_8*r21*r22*sj15))+(((0.74858)*gclwh12_3*npx*pz*r22*(cj15*cj15)))+(((2.0)*cj15*gclwh10_14*npz*pz*rxp2_2*sj15))+(((-1.0)*cj15*gclwh6_10*npz*pp*r21))+(((-0.052397981504589)*gclwh14_3*r21*r22*(cj15*cj15)))+(((-0.74858)*gclwh4_3*pz*rxp2_2*sj15))+(((0.0149716)*gclwh14_4*npz*rxp0_2*sj15))+(((2.0)*gclwh10_4*npz*pp*pz*sj15))+((cj15*gclwh14_3*pp*pz*r21))+(((-1.0)*cj15*gclwh10_14*pp*r22*rxp2_2*sj15))+(((0.02)*cj15*gclwh6_14*rxp0_2*rxp2_2*sj15))+(((0.02)*gclwh8_3*npx*pz*r22*sj15))+(((-0.0299432)*cj15*gclwh8_4*npz*rxp1_2*sj15))+(((-0.15774)*gclwh6_10*npy*pz))+(((-0.37429)*gclwh14_3*pp*r21*r22*(cj15*cj15)))+(((-2.0)*gclwh14_10*npy*npz*pz*(cj15*cj15)))+(((-2.0)*gclwh12_10*npx*npz*pz*(cj15*cj15)))+(((0.02)*cj15*gclwh4_3*pz*rxp2_2))+(((0.0074858)*cj15*gclwh3_3*r22*rxp0_2))+(((0.05165202)*gclwh4_3*rxp2_2*sj15))+(((0.02)*cj15*gclwh12_3*npx*pz*r22*sj15))+(((0.0002)*gclwh3_3*r22*rxp0_2*sj15))+(((-0.5599720164)*cj15*gclwh4_4*npz*rxp2_2*sj15))+(((0.00036050884955666)*cj15*gclwh1_4*r20))+(((0.74858)*gclwh4_4*pp*rxp2_2*sj15))+(((-0.00138)*gclwh10_3*pz))+(((-0.0918339764)*gclwh1_4*pp*r20*sj15))+(((0.74858)*cj15*gclwh8_4*npz*pp*r20))+(((-2.0)*cj15*gclwh8_10*npx*npz*pz))+(((-0.07887)*cj15*gclwh14_10*pp*r21))+(((-0.0963180554)*gclwh1_4*npx*pz*sj15))+(((-0.74858)*cj15*gclwh6_3*pz*rxp0_2))+(((2.0)*cj15*gclwh12_4*npx*pp*pz))+(((-0.0096733172829)*gclwh8_3*r20))+(((0.74858)*cj15*gclwh10_4*npz*pp*r22*sj15))+(((-2.0)*cj15*gclwh10_10*pz*sj15*(npz*npz)))+(((0.1401930041)*cj15*gclwh8_10*npz*r20))+(((0.0963180554)*cj15*gclwh12_4*npx*pz))+(((2.0)*gclwh6_3*npy*(pz*pz)))+(((2.0)*gclwh3_3*npy*sj15*(pz*pz)))+(((-0.74858)*gclwh12_3*pz*rxp1_2))+(((0.02)*gclwh10_4*npz*pp*r22*(sj15*sj15)))+(((-0.02)*gclwh6_3*npy*pz*r22*sj15))+(((-0.02)*gclwh1_3*npx*pz*r22*(sj15*sj15)))+(((-0.0004)*gclwh6_4*npz*rxp0_2*(sj15*sj15)))+(((-0.1401930041)*cj15*gclwh8_14*r20*rxp2_2))+(((0.104795963009178)*gclwh12_4*npz*r20*(cj15*cj15)))+(((-0.1399930041)*cj15*gclwh10_8*sj15*(r22*r22)))+(((0.0005165202)*cj15*gclwh1_3*r20))+(((-0.0149716)*gclwh4_4*npz*rxp2_2*(sj15*sj15)))+(((-0.0005165202)*gclwh12_3*r20*sj15))+(((-0.02)*gclwh3_3*npy*pz*r22*(sj15*sj15)))+(((-7.4858e-5)*gclwh14_3*r21*r22*(sj15*sj15)))+(((0.1401930041)*cj15*gclwh6_14*r21*rxp2_2))+(((-0.74858)*cj15*gclwh14_8*r22*rxp0_2))+(((-0.004201790123)*cj15*gclwh12_3*r20*r22*sj15))+(((0.02)*cj15*gclwh12_4*npz*pp*r20*sj15))+(((0.011057022233367)*gclwh6_10*r21))+(((-0.1399930041)*gclwh12_8*r20*r22*(cj15*cj15)))+(((-0.01)*cj15*gclwh14_3*pp*r21*r22*sj15))+(((0.15774)*gclwh10_10*npz*pz*sj15))+(((0.1401930041)*gclwh8_3*pz*r20))+(((0.37429)*cj15*gclwh6_3*pp*r21*r22))+(((0.1399930041)*cj15*gclwh12_3*pz*r20))+(((0.2801860082)*cj15*gclwh12_3*r22*rxp1_2))+(((-0.0074858)*r22*sj15))+(((0.01)*gclwh1_3*pp*r20*r22*(sj15*sj15)))+(((0.1399930041)*gclwh3_3*pz*r21*sj15))+(((0.02)*gclwh6_4*pp*rxp0_2*sj15))+(((-1.49716)*cj15*gclwh10_4*pz*sj15*(npz*npz)))+(((-0.0074858)*gclwh14_4*pp*r21*sj15))+(((0.04)*gclwh6_4*npy*npz*pz*sj15))+(((0.0015774)*gclwh6_10*rxp0_2*sj15))+(((0.02)*cj15*gclwh8_8*r22*rxp1_2*sj15))+(((0.002801860082)*gclwh10_3*(cj15*cj15)*(r22*r22)))+(((-0.0149716)*gclwh12_4*npz*rxp1_2*sj15))+(((-0.02)*gclwh6_4*npz*pp*r21*sj15))+(((0.00138)*gclwh8_3*rxp1_2*sj15))+(((-0.1401930041)*gclwh6_3*pz*r21))+(((0.1883520318)*gclwh6_4*pp*r21))+(((-0.74858)*gclwh6_10*npz*rxp0_2*(cj15*cj15)))+(((0.0967180554)*gclwh10_4*npz*pz*sj15))+(((-0.011041248233367)*cj15*gclwh14_10*r21))+(((-0.052323123504589)*cj15*gclwh10_3*sj15*(r22*r22)))+(((0.74858)*cj15*gclwh8_3*npx*pz*r22))+(((0.0096733172829)*gclwh6_3*r21))+(((0.1399930041)*gclwh1_3*pz*r20*sj15))+(((-0.5603720164)*gclwh6_4*npz*rxp0_2*(cj15*cj15)))+(((-0.04)*cj15*gclwh14_4*npy*npz*pz*sj15))+(((0.15774)*gclwh8_10*npx*pz))+(((-0.1401930041)*cj15*gclwh8_8*r20*r22))+(((-0.74858)*cj15*gclwh3_3*npy*pz*r22*sj15))+(((0.74858)*gclwh12_4*npz*pp*r20*(cj15*cj15)))+(((0.00675155876779811)*gclwh6_4*r21))+(((0.0963180554)*gclwh8_4*npx*pz))+(((0.036050884955666)*gclwh4_4*rxp2_2*sj15))+(((-0.004201790123)*cj15*gclwh14_3*r21*r22*sj15))+(((-0.74858)*gclwh14_4*pp*rxp0_2))+(((0.04)*gclwh1_4*npx*npz*pz*(sj15*sj15)))+(((0.5603720164)*cj15*gclwh14_4*npz*rxp0_2))+(((-0.00674192696225811)*cj15*gclwh14_4*r21))+(((0.74858)*cj15*gclwh14_10*npz*rxp0_2))+(((0.07887)*gclwh6_10*pp*r21))+(((-0.74858)*cj15*gclwh1_4*npz*pp*r20*sj15))+(((-0.1399930041)*gclwh14_8*r21*r22*(cj15*cj15)))+(((0.2801860082)*gclwh8_3*r22*rxp1_2*(cj15*cj15)))+(((2.0)*cj15*gclwh10_8*npz*pz*r22*sj15))+(((-0.0004)*gclwh8_4*npz*rxp1_2*(sj15*sj15)))+(((0.0074858)*gclwh10_14*r22*rxp2_2*(cj15*cj15)))+(((0.04)*gclwh3_4*npy*npz*pz*(sj15*sj15)))+(((0.01)*gclwh3_3*pp*r21*r22*(sj15*sj15)))+(((0.069)*gclwh6_3*pp*r21))+(((-0.005603720164)*gclwh3_4*npz*r21*(cj15*cj15)))+(((-0.1883520318)*gclwh8_4*pp*r20))+(((0.008403580246)*cj15*gclwh12_4*npz*r20*sj15))+(((0.0149716)*cj15*gclwh1_4*npz*rxp1_2))+(((-0.00138)*cj15*gclwh4_3*rxp2_2))+(((-0.0096595172829)*gclwh10_3*r22*sj15))+(((-0.01)*cj15*gclwh12_3*pp*r20*r22*sj15))+(((-0.1399930041)*cj15*r22))+(((0.0002)*gclwh8_3*r22*rxp1_2*(sj15*sj15)))+(((-0.052323123504589)*cj15*gclwh1_3*r20*r22*sj15))+(((2.0)*gclwh8_4*npx*pp*pz))+(((0.0590405046)*gclwh12_10*rxp1_2))+(((0.37429)*cj15*gclwh1_3*pp*r20*r22*sj15))+(((0.1399930041)*gclwh14_10*npz*r21*(cj15*cj15)))+(((-0.02)*gclwh8_3*pz*rxp1_2*sj15))+(((-1.0)*gclwh14_14*pp*r21*rxp2_2*(cj15*cj15)))+(((-0.1881520318)*gclwh10_4*pp*r22*sj15))+(((-0.00036050884955666)*gclwh12_4*r20*sj15))+(((-1.0)*gclwh12_14*pp*r20*rxp2_2*(cj15*cj15)))+(((0.036050884955666)*cj15*gclwh8_4*rxp1_2))+(((2.0)*cj15*gclwh6_10*npy*npz*pz))+(((-0.069)*cj15*gclwh14_3*pp*r21))+(((0.74858)*gclwh14_4*npz*pp*r21*(cj15*cj15)))+(((0.0015774)*gclwh8_10*rxp1_2*sj15))+(((0.0074858)*gclwh12_3*pz*r20*sj15))+(((1.49716)*cj15*gclwh6_4*npy*npz*pz))+(((-0.02)*gclwh1_4*npz*pp*r20*(sj15*sj15)))+(((0.0005165202)*cj15*gclwh3_3*r21))+((cj15*gclwh6_8*pp*r21*r22))+(((0.1399930041)*cj15*gclwh14_3*pz*r21))+((gclwh10_3*pp*pz*r22*sj15))+(((-1.0)*cj15*gclwh12_4*r20*(pp*pp)))+(((-0.0096595172829)*gclwh1_3*r20*sj15))+(((-0.052472839504589)*cj15*gclwh8_3*r20*r22))+((cj15*gclwh8_10*npz*pp*r20))+(((-0.0590405046)*gclwh14_10*rxp0_2))+(((0.002803860082)*gclwh8_4*npz*r20*sj15))+(((-0.104945679009178)*cj15*gclwh6_4*npz*r21))+(((-0.001399930041)*gclwh1_3*r20*r22*(sj15*sj15)))+(((-0.000963180554)*cj15*gclwh4_4*rxp2_2))+(((0.000149716)*gclwh14_4*npz*r21*(sj15*sj15)))+(((-0.138)*gclwh6_3*npy*pz))+(((-7.4858e-5)*gclwh12_3*r20*r22*(sj15*sj15)))+(((0.74858)*gclwh8_8*r22*rxp1_2*(cj15*cj15)))+(((0.2799860082)*cj15*gclwh4_3*r22*rxp2_2*sj15))+(((0.05165202)*cj15*gclwh6_3*rxp0_2))+(((-0.0149716)*cj15*gclwh3_4*npz*rxp0_2))+(((0.02)*cj15*gclwh6_8*r22*rxp0_2*sj15))+(((-2.0)*cj15*gclwh6_8*npy*pz*r22))+((cj15*gclwh6_14*pp*r21*rxp2_2))+(((-0.74858)*cj15*gclwh12_10*npz*rxp1_2))+(((-0.0074858)*cj15*gclwh12_14*r20*rxp2_2*sj15))+(((-0.1401930041)*cj15*gclwh6_10*npz*r21))+(((-0.0074858)*gclwh4_3*r22*rxp2_2*(cj15*cj15)))+(((0.0074858)*gclwh12_3*r22*rxp1_2*sj15))+(((-0.005603720164)*gclwh1_4*npz*r20*(cj15*cj15)))+(((0.0004)*gclwh1_4*npz*rxp1_2*sj15))+(((-0.02)*cj15*gclwh6_10*npz*rxp0_2*sj15))+(((0.37429)*cj15*gclwh3_3*pp*r21*r22*sj15))+(((-0.036050884955666)*gclwh14_4*rxp0_2))+(((-1.0)*cj15*gclwh8_8*pp*r20*r22))+(((-0.02)*gclwh3_3*pz*rxp0_2))+(((-0.005603720164)*gclwh10_4*npz*r22*(cj15*cj15)))+(((0.74858)*pz))+(((-0.011041248233367)*cj15*gclwh12_10*r20))+(((-1.0)*gclwh10_4*r22*sj15*(pp*pp)))+(((-0.01)*gclwh10_3*pp*(r22*r22)*(sj15*sj15)))+(((0.000149716)*gclwh12_4*npz*r20*(sj15*sj15)))+(((0.0074858)*cj15*gclwh14_10*npz*r21*sj15))+(((-0.138)*gclwh1_3*npx*pz*sj15))+(((-0.000590405046)*gclwh12_10*r20*sj15))+(((-1.49716)*cj15*gclwh8_4*npx*npz*pz))+(((-0.37429)*cj15*gclwh10_3*pp*sj15*(r22*r22)))+(((-0.0004)*gclwh3_4*npz*rxp0_2*sj15))+(((-0.001399930041)*gclwh3_3*r21*r22*(sj15*sj15)))+(((0.05165202)*gclwh12_3*rxp1_2))+(((-0.07887)*gclwh8_10*pp*r20))+(((-0.00138)*gclwh1_3*rxp1_2))+(((0.02)*cj15*gclwh14_3*npy*pz*r22*sj15))+(((-2.0)*gclwh1_4*npx*pp*pz*sj15))+(((1.49716)*cj15*gclwh3_4*npy*npz*pz*sj15))+(((0.02)*gclwh8_4*pp*rxp1_2*sj15))+(((-0.74858)*cj15*gclwh14_14*rxp0_2*rxp2_2))+(((0.02)*gclwh8_4*npz*pp*r20*sj15))+(((-0.00674192696225811)*gclwh1_4*r20*sj15))+(((0.002799860082)*gclwh10_4*npz*r22*(sj15*sj15)))+(((0.0149716)*gclwh4_4*npz*rxp2_2*(cj15*cj15)))+(((0.1399930041)*gclwh12_10*npz*r20*(cj15*cj15)))+(((2.0)*gclwh14_8*npy*pz*r22*(cj15*cj15)))+(((-0.02)*gclwh10_4*pp*pz))+(((-0.02)*gclwh6_3*pz*rxp0_2*sj15))+(((0.0149716)*cj15*gclwh6_3*r22*rxp0_2*sj15))+(((0.02)*cj15*gclwh10_10*npz*pz))+(((0.02)*gclwh10_3*(pz*pz)))+(((1.49716)*cj15*gclwh1_4*npx*npz*pz*sj15))+(((0.74858)*cj15*gclwh4_8*r22*rxp2_2*sj15))+(((-0.0918339764)*gclwh3_4*pp*r21*sj15))+(((-2.0)*cj15*gclwh12_3*npx*(pz*pz)))+(((-0.0015774)*gclwh10_10*pz))+(((2.0)*cj15*gclwh8_14*npx*pz*rxp2_2))+(((0.0074858)*gclwh14_3*pz*r21*sj15))+(((2.0)*gclwh14_14*npy*pz*rxp2_2*(cj15*cj15)))+(((0.069)*gclwh3_3*pp*r21*sj15))+((gclwh3_4*r21*sj15*(pp*pp)))+(((0.74858)*cj15*gclwh8_4*pp*rxp1_2))+(((-0.1399930041)*cj15*gclwh10_14*r22*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh3_4*npz*pp*r21*sj15))+(((0.0074858)*gclwh10_8*(cj15*cj15)*(r22*r22)))+(((0.0074858)*cj15*gclwh10_4*pp*r22))+(((0.138)*cj15*gclwh12_3*npx*pz))+(((-0.37429)*cj15*gclwh8_3*pp*r20*r22))+(((0.01)*gclwh6_3*pp*r21*r22*sj15))+(((0.0074858)*cj15*gclwh1_4*pp*r20))+(((0.74858)*cj15*gclwh12_14*rxp1_2*rxp2_2))+(((-2.0)*cj15*npz*pz))+(((0.0149716)*cj15*gclwh10_4*npz*pz))+(((-0.0074858)*cj15*gclwh12_8*r20*r22*sj15))+(((0.1399930041)*cj15*gclwh10_10*npz*r22*sj15))+(((0.000590405046)*cj15*gclwh10_10*r22))+(((-0.138)*gclwh3_3*npy*pz*sj15))+(((0.104646247009178)*cj15*gclwh1_4*npz*r20*sj15))+(((-0.001399930041)*gclwh10_3*(r22*r22)*(sj15*sj15)))+(((-0.02)*gclwh1_4*pp*rxp1_2))+(((0.000963180554)*gclwh6_4*rxp0_2*sj15))+(((0.0590405046)*cj15*gclwh6_10*rxp0_2))+(((-2.0)*cj15*gclwh14_3*npy*(pz*pz)))+(((-0.002803860082)*gclwh6_4*npz*r21*sj15))+(((-0.00674192696225811)*gclwh3_4*r21*sj15))+(((-0.0002)*gclwh1_3*r22*rxp1_2*sj15))+(((-0.01)*gclwh8_3*pp*r20*r22*sj15))+(((-0.0074858)*cj15*gclwh1_3*pz*r20))+(((-1.0)*gclwh1_3*pp*pz*r20*sj15))+(((0.00036050884955666)*cj15*gclwh10_4*r22))+(((-2.0)*gclwh6_4*npy*pp*pz))+(((-0.02)*gclwh3_4*npz*pp*r21*(sj15*sj15)))+(((-2.0)*gclwh8_3*npx*(pz*pz)))+(((0.1401930041)*cj15*gclwh6_8*r21*r22))+(((-1.0)*cj15*gclwh8_14*pp*r20*rxp2_2))+((gclwh8_3*pp*pz*r20))+(((0.138)*gclwh10_3*npz*pz*sj15))+(((-0.1881520318)*cj15*gclwh14_4*pp*r21))+(((-0.02)*cj15*gclwh8_10*npz*rxp1_2*sj15))+(((-0.0963180554)*gclwh6_4*npy*pz))+(((0.000963180554)*gclwh3_4*rxp0_2))+(((0.2801860082)*gclwh6_3*r22*rxp0_2*(cj15*cj15)))+(((0.001401930041)*gclwh6_3*r21*r22*sj15))+(((0.1397930041)*gclwh10_3*pz*r22*sj15))+(((2.0)*cj15*gclwh8_8*npx*pz*r22))+(((-0.0963180554)*gclwh3_4*npy*pz*sj15))+(((0.0149716)*cj15*gclwh8_3*r22*rxp1_2*sj15))+(((-1.0)*cj15*gclwh10_8*pp*sj15*(r22*r22)))+(((-0.069)*gclwh8_3*pp*r20))+(((-2.0)*gclwh10_3*npz*sj15*(pz*pz)))+(((0.008403580246)*cj15*gclwh14_4*npz*r21*sj15))+(((-0.000590405046)*gclwh14_10*r21*sj15))+(((-1.0)*gclwh14_8*pp*r21*r22*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh3_3*pz*r21))+(((0.104646247009178)*cj15*gclwh3_4*npz*r21*sj15))+(((-0.0299432)*cj15*gclwh6_4*npz*rxp0_2*sj15))+((gclwh6_4*r21*(pp*pp)))+(((0.0005165202)*cj15*gclwh10_3*r22))+(((0.02)*gclwh10_3*npz*pz*r22*(sj15*sj15)))+(((-0.0096595172829)*gclwh3_3*r21*sj15))+(((2.0)*cj15*gclwh14_4*npy*pp*pz))+(((-0.0149716)*cj15*gclwh10_3*pz*r22))+(((0.02)*gclwh3_4*pp*rxp0_2))+(((0.002799860082)*gclwh3_4*npz*r21*(sj15*sj15)))+(((-0.069)*gclwh10_3*pp*r22*sj15))+(((-0.02)*cj15*gclwh4_4*pp*rxp2_2))+(((2.0)*gclwh12_14*npx*pz*rxp2_2*(cj15*cj15)))+(((-0.0074858)*gclwh12_4*pp*r20*sj15))+(((0.0002)*gclwh6_3*r22*rxp0_2*(sj15*sj15)))+(((0.069)*gclwh1_3*pp*r20*sj15))+(((-2.0)*gclwh3_4*npy*pp*pz*sj15))+(((-0.07887)*cj15*gclwh12_10*pp*r20))+(((-0.74858)*cj15*gclwh6_4*npz*pp*r21))+(((-0.011057022233367)*gclwh8_10*r20))+(((0.000963180554)*gclwh8_4*rxp1_2*sj15))+(((-1.49716)*gclwh12_4*npx*npz*pz*(cj15*cj15)))+(((-1.49716)*gclwh14_4*npy*npz*pz*(cj15*cj15)))+(((-0.00675155876779811)*gclwh8_4*r20))+(((-2.0)*cj15*gclwh6_14*npy*pz*rxp2_2))+(((0.05165202)*cj15*gclwh8_3*rxp1_2))+(((-0.001401930041)*gclwh8_3*r20*r22*sj15))+(((0.002801860082)*gclwh1_3*r20*r22*(cj15*cj15)))+((cj15*pp*r22))+(((0.036050884955666)*cj15*gclwh6_4*rxp0_2))+(((-1.0)*gclwh8_4*r20*(pp*pp)))+(((-0.04)*gclwh8_4*npx*npz*pz*sj15))+(((0.74858)*gclwh8_14*rxp1_2*rxp2_2*(cj15*cj15)))+(((-1.0)*gclwh6_3*pp*pz*r21))+(((0.002801860082)*gclwh3_3*r21*r22*(cj15*cj15)))+(((-0.02)*cj15*gclwh10_8*pz*r22))+(((-0.1881520318)*cj15*gclwh12_4*pp*r20))+(((-0.0074858)*gclwh14_3*r22*rxp0_2*sj15))+(((-0.5603720164)*gclwh8_4*npz*rxp1_2*(cj15*cj15)))+(((-0.1399930041)*gclwh14_14*r21*rxp2_2*(cj15*cj15)))+((cj15*gclwh10_10*npz*pp*r22*sj15))+(((0.036050884955666)*gclwh12_4*rxp1_2))+(((0.0074858)*cj15*gclwh3_4*pp*r21))+(((-0.011041248233367)*gclwh10_10*r22*sj15))+(((0.138)*cj15*gclwh14_3*npy*pz))+(((-1.0)*gclwh3_3*pp*pz*r21*sj15))+(((-0.00674192696225811)*cj15*gclwh12_4*r20))+(((0.02)*gclwh1_3*pz*rxp1_2))+(((0.74858)*gclwh6_14*rxp0_2*rxp2_2*(cj15*cj15)))+(((0.00138)*gclwh3_3*rxp0_2))+(((2.0)*gclwh1_3*npx*sj15*(pz*pz)))+(((-0.0096595172829)*cj15*gclwh12_3*r20))+(((-0.74858)*cj15*gclwh6_3*npy*pz*r22))+(((-0.2801860082)*cj15*gclwh14_3*r22*rxp0_2))+(((0.74858)*gclwh14_3*npy*pz*r22*(cj15*cj15)))+((gclwh1_4*r20*sj15*(pp*pp)))+(((-0.052323123504589)*cj15*gclwh3_3*r21*r22*sj15))+(((-0.04)*cj15*gclwh12_4*npx*npz*pz*sj15))+(((0.74858)*gclwh12_4*pp*rxp1_2))+(((0.104646247009178)*cj15*gclwh10_4*npz*r22*sj15))+((cj15*gclwh12_3*pp*pz*r20)));
IkReal x565=(gclwh10_14*pz);
IkReal x566=(gclwh10_2*pz);
IkReal x567=(gclwh12_14*rxp1_2);
IkReal x568=((1.49716)*rxp1_2);
IkReal x569=(gclwh14_14*rxp0_2);
IkReal x570=((1.49716)*rxp0_2);
IkReal x571=(gclwh6_14*r21);
IkReal x572=(gclwh6_2*r21);
IkReal x573=(gclwh8_14*r20);
IkReal x574=(gclwh8_2*r20);
IkReal x575=(cj15*gclwh10_14*r22);
IkReal x576=(cj15*gclwh12_14*r20);
IkReal x577=((0.2799860082)*cj15);
IkReal x578=(gclwh12_2*r20);
IkReal x579=(cj15*gclwh14_14*r21);
IkReal x580=(gclwh14_2*r21);
IkReal x581=(gclwh4_2*rxp2_2);
IkReal x582=(cj15*gclwh6_14*rxp0_2);
IkReal x583=(cj15*gclwh8_14*rxp1_2);
IkReal x584=(gclwh10_14*r22*sj15);
IkReal x585=(gclwh10_2*r22*sj15);
IkReal x586=(gclwh12_14*r20*sj15);
IkReal x587=((0.0149716)*sj15);
IkReal x588=(gclwh14_14*r21*sj15);
IkReal x589=(gclwh6_14*npy*pz);
IkReal x590=(gclwh6_14*pp*r21);
IkReal x591=(gclwh6_14*rxp0_2*sj15);
IkReal x592=((4.0)*npy*pz);
IkReal x593=((2.0)*pp);
IkReal x594=((0.04)*sj15);
IkReal x595=(gclwh8_14*npx*pz);
IkReal x596=(gclwh8_14*pp*r20);
IkReal x597=(gclwh8_14*rxp1_2*sj15);
IkReal x598=((4.0)*npx*pz);
IkReal x599=x228;
IkReal x600=x229;
IkReal x601=((2.0)*cj15*pp);
IkReal x602=x231;
IkReal x603=x232;
IkReal x604=x233;
IkReal x605=x234;
op[62]=(((x585*x593))+(((-1.18168)*x604))+(((-4.0)*npz*sj15*x566))+(((0.082831634542444)*x573))+(((-1.0)*gclwh12_2*x568))+(((0.04)*x566))+(((0.04)*cj15*x581))+(((-1.18168)*x599))+(((-0.0118168)*x591))+((x578*x601))+(((-1.18168)*x602))+(((0.004422910072)*x586))+(((-1.0)*cj15*gclwh8_2*x568))+(((0.2803860082)*x574))+(((0.59084)*x605))+(((-1.0)*gclwh8_2*x598))+(((0.082713466542444)*x579))+((x580*x587))+(((-1.49716)*sj15*x581))+(((-1.0)*x572*x593))+((gclwh6_2*x592))+(((-0.2803860082)*x572))+(((-0.0149716)*cj15*gclwh10_2*r22))+((x574*x593))+(((0.004422910072)*x588))+(((-0.4422910072)*x567))+(((1.18168)*x589))+(((0.4422910072)*x569))+(((0.59084)*x600))+(((0.082713466542444)*x576))+(((0.59084)*x596))+((x577*x580))+(((-0.0118168)*x597))+(((-1.0)*cj15*gclwh14_2*x592))+((x580*x601))+(((-1.0)*cj15*gclwh6_2*x570))+(((-1.18168)*x595))+(((-1.0)*cj15*gclwh12_2*x598))+(((0.2799860082)*x585))+(((-0.082831634542444)*x571))+(((-0.4422910072)*x583))+(((-1.0)*gclwh8_2*rxp1_2*x594))+(((0.0118168)*x565))+((x577*x578))+((gclwh14_2*x570))+(((0.082713466542444)*x584))+(((0.59084)*x603))+(((-0.4422910072)*x582))+(((-1.0)*gclwh6_2*rxp0_2*x594))+(((-0.59084)*x590))+(((-0.004422910072)*x575))+((x578*x587)));
op[63]=((((0.138)*x603))+(((0.10330404)*x569))+(((-0.0010330404)*x575))+(((0.138)*x596))+(((0.138)*x605))+(((-0.10330404)*x582))+(((0.0193466345658)*x573))+(((0.0193190345658)*x584))+(((-0.276)*x604))+(((-0.276)*x595))+(((0.0193190345658)*x579))+(((-0.276)*x602))+(((0.00276)*x565))+(((0.0010330404)*x588))+(((-0.0193466345658)*x571))+(((-0.00276)*x591))+(((-0.00276)*x597))+(((0.0193190345658)*x576))+(((-0.276)*x599))+(((0.276)*x589))+(((0.138)*x600))+(((-0.138)*x590))+(((-0.10330404)*x567))+(((-0.10330404)*x583))+(((0.0010330404)*x586)));
op[64]=((0.0825119764)+(((-1.0)*gclwh10_8*pp*r22*sj15))+(((0.0005165202)*cj15*gclwh10_10*r22))+(((0.2211455036)*gclwh4_12*rxp2_2*sj15))+(((-0.069)*gclwh10_10*pp*r22*sj15))+(((0.1401930041)*gclwh6_8*r21))+(((-0.0096595172829)*cj15*gclwh14_10*r21))+(((0.59084)*gclwh10_12*npz*pz*sj15))+(((-1.0)*gclwh8_8*pp*r20))+(((-1.0)*cj15*gclwh14_8*pp*r21))+(((0.74858)*cj15*gclwh6_8*rxp0_2))+(((-0.041415817271222)*gclwh8_12*r20))+(((-0.2211455036)*gclwh14_12*rxp0_2))+(((0.05165202)*cj15*gclwh6_10*rxp0_2))+(((-0.29542)*gclwh8_12*pp*r20))+(((0.2211455036)*cj15*gclwh6_12*rxp0_2))+(((0.2211455036)*cj15*gclwh8_12*rxp1_2))+(((0.0096733172829)*gclwh6_10*r21))+(((-0.041356733271222)*cj15*gclwh12_12*r20))+(((0.00138)*gclwh6_10*rxp0_2*sj15))+(((0.05165202)*cj15*gclwh8_10*rxp1_2))+(((-0.1399930041)*cj15*gclwh12_8*r20))+(((0.138)*cj15*gclwh12_10*npx*pz))+(((0.59084)*gclwh8_12*npx*pz))+(((0.59084)*cj15*gclwh14_12*npy*pz))+(((0.2211455036)*gclwh12_12*rxp1_2))+(((-0.069)*cj15*gclwh12_10*pp*r20))+(((0.138)*gclwh8_10*npx*pz))+(((2.0)*gclwh8_8*npx*pz))+(((-0.29542)*cj15*gclwh14_12*pp*r21))+(((-0.0096733172829)*gclwh8_10*r20))+(((-0.0059084)*gclwh10_12*pz))+(((-2.0)*gclwh6_8*npy*pz))+(((-0.0005165202)*gclwh14_10*r21*sj15))+(((0.0059084)*gclwh6_12*rxp0_2*sj15))+(((-0.0074858)*gclwh12_8*r20*sj15))+(((2.0)*cj15*gclwh14_8*npy*pz))+(((0.069)*gclwh6_10*pp*r21))+(((-0.041356733271222)*gclwh10_12*r22*sj15))+(((-0.069)*cj15*gclwh14_10*pp*r21))+(((0.74858)*gclwh12_8*rxp1_2))+(((2.0)*cj15*gclwh12_8*npx*pz))+(((-1.0)*cj15*gclwh12_8*pp*r20))+(((0.74858)*cj15*gclwh8_8*rxp1_2))+(((-0.1399930041)*gclwh10_8*r22*sj15))+(((-0.05165202)*gclwh14_10*rxp0_2))+(((-0.0059084)*cj15*gclwh4_12*rxp2_2))+(((-0.59084)*gclwh6_12*npy*pz))+(((-0.0005165202)*gclwh12_10*r20*sj15))+(((0.138)*cj15*gclwh14_10*npy*pz))+(((-0.74858)*gclwh14_8*rxp0_2))+(((-0.138)*gclwh6_10*npy*pz))+(((-0.1399930041)*cj15*gclwh14_8*r21))+(((-0.29542)*cj15*gclwh12_12*pp*r20))+(((-0.0096595172829)*gclwh10_10*r22*sj15))+(((0.02)*gclwh8_8*rxp1_2*sj15))+(((-0.002211455036)*gclwh12_12*r20*sj15))+(((-0.29542)*gclwh10_12*pp*r22*sj15))+((gclwh6_8*pp*r21))+(((0.002211455036)*cj15*gclwh10_12*r22))+(((0.0074858)*cj15*gclwh10_8*r22))+(((0.05165202)*gclwh12_10*rxp1_2))+(((0.138)*gclwh10_10*npz*pz*sj15))+(((0.29542)*gclwh6_12*pp*r21))+(((-0.002211455036)*gclwh14_12*r21*sj15))+(((0.041415817271222)*gclwh6_12*r21))+(((0.59084)*cj15*gclwh12_12*npx*pz))+(((-0.041356733271222)*cj15*gclwh14_12*r21))+(((-0.00138)*gclwh10_10*pz))+(((-0.069)*gclwh8_10*pp*r20))+(((0.02)*gclwh6_8*rxp0_2*sj15))+(((-0.0074858)*gclwh14_8*r21*sj15))+(((-0.1401930041)*gclwh8_8*r20))+(((-0.02)*gclwh10_8*pz))+(((0.74858)*gclwh4_8*rxp2_2*sj15))+(((0.0059084)*gclwh8_12*rxp1_2*sj15))+(((2.0)*gclwh10_8*npz*pz*sj15))+(((0.00138)*gclwh8_10*rxp1_2*sj15))+(((-0.0096595172829)*cj15*gclwh12_10*r20))+(((-0.02)*cj15*gclwh4_8*rxp2_2)));
op[65]=((0.04076796)+(((0.00036050884955666)*cj15*gclwh3_4*r21))+(((-0.74858)*cj15*gclwh1_3*npx*pz*r22*sj15))+(((-0.00674192696225811)*gclwh10_4*r22*sj15))+(((-0.74858)*cj15*gclwh8_3*pz*rxp1_2))+(((-0.00036050884955666)*gclwh14_4*r21*sj15))+(((0.74858)*cj15*gclwh10_3*npz*pz*r22*sj15))+(((0.02)*cj15*gclwh8_14*rxp1_2*rxp2_2*sj15))+(((0.052472839504589)*cj15*gclwh6_3*r21*r22))+(((-0.052397981504589)*gclwh12_3*r20*r22*(cj15*cj15)))+(((-0.0074858)*gclwh10_10*npz*r22*(cj15*cj15)))+(((-0.1399930041)*gclwh12_14*r20*rxp2_2*(cj15*cj15)))+(((0.0074858)*cj15*gclwh12_10*npz*r20*sj15))+((gclwh14_10*npz*pp*r21*(cj15*cj15)))+(((0.0963180554)*cj15*gclwh14_4*npy*pz))+(((-0.04)*gclwh10_4*pz*(npz*npz)*(sj15*sj15)))+(((0.74858)*gclwh6_8*r22*rxp0_2*(cj15*cj15)))+(((2.0)*gclwh12_8*npx*pz*r22*(cj15*cj15)))+(((-0.5603720164)*cj15*gclwh12_4*npz*rxp1_2))+(((-0.000963180554)*gclwh10_4*pz))+(((-0.37429)*gclwh12_3*pp*r20*r22*(cj15*cj15)))+(((0.069)*cj15*gclwh14_3*pp*r21))+(((0.74858)*cj15*gclwh12_8*r22*rxp1_2))+(((-0.74858)*gclwh8_10*npz*rxp1_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh1_3*r22*rxp1_2))+(((-0.02)*gclwh4_8*r22*rxp2_2*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh14_14*r21*rxp2_2*sj15))+(((0.0074858)*gclwh4_3*r22*rxp2_2*(sj15*sj15)))+(((0.02)*cj15*gclwh14_4*npz*pp*r21*sj15))+(((-0.0096733172829)*gclwh6_3*r21))+(((0.0590405046)*cj15*gclwh8_10*rxp1_2))+(((0.138)*gclwh1_3*npx*pz*sj15))+(((-1.0)*gclwh12_8*pp*r20*r22*(cj15*cj15)))+(((0.15774)*cj15*gclwh14_10*npy*pz))+(((0.74858)*cj15*gclwh6_4*pp*rxp0_2))+(((0.104795963009178)*gclwh14_4*npz*r21*(cj15*cj15)))+(((0.104945679009178)*cj15*gclwh8_4*npz*r20))+(((0.15774)*cj15*gclwh12_10*npx*pz))+(((0.74858)*gclwh14_3*pz*rxp0_2))+(((0.002799860082)*gclwh1_4*npz*r20*(sj15*sj15)))+(((-1.0)*cj15*gclwh14_4*r21*(pp*pp)))+((gclwh12_10*npz*pp*r20*(cj15*cj15)))+(((-0.000963180554)*gclwh1_4*rxp1_2))+(((-0.02)*cj15*gclwh10_14*pz*rxp2_2))+(((-0.07887)*gclwh10_10*pp*r22*sj15))+(((-0.0074858)*cj15*gclwh14_8*r21*r22*sj15))+(((0.74858)*gclwh12_3*npx*pz*r22*(cj15*cj15)))+(((2.0)*cj15*gclwh10_14*npz*pz*rxp2_2*sj15))+(((-1.0)*cj15*gclwh6_10*npz*pp*r21))+(((-0.052397981504589)*gclwh14_3*r21*r22*(cj15*cj15)))+(((0.0005165202)*gclwh14_3*r21*sj15))+(((-0.74858)*gclwh4_3*pz*rxp2_2*sj15))+(((0.0149716)*gclwh14_4*npz*rxp0_2*sj15))+(((2.0)*gclwh10_4*npz*pp*pz*sj15))+((cj15*gclwh14_3*pp*pz*r21))+(((0.069)*gclwh10_3*pp*r22*sj15))+(((-1.0)*cj15*gclwh10_14*pp*r22*rxp2_2*sj15))+(((0.02)*cj15*gclwh6_14*rxp0_2*rxp2_2*sj15))+(((0.02)*gclwh8_3*npx*pz*r22*sj15))+(((0.138)*gclwh3_3*npy*pz*sj15))+(((-0.0299432)*cj15*gclwh8_4*npz*rxp1_2*sj15))+(((-0.15774)*gclwh6_10*npy*pz))+(((-0.37429)*gclwh14_3*pp*r21*r22*(cj15*cj15)))+(((-2.0)*gclwh14_10*npy*npz*pz*(cj15*cj15)))+(((-2.0)*gclwh12_10*npx*npz*pz*(cj15*cj15)))+(((-0.05165202)*cj15*gclwh6_3*rxp0_2))+(((0.02)*cj15*gclwh4_3*pz*rxp2_2))+(((0.0074858)*cj15*gclwh3_3*r22*rxp0_2))+(((0.02)*cj15*gclwh12_3*npx*pz*r22*sj15))+(((0.0002)*gclwh3_3*r22*rxp0_2*sj15))+(((-0.5599720164)*cj15*gclwh4_4*npz*rxp2_2*sj15))+(((0.00036050884955666)*cj15*gclwh1_4*r20))+(((0.74858)*gclwh4_4*pp*rxp2_2*sj15))+(((-0.0005165202)*cj15*gclwh10_3*r22))+(((-0.0918339764)*gclwh1_4*pp*r20*sj15))+(((0.74858)*cj15*gclwh8_4*npz*pp*r20))+(((-2.0)*cj15*gclwh8_10*npx*npz*pz))+(((-0.07887)*cj15*gclwh14_10*pp*r21))+(((-0.0963180554)*gclwh1_4*npx*pz*sj15))+(((-0.74858)*cj15*gclwh6_3*pz*rxp0_2))+(((2.0)*cj15*gclwh12_4*npx*pp*pz))+(((0.74858)*cj15*gclwh10_4*npz*pp*r22*sj15))+(((-2.0)*cj15*gclwh10_10*pz*sj15*(npz*npz)))+(((0.1401930041)*cj15*gclwh8_10*npz*r20))+(((0.0963180554)*cj15*gclwh12_4*npx*pz))+(((2.0)*gclwh6_3*npy*(pz*pz)))+(((2.0)*gclwh3_3*npy*sj15*(pz*pz)))+(((-0.74858)*gclwh12_3*pz*rxp1_2))+(((0.02)*gclwh10_4*npz*pp*r22*(sj15*sj15)))+(((-0.02)*gclwh6_3*npy*pz*r22*sj15))+(((-0.02)*gclwh1_3*npx*pz*r22*(sj15*sj15)))+(((-0.0004)*gclwh6_4*npz*rxp0_2*(sj15*sj15)))+(((-0.1401930041)*cj15*gclwh8_14*r20*rxp2_2))+(((0.104795963009178)*gclwh12_4*npz*r20*(cj15*cj15)))+(((-0.1399930041)*cj15*gclwh10_8*sj15*(r22*r22)))+(((-0.0149716)*gclwh4_4*npz*rxp2_2*(sj15*sj15)))+(((-0.02)*gclwh3_3*npy*pz*r22*(sj15*sj15)))+(((-7.4858e-5)*gclwh14_3*r21*r22*(sj15*sj15)))+(((0.1401930041)*cj15*gclwh6_14*r21*rxp2_2))+(((-0.74858)*cj15*gclwh14_8*r22*rxp0_2))+(((-0.004201790123)*cj15*gclwh12_3*r20*r22*sj15))+(((0.02)*cj15*gclwh12_4*npz*pp*r20*sj15))+(((0.011057022233367)*gclwh6_10*r21))+(((-0.1399930041)*gclwh12_8*r20*r22*(cj15*cj15)))+(((-0.01)*cj15*gclwh14_3*pp*r21*r22*sj15))+(((0.15774)*gclwh10_10*npz*pz*sj15))+(((0.1401930041)*gclwh8_3*pz*r20))+(((0.37429)*cj15*gclwh6_3*pp*r21*r22))+(((0.1399930041)*cj15*gclwh12_3*pz*r20))+(((0.2801860082)*cj15*gclwh12_3*r22*rxp1_2))+(((-0.0074858)*r22*sj15))+(((0.01)*gclwh1_3*pp*r20*r22*(sj15*sj15)))+(((0.1399930041)*gclwh3_3*pz*r21*sj15))+(((0.02)*gclwh6_4*pp*rxp0_2*sj15))+(((-1.49716)*cj15*gclwh10_4*pz*sj15*(npz*npz)))+(((-0.0074858)*gclwh14_4*pp*r21*sj15))+(((0.04)*gclwh6_4*npy*npz*pz*sj15))+(((0.0015774)*gclwh6_10*rxp0_2*sj15))+(((0.02)*cj15*gclwh8_8*r22*rxp1_2*sj15))+(((0.002801860082)*gclwh10_3*(cj15*cj15)*(r22*r22)))+(((-0.0149716)*gclwh12_4*npz*rxp1_2*sj15))+(((-0.02)*gclwh6_4*npz*pp*r21*sj15))+(((-0.1401930041)*gclwh6_3*pz*r21))+(((-0.069)*gclwh3_3*pp*r21*sj15))+(((-0.069)*gclwh6_3*pp*r21))+(((0.1883520318)*gclwh6_4*pp*r21))+(((-0.74858)*gclwh6_10*npz*rxp0_2*(cj15*cj15)))+(((0.0967180554)*gclwh10_4*npz*pz*sj15))+(((-0.011041248233367)*cj15*gclwh14_10*r21))+(((-0.052323123504589)*cj15*gclwh10_3*sj15*(r22*r22)))+(((0.74858)*cj15*gclwh8_3*npx*pz*r22))+(((0.1399930041)*gclwh1_3*pz*r20*sj15))+(((-0.5603720164)*gclwh6_4*npz*rxp0_2*(cj15*cj15)))+(((-0.00138)*gclwh3_3*rxp0_2))+(((0.0096595172829)*gclwh1_3*r20*sj15))+(((-0.04)*cj15*gclwh14_4*npy*npz*pz*sj15))+(((0.15774)*gclwh8_10*npx*pz))+(((-0.1401930041)*cj15*gclwh8_8*r20*r22))+(((0.0005165202)*gclwh12_3*r20*sj15))+(((-0.74858)*cj15*gclwh3_3*npy*pz*r22*sj15))+(((0.74858)*gclwh12_4*npz*pp*r20*(cj15*cj15)))+(((0.00675155876779811)*gclwh6_4*r21))+(((0.0096595172829)*gclwh3_3*r21*sj15))+(((0.0963180554)*gclwh8_4*npx*pz))+(((0.036050884955666)*gclwh4_4*rxp2_2*sj15))+(((-0.004201790123)*cj15*gclwh14_3*r21*r22*sj15))+(((-0.74858)*gclwh14_4*pp*rxp0_2))+(((0.04)*gclwh1_4*npx*npz*pz*(sj15*sj15)))+(((0.5603720164)*cj15*gclwh14_4*npz*rxp0_2))+(((-0.00674192696225811)*cj15*gclwh14_4*r21))+(((0.74858)*cj15*gclwh14_10*npz*rxp0_2))+(((0.07887)*gclwh6_10*pp*r21))+(((-0.74858)*cj15*gclwh1_4*npz*pp*r20*sj15))+(((-0.1399930041)*gclwh14_8*r21*r22*(cj15*cj15)))+(((0.2801860082)*gclwh8_3*r22*rxp1_2*(cj15*cj15)))+(((0.138)*gclwh6_3*npy*pz))+(((2.0)*cj15*gclwh10_8*npz*pz*r22*sj15))+(((-0.0004)*gclwh8_4*npz*rxp1_2*(sj15*sj15)))+(((0.0074858)*gclwh10_14*r22*rxp2_2*(cj15*cj15)))+(((0.04)*gclwh3_4*npy*npz*pz*(sj15*sj15)))+(((0.01)*gclwh3_3*pp*r21*r22*(sj15*sj15)))+(((-0.005603720164)*gclwh3_4*npz*r21*(cj15*cj15)))+(((-0.1883520318)*gclwh8_4*pp*r20))+(((0.008403580246)*cj15*gclwh12_4*npz*r20*sj15))+(((-0.069)*gclwh1_3*pp*r20*sj15))+(((0.0149716)*cj15*gclwh1_4*npz*rxp1_2))+(((-0.01)*cj15*gclwh12_3*pp*r20*r22*sj15))+(((0.069)*gclwh8_3*pp*r20))+(((-0.1399930041)*cj15*r22))+(((0.0002)*gclwh8_3*r22*rxp1_2*(sj15*sj15)))+(((-0.052323123504589)*cj15*gclwh1_3*r20*r22*sj15))+(((2.0)*gclwh8_4*npx*pp*pz))+(((0.0590405046)*gclwh12_10*rxp1_2))+(((0.37429)*cj15*gclwh1_3*pp*r20*r22*sj15))+(((0.1399930041)*gclwh14_10*npz*r21*(cj15*cj15)))+(((-0.02)*gclwh8_3*pz*rxp1_2*sj15))+(((-1.0)*gclwh14_14*pp*r21*rxp2_2*(cj15*cj15)))+(((-0.1881520318)*gclwh10_4*pp*r22*sj15))+(((-0.00036050884955666)*gclwh12_4*r20*sj15))+(((-1.0)*gclwh12_14*pp*r20*rxp2_2*(cj15*cj15)))+(((0.036050884955666)*cj15*gclwh8_4*rxp1_2))+(((2.0)*cj15*gclwh6_10*npy*npz*pz))+(((0.74858)*gclwh14_4*npz*pp*r21*(cj15*cj15)))+(((0.0015774)*gclwh8_10*rxp1_2*sj15))+(((0.0074858)*gclwh12_3*pz*r20*sj15))+(((1.49716)*cj15*gclwh6_4*npy*npz*pz))+(((-0.02)*gclwh1_4*npz*pp*r20*(sj15*sj15)))+((cj15*gclwh6_8*pp*r21*r22))+(((0.1399930041)*cj15*gclwh14_3*pz*r21))+((gclwh10_3*pp*pz*r22*sj15))+(((-1.0)*cj15*gclwh12_4*r20*(pp*pp)))+(((-0.052472839504589)*cj15*gclwh8_3*r20*r22))+((cj15*gclwh8_10*npz*pp*r20))+(((-0.0590405046)*gclwh14_10*rxp0_2))+(((0.002803860082)*gclwh8_4*npz*r20*sj15))+(((0.0096595172829)*gclwh10_3*r22*sj15))+(((-0.104945679009178)*cj15*gclwh6_4*npz*r21))+(((-0.001399930041)*gclwh1_3*r20*r22*(sj15*sj15)))+(((-0.000963180554)*cj15*gclwh4_4*rxp2_2))+(((0.000149716)*gclwh14_4*npz*r21*(sj15*sj15)))+(((-7.4858e-5)*gclwh12_3*r20*r22*(sj15*sj15)))+(((0.74858)*gclwh8_8*r22*rxp1_2*(cj15*cj15)))+(((0.2799860082)*cj15*gclwh4_3*r22*rxp2_2*sj15))+(((-0.0149716)*cj15*gclwh3_4*npz*rxp0_2))+(((0.02)*cj15*gclwh6_8*r22*rxp0_2*sj15))+(((-2.0)*cj15*gclwh6_8*npy*pz*r22))+((cj15*gclwh6_14*pp*r21*rxp2_2))+(((-0.74858)*cj15*gclwh12_10*npz*rxp1_2))+(((-0.0074858)*cj15*gclwh12_14*r20*rxp2_2*sj15))+(((-0.1401930041)*cj15*gclwh6_10*npz*r21))+(((-0.0074858)*gclwh4_3*r22*rxp2_2*(cj15*cj15)))+(((0.0074858)*gclwh12_3*r22*rxp1_2*sj15))+(((-0.005603720164)*gclwh1_4*npz*r20*(cj15*cj15)))+(((-0.138)*gclwh8_3*npx*pz))+(((0.0004)*gclwh1_4*npz*rxp1_2*sj15))+(((-0.02)*cj15*gclwh6_10*npz*rxp0_2*sj15))+(((0.37429)*cj15*gclwh3_3*pp*r21*r22*sj15))+(((-0.036050884955666)*gclwh14_4*rxp0_2))+(((-1.0)*cj15*gclwh8_8*pp*r20*r22))+(((-0.02)*gclwh3_3*pz*rxp0_2))+(((0.0096595172829)*cj15*gclwh12_3*r20))+(((-0.005603720164)*gclwh10_4*npz*r22*(cj15*cj15)))+(((0.74858)*pz))+(((0.00138)*cj15*gclwh4_3*rxp2_2))+(((-0.011041248233367)*cj15*gclwh12_10*r20))+(((-1.0)*gclwh10_4*r22*sj15*(pp*pp)))+(((-0.01)*gclwh10_3*pp*(r22*r22)*(sj15*sj15)))+(((0.000149716)*gclwh12_4*npz*r20*(sj15*sj15)))+(((0.0074858)*cj15*gclwh14_10*npz*r21*sj15))+(((-0.000590405046)*gclwh12_10*r20*sj15))+(((0.069)*cj15*gclwh12_3*pp*r20))+(((-1.49716)*cj15*gclwh8_4*npx*npz*pz))+(((-0.37429)*cj15*gclwh10_3*pp*sj15*(r22*r22)))+(((-0.138)*cj15*gclwh12_3*npx*pz))+(((0.05165202)*gclwh14_3*rxp0_2))+(((-0.0004)*gclwh3_4*npz*rxp0_2*sj15))+(((-0.001399930041)*gclwh3_3*r21*r22*(sj15*sj15)))+(((-0.07887)*gclwh8_10*pp*r20))+(((0.02)*cj15*gclwh14_3*npy*pz*r22*sj15))+(((-2.0)*gclwh1_4*npx*pp*pz*sj15))+(((0.00138)*gclwh1_3*rxp1_2))+(((1.49716)*cj15*gclwh3_4*npy*npz*pz*sj15))+(((0.02)*gclwh8_4*pp*rxp1_2*sj15))+(((-0.74858)*cj15*gclwh14_14*rxp0_2*rxp2_2))+(((0.02)*gclwh8_4*npz*pp*r20*sj15))+(((-0.00674192696225811)*gclwh1_4*r20*sj15))+(((-0.05165202)*cj15*gclwh8_3*rxp1_2))+(((0.002799860082)*gclwh10_4*npz*r22*(sj15*sj15)))+(((0.0149716)*gclwh4_4*npz*rxp2_2*(cj15*cj15)))+(((0.1399930041)*gclwh12_10*npz*r20*(cj15*cj15)))+(((2.0)*gclwh14_8*npy*pz*r22*(cj15*cj15)))+(((0.00138)*gclwh10_3*pz))+(((-0.02)*gclwh10_4*pp*pz))+(((-0.02)*gclwh6_3*pz*rxp0_2*sj15))+(((0.0149716)*cj15*gclwh6_3*r22*rxp0_2*sj15))+(((0.02)*cj15*gclwh10_10*npz*pz))+(((0.02)*gclwh10_3*(pz*pz)))+(((1.49716)*cj15*gclwh1_4*npx*npz*pz*sj15))+(((0.74858)*cj15*gclwh4_8*r22*rxp2_2*sj15))+(((-0.0918339764)*gclwh3_4*pp*r21*sj15))+(((-2.0)*cj15*gclwh12_3*npx*(pz*pz)))+(((-0.0015774)*gclwh10_10*pz))+(((2.0)*cj15*gclwh8_14*npx*pz*rxp2_2))+(((0.0074858)*gclwh14_3*pz*r21*sj15))+(((2.0)*gclwh14_14*npy*pz*rxp2_2*(cj15*cj15)))+((gclwh3_4*r21*sj15*(pp*pp)))+(((0.74858)*cj15*gclwh8_4*pp*rxp1_2))+(((-0.1399930041)*cj15*gclwh10_14*r22*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh3_4*npz*pp*r21*sj15))+(((0.0074858)*gclwh10_8*(cj15*cj15)*(r22*r22)))+(((0.0074858)*cj15*gclwh10_4*pp*r22))+(((-0.05165202)*gclwh12_3*rxp1_2))+(((0.0096595172829)*cj15*gclwh14_3*r21))+(((-0.37429)*cj15*gclwh8_3*pp*r20*r22))+(((0.01)*gclwh6_3*pp*r21*r22*sj15))+(((0.0074858)*cj15*gclwh1_4*pp*r20))+(((0.74858)*cj15*gclwh12_14*rxp1_2*rxp2_2))+(((-2.0)*cj15*npz*pz))+(((0.0149716)*cj15*gclwh10_4*npz*pz))+(((-0.0074858)*cj15*gclwh12_8*r20*r22*sj15))+(((0.1399930041)*cj15*gclwh10_10*npz*r22*sj15))+(((0.000590405046)*cj15*gclwh10_10*r22))+(((0.104646247009178)*cj15*gclwh1_4*npz*r20*sj15))+(((-0.001399930041)*gclwh10_3*(r22*r22)*(sj15*sj15)))+(((-0.138)*cj15*gclwh14_3*npy*pz))+(((-0.02)*gclwh1_4*pp*rxp1_2))+(((0.000963180554)*gclwh6_4*rxp0_2*sj15))+(((0.0590405046)*cj15*gclwh6_10*rxp0_2))+(((-2.0)*cj15*gclwh14_3*npy*(pz*pz)))+(((-0.002803860082)*gclwh6_4*npz*r21*sj15))+(((-0.00674192696225811)*gclwh3_4*r21*sj15))+(((0.0096733172829)*gclwh8_3*r20))+(((-0.0002)*gclwh1_3*r22*rxp1_2*sj15))+(((-0.01)*gclwh8_3*pp*r20*r22*sj15))+(((-0.0074858)*cj15*gclwh1_3*pz*r20))+(((-1.0)*gclwh1_3*pp*pz*r20*sj15))+(((0.00036050884955666)*cj15*gclwh10_4*r22))+(((-2.0)*gclwh6_4*npy*pp*pz))+(((-0.02)*gclwh3_4*npz*pp*r21*(sj15*sj15)))+(((-2.0)*gclwh8_3*npx*(pz*pz)))+(((0.1401930041)*cj15*gclwh6_8*r21*r22))+(((-1.0)*cj15*gclwh8_14*pp*r20*rxp2_2))+((gclwh8_3*pp*pz*r20))+(((-0.0005165202)*cj15*gclwh1_3*r20))+(((-0.05165202)*gclwh4_3*rxp2_2*sj15))+(((-0.1881520318)*cj15*gclwh14_4*pp*r21))+(((-0.02)*cj15*gclwh8_10*npz*rxp1_2*sj15))+(((-0.0963180554)*gclwh6_4*npy*pz))+(((0.000963180554)*gclwh3_4*rxp0_2))+(((0.2801860082)*gclwh6_3*r22*rxp0_2*(cj15*cj15)))+(((0.001401930041)*gclwh6_3*r21*r22*sj15))+(((0.1397930041)*gclwh10_3*pz*r22*sj15))+(((2.0)*cj15*gclwh8_8*npx*pz*r22))+(((-0.0963180554)*gclwh3_4*npy*pz*sj15))+(((0.0149716)*cj15*gclwh8_3*r22*rxp1_2*sj15))+(((-1.0)*cj15*gclwh10_8*pp*sj15*(r22*r22)))+(((-2.0)*gclwh10_3*npz*sj15*(pz*pz)))+(((0.008403580246)*cj15*gclwh14_4*npz*r21*sj15))+(((-0.000590405046)*gclwh14_10*r21*sj15))+(((-1.0)*gclwh14_8*pp*r21*r22*(cj15*cj15)))+(((-0.0074858)*cj15*gclwh3_3*pz*r21))+(((0.104646247009178)*cj15*gclwh3_4*npz*r21*sj15))+(((-0.0299432)*cj15*gclwh6_4*npz*rxp0_2*sj15))+((gclwh6_4*r21*(pp*pp)))+(((0.02)*gclwh10_3*npz*pz*r22*(sj15*sj15)))+(((2.0)*cj15*gclwh14_4*npy*pp*pz))+(((-0.0149716)*cj15*gclwh10_3*pz*r22))+(((0.02)*gclwh3_4*pp*rxp0_2))+(((0.002799860082)*gclwh3_4*npz*r21*(sj15*sj15)))+(((-0.00138)*gclwh6_3*rxp0_2*sj15))+(((-0.02)*cj15*gclwh4_4*pp*rxp2_2))+(((2.0)*gclwh12_14*npx*pz*rxp2_2*(cj15*cj15)))+(((-0.0074858)*gclwh12_4*pp*r20*sj15))+(((0.0002)*gclwh6_3*r22*rxp0_2*(sj15*sj15)))+(((-2.0)*gclwh3_4*npy*pp*pz*sj15))+(((-0.07887)*cj15*gclwh12_10*pp*r20))+(((-0.74858)*cj15*gclwh6_4*npz*pp*r21))+(((-0.011057022233367)*gclwh8_10*r20))+(((0.000963180554)*gclwh8_4*rxp1_2*sj15))+(((-1.49716)*gclwh12_4*npx*npz*pz*(cj15*cj15)))+(((-1.49716)*gclwh14_4*npy*npz*pz*(cj15*cj15)))+(((-0.00675155876779811)*gclwh8_4*r20))+(((-2.0)*cj15*gclwh6_14*npy*pz*rxp2_2))+(((-0.001401930041)*gclwh8_3*r20*r22*sj15))+(((0.002801860082)*gclwh1_3*r20*r22*(cj15*cj15)))+((cj15*pp*r22))+(((0.036050884955666)*cj15*gclwh6_4*rxp0_2))+(((-1.0)*gclwh8_4*r20*(pp*pp)))+(((-0.04)*gclwh8_4*npx*npz*pz*sj15))+(((0.74858)*gclwh8_14*rxp1_2*rxp2_2*(cj15*cj15)))+(((-1.0)*gclwh6_3*pp*pz*r21))+(((0.002801860082)*gclwh3_3*r21*r22*(cj15*cj15)))+(((-0.02)*cj15*gclwh10_8*pz*r22))+(((-0.1881520318)*cj15*gclwh12_4*pp*r20))+(((-0.0074858)*gclwh14_3*r22*rxp0_2*sj15))+(((-0.5603720164)*gclwh8_4*npz*rxp1_2*(cj15*cj15)))+(((-0.1399930041)*gclwh14_14*r21*rxp2_2*(cj15*cj15)))+((cj15*gclwh10_10*npz*pp*r22*sj15))+(((0.036050884955666)*gclwh12_4*rxp1_2))+(((0.0074858)*cj15*gclwh3_4*pp*r21))+(((-0.011041248233367)*gclwh10_10*r22*sj15))+(((-0.138)*gclwh10_3*npz*pz*sj15))+(((-1.0)*gclwh3_3*pp*pz*r21*sj15))+(((-0.00674192696225811)*cj15*gclwh12_4*r20))+(((0.02)*gclwh1_3*pz*rxp1_2))+(((0.74858)*gclwh6_14*rxp0_2*rxp2_2*(cj15*cj15)))+(((2.0)*gclwh1_3*npx*sj15*(pz*pz)))+(((-0.00138)*gclwh8_3*rxp1_2*sj15))+(((-0.74858)*cj15*gclwh6_3*npy*pz*r22))+(((-0.2801860082)*cj15*gclwh14_3*r22*rxp0_2))+(((-0.0005165202)*cj15*gclwh3_3*r21))+(((0.74858)*gclwh14_3*npy*pz*r22*(cj15*cj15)))+((gclwh1_4*r20*sj15*(pp*pp)))+(((-0.052323123504589)*cj15*gclwh3_3*r21*r22*sj15))+(((-0.04)*cj15*gclwh12_4*npx*npz*pz*sj15))+(((0.74858)*gclwh12_4*pp*rxp1_2))+(((0.104646247009178)*cj15*gclwh10_4*npz*r22*sj15))+((cj15*gclwh12_3*pp*pz*r20)));
op[66]=((-0.04076796)+(((0.00036050884955666)*cj15*gclwh11_1*r22))+(((-0.01)*gclwh2_0*pp*r21*r22*(sj15*sj15)))+(((-0.5603720164)*cj15*gclwh13_1*npz*rxp1_2))+(((-0.0149716)*gclwh13_1*npz*rxp1_2*sj15))+(((-0.74858)*gclwh7_9*r22*rxp0_2*(cj15*cj15)))+(((0.02)*gclwh9_1*npz*pp*r20*sj15))+(((-1.0)*cj15*pp*r22))+(((-0.37429)*gclwh13_0*pp*r20*r22*(cj15*cj15)))+(((-0.5013315118)*gclwh13_11*rxp1_2))+(((2.0)*cj15*npz*pz))+(((-0.1881520318)*gclwh11_1*pp*r22*sj15))+(((-0.0096595172829)*gclwh11_0*r22*sj15))+(((0.0149716)*cj15*gclwh7_0*r22*rxp0_2*sj15))+(((-0.74858)*cj15*gclwh13_9*r22*rxp1_2))+(((0.0918339764)*gclwh0_1*pp*r20*sj15))+(((-0.02)*gclwh9_0*pz*rxp1_2*sj15))+(((0.1399930041)*gclwh15_9*r21*r22*(cj15*cj15)))+(((-0.02)*cj15*gclwh9_15*rxp1_2*rxp2_2*sj15))+(((0.00674192696225811)*gclwh0_1*r20*sj15))+(((0.74858)*gclwh15_1*npz*pp*r21*(cj15*cj15)))+(((0.02)*cj15*gclwh15_1*npz*pp*r21*sj15))+(((0.00138)*gclwh7_0*rxp0_2*sj15))+(((-1.49716)*cj15*gclwh0_1*npx*npz*pz*sj15))+(((-0.0074858)*cj15*gclwh2_0*r22*rxp0_2))+(((0.74858)*cj15*gclwh11_1*npz*pp*r22*sj15))+(((0.74858)*cj15*gclwh15_9*r22*rxp0_2))+(((-1.33942)*cj15*gclwh15_11*npy*pz))+(((0.002799860082)*gclwh11_1*npz*r22*(sj15*sj15)))+(((-7.4858e-5)*gclwh13_0*r20*r22*(sj15*sj15)))+(((0.0149716)*gclwh15_1*npz*rxp0_2*sj15))+(((-0.0074858)*gclwh13_1*pp*r20*sj15))+(((-0.74858)*cj15*gclwh13_15*rxp1_2*rxp2_2))+(((1.49716)*cj15*gclwh7_1*npy*npz*pz))+(((-1.0)*gclwh15_11*npz*pp*r21*(cj15*cj15)))+(((-0.02)*cj15*gclwh11_11*npz*pz))+(((0.05165202)*gclwh13_0*rxp1_2))+(((0.02)*cj15*gclwh11_9*pz*r22))+((gclwh9_0*pp*pz*r20))+(((0.104646247009178)*cj15*gclwh11_1*npz*r22*sj15))+(((-1.49716)*cj15*gclwh11_1*pz*sj15*(npz*npz)))+(((-1.49716)*cj15*gclwh9_1*npx*npz*pz))+(((0.0074858)*cj15*gclwh11_1*pp*r22))+(((2.0)*gclwh11_1*npz*pp*pz*sj15))+(((-0.1399930041)*gclwh13_11*npz*r20*(cj15*cj15)))+(((0.005603720164)*gclwh2_1*npz*r21*(cj15*cj15)))+(((0.0002)*gclwh0_0*r22*rxp1_2*sj15))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.66971)*gclwh7_11*pp*r21))+(((-0.00674192696225811)*cj15*gclwh13_1*r20))+(((-0.00138)*gclwh11_0*pz))+(((0.005013315118)*gclwh13_11*r20*sj15))+(((-0.0149716)*cj15*gclwh0_1*npz*rxp1_2))+(((-2.0)*cj15*gclwh15_0*npy*(pz*pz)))+(((0.052472839504589)*cj15*gclwh7_0*r21*r22))+(((2.0)*cj15*gclwh9_11*npx*npz*pz))+(((0.1399930041)*gclwh13_9*r20*r22*(cj15*cj15)))+(((0.001399930041)*gclwh2_0*r21*r22*(sj15*sj15)))+(((-2.0)*gclwh2_0*npy*sj15*(pz*pz)))+(((0.74858)*cj15*gclwh9_1*npz*pp*r20))+(((0.00675155876779811)*gclwh7_1*r21))+(((-0.0074858)*cj15*gclwh2_1*pp*r21))+(((0.093888656775811)*gclwh9_11*r20))+(((0.66971)*cj15*gclwh15_11*pp*r21))+(((0.0963180554)*cj15*gclwh15_1*npy*pz))+(((-0.02)*gclwh11_1*pp*pz))+(((-2.0)*cj15*gclwh9_9*npx*pz*r22))+(((-0.05165202)*gclwh15_0*rxp0_2))+(((-0.0074858)*cj15*gclwh13_11*npz*r20*sj15))+(((-0.02)*cj15*gclwh7_15*rxp0_2*rxp2_2*sj15))+(((0.036050884955666)*cj15*gclwh7_1*rxp0_2))+(((-0.37429)*cj15*gclwh11_0*pp*sj15*(r22*r22)))+(((-2.0)*gclwh0_0*npx*sj15*(pz*pz)))+(((-2.0)*gclwh15_15*npy*pz*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh7_11*npz*rxp0_2*(cj15*cj15)))+(((0.002801860082)*gclwh11_0*(cj15*cj15)*(r22*r22)))+(((-1.0)*cj15*gclwh9_11*npz*pp*r20))+(((-0.0074858)*gclwh5_0*r22*rxp2_2*(cj15*cj15)))+(((-0.00036050884955666)*cj15*gclwh2_1*r21))+(((0.0096595172829)*gclwh2_0*r21*sj15))+(((0.000149716)*gclwh15_1*npz*r21*(sj15*sj15)))+(((-0.052397981504589)*gclwh15_0*r21*r22*(cj15*cj15)))+(((0.1883520318)*gclwh7_1*pp*r21))+(((-0.069)*cj15*gclwh13_0*pp*r20))+(((0.0967180554)*gclwh11_1*npz*pz*sj15))+(((-0.1399930041)*gclwh2_0*pz*r21*sj15))+(((-0.104646247009178)*cj15*gclwh2_1*npz*r21*sj15))+(((0.74858)*gclwh13_1*npz*pp*r20*(cj15*cj15)))+(((-0.0133942)*gclwh9_11*rxp1_2*sj15))+(((-0.02)*gclwh7_0*npy*pz*r22*sj15))+(((-0.1399930041)*gclwh0_0*pz*r20*sj15))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.0963180554)*cj15*gclwh13_1*npx*pz))+(((0.02)*gclwh9_0*npx*pz*r22*sj15))+(((0.37429)*cj15*gclwh7_0*pp*r21*r22))+(((-0.069)*gclwh9_0*pp*r20))+(((-0.5603720164)*gclwh7_1*npz*rxp0_2*(cj15*cj15)))+(((0.66971)*gclwh11_11*pp*r22*sj15))+(((-0.01)*cj15*gclwh13_0*pp*r20*r22*sj15))+((cj15*gclwh9_15*pp*r20*rxp2_2))+(((0.0149716)*cj15*gclwh11_1*npz*pz))+(((-0.069)*gclwh11_0*pp*r22*sj15))+((gclwh15_9*pp*r21*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh13_11*npz*rxp1_2))+(((-0.74858)*cj15*gclwh5_9*r22*rxp2_2*sj15))+(((0.069)*gclwh7_0*pp*r21))+((gclwh2_0*pp*pz*r21*sj15))+(((-2.0)*gclwh11_0*npz*sj15*(pz*pz)))+(((0.74858)*gclwh13_1*pp*rxp1_2))+(((0.74858)*cj15*gclwh0_1*npz*pp*r20*sj15))+(((0.02)*cj15*gclwh7_11*npz*rxp0_2*sj15))+((cj15*gclwh13_0*pp*pz*r20))+(((-0.002801860082)*gclwh0_0*r20*r22*(cj15*cj15)))+(((0.1401930041)*cj15*gclwh9_9*r20*r22))+((cj15*gclwh15_0*pp*pz*r21))+(((0.104945679009178)*cj15*gclwh9_1*npz*r20))+(((0.008403580246)*cj15*gclwh13_1*npz*r20*sj15))+(((0.66971)*cj15*gclwh13_11*pp*r20))+(((0.0963180554)*gclwh0_1*npx*pz*sj15))+(((-0.1401930041)*gclwh7_0*pz*r21))+(((0.02)*gclwh2_0*pz*rxp0_2))+(((0.001399930041)*gclwh0_0*r20*r22*(sj15*sj15)))+(((-2.0)*cj15*gclwh7_11*npy*npz*pz))+(((-0.02)*gclwh7_1*npz*pp*r21*sj15))+(((0.0149716)*cj15*gclwh2_1*npz*rxp0_2))+(((0.02)*gclwh11_0*(pz*pz)))+(((-0.0149716)*gclwh5_1*npz*rxp2_2*(sj15*sj15)))+(((-0.0963180554)*gclwh7_1*npy*pz))+(((-2.0)*cj15*gclwh9_15*npx*pz*rxp2_2))+(((0.104795963009178)*gclwh15_1*npz*r21*(cj15*cj15)))+(((0.0074858)*gclwh13_0*r22*rxp1_2*sj15))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((-0.1881520318)*cj15*gclwh13_1*pp*r20))+(((0.000963180554)*gclwh7_1*rxp0_2*sj15))+(((0.0004)*gclwh2_1*npz*rxp0_2*sj15))+(((-0.1883520318)*gclwh9_1*pp*r20))+(((0.1397930041)*gclwh11_0*pz*r22*sj15))+(((0.093754714775811)*gclwh11_11*r22*sj15))+(((-0.5599720164)*cj15*gclwh5_1*npz*rxp2_2*sj15))+(((-0.1401930041)*cj15*gclwh9_11*npz*r20))+(((-0.000963180554)*gclwh11_1*pz))+(((-0.04)*cj15*gclwh15_1*npy*npz*pz*sj15))+(((-0.02)*gclwh0_0*pz*rxp1_2))+(((0.0074858)*cj15*gclwh2_0*pz*r21))+(((0.05165202)*cj15*gclwh9_0*rxp1_2))+(((0.02)*gclwh7_1*pp*rxp0_2*sj15))+(((0.093754714775811)*cj15*gclwh15_11*r21))+(((2.0)*cj15*gclwh13_1*npx*pp*pz))+(((0.0096733172829)*gclwh7_0*r21))+(((0.052323123504589)*cj15*gclwh0_0*r20*r22*sj15))+(((0.02)*cj15*gclwh9_11*npz*rxp1_2*sj15))+(((0.1399930041)*gclwh13_15*r20*rxp2_2*(cj15*cj15)))+(((-7.4858e-5)*gclwh15_0*r21*r22*(sj15*sj15)))+(((0.0963180554)*gclwh9_1*npx*pz))+(((-2.0)*cj15*gclwh11_9*npz*pz*r22*sj15))+(((-1.0)*gclwh11_1*r22*sj15*(pp*pp)))+(((0.036050884955666)*gclwh13_1*rxp1_2))+(((0.138)*gclwh11_0*npz*pz*sj15))+(((-2.0)*gclwh15_9*npy*pz*r22*(cj15*cj15)))+(((-0.01)*gclwh9_0*pp*r20*r22*sj15))+(((-0.104945679009178)*cj15*gclwh7_1*npz*r21))+(((0.02)*cj15*gclwh13_1*npz*pp*r20*sj15))+(((-0.005013315118)*cj15*gclwh11_11*r22))+(((0.0096595172829)*gclwh0_0*r20*sj15))+(((-0.1881520318)*cj15*gclwh15_1*pp*r21))+(((0.74858)*cj15*gclwh0_0*npx*pz*r22*sj15))+(((0.0074858)*gclwh15_0*pz*r21*sj15))+(((-0.004201790123)*cj15*gclwh13_0*r20*r22*sj15))+(((-0.74858)*gclwh15_1*pp*rxp0_2))+(((-0.0133942)*gclwh7_11*rxp0_2*sj15))+(((-1.0)*cj15*gclwh7_9*pp*r21*r22))+(((-0.00138)*gclwh2_0*rxp0_2))+(((-0.093888656775811)*gclwh7_11*r21))+(((-0.004201790123)*cj15*gclwh15_0*r21*r22*sj15))+(((0.66971)*gclwh9_11*pp*r20))+(((-0.04)*gclwh2_1*npy*npz*pz*(sj15*sj15)))+(((-0.0005165202)*gclwh15_0*r21*sj15))+(((-1.0)*gclwh2_1*r21*sj15*(pp*pp)))+(((2.0)*cj15*gclwh7_9*npy*pz*r22))+(((0.02)*cj15*gclwh11_15*pz*rxp2_2))+(((0.02)*cj15*gclwh5_0*pz*rxp2_2))+(((0.74858)*cj15*gclwh11_0*npz*pz*r22*sj15))+(((-1.49716)*gclwh15_1*npy*npz*pz*(cj15*cj15)))+(((0.0005165202)*cj15*gclwh11_0*r22))+(((2.0)*cj15*gclwh7_15*npy*pz*rxp2_2))+(((0.1399930041)*gclwh15_15*r21*rxp2_2*(cj15*cj15)))+(((0.0133942)*gclwh11_11*pz))+(((0.74858)*cj15*gclwh7_1*pp*rxp0_2))+(((2.0)*gclwh13_11*npx*npz*pz*(cj15*cj15)))+(((-0.04)*gclwh0_1*npx*npz*pz*(sj15*sj15)))+(((0.008403580246)*cj15*gclwh15_1*npz*r21*sj15))+(((0.02)*cj15*gclwh15_0*npy*pz*r22*sj15))+(((-0.0074858)*gclwh15_0*r22*rxp0_2*sj15))+(((0.0149716)*gclwh5_1*npz*rxp2_2*(cj15*cj15)))+(((-0.74858)*cj15*gclwh7_1*npz*pp*r21))+((cj15*gclwh7_11*npz*pp*r21))+(((-0.00036050884955666)*cj15*gclwh0_1*r20))+(((0.138)*gclwh0_0*npx*pz*sj15))+(((0.0074858)*cj15*gclwh0_0*pz*r20))+(((-0.052397981504589)*gclwh13_0*r20*r22*(cj15*cj15)))+(((-0.74858)*gclwh13_0*pz*rxp1_2))+(((-0.74858)*cj15*gclwh9_0*pz*rxp1_2))+(((0.74858)*cj15*gclwh9_0*npx*pz*r22))+(((0.0074858)*cj15*gclwh13_9*r20*r22*sj15))+(((-0.37429)*gclwh15_0*pp*r21*r22*(cj15*cj15)))+(((-0.0005165202)*cj15*gclwh2_0*r21))+(((-1.49716)*gclwh13_1*npx*npz*pz*(cj15*cj15)))+(((2.0)*cj15*gclwh15_1*npy*pp*pz))+(((0.138)*gclwh9_0*npx*pz))+(((-0.069)*cj15*gclwh15_0*pp*r21))+((gclwh0_0*pp*pz*r20*sj15))+(((0.0074858)*cj15*gclwh0_0*r22*rxp1_2))+(((-0.0074858)*gclwh11_9*(cj15*cj15)*(r22*r22)))+(((-0.0149716)*cj15*gclwh11_0*pz*r22))+(((0.000963180554)*gclwh0_1*rxp1_2))+(((-0.1399930041)*gclwh15_11*npz*r21*(cj15*cj15)))+(((0.1399930041)*cj15*gclwh13_0*pz*r20))+(((-0.0004)*gclwh0_1*npz*rxp1_2*sj15))+(((-0.0096595172829)*cj15*gclwh15_0*r21))+(((-0.37429)*cj15*gclwh9_0*pp*r20*r22))+(((0.74858)*gclwh15_0*npy*pz*r22*(cj15*cj15)))+(((0.5603720164)*cj15*gclwh15_1*npz*rxp0_2))+(((-0.74858)*pz))+(((-0.0074858)*gclwh15_1*pp*r21*sj15))+(((-1.0)*cj15*gclwh13_1*r20*(pp*pp)))+(((0.02)*gclwh11_1*npz*pp*r22*(sj15*sj15)))+(((0.0074858)*gclwh11_11*npz*r22*(cj15*cj15)))+(((-0.74858)*gclwh9_9*r22*rxp1_2*(cj15*cj15)))+(((-0.02)*gclwh2_1*pp*rxp0_2))+(((0.00674192696225811)*gclwh2_1*r21*sj15))+(((0.0074858)*gclwh13_0*pz*r20*sj15))+(((0.1401930041)*cj15*gclwh7_11*npz*r21))+(((0.2801860082)*gclwh9_0*r22*rxp1_2*(cj15*cj15)))+(((-0.104646247009178)*cj15*gclwh0_1*npz*r20*sj15))+(((0.0002)*gclwh7_0*r22*rxp0_2*(sj15*sj15)))+(((-0.74858)*gclwh7_15*rxp0_2*rxp2_2*(cj15*cj15)))+(((-0.00036050884955666)*gclwh15_1*r21*sj15))+(((0.2801860082)*cj15*gclwh13_0*r22*rxp1_2))+(((-0.000963180554)*gclwh2_1*rxp0_2))+(((0.74858)*cj15*gclwh2_0*npy*pz*r22*sj15))+(((-0.02)*gclwh7_0*pz*rxp0_2*sj15))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.74858)*gclwh9_11*npz*rxp1_2*(cj15*cj15)))+(((0.1399930041)*cj15*gclwh15_0*pz*r21))+(((-0.74858)*cj15*gclwh15_11*npz*rxp0_2))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.138)*gclwh7_0*npy*pz))+(((0.0002)*gclwh9_0*r22*rxp1_2*(sj15*sj15)))+(((0.0074858)*cj15*gclwh15_15*r21*rxp2_2*sj15))+(((0.138)*cj15*gclwh13_0*npx*pz))+((gclwh13_9*pp*r20*r22*(cj15*cj15)))+(((-0.02)*cj15*gclwh7_9*r22*rxp0_2*sj15))+(((-1.0)*cj15*gclwh7_15*pp*r21*rxp2_2))+(((-0.069)*gclwh0_0*pp*r20*sj15))+(((0.000963180554)*gclwh9_1*rxp1_2*sj15))+(((-0.069)*gclwh2_0*pp*r21*sj15))+(((2.0)*cj15*gclwh11_11*pz*sj15*(npz*npz)))+(((0.05165202)*cj15*gclwh7_0*rxp0_2))+(((0.74858)*gclwh15_0*pz*rxp0_2))+((gclwh11_0*pp*pz*r22*sj15))+((cj15*gclwh11_15*pp*r22*rxp2_2*sj15))+(((1.33942)*gclwh7_11*npy*pz))+(((0.05165202)*gclwh5_0*rxp2_2*sj15))+(((0.01)*gclwh7_0*pp*r21*r22*sj15))+(((-0.0074858)*cj15*gclwh15_11*npz*r21*sj15))+(((-0.01)*gclwh0_0*pp*r20*r22*(sj15*sj15)))+((gclwh7_1*r21*(pp*pp)))+(((0.001401930041)*gclwh7_0*r21*r22*sj15))+(((-0.0096595172829)*cj15*gclwh13_0*r20))+(((-0.0005165202)*gclwh13_0*r20*sj15))+(((-1.49716)*cj15*gclwh2_1*npy*npz*pz*sj15))+(((-1.33942)*gclwh9_11*npx*pz))+(((0.093754714775811)*cj15*gclwh13_11*r20))+(((-0.5603720164)*gclwh9_1*npz*rxp1_2*(cj15*cj15)))+(((-0.02)*cj15*gclwh9_9*r22*rxp1_2*sj15))+(((0.1401930041)*gclwh9_0*pz*r20))+(((-0.5013315118)*cj15*gclwh7_11*rxp0_2))+(((-0.04)*cj15*gclwh13_1*npx*npz*pz*sj15))+(((-0.74858)*gclwh5_0*pz*rxp2_2*sj15))+(((-0.0299432)*cj15*gclwh9_1*npz*rxp1_2*sj15))+(((-0.00675155876779811)*gclwh9_1*r20))+(((0.04)*gclwh7_1*npy*npz*pz*sj15))+((gclwh15_15*pp*r21*rxp2_2*(cj15*cj15)))+(((-0.01)*gclwh11_0*pp*(r22*r22)*(sj15*sj15)))+(((0.138)*gclwh2_0*npy*pz*sj15))+(((0.0918339764)*gclwh2_1*pp*r21*sj15))+(((0.74858)*cj15*gclwh2_1*npz*pp*r21*sj15))+(((0.0074858)*r22*sj15))+(((-1.0)*gclwh13_11*npz*pp*r20*(cj15*cj15)))+(((2.0)*gclwh0_1*npx*pp*pz*sj15))+(((-0.0004)*gclwh9_1*npz*rxp1_2*(sj15*sj15)))+(((-0.04)*gclwh11_1*pz*(npz*npz)*(sj15*sj15)))+(((0.2801860082)*gclwh7_0*r22*rxp0_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh7_15*r21*rxp2_2))+(((-2.0)*cj15*gclwh13_0*npx*(pz*pz)))+(((0.036050884955666)*gclwh5_1*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh7_0*pz*rxp0_2))+((gclwh13_15*pp*r20*rxp2_2*(cj15*cj15)))+(((-0.5013315118)*cj15*gclwh9_11*rxp1_2))+(((-1.0)*cj15*gclwh15_1*r21*(pp*pp)))+(((0.74858)*cj15*gclwh9_1*pp*rxp1_2))+(((-0.0074858)*gclwh11_15*r22*rxp2_2*(cj15*cj15)))+(((0.005603720164)*gclwh0_1*npz*r20*(cj15*cj15)))+(((-0.000963180554)*cj15*gclwh5_1*rxp2_2))+(((0.02)*gclwh0_0*npx*pz*r22*(sj15*sj15)))+(((0.0149716)*cj15*gclwh9_0*r22*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_0*npx*pz*r22*sj15))+(((-0.001399930041)*gclwh11_0*(r22*r22)*(sj15*sj15)))+(((0.104795963009178)*gclwh13_1*npz*r20*(cj15*cj15)))+(((0.000149716)*gclwh13_1*npz*r20*(sj15*sj15)))+(((-0.0004)*gclwh7_1*npz*rxp0_2*(sj15*sj15)))+(((0.74858)*cj15*gclwh15_15*rxp0_2*rxp2_2))+(((-0.00674192696225811)*gclwh11_1*r22*sj15))+(((-0.002799860082)*gclwh2_1*npz*r21*(sj15*sj15)))+(((-0.37429)*cj15*gclwh0_0*pp*r20*r22*sj15))+(((0.1401930041)*cj15*gclwh9_15*r20*rxp2_2))+(((0.0074858)*cj15*gclwh13_15*r20*rxp2_2*sj15))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.0096733172829)*gclwh9_0*r20))+(((-0.00674192696225811)*cj15*gclwh15_1*r21))+(((0.02)*gclwh2_0*npy*pz*r22*(sj15*sj15)))+(((-0.002803860082)*gclwh7_1*npz*r21*sj15))+(((0.005013315118)*gclwh15_11*r21*sj15))+(((0.036050884955666)*cj15*gclwh9_1*rxp1_2))+(((-0.0074858)*cj15*gclwh0_1*pp*r20))+(((0.1399930041)*cj15*gclwh11_15*r22*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh7_0*npy*pz*r22))+(((0.0963180554)*gclwh2_1*npy*pz*sj15))+(((0.1399930041)*cj15*gclwh11_9*sj15*(r22*r22)))+(((-0.002801860082)*gclwh2_0*r21*r22*(cj15*cj15)))+(((0.00138)*gclwh0_0*rxp1_2))+(((0.00138)*gclwh9_0*rxp1_2*sj15))+(((0.02)*gclwh0_1*npz*pp*r20*(sj15*sj15)))+(((-0.1399930041)*cj15*gclwh11_11*npz*r22*sj15))+(((2.0)*gclwh15_11*npy*npz*pz*(cj15*cj15)))+(((0.02)*gclwh5_9*r22*rxp2_2*(cj15*cj15)))+(((0.02)*gclwh9_1*pp*rxp1_2*sj15))+(((-0.0005165202)*cj15*gclwh0_0*r20))+(((-0.002799860082)*gclwh0_1*npz*r20*(sj15*sj15)))+(((-0.00036050884955666)*gclwh13_1*r20*sj15))+(((-0.37429)*cj15*gclwh2_0*pp*r21*r22*sj15))+(((2.0)*gclwh2_1*npy*pp*pz*sj15))+(((-0.04)*gclwh9_1*npx*npz*pz*sj15))+(((-0.01)*cj15*gclwh15_0*pp*r21*r22*sj15))+(((0.02)*gclwh0_1*pp*rxp1_2))+(((0.0074858)*gclwh5_0*r22*rxp2_2*(sj15*sj15)))+(((-0.0002)*gclwh2_0*r22*rxp0_2*sj15))+(((-2.0)*cj15*gclwh11_15*npz*pz*rxp2_2*sj15))+(((0.74858)*gclwh13_0*npx*pz*r22*(cj15*cj15)))+(((-0.052472839504589)*cj15*gclwh9_0*r20*r22))+(((0.02)*gclwh2_1*npz*pp*r21*(sj15*sj15)))+(((0.5013315118)*gclwh15_11*rxp0_2))+(((0.2799860082)*cj15*gclwh5_0*r22*rxp2_2*sj15))+(((-1.0)*cj15*gclwh11_11*npz*pp*r22*sj15))+(((-0.0299432)*cj15*gclwh7_1*npz*rxp0_2*sj15))+((cj15*gclwh11_9*pp*sj15*(r22*r22)))+(((-0.00138)*cj15*gclwh5_0*rxp2_2))+(((-0.2801860082)*cj15*gclwh15_0*r22*rxp0_2))+(((0.02)*gclwh11_0*npz*pz*r22*(sj15*sj15)))+(((-0.052323123504589)*cj15*gclwh11_0*sj15*(r22*r22)))+(((-1.0)*gclwh0_1*r20*sj15*(pp*pp)))+(((-0.74858)*gclwh9_15*rxp1_2*rxp2_2*(cj15*cj15)))+(((-2.0)*gclwh13_9*npx*pz*r22*(cj15*cj15)))+(((-1.33942)*cj15*gclwh13_11*npx*pz))+(((0.1399930041)*cj15*r22))+(((-0.1401930041)*cj15*gclwh7_9*r21*r22))+(((0.052323123504589)*cj15*gclwh2_0*r21*r22*sj15))+(((-0.001401930041)*gclwh9_0*r20*r22*sj15))+(((0.002803860082)*gclwh9_1*npz*r20*sj15))+((cj15*gclwh9_9*pp*r20*r22))+(((-0.036050884955666)*gclwh15_1*rxp0_2))+(((-1.33942)*gclwh11_11*npz*pz*sj15))+(((-2.0)*gclwh13_15*npx*pz*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh5_1*pp*rxp2_2*sj15))+(((-0.005603720164)*gclwh11_1*npz*r22*(cj15*cj15)))+(((0.138)*cj15*gclwh15_0*npy*pz))+(((0.0074858)*cj15*gclwh15_9*r21*r22*sj15))+(((-0.02)*cj15*gclwh5_1*pp*rxp2_2)));
IkReal x606=(gclwh11_15*pz);
IkReal x607=(gclwh13_15*rxp1_2);
IkReal x608=(gclwh15_15*rxp0_2);
IkReal x609=(gclwh7_15*r21);
IkReal x610=(gclwh9_15*r20);
IkReal x611=(cj15*gclwh11_15*r22);
IkReal x612=(cj15*gclwh13_15*r20);
IkReal x613=(cj15*gclwh15_15*r21);
IkReal x614=(cj15*gclwh7_15*rxp0_2);
IkReal x615=(cj15*gclwh9_15*rxp1_2);
IkReal x616=(gclwh11_15*r22*sj15);
IkReal x617=(gclwh13_15*r20*sj15);
IkReal x618=(gclwh15_15*r21*sj15);
IkReal x619=(gclwh7_15*npy*pz);
IkReal x620=(gclwh7_15*pp*r21);
IkReal x621=(gclwh7_15*rxp0_2*sj15);
IkReal x622=(gclwh9_15*npx*pz);
IkReal x623=(gclwh9_15*pp*r20);
IkReal x624=(gclwh9_15*rxp1_2*sj15);
IkReal x625=x254;
IkReal x626=x255;
IkReal x627=x256;
IkReal x628=x257;
IkReal x629=x258;
IkReal x630=x259;
IkReal x631=(gclwh11_6*pz);
IkReal x632=((1.49716)*rxp1_2);
IkReal x633=((1.49716)*rxp0_2);
IkReal x634=(gclwh7_6*r21);
IkReal x635=(gclwh9_6*r20);
IkReal x636=((0.2799860082)*cj15);
IkReal x637=(gclwh13_6*r20);
IkReal x638=(gclwh15_6*r21);
IkReal x639=(gclwh5_6*rxp2_2);
IkReal x640=(gclwh11_6*r22*sj15);
IkReal x641=((0.0149716)*sj15);
IkReal x642=((4.0)*npy*pz);
IkReal x643=((2.0)*pp);
IkReal x644=((0.04)*sj15);
IkReal x645=((4.0)*npx*pz);
IkReal x646=((2.0)*cj15*pp);
op[67]=((0.0825119764)+(((0.041356733271222)*cj15*gclwh15_13*r21))+(((-0.1399930041)*cj15*gclwh13_9*r20))+(((-0.1399930041)*gclwh11_9*r22*sj15))+(((-0.0005165202)*cj15*gclwh11_11*r22))+(((-1.0)*gclwh9_9*pp*r20))+(((2.0)*cj15*gclwh15_9*npy*pz))+(((0.002211455036)*gclwh15_13*r21*sj15))+(((0.74858)*cj15*gclwh9_9*rxp1_2))+(((0.02)*gclwh7_9*rxp0_2*sj15))+(((2.0)*gclwh9_9*npx*pz))+(((-0.00138)*gclwh9_11*rxp1_2*sj15))+(((-0.1399930041)*cj15*gclwh15_9*r21))+(((0.069)*cj15*gclwh13_11*pp*r20))+(((-0.041415817271222)*gclwh7_13*r21))+(((-1.0)*gclwh11_9*pp*r22*sj15))+(((0.74858)*gclwh5_9*rxp2_2*sj15))+(((0.0005165202)*gclwh15_11*r21*sj15))+(((-0.002211455036)*cj15*gclwh11_13*r22))+(((-0.0096733172829)*gclwh7_11*r21))+(((-1.0)*cj15*gclwh15_9*pp*r21))+(((-0.138)*cj15*gclwh13_11*npx*pz))+(((0.0005165202)*gclwh13_11*r20*sj15))+(((-0.05165202)*gclwh13_11*rxp1_2))+(((0.0096595172829)*gclwh11_11*r22*sj15))+(((0.29542)*gclwh9_13*pp*r20))+(((-0.02)*gclwh11_9*pz))+(((0.069)*cj15*gclwh15_11*pp*r21))+(((-1.0)*cj15*gclwh13_9*pp*r20))+(((-0.138)*gclwh11_11*npz*pz*sj15))+(((0.041356733271222)*gclwh11_13*r22*sj15))+(((-0.0059084)*gclwh7_13*rxp0_2*sj15))+(((-0.59084)*gclwh9_13*npx*pz))+(((-0.05165202)*cj15*gclwh7_11*rxp0_2))+(((-0.2211455036)*cj15*gclwh9_13*rxp1_2))+(((-0.59084)*gclwh11_13*npz*pz*sj15))+(((-0.0074858)*gclwh15_9*r21*sj15))+(((2.0)*gclwh11_9*npz*pz*sj15))+(((0.05165202)*gclwh15_11*rxp0_2))+(((2.0)*cj15*gclwh13_9*npx*pz))+(((-0.02)*cj15*gclwh5_9*rxp2_2))+(((-0.138)*cj15*gclwh15_11*npy*pz))+(((-0.138)*gclwh9_11*npx*pz))+(((0.29542)*gclwh11_13*pp*r22*sj15))+(((0.041415817271222)*gclwh9_13*r20))+(((0.0096595172829)*cj15*gclwh13_11*r20))+(((0.041356733271222)*cj15*gclwh13_13*r20))+(((0.59084)*gclwh7_13*npy*pz))+(((0.02)*gclwh9_9*rxp1_2*sj15))+(((0.069)*gclwh9_11*pp*r20))+(((0.74858)*gclwh13_9*rxp1_2))+(((0.74858)*cj15*gclwh7_9*rxp0_2))+(((0.002211455036)*gclwh13_13*r20*sj15))+(((0.29542)*cj15*gclwh13_13*pp*r20))+(((-0.0074858)*gclwh13_9*r20*sj15))+(((-0.2211455036)*gclwh5_13*rxp2_2*sj15))+(((-0.069)*gclwh7_11*pp*r21))+(((-0.1401930041)*gclwh9_9*r20))+(((0.2211455036)*gclwh15_13*rxp0_2))+(((-0.59084)*cj15*gclwh15_13*npy*pz))+(((0.1401930041)*gclwh7_9*r21))+(((-0.05165202)*cj15*gclwh9_11*rxp1_2))+(((-0.74858)*gclwh15_9*rxp0_2))+(((0.0074858)*cj15*gclwh11_9*r22))+(((0.29542)*cj15*gclwh15_13*pp*r21))+(((0.0059084)*cj15*gclwh5_13*rxp2_2))+(((-0.00138)*gclwh7_11*rxp0_2*sj15))+((gclwh7_9*pp*r21))+(((0.00138)*gclwh11_11*pz))+(((-0.0059084)*gclwh9_13*rxp1_2*sj15))+(((-2.0)*gclwh7_9*npy*pz))+(((0.069)*gclwh11_11*pp*r22*sj15))+(((-0.2211455036)*cj15*gclwh7_13*rxp0_2))+(((0.0096595172829)*cj15*gclwh15_11*r21))+(((-0.29542)*gclwh7_13*pp*r21))+(((0.0096733172829)*gclwh9_11*r20))+(((-0.59084)*cj15*gclwh13_13*npx*pz))+(((0.0059084)*gclwh11_13*pz))+(((0.138)*gclwh7_11*npy*pz))+(((-0.2211455036)*gclwh13_13*rxp1_2)));
op[68]=((((0.0193190345658)*x616))+(((0.10330404)*x608))+(((0.0193190345658)*x612))+(((-0.276)*x629))+(((0.0010330404)*x617))+(((0.0193190345658)*x613))+(((-0.10330404)*x607))+(((-0.0010330404)*x611))+(((-0.00276)*x624))+(((0.138)*x626))+(((0.276)*x619))+(((-0.00276)*x621))+(((-0.276)*x622))+(((-0.276)*x625))+(((0.0193466345658)*x610))+(((0.138)*x630))+(((0.00276)*x606))+(((0.138)*x628))+(((-0.0193466345658)*x609))+(((0.0010330404)*x618))+(((-0.10330404)*x615))+(((-0.276)*x627))+(((-0.10330404)*x614))+(((0.138)*x623))+(((-0.138)*x620)));
op[69]=((((1.18168)*x625))+(((-0.082713466542444)*x613))+((x638*x641))+(((-0.0149716)*cj15*gclwh11_6*r22))+(((-0.082713466542444)*x612))+(((-1.18168)*x619))+(((-0.082831634542444)*x610))+(((0.4422910072)*x615))+(((-0.59084)*x626))+(((0.04)*x631))+(((-1.0)*gclwh13_6*x632))+((x637*x646))+(((-0.59084)*x630))+(((-1.0)*cj15*gclwh9_6*x632))+(((0.0118168)*x624))+(((1.18168)*x629))+((gclwh7_6*x642))+(((0.4422910072)*x614))+((x636*x637))+(((0.0118168)*x621))+(((1.18168)*x627))+(((-0.2803860082)*x634))+(((-1.49716)*sj15*x639))+(((0.59084)*x620))+(((-0.082713466542444)*x616))+(((-0.004422910072)*x617))+(((-1.0)*x634*x643))+(((-1.0)*cj15*gclwh7_6*x633))+((gclwh15_6*x633))+((x635*x643))+(((0.2799860082)*x640))+((x636*x638))+(((0.2803860082)*x635))+(((-0.0118168)*x606))+((x640*x643))+(((-1.0)*gclwh9_6*rxp1_2*x644))+(((0.004422910072)*x611))+(((-1.0)*gclwh9_6*x645))+(((0.082831634542444)*x609))+(((0.04)*cj15*x639))+(((-0.59084)*x623))+(((-0.004422910072)*x618))+((x637*x641))+((x638*x646))+(((1.18168)*x622))+(((-1.0)*gclwh7_6*rxp0_2*x644))+(((-4.0)*npz*sj15*x631))+(((0.4422910072)*x607))+(((-1.0)*cj15*gclwh15_6*x642))+(((-0.59084)*x628))+(((-0.4422910072)*x608))+(((-1.0)*cj15*gclwh13_6*x645)));
op[70]=((0.04076796)+(((0.00036050884955666)*cj15*gclwh11_1*r22))+(((0.0005165202)*cj15*gclwh2_0*r21))+(((-0.01)*gclwh2_0*pp*r21*r22*(sj15*sj15)))+(((-0.5603720164)*cj15*gclwh13_1*npz*rxp1_2))+(((-0.0149716)*gclwh13_1*npz*rxp1_2*sj15))+(((-0.74858)*gclwh7_9*r22*rxp0_2*(cj15*cj15)))+(((0.02)*gclwh9_1*npz*pp*r20*sj15))+(((-1.0)*cj15*pp*r22))+(((-0.37429)*gclwh13_0*pp*r20*r22*(cj15*cj15)))+(((-0.5013315118)*gclwh13_11*rxp1_2))+(((2.0)*cj15*npz*pz))+(((-0.1881520318)*gclwh11_1*pp*r22*sj15))+(((0.0149716)*cj15*gclwh7_0*r22*rxp0_2*sj15))+(((-0.138)*gclwh0_0*npx*pz*sj15))+(((-0.74858)*cj15*gclwh13_9*r22*rxp1_2))+(((0.0918339764)*gclwh0_1*pp*r20*sj15))+(((-0.02)*gclwh9_0*pz*rxp1_2*sj15))+(((0.1399930041)*gclwh15_9*r21*r22*(cj15*cj15)))+(((-0.05165202)*cj15*gclwh9_0*rxp1_2))+(((-0.02)*cj15*gclwh9_15*rxp1_2*rxp2_2*sj15))+(((0.00674192696225811)*gclwh0_1*r20*sj15))+(((0.05165202)*gclwh15_0*rxp0_2))+(((0.74858)*gclwh15_1*npz*pp*r21*(cj15*cj15)))+(((0.02)*cj15*gclwh15_1*npz*pp*r21*sj15))+(((-1.49716)*cj15*gclwh0_1*npx*npz*pz*sj15))+(((-0.0074858)*cj15*gclwh2_0*r22*rxp0_2))+(((0.74858)*cj15*gclwh11_1*npz*pp*r22*sj15))+(((0.74858)*cj15*gclwh15_9*r22*rxp0_2))+(((-1.33942)*cj15*gclwh15_11*npy*pz))+(((0.002799860082)*gclwh11_1*npz*r22*(sj15*sj15)))+(((-7.4858e-5)*gclwh13_0*r20*r22*(sj15*sj15)))+(((0.0149716)*gclwh15_1*npz*rxp0_2*sj15))+(((-0.0074858)*gclwh13_1*pp*r20*sj15))+(((-0.74858)*cj15*gclwh13_15*rxp1_2*rxp2_2))+(((1.49716)*cj15*gclwh7_1*npy*npz*pz))+(((-1.0)*gclwh15_11*npz*pp*r21*(cj15*cj15)))+(((-0.02)*cj15*gclwh11_11*npz*pz))+(((0.0096733172829)*gclwh9_0*r20))+(((0.02)*cj15*gclwh11_9*pz*r22))+((gclwh9_0*pp*pz*r20))+(((0.104646247009178)*cj15*gclwh11_1*npz*r22*sj15))+(((-1.49716)*cj15*gclwh11_1*pz*sj15*(npz*npz)))+(((-1.49716)*cj15*gclwh9_1*npx*npz*pz))+(((0.0074858)*cj15*gclwh11_1*pp*r22))+(((2.0)*gclwh11_1*npz*pp*pz*sj15))+(((-0.1399930041)*gclwh13_11*npz*r20*(cj15*cj15)))+(((0.005603720164)*gclwh2_1*npz*r21*(cj15*cj15)))+(((0.0002)*gclwh0_0*r22*rxp1_2*sj15))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.66971)*gclwh7_11*pp*r21))+(((0.0096595172829)*cj15*gclwh15_0*r21))+(((-0.00674192696225811)*cj15*gclwh13_1*r20))+(((0.069)*gclwh11_0*pp*r22*sj15))+(((0.0096595172829)*cj15*gclwh13_0*r20))+(((0.005013315118)*gclwh13_11*r20*sj15))+(((-0.0005165202)*cj15*gclwh11_0*r22))+(((-0.0149716)*cj15*gclwh0_1*npz*rxp1_2))+(((-2.0)*cj15*gclwh15_0*npy*(pz*pz)))+(((0.052472839504589)*cj15*gclwh7_0*r21*r22))+(((2.0)*cj15*gclwh9_11*npx*npz*pz))+(((0.1399930041)*gclwh13_9*r20*r22*(cj15*cj15)))+(((0.001399930041)*gclwh2_0*r21*r22*(sj15*sj15)))+(((-0.069)*gclwh7_0*pp*r21))+(((-2.0)*gclwh2_0*npy*sj15*(pz*pz)))+(((0.74858)*cj15*gclwh9_1*npz*pp*r20))+(((0.00675155876779811)*gclwh7_1*r21))+(((-0.0074858)*cj15*gclwh2_1*pp*r21))+(((0.093888656775811)*gclwh9_11*r20))+(((0.66971)*cj15*gclwh15_11*pp*r21))+(((0.0963180554)*cj15*gclwh15_1*npy*pz))+(((-0.02)*gclwh11_1*pp*pz))+(((-2.0)*cj15*gclwh9_9*npx*pz*r22))+(((-0.05165202)*cj15*gclwh7_0*rxp0_2))+(((-0.0074858)*cj15*gclwh13_11*npz*r20*sj15))+(((-0.02)*cj15*gclwh7_15*rxp0_2*rxp2_2*sj15))+(((0.036050884955666)*cj15*gclwh7_1*rxp0_2))+(((-0.37429)*cj15*gclwh11_0*pp*sj15*(r22*r22)))+(((-2.0)*gclwh0_0*npx*sj15*(pz*pz)))+(((-2.0)*gclwh15_15*npy*pz*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh7_11*npz*rxp0_2*(cj15*cj15)))+(((0.002801860082)*gclwh11_0*(cj15*cj15)*(r22*r22)))+(((-1.0)*cj15*gclwh9_11*npz*pp*r20))+(((-0.0074858)*gclwh5_0*r22*rxp2_2*(cj15*cj15)))+(((-0.00036050884955666)*cj15*gclwh2_1*r21))+(((0.000149716)*gclwh15_1*npz*r21*(sj15*sj15)))+(((-0.138)*cj15*gclwh15_0*npy*pz))+(((-0.052397981504589)*gclwh15_0*r21*r22*(cj15*cj15)))+(((0.1883520318)*gclwh7_1*pp*r21))+(((-0.138)*gclwh9_0*npx*pz))+(((0.0967180554)*gclwh11_1*npz*pz*sj15))+(((-0.1399930041)*gclwh2_0*pz*r21*sj15))+(((-0.104646247009178)*cj15*gclwh2_1*npz*r21*sj15))+(((0.74858)*gclwh13_1*npz*pp*r20*(cj15*cj15)))+(((-0.0133942)*gclwh9_11*rxp1_2*sj15))+(((-0.02)*gclwh7_0*npy*pz*r22*sj15))+(((-0.1399930041)*gclwh0_0*pz*r20*sj15))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.0963180554)*cj15*gclwh13_1*npx*pz))+(((0.02)*gclwh9_0*npx*pz*r22*sj15))+(((0.37429)*cj15*gclwh7_0*pp*r21*r22))+(((-0.5603720164)*gclwh7_1*npz*rxp0_2*(cj15*cj15)))+(((0.66971)*gclwh11_11*pp*r22*sj15))+(((-0.01)*cj15*gclwh13_0*pp*r20*r22*sj15))+((cj15*gclwh9_15*pp*r20*rxp2_2))+(((0.0149716)*cj15*gclwh11_1*npz*pz))+((gclwh15_9*pp*r21*r22*(cj15*cj15)))+(((0.74858)*cj15*gclwh13_11*npz*rxp1_2))+(((-0.74858)*cj15*gclwh5_9*r22*rxp2_2*sj15))+(((-0.05165202)*gclwh13_0*rxp1_2))+((gclwh2_0*pp*pz*r21*sj15))+(((-2.0)*gclwh11_0*npz*sj15*(pz*pz)))+(((0.74858)*gclwh13_1*pp*rxp1_2))+(((0.74858)*cj15*gclwh0_1*npz*pp*r20*sj15))+(((0.02)*cj15*gclwh7_11*npz*rxp0_2*sj15))+((cj15*gclwh13_0*pp*pz*r20))+(((0.0005165202)*cj15*gclwh0_0*r20))+(((-0.002801860082)*gclwh0_0*r20*r22*(cj15*cj15)))+(((0.1401930041)*cj15*gclwh9_9*r20*r22))+((cj15*gclwh15_0*pp*pz*r21))+(((0.104945679009178)*cj15*gclwh9_1*npz*r20))+(((0.008403580246)*cj15*gclwh13_1*npz*r20*sj15))+(((0.66971)*cj15*gclwh13_11*pp*r20))+(((0.0963180554)*gclwh0_1*npx*pz*sj15))+(((0.0005165202)*gclwh15_0*r21*sj15))+(((-0.1401930041)*gclwh7_0*pz*r21))+(((0.02)*gclwh2_0*pz*rxp0_2))+(((-0.00138)*gclwh0_0*rxp1_2))+(((0.001399930041)*gclwh0_0*r20*r22*(sj15*sj15)))+(((-2.0)*cj15*gclwh7_11*npy*npz*pz))+(((-0.02)*gclwh7_1*npz*pp*r21*sj15))+(((0.0149716)*cj15*gclwh2_1*npz*rxp0_2))+(((0.02)*gclwh11_0*(pz*pz)))+(((-0.0149716)*gclwh5_1*npz*rxp2_2*(sj15*sj15)))+(((-0.0963180554)*gclwh7_1*npy*pz))+(((-2.0)*cj15*gclwh9_15*npx*pz*rxp2_2))+(((0.104795963009178)*gclwh15_1*npz*r21*(cj15*cj15)))+(((0.0074858)*gclwh13_0*r22*rxp1_2*sj15))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((-0.1881520318)*cj15*gclwh13_1*pp*r20))+(((0.000963180554)*gclwh7_1*rxp0_2*sj15))+(((0.0004)*gclwh2_1*npz*rxp0_2*sj15))+(((-0.1883520318)*gclwh9_1*pp*r20))+(((0.1397930041)*gclwh11_0*pz*r22*sj15))+(((0.093754714775811)*gclwh11_11*r22*sj15))+(((-0.5599720164)*cj15*gclwh5_1*npz*rxp2_2*sj15))+(((-0.1401930041)*cj15*gclwh9_11*npz*r20))+(((-0.000963180554)*gclwh11_1*pz))+(((-0.04)*cj15*gclwh15_1*npy*npz*pz*sj15))+(((-0.02)*gclwh0_0*pz*rxp1_2))+(((0.0074858)*cj15*gclwh2_0*pz*r21))+(((0.02)*gclwh7_1*pp*rxp0_2*sj15))+(((0.069)*cj15*gclwh13_0*pp*r20))+(((0.093754714775811)*cj15*gclwh15_11*r21))+(((2.0)*cj15*gclwh13_1*npx*pp*pz))+(((0.052323123504589)*cj15*gclwh0_0*r20*r22*sj15))+(((0.02)*cj15*gclwh9_11*npz*rxp1_2*sj15))+(((0.1399930041)*gclwh13_15*r20*rxp2_2*(cj15*cj15)))+(((-0.0096595172829)*gclwh2_0*r21*sj15))+(((-7.4858e-5)*gclwh15_0*r21*r22*(sj15*sj15)))+(((0.0963180554)*gclwh9_1*npx*pz))+(((-2.0)*cj15*gclwh11_9*npz*pz*r22*sj15))+(((-1.0)*gclwh11_1*r22*sj15*(pp*pp)))+(((0.036050884955666)*gclwh13_1*rxp1_2))+(((-2.0)*gclwh15_9*npy*pz*r22*(cj15*cj15)))+(((-0.01)*gclwh9_0*pp*r20*r22*sj15))+(((-0.104945679009178)*cj15*gclwh7_1*npz*r21))+(((0.02)*cj15*gclwh13_1*npz*pp*r20*sj15))+(((-0.005013315118)*cj15*gclwh11_11*r22))+(((-0.1881520318)*cj15*gclwh15_1*pp*r21))+(((0.74858)*cj15*gclwh0_0*npx*pz*r22*sj15))+(((0.0074858)*gclwh15_0*pz*r21*sj15))+(((-0.004201790123)*cj15*gclwh13_0*r20*r22*sj15))+(((-0.74858)*gclwh15_1*pp*rxp0_2))+(((-0.0133942)*gclwh7_11*rxp0_2*sj15))+(((-1.0)*cj15*gclwh7_9*pp*r21*r22))+(((-0.093888656775811)*gclwh7_11*r21))+(((-0.004201790123)*cj15*gclwh15_0*r21*r22*sj15))+(((0.66971)*gclwh9_11*pp*r20))+(((-0.04)*gclwh2_1*npy*npz*pz*(sj15*sj15)))+(((-0.05165202)*gclwh5_0*rxp2_2*sj15))+(((-1.0)*gclwh2_1*r21*sj15*(pp*pp)))+(((2.0)*cj15*gclwh7_9*npy*pz*r22))+(((0.02)*cj15*gclwh11_15*pz*rxp2_2))+(((0.02)*cj15*gclwh5_0*pz*rxp2_2))+(((0.74858)*cj15*gclwh11_0*npz*pz*r22*sj15))+(((-1.49716)*gclwh15_1*npy*npz*pz*(cj15*cj15)))+(((2.0)*cj15*gclwh7_15*npy*pz*rxp2_2))+(((0.1399930041)*gclwh15_15*r21*rxp2_2*(cj15*cj15)))+(((0.0133942)*gclwh11_11*pz))+(((0.74858)*cj15*gclwh7_1*pp*rxp0_2))+(((2.0)*gclwh13_11*npx*npz*pz*(cj15*cj15)))+(((-0.04)*gclwh0_1*npx*npz*pz*(sj15*sj15)))+(((-0.138)*cj15*gclwh13_0*npx*pz))+(((0.008403580246)*cj15*gclwh15_1*npz*r21*sj15))+(((0.02)*cj15*gclwh15_0*npy*pz*r22*sj15))+(((0.0096595172829)*gclwh11_0*r22*sj15))+(((-0.0074858)*gclwh15_0*r22*rxp0_2*sj15))+(((0.0149716)*gclwh5_1*npz*rxp2_2*(cj15*cj15)))+(((-0.74858)*cj15*gclwh7_1*npz*pp*r21))+(((-0.0096733172829)*gclwh7_0*r21))+((cj15*gclwh7_11*npz*pp*r21))+(((-0.00036050884955666)*cj15*gclwh0_1*r20))+(((0.0074858)*cj15*gclwh0_0*pz*r20))+(((-0.052397981504589)*gclwh13_0*r20*r22*(cj15*cj15)))+(((-0.74858)*gclwh13_0*pz*rxp1_2))+(((-0.74858)*cj15*gclwh9_0*pz*rxp1_2))+(((0.74858)*cj15*gclwh9_0*npx*pz*r22))+(((0.0074858)*cj15*gclwh13_9*r20*r22*sj15))+(((-0.37429)*gclwh15_0*pp*r21*r22*(cj15*cj15)))+(((-0.138)*gclwh2_0*npy*pz*sj15))+(((-1.49716)*gclwh13_1*npx*npz*pz*(cj15*cj15)))+(((2.0)*cj15*gclwh15_1*npy*pp*pz))+(((-0.138)*gclwh11_0*npz*pz*sj15))+((gclwh0_0*pp*pz*r20*sj15))+(((0.0074858)*cj15*gclwh0_0*r22*rxp1_2))+(((-0.0074858)*gclwh11_9*(cj15*cj15)*(r22*r22)))+(((-0.0149716)*cj15*gclwh11_0*pz*r22))+(((0.000963180554)*gclwh0_1*rxp1_2))+(((-0.1399930041)*gclwh15_11*npz*r21*(cj15*cj15)))+(((0.1399930041)*cj15*gclwh13_0*pz*r20))+(((-0.0004)*gclwh0_1*npz*rxp1_2*sj15))+(((-0.37429)*cj15*gclwh9_0*pp*r20*r22))+(((0.74858)*gclwh15_0*npy*pz*r22*(cj15*cj15)))+(((0.5603720164)*cj15*gclwh15_1*npz*rxp0_2))+(((-0.74858)*pz))+(((-0.0074858)*gclwh15_1*pp*r21*sj15))+(((-1.0)*cj15*gclwh13_1*r20*(pp*pp)))+(((0.02)*gclwh11_1*npz*pp*r22*(sj15*sj15)))+(((0.0074858)*gclwh11_11*npz*r22*(cj15*cj15)))+(((-0.74858)*gclwh9_9*r22*rxp1_2*(cj15*cj15)))+(((0.069)*gclwh9_0*pp*r20))+(((-0.02)*gclwh2_1*pp*rxp0_2))+(((0.00674192696225811)*gclwh2_1*r21*sj15))+(((0.0074858)*gclwh13_0*pz*r20*sj15))+(((0.1401930041)*cj15*gclwh7_11*npz*r21))+(((0.2801860082)*gclwh9_0*r22*rxp1_2*(cj15*cj15)))+(((-0.104646247009178)*cj15*gclwh0_1*npz*r20*sj15))+(((0.0002)*gclwh7_0*r22*rxp0_2*(sj15*sj15)))+(((-0.74858)*gclwh7_15*rxp0_2*rxp2_2*(cj15*cj15)))+(((-0.00036050884955666)*gclwh15_1*r21*sj15))+(((0.2801860082)*cj15*gclwh13_0*r22*rxp1_2))+(((-0.000963180554)*gclwh2_1*rxp0_2))+(((0.74858)*cj15*gclwh2_0*npy*pz*r22*sj15))+(((-0.02)*gclwh7_0*pz*rxp0_2*sj15))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.74858)*gclwh9_11*npz*rxp1_2*(cj15*cj15)))+(((0.1399930041)*cj15*gclwh15_0*pz*r21))+(((-0.74858)*cj15*gclwh15_11*npz*rxp0_2))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.0005165202)*gclwh13_0*r20*sj15))+(((0.0002)*gclwh9_0*r22*rxp1_2*(sj15*sj15)))+(((0.0074858)*cj15*gclwh15_15*r21*rxp2_2*sj15))+((gclwh13_9*pp*r20*r22*(cj15*cj15)))+(((-0.02)*cj15*gclwh7_9*r22*rxp0_2*sj15))+(((-1.0)*cj15*gclwh7_15*pp*r21*rxp2_2))+(((0.000963180554)*gclwh9_1*rxp1_2*sj15))+(((0.069)*gclwh2_0*pp*r21*sj15))+(((2.0)*cj15*gclwh11_11*pz*sj15*(npz*npz)))+(((0.00138)*gclwh2_0*rxp0_2))+(((0.74858)*gclwh15_0*pz*rxp0_2))+((gclwh11_0*pp*pz*r22*sj15))+((cj15*gclwh11_15*pp*r22*rxp2_2*sj15))+(((1.33942)*gclwh7_11*npy*pz))+(((0.01)*gclwh7_0*pp*r21*r22*sj15))+(((-0.0074858)*cj15*gclwh15_11*npz*r21*sj15))+(((-0.01)*gclwh0_0*pp*r20*r22*(sj15*sj15)))+((gclwh7_1*r21*(pp*pp)))+(((0.001401930041)*gclwh7_0*r21*r22*sj15))+(((-1.49716)*cj15*gclwh2_1*npy*npz*pz*sj15))+(((-1.33942)*gclwh9_11*npx*pz))+(((0.093754714775811)*cj15*gclwh13_11*r20))+(((-0.5603720164)*gclwh9_1*npz*rxp1_2*(cj15*cj15)))+(((-0.02)*cj15*gclwh9_9*r22*rxp1_2*sj15))+(((0.1401930041)*gclwh9_0*pz*r20))+(((-0.5013315118)*cj15*gclwh7_11*rxp0_2))+(((0.00138)*cj15*gclwh5_0*rxp2_2))+(((0.069)*gclwh0_0*pp*r20*sj15))+(((-0.04)*cj15*gclwh13_1*npx*npz*pz*sj15))+(((-0.74858)*gclwh5_0*pz*rxp2_2*sj15))+(((-0.0299432)*cj15*gclwh9_1*npz*rxp1_2*sj15))+(((-0.00675155876779811)*gclwh9_1*r20))+(((0.04)*gclwh7_1*npy*npz*pz*sj15))+((gclwh15_15*pp*r21*rxp2_2*(cj15*cj15)))+(((-0.01)*gclwh11_0*pp*(r22*r22)*(sj15*sj15)))+(((0.0918339764)*gclwh2_1*pp*r21*sj15))+(((0.74858)*cj15*gclwh2_1*npz*pp*r21*sj15))+(((0.0074858)*r22*sj15))+(((-1.0)*gclwh13_11*npz*pp*r20*(cj15*cj15)))+(((2.0)*gclwh0_1*npx*pp*pz*sj15))+(((-0.0004)*gclwh9_1*npz*rxp1_2*(sj15*sj15)))+(((-0.04)*gclwh11_1*pz*(npz*npz)*(sj15*sj15)))+(((0.2801860082)*gclwh7_0*r22*rxp0_2*(cj15*cj15)))+(((-0.1401930041)*cj15*gclwh7_15*r21*rxp2_2))+(((-2.0)*cj15*gclwh13_0*npx*(pz*pz)))+(((0.036050884955666)*gclwh5_1*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh7_0*pz*rxp0_2))+((gclwh13_15*pp*r20*rxp2_2*(cj15*cj15)))+(((-0.5013315118)*cj15*gclwh9_11*rxp1_2))+(((-0.00138)*gclwh9_0*rxp1_2*sj15))+(((-1.0)*cj15*gclwh15_1*r21*(pp*pp)))+(((0.74858)*cj15*gclwh9_1*pp*rxp1_2))+(((-0.0074858)*gclwh11_15*r22*rxp2_2*(cj15*cj15)))+(((-0.0096595172829)*gclwh0_0*r20*sj15))+(((0.005603720164)*gclwh0_1*npz*r20*(cj15*cj15)))+(((-0.000963180554)*cj15*gclwh5_1*rxp2_2))+(((0.02)*gclwh0_0*npx*pz*r22*(sj15*sj15)))+(((0.0149716)*cj15*gclwh9_0*r22*rxp1_2*sj15))+(((0.02)*cj15*gclwh13_0*npx*pz*r22*sj15))+(((-0.001399930041)*gclwh11_0*(r22*r22)*(sj15*sj15)))+(((0.104795963009178)*gclwh13_1*npz*r20*(cj15*cj15)))+(((0.000149716)*gclwh13_1*npz*r20*(sj15*sj15)))+(((-0.0004)*gclwh7_1*npz*rxp0_2*(sj15*sj15)))+(((0.74858)*cj15*gclwh15_15*rxp0_2*rxp2_2))+(((-0.00674192696225811)*gclwh11_1*r22*sj15))+(((-0.002799860082)*gclwh2_1*npz*r21*(sj15*sj15)))+(((-0.37429)*cj15*gclwh0_0*pp*r20*r22*sj15))+(((0.1401930041)*cj15*gclwh9_15*r20*rxp2_2))+(((0.0074858)*cj15*gclwh13_15*r20*rxp2_2*sj15))+(((-0.00138)*gclwh7_0*rxp0_2*sj15))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.00674192696225811)*cj15*gclwh15_1*r21))+(((0.02)*gclwh2_0*npy*pz*r22*(sj15*sj15)))+(((-0.002803860082)*gclwh7_1*npz*r21*sj15))+(((0.138)*gclwh7_0*npy*pz))+(((0.005013315118)*gclwh15_11*r21*sj15))+(((0.036050884955666)*cj15*gclwh9_1*rxp1_2))+(((-0.0074858)*cj15*gclwh0_1*pp*r20))+(((0.1399930041)*cj15*gclwh11_15*r22*rxp2_2*sj15))+(((-0.74858)*cj15*gclwh7_0*npy*pz*r22))+(((0.0963180554)*gclwh2_1*npy*pz*sj15))+(((0.1399930041)*cj15*gclwh11_9*sj15*(r22*r22)))+(((-0.002801860082)*gclwh2_0*r21*r22*(cj15*cj15)))+(((0.02)*gclwh0_1*npz*pp*r20*(sj15*sj15)))+(((-0.1399930041)*cj15*gclwh11_11*npz*r22*sj15))+(((0.069)*cj15*gclwh15_0*pp*r21))+(((2.0)*gclwh15_11*npy*npz*pz*(cj15*cj15)))+(((0.02)*gclwh5_9*r22*rxp2_2*(cj15*cj15)))+(((0.02)*gclwh9_1*pp*rxp1_2*sj15))+(((-0.002799860082)*gclwh0_1*npz*r20*(sj15*sj15)))+(((-0.00036050884955666)*gclwh13_1*r20*sj15))+(((-0.37429)*cj15*gclwh2_0*pp*r21*r22*sj15))+(((2.0)*gclwh2_1*npy*pp*pz*sj15))+(((-0.04)*gclwh9_1*npx*npz*pz*sj15))+(((-0.01)*cj15*gclwh15_0*pp*r21*r22*sj15))+(((0.02)*gclwh0_1*pp*rxp1_2))+(((0.0074858)*gclwh5_0*r22*rxp2_2*(sj15*sj15)))+(((-0.0002)*gclwh2_0*r22*rxp0_2*sj15))+(((-2.0)*cj15*gclwh11_15*npz*pz*rxp2_2*sj15))+(((0.74858)*gclwh13_0*npx*pz*r22*(cj15*cj15)))+(((-0.052472839504589)*cj15*gclwh9_0*r20*r22))+(((0.02)*gclwh2_1*npz*pp*r21*(sj15*sj15)))+(((0.5013315118)*gclwh15_11*rxp0_2))+(((0.2799860082)*cj15*gclwh5_0*r22*rxp2_2*sj15))+(((-1.0)*cj15*gclwh11_11*npz*pp*r22*sj15))+(((-0.0299432)*cj15*gclwh7_1*npz*rxp0_2*sj15))+((cj15*gclwh11_9*pp*sj15*(r22*r22)))+(((-0.2801860082)*cj15*gclwh15_0*r22*rxp0_2))+(((0.02)*gclwh11_0*npz*pz*r22*(sj15*sj15)))+(((-0.052323123504589)*cj15*gclwh11_0*sj15*(r22*r22)))+(((-1.0)*gclwh0_1*r20*sj15*(pp*pp)))+(((-0.74858)*gclwh9_15*rxp1_2*rxp2_2*(cj15*cj15)))+(((-2.0)*gclwh13_9*npx*pz*r22*(cj15*cj15)))+(((-1.33942)*cj15*gclwh13_11*npx*pz))+(((0.1399930041)*cj15*r22))+(((-0.1401930041)*cj15*gclwh7_9*r21*r22))+(((0.052323123504589)*cj15*gclwh2_0*r21*r22*sj15))+(((-0.001401930041)*gclwh9_0*r20*r22*sj15))+(((0.002803860082)*gclwh9_1*npz*r20*sj15))+((cj15*gclwh9_9*pp*r20*r22))+(((-0.036050884955666)*gclwh15_1*rxp0_2))+(((-1.33942)*gclwh11_11*npz*pz*sj15))+(((-2.0)*gclwh13_15*npx*pz*rxp2_2*(cj15*cj15)))+(((0.74858)*gclwh5_1*pp*rxp2_2*sj15))+(((-0.005603720164)*gclwh11_1*npz*r22*(cj15*cj15)))+(((0.00138)*gclwh11_0*pz))+(((0.0074858)*cj15*gclwh15_9*r21*r22*sj15))+(((-0.02)*cj15*gclwh5_1*pp*rxp2_2)));
op[71]=((-0.0825119764)+(((0.74858)*gclwh15_9*rxp0_2))+(((0.0059084)*gclwh7_13*rxp0_2*sj15))+(((0.2211455036)*cj15*gclwh9_13*rxp1_2))+(((-0.0005165202)*cj15*gclwh11_11*r22))+(((-0.041356733271222)*cj15*gclwh15_13*r21))+(((-0.2211455036)*gclwh15_13*rxp0_2))+(((-0.0059084)*cj15*gclwh5_13*rxp2_2))+(((0.29542)*gclwh7_13*pp*r21))+(((0.02)*gclwh11_9*pz))+(((-0.00138)*gclwh9_11*rxp1_2*sj15))+(((-0.041356733271222)*gclwh11_13*r22*sj15))+(((-1.0)*gclwh7_9*pp*r21))+(((0.069)*cj15*gclwh13_11*pp*r20))+(((0.59084)*gclwh11_13*npz*pz*sj15))+(((-2.0)*cj15*gclwh15_9*npy*pz))+(((-0.041356733271222)*cj15*gclwh13_13*r20))+(((-0.002211455036)*gclwh13_13*r20*sj15))+(((-0.74858)*cj15*gclwh9_9*rxp1_2))+(((0.1399930041)*gclwh11_9*r22*sj15))+(((0.0005165202)*gclwh15_11*r21*sj15))+(((-0.0096733172829)*gclwh7_11*r21))+(((-0.138)*cj15*gclwh13_11*npx*pz))+(((0.1401930041)*gclwh9_9*r20))+(((0.0005165202)*gclwh13_11*r20*sj15))+(((-0.05165202)*gclwh13_11*rxp1_2))+(((-0.1401930041)*gclwh7_9*r21))+(((0.0096595172829)*gclwh11_11*r22*sj15))+(((0.1399930041)*cj15*gclwh15_9*r21))+(((0.069)*cj15*gclwh15_11*pp*r21))+(((0.02)*cj15*gclwh5_9*rxp2_2))+(((0.2211455036)*cj15*gclwh7_13*rxp0_2))+(((-0.138)*gclwh11_11*npz*pz*sj15))+(((-0.05165202)*cj15*gclwh7_11*rxp0_2))+(((0.05165202)*gclwh15_11*rxp0_2))+(((-0.59084)*gclwh7_13*npy*pz))+(((-0.74858)*gclwh5_9*rxp2_2*sj15))+(((-0.29542)*cj15*gclwh13_13*pp*r20))+(((-0.0059084)*gclwh11_13*pz))+(((-0.138)*cj15*gclwh15_11*npy*pz))+(((-0.138)*gclwh9_11*npx*pz))+(((0.0096595172829)*cj15*gclwh13_11*r20))+((cj15*gclwh15_9*pp*r21))+(((0.069)*gclwh9_11*pp*r20))+(((-2.0)*cj15*gclwh13_9*npx*pz))+(((-2.0)*gclwh9_9*npx*pz))+(((-0.74858)*cj15*gclwh7_9*rxp0_2))+(((-0.74858)*gclwh13_9*rxp1_2))+(((-0.0074858)*cj15*gclwh11_9*r22))+(((-0.29542)*cj15*gclwh15_13*pp*r21))+(((-0.069)*gclwh7_11*pp*r21))+(((-0.29542)*gclwh11_13*pp*r22*sj15))+(((0.2211455036)*gclwh5_13*rxp2_2*sj15))+(((-0.02)*gclwh9_9*rxp1_2*sj15))+(((-0.05165202)*cj15*gclwh9_11*rxp1_2))+((gclwh9_9*pp*r20))+(((0.0059084)*gclwh9_13*rxp1_2*sj15))+(((-2.0)*gclwh11_9*npz*pz*sj15))+(((-0.00138)*gclwh7_11*rxp0_2*sj15))+(((0.002211455036)*cj15*gclwh11_13*r22))+(((0.59084)*cj15*gclwh13_13*npx*pz))+((gclwh11_9*pp*r22*sj15))+(((0.0074858)*gclwh15_9*r21*sj15))+((cj15*gclwh13_9*pp*r20))+(((0.00138)*gclwh11_11*pz))+(((0.0074858)*gclwh13_9*r20*sj15))+(((0.069)*gclwh11_11*pp*r22*sj15))+(((-0.041415817271222)*gclwh9_13*r20))+(((2.0)*gclwh7_9*npy*pz))+(((0.0096595172829)*cj15*gclwh15_11*r21))+(((0.0096733172829)*gclwh9_11*r20))+(((0.1399930041)*cj15*gclwh13_9*r20))+(((-0.002211455036)*gclwh15_13*r21*sj15))+(((0.59084)*cj15*gclwh15_13*npy*pz))+(((-0.02)*gclwh7_9*rxp0_2*sj15))+(((-0.29542)*gclwh9_13*pp*r20))+(((0.138)*gclwh7_11*npy*pz))+(((0.2211455036)*gclwh13_13*rxp1_2))+(((0.041415817271222)*gclwh7_13*r21))+(((0.59084)*gclwh9_13*npx*pz)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j11array[16], cj11array[16], sj11array[16], j12array[16], cj12array[16], sj12array[16], j13array[16], cj13array[16], sj13array[16];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ij11 += 3)
{
IkReal htj11 = zeror[ij11+0], htj12 = zeror[ij11+1], htj13 = zeror[ij11+2];
if(isnan(htj11)||isnan(htj12)||isnan(htj13)){
continue;
}
j11array[numsolutions]=((2.0)*(atan(htj11)));
j12array[numsolutions]=((2.0)*(atan(htj12)));
j13array[numsolutions]=((2.0)*(atan(htj13)));
if(isinf(htj11)){
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
}
else{
IkReal x647=htj11*htj11;
CheckValue<IkReal> x648=IKPowWithIntegerCheck(((1.0)+x647),-1);
if(!x648.valid){
continue;
}
cj11array[numsolutions]=((x648.value)*(((1.0)+(((-1.0)*x647)))));
CheckValue<IkReal> x649=IKPowWithIntegerCheck(((1.0)+(htj11*htj11)),-1);
if(!x649.valid){
continue;
}
sj11array[numsolutions]=((2.0)*htj11*(x649.value));
}
if(isinf(htj12)){
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
}
else{
IkReal x650=htj12*htj12;
CheckValue<IkReal> x651=IKPowWithIntegerCheck(((1.0)+x650),-1);
if(!x651.valid){
continue;
}
cj12array[numsolutions]=((x651.value)*(((1.0)+(((-1.0)*x650)))));
CheckValue<IkReal> x652=IKPowWithIntegerCheck(((1.0)+(htj12*htj12)),-1);
if(!x652.valid){
continue;
}
sj12array[numsolutions]=((2.0)*htj12*(x652.value));
}
if(isinf(htj13)){
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
}
else{
IkReal x653=htj13*htj13;
CheckValue<IkReal> x654=IKPowWithIntegerCheck(((1.0)+x653),-1);
if(!x654.valid){
continue;
}
cj13array[numsolutions]=((x654.value)*(((1.0)+(((-1.0)*x653)))));
CheckValue<IkReal> x655=IKPowWithIntegerCheck(((1.0)+(htj13*htj13)),-1);
if(!x655.valid){
continue;
}
sj13array[numsolutions]=((2.0)*htj13*(x655.value));
}
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j11valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj11 = 16;
_nj12 = 1;
_nj13 = 1;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
_ij12[0] = 0; _ij12[1] = -1;
_ij13[0] = 0; _ij13[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( !j11valid[iij11] ) { continue; }
if( IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(cj12array[ij11]-cj12array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij11]-sj12array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(cj13array[ij11]-cj13array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij11]-sj13array[iij11]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j11valid[iij11]=false; _ij11[1] = iij11; _ij12[1] = 0; _ij13[1] = 0;  break;
}
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

    j12 = j12array[ij11]; cj12 = cj12array[ij11]; sj12 = sj12array[ij11];

    j13 = j13array[ij11]; cj13 = cj13array[ij11]; sj13 = sj13array[ij11];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j16eval[2];
IkReal x656=((1000.0)*cj15);
IkReal x657=((37429.0)*sj15);
IkReal x658=cj15*cj15;
IkReal x659=r20*r20;
IkReal x660=r21*r21;
IkReal x661=((74.858)*cj15*sj15);
IkReal x662=((1400.930041)*(sj15*sj15));
j16eval[0]=((IKabs(((((-1.0)*r20*x657))+((r20*x656)))))+(IKabs(((((-1.0)*r21*x657))+((r21*x656))))));
j16eval[1]=(((x658*x660))+((x659*x662))+((x658*x659))+((x660*x662))+(((-1.0)*x660*x661))+(((-1.0)*x659*x661)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r20))+(IKabs(r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x663=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x663);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x663);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=r22;
j14eval[1]=sj15;
j14eval[2]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x664=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x664);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x664);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=r22;
j14eval[1]=sj15;
j14eval[2]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[8+1], zeror[8];
int numroots;
IkReal x665=((-1.0)*(((1.0)*py)));
IkReal x666=((0.01)*r11);
IkReal x667=(x666+x665);
IkReal x668=((((-1.0)*x666))+x665);
IkReal x669=((0.01)*r01);
IkReal x670=((-1.0)*(((1.0)*px)));
IkReal x671=(cj12*sj11);
IkReal x672=((0.069)*x671);
IkReal x673=((0.069)+(((-1.0)*x672))+x670);
IkReal x674=(x669+x673);
IkReal x675=((-1.0)*x669);
IkReal x676=(x675+x673);
IkReal x677=((0.138)+(((-0.138)*x671)));
IkReal x678=((-0.069)+x670+x672);
IkReal x679=(x669+x678);
IkReal x680=(x675+x678);
IkReal gconst40=x667;
IkReal gconst41=x668;
IkReal gconst42=x674;
IkReal gconst43=x676;
IkReal gconst44=x667;
IkReal gconst45=x668;
IkReal gconst46=x674;
IkReal gconst47=x676;
IkReal gconst48=x677;
IkReal gconst49=x677;
IkReal gconst50=x677;
IkReal gconst51=x677;
IkReal gconst52=x667;
IkReal gconst53=x668;
IkReal gconst54=x679;
IkReal gconst55=x680;
IkReal gconst56=x667;
IkReal gconst57=x668;
IkReal gconst58=x679;
IkReal gconst59=x680;
IkReal x681=(gconst52*gconst55*gconst58);
IkReal x682=(gconst53*gconst54*gconst59);
IkReal x683=((1.0)*gconst52*gconst59);
IkReal x684=((1.0)*gconst53*gconst54*gconst58);
IkReal x685=(gconst53*gconst58*r00*r10);
IkReal x686=(gconst55*gconst56*r00*r10);
IkReal x687=r00*r00;
IkReal x688=(gconst53*gconst56*x687);
IkReal x689=r10*r10;
IkReal x690=(gconst55*gconst58*x689);
IkReal x691=((((-0.0004)*x688))+(((0.0004)*x686))+(((0.0004)*x685))+(((-0.0004)*x690)));
IkReal x692=(gconst49*gconst58*r00*r10);
IkReal x693=(gconst50*gconst55*r00*r10);
IkReal x694=(gconst49*gconst56*x687);
IkReal x695=(gconst50*gconst53*x687);
IkReal x696=((((-0.0004)*x695))+(((-0.0004)*x694))+(((0.0004)*x692))+(((0.0004)*x693)));
IkReal x697=(gconst48*gconst55*gconst58);
IkReal x698=(gconst49*gconst54*gconst59);
IkReal x699=((1.0)*gconst48*gconst55*gconst59);
IkReal x700=((1.0)*gconst49*gconst54*gconst58);
IkReal x701=(gconst41*gconst58*r00*r10);
IkReal x702=(gconst43*gconst56*r00*r10);
IkReal x703=(gconst44*gconst55*r00*r10);
IkReal x704=(gconst46*gconst53*r00*r10);
IkReal x705=(gconst41*gconst56*x687);
IkReal x706=(gconst43*gconst58*x689);
IkReal x707=(gconst44*gconst53*x687);
IkReal x708=(gconst46*gconst55*x689);
IkReal x709=(gconst49*gconst50*x687);
IkReal x710=((((-0.0004)*x708))+(((-0.0004)*x706))+(((-0.0004)*x707))+(((0.0004)*x704))+(((-0.0004)*x705))+(((0.0004)*x703))+(((0.0004)*x701))+(((-0.0004)*x709))+(((0.0004)*x702)));
IkReal x711=(gconst40*gconst55*gconst58);
IkReal x712=(gconst41*gconst54*gconst59);
IkReal x713=(gconst42*gconst53*gconst59);
IkReal x714=(gconst43*gconst52*gconst58);
IkReal x715=(gconst44*gconst54*gconst59);
IkReal x716=(gconst45*gconst55*gconst58);
IkReal x717=(gconst46*gconst52*gconst55);
IkReal x718=(gconst47*gconst53*gconst54);
IkReal x719=((1.0)*gconst40*gconst55*gconst59);
IkReal x720=((1.0)*gconst41*gconst54*gconst58);
IkReal x721=((1.0)*gconst42*gconst53*gconst58);
IkReal x722=(gconst44*gconst55);
IkReal x723=((1.0)*gconst45*gconst54*gconst58);
IkReal x724=((1.0)*gconst46*gconst53*gconst54);
IkReal x725=((1.0)*gconst47*gconst52*gconst55);
IkReal x726=(gconst43*gconst50*r00*r10);
IkReal x727=(gconst46*gconst49*r00*r10);
IkReal x728=(gconst41*gconst50*x687);
IkReal x729=(gconst44*gconst49*x687);
IkReal x730=((((0.0004)*x727))+(((-0.0004)*x728))+(((-0.0004)*x729))+(((0.0004)*x726)));
IkReal x731=(gconst42*gconst49*gconst59);
IkReal x732=(gconst43*gconst48*gconst58);
IkReal x733=(gconst46*gconst48*gconst55);
IkReal x734=(gconst47*gconst49*gconst54);
IkReal x735=((1.0)*gconst42*gconst49*gconst58);
IkReal x736=((1.0)*gconst43*gconst48*gconst59);
IkReal x737=((1.0)*gconst46*gconst49*gconst54);
IkReal x738=((1.0)*gconst47*gconst48*gconst55);
IkReal x739=(gconst40*gconst43*gconst58);
IkReal x740=(gconst40*gconst45*gconst55);
IkReal x741=(gconst40*gconst46*gconst55);
IkReal x742=(gconst41*gconst42*gconst59);
IkReal x743=(gconst41*gconst44*gconst54);
IkReal x744=(gconst41*gconst47*gconst54);
IkReal x745=(gconst42*gconst44*gconst59);
IkReal x746=(gconst42*gconst47*gconst53);
IkReal x747=(gconst43*gconst45*gconst58);
IkReal x748=(gconst43*gconst46*gconst52);
IkReal x749=(gconst44*gconst47*gconst54);
IkReal x750=(gconst45*gconst46*gconst55);
IkReal x751=((1.0)*gconst40*gconst43*gconst59);
IkReal x752=((1.0)*gconst40*gconst44*gconst55);
IkReal x753=((1.0)*gconst40*gconst47*gconst55);
IkReal x754=((1.0)*gconst41*gconst42*gconst58);
IkReal x755=((1.0)*gconst41*gconst45*gconst54);
IkReal x756=((1.0)*gconst41*gconst46*gconst54);
IkReal x757=(gconst41*gconst46*r00*r10);
IkReal x758=((0.0004)*x757);
IkReal x759=((1.0)*gconst42*gconst45*gconst58);
IkReal x760=((1.0)*gconst42*gconst46*gconst53);
IkReal x761=((1.0)*gconst43*gconst44*gconst59);
IkReal x762=(gconst43*gconst44*r00*r10);
IkReal x763=((0.0004)*x762);
IkReal x764=((1.0)*gconst43*gconst47*gconst52);
IkReal x765=((1.0)*gconst44*gconst47*gconst55);
IkReal x766=((1.0)*gconst45*gconst46*gconst54);
IkReal x767=(gconst41*gconst44*x687);
IkReal x768=((-0.0004)*x767);
IkReal x769=(gconst43*gconst46*x689);
IkReal x770=((-0.0004)*x769);
IkReal x771=(gconst42*gconst47*gconst49);
IkReal x772=(gconst43*gconst46*gconst48);
IkReal x773=((1.0)*gconst42*gconst46*gconst49);
IkReal x774=((1.0)*gconst43*gconst47*gconst48);
IkReal x775=(gconst40*gconst43*gconst45);
IkReal x776=(gconst40*gconst43*gconst46);
IkReal x777=(gconst41*gconst42*gconst44);
IkReal x778=(gconst41*gconst42*gconst47);
IkReal x779=(gconst42*gconst44*gconst47);
IkReal x780=(gconst43*gconst45*gconst46);
IkReal x781=((1.0)*gconst40*gconst43*gconst44);
IkReal x782=((1.0)*gconst40*gconst43*gconst47);
IkReal x783=((1.0)*gconst41*gconst42*gconst45);
IkReal x784=((1.0)*gconst41*gconst42*gconst46);
IkReal x785=((1.0)*gconst42*gconst45*gconst46);
IkReal x786=((1.0)*gconst43*gconst44*gconst47);
op[0]=((((-1.0)*gconst55*gconst56*x683))+((gconst56*x682))+(((-1.0)*gconst57*x684))+((gconst57*x681))+x691);
op[1]=((((-1.0)*gconst56*x699))+((gconst50*x682))+((gconst51*x681))+(((-1.0)*gconst51*x684))+((gconst56*x698))+x696+(((-1.0)*gconst57*x700))+((gconst57*x697))+(((-1.0)*gconst50*gconst55*x683)));
op[2]=((((-1.0)*gconst57*x724))+(((-1.0)*gconst43*gconst56*x683))+((gconst56*x713))+(((-1.0)*gconst51*x700))+(((-1.0)*gconst57*x721))+((gconst50*x698))+((gconst51*x697))+(((-1.0)*gconst50*x699))+((gconst56*x718))+(((-0.0008)*x688))+(((-1.0)*gconst53*x723))+((gconst57*x717))+x710+(((-0.0008)*x690))+((gconst52*x716))+((gconst57*x711))+(((-1.0)*gconst57*x720))+((gconst57*x714))+((gconst53*x715))+(((0.0008)*x685))+(((-1.0)*gconst56*x719))+((gconst56*x712))+(((-1.0)*gconst56*x725))+(((0.0008)*x686))+(((-1.0)*x683*x722)));
op[3]=((((-1.0)*gconst57*x735))+(((-1.0)*gconst51*x721))+(((-1.0)*gconst43*gconst50*x683))+(((-1.0)*gconst49*x723))+((gconst57*x733))+((gconst48*x716))+((gconst50*x712))+(((-1.0)*gconst51*x724))+(((-1.0)*gconst57*x737))+(((-1.0)*gconst51*x720))+((gconst49*x715))+((gconst51*x717))+(((-0.0008)*x695))+((gconst57*x732))+(((-1.0)*gconst50*x719))+(((-0.0008)*x694))+(((-1.0)*gconst56*x736))+((gconst50*x713))+((gconst50*x718))+x730+(((-1.0)*gconst56*x738))+((gconst56*x734))+((gconst51*x711))+(((0.0008)*x693))+(((-1.0)*gconst48*gconst59*x722))+((gconst51*x714))+(((0.0008)*x692))+((gconst56*x731))+(((-1.0)*gconst50*x725)));
op[4]=((((-1.0)*gconst53*x766))+(((-1.0)*gconst58*x755))+(((0.0008)*x704))+(((-1.0)*gconst57*x754))+((gconst59*x743))+(((-1.0)*gconst52*x765))+((gconst57*x741))+(((-1.0)*gconst50*x738))+(((-0.0008)*x705))+((gconst50*x734))+((gconst56*x746))+(((-0.0008)*x709))+(((-1.0)*gconst52*x761))+(((-0.0008)*x707))+(((-1.0)*gconst51*x737))+((gconst51*x733))+(((-1.0)*gconst56*x753))+(((-1.0)*gconst50*x736))+(((-1.0)*gconst57*x756))+x763+x768+(((0.0008)*x701))+(((-1.0)*gconst57*x760))+(((-0.0008)*x708))+((gconst51*x732))+x691+(((0.0008)*x703))+((gconst58*x740))+(((-1.0)*gconst59*x752))+((gconst50*x731))+((gconst52*x747))+((gconst53*x749))+x770+(((-1.0)*gconst51*x735))+((gconst57*x748))+(((0.0008)*x702))+x758+(((-1.0)*gconst56*x751))+(((-0.0008)*x706))+((gconst52*x750))+(((-1.0)*gconst56*x764))+((gconst56*x744))+((gconst57*x739))+((gconst53*x745))+(((-1.0)*gconst53*x759))+((gconst56*x742)));
op[5]=((((0.0008)*x726))+(((-1.0)*gconst48*x761))+(((-1.0)*gconst51*x760))+((gconst48*x747))+(((-1.0)*gconst50*x753))+(((-1.0)*gconst57*x773))+((gconst51*x748))+(((-1.0)*gconst51*x756))+(((0.0008)*x727))+(((-1.0)*gconst49*x766))+(((-1.0)*gconst49*x759))+((gconst48*x750))+((gconst49*x749))+((gconst50*x744))+(((-0.0008)*x728))+(((-1.0)*gconst51*x754))+((gconst50*x746))+(((-1.0)*gconst50*x764))+(((-1.0)*gconst48*x765))+((gconst51*x739))+(((-1.0)*gconst56*x774))+((gconst49*x745))+x696+(((-1.0)*gconst50*x751))+((gconst56*x771))+((gconst57*x772))+((gconst51*x741))+(((-0.0008)*x729))+((gconst50*x742)));
op[6]=(((gconst56*x778))+(((-0.0008)*x767))+(((0.0008)*x757))+((gconst53*x779))+(((-1.0)*gconst52*x786))+((gconst46*x740))+(((-1.0)*gconst51*x773))+(((-0.0008)*x769))+(((-1.0)*gconst50*x774))+((gconst52*x780))+(((-1.0)*gconst57*x784))+(((0.0008)*x762))+((gconst51*x772))+(((-1.0)*gconst59*x781))+(((-1.0)*gconst56*x782))+((gconst57*x776))+((gconst58*x775))+x710+(((-1.0)*gconst58*x783))+(((-1.0)*gconst47*x752))+((gconst50*x771))+(((-1.0)*gconst46*x755))+((gconst47*x743))+((gconst59*x777))+(((-1.0)*gconst53*x785)));
op[7]=(((gconst48*x780))+((gconst51*x776))+(((-1.0)*gconst48*x786))+(((-1.0)*gconst51*x784))+x730+(((-1.0)*gconst50*x782))+((gconst49*x779))+(((-1.0)*gconst49*x785))+((gconst50*x778)));
op[8]=((((-1.0)*gconst46*x783))+((gconst47*x777))+x763+x768+((gconst46*x775))+x770+x758+(((-1.0)*gconst47*x781)));
polyroots8(op,zeror,numroots);
IkReal j10array[8], cj10array[8], sj10array[8], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[8]={true,true,true,true,true,true,true,true};
_nj10 = 8;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
{
IkReal j16eval[3];
IkReal x787=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x787);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x787);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x788=((6.9)*cj10);
IkReal x789=(r10*x788);
IkReal x790=((6.9)*sj10);
IkReal x791=(r00*x790);
IkReal x792=(cj12*sj11);
IkReal x793=(r11*x788);
IkReal x794=(r01*x790);
j16eval[0]=r22;
j16eval[1]=((IKabs((x789+(((-1.0)*x791))+(((100.0)*rxp0_2))+(((-1.0)*x789*x792))+((x791*x792)))))+(IKabs(((((-1.0)*x793))+((x792*x793))+(((-1.0)*x792*x794))+(((-1.0)*(100.0)*rxp1_2))+x794))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x795=((6.9)*sj10);
IkReal x796=(cj12*sj11);
IkReal x797=(x795*x796);
IkReal x798=((6.9)*cj10);
IkReal x799=(x796*x798);
CheckValue<IkReal> x800=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x800.valid){
continue;
}
CheckValue<IkReal> x801 = IKatan2WithCheck(IkReal((((r11*(((((-1.0)*x798))+x799))))+((r01*(((((-1.0)*x797))+x795))))+(((-1.0)*(100.0)*rxp1_2)))),IkReal(((((100.0)*rxp0_2))+((r00*(((((-1.0)*x795))+x797))))+((r10*(((((-1.0)*x799))+x798)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x801.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x800.value)))+(x801.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x802=((0.069)*cj10);
IkReal x803=((0.01)*(IKsin(j16)));
IkReal x804=((0.01)*(IKcos(j16)));
IkReal x805=(cj12*sj11);
IkReal x806=((0.069)*sj10);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x804))+(((-1.0)*x802*x805))+x802+((r00*x803)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*x805*x806))+((r11*x804))+x806+((r10*x803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
IkReal x807=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x807);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x807);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x808=cj16*cj16;
IkReal x809=cj12*cj12;
IkReal x810=(x809*(cj10*cj10));
IkReal x811=sj16*sj16;
IkReal x812=(x809*(sj10*sj10));
j14eval[0]=r22;
j14eval[1]=IKsign(r22);
j14eval[2]=(((x808*x810))+((x810*x811))+((x808*x812))+((x811*x812)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x813=(cj10*cj12*cj16);
IkReal x814=(cj12*cj16*sj10);
IkReal x815=(cj10*cj12*sj16);
IkReal x816=(cj12*sj10*sj16);
CheckValue<IkReal> x817=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x817.valid){
continue;
}
CheckValue<IkReal> x818 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x815))+(((-1.0)*r11*x816))+((r10*x814))+((r00*x813)))),IkReal((((r01*x813))+((r11*x814))+((r10*x816))+((r00*x815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x818.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x817.value)))+(x818.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x819=(cj10*cj12);
IkReal x820=IKcos(j14);
IkReal x821=(cj16*x820);
IkReal x822=IKsin(j14);
IkReal x823=((1.0)*cj16*x822);
IkReal x824=((1.0)*sj16*x822);
IkReal x825=((1.0)*sj16*x820);
IkReal x826=((1.0)*cj12*sj10);
IkReal x827=(sj13*sj16*x822);
IkReal x828=((1.0)*cj16*sj13*x822);
IkReal x829=((1.0)*cj16*sj13*x820);
IkReal x830=((1.0)*sj13*sj16*x820);
IkReal x831=(cj13*sj16*x822);
IkReal x832=((1.0)*cj13*cj16*x822);
IkReal x833=((1.0)*cj13*cj16*x820);
IkReal x834=((1.0)*cj13*sj16*x820);
evalcond[0]=((((-1.0)*r11*x825))+(((-1.0)*r10*x824))+((r10*x821))+(((-1.0)*r11*x823))+x819);
evalcond[1]=((((-1.0)*r01*x823))+(((-1.0)*r00*x824))+((r00*x821))+(((-1.0)*x826))+(((-1.0)*r01*x825)));
evalcond[2]=((((-1.0)*r00*x828))+((r01*x827))+(((-1.0)*r00*x830))+(((-1.0)*r01*x829)));
evalcond[3]=(((r11*x827))+(((-1.0)*r10*x828))+(((-1.0)*r10*x830))+(((-1.0)*r11*x829)));
evalcond[4]=((((-1.0)*r10*x832))+((r11*x831))+(((-1.0)*r10*x834))+(((-1.0)*r11*x833))+(((-1.0)*sj11*x826)));
evalcond[5]=((((-1.0)*r00*x834))+(((-1.0)*sj11*x819))+(((-1.0)*r01*x833))+((r01*x831))+(((-1.0)*r00*x832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[8+1], zeror[8];
int numroots;
IkReal x835=((-1.0)*(((1.0)*py)));
IkReal x836=((0.01)*r11);
IkReal x837=((((-1.0)*x836))+x835);
IkReal x838=(x835+x836);
IkReal x839=((0.01)*r01);
IkReal x840=((-1.0)*x839);
IkReal x841=((-1.0)*(((1.0)*px)));
IkReal x842=(cj12*sj11);
IkReal x843=((0.069)*x842);
IkReal x844=((0.069)+(((-1.0)*x843))+x841);
IkReal x845=(x840+x844);
IkReal x846=(x839+x844);
IkReal x847=((0.138)+(((-0.138)*x842)));
IkReal x848=((-0.069)+x843+x841);
IkReal x849=(x848+x840);
IkReal x850=(x839+x848);
IkReal gconst76=x837;
IkReal gconst77=x838;
IkReal gconst78=x845;
IkReal gconst79=x846;
IkReal gconst80=x837;
IkReal gconst81=x838;
IkReal gconst82=x845;
IkReal gconst83=x846;
IkReal gconst84=x847;
IkReal gconst85=x847;
IkReal gconst86=x847;
IkReal gconst87=x847;
IkReal gconst88=x837;
IkReal gconst89=x838;
IkReal gconst90=x849;
IkReal gconst91=x850;
IkReal gconst92=x837;
IkReal gconst93=x838;
IkReal gconst94=x849;
IkReal gconst95=x850;
IkReal x851=(gconst88*gconst91*gconst94);
IkReal x852=(gconst89*gconst90*gconst95);
IkReal x853=((1.0)*gconst88*gconst95);
IkReal x854=((1.0)*gconst89*gconst90*gconst94);
IkReal x855=(gconst89*gconst94*r00*r10);
IkReal x856=(gconst91*gconst92*r00*r10);
IkReal x857=r00*r00;
IkReal x858=(gconst89*gconst92*x857);
IkReal x859=r10*r10;
IkReal x860=(gconst91*gconst94*x859);
IkReal x861=((((0.0004)*x855))+(((-0.0004)*x858))+(((0.0004)*x856))+(((-0.0004)*x860)));
IkReal x862=(gconst85*gconst94*r00*r10);
IkReal x863=(gconst86*gconst91*r00*r10);
IkReal x864=(gconst85*gconst92*x857);
IkReal x865=(gconst86*gconst89*x857);
IkReal x866=((((0.0004)*x862))+(((0.0004)*x863))+(((-0.0004)*x864))+(((-0.0004)*x865)));
IkReal x867=(gconst84*gconst91*gconst94);
IkReal x868=(gconst85*gconst90*gconst95);
IkReal x869=((1.0)*gconst84*gconst91*gconst95);
IkReal x870=((1.0)*gconst85*gconst90*gconst94);
IkReal x871=(gconst77*gconst94*r00*r10);
IkReal x872=(gconst79*gconst92*r00*r10);
IkReal x873=(gconst80*gconst91*r00*r10);
IkReal x874=(gconst82*gconst89*r00*r10);
IkReal x875=(gconst77*gconst92*x857);
IkReal x876=(gconst79*gconst94*x859);
IkReal x877=(gconst80*gconst89*x857);
IkReal x878=(gconst82*gconst91*x859);
IkReal x879=(gconst85*gconst86*x857);
IkReal x880=((((0.0004)*x873))+(((-0.0004)*x877))+(((-0.0004)*x876))+(((-0.0004)*x875))+(((0.0004)*x874))+(((-0.0004)*x879))+(((-0.0004)*x878))+(((0.0004)*x871))+(((0.0004)*x872)));
IkReal x881=(gconst76*gconst91*gconst94);
IkReal x882=(gconst77*gconst90*gconst95);
IkReal x883=(gconst78*gconst89*gconst95);
IkReal x884=(gconst79*gconst88*gconst94);
IkReal x885=(gconst80*gconst90*gconst95);
IkReal x886=(gconst81*gconst91*gconst94);
IkReal x887=(gconst82*gconst88*gconst91);
IkReal x888=(gconst83*gconst89*gconst90);
IkReal x889=((1.0)*gconst76*gconst91*gconst95);
IkReal x890=((1.0)*gconst77*gconst90*gconst94);
IkReal x891=((1.0)*gconst78*gconst89*gconst94);
IkReal x892=(gconst80*gconst91);
IkReal x893=((1.0)*gconst81*gconst90*gconst94);
IkReal x894=((1.0)*gconst82*gconst89*gconst90);
IkReal x895=((1.0)*gconst83*gconst88*gconst91);
IkReal x896=(gconst79*gconst86*r00*r10);
IkReal x897=(gconst82*gconst85*r00*r10);
IkReal x898=(gconst77*gconst86*x857);
IkReal x899=(gconst80*gconst85*x857);
IkReal x900=((((-0.0004)*x899))+(((0.0004)*x897))+(((0.0004)*x896))+(((-0.0004)*x898)));
IkReal x901=(gconst78*gconst85*gconst95);
IkReal x902=(gconst79*gconst84*gconst94);
IkReal x903=(gconst82*gconst84*gconst91);
IkReal x904=(gconst83*gconst85*gconst90);
IkReal x905=((1.0)*gconst78*gconst85*gconst94);
IkReal x906=((1.0)*gconst79*gconst84*gconst95);
IkReal x907=((1.0)*gconst82*gconst85*gconst90);
IkReal x908=((1.0)*gconst83*gconst84*gconst91);
IkReal x909=(gconst76*gconst79*gconst94);
IkReal x910=(gconst76*gconst81*gconst91);
IkReal x911=(gconst76*gconst82*gconst91);
IkReal x912=(gconst77*gconst78*gconst95);
IkReal x913=(gconst77*gconst80*gconst90);
IkReal x914=(gconst77*gconst83*gconst90);
IkReal x915=(gconst78*gconst80*gconst95);
IkReal x916=(gconst78*gconst83*gconst89);
IkReal x917=(gconst79*gconst81*gconst94);
IkReal x918=(gconst79*gconst82*gconst88);
IkReal x919=(gconst80*gconst83*gconst90);
IkReal x920=(gconst81*gconst82*gconst91);
IkReal x921=((1.0)*gconst76*gconst79*gconst95);
IkReal x922=((1.0)*gconst76*gconst80*gconst91);
IkReal x923=((1.0)*gconst76*gconst83*gconst91);
IkReal x924=((1.0)*gconst77*gconst78*gconst94);
IkReal x925=((1.0)*gconst77*gconst81*gconst90);
IkReal x926=((1.0)*gconst77*gconst82*gconst90);
IkReal x927=(gconst77*gconst82*r00*r10);
IkReal x928=((0.0004)*x927);
IkReal x929=((1.0)*gconst78*gconst81*gconst94);
IkReal x930=((1.0)*gconst78*gconst82*gconst89);
IkReal x931=((1.0)*gconst79*gconst80*gconst95);
IkReal x932=(gconst79*gconst80*r00*r10);
IkReal x933=((0.0004)*x932);
IkReal x934=((1.0)*gconst79*gconst83*gconst88);
IkReal x935=((1.0)*gconst80*gconst83*gconst91);
IkReal x936=((1.0)*gconst81*gconst82*gconst90);
IkReal x937=(gconst77*gconst80*x857);
IkReal x938=((-0.0004)*x937);
IkReal x939=(gconst79*gconst82*x859);
IkReal x940=((-0.0004)*x939);
IkReal x941=(gconst78*gconst83*gconst85);
IkReal x942=(gconst79*gconst82*gconst84);
IkReal x943=((1.0)*gconst78*gconst82*gconst85);
IkReal x944=((1.0)*gconst79*gconst83*gconst84);
IkReal x945=(gconst76*gconst79*gconst81);
IkReal x946=(gconst76*gconst79*gconst82);
IkReal x947=(gconst77*gconst78*gconst80);
IkReal x948=(gconst77*gconst78*gconst83);
IkReal x949=(gconst78*gconst80*gconst83);
IkReal x950=(gconst79*gconst81*gconst82);
IkReal x951=((1.0)*gconst76*gconst79*gconst80);
IkReal x952=((1.0)*gconst76*gconst79*gconst83);
IkReal x953=((1.0)*gconst77*gconst78*gconst81);
IkReal x954=((1.0)*gconst77*gconst78*gconst82);
IkReal x955=((1.0)*gconst78*gconst81*gconst82);
IkReal x956=((1.0)*gconst79*gconst80*gconst83);
op[0]=(((gconst93*x851))+(((-1.0)*gconst91*gconst92*x853))+((gconst92*x852))+x861+(((-1.0)*gconst93*x854)));
op[1]=((((-1.0)*gconst86*gconst91*x853))+(((-1.0)*gconst93*x870))+((gconst87*x851))+x866+((gconst93*x867))+(((-1.0)*gconst87*x854))+((gconst86*x852))+((gconst92*x868))+(((-1.0)*gconst92*x869)));
op[2]=((((-1.0)*x853*x892))+(((-1.0)*gconst93*x890))+(((-1.0)*gconst93*x894))+((gconst89*x885))+(((-0.0008)*x858))+(((-1.0)*gconst87*x870))+(((0.0008)*x855))+(((-0.0008)*x860))+((gconst92*x888))+(((-1.0)*gconst86*x869))+((gconst87*x867))+((gconst93*x881))+((gconst92*x882))+x880+(((-1.0)*gconst79*gconst92*x853))+((gconst86*x868))+((gconst88*x886))+((gconst93*x884))+(((-1.0)*gconst89*x893))+(((-1.0)*gconst92*x889))+(((-1.0)*gconst92*x895))+(((0.0008)*x856))+((gconst92*x883))+((gconst93*x887))+(((-1.0)*gconst93*x891)));
op[3]=((((-1.0)*gconst93*x907))+((gconst86*x882))+(((-1.0)*gconst85*x893))+(((0.0008)*x863))+(((-1.0)*gconst87*x894))+((gconst93*x903))+((gconst84*x886))+(((-1.0)*gconst93*x905))+(((-1.0)*gconst86*x889))+(((-1.0)*gconst92*x906))+(((-1.0)*gconst84*gconst95*x892))+x900+((gconst87*x887))+(((-1.0)*gconst86*x895))+((gconst92*x904))+(((-1.0)*gconst79*gconst86*x853))+((gconst87*x884))+((gconst86*x883))+(((0.0008)*x862))+(((-1.0)*gconst87*x890))+((gconst92*x901))+((gconst87*x881))+(((-1.0)*gconst87*x891))+(((-1.0)*gconst92*x908))+(((-0.0008)*x864))+((gconst86*x888))+((gconst93*x902))+(((-0.0008)*x865))+((gconst85*x885)));
op[4]=((((-1.0)*gconst86*x908))+(((-0.0008)*x877))+((gconst89*x919))+(((-1.0)*gconst86*x906))+(((-0.0008)*x875))+(((-1.0)*gconst87*x905))+((gconst93*x918))+(((-1.0)*gconst87*x907))+((gconst93*x909))+((gconst92*x914))+((gconst92*x912))+((gconst86*x904))+((gconst93*x911))+(((-1.0)*gconst94*x925))+(((-1.0)*gconst92*x923))+(((-1.0)*gconst93*x926))+((gconst94*x910))+((gconst89*x915))+(((-0.0008)*x879))+(((-1.0)*gconst89*x929))+(((-1.0)*gconst88*x935))+(((-0.0008)*x878))+(((-1.0)*gconst88*x931))+(((-1.0)*gconst93*x930))+x861+(((0.0008)*x874))+((gconst86*x901))+((gconst87*x902))+((gconst88*x917))+(((0.0008)*x873))+((gconst87*x903))+(((-1.0)*gconst95*x922))+(((0.0008)*x872))+(((-1.0)*gconst92*x934))+(((0.0008)*x871))+((gconst88*x920))+x933+x938+((gconst95*x913))+(((-1.0)*gconst92*x921))+(((-1.0)*gconst89*x936))+x928+x940+(((-0.0008)*x876))+(((-1.0)*gconst93*x924))+((gconst92*x916)));
op[5]=((((-1.0)*gconst85*x929))+(((0.0008)*x897))+((gconst93*x942))+(((-1.0)*gconst86*x923))+(((-1.0)*gconst87*x924))+(((-1.0)*gconst85*x936))+((gconst92*x941))+(((-1.0)*gconst84*x935))+((gconst86*x916))+(((-1.0)*gconst87*x926))+((gconst85*x915))+((gconst86*x912))+(((-0.0008)*x899))+(((-1.0)*gconst92*x944))+(((-1.0)*gconst93*x943))+((gconst87*x909))+((gconst85*x919))+(((-1.0)*gconst86*x934))+((gconst87*x918))+((gconst86*x914))+x866+(((-1.0)*gconst84*x931))+((gconst84*x920))+(((-1.0)*gconst87*x930))+(((-0.0008)*x898))+(((-1.0)*gconst86*x921))+(((0.0008)*x896))+((gconst87*x911))+((gconst84*x917)));
op[6]=(((gconst82*x910))+((gconst95*x947))+(((-1.0)*gconst93*x954))+(((-1.0)*gconst88*x956))+((gconst93*x946))+((gconst86*x941))+((gconst89*x949))+((gconst92*x948))+((gconst83*x913))+(((-1.0)*gconst94*x953))+(((-1.0)*gconst83*x922))+(((-1.0)*gconst89*x955))+(((-1.0)*gconst95*x951))+x880+((gconst94*x945))+(((0.0008)*x927))+(((-1.0)*gconst92*x952))+((gconst88*x950))+(((-1.0)*gconst87*x943))+(((0.0008)*x932))+(((-1.0)*gconst82*x925))+((gconst87*x942))+(((-0.0008)*x939))+(((-0.0008)*x937))+(((-1.0)*gconst86*x944)));
op[7]=((((-1.0)*gconst86*x952))+((gconst86*x948))+((gconst84*x950))+x900+((gconst87*x946))+(((-1.0)*gconst85*x955))+(((-1.0)*gconst87*x954))+(((-1.0)*gconst84*x956))+((gconst85*x949)));
op[8]=((((-1.0)*gconst82*x953))+((gconst83*x947))+(((-1.0)*gconst83*x951))+((gconst82*x945))+x933+x938+x928+x940);
polyroots8(op,zeror,numroots);
IkReal j10array[8], cj10array[8], sj10array[8], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[8]={true,true,true,true,true,true,true,true};
_nj10 = 8;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
{
IkReal j16eval[3];
IkReal x957=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x957);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x957);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x958=((6.9)*cj10);
IkReal x959=(r10*x958);
IkReal x960=((6.9)*sj10);
IkReal x961=(r00*x960);
IkReal x962=(cj12*sj11);
IkReal x963=(r11*x958);
IkReal x964=(r01*x960);
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=((IKabs((((x959*x962))+(((-1.0)*x961*x962))+(((-1.0)*x959))+(((-1.0)*(100.0)*rxp0_2))+x961)))+(IKabs(((((-1.0)*x964))+(((-1.0)*x962*x963))+(((100.0)*rxp1_2))+((x962*x964))+x963))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x965=((6.9)*sj10);
IkReal x966=(cj12*sj11);
IkReal x967=(x965*x966);
IkReal x968=((6.9)*cj10);
IkReal x969=(x966*x968);
CheckValue<IkReal> x970 = IKatan2WithCheck(IkReal((((r01*(((((-1.0)*x965))+x967))))+((r11*(((((-1.0)*x969))+x968))))+(((100.0)*rxp1_2)))),IkReal((((r00*((x965+(((-1.0)*x967))))))+(((-1.0)*(100.0)*rxp0_2))+((r10*(((((-1.0)*x968))+x969)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x970.valid){
continue;
}
CheckValue<IkReal> x971=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x971.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x970.value)+(((1.5707963267949)*(x971.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x972=((0.069)*cj10);
IkReal x973=((0.01)*(IKsin(j16)));
IkReal x974=((0.01)*(IKcos(j16)));
IkReal x975=(cj12*sj11);
IkReal x976=((0.069)*sj10);
evalcond[0]=((((-1.0)*(1.0)*px))+x972+(((-1.0)*r00*x973))+(((-1.0)*r01*x974))+(((-1.0)*x972*x975)));
evalcond[1]=((((-1.0)*r10*x973))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x974))+x976+(((-1.0)*x975*x976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
IkReal x977=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x977);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x977);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x978=cj16*cj16;
IkReal x979=cj12*cj12;
IkReal x980=(x979*(cj10*cj10));
IkReal x981=sj16*sj16;
IkReal x982=(x979*(sj10*sj10));
j14eval[0]=r22;
j14eval[1]=(((x981*x982))+((x980*x981))+((x978*x982))+((x978*x980)));
j14eval[2]=IKsign(r22);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x983=(cj10*cj12*cj16);
IkReal x984=(cj12*cj16*sj10);
IkReal x985=((1.0)*r01);
IkReal x986=(cj10*cj12*sj16);
IkReal x987=((1.0)*r11);
IkReal x988=(cj12*sj10*sj16);
CheckValue<IkReal> x989=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x989.valid){
continue;
}
CheckValue<IkReal> x990 = IKatan2WithCheck(IkReal((((r10*x984))+((r00*x983))+(((-1.0)*x985*x986))+(((-1.0)*x987*x988)))),IkReal(((((-1.0)*x984*x987))+(((-1.0)*r10*x988))+(((-1.0)*r00*x986))+(((-1.0)*x983*x985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x990.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x989.value)))+(x990.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x991=(cj10*cj12);
IkReal x992=IKcos(j14);
IkReal x993=(cj16*x992);
IkReal x994=IKsin(j14);
IkReal x995=(cj16*x994);
IkReal x996=(sj16*x994);
IkReal x997=((1.0)*sj16*x992);
IkReal x998=((1.0)*cj12*sj10);
IkReal x999=(cj16*sj13*x992);
IkReal x1000=(sj13*sj16*x992);
IkReal x1001=(sj13*sj16*x994);
IkReal x1002=((1.0)*cj16*sj13*x994);
IkReal x1003=(cj13*cj16*x992);
IkReal x1004=(cj13*sj16*x992);
IkReal x1005=(cj13*sj16*x994);
IkReal x1006=((1.0)*cj13*cj16*x994);
evalcond[0]=(((r11*x995))+(((-1.0)*r11*x997))+((r10*x993))+x991+((r10*x996)));
evalcond[1]=(((r01*x995))+(((-1.0)*x998))+((r00*x996))+((r00*x993))+(((-1.0)*r01*x997)));
evalcond[2]=(((r00*x1000))+((r01*x999))+(((-1.0)*r00*x1002))+((r01*x1001)));
evalcond[3]=(((r10*x1000))+((r11*x1001))+((r11*x999))+(((-1.0)*r10*x1002)));
evalcond[4]=(((r11*x1005))+(((-1.0)*sj11*x998))+((r11*x1003))+(((-1.0)*r10*x1006))+((r10*x1004)));
evalcond[5]=(((r00*x1004))+((r01*x1005))+((r01*x1003))+(((-1.0)*sj11*x991))+(((-1.0)*r00*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x1007=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1007);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1007);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1008=(r22*sj15);
j14eval[0]=x1008;
j14eval[1]=((IKabs((cj11*sj12)))+(IKabs(sj11)));
j14eval[2]=IKsign(x1008);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal((cj11*sj12)),IkReal(sj11),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
CheckValue<IkReal> x1010=IKPowWithIntegerCheck(IKsign((r22*sj15)),-1);
if(!x1010.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1009.value)+(((1.5707963267949)*(x1010.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x1011=((1.0)*r22*sj15);
evalcond[0]=(sj11+(((-1.0)*x1011*(IKcos(j14)))));
evalcond[1]=((((-1.0)*x1011*(IKsin(j14))))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1012=(r11*sj15);
IkReal x1013=((-1.0)*x1012);
IkReal x1014=(x1013+sj12);
IkReal x1015=(r01*sj15);
IkReal x1016=(cj12*sj11);
IkReal x1017=((-1.0)*x1016);
IkReal x1018=(x1015+x1017);
IkReal x1019=((-1.0)*x1015);
IkReal x1020=(x1017+x1019);
IkReal x1021=((-1.0)*(((1.0)*sj12)));
IkReal x1022=(x1021+x1012);
IkReal x1023=(x1021+x1013);
IkReal x1024=(x1015+x1016);
IkReal x1025=(x1016+x1019);
IkReal gconst112=x1014;
IkReal gconst113=x1018;
IkReal gconst114=x1020;
IkReal gconst115=x1014;
IkReal gconst116=x1018;
IkReal gconst117=x1020;
IkReal gconst118=x1022;
IkReal gconst119=x1023;
IkReal gconst120=x1024;
IkReal gconst121=x1025;
IkReal gconst122=x1022;
IkReal gconst123=x1023;
IkReal gconst124=x1024;
IkReal gconst125=x1025;
IkReal x1026=(gconst118*gconst121*gconst123);
IkReal x1027=(gconst119*gconst120);
IkReal x1028=(gconst122*gconst125);
IkReal x1029=(gconst123*gconst124);
IkReal x1030=sj15*sj15;
IkReal x1031=(gconst119*r00*r10*x1030);
IkReal x1032=(gconst122*r00*r10*x1030);
IkReal x1033=r00*r00;
IkReal x1034=(gconst119*x1030*x1033);
IkReal x1035=r10*r10;
IkReal x1036=(x1030*x1035);
IkReal x1037=((2.0)*gconst122*sj12);
IkReal x1038=((2.0)*sj12);
IkReal x1039=((2.0)*gconst118*sj12);
IkReal x1040=((2.0)*gconst119*sj12);
IkReal x1041=((2.0)*cj12*gconst118*gconst121*sj11);
IkReal x1042=((2.0)*cj12*gconst119*gconst120*sj11);
IkReal x1043=((2.0)*cj12*gconst120*sj11);
IkReal x1044=((2.0)*cj12*gconst121*sj11);
IkReal x1045=((8.0)*sj12);
IkReal x1046=((8.0)*sj12*x1030*x1035);
IkReal x1047=((8.0)*cj12*r00*r10*sj11*x1030);
IkReal x1048=((8.0)*cj12*sj11);
IkReal x1049=((8.0)*cj12*sj11*x1030*x1033);
IkReal x1050=((2.0)*(sj12*sj12*sj12));
IkReal x1051=(gconst112*gconst113*sj12);
IkReal x1052=((2.0)*gconst112);
IkReal x1053=(gconst115*gconst116*sj12);
IkReal x1054=(gconst112*gconst113);
IkReal x1055=sj12*sj12;
IkReal x1056=((2.0)*x1055);
IkReal x1057=(gconst117*x1055);
IkReal x1058=((2.0)*gconst114*gconst115);
IkReal x1059=(gconst115*gconst116);
IkReal x1060=((2.0)*cj12*gconst116*sj11);
IkReal x1061=((2.0)*cj12*sj11);
IkReal x1062=(gconst112*gconst113*gconst117);
IkReal x1063=((2.0)*cj12*gconst113*sj11);
IkReal x1064=((2.0)*cj12*sj11*sj12);
IkReal x1065=(gconst114*gconst115*gconst116);
IkReal x1066=(gconst117*sj12);
IkReal x1067=((4.0)*cj12*gconst114*sj11);
IkReal x1068=((2.0)*r11*sj15);
IkReal x1069=(gconst117*r11*sj15);
IkReal x1070=(gconst112*r00*r10*x1030);
IkReal x1071=sj15*sj15*sj15;
IkReal x1072=((2.0)*gconst114*sj12);
IkReal x1073=r11*r11;
IkReal x1074=(gconst117*x1030*x1073);
IkReal x1075=(r11*sj15);
IkReal x1076=((1.0)*gconst114);
IkReal x1077=(r11*x1071);
IkReal x1078=((4.0)*gconst114*r00*r10);
IkReal x1079=(sj12*x1030);
IkReal x1080=((4.0)*gconst112*x1033);
op[0]=((((-1.0)*gconst118*gconst121*x1028))+(((4.0)*gconst121*x1032))+(((4.0)*gconst124*x1031))+(((-4.0)*gconst122*x1034))+((x1027*x1028))+(((-4.0)*gconst121*gconst124*x1036))+((gconst124*x1026))+(((-1.0)*gconst119*gconst120*x1029)));
op[1]=((((-1.0)*gconst124*x1041))+((x1029*x1040))+((gconst124*x1046))+(((-1.0)*gconst121*x1047))+((gconst122*x1049))+((gconst121*x1046))+((x1034*x1048))+((gconst125*x1041))+(((-1.0)*x1032*x1045))+(((-1.0)*gconst124*x1047))+(((-1.0)*x1026*x1038))+((gconst124*x1042))+(((-1.0)*gconst125*x1042))+(((-1.0)*x1028*x1040))+((x1029*x1043))+(((-1.0)*x1031*x1045))+((gconst119*gconst120*gconst123*x1038))+(((-1.0)*x1028*x1043))+((x1028*x1044))+(((-1.0)*x1029*x1044))+(((-1.0)*x1029*x1039))+(((-1.0)*x1027*x1037))+((x1028*x1039))+((gconst118*gconst121*x1037)));
op[2]=((((4.0)*gconst112*gconst124*r00*r10*(sj15*sj15)))+(((4.0)*gconst116*gconst119*r00*r10*(sj15*sj15)))+((gconst119*gconst120*gconst125*sj12))+(((-1.0)*gconst118*gconst121*gconst125*sj12))+(((4.0)*gconst121*r00*r10*r11*(sj15*sj15*sj15)))+(((32.0)*cj12*r00*r10*sj11*sj12*(sj15*sj15)))+(((4.0)*gconst121*r00*r10*sj12*(sj15*sj15)))+(((-4.0)*gconst119*gconst123*(sj12*sj12)))+(((-4.0)*gconst118*gconst122*(sj12*sj12)))+(((-16.0)*(cj12*cj12)*(r00*r00)*(sj11*sj11)*(sj15*sj15)))+(((-8.0)*gconst121*gconst124*(r10*r10)*(sj15*sj15)))+(((-1.0)*gconst118*gconst121*gconst125*r11*sj15))+(((8.0)*gconst121*gconst122*r00*r10*(sj15*sj15)))+((gconst116*gconst118*gconst121*gconst123))+((gconst114*gconst118*gconst123*gconst124))+(((4.0)*gconst120*gconst125*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst114*gconst118*gconst122*gconst125))+(((-1.0)*gconst115*gconst119*gconst120*gconst124))+(((4.0)*cj12*gconst118*gconst124*sj11*sj12))+(((-4.0)*gconst116*gconst121*(r10*r10)*(sj15*sj15)))+((gconst115*gconst118*gconst121*gconst124))+(((-4.0)*gconst112*gconst122*(r00*r00)*(sj15*sj15)))+(((4.0)*gconst118*gconst123*(sj12*sj12)))+(((4.0)*cj12*gconst120*gconst122*sj11*sj12))+(((-4.0)*gconst114*gconst124*(r10*r10)*(sj15*sj15)))+((gconst119*gconst120*gconst125*r11*sj15))+(((-1.0)*gconst117*gconst118*gconst121*gconst122))+((gconst117*gconst119*gconst120*gconst122))+((gconst113*gconst119*gconst122*gconst125))+(((8.0)*gconst119*gconst124*r00*r10*(sj15*sj15)))+(((-4.0)*cj12*gconst118*gconst125*sj11*sj12))+(((-4.0)*cj12*gconst121*gconst122*sj11*sj12))+(((4.0)*gconst121*gconst124*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst112*gconst120*gconst123*gconst124))+(((-4.0)*gconst121*gconst125*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst121*gconst122*gconst125*sj12))+((gconst121*gconst123*gconst124*sj12))+(((-4.0)*gconst119*sj12*(r00*r00)*(sj15*sj15)))+(((-4.0)*cj12*gconst120*gconst123*sj11*sj12))+(((-8.0)*gconst119*gconst122*(r00*r00)*(sj15*sj15)))+(((4.0)*cj12*gconst121*gconst123*sj11*sj12))+(((-1.0)*gconst116*gconst119*gconst120*gconst123))+(((-1.0)*gconst113*gconst119*gconst123*gconst124))+(((-4.0)*gconst119*r11*(r00*r00)*(sj15*sj15*sj15)))+(((4.0)*gconst114*gconst122*r00*r10*(sj15*sj15)))+(((-16.0)*(r10*r10)*(sj12*sj12)*(sj15*sj15)))+(((-4.0)*cj12*gconst119*gconst124*sj11*sj12))+((gconst121*gconst123*gconst124*r11*sj15))+(((-4.0)*gconst120*gconst124*(cj12*cj12)*(sj11*sj11)))+(((4.0)*gconst119*gconst122*(sj12*sj12)))+((gconst112*gconst120*gconst122*gconst125))+(((-1.0)*gconst121*gconst122*gconst125*r11*sj15))+(((4.0)*cj12*gconst119*gconst125*sj11*sj12)));
op[3]=((((-2.0)*cj12*gconst114*gconst118*gconst124*sj11))+(((2.0)*gconst122*gconst125*(sj12*sj12)))+(((-2.0)*gconst114*gconst118*gconst123*sj12))+(((-2.0)*gconst117*gconst119*gconst122*sj12))+(((2.0)*gconst117*gconst118*gconst122*sj12))+(((2.0)*gconst121*gconst122*(sj12*sj12)))+(((-2.0)*cj12*gconst121*gconst124*sj11*sj12))+(((-2.0)*gconst115*gconst118*gconst121*sj12))+(((2.0)*gconst115*gconst119*gconst124*sj12))+(((8.0)*gconst116*sj12*(r10*r10)*(sj15*sj15)))+(((-8.0)*r00*r10*(sj12*sj12)*(sj15*sj15)))+(((8.0)*cj12*gconst112*sj11*(r00*r00)*(sj15*sj15)))+(((2.0)*gconst115*gconst119*gconst120*sj12))+(((2.0)*cj12*gconst114*gconst118*gconst125*sj11))+(((2.0)*gconst116*gconst119*gconst123*sj12))+(((-16.0)*cj12*gconst121*r00*r10*sj11*(sj15*sj15)))+(((-2.0)*gconst121*gconst123*(sj12*sj12)))+(((-8.0)*cj12*gconst116*r00*r10*sj11*(sj15*sj15)))+(((-2.0)*gconst116*gconst118*gconst123*sj12))+(((2.0)*cj12*gconst116*gconst120*gconst123*sj11))+(((16.0)*cj12*gconst122*sj11*(r00*r00)*(sj15*sj15)))+(((-2.0)*cj12*gconst113*gconst119*gconst125*sj11))+(((16.0)*gconst121*sj12*(r10*r10)*(sj15*sj15)))+(((-8.0)*gconst112*r00*r10*sj12*(sj15*sj15)))+(((4.0)*cj12*gconst121*gconst125*r11*sj11*sj15))+(((-2.0)*gconst115*gconst118*gconst124*sj12))+(((8.0)*cj12*r11*sj11*(r00*r00)*(sj15*sj15*sj15)))+(((-2.0)*gconst123*gconst124*r11*sj12*sj15))+(((-2.0)*gconst119*gconst125*(sj12*sj12)))+(((2.0)*gconst118*gconst121*(sj12*sj12)))+(((-2.0)*cj12*gconst116*gconst118*gconst121*sj11))+(((2.0)*gconst121*gconst122*r11*sj12*sj15))+(((-2.0)*cj12*gconst113*gconst122*gconst125*sj11))+(((-2.0)*cj12*gconst112*gconst120*gconst125*sj11))+(((-8.0)*cj12*gconst114*r00*r10*sj11*(sj15*sj15)))+(((-2.0)*gconst119*gconst120*(sj12*sj12)))+(((-2.0)*gconst112*gconst122*gconst125*sj12))+(((-16.0)*cj12*gconst124*r00*r10*sj11*(sj15*sj15)))+(((-2.0)*cj12*gconst115*gconst121*gconst124*sj11))+(((2.0)*cj12*gconst113*gconst119*gconst124*sj11))+(((2.0)*gconst118*gconst125*r11*sj12*sj15))+(((2.0)*cj12*gconst112*gconst120*gconst124*sj11))+(((4.0)*cj12*gconst121*gconst125*sj11*sj12))+(((-2.0)*gconst112*gconst120*gconst122*sj12))+(((-2.0)*cj12*gconst120*gconst125*r11*sj11*sj15))+(((8.0)*gconst114*sj12*(r10*r10)*(sj15*sj15)))+(((-2.0)*gconst121*gconst123*r11*sj12*sj15))+(((-8.0)*r00*r10*r11*sj12*(sj15*sj15*sj15)))+(((2.0)*gconst112*gconst120*gconst123*sj12))+(((-2.0)*cj12*gconst117*gconst119*gconst120*sj11))+(((-2.0)*gconst119*gconst125*r11*sj12*sj15))+(((2.0)*cj12*gconst117*gconst118*gconst121*sj11))+(((2.0)*cj12*gconst115*gconst120*gconst124*sj11))+(((-16.0)*gconst119*r00*r10*sj12*(sj15*sj15)))+(((-2.0)*cj12*gconst116*gconst121*gconst123*sj11))+(((2.0)*gconst118*gconst125*(sj12*sj12)))+(((-2.0)*cj12*gconst120*gconst125*sj11*sj12))+(((2.0)*cj12*gconst116*gconst119*gconst120*sj11))+(((16.0)*cj12*gconst119*sj11*(r00*r00)*(sj15*sj15)))+(((-2.0)*cj12*gconst117*gconst120*gconst122*sj11))+(((2.0)*gconst113*gconst119*gconst123*sj12))+(((2.0)*gconst114*gconst118*gconst122*sj12))+(((-2.0)*cj12*gconst114*gconst123*gconst124*sj11))+(((-2.0)*gconst119*gconst120*r11*sj12*sj15))+(((2.0)*gconst122*gconst125*r11*sj12*sj15))+(((-16.0)*gconst122*r00*r10*sj12*(sj15*sj15)))+(((2.0)*gconst118*gconst121*r11*sj12*sj15))+(((2.0)*cj12*gconst117*gconst121*gconst122*sj11))+(((-2.0)*cj12*gconst121*gconst124*r11*sj11*sj15))+(((-2.0)*gconst123*gconst124*(sj12*sj12)))+(((2.0)*cj12*gconst114*gconst122*gconst125*sj11))+(((8.0)*cj12*sj11*sj12*(r00*r00)*(sj15*sj15)))+(((2.0)*gconst112*gconst123*gconst124*sj12))+(((2.0)*cj12*gconst113*gconst123*gconst124*sj11))+(((-2.0)*gconst113*gconst119*gconst122*sj12))+(((16.0)*gconst124*sj12*(r10*r10)*(sj15*sj15))));
op[4]=((((4.0)*gconst115*gconst118*(sj12*sj12)))+(((4.0)*gconst123*(sj12*sj12*sj12)))+(((-1.0)*gconst121*gconst125*(sj12*sj12)))+((gconst112*gconst113*gconst122*gconst125))+(((-8.0)*gconst114*gconst124*(r10*r10)*(sj15*sj15)))+((gconst114*gconst123*gconst124*r11*sj15))+((gconst114*gconst123*gconst124*sj12))+(((-4.0)*gconst115*gconst119*(sj12*sj12)))+(((-1.0)*gconst121*gconst125*(r11*r11)*(sj15*sj15)))+(((-1.0)*gconst113*gconst116*gconst119*gconst123))+(((8.0)*gconst114*gconst122*r00*r10*(sj15*sj15)))+(((-4.0)*gconst117*gconst121*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst112*gconst115*gconst120*gconst124))+((gconst114*gconst115*gconst118*gconst124))+(((4.0)*cj12*gconst124*r11*sj11*sj12*sj15))+(((4.0)*cj12*gconst124*sj11*(sj12*sj12)))+(((-4.0)*cj12*gconst121*r11*sj11*sj12*sj15))+(((4.0)*cj12*gconst112*gconst125*sj11*sj12))+(((4.0)*cj12*gconst113*gconst122*sj11*sj12))+(((-4.0)*cj12*gconst112*gconst124*sj11*sj12))+(((4.0)*cj12*gconst117*gconst119*sj11*sj12))+((gconst116*gconst121*gconst123*sj12))+(((-4.0)*gconst114*gconst116*(r10*r10)*(sj15*sj15)))+(((4.0)*cj12*gconst114*gconst123*sj11*sj12))+(((-4.0)*gconst118*r11*sj15*(sj12*sj12)))+(((-8.0)*gconst119*sj12*(r00*r00)*(sj15*sj15)))+(((-4.0)*cj12*gconst117*gconst118*sj11*sj12))+(((-1.0)*gconst114*gconst122*gconst125*r11*sj15))+(((-1.0)*gconst117*gconst121*gconst122*r11*sj15))+(((4.0)*gconst121*gconst122*r00*r10*(sj15*sj15)))+(((4.0)*gconst112*gconst116*r00*r10*(sj15*sj15)))+(((4.0)*gconst114*gconst124*(cj12*cj12)*(sj11*sj11)))+(((64.0)*cj12*r00*r10*sj11*sj12*(sj15*sj15)))+(((-1.0)*gconst113*gconst115*gconst119*gconst124))+(((-8.0)*gconst112*gconst122*(r00*r00)*(sj15*sj15)))+(((-4.0)*gconst113*gconst124*(cj12*cj12)*(sj11*sj11)))+(((8.0)*gconst112*gconst124*r00*r10*(sj15*sj15)))+(((-8.0)*gconst119*r11*(r00*r00)*(sj15*sj15*sj15)))+(((4.0)*cj12*gconst116*gconst118*sj11*sj12))+(((-1.0)*gconst114*gconst122*gconst125*sj12))+(((-4.0)*gconst122*r11*sj15*(sj12*sj12)))+(((-4.0)*cj12*gconst115*gconst120*sj11*sj12))+(((-32.0)*(r10*r10)*(sj12*sj12)*(sj15*sj15)))+((gconst117*gconst119*gconst120*sj12))+(((4.0)*cj12*gconst120*r11*sj11*sj12*sj15))+(((4.0)*gconst114*r00*r10*r11*(sj15*sj15*sj15)))+(((-1.0)*gconst117*gconst118*gconst121*r11*sj15))+(((-4.0)*gconst112*r11*(r00*r00)*(sj15*sj15*sj15)))+(((-4.0)*gconst112*gconst123*(sj12*sj12)))+((gconst113*gconst117*gconst119*gconst122))+(((4.0)*gconst119*r11*sj15*(sj12*sj12)))+((gconst112*gconst120*gconst125*r11*sj15))+(((4.0)*gconst116*gconst121*(cj12*cj12)*(sj11*sj11)))+((gconst112*gconst120*gconst125*sj12))+((gconst114*gconst116*gconst118*gconst123))+(((4.0)*gconst117*gconst120*(cj12*cj12)*(sj11*sj11)))+(((4.0)*gconst112*gconst122*(sj12*sj12)))+(((8.0)*gconst121*r00*r10*r11*(sj15*sj15*sj15)))+((gconst112*gconst117*gconst120*gconst122))+(((-4.0)*cj12*gconst113*gconst123*sj11*sj12))+(((-4.0)*gconst116*gconst120*(cj12*cj12)*(sj11*sj11)))+(((-4.0)*gconst114*gconst125*(cj12*cj12)*(sj11*sj11)))+((gconst116*gconst121*gconst123*r11*sj15))+((gconst117*gconst119*gconst120*r11*sj15))+(((-32.0)*(cj12*cj12)*(r00*r00)*(sj11*sj11)*(sj15*sj15)))+(((-4.0)*gconst112*sj12*(r00*r00)*(sj15*sj15)))+(((-1.0)*gconst112*gconst116*gconst120*gconst123))+((gconst115*gconst116*gconst118*gconst121))+(((-4.0)*cj12*gconst116*gconst119*sj11*sj12))+(((-4.0)*cj12*gconst114*gconst122*sj11*sj12))+(((-1.0)*gconst114*gconst118*gconst125*r11*sj15))+(((-1.0)*gconst114*gconst117*gconst118*gconst122))+(((4.0)*gconst119*(sj12*sj12*sj12)))+((gconst113*gconst119*gconst125*r11*sj15))+(((4.0)*gconst119*gconst124*r00*r10*(sj15*sj15)))+(((-4.0)*gconst118*(sj12*sj12*sj12)))+(((4.0)*cj12*gconst120*sj11*(sj12*sj12)))+(((-2.0)*gconst121*gconst125*r11*sj12*sj15))+(((-4.0)*gconst122*(sj12*sj12*sj12)))+((gconst115*gconst121*gconst124*sj12))+(((-4.0)*gconst119*gconst122*(r00*r00)*(sj15*sj15)))+((gconst115*gconst121*gconst124*r11*sj15))+(((-4.0)*cj12*gconst125*r11*sj11*sj12*sj15))+(((4.0)*gconst113*gconst125*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst115*gconst116*gconst119*gconst120))+(((4.0)*cj12*gconst115*gconst121*sj11*sj12))+(((-4.0)*cj12*gconst125*sj11*(sj12*sj12)))+(((-1.0)*gconst112*gconst113*gconst123*gconst124))+(((8.0)*gconst121*r00*r10*sj12*(sj15*sj15)))+(((4.0)*gconst114*r00*r10*sj12*(sj15*sj15)))+(((4.0)*gconst123*r11*sj15*(sj12*sj12)))+(((-1.0)*gconst117*gconst118*gconst121*sj12))+(((-1.0)*gconst114*gconst118*gconst125*sj12))+((gconst113*gconst119*gconst125*sj12))+(((8.0)*gconst116*gconst119*r00*r10*(sj15*sj15)))+(((-1.0)*gconst117*gconst121*gconst122*sj12))+(((-8.0)*gconst116*gconst121*(r10*r10)*(sj15*sj15)))+(((-4.0)*gconst121*gconst124*(r10*r10)*(sj15*sj15)))+(((-4.0)*cj12*gconst121*sj11*(sj12*sj12))));
op[5]=((((-8.0)*gconst119*r00*r10*sj12*(sj15*sj15)))+(((-2.0)*cj12*gconst115*gconst116*gconst121*sj11))+(((-2.0)*cj12*gconst117*gconst120*sj11*sj12))+(((2.0)*gconst114*gconst122*r11*sj12*sj15))+(((4.0)*cj12*gconst114*gconst125*sj11*sj12))+(((2.0)*gconst117*gconst122*(sj12*sj12)))+(((-2.0)*gconst112*gconst125*(sj12*sj12)))+(((2.0)*gconst112*gconst115*gconst124*sj12))+(((-2.0)*gconst112*gconst117*gconst122*sj12))+(((2.0)*gconst113*gconst115*gconst119*sj12))+(((-2.0)*cj12*gconst113*gconst117*gconst119*sj11))+(((-2.0)*cj12*gconst113*gconst125*sj11*sj12))+(((-2.0)*gconst113*gconst119*(sj12*sj12)))+(((2.0)*cj12*gconst112*gconst113*gconst124*sj11))+(((2.0)*gconst114*gconst118*(sj12*sj12)))+(((2.0)*cj12*gconst112*gconst116*gconst120*sj11))+(((-16.0)*cj12*gconst114*r00*r10*sj11*(sj15*sj15)))+(((-8.0)*cj12*gconst124*r00*r10*sj11*(sj15*sj15)))+(((2.0)*gconst112*gconst116*gconst123*sj12))+(((-2.0)*gconst113*gconst119*r11*sj12*sj15))+(((2.0)*cj12*gconst113*gconst116*gconst123*sj11))+(((2.0)*gconst114*gconst118*r11*sj12*sj15))+(((8.0)*cj12*gconst122*sj11*(r00*r00)*(sj15*sj15)))+(((-2.0)*cj12*gconst116*gconst121*sj11*sj12))+(((-2.0)*cj12*gconst117*gconst120*r11*sj11*sj15))+(((2.0)*gconst121*(sj12*sj12*sj12)))+(((-2.0)*cj12*gconst114*gconst124*r11*sj11*sj15))+(((-16.0)*gconst112*r00*r10*sj12*(sj15*sj15)))+(((16.0)*cj12*r11*sj11*(r00*r00)*(sj15*sj15*sj15)))+(((2.0)*cj12*gconst113*gconst115*gconst124*sj11))+(((-2.0)*cj12*gconst114*gconst116*gconst118*sj11))+(((-2.0)*gconst114*gconst123*(sj12*sj12)))+(((-2.0)*gconst114*gconst123*r11*sj12*sj15))+(((-2.0)*gconst115*gconst121*r11*sj12*sj15))+(((4.0)*gconst121*r11*sj15*(sj12*sj12)))+(((-2.0)*gconst116*gconst123*r11*sj12*sj15))+(((2.0)*gconst121*sj12*(r11*r11)*(sj15*sj15)))+(((2.0)*cj12*gconst115*gconst116*gconst120*sj11))+(((16.0)*cj12*gconst112*sj11*(r00*r00)*(sj15*sj15)))+(((2.0)*gconst114*gconst122*(sj12*sj12)))+(((2.0)*gconst117*gconst118*(sj12*sj12)))+(((2.0)*gconst125*sj12*(r11*r11)*(sj15*sj15)))+(((2.0)*gconst125*(sj12*sj12*sj12)))+(((-2.0)*cj12*gconst116*gconst121*r11*sj11*sj15))+(((-2.0)*cj12*gconst114*gconst124*sj11*sj12))+(((2.0)*cj12*gconst114*gconst117*gconst118*sj11))+(((-2.0)*gconst112*gconst125*r11*sj12*sj15))+(((-2.0)*cj12*gconst113*gconst125*r11*sj11*sj15))+(((2.0)*cj12*gconst114*gconst117*gconst122*sj11))+(((-2.0)*cj12*gconst113*gconst117*gconst122*sj11))+(((16.0)*gconst114*sj12*(r10*r10)*(sj15*sj15)))+(((-2.0)*gconst112*gconst113*gconst122*sj12))+(((-2.0)*gconst117*gconst119*r11*sj12*sj15))+(((2.0)*gconst117*gconst122*r11*sj12*sj15))+(((-16.0)*r00*r10*r11*sj12*(sj15*sj15*sj15)))+(((-2.0)*gconst115*gconst121*(sj12*sj12)))+(((-2.0)*gconst116*gconst123*(sj12*sj12)))+(((-2.0)*gconst114*gconst115*gconst118*sj12))+(((-2.0)*cj12*gconst114*gconst116*gconst123*sj11))+(((4.0)*cj12*gconst114*gconst125*r11*sj11*sj15))+(((8.0)*gconst121*sj12*(r10*r10)*(sj15*sj15)))+(((16.0)*cj12*sj11*sj12*(r00*r00)*(sj15*sj15)))+(((2.0)*gconst112*gconst115*gconst120*sj12))+(((-16.0)*cj12*gconst116*r00*r10*sj11*(sj15*sj15)))+(((2.0)*gconst115*gconst116*gconst119*sj12))+(((4.0)*gconst125*r11*sj15*(sj12*sj12)))+(((-2.0)*cj12*gconst114*gconst115*gconst124*sj11))+(((2.0)*gconst112*gconst113*gconst123*sj12))+(((-2.0)*gconst112*gconst120*(sj12*sj12)))+(((2.0)*cj12*gconst113*gconst116*gconst119*sj11))+(((-2.0)*gconst115*gconst124*r11*sj12*sj15))+(((-2.0)*cj12*gconst112*gconst117*gconst120*sj11))+(((-2.0)*gconst115*gconst124*(sj12*sj12)))+(((2.0)*gconst117*gconst118*r11*sj12*sj15))+(((8.0)*gconst124*sj12*(r10*r10)*(sj15*sj15)))+(((-8.0)*cj12*gconst121*r00*r10*sj11*(sj15*sj15)))+(((4.0)*cj12*gconst117*gconst121*sj11*sj12))+(((-8.0)*gconst122*r00*r10*sj12*(sj15*sj15)))+(((-2.0)*cj12*gconst112*gconst113*gconst125*sj11))+(((4.0)*cj12*gconst117*gconst121*r11*sj11*sj15))+(((-2.0)*gconst115*gconst116*gconst118*sj12))+(((16.0)*gconst116*sj12*(r10*r10)*(sj15*sj15)))+(((-16.0)*r00*r10*(sj12*sj12)*(sj15*sj15)))+(((-2.0)*gconst112*gconst120*r11*sj12*sj15))+(((8.0)*cj12*gconst119*sj11*(r00*r00)*(sj15*sj15)))+(((-2.0)*gconst117*gconst119*(sj12*sj12))));
op[6]=((((8.0)*gconst114*r00*r10*r11*(sj15*sj15*sj15)))+(((4.0)*gconst112*(sj12*sj12*sj12)))+((gconst115*gconst116*gconst121*sj12))+(((4.0)*gconst112*gconst124*r00*r10*(sj15*sj15)))+(((4.0)*gconst116*gconst119*r00*r10*(sj15*sj15)))+(((-4.0)*cj12*gconst114*sj11*(sj12*sj12)))+(((4.0)*gconst121*r00*r10*r11*(sj15*sj15*sj15)))+((gconst114*gconst115*gconst116*gconst118))+(((32.0)*cj12*r00*r10*sj11*sj12*(sj15*sj15)))+(((4.0)*gconst121*r00*r10*sj12*(sj15*sj15)))+(((4.0)*cj12*gconst116*sj11*(sj12*sj12)))+(((4.0)*gconst112*r11*sj15*(sj12*sj12)))+(((-16.0)*(cj12*cj12)*(r00*r00)*(sj11*sj11)*(sj15*sj15)))+(((-4.0)*cj12*gconst117*r11*sj11*sj12*sj15))+(((8.0)*gconst114*r00*r10*sj12*(sj15*sj15)))+(((-1.0)*gconst112*gconst115*gconst116*gconst120))+(((4.0)*cj12*gconst113*r11*sj11*sj12*sj15))+((gconst114*gconst115*gconst124*r11*sj15))+(((-2.0)*gconst114*gconst125*r11*sj12*sj15))+(((-1.0)*gconst117*gconst121*(sj12*sj12)))+((gconst114*gconst116*gconst123*r11*sj15))+((gconst114*gconst116*gconst123*sj12))+((gconst112*gconst113*gconst125*sj12))+(((8.0)*gconst112*gconst116*r00*r10*(sj15*sj15)))+(((-1.0)*gconst114*gconst117*gconst122*sj12))+(((4.0)*gconst113*gconst117*(cj12*cj12)*(sj11*sj11)))+(((4.0)*cj12*gconst116*r11*sj11*sj12*sj15))+(((-4.0)*gconst112*gconst115*(sj12*sj12)))+(((-4.0)*gconst116*gconst121*(r10*r10)*(sj15*sj15)))+(((-4.0)*(sj12*sj12*sj12*sj12)))+(((-4.0)*gconst112*gconst122*(r00*r00)*(sj15*sj15)))+((gconst113*gconst117*gconst119*r11*sj15))+(((-4.0)*cj12*gconst112*gconst116*sj11*sj12))+(((-1.0)*gconst114*gconst125*(r11*r11)*(sj15*sj15)))+(((-8.0)*gconst112*sj12*(r00*r00)*(sj15*sj15)))+(((-8.0)*gconst114*gconst116*(r10*r10)*(sj15*sj15)))+(((-4.0)*gconst114*gconst124*(r10*r10)*(sj15*sj15)))+(((-8.0)*gconst112*r11*(r00*r00)*(sj15*sj15*sj15)))+(((-1.0)*gconst114*gconst125*(sj12*sj12)))+(((4.0)*cj12*gconst112*gconst117*sj11*sj12))+(((-1.0)*gconst117*gconst121*(r11*r11)*(sj15*sj15)))+((gconst114*gconst115*gconst124*sj12))+(((4.0)*gconst115*(sj12*sj12*sj12)))+(((-1.0)*gconst112*gconst113*gconst115*gconst124))+((gconst112*gconst113*gconst125*r11*sj15))+(((-4.0)*cj12*gconst117*sj11*(sj12*sj12)))+((gconst112*gconst113*gconst117*gconst122))+(((-4.0)*gconst119*sj12*(r00*r00)*(sj15*sj15)))+(((4.0)*gconst115*r11*sj15*(sj12*sj12)))+(((4.0)*cj12*gconst113*sj11*(sj12*sj12)))+(((-1.0)*gconst112*gconst113*gconst116*gconst123))+(((4.0)*gconst114*gconst116*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst114*gconst117*gconst118*r11*sj15))+(((-4.0)*gconst114*gconst117*(cj12*cj12)*(sj11*sj11)))+(((-4.0)*gconst113*gconst116*(cj12*cj12)*(sj11*sj11)))+(((-8.0)*r11*sj15*(sj12*sj12*sj12)))+(((4.0)*cj12*gconst114*gconst115*sj11*sj12))+((gconst115*gconst116*gconst121*r11*sj15))+(((-1.0)*gconst114*gconst117*gconst118*sj12))+(((-4.0)*(r11*r11)*(sj12*sj12)*(sj15*sj15)))+(((-2.0)*gconst117*gconst121*r11*sj12*sj15))+(((-4.0)*cj12*gconst113*gconst115*sj11*sj12))+(((-4.0)*gconst119*r11*(r00*r00)*(sj15*sj15*sj15)))+(((4.0)*gconst114*gconst122*r00*r10*(sj15*sj15)))+(((-16.0)*(r10*r10)*(sj12*sj12)*(sj15*sj15)))+(((-1.0)*gconst113*gconst115*gconst116*gconst119))+((gconst112*gconst117*gconst120*sj12))+((gconst113*gconst117*gconst119*sj12))+((gconst112*gconst117*gconst120*r11*sj15))+(((-4.0)*cj12*gconst114*r11*sj11*sj12*sj15))+(((-1.0)*gconst114*gconst117*gconst122*r11*sj15)));
op[7]=((((-1.0)*x1061*x1065))+(((4.0)*r11*sj15*x1057))+((x1038*x1074))+(((-1.0)*gconst114*r11*sj15*x1060))+(((-1.0)*x1055*x1058))+(((-8.0)*r00*r10*r11*sj12*x1071))+(((-1.0)*gconst116*x1047))+((gconst114*x1046))+((gconst117*x1050))+(((-1.0)*x1052*x1057))+((gconst116*x1046))+(((-1.0)*x1061*x1062))+((x1030*x1072*x1073))+(((2.0)*gconst115*x1051))+(((-1.0)*gconst114*gconst116*x1064))+(((-1.0)*x1045*x1070))+(((-1.0)*r11*sj12*sj15*x1058))+(((8.0)*cj12*sj11*sj12*x1030*x1033))+((r11*x1033*x1048*x1071))+(((4.0)*gconst114*r11*sj15*x1055))+(((-1.0)*gconst114*x1047))+(((-1.0)*x1063*x1069))+((x1054*x1060))+((gconst112*x1049))+(((-1.0)*x1053*x1068))+(((-2.0)*gconst112*r11*sj15*x1066))+(((-1.0)*x1056*x1059))+(((-1.0)*x1054*x1056))+(((-8.0)*r00*r10*x1030*x1055))+(((-1.0)*x1051*x1068))+((x1059*x1063))+((x1052*x1053))+((gconst114*x1050))+((x1066*x1067))+(((-1.0)*gconst113*gconst117*x1064))+((x1067*x1069)));
op[8]=(((gconst117*x1051))+(((-1.0)*gconst112*gconst113*x1059))+(((-1.0)*x1057*x1076))+((x1078*x1079))+((x1062*x1075))+(((-4.0)*gconst114*gconst116*x1036))+(((-1.0)*x1069*x1072))+((x1077*x1078))+(((4.0)*gconst116*x1070))+(((-1.0)*x1079*x1080))+((x1065*x1075))+((gconst114*x1053))+(((-1.0)*x1077*x1080))+(((-1.0)*x1074*x1076)));
polyroots8(op,zeror,numroots);
IkReal j10array[8], cj10array[8], sj10array[8], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[8]={true,true,true,true,true,true,true,true};
_nj10 = 8;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
{
IkReal j16eval[3];
IkReal x1081=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1081);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1081);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1082=(r22*sj15);
IkReal x1083=cj10*cj10;
IkReal x1084=sj12*sj12;
IkReal x1085=sj10*sj10;
IkReal x1086=((cj12*cj12)*(sj11*sj11));
j16eval[0]=x1082;
j16eval[1]=(((x1083*x1084))+((x1085*x1086))+((x1083*x1086))+((x1084*x1085)));
j16eval[2]=IKsign(x1082);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1087=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1087);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1087);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1088=(cj14*cj15*r22*sj15);
j16eval[0]=x1088;
j16eval[1]=IKsign(x1088);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1089=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1089);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1089);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1090=(sj14*sj15);
j16eval[0]=x1090;
j16eval[1]=IKsign(x1090);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1091=(cj10*sj12*sj14);
IkReal x1092=((1.0)*r11);
IkReal x1093=(cj11*sj10*sj15);
IkReal x1094=(cj10*cj14*cj15*sj12);
IkReal x1095=((1.0)*r10);
IkReal x1096=(cj12*sj10*sj11*sj14);
IkReal x1097=(cj12*cj14*cj15*sj10*sj11);
CheckValue<IkReal> x1098=IKPowWithIntegerCheck(IKsign((sj14*sj15)),-1);
if(!x1098.valid){
continue;
}
CheckValue<IkReal> x1099 = IKatan2WithCheck(IkReal((((r10*x1091))+(((-1.0)*x1095*x1096))+(((-1.0)*x1092*x1093))+((r11*x1094))+(((-1.0)*x1092*x1097)))),IkReal((((r10*x1093))+((r11*x1091))+((r10*x1097))+(((-1.0)*x1094*x1095))+(((-1.0)*x1092*x1096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1099.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x1098.value)))+(x1099.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1100=(cj10*sj12);
IkReal x1101=((1.0)*sj10);
IkReal x1102=(cj12*x1101);
IkReal x1103=IKsin(j16);
IkReal x1104=(sj15*x1103);
IkReal x1105=(r10*x1104);
IkReal x1106=IKcos(j16);
IkReal x1107=(sj15*x1106);
IkReal x1108=(r11*x1107);
IkReal x1109=(cj10*cj12);
IkReal x1110=(r00*x1104);
IkReal x1111=(r01*x1107);
IkReal x1112=(cj10*cj11);
IkReal x1113=(sj14*x1103);
IkReal x1114=((1.0)*sj14*x1106);
IkReal x1115=((1.0)*cj14*cj15*x1103);
IkReal x1116=((1.0)*cj14*cj15*x1106);
IkReal x1117=(cj11*sj10);
IkReal x1118=(cj14*x1106);
IkReal x1119=((1.0)*cj14*x1103);
IkReal x1120=((1.0)*cj15*sj14*x1103);
IkReal x1121=((1.0)*cj15*sj14*x1106);
IkReal x1122=((0.069)*cj10);
IkReal x1123=((0.069)*sj10);
IkReal x1124=(cj12*sj11);
IkReal x1125=((0.01)*cj15*x1103);
IkReal x1126=((0.01)*cj15*x1106);
evalcond[0]=(x1108+x1105+x1100+(((-1.0)*sj11*x1102)));
evalcond[1]=(x1111+x1110+(((-1.0)*sj12*x1101))+(((-1.0)*sj11*x1109)));
evalcond[2]=((((-1.0)*r00*x1114))+(((-1.0)*r01*x1116))+((r01*x1113))+(((-1.0)*x1112))+(((-1.0)*r00*x1115)));
evalcond[3]=((((-1.0)*r10*x1114))+(((-1.0)*r10*x1115))+(((-1.0)*r11*x1116))+((r11*x1113))+(((-1.0)*x1117)));
evalcond[4]=((((-1.0)*r11*x1121))+((r10*x1118))+(((-1.0)*r10*x1120))+x1109+(((-1.0)*r11*x1119))+((sj10*sj11*sj12)));
evalcond[5]=(((sj11*x1100))+(((-1.0)*r01*x1119))+(((-1.0)*r01*x1121))+((r00*x1118))+(((-1.0)*x1102))+(((-1.0)*r00*x1120)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x1111))+(((0.36442)*x1112))+((r00*x1125))+x1122+(((-1.0)*sj12*x1123))+(((-1.0)*x1122*x1124))+(((-0.37429)*x1110))+((r01*x1126)));
evalcond[7]=((((-1.0)*(1.0)*py))+((sj12*x1122))+((r11*x1126))+((r10*x1125))+x1123+(((-1.0)*x1123*x1124))+(((-0.37429)*x1105))+(((-0.37429)*x1108))+(((0.36442)*x1117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1127=(cj10*sj12*sj14);
IkReal x1128=(cj10*cj11*sj15);
IkReal x1129=(cj10*cj14*cj15*sj12);
IkReal x1130=((1.0)*r00);
IkReal x1131=(cj12*sj10*sj11*sj14);
IkReal x1132=((1.0)*r01);
IkReal x1133=(cj12*cj14*cj15*sj10*sj11);
CheckValue<IkReal> x1134 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1128))+((r01*x1129))+((r00*x1127))+(((-1.0)*x1132*x1133))+(((-1.0)*x1130*x1131)))),IkReal(((((-1.0)*x1131*x1132))+((r01*x1127))+(((-1.0)*x1129*x1130))+((r10*x1128))+((r00*x1133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1134.valid){
continue;
}
CheckValue<IkReal> x1135=IKPowWithIntegerCheck(IKsign((((r22*sj15))*((cj14*cj15)))),-1);
if(!x1135.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1134.value)+(((1.5707963267949)*(x1135.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1136=(cj10*sj12);
IkReal x1137=((1.0)*sj10);
IkReal x1138=(cj12*x1137);
IkReal x1139=IKsin(j16);
IkReal x1140=(sj15*x1139);
IkReal x1141=(r10*x1140);
IkReal x1142=IKcos(j16);
IkReal x1143=(sj15*x1142);
IkReal x1144=(r11*x1143);
IkReal x1145=(cj10*cj12);
IkReal x1146=(r00*x1140);
IkReal x1147=(r01*x1143);
IkReal x1148=(cj10*cj11);
IkReal x1149=(sj14*x1139);
IkReal x1150=((1.0)*sj14*x1142);
IkReal x1151=((1.0)*cj14*cj15*x1139);
IkReal x1152=((1.0)*cj14*cj15*x1142);
IkReal x1153=(cj11*sj10);
IkReal x1154=(cj14*x1142);
IkReal x1155=((1.0)*cj14*x1139);
IkReal x1156=((1.0)*cj15*sj14*x1139);
IkReal x1157=((1.0)*cj15*sj14*x1142);
IkReal x1158=((0.069)*cj10);
IkReal x1159=((0.069)*sj10);
IkReal x1160=(cj12*sj11);
IkReal x1161=((0.01)*cj15*x1139);
IkReal x1162=((0.01)*cj15*x1142);
evalcond[0]=((((-1.0)*sj11*x1138))+x1141+x1144+x1136);
evalcond[1]=((((-1.0)*sj11*x1145))+(((-1.0)*sj12*x1137))+x1146+x1147);
evalcond[2]=((((-1.0)*x1148))+(((-1.0)*r00*x1151))+(((-1.0)*r00*x1150))+((r01*x1149))+(((-1.0)*r01*x1152)));
evalcond[3]=((((-1.0)*r10*x1151))+((r11*x1149))+(((-1.0)*r10*x1150))+(((-1.0)*r11*x1152))+(((-1.0)*x1153)));
evalcond[4]=((((-1.0)*r10*x1156))+(((-1.0)*r11*x1155))+x1145+((r10*x1154))+(((-1.0)*r11*x1157))+((sj10*sj11*sj12)));
evalcond[5]=((((-1.0)*r01*x1157))+((sj11*x1136))+(((-1.0)*r01*x1155))+((r00*x1154))+(((-1.0)*r00*x1156))+(((-1.0)*x1138)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r01*x1162))+x1158+(((-1.0)*x1158*x1160))+(((-0.37429)*x1147))+(((0.36442)*x1148))+(((-0.37429)*x1146))+(((-1.0)*sj12*x1159))+((r00*x1161)));
evalcond[7]=((((-1.0)*(1.0)*py))+x1159+(((-0.37429)*x1141))+(((-1.0)*x1159*x1160))+((r11*x1162))+((sj12*x1158))+((r10*x1161))+(((-0.37429)*x1144))+(((0.36442)*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1163=(cj10*sj12);
IkReal x1164=(sj10*sj12);
IkReal x1165=(cj10*cj12*sj11);
IkReal x1166=(cj12*sj10*sj11);
IkReal x1167=((1.0)*r10);
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(IKsign((r22*sj15)),-1);
if(!x1168.valid){
continue;
}
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal((((r11*x1165))+((r11*x1164))+((r01*x1163))+(((-1.0)*r01*x1166)))),IkReal(((((-1.0)*x1165*x1167))+(((-1.0)*x1164*x1167))+(((-1.0)*r00*x1163))+((r00*x1166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1168.value)))+(x1169.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1170=(cj10*sj12);
IkReal x1171=((1.0)*sj10);
IkReal x1172=(cj12*x1171);
IkReal x1173=IKsin(j16);
IkReal x1174=(sj15*x1173);
IkReal x1175=(r10*x1174);
IkReal x1176=IKcos(j16);
IkReal x1177=(sj15*x1176);
IkReal x1178=(r11*x1177);
IkReal x1179=(cj10*cj12);
IkReal x1180=(r00*x1174);
IkReal x1181=(r01*x1177);
IkReal x1182=(cj10*cj11);
IkReal x1183=(sj14*x1173);
IkReal x1184=((1.0)*sj14*x1176);
IkReal x1185=((1.0)*cj14*cj15*x1173);
IkReal x1186=((1.0)*cj14*cj15*x1176);
IkReal x1187=(cj11*sj10);
IkReal x1188=(cj14*x1176);
IkReal x1189=((1.0)*cj14*x1173);
IkReal x1190=((1.0)*cj15*sj14*x1173);
IkReal x1191=((1.0)*cj15*sj14*x1176);
IkReal x1192=((0.069)*cj10);
IkReal x1193=((0.069)*sj10);
IkReal x1194=(cj12*sj11);
IkReal x1195=((0.01)*cj15*x1173);
IkReal x1196=((0.01)*cj15*x1176);
evalcond[0]=((((-1.0)*sj11*x1172))+x1178+x1175+x1170);
evalcond[1]=((((-1.0)*sj12*x1171))+(((-1.0)*sj11*x1179))+x1180+x1181);
evalcond[2]=((((-1.0)*r01*x1186))+(((-1.0)*r00*x1185))+(((-1.0)*r00*x1184))+((r01*x1183))+(((-1.0)*x1182)));
evalcond[3]=((((-1.0)*r10*x1184))+(((-1.0)*x1187))+(((-1.0)*r11*x1186))+((r11*x1183))+(((-1.0)*r10*x1185)));
evalcond[4]=((((-1.0)*r11*x1191))+(((-1.0)*r11*x1189))+((r10*x1188))+x1179+(((-1.0)*r10*x1190))+((sj10*sj11*sj12)));
evalcond[5]=((((-1.0)*r00*x1190))+((r00*x1188))+(((-1.0)*r01*x1191))+(((-1.0)*r01*x1189))+(((-1.0)*x1172))+((sj11*x1170)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*sj12*x1193))+(((-1.0)*x1192*x1194))+((r00*x1195))+(((0.36442)*x1182))+((r01*x1196))+x1192+(((-0.37429)*x1180))+(((-0.37429)*x1181)));
evalcond[7]=(((r11*x1196))+(((-1.0)*(1.0)*py))+(((0.36442)*x1187))+(((-1.0)*x1193*x1194))+((sj12*x1192))+(((-0.37429)*x1175))+((r10*x1195))+x1193+(((-0.37429)*x1178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x1197=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1197);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1197);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1198=(r22*sj15);
j14eval[0]=x1198;
j14eval[1]=((IKabs((cj11*sj12)))+(IKabs(sj11)));
j14eval[2]=IKsign(x1198);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1199=IKPowWithIntegerCheck(IKsign((r22*sj15)),-1);
if(!x1199.valid){
continue;
}
CheckValue<IkReal> x1200 = IKatan2WithCheck(IkReal((cj11*sj12)),IkReal(((-1.0)*(((1.0)*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1199.value)))+(x1200.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x1201=(r22*sj15);
evalcond[0]=(((x1201*(IKcos(j14))))+sj11);
evalcond[1]=(((cj11*sj12))+(((-1.0)*x1201*(IKsin(j14)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1202=(r11*sj15);
IkReal x1203=((-1.0)*x1202);
IkReal x1204=(x1203+sj12);
IkReal x1205=(cj12*sj11);
IkReal x1206=((-1.0)*x1205);
IkReal x1207=(r01*sj15);
IkReal x1208=((-1.0)*x1207);
IkReal x1209=(x1206+x1208);
IkReal x1210=(x1206+x1207);
IkReal x1211=((-1.0)*(((1.0)*sj12)));
IkReal x1212=(x1203+x1211);
IkReal x1213=(x1202+x1211);
IkReal x1214=(x1205+x1208);
IkReal x1215=(x1205+x1207);
IkReal gconst142=x1204;
IkReal gconst143=x1209;
IkReal gconst144=x1210;
IkReal gconst145=x1204;
IkReal gconst146=x1209;
IkReal gconst147=x1210;
IkReal gconst148=x1212;
IkReal gconst149=x1213;
IkReal gconst150=x1214;
IkReal gconst151=x1215;
IkReal gconst152=x1212;
IkReal gconst153=x1213;
IkReal gconst154=x1214;
IkReal gconst155=x1215;
IkReal x1216=(gconst148*gconst151*gconst153);
IkReal x1217=(gconst149*gconst150);
IkReal x1218=(gconst152*gconst155);
IkReal x1219=(gconst153*gconst154);
IkReal x1220=sj15*sj15;
IkReal x1221=((4.0)*r00*r10*x1220);
IkReal x1222=r00*r00;
IkReal x1223=(gconst149*x1220*x1222);
IkReal x1224=r10*r10;
IkReal x1225=(x1220*x1224);
IkReal x1226=((2.0)*gconst152*sj12);
IkReal x1227=((2.0)*sj12);
IkReal x1228=((2.0)*gconst148*sj12);
IkReal x1229=((2.0)*gconst149*sj12);
IkReal x1230=((2.0)*cj12*gconst148*gconst151*sj11);
IkReal x1231=((2.0)*cj12*gconst149*gconst150*sj11);
IkReal x1232=((2.0)*cj12*gconst150*sj11);
IkReal x1233=((2.0)*cj12*gconst151*sj11);
IkReal x1234=((8.0)*r00*r10*sj12*x1220);
IkReal x1235=((8.0)*sj12*x1220*x1224);
IkReal x1236=((8.0)*cj12*r00*r10*sj11*x1220);
IkReal x1237=((8.0)*cj12*sj11);
IkReal x1238=((8.0)*cj12*sj11*x1220*x1222);
IkReal x1239=((2.0)*(sj12*sj12*sj12));
IkReal x1240=(gconst142*gconst144*sj12);
IkReal x1241=((2.0)*gconst142);
IkReal x1242=(gconst145*gconst147*sj12);
IkReal x1243=(gconst142*gconst144);
IkReal x1244=sj12*sj12;
IkReal x1245=((2.0)*x1244);
IkReal x1246=(gconst146*x1244);
IkReal x1247=((2.0)*gconst143*gconst145);
IkReal x1248=(gconst145*gconst147);
IkReal x1249=((2.0)*cj12*sj11);
IkReal x1250=(gconst142*gconst144*gconst146);
IkReal x1251=((2.0)*cj12*gconst147*sj11);
IkReal x1252=(gconst143*gconst145*gconst147);
IkReal x1253=(gconst146*sj12);
IkReal x1254=((4.0)*cj12*gconst143*sj11);
IkReal x1255=((2.0)*cj12*gconst144*sj11);
IkReal x1256=((2.0)*gconst146*sj12);
IkReal x1257=(cj12*gconst144*sj11);
IkReal x1258=((2.0)*r11*sj15);
IkReal x1259=(gconst143*r11*sj15);
IkReal x1260=(gconst146*r11*sj15);
IkReal x1261=(gconst145*r00*r10*x1220);
IkReal x1262=sj15*sj15*sj15;
IkReal x1263=(x1220*(r11*r11));
IkReal x1264=((8.0)*r00*r10*x1220);
IkReal x1265=(r11*sj15);
IkReal x1266=(r11*x1262);
IkReal x1267=((4.0)*gconst145*x1222);
op[0]=(((gconst154*x1216))+((x1217*x1218))+((gconst151*gconst152*x1221))+(((-1.0)*gconst148*gconst151*x1218))+(((-4.0)*gconst152*x1223))+(((-1.0)*gconst149*gconst150*x1219))+(((-4.0)*gconst151*gconst154*x1225))+((gconst149*gconst154*x1221)));
op[1]=(((gconst154*x1231))+(((-1.0)*x1218*x1232))+((x1223*x1237))+(((-1.0)*gconst151*x1236))+((x1218*x1228))+((gconst148*gconst151*x1226))+(((-1.0)*gconst154*x1230))+(((-1.0)*x1218*x1229))+((gconst151*x1235))+(((-1.0)*gconst154*x1236))+((gconst152*x1238))+(((-1.0)*gconst152*x1234))+((x1219*x1232))+((gconst154*x1235))+((x1219*x1229))+(((-1.0)*gconst155*x1231))+((gconst149*gconst150*gconst153*x1227))+(((-1.0)*x1219*x1228))+(((-1.0)*gconst149*x1234))+((gconst155*x1230))+(((-1.0)*x1216*x1227))+((x1218*x1233))+(((-1.0)*x1217*x1226))+(((-1.0)*x1219*x1233)));
op[2]=((((8.0)*gconst149*gconst154*r00*r10*(sj15*sj15)))+(((-4.0)*cj12*gconst150*gconst153*sj11*sj12))+(((32.0)*cj12*r00*r10*sj11*sj12*(sj15*sj15)))+(((-1.0)*gconst142*gconst151*gconst152*gconst155))+(((4.0)*gconst154*r00*r10*r11*(sj15*sj15*sj15)))+(((-1.0)*gconst145*gconst148*gconst151*gconst155))+(((4.0)*gconst149*gconst152*(sj12*sj12)))+(((-4.0)*gconst152*sj12*(r00*r00)*(sj15*sj15)))+(((-4.0)*cj12*gconst151*gconst152*sj11*sj12))+(((-16.0)*(cj12*cj12)*(r00*r00)*(sj11*sj11)*(sj15*sj15)))+((gconst150*gconst152*gconst155*sj12))+(((4.0)*gconst144*gconst152*r00*r10*(sj15*sj15)))+(((-1.0)*gconst146*gconst149*gconst150*gconst153))+(((-4.0)*gconst149*gconst153*(sj12*sj12)))+(((-4.0)*cj12*gconst149*gconst154*sj11*sj12))+(((4.0)*cj12*gconst150*gconst152*sj11*sj12))+(((-4.0)*gconst144*gconst154*(r10*r10)*(sj15*sj15)))+(((-8.0)*gconst149*gconst152*(r00*r00)*(sj15*sj15)))+(((-1.0)*gconst149*gconst150*gconst154*r11*sj15))+((gconst144*gconst148*gconst153*gconst154))+(((-1.0)*gconst143*gconst149*gconst153*gconst154))+(((-1.0)*gconst147*gconst148*gconst151*gconst152))+(((4.0)*gconst154*r00*r10*sj12*(sj15*sj15)))+((gconst145*gconst149*gconst150*gconst155))+((gconst142*gconst151*gconst153*gconst154))+(((-1.0)*gconst149*gconst150*gconst154*sj12))+(((-4.0)*gconst152*r11*(r00*r00)*(sj15*sj15*sj15)))+(((4.0)*gconst150*gconst155*(cj12*cj12)*(sj11*sj11)))+(((-4.0)*gconst150*gconst154*(cj12*cj12)*(sj11*sj11)))+((gconst150*gconst152*gconst155*r11*sj15))+(((-1.0)*gconst144*gconst148*gconst152*gconst155))+(((-4.0)*cj12*gconst148*gconst155*sj11*sj12))+((gconst143*gconst149*gconst152*gconst155))+(((4.0)*cj12*gconst148*gconst154*sj11*sj12))+(((4.0)*gconst151*gconst154*(cj12*cj12)*(sj11*sj11)))+(((4.0)*cj12*gconst151*gconst153*sj11*sj12))+(((-4.0)*gconst145*gconst149*(r00*r00)*(sj15*sj15)))+(((-1.0)*gconst150*gconst153*gconst154*sj12))+(((4.0)*gconst146*gconst149*r00*r10*(sj15*sj15)))+(((-4.0)*gconst148*gconst152*(sj12*sj12)))+((gconst148*gconst151*gconst154*r11*sj15))+(((-1.0)*gconst150*gconst153*gconst154*r11*sj15))+(((-8.0)*gconst151*gconst154*(r10*r10)*(sj15*sj15)))+(((4.0)*gconst148*gconst153*(sj12*sj12)))+(((4.0)*cj12*gconst149*gconst155*sj11*sj12))+(((-4.0)*gconst146*gconst151*(r10*r10)*(sj15*sj15)))+(((4.0)*gconst145*gconst151*r00*r10*(sj15*sj15)))+(((-4.0)*gconst151*gconst155*(cj12*cj12)*(sj11*sj11)))+(((8.0)*gconst151*gconst152*r00*r10*(sj15*sj15)))+(((-16.0)*(r10*r10)*(sj12*sj12)*(sj15*sj15)))+((gconst148*gconst151*gconst154*sj12))+((gconst147*gconst149*gconst150*gconst152))+((gconst146*gconst148*gconst151*gconst153)));
op[3]=((((-2.0)*cj12*gconst144*gconst148*gconst154*sj11))+(((2.0)*gconst142*gconst151*gconst152*sj12))+(((-2.0)*gconst148*gconst154*r11*sj12*sj15))+(((2.0)*gconst143*gconst149*gconst153*sj12))+(((-2.0)*cj12*gconst145*gconst150*gconst155*sj11))+(((-2.0)*gconst145*gconst149*gconst155*sj12))+(((2.0)*gconst145*gconst148*gconst151*sj12))+(((8.0)*gconst144*sj12*(r10*r10)*(sj15*sj15)))+(((2.0)*gconst153*gconst154*(sj12*sj12)))+(((16.0)*cj12*gconst152*sj11*(r00*r00)*(sj15*sj15)))+(((2.0)*gconst147*gconst148*gconst152*sj12))+(((-2.0)*cj12*gconst143*gconst149*gconst155*sj11))+(((-8.0)*r00*r10*(sj12*sj12)*(sj15*sj15)))+(((-8.0)*gconst145*r00*r10*sj12*(sj15*sj15)))+(((-16.0)*gconst149*r00*r10*sj12*(sj15*sj15)))+(((2.0)*cj12*gconst142*gconst151*gconst155*sj11))+(((-16.0)*cj12*gconst154*r00*r10*sj11*(sj15*sj15)))+(((-2.0)*gconst150*gconst152*r11*sj12*sj15))+(((2.0)*gconst150*gconst153*(sj12*sj12)))+(((2.0)*gconst150*gconst153*r11*sj12*sj15))+(((-2.0)*cj12*gconst150*gconst155*r11*sj11*sj15))+(((2.0)*gconst149*gconst154*(sj12*sj12)))+(((-16.0)*gconst152*r00*r10*sj12*(sj15*sj15)))+(((-16.0)*cj12*gconst151*r00*r10*sj11*(sj15*sj15)))+(((-2.0)*gconst144*gconst148*gconst153*sj12))+(((2.0)*cj12*gconst145*gconst151*gconst155*sj11))+(((2.0)*cj12*gconst147*gconst151*gconst152*sj11))+(((8.0)*cj12*r11*sj11*(r00*r00)*(sj15*sj15*sj15)))+(((2.0)*cj12*gconst144*gconst152*gconst155*sj11))+(((2.0)*gconst144*gconst148*gconst152*sj12))+(((2.0)*cj12*gconst143*gconst149*gconst154*sj11))+(((2.0)*gconst145*gconst148*gconst155*sj12))+(((-2.0)*gconst148*gconst151*(sj12*sj12)))+(((-2.0)*gconst145*gconst149*gconst150*sj12))+(((-2.0)*gconst150*gconst152*(sj12*sj12)))+(((-2.0)*cj12*gconst142*gconst151*gconst154*sj11))+(((2.0)*gconst149*gconst150*(sj12*sj12)))+(((8.0)*gconst146*sj12*(r10*r10)*(sj15*sj15)))+(((2.0)*gconst142*gconst152*gconst155*sj12))+(((-2.0)*cj12*gconst146*gconst148*gconst151*sj11))+(((-2.0)*gconst148*gconst154*(sj12*sj12)))+(((-8.0)*r00*r10*r11*sj12*(sj15*sj15*sj15)))+(((-2.0)*cj12*gconst151*gconst154*sj11*sj12))+(((2.0)*gconst149*gconst150*r11*sj12*sj15))+(((2.0)*cj12*gconst143*gconst153*gconst154*sj11))+(((-8.0)*cj12*gconst146*r00*r10*sj11*(sj15*sj15)))+(((4.0)*cj12*gconst150*gconst154*r11*sj11*sj15))+(((8.0)*cj12*gconst145*sj11*(r00*r00)*(sj15*sj15)))+(((16.0)*gconst154*sj12*(r10*r10)*(sj15*sj15)))+(((-2.0)*cj12*gconst144*gconst153*gconst154*sj11))+(((-2.0)*cj12*gconst146*gconst151*gconst153*sj11))+(((-2.0)*gconst147*gconst149*gconst152*sj12))+(((-2.0)*gconst152*gconst155*r11*sj12*sj15))+(((-2.0)*gconst146*gconst148*gconst153*sj12))+(((-2.0)*gconst142*gconst151*gconst153*sj12))+(((-8.0)*cj12*gconst144*r00*r10*sj11*(sj15*sj15)))+(((16.0)*cj12*gconst149*sj11*(r00*r00)*(sj15*sj15)))+(((-2.0)*gconst148*gconst151*r11*sj12*sj15))+(((2.0)*gconst146*gconst149*gconst153*sj12))+(((2.0)*cj12*gconst146*gconst149*gconst150*sj11))+(((-2.0)*cj12*gconst147*gconst149*gconst150*sj11))+(((16.0)*gconst151*sj12*(r10*r10)*(sj15*sj15)))+(((2.0)*cj12*gconst144*gconst148*gconst155*sj11))+(((4.0)*cj12*gconst150*gconst154*sj11*sj12))+(((2.0)*gconst153*gconst154*r11*sj12*sj15))+(((-2.0)*cj12*gconst147*gconst150*gconst152*sj11))+(((-2.0)*cj12*gconst143*gconst152*gconst155*sj11))+(((2.0)*cj12*gconst147*gconst148*gconst151*sj11))+(((-2.0)*gconst143*gconst149*gconst152*sj12))+(((2.0)*gconst149*gconst154*r11*sj12*sj15))+(((-2.0)*cj12*gconst151*gconst154*r11*sj11*sj15))+(((-2.0)*cj12*gconst150*gconst155*sj11*sj12))+(((2.0)*cj12*gconst146*gconst150*gconst153*sj11))+(((8.0)*cj12*sj11*sj12*(r00*r00)*(sj15*sj15)))+(((-2.0)*gconst142*gconst153*gconst154*sj12))+(((-2.0)*gconst152*gconst155*(sj12*sj12))));
op[4]=(((gconst143*gconst145*gconst149*gconst155))+(((-1.0)*gconst150*gconst154*(sj12*sj12)))+(((-8.0)*gconst152*sj12*(r00*r00)*(sj15*sj15)))+(((-1.0)*gconst143*gconst146*gconst149*gconst153))+(((-4.0)*gconst145*gconst148*(sj12*sj12)))+(((-8.0)*gconst144*gconst154*(r10*r10)*(sj15*sj15)))+(((4.0)*gconst142*gconst153*(sj12*sj12)))+((gconst143*gconst152*gconst155*r11*sj15))+(((-1.0)*gconst146*gconst150*gconst153*r11*sj15))+((gconst146*gconst148*gconst151*sj12))+(((4.0)*cj12*gconst146*gconst148*sj11*sj12))+(((-1.0)*gconst143*gconst149*gconst154*r11*sj15))+((gconst147*gconst150*gconst152*sj12))+((gconst145*gconst150*gconst155*r11*sj15))+(((-1.0)*gconst144*gconst145*gconst148*gconst155))+(((-4.0)*gconst145*r11*(r00*r00)*(sj15*sj15*sj15)))+(((8.0)*gconst145*gconst151*r00*r10*(sj15*sj15)))+(((4.0)*cj12*gconst151*r11*sj11*sj12*sj15))+(((-4.0)*gconst153*r11*sj15*(sj12*sj12)))+(((4.0)*gconst143*gconst155*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst143*gconst153*gconst154*sj12))+(((-1.0)*gconst142*gconst145*gconst151*gconst155))+(((4.0)*cj12*gconst155*r11*sj11*sj12*sj15))+(((-8.0)*gconst145*gconst149*(r00*r00)*(sj15*sj15)))+(((4.0)*cj12*gconst145*gconst150*sj11*sj12))+(((4.0)*cj12*gconst142*gconst154*sj11*sj12))+(((4.0)*gconst146*r00*r10*sj12*(sj15*sj15)))+(((64.0)*cj12*r00*r10*sj11*sj12*(sj15*sj15)))+(((4.0)*gconst146*gconst151*(cj12*cj12)*(sj11*sj11)))+((gconst147*gconst150*gconst152*r11*sj15))+((gconst144*gconst148*gconst154*r11*sj15))+(((8.0)*gconst154*r00*r10*sj12*(sj15*sj15)))+(((-4.0)*cj12*gconst144*gconst152*sj11*sj12))+(((4.0)*cj12*gconst155*sj11*(sj12*sj12)))+(((-32.0)*(r10*r10)*(sj12*sj12)*(sj15*sj15)))+(((4.0)*gconst148*(sj12*sj12*sj12)))+(((8.0)*gconst154*r00*r10*r11*(sj15*sj15*sj15)))+(((-8.0)*gconst146*gconst151*(r10*r10)*(sj15*sj15)))+((gconst145*gconst150*gconst155*sj12))+(((-4.0)*gconst147*gconst151*(cj12*cj12)*(sj11*sj11)))+((gconst142*gconst151*gconst154*r11*sj15))+(((-4.0)*cj12*gconst154*r11*sj11*sj12*sj15))+(((-1.0)*gconst142*gconst147*gconst151*gconst152))+(((-4.0)*gconst149*gconst152*(r00*r00)*(sj15*sj15)))+((gconst142*gconst144*gconst153*gconst154))+(((4.0)*gconst145*gconst149*(sj12*sj12)))+(((-1.0)*gconst143*gconst153*gconst154*r11*sj15))+(((-4.0)*gconst149*r11*sj15*(sj12*sj12)))+(((4.0)*cj12*gconst144*gconst153*sj11*sj12))+((gconst143*gconst152*gconst155*sj12))+(((-2.0)*gconst150*gconst154*r11*sj12*sj15))+((gconst144*gconst146*gconst148*gconst153))+(((-4.0)*gconst144*gconst155*(cj12*cj12)*(sj11*sj11)))+((gconst144*gconst148*gconst154*sj12))+(((-4.0)*gconst153*(sj12*sj12*sj12)))+(((4.0)*gconst144*gconst145*r00*r10*(sj15*sj15)))+(((-4.0)*cj12*gconst142*gconst155*sj11*sj12))+(((-8.0)*gconst152*r11*(r00*r00)*(sj15*sj15*sj15)))+(((-4.0)*gconst142*gconst152*(sj12*sj12)))+(((8.0)*gconst144*gconst152*r00*r10*(sj15*sj15)))+(((-4.0)*cj12*gconst143*gconst153*sj11*sj12))+(((-1.0)*gconst144*gconst147*gconst148*gconst152))+(((-32.0)*(cj12*cj12)*(r00*r00)*(sj11*sj11)*(sj15*sj15)))+(((8.0)*gconst146*gconst149*r00*r10*(sj15*sj15)))+(((-4.0)*gconst149*(sj12*sj12*sj12)))+(((-4.0)*gconst143*gconst154*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst145*gconst147*gconst148*gconst151))+((gconst142*gconst151*gconst154*sj12))+(((4.0)*gconst147*gconst150*(cj12*cj12)*(sj11*sj11)))+(((4.0)*cj12*gconst151*sj11*(sj12*sj12)))+((gconst146*gconst148*gconst151*r11*sj15))+(((4.0)*gconst146*r00*r10*r11*(sj15*sj15*sj15)))+(((4.0)*cj12*gconst143*gconst152*sj11*sj12))+(((-4.0)*cj12*gconst150*sj11*(sj12*sj12)))+(((4.0)*gconst144*gconst154*(cj12*cj12)*(sj11*sj11)))+(((-4.0)*cj12*gconst146*gconst149*sj11*sj12))+(((4.0)*gconst149*gconst154*r00*r10*(sj15*sj15)))+(((-4.0)*gconst145*sj12*(r00*r00)*(sj15*sj15)))+(((-1.0)*gconst143*gconst149*gconst154*sj12))+(((-4.0)*gconst151*gconst154*(r10*r10)*(sj15*sj15)))+((gconst145*gconst147*gconst149*gconst150))+(((-1.0)*gconst146*gconst150*gconst153*sj12))+(((-4.0)*cj12*gconst145*gconst151*sj11*sj12))+(((-4.0)*cj12*gconst150*r11*sj11*sj12*sj15))+(((4.0)*gconst152*r11*sj15*(sj12*sj12)))+((gconst143*gconst147*gconst149*gconst152))+(((-4.0)*cj12*gconst147*gconst148*sj11*sj12))+(((4.0)*gconst148*r11*sj15*(sj12*sj12)))+(((-4.0)*gconst144*gconst146*(r10*r10)*(sj15*sj15)))+(((-1.0)*gconst146*gconst149*gconst150*sj12))+(((4.0)*gconst152*(sj12*sj12*sj12)))+(((-4.0)*cj12*gconst154*sj11*(sj12*sj12)))+(((-1.0)*gconst146*gconst149*gconst150*r11*sj15))+(((4.0)*gconst151*gconst152*r00*r10*(sj15*sj15)))+(((-1.0)*gconst150*gconst154*(r11*r11)*(sj15*sj15)))+((gconst142*gconst146*gconst151*gconst153))+(((4.0)*cj12*gconst147*gconst149*sj11*sj12))+(((-4.0)*gconst146*gconst150*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst142*gconst144*gconst152*gconst155)));
op[5]=((((-2.0)*gconst142*gconst154*(sj12*sj12)))+(((-2.0)*cj12*gconst143*gconst145*gconst155*sj11))+(((2.0)*gconst143*gconst153*r11*sj12*sj15))+(((8.0)*cj12*gconst149*sj11*(r00*r00)*(sj15*sj15)))+(((-2.0)*gconst142*gconst154*r11*sj12*sj15))+(((-8.0)*cj12*gconst154*r00*r10*sj11*(sj15*sj15)))+(((-2.0)*gconst147*gconst152*(sj12*sj12)))+(((2.0)*gconst142*gconst144*gconst152*sj12))+(((-2.0)*gconst146*gconst148*(sj12*sj12)))+(((-2.0)*cj12*gconst143*gconst155*sj11*sj12))+(((2.0)*cj12*gconst144*gconst145*gconst155*sj11))+(((-2.0)*gconst142*gconst151*(sj12*sj12)))+(((-2.0)*gconst144*gconst148*r11*sj12*sj15))+(((2.0)*cj12*gconst143*gconst146*gconst153*sj11))+(((2.0)*gconst145*gconst147*gconst148*sj12))+(((-16.0)*gconst145*r00*r10*sj12*(sj15*sj15)))+(((2.0)*gconst146*gconst149*r11*sj12*sj15))+(((-16.0)*cj12*gconst144*r00*r10*sj11*(sj15*sj15)))+(((-2.0)*gconst143*gconst152*r11*sj12*sj15))+(((-2.0)*cj12*gconst143*gconst155*r11*sj11*sj15))+(((-2.0)*gconst142*gconst144*gconst153*sj12))+(((2.0)*cj12*gconst142*gconst147*gconst151*sj11))+(((-2.0)*gconst145*gconst147*gconst149*sj12))+(((-2.0)*gconst142*gconst151*r11*sj12*sj15))+(((-2.0)*cj12*gconst144*gconst154*sj11*sj12))+(((-2.0)*cj12*gconst142*gconst146*gconst151*sj11))+(((-16.0)*cj12*gconst146*r00*r10*sj11*(sj15*sj15)))+(((-2.0)*cj12*gconst147*gconst150*sj11*sj12))+(((4.0)*cj12*gconst143*gconst154*sj11*sj12))+(((-2.0)*cj12*gconst144*gconst146*gconst148*sj11))+(((-2.0)*cj12*gconst144*gconst146*gconst153*sj11))+(((2.0)*cj12*gconst144*gconst147*gconst148*sj11))+(((2.0)*gconst150*sj12*(r11*r11)*(sj15*sj15)))+(((4.0)*gconst154*r11*sj15*(sj12*sj12)))+(((2.0)*gconst143*gconst149*r11*sj12*sj15))+(((2.0)*gconst154*(sj12*sj12*sj12)))+(((2.0)*gconst143*gconst153*(sj12*sj12)))+(((16.0)*cj12*r11*sj11*(r00*r00)*(sj15*sj15*sj15)))+(((-2.0)*cj12*gconst146*gconst151*r11*sj11*sj15))+(((-8.0)*gconst149*r00*r10*sj12*(sj15*sj15)))+(((-2.0)*gconst144*gconst148*(sj12*sj12)))+(((-2.0)*gconst145*gconst155*(sj12*sj12)))+(((16.0)*gconst144*sj12*(r10*r10)*(sj15*sj15)))+(((-2.0)*gconst145*gconst155*r11*sj12*sj15))+(((2.0)*cj12*gconst145*gconst147*gconst151*sj11))+(((2.0)*gconst146*gconst153*(sj12*sj12)))+(((2.0)*gconst154*sj12*(r11*r11)*(sj15*sj15)))+(((-2.0)*gconst145*gconst150*r11*sj12*sj15))+(((8.0)*cj12*gconst152*sj11*(r00*r00)*(sj15*sj15)))+(((8.0)*gconst154*sj12*(r10*r10)*(sj15*sj15)))+(((16.0)*cj12*gconst145*sj11*(r00*r00)*(sj15*sj15)))+(((4.0)*cj12*gconst146*gconst150*sj11*sj12))+(((-2.0)*cj12*gconst142*gconst144*gconst154*sj11))+(((2.0)*gconst142*gconst145*gconst155*sj12))+(((16.0)*gconst146*sj12*(r10*r10)*(sj15*sj15)))+(((-2.0)*cj12*gconst143*gconst147*gconst152*sj11))+(((-16.0)*r00*r10*r11*sj12*(sj15*sj15*sj15)))+(((2.0)*gconst144*gconst145*gconst148*sj12))+(((2.0)*gconst150*(sj12*sj12*sj12)))+(((16.0)*cj12*sj11*sj12*(r00*r00)*(sj15*sj15)))+(((2.0)*gconst142*gconst147*gconst152*sj12))+(((-2.0)*cj12*gconst147*gconst150*r11*sj11*sj15))+(((-2.0)*gconst147*gconst152*r11*sj12*sj15))+(((-8.0)*cj12*gconst151*r00*r10*sj11*(sj15*sj15)))+(((2.0)*cj12*gconst142*gconst144*gconst155*sj11))+(((2.0)*cj12*gconst143*gconst146*gconst149*sj11))+(((4.0)*cj12*gconst146*gconst150*r11*sj11*sj15))+(((8.0)*gconst151*sj12*(r10*r10)*(sj15*sj15)))+(((-2.0)*gconst142*gconst146*gconst153*sj12))+(((-2.0)*cj12*gconst143*gconst147*gconst149*sj11))+(((-2.0)*gconst145*gconst150*(sj12*sj12)))+(((4.0)*cj12*gconst143*gconst154*r11*sj11*sj15))+(((2.0)*gconst143*gconst149*(sj12*sj12)))+(((2.0)*gconst146*gconst149*(sj12*sj12)))+(((-2.0)*gconst143*gconst152*(sj12*sj12)))+(((-2.0)*gconst143*gconst145*gconst149*sj12))+(((4.0)*gconst150*r11*sj15*(sj12*sj12)))+(((2.0)*gconst146*gconst153*r11*sj12*sj15))+(((2.0)*cj12*gconst144*gconst147*gconst152*sj11))+(((-2.0)*cj12*gconst146*gconst151*sj11*sj12))+(((-2.0)*cj12*gconst144*gconst154*r11*sj11*sj15))+(((-16.0)*r00*r10*(sj12*sj12)*(sj15*sj15)))+(((-8.0)*gconst152*r00*r10*sj12*(sj15*sj15)))+(((-2.0)*cj12*gconst145*gconst147*gconst150*sj11))+(((-2.0)*gconst146*gconst148*r11*sj12*sj15))+(((2.0)*gconst142*gconst145*gconst151*sj12)));
op[6]=((((-1.0)*gconst142*gconst144*gconst145*gconst155))+((gconst142*gconst144*gconst154*r11*sj15))+(((32.0)*cj12*r00*r10*sj11*sj12*(sj15*sj15)))+(((4.0)*cj12*gconst143*gconst145*sj11*sj12))+(((4.0)*gconst154*r00*r10*r11*(sj15*sj15*sj15)))+(((-4.0)*gconst152*sj12*(r00*r00)*(sj15*sj15)))+(((-1.0)*gconst146*gconst150*(sj12*sj12)))+(((-1.0)*gconst142*gconst144*gconst147*gconst152))+((gconst144*gconst146*gconst148*r11*sj15))+(((-16.0)*(cj12*cj12)*(r00*r00)*(sj11*sj11)*(sj15*sj15)))+(((-8.0)*gconst145*sj12*(r00*r00)*(sj15*sj15)))+((gconst145*gconst147*gconst150*sj12))+(((4.0)*gconst144*gconst152*r00*r10*(sj15*sj15)))+(((4.0)*gconst142*r11*sj15*(sj12*sj12)))+(((-1.0)*gconst144*gconst145*gconst147*gconst148))+(((-1.0)*gconst146*gconst150*(r11*r11)*(sj15*sj15)))+(((-4.0)*gconst144*gconst154*(r10*r10)*(sj15*sj15)))+((gconst142*gconst146*gconst151*sj12))+(((-4.0)*cj12*gconst144*gconst145*sj11*sj12))+(((-4.0)*(sj12*sj12*sj12*sj12)))+(((4.0)*gconst142*(sj12*sj12*sj12)))+(((4.0)*gconst154*r00*r10*sj12*(sj15*sj15)))+((gconst143*gconst145*gconst147*gconst149))+((gconst143*gconst147*gconst152*sj12))+(((-1.0)*gconst143*gconst146*gconst149*sj12))+((gconst142*gconst146*gconst151*r11*sj15))+(((4.0)*cj12*gconst147*sj11*(sj12*sj12)))+(((-4.0)*gconst152*r11*(r00*r00)*(sj15*sj15*sj15)))+(((-4.0)*cj12*gconst142*gconst147*sj11*sj12))+(((-4.0)*gconst144*gconst147*(cj12*cj12)*(sj11*sj11)))+((gconst143*gconst145*gconst155*sj12))+(((-1.0)*gconst142*gconst145*gconst147*gconst151))+(((-4.0)*cj12*gconst146*sj11*(sj12*sj12)))+(((8.0)*gconst146*r00*r10*sj12*(sj15*sj15)))+(((4.0)*gconst145*(sj12*sj12*sj12)))+(((8.0)*gconst144*gconst145*r00*r10*(sj15*sj15)))+(((4.0)*cj12*gconst144*r11*sj11*sj12*sj15))+(((-1.0)*gconst143*gconst154*(sj12*sj12)))+(((-4.0)*cj12*gconst146*r11*sj11*sj12*sj15))+(((-4.0)*cj12*gconst143*sj11*(sj12*sj12)))+(((4.0)*cj12*gconst147*r11*sj11*sj12*sj15))+(((4.0)*gconst143*gconst147*(cj12*cj12)*(sj11*sj11)))+(((-1.0)*gconst143*gconst146*gconst153*r11*sj15))+(((-2.0)*gconst143*gconst154*r11*sj12*sj15))+(((-8.0)*gconst144*gconst146*(r10*r10)*(sj15*sj15)))+((gconst143*gconst145*gconst155*r11*sj15))+((gconst142*gconst144*gconst146*gconst153))+((gconst144*gconst146*gconst148*sj12))+(((4.0)*gconst144*gconst146*(cj12*cj12)*(sj11*sj11)))+(((-4.0)*gconst145*gconst149*(r00*r00)*(sj15*sj15)))+((gconst145*gconst147*gconst150*r11*sj15))+(((4.0)*gconst146*gconst149*r00*r10*(sj15*sj15)))+(((-8.0)*gconst145*r11*(r00*r00)*(sj15*sj15*sj15)))+(((-1.0)*gconst143*gconst154*(r11*r11)*(sj15*sj15)))+(((-8.0)*r11*sj15*(sj12*sj12*sj12)))+(((-1.0)*gconst143*gconst146*gconst153*sj12))+((gconst142*gconst144*gconst154*sj12))+(((-1.0)*gconst143*gconst146*gconst149*r11*sj15))+(((-4.0)*(r11*r11)*(sj12*sj12)*(sj15*sj15)))+(((-4.0)*gconst146*gconst151*(r10*r10)*(sj15*sj15)))+(((4.0)*gconst145*r11*sj15*(sj12*sj12)))+((gconst143*gconst147*gconst152*r11*sj15))+(((4.0)*gconst145*gconst151*r00*r10*(sj15*sj15)))+(((4.0)*cj12*gconst144*sj11*(sj12*sj12)))+(((-4.0)*cj12*gconst143*r11*sj11*sj12*sj15))+(((-4.0)*gconst143*gconst146*(cj12*cj12)*(sj11*sj11)))+(((-16.0)*(r10*r10)*(sj12*sj12)*(sj15*sj15)))+(((4.0)*cj12*gconst142*gconst146*sj11*sj12))+(((-2.0)*gconst146*gconst150*r11*sj12*sj15))+(((-4.0)*gconst142*gconst145*(sj12*sj12)))+(((8.0)*gconst146*r00*r10*r11*(sj15*sj15*sj15))));
op[7]=(((gconst145*x1238))+((x1241*x1242))+(((8.0)*gconst146*sj12*x1225))+(((-1.0)*x1240*x1258))+(((-1.0)*x1242*x1258))+(((-1.0)*x1257*x1264))+(((4.0)*r11*sj15*x1246))+(((-2.0)*cj12*gconst143*gconst147*sj11*sj12))+((x1248*x1255))+(((-1.0)*x1243*x1245))+(((-1.0)*x1256*x1257))+(((8.0)*cj12*sj11*sj12*x1220*x1222))+(((-1.0)*x1249*x1252))+(((4.0)*x1244*x1259))+(((-8.0)*r00*r10*r11*sj12*x1262))+(((-1.0)*x1255*x1260))+((gconst144*x1235))+(((-8.0)*sj12*x1261))+((x1254*x1260))+(((-1.0)*gconst146*x1236))+((x1243*x1251))+(((-1.0)*x1244*x1264))+((gconst143*x1239))+(((2.0)*gconst145*x1240))+(((-1.0)*r11*sj12*sj15*x1247))+((gconst146*x1239))+(((2.0)*gconst143*sj12*x1263))+(((-1.0)*x1245*x1248))+(((-1.0)*x1249*x1250))+(((-1.0)*x1244*x1247))+((x1256*x1263))+(((-2.0)*gconst142*r11*sj15*x1253))+((r11*x1222*x1237*x1262))+((x1253*x1254))+(((-1.0)*x1241*x1246))+(((-1.0)*x1251*x1259)));
op[8]=((((-4.0)*gconst144*gconst146*x1225))+(((-1.0)*gconst143*x1246))+(((4.0)*gconst146*r00*r10*x1266))+(((-1.0)*x1256*x1259))+((x1252*x1265))+((gconst146*x1240))+(((-1.0)*x1266*x1267))+((gconst143*x1242))+(((4.0)*gconst144*x1261))+((x1221*x1253))+(((-1.0)*sj12*x1220*x1267))+(((-1.0)*gconst143*gconst146*x1263))+((x1250*x1265))+(((-1.0)*gconst142*gconst144*x1248)));
polyroots8(op,zeror,numroots);
IkReal j10array[8], cj10array[8], sj10array[8], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[8]={true,true,true,true,true,true,true,true};
_nj10 = 8;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
{
IkReal j16eval[3];
IkReal x1268=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1268);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1268);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1269=(r22*sj15);
IkReal x1270=cj10*cj10;
IkReal x1271=sj12*sj12;
IkReal x1272=sj10*sj10;
IkReal x1273=((cj12*cj12)*(sj11*sj11));
j16eval[0]=x1269;
j16eval[1]=(((x1270*x1271))+((x1270*x1273))+((x1271*x1272))+((x1272*x1273)));
j16eval[2]=IKsign(x1269);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1274=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1274);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1274);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1275=(sj14*sj15);
j16eval[0]=x1275;
j16eval[1]=IKsign(x1275);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1276=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1276);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1276);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1277=(cj14*cj15*r22*sj15);
j16eval[0]=x1277;
j16eval[1]=IKsign(x1277);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1278=(cj10*sj12*sj14);
IkReal x1279=(cj10*cj11*sj15);
IkReal x1280=(cj10*cj14*cj15*sj12);
IkReal x1281=((1.0)*r00);
IkReal x1282=(cj12*sj10*sj11*sj14);
IkReal x1283=((1.0)*r01);
IkReal x1284=(cj12*cj14*cj15*sj10*sj11);
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(IKsign((((r22*sj15))*((cj14*cj15)))),-1);
if(!x1285.valid){
continue;
}
CheckValue<IkReal> x1286 = IKatan2WithCheck(IkReal(((((-1.0)*x1283*x1284))+(((-1.0)*r11*x1279))+((r01*x1280))+(((-1.0)*x1281*x1282))+((r00*x1278)))),IkReal(((((-1.0)*x1280*x1281))+((r00*x1284))+(((-1.0)*x1282*x1283))+((r01*x1278))+((r10*x1279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1286.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1285.value)))+(x1286.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1287=(cj10*sj12);
IkReal x1288=((1.0)*sj10);
IkReal x1289=(cj12*x1288);
IkReal x1290=IKsin(j16);
IkReal x1291=(r10*sj15*x1290);
IkReal x1292=((1.0)*r11);
IkReal x1293=IKcos(j16);
IkReal x1294=(sj15*x1293);
IkReal x1295=(cj10*cj12);
IkReal x1296=(r00*sj15*x1290);
IkReal x1297=((1.0)*r01);
IkReal x1298=(cj10*cj11);
IkReal x1299=(sj14*x1293);
IkReal x1300=(sj14*x1290);
IkReal x1301=(cj14*cj15*x1290);
IkReal x1302=(cj14*cj15*x1293);
IkReal x1303=(cj11*sj10);
IkReal x1304=(cj14*x1293);
IkReal x1305=((1.0)*cj14*x1290);
IkReal x1306=((1.0)*cj15*sj14*x1290);
IkReal x1307=(cj15*sj14*x1293);
IkReal x1308=((0.069)*cj10);
IkReal x1309=((0.069)*sj10);
IkReal x1310=(cj12*sj11);
IkReal x1311=((0.01)*cj15*x1290);
IkReal x1312=((0.01)*cj15*x1293);
IkReal x1313=((0.37429)*sj15*x1293);
evalcond[0]=((((-1.0)*x1292*x1294))+(((-1.0)*sj11*x1289))+x1287+(((-1.0)*x1291)));
evalcond[1]=((((-1.0)*sj11*x1295))+(((-1.0)*x1296))+(((-1.0)*x1294*x1297))+(((-1.0)*sj12*x1288)));
evalcond[2]=((((-1.0)*x1297*x1300))+((r01*x1302))+(((-1.0)*x1298))+((r00*x1301))+((r00*x1299)));
evalcond[3]=(((r10*x1301))+(((-1.0)*x1303))+(((-1.0)*x1292*x1300))+((r10*x1299))+((r11*x1302)));
evalcond[4]=(((r10*x1304))+(((-1.0)*r10*x1306))+x1295+(((-1.0)*r11*x1305))+(((-1.0)*x1292*x1307))+((sj10*sj11*sj12)));
evalcond[5]=(((r00*x1304))+(((-1.0)*r00*x1306))+((sj11*x1287))+(((-1.0)*x1297*x1307))+(((-1.0)*r01*x1305))+(((-1.0)*x1289)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x1296))+x1308+(((-1.0)*x1308*x1310))+(((-1.0)*sj12*x1309))+(((0.36442)*x1298))+(((-1.0)*r01*x1313))+((r00*x1311))+((r01*x1312)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((0.36442)*x1303))+x1309+(((-1.0)*x1309*x1310))+(((-0.37429)*x1291))+(((-1.0)*r11*x1313))+((r10*x1311))+((sj12*x1308))+((r11*x1312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1314=(cj10*sj12*sj14);
IkReal x1315=((1.0)*r11);
IkReal x1316=(cj11*sj10*sj15);
IkReal x1317=(cj10*cj14*cj15*sj12);
IkReal x1318=((1.0)*r10);
IkReal x1319=(cj12*sj10*sj11*sj14);
IkReal x1320=(cj12*cj14*cj15*sj10*sj11);
CheckValue<IkReal> x1321 = IKatan2WithCheck(IkReal((((r10*x1314))+(((-1.0)*x1318*x1319))+((r11*x1317))+(((-1.0)*x1315*x1320))+(((-1.0)*x1315*x1316)))),IkReal(((((-1.0)*x1315*x1319))+((r10*x1316))+((r11*x1314))+((r10*x1320))+(((-1.0)*x1317*x1318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1321.valid){
continue;
}
CheckValue<IkReal> x1322=IKPowWithIntegerCheck(IKsign((sj14*sj15)),-1);
if(!x1322.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1321.value)+(((1.5707963267949)*(x1322.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1323=(cj10*sj12);
IkReal x1324=((1.0)*sj10);
IkReal x1325=(cj12*x1324);
IkReal x1326=IKsin(j16);
IkReal x1327=(r10*sj15*x1326);
IkReal x1328=((1.0)*r11);
IkReal x1329=IKcos(j16);
IkReal x1330=(sj15*x1329);
IkReal x1331=(cj10*cj12);
IkReal x1332=(r00*sj15*x1326);
IkReal x1333=((1.0)*r01);
IkReal x1334=(cj10*cj11);
IkReal x1335=(sj14*x1329);
IkReal x1336=(sj14*x1326);
IkReal x1337=(cj14*cj15*x1326);
IkReal x1338=(cj14*cj15*x1329);
IkReal x1339=(cj11*sj10);
IkReal x1340=(cj14*x1329);
IkReal x1341=((1.0)*cj14*x1326);
IkReal x1342=((1.0)*cj15*sj14*x1326);
IkReal x1343=(cj15*sj14*x1329);
IkReal x1344=((0.069)*cj10);
IkReal x1345=((0.069)*sj10);
IkReal x1346=(cj12*sj11);
IkReal x1347=((0.01)*cj15*x1326);
IkReal x1348=((0.01)*cj15*x1329);
IkReal x1349=((0.37429)*sj15*x1329);
evalcond[0]=((((-1.0)*x1328*x1330))+x1323+(((-1.0)*x1327))+(((-1.0)*sj11*x1325)));
evalcond[1]=((((-1.0)*x1332))+(((-1.0)*sj11*x1331))+(((-1.0)*sj12*x1324))+(((-1.0)*x1330*x1333)));
evalcond[2]=(((r01*x1338))+(((-1.0)*x1334))+(((-1.0)*x1333*x1336))+((r00*x1337))+((r00*x1335)));
evalcond[3]=((((-1.0)*x1339))+((r10*x1337))+((r10*x1335))+((r11*x1338))+(((-1.0)*x1328*x1336)));
evalcond[4]=((((-1.0)*r10*x1342))+(((-1.0)*x1328*x1343))+x1331+(((-1.0)*r11*x1341))+((r10*x1340))+((sj10*sj11*sj12)));
evalcond[5]=((((-1.0)*r00*x1342))+((sj11*x1323))+((r00*x1340))+(((-1.0)*r01*x1341))+(((-1.0)*x1325))+(((-1.0)*x1333*x1343)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*x1344*x1346))+((r01*x1348))+(((-0.37429)*x1332))+(((0.36442)*x1334))+((r00*x1347))+(((-1.0)*r01*x1349))+x1344+(((-1.0)*sj12*x1345)));
evalcond[7]=((((-0.37429)*x1327))+(((-1.0)*(1.0)*py))+((r10*x1347))+(((-1.0)*r11*x1349))+((sj12*x1344))+(((0.36442)*x1339))+((r11*x1348))+(((-1.0)*x1345*x1346))+x1345);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1350=(cj10*sj12);
IkReal x1351=((1.0)*r11);
IkReal x1352=(sj10*sj12);
IkReal x1353=(cj12*sj10*sj11);
IkReal x1354=(cj10*cj12*sj11);
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign((r22*sj15)),-1);
if(!x1355.valid){
continue;
}
CheckValue<IkReal> x1356 = IKatan2WithCheck(IkReal((((r01*x1353))+(((-1.0)*r01*x1350))+(((-1.0)*x1351*x1354))+(((-1.0)*x1351*x1352)))),IkReal((((r10*x1354))+((r10*x1352))+(((-1.0)*r00*x1353))+((r00*x1350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1356.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1355.value)))+(x1356.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1357=(cj10*sj12);
IkReal x1358=((1.0)*sj10);
IkReal x1359=(cj12*x1358);
IkReal x1360=IKsin(j16);
IkReal x1361=(r10*sj15*x1360);
IkReal x1362=((1.0)*r11);
IkReal x1363=IKcos(j16);
IkReal x1364=(sj15*x1363);
IkReal x1365=(cj10*cj12);
IkReal x1366=(r00*sj15*x1360);
IkReal x1367=((1.0)*r01);
IkReal x1368=(cj10*cj11);
IkReal x1369=(sj14*x1363);
IkReal x1370=(sj14*x1360);
IkReal x1371=(cj14*cj15*x1360);
IkReal x1372=(cj14*cj15*x1363);
IkReal x1373=(cj11*sj10);
IkReal x1374=(cj14*x1363);
IkReal x1375=((1.0)*cj14*x1360);
IkReal x1376=((1.0)*cj15*sj14*x1360);
IkReal x1377=(cj15*sj14*x1363);
IkReal x1378=((0.069)*cj10);
IkReal x1379=((0.069)*sj10);
IkReal x1380=(cj12*sj11);
IkReal x1381=((0.01)*cj15*x1360);
IkReal x1382=((0.01)*cj15*x1363);
IkReal x1383=((0.37429)*sj15*x1363);
evalcond[0]=((((-1.0)*x1362*x1364))+(((-1.0)*x1361))+(((-1.0)*sj11*x1359))+x1357);
evalcond[1]=((((-1.0)*x1364*x1367))+(((-1.0)*sj12*x1358))+(((-1.0)*sj11*x1365))+(((-1.0)*x1366)));
evalcond[2]=((((-1.0)*x1368))+((r00*x1371))+((r01*x1372))+((r00*x1369))+(((-1.0)*x1367*x1370)));
evalcond[3]=(((r10*x1371))+((r11*x1372))+((r10*x1369))+(((-1.0)*x1373))+(((-1.0)*x1362*x1370)));
evalcond[4]=((((-1.0)*r11*x1375))+((r10*x1374))+(((-1.0)*r10*x1376))+(((-1.0)*x1362*x1377))+x1365+((sj10*sj11*sj12)));
evalcond[5]=((((-1.0)*x1359))+(((-1.0)*x1367*x1377))+((r00*x1374))+((sj11*x1357))+(((-1.0)*r01*x1375))+(((-1.0)*r00*x1376)));
evalcond[6]=((((0.36442)*x1368))+(((-1.0)*(1.0)*px))+(((-1.0)*x1378*x1380))+x1378+(((-0.37429)*x1366))+((r01*x1382))+(((-1.0)*r01*x1383))+(((-1.0)*sj12*x1379))+((r00*x1381)));
evalcond[7]=((((-1.0)*r11*x1383))+((r10*x1381))+((sj12*x1378))+(((-1.0)*(1.0)*py))+x1379+((r11*x1382))+(((-1.0)*x1379*x1380))+(((0.36442)*x1373))+(((-0.37429)*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x1384=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1384);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1384);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal x1385=(r22*sj15);
j14eval[0]=x1385;
j14eval[1]=((IKabs((cj11*cj12)))+(IKabs((cj11*sj12))));
j14eval[2]=IKsign(x1385);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1386=IKPowWithIntegerCheck(IKsign((r22*sj15)),-1);
if(!x1386.valid){
continue;
}
CheckValue<IkReal> x1387 = IKatan2WithCheck(IkReal((cj11*sj12)),IkReal(((-1.0)*(((1.0)*cj11*cj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1387.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1386.value)))+(x1387.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x1388=((1.0)*r22*sj15);
evalcond[0]=(((cj11*sj12))+(((-1.0)*x1388*(IKsin(j14)))));
evalcond[1]=((((-1.0)*x1388*(IKcos(j14))))+(((-1.0)*(1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[1];
IkReal x1389=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1389);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1389);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal x1390=((((4.0)*r10))*((cj11*cj12*cj14)));
IkReal x1391=cj12*cj12;
IkReal x1392=((4.0)*r01*sj15);
IkReal x1393=(x1391*x1392);
IkReal x1394=(cj15*sj14);
IkReal x1395=((4.0)*cj11*cj12*r11*x1394);
IkReal x1396=((((4.0)*cj11*r00))*((cj14*sj11*sj12)));
IkReal x1397=((4.0)*cj11*r01*sj11*sj12*x1394);
IkReal x1398=sj11*sj11;
IkReal x1399=sj12*sj12;
IkReal x1400=(x1392*x1398*x1399);
IkReal x1401=(cj11*cj12*cj14*r11);
IkReal x1402=(r00*sj15*x1391);
IkReal x1403=(cj11*cj12*cj15*r10*sj14);
IkReal x1404=(cj11*cj14*r01*sj11*sj12);
IkReal x1405=(cj11*cj15*r00*sj11*sj12*sj14);
IkReal x1406=(r00*sj15*x1398*x1399);
j16eval[0]=((((0.5)*(IKabs(((((16.0)*x1402))+(((16.0)*x1403))+(((16.0)*x1401))+(((16.0)*x1404))+(((16.0)*x1406))+(((16.0)*x1405)))))))+(IKabs(((((8.0)*x1404))+(((8.0)*x1405))+(((8.0)*x1402))+(((8.0)*x1401))+(((8.0)*x1403))+(((8.0)*x1406)))))+(IKabs(((((-1.0)*x1393))+(((-1.0)*x1395))+(((-1.0)*x1400))+x1390+x1396+(((-1.0)*x1397)))))+(((0.5)*(IKabs((x1400+x1397+x1393+x1395+(((-1.0)*x1396))+(((-1.0)*x1390))))))));
if( IKabs(j16eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x1407=((((4.0)*r10))*((cj11*cj12*cj14)));
IkReal x1408=cj12*cj12;
IkReal x1409=((4.0)*r01*sj15);
IkReal x1410=(x1408*x1409);
IkReal x1411=(cj15*sj14);
IkReal x1412=((4.0)*cj11*cj12*r11*x1411);
IkReal x1413=((((4.0)*cj11*r00))*((cj14*sj11*sj12)));
IkReal x1414=((4.0)*cj11*r01*sj11*sj12*x1411);
IkReal x1415=sj11*sj11;
IkReal x1416=sj12*sj12;
IkReal x1417=(x1409*x1415*x1416);
IkReal x1418=((((-1.0)*x1417))+(((-1.0)*x1410))+(((-1.0)*x1412))+x1407+x1413+(((-1.0)*x1414)));
IkReal x1419=(cj11*cj12*cj14*r11);
IkReal x1420=(r00*sj15*x1408);
IkReal x1421=(cj11*cj12*cj15*r10*sj14);
IkReal x1422=(cj11*cj14*r01*sj11*sj12);
IkReal x1423=(cj11*cj15*r00*sj11*sj12*sj14);
IkReal x1424=(r00*sj15*x1415*x1416);
IkReal x1425=((((8.0)*x1421))+(((8.0)*x1424))+(((8.0)*x1420))+(((8.0)*x1422))+(((8.0)*x1419))+(((8.0)*x1423)));
IkReal x1426=((((-1.0)*x1407))+x1410+x1414+x1412+x1417+(((-1.0)*x1413)));
op[0]=x1418;
op[1]=x1425;
op[2]=x1418;
op[3]=((((16.0)*x1422))+(((16.0)*x1423))+(((16.0)*x1420))+(((16.0)*x1421))+(((16.0)*x1419))+(((16.0)*x1424)));
op[4]=x1426;
op[5]=x1425;
op[6]=x1426;
polyroots6(op,zeror,numroots);
IkReal j16array[6], cj16array[6], sj16array[6], tempj16array[1];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ++ij16)
{
IkReal htj16 = zeror[ij16];
tempj16array[0]=((2.0)*(atan(htj16)));
for(int kj16 = 0; kj16 < 1; ++kj16)
{
j16array[numsolutions] = tempj16array[kj16];
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
numsolutions++;
}
}
bool j16valid[6]={true,true,true,true,true,true};
_nj16 = 6;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
htj16 = IKtan(j16/2);

_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
{
IkReal j10eval[4];
IkReal x1427=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1427);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1427);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=cj11;
j10eval[1]=sj15;
j10eval[2]=((sj16*sj16)+(cj16*cj16));
j10eval[3]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x1428=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1428);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1428);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=cj11;
j10eval[1]=cj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x1429=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1429);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1429);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=cj11;
j10eval[1]=sj11;
j10eval[2]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x1437=IKPowWithIntegerCheck(cj11,-1);
if(!x1437.valid){
continue;
}
IkReal x1430=x1437.value;
IkReal x1431=(cj11*cj14);
IkReal x1432=(cj12*sj15);
IkReal x1433=(cj16*r01);
IkReal x1434=(r00*sj16);
IkReal x1435=(cj11*cj15*sj14);
IkReal x1436=((1.0)*sj15);
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(sj11,-1);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(sj12,-1);
if(!x1439.valid){
continue;
}
if( IKabs((x1430*(x1438.value)*(x1439.value)*((((x1432*x1434))+((x1432*x1433))+((r11*sj16*x1431))+(((-1.0)*cj16*r10*x1431))+((r10*sj16*x1435))+((cj16*r11*x1435)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1430*(((((-1.0)*x1434*x1436))+(((-1.0)*x1433*x1436)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1430*(x1438.value)*(x1439.value)*((((x1432*x1434))+((x1432*x1433))+((r11*sj16*x1431))+(((-1.0)*cj16*r10*x1431))+((r10*sj16*x1435))+((cj16*r11*x1435))))))+IKsqr((x1430*(((((-1.0)*x1434*x1436))+(((-1.0)*x1433*x1436))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x1430*(x1438.value)*(x1439.value)*((((x1432*x1434))+((x1432*x1433))+((r11*sj16*x1431))+(((-1.0)*cj16*r10*x1431))+((r10*sj16*x1435))+((cj16*r11*x1435))))), (x1430*(((((-1.0)*x1434*x1436))+(((-1.0)*x1433*x1436))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1440=IKcos(j10);
IkReal x1441=(cj11*x1440);
IkReal x1442=((1.0)*cj16);
IkReal x1443=(r01*sj15);
IkReal x1444=(r00*sj15*sj16);
IkReal x1445=IKsin(j10);
IkReal x1446=(cj11*x1445);
IkReal x1447=(r11*sj15);
IkReal x1448=(r10*sj15*sj16);
IkReal x1449=(cj14*cj16);
IkReal x1450=((1.0)*cj14*sj16);
IkReal x1451=((1.0)*cj15*cj16*sj14);
IkReal x1452=((1.0)*cj15*sj14*sj16);
IkReal x1453=((1.0)*x1445);
IkReal x1454=(cj12*x1453);
IkReal x1455=(sj12*x1440);
IkReal x1456=(sj14*sj16);
IkReal x1457=((1.0)*cj16*sj14);
IkReal x1458=((1.0)*cj14*cj15*cj16);
IkReal x1459=((1.0)*cj14*cj15*sj16);
IkReal x1460=(cj12*sj11*x1440);
IkReal x1461=((0.069)*x1445);
IkReal x1462=((0.01)*cj15*cj16);
IkReal x1463=((0.01)*cj15*sj16);
IkReal x1464=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x1444))+(((-1.0)*x1442*x1443))+(((-1.0)*x1441)));
evalcond[1]=((((-1.0)*x1442*x1447))+(((-1.0)*x1446))+(((-1.0)*x1448)));
evalcond[2]=(((sj11*sj12*x1445))+(((-1.0)*r11*x1451))+((cj12*x1440))+(((-1.0)*r11*x1450))+(((-1.0)*r10*x1452))+((r10*x1449)));
evalcond[3]=((((-1.0)*r00*x1452))+((r00*x1449))+(((-1.0)*x1454))+((sj11*x1455))+(((-1.0)*r01*x1451))+(((-1.0)*r01*x1450)));
evalcond[4]=((((-1.0)*r11*x1458))+(((-1.0)*sj11*x1454))+(((-1.0)*r10*x1457))+(((-1.0)*r10*x1459))+((r11*x1456))+x1455);
evalcond[5]=((((-1.0)*x1460))+(((-1.0)*r00*x1459))+(((-1.0)*r01*x1458))+(((-1.0)*sj12*x1453))+(((-1.0)*r00*x1457))+((r01*x1456)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((0.36442)*x1441))+(((-0.069)*x1460))+(((0.069)*x1440))+((r01*x1462))+(((-0.37429)*x1444))+((r00*x1463))+(((-1.0)*sj12*x1461))+(((-1.0)*x1443*x1464)));
evalcond[7]=((((-0.37429)*x1448))+(((-1.0)*(1.0)*py))+(((-1.0)*x1447*x1464))+((r11*x1462))+((r10*x1463))+x1461+(((0.36442)*x1446))+(((0.069)*x1455))+(((-1.0)*cj12*sj11*x1461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x1472=IKPowWithIntegerCheck(cj11,-1);
if(!x1472.valid){
continue;
}
IkReal x1465=x1472.value;
IkReal x1466=((1.0)*sj15);
IkReal x1467=(cj16*r11);
IkReal x1468=(r10*sj16);
IkReal x1469=(cj11*cj14);
IkReal x1470=(cj11*cj15*sj14);
IkReal x1471=(sj11*sj12*sj15);
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(cj12,-1);
if(!x1473.valid){
continue;
}
if( IKabs((x1465*(((((-1.0)*x1466*x1467))+(((-1.0)*x1466*x1468)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1465*(x1473.value)*((((x1467*x1471))+((x1467*x1470))+(((-1.0)*cj16*r10*x1469))+((x1468*x1471))+((x1468*x1470))+((r11*sj16*x1469)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1465*(((((-1.0)*x1466*x1467))+(((-1.0)*x1466*x1468))))))+IKsqr((x1465*(x1473.value)*((((x1467*x1471))+((x1467*x1470))+(((-1.0)*cj16*r10*x1469))+((x1468*x1471))+((x1468*x1470))+((r11*sj16*x1469))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x1465*(((((-1.0)*x1466*x1467))+(((-1.0)*x1466*x1468))))), (x1465*(x1473.value)*((((x1467*x1471))+((x1467*x1470))+(((-1.0)*cj16*r10*x1469))+((x1468*x1471))+((x1468*x1470))+((r11*sj16*x1469))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1474=IKcos(j10);
IkReal x1475=(cj11*x1474);
IkReal x1476=((1.0)*cj16);
IkReal x1477=(r01*sj15);
IkReal x1478=(r00*sj15*sj16);
IkReal x1479=IKsin(j10);
IkReal x1480=(cj11*x1479);
IkReal x1481=(r11*sj15);
IkReal x1482=(r10*sj15*sj16);
IkReal x1483=(cj14*cj16);
IkReal x1484=((1.0)*cj14*sj16);
IkReal x1485=((1.0)*cj15*cj16*sj14);
IkReal x1486=((1.0)*cj15*sj14*sj16);
IkReal x1487=((1.0)*x1479);
IkReal x1488=(cj12*x1487);
IkReal x1489=(sj12*x1474);
IkReal x1490=(sj14*sj16);
IkReal x1491=((1.0)*cj16*sj14);
IkReal x1492=((1.0)*cj14*cj15*cj16);
IkReal x1493=((1.0)*cj14*cj15*sj16);
IkReal x1494=(cj12*sj11*x1474);
IkReal x1495=((0.069)*x1479);
IkReal x1496=((0.01)*cj15*cj16);
IkReal x1497=((0.01)*cj15*sj16);
IkReal x1498=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x1475))+(((-1.0)*x1478))+(((-1.0)*x1476*x1477)));
evalcond[1]=((((-1.0)*x1480))+(((-1.0)*x1482))+(((-1.0)*x1476*x1481)));
evalcond[2]=(((cj12*x1474))+(((-1.0)*r11*x1485))+((sj11*sj12*x1479))+(((-1.0)*r11*x1484))+((r10*x1483))+(((-1.0)*r10*x1486)));
evalcond[3]=((((-1.0)*r01*x1484))+((sj11*x1489))+((r00*x1483))+(((-1.0)*r00*x1486))+(((-1.0)*x1488))+(((-1.0)*r01*x1485)));
evalcond[4]=((((-1.0)*r10*x1493))+(((-1.0)*sj11*x1488))+(((-1.0)*r10*x1491))+((r11*x1490))+x1489+(((-1.0)*r11*x1492)));
evalcond[5]=((((-1.0)*x1494))+(((-1.0)*r01*x1492))+(((-1.0)*r00*x1491))+(((-1.0)*r00*x1493))+(((-1.0)*sj12*x1487))+((r01*x1490)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r01*x1496))+(((-1.0)*sj12*x1495))+((r00*x1497))+(((0.069)*x1474))+(((-1.0)*x1477*x1498))+(((-0.069)*x1494))+(((-0.37429)*x1478))+(((0.36442)*x1475)));
evalcond[7]=(x1495+(((-1.0)*(1.0)*py))+(((0.36442)*x1480))+((r10*x1497))+(((-1.0)*cj12*sj11*x1495))+(((-0.37429)*x1482))+((r11*x1496))+(((-1.0)*x1481*x1498))+(((0.069)*x1489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1499=((1.0)*cj16*sj15);
IkReal x1500=((1.0)*sj15*sj16);
CheckValue<IkReal> x1501 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1500))+(((-1.0)*r11*x1499)))),IkReal(((((-1.0)*r00*x1500))+(((-1.0)*r01*x1499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1501.valid){
continue;
}
CheckValue<IkReal> x1502=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x1502.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x1501.value)+(((1.5707963267949)*(x1502.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1503=IKcos(j10);
IkReal x1504=(cj11*x1503);
IkReal x1505=((1.0)*cj16);
IkReal x1506=(r01*sj15);
IkReal x1507=(r00*sj15*sj16);
IkReal x1508=IKsin(j10);
IkReal x1509=(cj11*x1508);
IkReal x1510=(r11*sj15);
IkReal x1511=(r10*sj15*sj16);
IkReal x1512=(cj14*cj16);
IkReal x1513=((1.0)*cj14*sj16);
IkReal x1514=((1.0)*cj15*cj16*sj14);
IkReal x1515=((1.0)*cj15*sj14*sj16);
IkReal x1516=((1.0)*x1508);
IkReal x1517=(cj12*x1516);
IkReal x1518=(sj12*x1503);
IkReal x1519=(sj14*sj16);
IkReal x1520=((1.0)*cj16*sj14);
IkReal x1521=((1.0)*cj14*cj15*cj16);
IkReal x1522=((1.0)*cj14*cj15*sj16);
IkReal x1523=(cj12*sj11*x1503);
IkReal x1524=((0.069)*x1508);
IkReal x1525=((0.01)*cj15*cj16);
IkReal x1526=((0.01)*cj15*sj16);
IkReal x1527=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x1504))+(((-1.0)*x1505*x1506))+(((-1.0)*x1507)));
evalcond[1]=((((-1.0)*x1505*x1510))+(((-1.0)*x1511))+(((-1.0)*x1509)));
evalcond[2]=(((cj12*x1503))+(((-1.0)*r11*x1513))+((r10*x1512))+((sj11*sj12*x1508))+(((-1.0)*r11*x1514))+(((-1.0)*r10*x1515)));
evalcond[3]=((((-1.0)*r01*x1514))+(((-1.0)*r00*x1515))+((sj11*x1518))+(((-1.0)*r01*x1513))+((r00*x1512))+(((-1.0)*x1517)));
evalcond[4]=(x1518+((r11*x1519))+(((-1.0)*sj11*x1517))+(((-1.0)*r11*x1521))+(((-1.0)*r10*x1520))+(((-1.0)*r10*x1522)));
evalcond[5]=((((-1.0)*r00*x1522))+((r01*x1519))+(((-1.0)*r01*x1521))+(((-1.0)*r00*x1520))+(((-1.0)*sj12*x1516))+(((-1.0)*x1523)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((0.36442)*x1504))+(((0.069)*x1503))+(((-0.37429)*x1507))+((r01*x1525))+(((-0.069)*x1523))+((r00*x1526))+(((-1.0)*sj12*x1524))+(((-1.0)*x1506*x1527)));
evalcond[7]=(((r11*x1525))+(((0.069)*x1518))+(((-1.0)*(1.0)*py))+((r10*x1526))+(((-1.0)*cj12*sj11*x1524))+(((0.36442)*x1509))+(((-0.37429)*x1511))+(((-1.0)*x1510*x1527))+x1524);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x1528=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1528);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1528);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1529=(r22*sj15);
j14eval[0]=x1529;
j14eval[1]=((IKabs((cj11*cj12)))+(IKabs((cj11*sj12))));
j14eval[2]=IKsign(x1529);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(IKsign((r22*sj15)),-1);
if(!x1530.valid){
continue;
}
CheckValue<IkReal> x1531 = IKatan2WithCheck(IkReal((cj11*sj12)),IkReal((cj11*cj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1531.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1530.value)))+(x1531.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x1532=(r22*sj15);
evalcond[0]=((((-1.0)*x1532*(IKsin(j14))))+((cj11*sj12)));
evalcond[1]=(((x1532*(IKcos(j14))))+(((-1.0)*(1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[1];
IkReal x1533=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1533);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1533);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1534=(cj11*cj12*r11*sj14);
IkReal x1535=(cj11*cj14*r11*sj12);
IkReal x1536=(cj11*cj12*cj14*cj15*r10);
IkReal x1537=(cj11*cj15*r10*sj12*sj14);
IkReal x1538=cj12*cj12;
IkReal x1539=(r10*sj11*sj15*x1538);
IkReal x1540=sj12*sj12;
IkReal x1541=(r10*sj11*sj15*x1540);
IkReal x1542=((4.0)*r10);
IkReal x1543=(cj11*cj12*sj14*x1542);
IkReal x1544=(cj11*cj14*sj12*x1542);
IkReal x1545=((4.0)*cj15);
IkReal x1546=(cj11*cj12*cj14*r11);
IkReal x1547=(x1545*x1546);
IkReal x1548=((4.0)*cj11*cj15*sj12*sj14);
IkReal x1549=(r11*x1548);
IkReal x1550=(r11*sj11);
IkReal x1551=((4.0)*sj15*x1538);
IkReal x1552=(x1550*x1551);
IkReal x1553=((4.0)*sj15*x1540);
IkReal x1554=(x1550*x1553);
IkReal x1555=(cj11*cj12*cj14*x1542);
IkReal x1556=(r01*x1551);
IkReal x1557=(x1534*x1545);
IkReal x1558=((((4.0)*r00))*((cj11*cj14*sj11*sj12)));
IkReal x1559=(r01*sj11*x1548);
IkReal x1560=sj11*sj11;
IkReal x1561=(r01*x1553*x1560);
IkReal x1562=(r00*sj15*x1538);
IkReal x1563=(cj11*cj12*cj15*r10*sj14);
IkReal x1564=(cj11*cj14*r01*sj11*sj12);
IkReal x1565=(cj11*cj15*r00*sj11*sj12*sj14);
IkReal x1566=(r00*sj15*x1540*x1560);
j16eval[0]=((IKabs(((((8.0)*x1564))+(((-8.0)*x1566))+(((8.0)*x1546))+(((8.0)*x1563))+(((8.0)*x1565))+(((-8.0)*x1562)))))+(IKabs((x1544+(((-1.0)*x1549))+x1554+x1552+(((-1.0)*x1547))+(((-1.0)*x1543)))))+(((0.5)*(IKabs(((((16.0)*x1546))+(((-16.0)*x1566))+(((16.0)*x1565))+(((16.0)*x1563))+(((16.0)*x1564))+(((-16.0)*x1562)))))))+(((0.5)*(IKabs(((((-16.0)*x1541))+(((16.0)*x1535))+(((-16.0)*x1534))+(((16.0)*x1537))+(((16.0)*x1536))+(((-16.0)*x1539)))))))+(((0.5)*(IKabs(((((-1.0)*x1558))+x1559+x1557+(((-1.0)*x1561))+(((-1.0)*x1556))+(((-1.0)*x1555)))))))+(IKabs(((((8.0)*x1535))+(((-8.0)*x1534))+(((8.0)*x1537))+(((8.0)*x1536))+(((-8.0)*x1539))+(((-8.0)*x1541)))))+(((0.5)*(IKabs(((((-1.0)*x1552))+x1549+x1543+x1547+(((-1.0)*x1544))+(((-1.0)*x1554)))))))+(IKabs((x1555+x1556+x1558+x1561+(((-1.0)*x1559))+(((-1.0)*x1557))))));
if( IKabs(j16eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j16evalpoly[1];
IkReal x1567=((4.0)*r10);
IkReal x1568=(cj11*cj12*sj14*x1567);
IkReal x1569=(cj11*cj14*sj12*x1567);
IkReal x1570=((4.0)*cj11*cj15*r11);
IkReal x1571=(cj12*cj14*x1570);
IkReal x1572=(sj12*sj14*x1570);
IkReal x1573=cj12*cj12;
IkReal x1574=((4.0)*r11*sj11*sj15);
IkReal x1575=(x1573*x1574);
IkReal x1576=sj12*sj12;
IkReal x1577=(x1574*x1576);
IkReal x1578=(x1575+x1577+(((-1.0)*x1568))+x1569+(((-1.0)*x1571))+(((-1.0)*x1572)));
IkReal x1579=(cj11*cj12*r11*sj14);
IkReal x1580=(cj11*cj14*r11*sj12);
IkReal x1581=(cj11*cj12*cj14*cj15*r10);
IkReal x1582=(cj11*cj15*r10*sj12*sj14);
IkReal x1583=(r10*sj11*sj15*x1573);
IkReal x1584=(r10*sj11*sj15*x1576);
IkReal x1585=((((8.0)*x1581))+(((-8.0)*x1579))+(((-8.0)*x1584))+(((-8.0)*x1583))+(((8.0)*x1580))+(((8.0)*x1582)));
IkReal x1586=((((-1.0)*x1575))+(((-1.0)*x1569))+x1572+x1571+x1568+(((-1.0)*x1577)));
op[0]=x1578;
op[1]=x1585;
op[2]=x1578;
op[3]=((((-16.0)*x1584))+(((16.0)*x1580))+(((-16.0)*x1579))+(((16.0)*x1582))+(((-16.0)*x1583))+(((16.0)*x1581)));
op[4]=x1586;
op[5]=x1585;
op[6]=x1586;
polyroots6(op,zeror,numroots);
IkReal j16array[6], cj16array[6], sj16array[6], tempj16array[1];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ++ij16)
{
IkReal htj16 = zeror[ij16];
tempj16array[0]=((2.0)*(atan(htj16)));
for(int kj16 = 0; kj16 < 1; ++kj16)
{
j16array[numsolutions] = tempj16array[kj16];
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
numsolutions++;
}
}
bool j16valid[6]={true,true,true,true,true,true};
_nj16 = 6;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
htj16 = IKtan(j16/2);

IkReal x1587=((((4.0)*r10))*((cj11*cj12*cj14)));
IkReal x1588=cj12*cj12;
IkReal x1589=((4.0)*r01*sj15);
IkReal x1590=(x1588*x1589);
IkReal x1591=(cj15*sj14);
IkReal x1592=((4.0)*cj11*cj12*r11*x1591);
IkReal x1593=((((4.0)*cj11*r00))*((cj14*sj11*sj12)));
IkReal x1594=((4.0)*cj11*r01*sj11*sj12*x1591);
IkReal x1595=sj11*sj11;
IkReal x1596=sj12*sj12;
IkReal x1597=(x1589*x1595*x1596);
IkReal x1598=((((-1.0)*x1590))+(((-1.0)*x1587))+(((-1.0)*x1597))+x1592+x1594+(((-1.0)*x1593)));
IkReal x1599=(cj11*cj12*cj14*r11);
IkReal x1600=(r00*sj15*x1588);
IkReal x1601=(cj11*cj12*cj15*r10*sj14);
IkReal x1602=(cj11*cj14*r01*sj11*sj12);
IkReal x1603=(cj11*cj15*r00*sj11*sj12*sj14);
IkReal x1604=(r00*sj15*x1595*x1596);
IkReal x1605=((((8.0)*x1602))+(((8.0)*x1603))+(((-8.0)*x1604))+(((-8.0)*x1600))+(((8.0)*x1599))+(((8.0)*x1601)));
IkReal x1606=(x1587+(((-1.0)*x1592))+(((-1.0)*x1594))+x1590+x1593+x1597);
j16evalpoly[0]=(((x1606*(htj16*htj16*htj16*htj16*htj16*htj16)))+(((htj16*htj16*htj16)*(((((16.0)*x1599))+(((16.0)*x1603))+(((16.0)*x1602))+(((16.0)*x1601))+(((-16.0)*x1604))+(((-16.0)*x1600))))))+x1598+((x1605*(htj16*htj16*htj16*htj16*htj16)))+((htj16*x1605))+((x1606*(htj16*htj16*htj16*htj16)))+((x1598*(htj16*htj16))));
if( IKabs(j16evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
{
IkReal j10eval[4];
IkReal x1607=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1607);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1607);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=cj11;
j10eval[1]=sj15;
j10eval[2]=((sj16*sj16)+(cj16*cj16));
j10eval[3]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  || IKabs(j10eval[3]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x1608=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1608);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1608);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=cj11;
j10eval[1]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
IkReal x1609=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1609);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1609);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=cj11;
j10eval[1]=cj12;
j10eval[2]=sj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x1615=IKPowWithIntegerCheck(cj11,-1);
if(!x1615.valid){
continue;
}
IkReal x1610=x1615.value;
IkReal x1611=(cj11*sj14);
IkReal x1612=(cj16*r01*sj15);
IkReal x1613=(r00*sj15*sj16);
IkReal x1614=(cj11*cj14*cj15);
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(cj12,-1);
if(!x1616.valid){
continue;
}
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(sj11,-1);
if(!x1617.valid){
continue;
}
if( IKabs((x1610*(x1616.value)*(x1617.value)*(((((-1.0)*r11*sj16*x1611))+((r10*sj16*x1614))+((cj16*r10*x1611))+((sj12*x1613))+((cj16*r11*x1614))+((sj12*x1612)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1610*((x1613+x1612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1610*(x1616.value)*(x1617.value)*(((((-1.0)*r11*sj16*x1611))+((r10*sj16*x1614))+((cj16*r10*x1611))+((sj12*x1613))+((cj16*r11*x1614))+((sj12*x1612))))))+IKsqr((x1610*((x1613+x1612))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x1610*(x1616.value)*(x1617.value)*(((((-1.0)*r11*sj16*x1611))+((r10*sj16*x1614))+((cj16*r10*x1611))+((sj12*x1613))+((cj16*r11*x1614))+((sj12*x1612))))), (x1610*((x1613+x1612))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1618=(cj16*sj15);
IkReal x1619=(r01*x1618);
IkReal x1620=(sj15*sj16);
IkReal x1621=(r00*x1620);
IkReal x1622=IKcos(j10);
IkReal x1623=(cj11*x1622);
IkReal x1624=(r11*x1618);
IkReal x1625=(r10*x1620);
IkReal x1626=IKsin(j10);
IkReal x1627=(cj11*x1626);
IkReal x1628=(sj12*x1622);
IkReal x1629=(cj16*sj14);
IkReal x1630=((1.0)*sj14*sj16);
IkReal x1631=(cj14*cj15*cj16);
IkReal x1632=(cj14*cj15*sj16);
IkReal x1633=((1.0)*x1626);
IkReal x1634=(cj12*x1633);
IkReal x1635=(cj14*cj16);
IkReal x1636=((1.0)*cj14*sj16);
IkReal x1637=((1.0)*cj15*cj16*sj14);
IkReal x1638=((1.0)*cj15*sj14*sj16);
IkReal x1639=(cj12*sj11*x1622);
IkReal x1640=((0.069)*x1626);
IkReal x1641=((0.01)*cj15*cj16);
IkReal x1642=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x1623))+x1621+x1619);
evalcond[1]=((((-1.0)*x1627))+x1625+x1624);
evalcond[2]=((((-1.0)*r11*x1630))+((r10*x1629))+((r10*x1632))+((r11*x1631))+(((-1.0)*sj11*x1634))+x1628);
evalcond[3]=(((cj12*x1622))+((sj11*sj12*x1626))+((r10*x1635))+(((-1.0)*r10*x1638))+(((-1.0)*r11*x1637))+(((-1.0)*r11*x1636)));
evalcond[4]=(((r00*x1629))+((r00*x1632))+(((-1.0)*x1639))+(((-1.0)*sj12*x1633))+(((-1.0)*r01*x1630))+((r01*x1631)));
evalcond[5]=((((-1.0)*r01*x1636))+(((-1.0)*r01*x1637))+(((-1.0)*x1634))+((sj11*x1628))+((r00*x1635))+(((-1.0)*r00*x1638)));
evalcond[6]=((((-0.37429)*x1621))+(((-1.0)*(1.0)*px))+((r01*x1641))+((r00*x1642))+(((-0.069)*x1639))+(((0.069)*x1622))+(((0.36442)*x1623))+(((-0.37429)*x1619))+(((-1.0)*sj12*x1640)));
evalcond[7]=((((-0.37429)*x1624))+(((-1.0)*(1.0)*py))+(((-0.37429)*x1625))+(((0.069)*x1628))+(((0.36442)*x1627))+((r10*x1642))+(((-1.0)*cj12*sj11*x1640))+((r11*x1641))+x1640);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x1648=IKPowWithIntegerCheck(cj11,-1);
if(!x1648.valid){
continue;
}
IkReal x1643=x1648.value;
IkReal x1644=(cj16*r11*sj15);
IkReal x1645=(r10*sj15*sj16);
IkReal x1646=(cj12*sj11);
IkReal x1647=(cj11*cj14*cj15);
CheckValue<IkReal> x1649=IKPowWithIntegerCheck(sj12,-1);
if(!x1649.valid){
continue;
}
if( IKabs((x1643*((x1645+x1644)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1643*(x1649.value)*(((((-1.0)*r10*sj16*x1647))+((x1645*x1646))+((((r11*sj16))*((cj11*sj14))))+(((-1.0)*cj11*cj16*r10*sj14))+((x1644*x1646))+(((-1.0)*cj16*r11*x1647)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1643*((x1645+x1644))))+IKsqr((x1643*(x1649.value)*(((((-1.0)*r10*sj16*x1647))+((x1645*x1646))+((((r11*sj16))*((cj11*sj14))))+(((-1.0)*cj11*cj16*r10*sj14))+((x1644*x1646))+(((-1.0)*cj16*r11*x1647))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x1643*((x1645+x1644))), (x1643*(x1649.value)*(((((-1.0)*r10*sj16*x1647))+((x1645*x1646))+((((r11*sj16))*((cj11*sj14))))+(((-1.0)*cj11*cj16*r10*sj14))+((x1644*x1646))+(((-1.0)*cj16*r11*x1647))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1650=(cj16*sj15);
IkReal x1651=(r01*x1650);
IkReal x1652=(sj15*sj16);
IkReal x1653=(r00*x1652);
IkReal x1654=IKcos(j10);
IkReal x1655=(cj11*x1654);
IkReal x1656=(r11*x1650);
IkReal x1657=(r10*x1652);
IkReal x1658=IKsin(j10);
IkReal x1659=(cj11*x1658);
IkReal x1660=(sj12*x1654);
IkReal x1661=(cj16*sj14);
IkReal x1662=((1.0)*sj14*sj16);
IkReal x1663=(cj14*cj15*cj16);
IkReal x1664=(cj14*cj15*sj16);
IkReal x1665=((1.0)*x1658);
IkReal x1666=(cj12*x1665);
IkReal x1667=(cj14*cj16);
IkReal x1668=((1.0)*cj14*sj16);
IkReal x1669=((1.0)*cj15*cj16*sj14);
IkReal x1670=((1.0)*cj15*sj14*sj16);
IkReal x1671=(cj12*sj11*x1654);
IkReal x1672=((0.069)*x1658);
IkReal x1673=((0.01)*cj15*cj16);
IkReal x1674=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x1655))+x1651+x1653);
evalcond[1]=((((-1.0)*x1659))+x1656+x1657);
evalcond[2]=((((-1.0)*r11*x1662))+((r10*x1664))+((r10*x1661))+((r11*x1663))+(((-1.0)*sj11*x1666))+x1660);
evalcond[3]=(((cj12*x1654))+((sj11*sj12*x1658))+((r10*x1667))+(((-1.0)*r11*x1668))+(((-1.0)*r10*x1670))+(((-1.0)*r11*x1669)));
evalcond[4]=(((r00*x1664))+(((-1.0)*r01*x1662))+(((-1.0)*x1671))+((r00*x1661))+(((-1.0)*sj12*x1665))+((r01*x1663)));
evalcond[5]=((((-1.0)*r00*x1670))+((r00*x1667))+(((-1.0)*r01*x1669))+(((-1.0)*r01*x1668))+((sj11*x1660))+(((-1.0)*x1666)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x1651))+(((-0.37429)*x1653))+((r00*x1674))+(((0.36442)*x1655))+(((-0.069)*x1671))+(((-1.0)*sj12*x1672))+((r01*x1673))+(((0.069)*x1654)));
evalcond[7]=(x1672+(((-1.0)*(1.0)*py))+(((-1.0)*cj12*sj11*x1672))+(((0.069)*x1660))+(((-0.37429)*x1656))+(((0.36442)*x1659))+(((-0.37429)*x1657))+((r11*x1673))+((r10*x1674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1675=(cj16*sj15);
IkReal x1676=(sj15*sj16);
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x1677.valid){
continue;
}
CheckValue<IkReal> x1678 = IKatan2WithCheck(IkReal((((r10*x1676))+((r11*x1675)))),IkReal((((r01*x1675))+((r00*x1676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1678.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1677.value)))+(x1678.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1679=(cj16*sj15);
IkReal x1680=(r01*x1679);
IkReal x1681=(sj15*sj16);
IkReal x1682=(r00*x1681);
IkReal x1683=IKcos(j10);
IkReal x1684=(cj11*x1683);
IkReal x1685=(r11*x1679);
IkReal x1686=(r10*x1681);
IkReal x1687=IKsin(j10);
IkReal x1688=(cj11*x1687);
IkReal x1689=(sj12*x1683);
IkReal x1690=(cj16*sj14);
IkReal x1691=((1.0)*sj14*sj16);
IkReal x1692=(cj14*cj15*cj16);
IkReal x1693=(cj14*cj15*sj16);
IkReal x1694=((1.0)*x1687);
IkReal x1695=(cj12*x1694);
IkReal x1696=(cj14*cj16);
IkReal x1697=((1.0)*cj14*sj16);
IkReal x1698=((1.0)*cj15*cj16*sj14);
IkReal x1699=((1.0)*cj15*sj14*sj16);
IkReal x1700=(cj12*sj11*x1683);
IkReal x1701=((0.069)*x1687);
IkReal x1702=((0.01)*cj15*cj16);
IkReal x1703=((0.01)*cj15*sj16);
evalcond[0]=(x1682+x1680+(((-1.0)*x1684)));
evalcond[1]=(x1686+x1685+(((-1.0)*x1688)));
evalcond[2]=(x1689+((r11*x1692))+(((-1.0)*r11*x1691))+((r10*x1690))+(((-1.0)*sj11*x1695))+((r10*x1693)));
evalcond[3]=((((-1.0)*r11*x1698))+(((-1.0)*r11*x1697))+((r10*x1696))+(((-1.0)*r10*x1699))+((cj12*x1683))+((sj11*sj12*x1687)));
evalcond[4]=(((r00*x1690))+(((-1.0)*r01*x1691))+((r01*x1692))+(((-1.0)*x1700))+((r00*x1693))+(((-1.0)*sj12*x1694)));
evalcond[5]=((((-1.0)*r01*x1697))+(((-1.0)*r00*x1699))+((r00*x1696))+(((-1.0)*r01*x1698))+(((-1.0)*x1695))+((sj11*x1689)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x1680))+(((0.069)*x1683))+(((-1.0)*sj12*x1701))+(((-0.37429)*x1682))+((r00*x1703))+(((0.36442)*x1684))+((r01*x1702))+(((-0.069)*x1700)));
evalcond[7]=((((-0.37429)*x1685))+((r10*x1703))+(((-1.0)*(1.0)*py))+x1701+(((0.36442)*x1688))+(((-0.37429)*x1686))+(((0.069)*x1689))+(((-1.0)*cj12*sj11*x1701))+((r11*x1702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14, j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1705=IKPowWithIntegerCheck(r22,-1);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(sj15,-1);
if(!x1706.valid){
continue;
}
IkReal x1704=((x1705.value)*(x1706.value));
CheckValue<IkReal> x1707=IKPowWithIntegerCheck(cj13,-1);
if(!x1707.valid){
continue;
}
if( IKabs((cj11*sj12*x1704)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1704*(x1707.value)*(((((-1.0)*(1.0)*cj15*r22*sj13))+(((-1.0)*(1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj11*sj12*x1704))+IKsqr((x1704*(x1707.value)*(((((-1.0)*(1.0)*cj15*r22*sj13))+(((-1.0)*(1.0)*cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((cj11*sj12*x1704), (x1704*(x1707.value)*(((((-1.0)*(1.0)*cj15*r22*sj13))+(((-1.0)*(1.0)*cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x1708=((1.0)*r22*sj15);
IkReal x1709=(cj15*r22);
IkReal x1710=((1.0)*sj13);
IkReal x1711=IKcos(j14);
evalcond[0]=((((-1.0)*x1708*(IKsin(j14))))+((cj11*sj12)));
evalcond[1]=((((-1.0)*r22*sj15*x1710*x1711))+((cj13*x1709))+sj11);
evalcond[2]=((((-1.0)*cj13*x1708*x1711))+(((-1.0)*(1.0)*cj11*cj12))+(((-1.0)*x1709*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1712=(cj14*r10);
IkReal x1713=(cj15*sj14);
IkReal x1714=(r11*x1713);
IkReal x1715=(x1712+(((-1.0)*x1714)));
IkReal x1716=(x1715+cj12);
IkReal x1717=((2.0)*cj14);
IkReal x1718=((2.0)*cj15*sj14);
IkReal x1719=((((-1.0)*r11*x1717))+(((-1.0)*r10*x1718)));
IkReal x1720=((((-1.0)*x1712))+x1714);
IkReal x1721=(cj12+x1720);
IkReal x1722=(sj11*sj12);
IkReal x1723=(cj14*r00);
IkReal x1724=(r01*x1713);
IkReal x1725=((((-1.0)*x1724))+x1723);
IkReal x1726=(x1722+x1725);
IkReal x1727=((((-1.0)*r01*x1717))+(((-1.0)*r00*x1718)));
IkReal x1728=((((-1.0)*x1723))+x1724);
IkReal x1729=(x1728+x1722);
IkReal x1730=((-1.0)*(((1.0)*cj12)));
IkReal x1731=(x1715+x1730);
IkReal x1732=(x1720+x1730);
IkReal x1733=((-1.0)*x1722);
IkReal x1734=(x1725+x1733);
IkReal x1735=(x1728+x1733);
IkReal gconst0=x1716;
IkReal gconst1=x1719;
IkReal gconst2=x1721;
IkReal gconst3=x1726;
IkReal gconst4=x1727;
IkReal gconst5=x1729;
IkReal gconst6=x1716;
IkReal gconst7=x1719;
IkReal gconst8=x1721;
IkReal gconst9=x1726;
IkReal gconst10=x1727;
IkReal gconst11=x1729;
IkReal gconst12=x1731;
IkReal gconst13=x1719;
IkReal gconst14=x1732;
IkReal gconst15=x1734;
IkReal gconst16=x1727;
IkReal gconst17=x1735;
IkReal gconst18=x1731;
IkReal gconst19=x1719;
IkReal gconst20=x1732;
IkReal gconst21=x1734;
IkReal gconst22=x1727;
IkReal gconst23=x1735;
IkReal x1736=(gconst12*gconst17);
IkReal x1737=(gconst20*gconst21);
IkReal x1738=(gconst13*gconst22);
IkReal x1739=(gconst17*gconst18);
IkReal x1740=(gconst14*gconst23);
IkReal x1741=(gconst15*gconst18);
IkReal x1742=(gconst14*gconst16*gconst19);
IkReal x1743=((1.0)*gconst12*gconst23);
IkReal x1744=(gconst19*gconst21);
IkReal x1745=((1.0)*gconst13*gconst17);
IkReal x1746=((1.0)*gconst14*gconst15);
IkReal x1747=(gconst14*gconst22);
IkReal x1748=((1.0)*gconst16*gconst18);
IkReal x1749=((2.0)*cj12*gconst12);
IkReal x1750=((2.0)*cj12*gconst20);
IkReal x1751=(gconst18*gconst23);
IkReal x1752=((2.0)*cj12*gconst13*gconst19);
IkReal x1753=((2.0)*cj12*gconst18);
IkReal x1754=((2.0)*cj12*gconst14);
IkReal x1755=((2.0)*cj12);
IkReal x1756=((2.0)*gconst12*gconst17*sj11*sj12);
IkReal x1757=((2.0)*sj11*sj12);
IkReal x1758=(gconst13*gconst17*gconst22);
IkReal x1759=(gconst14*gconst21);
IkReal x1760=((2.0)*gconst15*sj11*sj12);
IkReal x1761=((2.0)*gconst16*sj11*sj12);
IkReal x1762=((2.0)*gconst23*sj11*sj12);
IkReal x1763=(gconst0*gconst17);
IkReal x1764=(gconst1*gconst22);
IkReal x1765=(gconst10*gconst13);
IkReal x1766=(gconst11*gconst14);
IkReal x1767=(gconst20*gconst9);
IkReal x1768=(gconst21*gconst8);
IkReal x1769=(gconst12*gconst5);
IkReal x1770=(gconst18*gconst5);
IkReal x1771=(gconst15*gconst6);
IkReal x1772=(gconst16*gconst7);
IkReal x1773=(gconst18*gconst3);
IkReal x1774=(gconst19*gconst4);
IkReal x1775=(gconst2*gconst23);
IkReal x1776=(gconst16*gconst19);
IkReal x1777=(gconst2*gconst21);
IkReal x1778=((1.0)*gconst1*gconst17);
IkReal x1779=(gconst10*gconst14);
IkReal x1780=((1.0)*gconst11*gconst12);
IkReal x1781=((1.0)*gconst23*gconst6);
IkReal x1782=(gconst19*gconst9);
IkReal x1783=(gconst21*gconst7);
IkReal x1784=((1.0)*gconst13*gconst5);
IkReal x1785=((1.0)*gconst16*gconst6);
IkReal x1786=((1.0)*gconst18*gconst4);
IkReal x1787=((1.0)*gconst14*gconst3);
IkReal x1788=((1.0)*gconst15*gconst2);
IkReal x1789=(gconst2*gconst22);
IkReal x1790=cj12*cj12;
IkReal x1791=((4.0)*gconst12*x1790);
IkReal x1792=((4.0)*x1790);
IkReal x1793=((4.0)*gconst14*x1790);
IkReal x1794=((4.0)*cj12*gconst12*sj11*sj12);
IkReal x1795=((4.0)*cj12*sj11*sj12);
IkReal x1796=((4.0)*cj12*gconst20*sj11*sj12);
IkReal x1797=sj11*sj11;
IkReal x1798=sj12*sj12;
IkReal x1799=((4.0)*gconst15*x1797*x1798);
IkReal x1800=((4.0)*x1797*x1798);
IkReal x1801=((4.0)*gconst17*x1797*x1798);
IkReal x1802=(gconst8*gconst9);
IkReal x1803=(gconst0*gconst5);
IkReal x1804=(gconst1*gconst10*gconst6);
IkReal x1805=(gconst1*gconst10);
IkReal x1806=(gconst5*gconst6);
IkReal x1807=(gconst3*gconst6);
IkReal x1808=(gconst11*gconst2);
IkReal x1809=(gconst4*gconst7*gconst9);
IkReal x1810=(gconst2*gconst9);
IkReal x1811=(gconst4*gconst7);
IkReal x1812=((1.0)*gconst11*gconst6);
IkReal x1813=(gconst7*gconst9);
IkReal x1814=((1.0)*gconst1*gconst5);
IkReal x1815=((1.0)*gconst4*gconst6);
IkReal x1816=(gconst10*gconst2);
IkReal x1817=((1.0)*gconst2*gconst3);
IkReal x1818=((4.0)*gconst0*x1790);
IkReal x1819=((4.0)*gconst2*x1790);
IkReal x1820=(gconst0*gconst11);
IkReal x1821=((4.0)*cj12*gconst8*sj11*sj12);
IkReal x1822=((4.0)*gconst11*x1797*x1798);
IkReal x1823=((4.0)*gconst9*x1797*x1798);
IkReal x1824=((2.0)*cj12*gconst6);
IkReal x1825=((2.0)*cj12*gconst8);
IkReal x1826=((2.0)*cj12*gconst8*gconst9);
IkReal x1827=((2.0)*cj12*gconst1*gconst7);
IkReal x1828=((2.0)*cj12*gconst2);
IkReal x1829=((2.0)*gconst0*gconst5*sj11*sj12);
IkReal x1830=((2.0)*gconst5*sj11*sj12);
IkReal x1831=((2.0)*gconst4*sj11*sj12);
IkReal x1832=((2.0)*gconst3*sj11*sj12);
IkReal x1833=((2.0)*gconst11*sj11*sj12);
op[0]=((((-1.0)*x1747*x1748))+(((-1.0)*x1744*x1745))+(((-1.0)*x1739*x1743))+((x1738*x1739))+((x1736*x1737))+((x1740*x1741))+((gconst21*x1742))+(((-1.0)*x1737*x1746)));
op[1]=(((x1737*x1754))+((x1757*x1758))+((gconst14*gconst15*x1750))+(((-1.0)*x1741*x1754))+((x1741*x1762))+((x1740*x1760))+((gconst21*x1752))+(((-1.0)*x1747*x1761))+(((-1.0)*x1737*x1749))+(((-1.0)*x1759*x1760))+(((-1.0)*gconst18*gconst22*x1761))+(((-1.0)*x1738*x1753))+((gconst21*x1756))+(((-1.0)*x1737*x1760))+(((-1.0)*x1736*x1750))+((x1739*x1749))+((gconst16*gconst19*gconst21*x1757))+((gconst17*x1752))+(((-1.0)*gconst23*x1756))+(((-1.0)*x1739*x1762))+(((-1.0)*x1740*x1753))+((gconst17*gconst20*gconst21*x1757))+(((-1.0)*x1742*x1755))+((x1749*x1751)));
op[2]=(((x1736*x1768))+(((-1.0)*x1746*x1768))+(((-1.0)*x1747*x1786))+((x1741*x1766))+((x1739*x1765))+((x1759*x1772))+(((-1.0)*gconst0*gconst17*x1751))+((x1738*x1770))+((gconst23*x1799))+(((-1.0)*gconst13*gconst19*x1792))+((x1776*x1777))+((x1739*x1795))+(((-1.0)*x1744*x1778))+((x1737*x1769))+(((-1.0)*x1737*x1788))+(((-1.0)*x1740*x1795))+(((-1.0)*gconst21*x1799))+((gconst21*x1801))+((gconst20*x1791))+(((-1.0)*x1776*x1795))+(((-1.0)*gconst23*x1801))+(((-1.0)*x1743*x1770))+((x1741*x1775))+((x1759*x1795))+((gconst6*x1758))+(((-1.0)*x1747*x1785))+((gconst23*x1794))+(((-1.0)*x1746*x1767))+(((-1.0)*x1737*x1787))+(((-1.0)*gconst16*gconst22*x1800))+(((-1.0)*gconst20*x1793))+(((-1.0)*x1744*x1784))+(((-1.0)*x1748*x1789))+(((-1.0)*x1739*x1780))+((x1740*x1773))+((gconst9*x1742))+((x1740*x1771))+(((-1.0)*x1738*x1795))+((x1759*x1774))+(((-1.0)*x1736*x1781))+(((-1.0)*gconst21*x1794))+((gconst15*x1796))+((gconst18*x1793))+(((-1.0)*x1745*x1783))+(((-1.0)*x1748*x1779))+(((-1.0)*x1741*x1795))+(((-1.0)*gconst18*x1791))+((x1737*x1763))+(((-1.0)*x1745*x1782))+((x1736*x1767))+(((-1.0)*gconst17*x1796))+((x1739*x1764)));
op[3]=((((2.0)*cj12*gconst14*gconst21*gconst8))+(((-2.0)*cj12*gconst10*gconst13*gconst18))+(((-2.0)*cj12*gconst14*gconst19*gconst4))+(((-2.0)*gconst20*gconst21*gconst3*sj11*sj12))+(((-2.0)*cj12*gconst16*gconst19*gconst2))+(((-2.0)*gconst0*gconst17*gconst23*sj11*sj12))+(((2.0)*cj12*gconst1*gconst17*gconst19))+(((-2.0)*cj12*gconst12*gconst21*gconst8))+(((-2.0)*gconst15*gconst2*gconst21*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst15*gconst6))+(((-2.0)*gconst16*gconst22*gconst6*sj11*sj12))+(((-2.0)*cj12*gconst15*gconst18*gconst2))+(((2.0)*gconst10*gconst13*gconst17*sj11*sj12))+(((2.0)*gconst15*gconst23*gconst6*sj11*sj12))+(((2.0)*cj12*gconst14*gconst15*gconst8))+(((2.0)*gconst12*gconst17*gconst9*sj11*sj12))+(((2.0)*gconst17*gconst21*gconst8*sj11*sj12))+(((-2.0)*gconst10*gconst14*gconst16*sj11*sj12))+(((-2.0)*cj12*gconst18*gconst2*gconst23))+(((-2.0)*gconst11*gconst12*gconst17*sj11*sj12))+(((-2.0)*gconst17*gconst23*gconst6*sj11*sj12))+(((2.0)*gconst17*gconst20*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst18*gconst3))+(((2.0)*cj12*gconst11*gconst12*gconst18))+(((2.0)*gconst0*gconst17*gconst21*sj11*sj12))+(((2.0)*cj12*gconst1*gconst19*gconst21))+(((-2.0)*gconst15*gconst21*gconst8*sj11*sj12))+(((2.0)*cj12*gconst14*gconst20*gconst3))+(((-2.0)*cj12*gconst12*gconst17*gconst8))+(((2.0)*cj12*gconst0*gconst18*gconst23))+(((2.0)*gconst16*gconst21*gconst7*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst23*gconst6))+(((2.0)*cj12*gconst13*gconst19*gconst5))+(((2.0)*gconst19*gconst21*gconst4*sj11*sj12))+(((2.0)*gconst15*gconst2*gconst23*sj11*sj12))+(((2.0)*cj12*gconst0*gconst17*gconst18))+(((-2.0)*cj12*gconst0*gconst17*gconst20))+(((2.0)*gconst12*gconst21*gconst5*sj11*sj12))+(((-2.0)*cj12*gconst12*gconst20*gconst5))+(((2.0)*gconst16*gconst19*gconst9*sj11*sj12))+(((2.0)*cj12*gconst12*gconst17*gconst6))+(((2.0)*gconst11*gconst14*gconst15*sj11*sj12))+(((2.0)*gconst13*gconst22*gconst5*sj11*sj12))+(((-2.0)*gconst15*gconst20*gconst9*sj11*sj12))+(((2.0)*cj12*gconst12*gconst18*gconst5))+(((-2.0)*gconst10*gconst16*gconst18*sj11*sj12))+(((-2.0)*cj12*gconst1*gconst18*gconst22))+(((-2.0)*gconst12*gconst23*gconst5*sj11*sj12))+(((2.0)*gconst20*gconst21*gconst5*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst16*gconst7))+(((-2.0)*gconst14*gconst22*gconst4*sj11*sj12))+(((2.0)*cj12*gconst14*gconst20*gconst9))+(((-2.0)*gconst18*gconst23*gconst5*sj11*sj12))+(((2.0)*cj12*gconst12*gconst23*gconst6))+(((-2.0)*cj12*gconst0*gconst20*gconst21))+(((-2.0)*cj12*gconst13*gconst22*gconst6))+(((2.0)*cj12*gconst13*gconst19*gconst9))+(((2.0)*cj12*gconst15*gconst2*gconst20))+(((2.0)*gconst14*gconst23*gconst3*sj11*sj12))+(((2.0)*gconst11*gconst15*gconst18*sj11*sj12))+(((2.0)*cj12*gconst13*gconst17*gconst7))+(((-2.0)*gconst16*gconst2*gconst22*sj11*sj12))+(((2.0)*gconst1*gconst17*gconst22*sj11*sj12))+(((-2.0)*gconst11*gconst17*gconst18*sj11*sj12))+(((2.0)*cj12*gconst13*gconst21*gconst7))+(((-2.0)*gconst14*gconst21*gconst3*sj11*sj12))+(((2.0)*gconst18*gconst23*gconst3*sj11*sj12))+(((-2.0)*gconst14*gconst15*gconst9*sj11*sj12))+(((-2.0)*gconst18*gconst22*gconst4*sj11*sj12))+(((2.0)*cj12*gconst2*gconst20*gconst21))+(((-2.0)*cj12*gconst12*gconst20*gconst9))+(((-2.0)*cj12*gconst11*gconst14*gconst18)));
op[4]=((((-1.0)*gconst14*gconst21*gconst3*gconst8))+(((-4.0)*gconst21*gconst3*(sj11*sj11)*(sj12*sj12)))+(((4.0)*gconst11*gconst15*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*cj12*gconst0*gconst21*sj11*sj12))+(((-4.0)*cj12*gconst15*gconst6*sj11*sj12))+(((4.0)*cj12*gconst20*gconst3*sj11*sj12))+(((-4.0)*gconst22*gconst4*(sj11*sj11)*(sj12*sj12)))+(((-1.0)*gconst1*gconst17*gconst21*gconst7))+((gconst14*gconst19*gconst4*gconst9))+(((-1.0)*gconst14*gconst22*gconst4*gconst6))+(((-1.0)*gconst1*gconst17*gconst19*gconst9))+(((-1.0)*gconst12*gconst23*gconst5*gconst6))+(((-1.0)*gconst10*gconst16*gconst18*gconst2))+(((-1.0)*gconst11*gconst12*gconst17*gconst6))+(((4.0)*cj12*gconst2*gconst21*sj11*sj12))+(((-4.0)*cj12*gconst20*gconst5*sj11*sj12))+(((-4.0)*cj12*gconst11*gconst14*sj11*sj12))+(((4.0)*cj12*gconst0*gconst23*sj11*sj12))+(((4.0)*gconst18*gconst2*(cj12*cj12)))+(((-1.0)*gconst11*gconst12*gconst18*gconst5))+(((-4.0)*gconst11*gconst17*(sj11*sj11)*(sj12*sj12)))+(((-1.0)*gconst10*gconst14*gconst16*gconst6))+(((-4.0)*cj12*gconst19*gconst4*sj11*sj12))+(((4.0)*cj12*gconst15*gconst8*sj11*sj12))+((gconst0*gconst17*gconst20*gconst9))+(((-1.0)*gconst1*gconst19*gconst21*gconst5))+((gconst12*gconst21*gconst5*gconst8))+(((-4.0)*cj12*gconst10*gconst13*sj11*sj12))+((gconst19*gconst2*gconst21*gconst4))+(((-4.0)*cj12*gconst18*gconst3*sj11*sj12))+(((4.0)*cj12*gconst18*gconst5*sj11*sj12))+((gconst14*gconst16*gconst7*gconst9))+(((-4.0)*gconst1*gconst19*(cj12*cj12)))+((gconst14*gconst23*gconst3*gconst6))+(((-1.0)*gconst0*gconst17*gconst23*gconst6))+((gconst14*gconst21*gconst4*gconst7))+(((-1.0)*gconst10*gconst14*gconst18*gconst4))+(((4.0)*gconst14*gconst6*(cj12*cj12)))+(((-4.0)*cj12*gconst12*gconst9*sj11*sj12))+((gconst15*gconst2*gconst23*gconst6))+(((-4.0)*cj12*gconst2*gconst23*sj11*sj12))+((gconst12*gconst20*gconst5*gconst9))+((gconst10*gconst13*gconst18*gconst5))+(((-4.0)*cj12*gconst16*gconst7*sj11*sj12))+((gconst13*gconst22*gconst5*gconst6))+(((-4.0)*cj12*gconst17*gconst8*sj11*sj12))+(((4.0)*cj12*gconst11*gconst12*sj11*sj12))+(((-1.0)*gconst15*gconst2*gconst20*gconst9))+(((-1.0)*gconst15*gconst2*gconst21*gconst8))+(((-4.0)*gconst12*gconst6*(cj12*cj12)))+(((-1.0)*gconst13*gconst21*gconst5*gconst7))+((gconst11*gconst15*gconst18*gconst2))+(((-4.0)*cj12*gconst1*gconst22*sj11*sj12))+(((-1.0)*gconst13*gconst19*gconst5*gconst9))+((gconst10*gconst13*gconst17*gconst6))+(((-4.0)*gconst23*gconst5*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*gconst0*gconst18*(cj12*cj12)))+(((-1.0)*gconst2*gconst20*gconst21*gconst3))+(((-1.0)*gconst16*gconst2*gconst22*gconst6))+(((4.0)*gconst0*gconst20*(cj12*cj12)))+(((4.0)*gconst17*gconst9*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*gconst15*gconst9*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*gconst14*gconst8*(cj12*cj12)))+(((-1.0)*gconst14*gconst20*gconst3*gconst9))+((gconst1*gconst17*gconst22*gconst6))+(((4.0)*gconst21*gconst5*(sj11*sj11)*(sj12*sj12)))+(((-1.0)*gconst0*gconst11*gconst17*gconst18))+(((-1.0)*gconst18*gconst2*gconst22*gconst4))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+((gconst16*gconst2*gconst21*gconst7))+((gconst16*gconst19*gconst2*gconst9))+((gconst11*gconst14*gconst15*gconst6))+(((-1.0)*gconst13*gconst17*gconst7*gconst9))+(((4.0)*gconst23*gconst3*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*gconst2*gconst20*(cj12*cj12)))+(((-4.0)*gconst10*gconst16*(sj11*sj11)*(sj12*sj12)))+((gconst12*gconst17*gconst8*gconst9))+((gconst1*gconst18*gconst22*gconst5))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+(((-4.0)*gconst13*gconst7*(cj12*cj12)))+((gconst11*gconst14*gconst18*gconst3))+(((4.0)*cj12*gconst17*gconst6*sj11*sj12))+((gconst0*gconst17*gconst21*gconst8))+(((4.0)*gconst12*gconst8*(cj12*cj12)))+((gconst1*gconst10*gconst17*gconst18))+(((4.0)*cj12*gconst14*gconst9*sj11*sj12))+((gconst0*gconst20*gconst21*gconst5))+((gconst18*gconst2*gconst23*gconst3)));
op[5]=((((2.0)*cj12*gconst0*gconst23*gconst6))+(((2.0)*gconst11*gconst15*gconst6*sj11*sj12))+(((2.0)*cj12*gconst14*gconst3*gconst8))+(((-2.0)*cj12*gconst12*gconst8*gconst9))+(((-2.0)*cj12*gconst0*gconst20*gconst9))+(((2.0)*gconst11*gconst14*gconst3*sj11*sj12))+(((-2.0)*cj12*gconst11*gconst14*gconst6))+(((-2.0)*cj12*gconst16*gconst2*gconst7))+(((2.0)*gconst10*gconst13*gconst5*sj11*sj12))+(((-2.0)*gconst11*gconst12*gconst5*sj11*sj12))+(((-2.0)*gconst22*gconst4*gconst6*sj11*sj12))+(((2.0)*gconst12*gconst5*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst2*gconst23*gconst6))+(((2.0)*cj12*gconst15*gconst2*gconst8))+(((-2.0)*gconst15*gconst8*gconst9*sj11*sj12))+(((-2.0)*gconst2*gconst21*gconst3*sj11*sj12))+(((-2.0)*gconst14*gconst3*gconst9*sj11*sj12))+(((2.0)*cj12*gconst14*gconst8*gconst9))+(((-2.0)*gconst11*gconst18*gconst5*sj11*sj12))+(((2.0)*cj12*gconst2*gconst21*gconst8))+(((2.0)*cj12*gconst1*gconst17*gconst7))+(((-2.0)*gconst11*gconst17*gconst6*sj11*sj12))+(((-2.0)*gconst0*gconst11*gconst17*sj11*sj12))+(((2.0)*cj12*gconst2*gconst20*gconst3))+(((2.0)*cj12*gconst1*gconst19*gconst5))+(((2.0)*gconst19*gconst4*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst1*gconst22*gconst6))+(((-2.0)*cj12*gconst1*gconst10*gconst18))+(((-2.0)*cj12*gconst0*gconst20*gconst5))+(((-2.0)*gconst10*gconst16*gconst6*sj11*sj12))+(((2.0)*cj12*gconst0*gconst17*gconst6))+(((-2.0)*cj12*gconst19*gconst2*gconst4))+(((2.0)*gconst11*gconst18*gconst3*sj11*sj12))+(((2.0)*cj12*gconst12*gconst5*gconst6))+(((-2.0)*gconst21*gconst3*gconst8*sj11*sj12))+(((2.0)*gconst20*gconst5*gconst9*sj11*sj12))+(((2.0)*gconst17*gconst8*gconst9*sj11*sj12))+(((-2.0)*gconst15*gconst2*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst0*gconst17*gconst8))+(((2.0)*cj12*gconst1*gconst19*gconst9))+(((2.0)*gconst16*gconst7*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst4*gconst7))+(((-2.0)*cj12*gconst12*gconst5*gconst8))+(((-2.0)*cj12*gconst10*gconst13*gconst6))+(((2.0)*gconst23*gconst3*gconst6*sj11*sj12))+(((2.0)*cj12*gconst0*gconst11*gconst18))+(((-2.0)*cj12*gconst14*gconst3*gconst6))+(((2.0)*cj12*gconst1*gconst21*gconst7))+(((2.0)*gconst1*gconst10*gconst17*sj11*sj12))+(((2.0)*cj12*gconst2*gconst20*gconst9))+(((2.0)*gconst0*gconst17*gconst9*sj11*sj12))+(((2.0)*gconst21*gconst4*gconst7*sj11*sj12))+(((-2.0)*gconst20*gconst3*gconst9*sj11*sj12))+(((-2.0)*gconst10*gconst18*gconst4*sj11*sj12))+(((2.0)*cj12*gconst13*gconst5*gconst7))+(((-2.0)*gconst23*gconst5*gconst6*sj11*sj12))+(((-2.0)*gconst0*gconst23*gconst5*sj11*sj12))+(((2.0)*gconst2*gconst23*gconst3*sj11*sj12))+(((-2.0)*cj12*gconst15*gconst2*gconst6))+(((2.0)*gconst1*gconst22*gconst5*sj11*sj12))+(((-2.0)*cj12*gconst0*gconst21*gconst8))+(((-2.0)*gconst10*gconst14*gconst4*sj11*sj12))+(((2.0)*gconst11*gconst15*gconst2*sj11*sj12))+(((-2.0)*gconst10*gconst16*gconst2*sj11*sj12))+(((2.0)*cj12*gconst0*gconst18*gconst5))+(((-2.0)*cj12*gconst11*gconst18*gconst2))+(((-2.0)*cj12*gconst18*gconst2*gconst3))+(((2.0)*cj12*gconst13*gconst7*gconst9))+(((2.0)*cj12*gconst11*gconst12*gconst6))+(((-2.0)*gconst2*gconst22*gconst4*sj11*sj12))+(((2.0)*gconst21*gconst5*gconst8*sj11*sj12))+(((2.0)*gconst0*gconst21*gconst5*sj11*sj12)));
op[6]=(((x1770*x1805))+((gconst6*x1819))+(((-1.0)*x1778*x1813))+(((-1.0)*gconst8*x1819))+(((-1.0)*x1783*x1814))+((x1768*x1803))+((gconst3*x1822))+(((-1.0)*gconst1*gconst7*x1792))+((x1795*x1806))+(((-1.0)*x1767*x1817))+((gconst8*x1818))+(((-1.0)*x1795*x1807))+(((-1.0)*gconst6*x1818))+(((-1.0)*x1786*x1816))+((x1764*x1806))+((x1772*x1810))+((gconst5*x1823))+(((-1.0)*gconst10*gconst4*x1800))+(((-1.0)*x1779*x1815))+(((-1.0)*x1789*x1815))+(((-1.0)*x1784*x1813))+((x1766*x1807))+(((-1.0)*gconst0*gconst11*gconst18*gconst5))+(((-1.0)*gconst5*x1822))+((x1765*x1806))+(((-1.0)*x1795*x1808))+((gconst14*x1809))+((x1777*x1811))+(((-1.0)*x1768*x1817))+(((-1.0)*x1781*x1803))+(((-1.0)*gconst5*x1821))+((x1795*x1820))+(((-1.0)*x1782*x1814))+((gconst3*x1821))+(((-1.0)*x1795*x1811))+(((-1.0)*x1763*x1812))+((gconst17*x1804))+((x1774*x1810))+((x1775*x1807))+(((-1.0)*x1795*x1805))+(((-1.0)*x1787*x1802))+((x1773*x1808))+(((-1.0)*x1780*x1806))+(((-1.0)*x1788*x1802))+(((-1.0)*gconst3*x1823))+(((-1.0)*x1785*x1816))+((x1795*x1810))+((x1771*x1808))+((x1767*x1803))+((x1763*x1802))+((x1769*x1802))+(((-1.0)*gconst0*gconst9*x1795)));
op[7]=((((-1.0)*x1810*x1832))+((x1803*x1824))+(((-1.0)*x1811*x1828))+(((-1.0)*gconst10*gconst6*x1831))+(((-1.0)*x1807*x1828))+(((-1.0)*gconst11*x1829))+((gconst2*gconst3*x1825))+((x1807*x1833))+(((-1.0)*x1802*x1832))+((gconst9*x1827))+(((-1.0)*x1806*x1833))+((x1808*x1832))+((x1757*x1809))+((gconst5*x1827))+(((-1.0)*x1755*x1804))+((x1805*x1830))+(((-1.0)*x1803*x1825))+(((-1.0)*x1808*x1824))+(((-1.0)*gconst0*x1826))+((x1802*x1830))+(((-1.0)*x1816*x1831))+((x1820*x1824))+((gconst9*x1829))+((gconst2*x1826)));
op[8]=((((-1.0)*x1803*x1812))+((x1807*x1808))+((gconst5*x1804))+((gconst2*x1809))+(((-1.0)*x1802*x1817))+(((-1.0)*x1815*x1816))+(((-1.0)*x1813*x1814))+((x1802*x1803)));
polyroots8(op,zeror,numroots);
IkReal j10array[8], cj10array[8], sj10array[8], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[8]={true,true,true,true,true,true,true,true};
_nj10 = 8;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
{
IkReal j16eval[2];
IkReal x1834=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1834);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1834);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1835=(r22*(cj14*cj14));
IkReal x1836=cj15*cj15;
IkReal x1837=(((r22*x1836))+(((-1.0)*x1835*x1836))+x1835);
j16eval[0]=x1837;
j16eval[1]=IKsign(x1837);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1838=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1838);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1838);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1839=((((-1.0)*(1.0)*cj13*cj14*sj15))+(((-1.0)*(1.0)*cj15*sj13)));
j16eval[0]=x1839;
j16eval[1]=IKsign(x1839);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1840=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1840);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1840);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1841=(cj14*r22*sj13*sj14);
IkReal x1842=(((x1841*(cj15*cj15)))+((((cj13*cj15*sj15))*((r22*sj14))))+(((-1.0)*x1841)));
j16eval[0]=x1842;
j16eval[1]=IKsign(x1842);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x1843=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1843);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1843);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x1844=((6.9)*cj10);
IkReal x1845=(r10*x1844);
IkReal x1846=((6.9)*sj10);
IkReal x1847=(r00*x1846);
IkReal x1848=(cj12*sj11);
IkReal x1849=(r11*x1844);
IkReal x1850=(r01*x1846);
j16eval[0]=r22;
j16eval[1]=((IKabs(((((100.0)*rxp0_2))+x1845+(((-1.0)*x1847))+(((-1.0)*x1845*x1848))+((x1847*x1848)))))+(IKabs((x1850+(((-1.0)*x1848*x1850))+(((-1.0)*x1849))+((x1848*x1849))+(((-1.0)*(100.0)*rxp1_2))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1851=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1851);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1851);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1852=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1852);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1852);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x1853=(r22*sj14);
j16eval[0]=x1853;
j16eval[1]=IKsign(x1853);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1854=(cj10*cj12);
IkReal x1855=((6.9)*cj10*cj14);
IkReal x1856=((6.9)*cj10*sj14);
IkReal x1857=((100.0)*cj14*px);
IkReal x1858=((100.0)*px*sj14);
IkReal x1859=((6.9)*cj10*cj12*cj14*sj11);
IkReal x1860=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x1861 = IKatan2WithCheck(IkReal((((r10*x1859))+((r11*x1856))+(((-1.0)*r10*x1855))+((r01*x1854))+(((-1.0)*r11*x1860))+(((-1.0)*r11*x1858))+((r10*x1857)))),IkReal(((((-1.0)*r11*x1855))+(((-1.0)*r10*x1856))+((r10*x1858))+((r11*x1857))+((r10*x1860))+((r11*x1859))+(((-1.0)*r00*x1854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1861.valid){
continue;
}
CheckValue<IkReal> x1862=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x1862.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1861.value)+(((-1.0)*(1.5707963267949)*(x1862.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1863=((0.069)*cj10);
IkReal x1864=IKsin(j16);
IkReal x1865=((0.01)*x1864);
IkReal x1866=IKcos(j16);
IkReal x1867=((0.01)*x1866);
IkReal x1868=(cj12*sj11);
IkReal x1869=((0.069)*sj10);
IkReal x1870=(cj10*cj12);
IkReal x1871=(cj14*x1866);
IkReal x1872=((1.0)*cj14*x1864);
IkReal x1873=((1.0)*sj14*x1864);
IkReal x1874=((1.0)*sj14*x1866);
IkReal x1875=((1.0)*cj12*sj10);
IkReal x1876=(sj13*sj14*x1864);
IkReal x1877=((1.0)*cj14*sj13*x1864);
IkReal x1878=((1.0)*cj14*sj13*x1866);
IkReal x1879=((1.0)*sj13*sj14*x1866);
IkReal x1880=(cj13*sj14*x1864);
IkReal x1881=((1.0)*cj13*cj14*x1864);
IkReal x1882=((1.0)*cj13*cj14*x1866);
IkReal x1883=((1.0)*cj13*sj14*x1866);
evalcond[0]=((((-1.0)*(1.0)*px))+x1863+(((-1.0)*x1863*x1868))+((r01*x1867))+((r00*x1865)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r11*x1867))+x1869+((r10*x1865))+(((-1.0)*x1868*x1869)));
evalcond[2]=((((-1.0)*r11*x1872))+((r10*x1871))+(((-1.0)*r11*x1874))+x1870+(((-1.0)*r10*x1873)));
evalcond[3]=((((-1.0)*r00*x1873))+(((-1.0)*x1875))+(((-1.0)*r01*x1874))+((r00*x1871))+(((-1.0)*r01*x1872)));
evalcond[4]=(((r01*x1876))+(((-1.0)*r00*x1877))+(((-1.0)*r01*x1878))+(((-1.0)*r00*x1879)));
evalcond[5]=((((-1.0)*r10*x1877))+(((-1.0)*r11*x1878))+((r11*x1876))+(((-1.0)*r10*x1879)));
evalcond[6]=((((-1.0)*r10*x1883))+(((-1.0)*r11*x1882))+(((-1.0)*r10*x1881))+((r11*x1880))+(((-1.0)*sj11*x1875)));
evalcond[7]=((((-1.0)*r01*x1882))+(((-1.0)*r00*x1883))+(((-1.0)*sj11*x1870))+((r01*x1880))+(((-1.0)*r00*x1881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1884=(cj10*cj12);
IkReal x1885=((100.0)*cj14*py);
IkReal x1886=((6.9)*cj14*sj10);
IkReal x1887=(r10*x1886);
IkReal x1888=((100.0)*py*sj14);
IkReal x1889=((6.9)*sj10*sj14);
IkReal x1890=(r11*x1889);
IkReal x1891=(cj12*sj11);
IkReal x1892=(r11*x1886);
IkReal x1893=(r10*x1889);
CheckValue<IkReal> x1894=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x1894.valid){
continue;
}
CheckValue<IkReal> x1895 = IKatan2WithCheck(IkReal(((((-1.0)*x1890*x1891))+(((-1.0)*r11*x1888))+((r11*x1884))+x1890+(((-1.0)*x1887))+((x1887*x1891))+((r10*x1885)))),IkReal((((r10*x1888))+(((-1.0)*x1892))+(((-1.0)*r10*x1884))+((r11*x1885))+((x1891*x1892))+(((-1.0)*x1893))+((x1891*x1893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1895.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1894.value)))+(x1895.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1896=((0.069)*cj10);
IkReal x1897=IKsin(j16);
IkReal x1898=((0.01)*x1897);
IkReal x1899=IKcos(j16);
IkReal x1900=((0.01)*x1899);
IkReal x1901=(cj12*sj11);
IkReal x1902=((0.069)*sj10);
IkReal x1903=(cj10*cj12);
IkReal x1904=(cj14*x1899);
IkReal x1905=((1.0)*cj14*x1897);
IkReal x1906=((1.0)*sj14*x1897);
IkReal x1907=((1.0)*sj14*x1899);
IkReal x1908=((1.0)*cj12*sj10);
IkReal x1909=(sj13*sj14*x1897);
IkReal x1910=((1.0)*cj14*sj13*x1897);
IkReal x1911=((1.0)*cj14*sj13*x1899);
IkReal x1912=((1.0)*sj13*sj14*x1899);
IkReal x1913=(cj13*sj14*x1897);
IkReal x1914=((1.0)*cj13*cj14*x1897);
IkReal x1915=((1.0)*cj13*cj14*x1899);
IkReal x1916=((1.0)*cj13*sj14*x1899);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x1900))+(((-1.0)*x1896*x1901))+x1896+((r00*x1898)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*x1901*x1902))+((r10*x1898))+((r11*x1900))+x1902);
evalcond[2]=((((-1.0)*r10*x1906))+(((-1.0)*r11*x1907))+x1903+((r10*x1904))+(((-1.0)*r11*x1905)));
evalcond[3]=((((-1.0)*r00*x1906))+(((-1.0)*r01*x1907))+(((-1.0)*x1908))+((r00*x1904))+(((-1.0)*r01*x1905)));
evalcond[4]=((((-1.0)*r00*x1912))+(((-1.0)*r01*x1911))+(((-1.0)*r00*x1910))+((r01*x1909)));
evalcond[5]=((((-1.0)*r10*x1912))+(((-1.0)*r10*x1910))+((r11*x1909))+(((-1.0)*r11*x1911)));
evalcond[6]=((((-1.0)*sj11*x1908))+(((-1.0)*r10*x1914))+(((-1.0)*r11*x1915))+(((-1.0)*r10*x1916))+((r11*x1913)));
evalcond[7]=((((-1.0)*r01*x1915))+((r01*x1913))+(((-1.0)*sj11*x1903))+(((-1.0)*r00*x1916))+(((-1.0)*r00*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1917=((6.9)*sj10);
IkReal x1918=(cj12*sj11);
IkReal x1919=(x1917*x1918);
IkReal x1920=((6.9)*cj10);
IkReal x1921=(x1918*x1920);
CheckValue<IkReal> x1922=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1922.valid){
continue;
}
CheckValue<IkReal> x1923 = IKatan2WithCheck(IkReal((((r01*(((((-1.0)*x1919))+x1917))))+((r11*((x1921+(((-1.0)*x1920))))))+(((-1.0)*(100.0)*rxp1_2)))),IkReal((((r10*((x1920+(((-1.0)*x1921))))))+(((100.0)*rxp0_2))+((r00*((x1919+(((-1.0)*x1917)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1923.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1922.value)))+(x1923.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1924=((0.069)*cj10);
IkReal x1925=IKsin(j16);
IkReal x1926=((0.01)*x1925);
IkReal x1927=IKcos(j16);
IkReal x1928=((0.01)*x1927);
IkReal x1929=(cj12*sj11);
IkReal x1930=((0.069)*sj10);
IkReal x1931=(cj10*cj12);
IkReal x1932=(cj14*x1927);
IkReal x1933=((1.0)*cj14*x1925);
IkReal x1934=((1.0)*sj14*x1925);
IkReal x1935=((1.0)*sj14*x1927);
IkReal x1936=((1.0)*cj12*sj10);
IkReal x1937=(sj13*sj14*x1925);
IkReal x1938=((1.0)*cj14*sj13*x1925);
IkReal x1939=((1.0)*cj14*sj13*x1927);
IkReal x1940=((1.0)*sj13*sj14*x1927);
IkReal x1941=(cj13*sj14*x1925);
IkReal x1942=((1.0)*cj13*cj14*x1925);
IkReal x1943=((1.0)*cj13*cj14*x1927);
IkReal x1944=((1.0)*cj13*sj14*x1927);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x1928))+x1924+((r00*x1926))+(((-1.0)*x1924*x1929)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*x1929*x1930))+x1930+((r11*x1928))+((r10*x1926)));
evalcond[2]=((((-1.0)*r11*x1933))+(((-1.0)*r10*x1934))+x1931+(((-1.0)*r11*x1935))+((r10*x1932)));
evalcond[3]=(((r00*x1932))+(((-1.0)*r01*x1935))+(((-1.0)*r01*x1933))+(((-1.0)*r00*x1934))+(((-1.0)*x1936)));
evalcond[4]=((((-1.0)*r00*x1938))+(((-1.0)*r01*x1939))+(((-1.0)*r00*x1940))+((r01*x1937)));
evalcond[5]=(((r11*x1937))+(((-1.0)*r10*x1940))+(((-1.0)*r11*x1939))+(((-1.0)*r10*x1938)));
evalcond[6]=(((r11*x1941))+(((-1.0)*r10*x1944))+(((-1.0)*r11*x1943))+(((-1.0)*r10*x1942))+(((-1.0)*sj11*x1936)));
evalcond[7]=((((-1.0)*sj11*x1931))+(((-1.0)*r00*x1942))+((r01*x1941))+(((-1.0)*r00*x1944))+(((-1.0)*r01*x1943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x1945=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1945);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1945);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x1946=((6.9)*cj10);
IkReal x1947=(r10*x1946);
IkReal x1948=((6.9)*sj10);
IkReal x1949=(r00*x1948);
IkReal x1950=(cj12*sj11);
IkReal x1951=(r11*x1946);
IkReal x1952=(r01*x1948);
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=((IKabs((x1949+(((-1.0)*(100.0)*rxp0_2))+((x1947*x1950))+(((-1.0)*x1947))+(((-1.0)*x1949*x1950)))))+(IKabs(((((-1.0)*x1952))+(((-1.0)*x1950*x1951))+((x1950*x1952))+(((100.0)*rxp1_2))+x1951))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1953=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1953);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1953);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1954=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1954);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1954);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x1955=(r22*sj14);
j16eval[0]=x1955;
j16eval[1]=IKsign(x1955);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1956=(cj10*cj12);
IkReal x1957=((6.9)*cj10*cj14);
IkReal x1958=((6.9)*cj10*sj14);
IkReal x1959=((100.0)*cj14*px);
IkReal x1960=((100.0)*px*sj14);
IkReal x1961=((6.9)*cj10*cj12*cj14*sj11);
IkReal x1962=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x1963 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1959))+((r01*x1956))+((r10*x1957))+((r11*x1958))+(((-1.0)*r10*x1961))+(((-1.0)*r11*x1960))+(((-1.0)*r11*x1962)))),IkReal(((((-1.0)*r10*x1958))+((r11*x1957))+((r10*x1962))+(((-1.0)*r11*x1961))+(((-1.0)*r11*x1959))+((r10*x1960))+(((-1.0)*r00*x1956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1963.valid){
continue;
}
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x1964.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1963.value)+(((1.5707963267949)*(x1964.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1965=((0.069)*cj10);
IkReal x1966=IKsin(j16);
IkReal x1967=((0.01)*x1966);
IkReal x1968=IKcos(j16);
IkReal x1969=((0.01)*x1968);
IkReal x1970=(cj12*sj11);
IkReal x1971=((0.069)*sj10);
IkReal x1972=(cj10*cj12);
IkReal x1973=(cj14*x1968);
IkReal x1974=(sj14*x1966);
IkReal x1975=(sj14*x1968);
IkReal x1976=((1.0)*cj14*x1966);
IkReal x1977=((1.0)*cj12*sj10);
IkReal x1978=(cj14*sj13*x1966);
IkReal x1979=(cj14*sj13*x1968);
IkReal x1980=(sj13*sj14*x1966);
IkReal x1981=((1.0)*sj13*sj14*x1968);
IkReal x1982=(cj13*cj14*x1966);
IkReal x1983=(cj13*cj14*x1968);
IkReal x1984=(cj13*sj14*x1966);
IkReal x1985=((1.0)*cj13*sj14*x1968);
evalcond[0]=(x1965+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x1969))+(((-1.0)*x1965*x1970))+(((-1.0)*r00*x1967)));
evalcond[1]=((((-1.0)*r11*x1969))+(((-1.0)*r10*x1967))+(((-1.0)*x1970*x1971))+(((-1.0)*(1.0)*py))+x1971);
evalcond[2]=(((r10*x1973))+((r11*x1975))+(((-1.0)*r11*x1976))+x1972+((r10*x1974)));
evalcond[3]=(((r00*x1974))+((r01*x1975))+(((-1.0)*x1977))+(((-1.0)*r01*x1976))+((r00*x1973)));
evalcond[4]=((((-1.0)*r00*x1981))+((r01*x1979))+((r01*x1980))+((r00*x1978)));
evalcond[5]=(((r10*x1978))+(((-1.0)*r10*x1981))+((r11*x1980))+((r11*x1979)));
evalcond[6]=(((r11*x1984))+((r10*x1982))+(((-1.0)*sj11*x1977))+((r11*x1983))+(((-1.0)*r10*x1985)));
evalcond[7]=(((r01*x1983))+(((-1.0)*sj11*x1972))+(((-1.0)*r00*x1985))+((r01*x1984))+((r00*x1982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1986=(cj10*cj12);
IkReal x1987=((100.0)*cj14*py);
IkReal x1988=((6.9)*cj14*sj10);
IkReal x1989=(r10*x1988);
IkReal x1990=((100.0)*py*sj14);
IkReal x1991=((6.9)*sj10*sj14);
IkReal x1992=(r11*x1991);
IkReal x1993=(cj12*sj11);
IkReal x1994=(r11*x1988);
IkReal x1995=(r10*x1991);
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x1996.valid){
continue;
}
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal((((r11*x1986))+x1992+x1989+(((-1.0)*x1992*x1993))+(((-1.0)*r10*x1987))+(((-1.0)*x1989*x1993))+(((-1.0)*r11*x1990)))),IkReal((x1994+(((-1.0)*x1993*x1994))+(((-1.0)*r10*x1986))+(((-1.0)*x1995))+((r10*x1990))+(((-1.0)*r11*x1987))+((x1993*x1995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1996.value)))+(x1997.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x1998=((0.069)*cj10);
IkReal x1999=IKsin(j16);
IkReal x2000=((0.01)*x1999);
IkReal x2001=IKcos(j16);
IkReal x2002=((0.01)*x2001);
IkReal x2003=(cj12*sj11);
IkReal x2004=((0.069)*sj10);
IkReal x2005=(cj10*cj12);
IkReal x2006=(cj14*x2001);
IkReal x2007=(sj14*x1999);
IkReal x2008=(sj14*x2001);
IkReal x2009=((1.0)*cj14*x1999);
IkReal x2010=((1.0)*cj12*sj10);
IkReal x2011=(cj14*sj13*x1999);
IkReal x2012=(cj14*sj13*x2001);
IkReal x2013=(sj13*sj14*x1999);
IkReal x2014=((1.0)*sj13*sj14*x2001);
IkReal x2015=(cj13*cj14*x1999);
IkReal x2016=(cj13*cj14*x2001);
IkReal x2017=(cj13*sj14*x1999);
IkReal x2018=((1.0)*cj13*sj14*x2001);
evalcond[0]=((((-1.0)*(1.0)*px))+x1998+(((-1.0)*x1998*x2003))+(((-1.0)*r01*x2002))+(((-1.0)*r00*x2000)));
evalcond[1]=((((-1.0)*(1.0)*py))+x2004+(((-1.0)*r10*x2000))+(((-1.0)*x2003*x2004))+(((-1.0)*r11*x2002)));
evalcond[2]=(((r10*x2006))+x2005+((r11*x2008))+(((-1.0)*r11*x2009))+((r10*x2007)));
evalcond[3]=((((-1.0)*x2010))+((r00*x2007))+(((-1.0)*r01*x2009))+((r00*x2006))+((r01*x2008)));
evalcond[4]=(((r00*x2011))+((r01*x2012))+(((-1.0)*r00*x2014))+((r01*x2013)));
evalcond[5]=(((r11*x2013))+(((-1.0)*r10*x2014))+((r11*x2012))+((r10*x2011)));
evalcond[6]=((((-1.0)*sj11*x2010))+(((-1.0)*r10*x2018))+((r10*x2015))+((r11*x2016))+((r11*x2017)));
evalcond[7]=(((r01*x2017))+((r00*x2015))+(((-1.0)*r00*x2018))+((r01*x2016))+(((-1.0)*sj11*x2005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2019=((6.9)*sj10);
IkReal x2020=(cj12*sj11);
IkReal x2021=(x2019*x2020);
IkReal x2022=((6.9)*cj10);
IkReal x2023=(x2020*x2022);
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal((((r01*(((((-1.0)*x2019))+x2021))))+((r11*(((((-1.0)*x2023))+x2022))))+(((100.0)*rxp1_2)))),IkReal((((r10*((x2023+(((-1.0)*x2022))))))+((r00*(((((-1.0)*x2021))+x2019))))+(((-1.0)*(100.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2025.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2024.value)+(((1.5707963267949)*(x2025.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2026=((0.069)*cj10);
IkReal x2027=IKsin(j16);
IkReal x2028=((0.01)*x2027);
IkReal x2029=IKcos(j16);
IkReal x2030=((0.01)*x2029);
IkReal x2031=(cj12*sj11);
IkReal x2032=((0.069)*sj10);
IkReal x2033=(cj10*cj12);
IkReal x2034=(cj14*x2029);
IkReal x2035=(sj14*x2027);
IkReal x2036=(sj14*x2029);
IkReal x2037=((1.0)*cj14*x2027);
IkReal x2038=((1.0)*cj12*sj10);
IkReal x2039=(cj14*sj13*x2027);
IkReal x2040=(cj14*sj13*x2029);
IkReal x2041=(sj13*sj14*x2027);
IkReal x2042=((1.0)*sj13*sj14*x2029);
IkReal x2043=(cj13*cj14*x2027);
IkReal x2044=(cj13*cj14*x2029);
IkReal x2045=(cj13*sj14*x2027);
IkReal x2046=((1.0)*cj13*sj14*x2029);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*x2026*x2031))+(((-1.0)*r00*x2028))+(((-1.0)*r01*x2030))+x2026);
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x2030))+(((-1.0)*r10*x2028))+x2032+(((-1.0)*x2031*x2032)));
evalcond[2]=(((r11*x2036))+((r10*x2035))+((r10*x2034))+(((-1.0)*r11*x2037))+x2033);
evalcond[3]=(((r00*x2035))+(((-1.0)*x2038))+((r01*x2036))+((r00*x2034))+(((-1.0)*r01*x2037)));
evalcond[4]=(((r01*x2041))+((r00*x2039))+((r01*x2040))+(((-1.0)*r00*x2042)));
evalcond[5]=((((-1.0)*r10*x2042))+((r10*x2039))+((r11*x2040))+((r11*x2041)));
evalcond[6]=(((r11*x2045))+((r11*x2044))+((r10*x2043))+(((-1.0)*sj11*x2038))+(((-1.0)*r10*x2046)));
evalcond[7]=(((r01*x2044))+(((-1.0)*r00*x2046))+(((-1.0)*sj11*x2033))+((r00*x2043))+((r01*x2045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs(((1.0)+cj15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x2047=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2047);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2047);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265;
IkReal x2048=((6.9)*cj10);
IkReal x2049=(r10*x2048);
IkReal x2050=((6.9)*sj10);
IkReal x2051=(r00*x2050);
IkReal x2052=(cj12*sj11);
IkReal x2053=(r11*x2048);
IkReal x2054=(r01*x2050);
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=((IKabs((((x2049*x2052))+x2051+(((-1.0)*x2051*x2052))+(((-1.0)*x2049))+(((-1.0)*(100.0)*rxp0_2)))))+(IKabs(((((-1.0)*x2054))+((x2052*x2054))+x2053+(((100.0)*rxp1_2))+(((-1.0)*x2052*x2053))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2055=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2055);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2055);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2056=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2056);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2056);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265;
IkReal x2057=(r22*sj14);
j16eval[0]=x2057;
j16eval[1]=IKsign(x2057);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2058=(cj10*cj12);
IkReal x2059=((6.9)*cj10*cj14);
IkReal x2060=((6.9)*cj10*sj14);
IkReal x2061=((100.0)*cj14*px);
IkReal x2062=((100.0)*px*sj14);
IkReal x2063=((6.9)*cj10*cj12*cj14*sj11);
IkReal x2064=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x2065=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x2065.valid){
continue;
}
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal((((r11*x2060))+((r01*x2058))+(((-1.0)*r11*x2064))+(((-1.0)*r10*x2063))+(((-1.0)*r10*x2061))+((r10*x2059))+(((-1.0)*r11*x2062)))),IkReal((((r10*x2064))+((r11*x2059))+(((-1.0)*r00*x2058))+((r10*x2062))+(((-1.0)*r10*x2060))+(((-1.0)*r11*x2063))+(((-1.0)*r11*x2061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2065.value)))+(x2066.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2067=((0.069)*cj10);
IkReal x2068=IKsin(j16);
IkReal x2069=((0.01)*x2068);
IkReal x2070=IKcos(j16);
IkReal x2071=((0.01)*x2070);
IkReal x2072=(cj12*sj11);
IkReal x2073=((0.069)*sj10);
IkReal x2074=(cj10*cj12);
IkReal x2075=(cj14*x2070);
IkReal x2076=(sj14*x2068);
IkReal x2077=(sj14*x2070);
IkReal x2078=((1.0)*cj14*x2068);
IkReal x2079=((1.0)*cj12*sj10);
IkReal x2080=(cj14*sj13*x2068);
IkReal x2081=(cj14*sj13*x2070);
IkReal x2082=(sj13*sj14*x2068);
IkReal x2083=((1.0)*sj13*sj14*x2070);
IkReal x2084=(cj13*cj14*x2068);
IkReal x2085=(cj13*cj14*x2070);
IkReal x2086=(cj13*sj14*x2068);
IkReal x2087=((1.0)*cj13*sj14*x2070);
evalcond[0]=((((-1.0)*(1.0)*px))+x2067+(((-1.0)*r00*x2069))+(((-1.0)*r01*x2071))+(((-1.0)*x2067*x2072)));
evalcond[1]=((((-1.0)*(1.0)*py))+x2073+(((-1.0)*r11*x2071))+(((-1.0)*x2072*x2073))+(((-1.0)*r10*x2069)));
evalcond[2]=(x2074+((r10*x2075))+(((-1.0)*r11*x2078))+((r10*x2076))+((r11*x2077)));
evalcond[3]=((((-1.0)*x2079))+((r00*x2075))+((r01*x2077))+((r00*x2076))+(((-1.0)*r01*x2078)));
evalcond[4]=(((r01*x2082))+((r00*x2080))+(((-1.0)*r00*x2083))+((r01*x2081)));
evalcond[5]=((((-1.0)*r10*x2083))+((r11*x2081))+((r10*x2080))+((r11*x2082)));
evalcond[6]=(((r10*x2084))+((r11*x2085))+(((-1.0)*sj11*x2079))+((r11*x2086))+(((-1.0)*r10*x2087)));
evalcond[7]=(((r01*x2086))+((r01*x2085))+(((-1.0)*r00*x2087))+(((-1.0)*sj11*x2074))+((r00*x2084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2088=(cj10*cj12);
IkReal x2089=((100.0)*cj14*py);
IkReal x2090=((6.9)*cj14*sj10);
IkReal x2091=(r10*x2090);
IkReal x2092=((100.0)*py*sj14);
IkReal x2093=((6.9)*sj10*sj14);
IkReal x2094=(r11*x2093);
IkReal x2095=(cj12*sj11);
IkReal x2096=(r11*x2090);
IkReal x2097=(r10*x2093);
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x2098.valid){
continue;
}
CheckValue<IkReal> x2099 = IKatan2WithCheck(IkReal((x2091+x2094+(((-1.0)*x2091*x2095))+(((-1.0)*r11*x2092))+(((-1.0)*x2094*x2095))+((r11*x2088))+(((-1.0)*r10*x2089)))),IkReal((x2096+(((-1.0)*x2095*x2096))+(((-1.0)*r10*x2088))+(((-1.0)*r11*x2089))+(((-1.0)*x2097))+((x2095*x2097))+((r10*x2092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2099.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2098.value)))+(x2099.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2100=((0.069)*cj10);
IkReal x2101=IKsin(j16);
IkReal x2102=((0.01)*x2101);
IkReal x2103=IKcos(j16);
IkReal x2104=((0.01)*x2103);
IkReal x2105=(cj12*sj11);
IkReal x2106=((0.069)*sj10);
IkReal x2107=(cj10*cj12);
IkReal x2108=(cj14*x2103);
IkReal x2109=(sj14*x2101);
IkReal x2110=(sj14*x2103);
IkReal x2111=((1.0)*cj14*x2101);
IkReal x2112=((1.0)*cj12*sj10);
IkReal x2113=(cj14*sj13*x2101);
IkReal x2114=(cj14*sj13*x2103);
IkReal x2115=(sj13*sj14*x2101);
IkReal x2116=((1.0)*sj13*sj14*x2103);
IkReal x2117=(cj13*cj14*x2101);
IkReal x2118=(cj13*cj14*x2103);
IkReal x2119=(cj13*sj14*x2101);
IkReal x2120=((1.0)*cj13*sj14*x2103);
evalcond[0]=((((-1.0)*(1.0)*px))+x2100+(((-1.0)*x2100*x2105))+(((-1.0)*r01*x2104))+(((-1.0)*r00*x2102)));
evalcond[1]=((((-1.0)*(1.0)*py))+x2106+(((-1.0)*r11*x2104))+(((-1.0)*r10*x2102))+(((-1.0)*x2105*x2106)));
evalcond[2]=(x2107+((r10*x2109))+((r10*x2108))+(((-1.0)*r11*x2111))+((r11*x2110)));
evalcond[3]=(((r00*x2108))+(((-1.0)*x2112))+((r01*x2110))+(((-1.0)*r01*x2111))+((r00*x2109)));
evalcond[4]=(((r01*x2114))+((r01*x2115))+(((-1.0)*r00*x2116))+((r00*x2113)));
evalcond[5]=(((r11*x2115))+((r10*x2113))+((r11*x2114))+(((-1.0)*r10*x2116)));
evalcond[6]=((((-1.0)*sj11*x2112))+((r11*x2118))+(((-1.0)*r10*x2120))+((r10*x2117))+((r11*x2119)));
evalcond[7]=(((r01*x2119))+((r01*x2118))+(((-1.0)*r00*x2120))+(((-1.0)*sj11*x2107))+((r00*x2117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2121=((6.9)*sj10);
IkReal x2122=(cj12*sj11);
IkReal x2123=(x2121*x2122);
IkReal x2124=((6.9)*cj10);
IkReal x2125=(x2122*x2124);
CheckValue<IkReal> x2126 = IKatan2WithCheck(IkReal((((r01*(((((-1.0)*x2121))+x2123))))+(((100.0)*rxp1_2))+((r11*((x2124+(((-1.0)*x2125)))))))),IkReal((((r00*(((((-1.0)*x2123))+x2121))))+((r10*((x2125+(((-1.0)*x2124))))))+(((-1.0)*(100.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2126.valid){
continue;
}
CheckValue<IkReal> x2127=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2127.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2126.value)+(((1.5707963267949)*(x2127.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2128=((0.069)*cj10);
IkReal x2129=IKsin(j16);
IkReal x2130=((0.01)*x2129);
IkReal x2131=IKcos(j16);
IkReal x2132=((0.01)*x2131);
IkReal x2133=(cj12*sj11);
IkReal x2134=((0.069)*sj10);
IkReal x2135=(cj10*cj12);
IkReal x2136=(cj14*x2131);
IkReal x2137=(sj14*x2129);
IkReal x2138=(sj14*x2131);
IkReal x2139=((1.0)*cj14*x2129);
IkReal x2140=((1.0)*cj12*sj10);
IkReal x2141=(cj14*sj13*x2129);
IkReal x2142=(cj14*sj13*x2131);
IkReal x2143=(sj13*sj14*x2129);
IkReal x2144=((1.0)*sj13*sj14*x2131);
IkReal x2145=(cj13*cj14*x2129);
IkReal x2146=(cj13*cj14*x2131);
IkReal x2147=(cj13*sj14*x2129);
IkReal x2148=((1.0)*cj13*sj14*x2131);
evalcond[0]=((((-1.0)*(1.0)*px))+x2128+(((-1.0)*r00*x2130))+(((-1.0)*r01*x2132))+(((-1.0)*x2128*x2133)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*x2133*x2134))+(((-1.0)*r10*x2130))+(((-1.0)*r11*x2132))+x2134);
evalcond[2]=(((r10*x2136))+((r11*x2138))+((r10*x2137))+(((-1.0)*r11*x2139))+x2135);
evalcond[3]=(((r00*x2136))+((r00*x2137))+(((-1.0)*x2140))+((r01*x2138))+(((-1.0)*r01*x2139)));
evalcond[4]=(((r01*x2142))+((r00*x2141))+((r01*x2143))+(((-1.0)*r00*x2144)));
evalcond[5]=(((r11*x2142))+((r11*x2143))+((r10*x2141))+(((-1.0)*r10*x2144)));
evalcond[6]=(((r11*x2146))+((r11*x2147))+((r10*x2145))+(((-1.0)*r10*x2148))+(((-1.0)*sj11*x2140)));
evalcond[7]=(((r01*x2147))+(((-1.0)*sj11*x2135))+((r00*x2145))+(((-1.0)*r00*x2148))+((r01*x2146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj15)))))+(IKabs(((1.0)+cj15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x2149=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2149);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2149);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=-3.14159265;
IkReal x2150=((6.9)*cj10);
IkReal x2151=(r10*x2150);
IkReal x2152=((6.9)*sj10);
IkReal x2153=(r00*x2152);
IkReal x2154=(cj12*sj11);
IkReal x2155=(r11*x2150);
IkReal x2156=(r01*x2152);
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=((IKabs((((x2151*x2154))+x2153+(((-1.0)*x2151))+(((-1.0)*(100.0)*rxp0_2))+(((-1.0)*x2153*x2154)))))+(IKabs((((x2154*x2156))+(((-1.0)*x2156))+x2155+(((-1.0)*x2154*x2155))+(((100.0)*rxp1_2))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2157=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2157);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2157);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=-3.14159265;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2158=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2158);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2158);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=-3.14159265;
IkReal x2159=(r22*sj14);
j16eval[0]=x2159;
j16eval[1]=IKsign(x2159);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2160=(cj10*cj12);
IkReal x2161=((6.9)*cj10*cj14);
IkReal x2162=((6.9)*cj10*sj14);
IkReal x2163=((100.0)*cj14*px);
IkReal x2164=((100.0)*px*sj14);
IkReal x2165=((6.9)*cj10*cj12*cj14*sj11);
IkReal x2166=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x2167.valid){
continue;
}
CheckValue<IkReal> x2168 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2166))+((r10*x2161))+((r11*x2162))+((r01*x2160))+(((-1.0)*r10*x2165))+(((-1.0)*r11*x2164))+(((-1.0)*r10*x2163)))),IkReal((((r10*x2164))+((r10*x2166))+(((-1.0)*r10*x2162))+(((-1.0)*r11*x2163))+((r11*x2161))+(((-1.0)*r11*x2165))+(((-1.0)*r00*x2160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2168.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2167.value)))+(x2168.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2169=((0.069)*cj10);
IkReal x2170=IKsin(j16);
IkReal x2171=((0.01)*x2170);
IkReal x2172=IKcos(j16);
IkReal x2173=((0.01)*x2172);
IkReal x2174=(cj12*sj11);
IkReal x2175=((0.069)*sj10);
IkReal x2176=(cj10*cj12);
IkReal x2177=(cj14*x2172);
IkReal x2178=(sj14*x2170);
IkReal x2179=(sj14*x2172);
IkReal x2180=((1.0)*cj14*x2170);
IkReal x2181=((1.0)*cj12*sj10);
IkReal x2182=(cj14*sj13*x2170);
IkReal x2183=(cj14*sj13*x2172);
IkReal x2184=(sj13*sj14*x2170);
IkReal x2185=((1.0)*sj13*sj14*x2172);
IkReal x2186=(cj13*cj14*x2170);
IkReal x2187=(cj13*cj14*x2172);
IkReal x2188=(cj13*sj14*x2170);
IkReal x2189=((1.0)*cj13*sj14*x2172);
evalcond[0]=((((-1.0)*(1.0)*px))+x2169+(((-1.0)*r00*x2171))+(((-1.0)*x2169*x2174))+(((-1.0)*r01*x2173)));
evalcond[1]=((((-1.0)*r11*x2173))+x2175+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x2171))+(((-1.0)*x2174*x2175)));
evalcond[2]=(x2176+((r10*x2178))+((r10*x2177))+(((-1.0)*r11*x2180))+((r11*x2179)));
evalcond[3]=((((-1.0)*r01*x2180))+((r00*x2178))+(((-1.0)*x2181))+((r00*x2177))+((r01*x2179)));
evalcond[4]=(((r01*x2183))+(((-1.0)*r00*x2185))+((r01*x2184))+((r00*x2182)));
evalcond[5]=(((r11*x2184))+((r10*x2182))+((r11*x2183))+(((-1.0)*r10*x2185)));
evalcond[6]=(((r10*x2186))+((r11*x2187))+(((-1.0)*sj11*x2181))+(((-1.0)*r10*x2189))+((r11*x2188)));
evalcond[7]=((((-1.0)*r00*x2189))+((r01*x2188))+((r00*x2186))+((r01*x2187))+(((-1.0)*sj11*x2176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2190=(cj10*cj12);
IkReal x2191=((100.0)*cj14*py);
IkReal x2192=((6.9)*cj14*sj10);
IkReal x2193=(r10*x2192);
IkReal x2194=((100.0)*py*sj14);
IkReal x2195=((6.9)*sj10*sj14);
IkReal x2196=(r11*x2195);
IkReal x2197=(cj12*sj11);
IkReal x2198=(r11*x2192);
IkReal x2199=(r10*x2195);
CheckValue<IkReal> x2200=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x2200.valid){
continue;
}
CheckValue<IkReal> x2201 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2191))+x2196+x2193+((r11*x2190))+(((-1.0)*x2193*x2197))+(((-1.0)*x2196*x2197))+(((-1.0)*r11*x2194)))),IkReal((x2198+(((-1.0)*x2199))+((r10*x2194))+(((-1.0)*r11*x2191))+(((-1.0)*r10*x2190))+(((-1.0)*x2197*x2198))+((x2197*x2199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2200.value)))+(x2201.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2202=((0.069)*cj10);
IkReal x2203=IKsin(j16);
IkReal x2204=((0.01)*x2203);
IkReal x2205=IKcos(j16);
IkReal x2206=((0.01)*x2205);
IkReal x2207=(cj12*sj11);
IkReal x2208=((0.069)*sj10);
IkReal x2209=(cj10*cj12);
IkReal x2210=(cj14*x2205);
IkReal x2211=(sj14*x2203);
IkReal x2212=(sj14*x2205);
IkReal x2213=((1.0)*cj14*x2203);
IkReal x2214=((1.0)*cj12*sj10);
IkReal x2215=(cj14*sj13*x2203);
IkReal x2216=(cj14*sj13*x2205);
IkReal x2217=(sj13*sj14*x2203);
IkReal x2218=((1.0)*sj13*sj14*x2205);
IkReal x2219=(cj13*cj14*x2203);
IkReal x2220=(cj13*cj14*x2205);
IkReal x2221=(cj13*sj14*x2203);
IkReal x2222=((1.0)*cj13*sj14*x2205);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x2204))+x2202+(((-1.0)*r01*x2206))+(((-1.0)*x2202*x2207)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*x2207*x2208))+(((-1.0)*r11*x2206))+(((-1.0)*r10*x2204))+x2208);
evalcond[2]=(((r10*x2211))+(((-1.0)*r11*x2213))+((r10*x2210))+x2209+((r11*x2212)));
evalcond[3]=(((r01*x2212))+(((-1.0)*r01*x2213))+(((-1.0)*x2214))+((r00*x2211))+((r00*x2210)));
evalcond[4]=(((r01*x2217))+(((-1.0)*r00*x2218))+((r01*x2216))+((r00*x2215)));
evalcond[5]=(((r11*x2216))+(((-1.0)*r10*x2218))+((r10*x2215))+((r11*x2217)));
evalcond[6]=((((-1.0)*sj11*x2214))+(((-1.0)*r10*x2222))+((r10*x2219))+((r11*x2221))+((r11*x2220)));
evalcond[7]=(((r01*x2221))+(((-1.0)*sj11*x2209))+(((-1.0)*r00*x2222))+((r01*x2220))+((r00*x2219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2223=((6.9)*sj10);
IkReal x2224=(cj12*sj11);
IkReal x2225=(x2223*x2224);
IkReal x2226=((6.9)*cj10);
IkReal x2227=(x2224*x2226);
CheckValue<IkReal> x2228 = IKatan2WithCheck(IkReal((((r11*((x2226+(((-1.0)*x2227))))))+(((100.0)*rxp1_2))+((r01*((x2225+(((-1.0)*x2223)))))))),IkReal((((r10*(((((-1.0)*x2226))+x2227))))+((r00*(((((-1.0)*x2225))+x2223))))+(((-1.0)*(100.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2228.valid){
continue;
}
CheckValue<IkReal> x2229=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2229.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2228.value)+(((1.5707963267949)*(x2229.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2230=((0.069)*cj10);
IkReal x2231=IKsin(j16);
IkReal x2232=((0.01)*x2231);
IkReal x2233=IKcos(j16);
IkReal x2234=((0.01)*x2233);
IkReal x2235=(cj12*sj11);
IkReal x2236=((0.069)*sj10);
IkReal x2237=(cj10*cj12);
IkReal x2238=(cj14*x2233);
IkReal x2239=(sj14*x2231);
IkReal x2240=(sj14*x2233);
IkReal x2241=((1.0)*cj14*x2231);
IkReal x2242=((1.0)*cj12*sj10);
IkReal x2243=(cj14*sj13*x2231);
IkReal x2244=(cj14*sj13*x2233);
IkReal x2245=(sj13*sj14*x2231);
IkReal x2246=((1.0)*sj13*sj14*x2233);
IkReal x2247=(cj13*cj14*x2231);
IkReal x2248=(cj13*cj14*x2233);
IkReal x2249=(cj13*sj14*x2231);
IkReal x2250=((1.0)*cj13*sj14*x2233);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x2232))+x2230+(((-1.0)*r01*x2234))+(((-1.0)*x2230*x2235)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r10*x2232))+x2236+(((-1.0)*x2235*x2236))+(((-1.0)*r11*x2234)));
evalcond[2]=(((r10*x2239))+((r10*x2238))+(((-1.0)*r11*x2241))+x2237+((r11*x2240)));
evalcond[3]=((((-1.0)*x2242))+(((-1.0)*r01*x2241))+((r00*x2239))+((r00*x2238))+((r01*x2240)));
evalcond[4]=(((r00*x2243))+(((-1.0)*r00*x2246))+((r01*x2245))+((r01*x2244)));
evalcond[5]=(((r11*x2244))+((r11*x2245))+((r10*x2243))+(((-1.0)*r10*x2246)));
evalcond[6]=((((-1.0)*r10*x2250))+(((-1.0)*sj11*x2242))+((r10*x2247))+((r11*x2249))+((r11*x2248)));
evalcond[7]=(((r01*x2249))+((r01*x2248))+(((-1.0)*r00*x2250))+(((-1.0)*sj11*x2237))+((r00*x2247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs(((-1.0)+cj15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x2251=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2251);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2251);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x2252=((6.9)*cj10);
IkReal x2253=(r10*x2252);
IkReal x2254=((6.9)*sj10);
IkReal x2255=(r00*x2254);
IkReal x2256=(cj12*sj11);
IkReal x2257=(r11*x2252);
IkReal x2258=(r01*x2254);
j16eval[0]=r22;
j16eval[1]=((IKabs(((((100.0)*rxp0_2))+((x2255*x2256))+(((-1.0)*x2255))+(((-1.0)*x2253*x2256))+x2253)))+(IKabs((((x2256*x2257))+(((-1.0)*x2256*x2258))+(((-1.0)*x2257))+x2258+(((-1.0)*(100.0)*rxp1_2))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2259=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2259);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2259);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2260=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2260);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2260);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x2261=(r22*sj14);
j16eval[0]=x2261;
j16eval[1]=IKsign(x2261);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2262=(cj10*cj12);
IkReal x2263=((6.9)*cj10*cj14);
IkReal x2264=((6.9)*cj10*sj14);
IkReal x2265=((100.0)*cj14*px);
IkReal x2266=((100.0)*px*sj14);
IkReal x2267=((6.9)*cj10*cj12*cj14*sj11);
IkReal x2268=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x2269 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2263))+((r11*x2264))+((r10*x2265))+((r10*x2267))+(((-1.0)*r11*x2266))+(((-1.0)*r11*x2268))+((r01*x2262)))),IkReal(((((-1.0)*r10*x2264))+((r11*x2267))+((r10*x2266))+((r11*x2265))+(((-1.0)*r11*x2263))+(((-1.0)*r00*x2262))+((r10*x2268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2269.valid){
continue;
}
CheckValue<IkReal> x2270=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x2270.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2269.value)+(((-1.0)*(1.5707963267949)*(x2270.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2271=((0.069)*cj10);
IkReal x2272=IKsin(j16);
IkReal x2273=((0.01)*x2272);
IkReal x2274=IKcos(j16);
IkReal x2275=((0.01)*x2274);
IkReal x2276=(cj12*sj11);
IkReal x2277=((0.069)*sj10);
IkReal x2278=(cj10*cj12);
IkReal x2279=(cj14*x2274);
IkReal x2280=((1.0)*cj14*x2272);
IkReal x2281=((1.0)*sj14*x2272);
IkReal x2282=((1.0)*sj14*x2274);
IkReal x2283=((1.0)*cj12*sj10);
IkReal x2284=(sj13*sj14*x2272);
IkReal x2285=((1.0)*cj14*sj13*x2272);
IkReal x2286=((1.0)*cj14*sj13*x2274);
IkReal x2287=((1.0)*sj13*sj14*x2274);
IkReal x2288=(cj13*sj14*x2272);
IkReal x2289=((1.0)*cj13*cj14*x2272);
IkReal x2290=((1.0)*cj13*cj14*x2274);
IkReal x2291=((1.0)*cj13*sj14*x2274);
evalcond[0]=((((-1.0)*(1.0)*px))+((r00*x2273))+x2271+((r01*x2275))+(((-1.0)*x2271*x2276)));
evalcond[1]=(((r10*x2273))+(((-1.0)*(1.0)*py))+((r11*x2275))+x2277+(((-1.0)*x2276*x2277)));
evalcond[2]=((((-1.0)*r11*x2280))+x2278+((r10*x2279))+(((-1.0)*r11*x2282))+(((-1.0)*r10*x2281)));
evalcond[3]=((((-1.0)*r00*x2281))+(((-1.0)*r01*x2282))+(((-1.0)*r01*x2280))+(((-1.0)*x2283))+((r00*x2279)));
evalcond[4]=((((-1.0)*r00*x2285))+((r01*x2284))+(((-1.0)*r01*x2286))+(((-1.0)*r00*x2287)));
evalcond[5]=((((-1.0)*r10*x2287))+(((-1.0)*r10*x2285))+((r11*x2284))+(((-1.0)*r11*x2286)));
evalcond[6]=((((-1.0)*r10*x2289))+((r11*x2288))+(((-1.0)*sj11*x2283))+(((-1.0)*r10*x2291))+(((-1.0)*r11*x2290)));
evalcond[7]=((((-1.0)*r00*x2291))+((r01*x2288))+(((-1.0)*sj11*x2278))+(((-1.0)*r00*x2289))+(((-1.0)*r01*x2290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2292=(cj10*cj12);
IkReal x2293=((100.0)*cj14*py);
IkReal x2294=((6.9)*cj14*sj10);
IkReal x2295=(r10*x2294);
IkReal x2296=((100.0)*py*sj14);
IkReal x2297=((6.9)*sj10*sj14);
IkReal x2298=(r11*x2297);
IkReal x2299=(cj12*sj11);
IkReal x2300=(r11*x2294);
IkReal x2301=(r10*x2297);
CheckValue<IkReal> x2302=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x2302.valid){
continue;
}
CheckValue<IkReal> x2303 = IKatan2WithCheck(IkReal((x2298+(((-1.0)*x2295))+((r11*x2292))+(((-1.0)*x2298*x2299))+((x2295*x2299))+(((-1.0)*r11*x2296))+((r10*x2293)))),IkReal(((((-1.0)*x2300))+((x2299*x2301))+(((-1.0)*x2301))+((x2299*x2300))+((r10*x2296))+(((-1.0)*r10*x2292))+((r11*x2293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2303.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2302.value)))+(x2303.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2304=((0.069)*cj10);
IkReal x2305=IKsin(j16);
IkReal x2306=((0.01)*x2305);
IkReal x2307=IKcos(j16);
IkReal x2308=((0.01)*x2307);
IkReal x2309=(cj12*sj11);
IkReal x2310=((0.069)*sj10);
IkReal x2311=(cj10*cj12);
IkReal x2312=(cj14*x2307);
IkReal x2313=((1.0)*cj14*x2305);
IkReal x2314=((1.0)*sj14*x2305);
IkReal x2315=((1.0)*sj14*x2307);
IkReal x2316=((1.0)*cj12*sj10);
IkReal x2317=(sj13*sj14*x2305);
IkReal x2318=((1.0)*cj14*sj13*x2305);
IkReal x2319=((1.0)*cj14*sj13*x2307);
IkReal x2320=((1.0)*sj13*sj14*x2307);
IkReal x2321=(cj13*sj14*x2305);
IkReal x2322=((1.0)*cj13*cj14*x2305);
IkReal x2323=((1.0)*cj13*cj14*x2307);
IkReal x2324=((1.0)*cj13*sj14*x2307);
evalcond[0]=((((-1.0)*(1.0)*px))+((r00*x2306))+(((-1.0)*x2304*x2309))+((r01*x2308))+x2304);
evalcond[1]=((((-1.0)*(1.0)*py))+((r10*x2306))+(((-1.0)*x2309*x2310))+x2310+((r11*x2308)));
evalcond[2]=(((r10*x2312))+(((-1.0)*r10*x2314))+(((-1.0)*r11*x2315))+(((-1.0)*r11*x2313))+x2311);
evalcond[3]=(((r00*x2312))+(((-1.0)*x2316))+(((-1.0)*r01*x2315))+(((-1.0)*r01*x2313))+(((-1.0)*r00*x2314)));
evalcond[4]=((((-1.0)*r00*x2320))+(((-1.0)*r00*x2318))+(((-1.0)*r01*x2319))+((r01*x2317)));
evalcond[5]=((((-1.0)*r10*x2318))+((r11*x2317))+(((-1.0)*r11*x2319))+(((-1.0)*r10*x2320)));
evalcond[6]=((((-1.0)*r10*x2322))+((r11*x2321))+(((-1.0)*r11*x2323))+(((-1.0)*sj11*x2316))+(((-1.0)*r10*x2324)));
evalcond[7]=(((r01*x2321))+(((-1.0)*r00*x2322))+(((-1.0)*sj11*x2311))+(((-1.0)*r00*x2324))+(((-1.0)*r01*x2323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2325=((6.9)*sj10);
IkReal x2326=(cj12*sj11);
IkReal x2327=(x2325*x2326);
IkReal x2328=((6.9)*cj10);
IkReal x2329=(x2326*x2328);
CheckValue<IkReal> x2330 = IKatan2WithCheck(IkReal((((r11*(((((-1.0)*x2328))+x2329))))+((r01*(((((-1.0)*x2327))+x2325))))+(((-1.0)*(100.0)*rxp1_2)))),IkReal((((r10*(((((-1.0)*x2329))+x2328))))+((r00*((x2327+(((-1.0)*x2325))))))+(((100.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2330.valid){
continue;
}
CheckValue<IkReal> x2331=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2331.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2330.value)+(((1.5707963267949)*(x2331.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2332=((0.069)*cj10);
IkReal x2333=IKsin(j16);
IkReal x2334=((0.01)*x2333);
IkReal x2335=IKcos(j16);
IkReal x2336=((0.01)*x2335);
IkReal x2337=(cj12*sj11);
IkReal x2338=((0.069)*sj10);
IkReal x2339=(cj10*cj12);
IkReal x2340=(cj14*x2335);
IkReal x2341=((1.0)*cj14*x2333);
IkReal x2342=((1.0)*sj14*x2333);
IkReal x2343=((1.0)*sj14*x2335);
IkReal x2344=((1.0)*cj12*sj10);
IkReal x2345=(sj13*sj14*x2333);
IkReal x2346=((1.0)*cj14*sj13*x2333);
IkReal x2347=((1.0)*cj14*sj13*x2335);
IkReal x2348=((1.0)*sj13*sj14*x2335);
IkReal x2349=(cj13*sj14*x2333);
IkReal x2350=((1.0)*cj13*cj14*x2333);
IkReal x2351=((1.0)*cj13*cj14*x2335);
IkReal x2352=((1.0)*cj13*sj14*x2335);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x2336))+x2332+(((-1.0)*x2332*x2337))+((r00*x2334)));
evalcond[1]=(((r10*x2334))+(((-1.0)*(1.0)*py))+((r11*x2336))+(((-1.0)*x2337*x2338))+x2338);
evalcond[2]=((((-1.0)*r10*x2342))+(((-1.0)*r11*x2341))+((r10*x2340))+(((-1.0)*r11*x2343))+x2339);
evalcond[3]=((((-1.0)*x2344))+(((-1.0)*r01*x2343))+(((-1.0)*r01*x2341))+(((-1.0)*r00*x2342))+((r00*x2340)));
evalcond[4]=((((-1.0)*r01*x2347))+(((-1.0)*r00*x2346))+(((-1.0)*r00*x2348))+((r01*x2345)));
evalcond[5]=((((-1.0)*r11*x2347))+(((-1.0)*r10*x2348))+(((-1.0)*r10*x2346))+((r11*x2345)));
evalcond[6]=((((-1.0)*r11*x2351))+((r11*x2349))+(((-1.0)*r10*x2350))+(((-1.0)*sj11*x2344))+(((-1.0)*r10*x2352)));
evalcond[7]=((((-1.0)*sj11*x2339))+(((-1.0)*r01*x2351))+(((-1.0)*r00*x2350))+((r01*x2349))+(((-1.0)*r00*x2352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj15)))+(IKabs(((1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x2353=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2353);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2353);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x2354=((6.9)*cj10);
IkReal x2355=(r10*x2354);
IkReal x2356=((6.9)*sj10);
IkReal x2357=(r00*x2356);
IkReal x2358=(cj12*sj11);
IkReal x2359=(r11*x2354);
IkReal x2360=(r01*x2356);
j16eval[0]=r22;
j16eval[1]=((IKabs(((((-1.0)*x2357))+((x2357*x2358))+(((100.0)*rxp0_2))+x2355+(((-1.0)*x2355*x2358)))))+(IKabs((((x2358*x2359))+x2360+(((-1.0)*x2359))+(((-1.0)*x2358*x2360))+(((-1.0)*(100.0)*rxp1_2))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2361=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2361);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2361);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2362=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2362);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2362);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x2363=(r22*sj14);
j16eval[0]=x2363;
j16eval[1]=IKsign(x2363);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2364=(cj10*cj12);
IkReal x2365=((6.9)*cj10*cj14);
IkReal x2366=((6.9)*cj10*sj14);
IkReal x2367=((100.0)*cj14*px);
IkReal x2368=((100.0)*px*sj14);
IkReal x2369=((6.9)*cj10*cj12*cj14*sj11);
IkReal x2370=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x2371 = IKatan2WithCheck(IkReal((((r01*x2364))+(((-1.0)*r11*x2370))+(((-1.0)*r10*x2365))+((r11*x2366))+((r10*x2369))+((r10*x2367))+(((-1.0)*r11*x2368)))),IkReal((((r11*x2367))+(((-1.0)*r11*x2365))+(((-1.0)*r10*x2366))+(((-1.0)*r00*x2364))+((r11*x2369))+((r10*x2368))+((r10*x2370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2371.valid){
continue;
}
CheckValue<IkReal> x2372=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x2372.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2371.value)+(((-1.0)*(1.5707963267949)*(x2372.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2373=((0.069)*cj10);
IkReal x2374=IKsin(j16);
IkReal x2375=((0.01)*x2374);
IkReal x2376=IKcos(j16);
IkReal x2377=((0.01)*x2376);
IkReal x2378=(cj12*sj11);
IkReal x2379=((0.069)*sj10);
IkReal x2380=(cj10*cj12);
IkReal x2381=(cj14*x2376);
IkReal x2382=((1.0)*cj14*x2374);
IkReal x2383=((1.0)*sj14*x2374);
IkReal x2384=((1.0)*sj14*x2376);
IkReal x2385=((1.0)*cj12*sj10);
IkReal x2386=(sj13*sj14*x2374);
IkReal x2387=((1.0)*cj14*sj13*x2374);
IkReal x2388=((1.0)*cj14*sj13*x2376);
IkReal x2389=((1.0)*sj13*sj14*x2376);
IkReal x2390=(cj13*sj14*x2374);
IkReal x2391=((1.0)*cj13*cj14*x2374);
IkReal x2392=((1.0)*cj13*cj14*x2376);
IkReal x2393=((1.0)*cj13*sj14*x2376);
evalcond[0]=((((-1.0)*(1.0)*px))+x2373+(((-1.0)*x2373*x2378))+((r01*x2377))+((r00*x2375)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r11*x2377))+x2379+(((-1.0)*x2378*x2379))+((r10*x2375)));
evalcond[2]=((((-1.0)*r11*x2382))+(((-1.0)*r11*x2384))+(((-1.0)*r10*x2383))+((r10*x2381))+x2380);
evalcond[3]=((((-1.0)*r00*x2383))+(((-1.0)*x2385))+(((-1.0)*r01*x2382))+((r00*x2381))+(((-1.0)*r01*x2384)));
evalcond[4]=(((r01*x2386))+(((-1.0)*r01*x2388))+(((-1.0)*r00*x2389))+(((-1.0)*r00*x2387)));
evalcond[5]=((((-1.0)*r11*x2388))+(((-1.0)*r10*x2389))+(((-1.0)*r10*x2387))+((r11*x2386)));
evalcond[6]=((((-1.0)*r10*x2391))+(((-1.0)*r11*x2392))+(((-1.0)*sj11*x2385))+((r11*x2390))+(((-1.0)*r10*x2393)));
evalcond[7]=(((r01*x2390))+(((-1.0)*sj11*x2380))+(((-1.0)*r00*x2393))+(((-1.0)*r00*x2391))+(((-1.0)*r01*x2392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2394=(cj10*cj12);
IkReal x2395=((100.0)*cj14*py);
IkReal x2396=((6.9)*cj14*sj10);
IkReal x2397=(r10*x2396);
IkReal x2398=((100.0)*py*sj14);
IkReal x2399=((6.9)*sj10*sj14);
IkReal x2400=(r11*x2399);
IkReal x2401=(cj12*sj11);
IkReal x2402=(r11*x2396);
IkReal x2403=(r10*x2399);
CheckValue<IkReal> x2404 = IKatan2WithCheck(IkReal(((((-1.0)*x2400*x2401))+((x2397*x2401))+((r11*x2394))+((r10*x2395))+(((-1.0)*r11*x2398))+(((-1.0)*x2397))+x2400)),IkReal(((((-1.0)*x2403))+((r11*x2395))+((x2401*x2402))+((r10*x2398))+(((-1.0)*r10*x2394))+(((-1.0)*x2402))+((x2401*x2403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2404.valid){
continue;
}
CheckValue<IkReal> x2405=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x2405.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2404.value)+(((1.5707963267949)*(x2405.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2406=((0.069)*cj10);
IkReal x2407=IKsin(j16);
IkReal x2408=((0.01)*x2407);
IkReal x2409=IKcos(j16);
IkReal x2410=((0.01)*x2409);
IkReal x2411=(cj12*sj11);
IkReal x2412=((0.069)*sj10);
IkReal x2413=(cj10*cj12);
IkReal x2414=(cj14*x2409);
IkReal x2415=((1.0)*cj14*x2407);
IkReal x2416=((1.0)*sj14*x2407);
IkReal x2417=((1.0)*sj14*x2409);
IkReal x2418=((1.0)*cj12*sj10);
IkReal x2419=(sj13*sj14*x2407);
IkReal x2420=((1.0)*cj14*sj13*x2407);
IkReal x2421=((1.0)*cj14*sj13*x2409);
IkReal x2422=((1.0)*sj13*sj14*x2409);
IkReal x2423=(cj13*sj14*x2407);
IkReal x2424=((1.0)*cj13*cj14*x2407);
IkReal x2425=((1.0)*cj13*cj14*x2409);
IkReal x2426=((1.0)*cj13*sj14*x2409);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x2410))+(((-1.0)*x2406*x2411))+((r00*x2408))+x2406);
evalcond[1]=(((r10*x2408))+(((-1.0)*(1.0)*py))+((r11*x2410))+x2412+(((-1.0)*x2411*x2412)));
evalcond[2]=((((-1.0)*r11*x2417))+(((-1.0)*r11*x2415))+x2413+(((-1.0)*r10*x2416))+((r10*x2414)));
evalcond[3]=((((-1.0)*r01*x2417))+(((-1.0)*x2418))+(((-1.0)*r00*x2416))+((r00*x2414))+(((-1.0)*r01*x2415)));
evalcond[4]=((((-1.0)*r01*x2421))+(((-1.0)*r00*x2420))+(((-1.0)*r00*x2422))+((r01*x2419)));
evalcond[5]=(((r11*x2419))+(((-1.0)*r10*x2422))+(((-1.0)*r11*x2421))+(((-1.0)*r10*x2420)));
evalcond[6]=(((r11*x2423))+(((-1.0)*r10*x2426))+(((-1.0)*r10*x2424))+(((-1.0)*r11*x2425))+(((-1.0)*sj11*x2418)));
evalcond[7]=(((r01*x2423))+(((-1.0)*r00*x2426))+(((-1.0)*r01*x2425))+(((-1.0)*r00*x2424))+(((-1.0)*sj11*x2413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2427=((6.9)*sj10);
IkReal x2428=(cj12*sj11);
IkReal x2429=(x2427*x2428);
IkReal x2430=((6.9)*cj10);
IkReal x2431=(x2428*x2430);
CheckValue<IkReal> x2432 = IKatan2WithCheck(IkReal((((r01*(((((-1.0)*x2429))+x2427))))+((r11*(((((-1.0)*x2430))+x2431))))+(((-1.0)*(100.0)*rxp1_2)))),IkReal((((r00*(((((-1.0)*x2427))+x2429))))+(((100.0)*rxp0_2))+((r10*(((((-1.0)*x2431))+x2430)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2432.valid){
continue;
}
CheckValue<IkReal> x2433=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2433.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2432.value)+(((1.5707963267949)*(x2433.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2434=((0.069)*cj10);
IkReal x2435=IKsin(j16);
IkReal x2436=((0.01)*x2435);
IkReal x2437=IKcos(j16);
IkReal x2438=((0.01)*x2437);
IkReal x2439=(cj12*sj11);
IkReal x2440=((0.069)*sj10);
IkReal x2441=(cj10*cj12);
IkReal x2442=(cj14*x2437);
IkReal x2443=((1.0)*cj14*x2435);
IkReal x2444=((1.0)*sj14*x2435);
IkReal x2445=((1.0)*sj14*x2437);
IkReal x2446=((1.0)*cj12*sj10);
IkReal x2447=(sj13*sj14*x2435);
IkReal x2448=((1.0)*cj14*sj13*x2435);
IkReal x2449=((1.0)*cj14*sj13*x2437);
IkReal x2450=((1.0)*sj13*sj14*x2437);
IkReal x2451=(cj13*sj14*x2435);
IkReal x2452=((1.0)*cj13*cj14*x2435);
IkReal x2453=((1.0)*cj13*cj14*x2437);
IkReal x2454=((1.0)*cj13*sj14*x2437);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x2438))+x2434+((r00*x2436))+(((-1.0)*x2434*x2439)));
evalcond[1]=(((r10*x2436))+(((-1.0)*x2439*x2440))+(((-1.0)*(1.0)*py))+((r11*x2438))+x2440);
evalcond[2]=(x2441+(((-1.0)*r11*x2443))+((r10*x2442))+(((-1.0)*r10*x2444))+(((-1.0)*r11*x2445)));
evalcond[3]=(((r00*x2442))+(((-1.0)*r01*x2443))+(((-1.0)*r00*x2444))+(((-1.0)*x2446))+(((-1.0)*r01*x2445)));
evalcond[4]=((((-1.0)*r00*x2450))+((r01*x2447))+(((-1.0)*r00*x2448))+(((-1.0)*r01*x2449)));
evalcond[5]=((((-1.0)*r10*x2448))+(((-1.0)*r10*x2450))+((r11*x2447))+(((-1.0)*r11*x2449)));
evalcond[6]=((((-1.0)*r11*x2453))+((r11*x2451))+(((-1.0)*sj11*x2446))+(((-1.0)*r10*x2454))+(((-1.0)*r10*x2452)));
evalcond[7]=((((-1.0)*r00*x2452))+(((-1.0)*sj11*x2441))+(((-1.0)*r01*x2453))+((r01*x2451))+(((-1.0)*r00*x2454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
IkReal x2455=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2455);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2455);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj14=0;
cj14=1.0;
j14=0;
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=cj12;
j16eval[3]=((cj10*cj10)+(sj10*sj10));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2456=(cj10*cj12);
IkReal x2457=(cj12*sj10);
CheckValue<IkReal> x2458=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2458.valid){
continue;
}
CheckValue<IkReal> x2459 = IKatan2WithCheck(IkReal((((r10*x2457))+((r00*x2456)))),IkReal((((r11*x2457))+((r01*x2456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2459.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2458.value)))+(x2459.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2460=(cj10*cj12);
IkReal x2461=IKcos(j16);
IkReal x2462=IKsin(j16);
IkReal x2463=((1.0)*x2462);
IkReal x2464=((1.0)*cj12*sj10);
IkReal x2465=((1.0)*cj13*sj15*x2462);
IkReal x2466=((1.0)*cj13*sj15*x2461);
IkReal x2467=((1.0)*cj15*sj13*x2462);
IkReal x2468=((1.0)*cj15*sj13*x2461);
IkReal x2469=(sj13*sj15*x2462);
IkReal x2470=(sj13*sj15*x2461);
IkReal x2471=((1.0)*cj13*cj15*x2462);
IkReal x2472=((1.0)*cj13*cj15*x2461);
IkReal x2473=((0.069)*cj10);
IkReal x2474=(cj12*sj11);
IkReal x2475=((0.01)*cj15*x2462);
IkReal x2476=((0.01)*cj15*x2461);
IkReal x2477=((0.37429)*sj15*x2462);
IkReal x2478=((0.37429)*sj15*x2461);
IkReal x2479=((0.069)*sj10);
evalcond[0]=(x2460+(((-1.0)*r11*x2463))+((r10*x2461)));
evalcond[1]=((((-1.0)*r01*x2463))+(((-1.0)*x2464))+((r00*x2461)));
evalcond[2]=((((-1.0)*r01*x2468))+(((-1.0)*r01*x2466))+(((-1.0)*r00*x2465))+(((-1.0)*r00*x2467)));
evalcond[3]=((((-1.0)*r11*x2466))+(((-1.0)*r10*x2465))+(((-1.0)*r11*x2468))+(((-1.0)*r10*x2467)));
evalcond[4]=((((-1.0)*r10*x2471))+((r10*x2469))+((r11*x2470))+(((-1.0)*r11*x2472))+(((-1.0)*sj11*x2464)));
evalcond[5]=(((r00*x2469))+(((-1.0)*r01*x2472))+((r01*x2470))+(((-1.0)*r00*x2471))+(((-1.0)*sj11*x2460)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x2478))+((r00*x2475))+x2473+(((-1.0)*r00*x2477))+(((-1.0)*x2473*x2474))+((r01*x2476)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-1.0)*x2474*x2479))+((r10*x2475))+((r11*x2476))+x2479+(((-1.0)*r10*x2477))+(((-1.0)*r11*x2478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
IkReal x2480=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2480);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2480);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=cj12;
j16eval[3]=((cj10*cj10)+(sj10*sj10));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2481=((1.0)*cj10*cj12);
IkReal x2482=((1.0)*cj12*sj10);
CheckValue<IkReal> x2483 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2482))+(((-1.0)*r00*x2481)))),IkReal(((((-1.0)*r11*x2482))+(((-1.0)*r01*x2481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2483.valid){
continue;
}
CheckValue<IkReal> x2484=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2484.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2483.value)+(((1.5707963267949)*(x2484.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2485=IKsin(j16);
IkReal x2486=IKcos(j16);
IkReal x2487=((1.0)*x2486);
IkReal x2488=((1.0)*sj10);
IkReal x2489=(cj15*sj13*x2485);
IkReal x2490=(cj15*sj13*x2486);
IkReal x2491=((1.0)*cj13*sj15*x2485);
IkReal x2492=((1.0)*cj13*sj15*x2486);
IkReal x2493=((0.069)*cj10);
IkReal x2494=(cj12*sj11);
IkReal x2495=((0.01)*cj15*x2485);
IkReal x2496=((0.01)*cj15*x2486);
IkReal x2497=((0.37429)*sj15*x2485);
IkReal x2498=((0.37429)*sj15*x2486);
IkReal x2499=((0.069)*sj10);
IkReal x2500=((((-1.0)*(1.0)*j15))+j13);
IkReal x2501=IKcos(x2500);
IkReal x2502=(x2485*x2501);
IkReal x2503=(x2486*x2501);
CheckValue<IkReal> x2505=IKPowWithIntegerCheck(cj11,-1);
if(!x2505.valid){
continue;
}
IkReal x2504=(x2501*(x2505.value)*(r22*r22)*(IKsin(x2500)));
evalcond[0]=(((r11*x2485))+(((-1.0)*r10*x2487))+((cj10*cj12)));
evalcond[1]=((((-1.0)*cj12*x2488))+(((-1.0)*r00*x2487))+((r01*x2485)));
evalcond[2]=(((r01*x2490))+((r00*x2489))+(((-1.0)*r01*x2492))+(((-1.0)*r00*x2491)));
evalcond[3]=(((r10*x2489))+(((-1.0)*r11*x2492))+(((-1.0)*r10*x2491))+((r11*x2490)));
evalcond[4]=(x2493+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x2498))+((r00*x2495))+((r01*x2496))+(((-1.0)*x2493*x2494))+(((-1.0)*r00*x2497)));
evalcond[5]=(x2499+(((-1.0)*r10*x2497))+(((-1.0)*(1.0)*py))+((r10*x2495))+((r11*x2496))+(((-1.0)*x2494*x2499))+(((-1.0)*r11*x2498)));
evalcond[6]=(((r11*x2503))+((r10*x2502))+(((-1.0)*x2488*x2504)));
evalcond[7]=(((r00*x2502))+(((-1.0)*cj10*x2504))+((r01*x2503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j15), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x2506=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2506);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2506);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
j16eval[0]=sj13;
j16eval[1]=IKsign(sj13);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2507=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2507);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2507);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x2508=(cj13*r22);
j16eval[0]=x2508;
j16eval[1]=IKsign(x2508);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x2509=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2509);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2509);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
j16eval[0]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2515=IKPowWithIntegerCheck(r22,-1);
if(!x2515.valid){
continue;
}
IkReal x2510=x2515.value;
IkReal x2511=((0.184349034171364)*sj10);
IkReal x2512=((0.184349034171364)*cj10);
IkReal x2513=((6900.0)*sj10);
IkReal x2514=((6900.0)*cj10);
if( IKabs((x2510*((((r01*(((((-1.0)*x2511))+(((-1.0)*sj12*x2512))))))+(((2.67172513291833)*rxp1_2))+((r11*((x2512+(((-1.0)*sj12*x2511)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.67172513291833e-5)*x2510*(((((-1.0)*(100000.0)*rxp0_2))+((r10*((((sj12*x2513))+(((-1.0)*x2514))))))+((r00*((x2513+((sj12*x2514)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2510*((((r01*(((((-1.0)*x2511))+(((-1.0)*sj12*x2512))))))+(((2.67172513291833)*rxp1_2))+((r11*((x2512+(((-1.0)*sj12*x2511))))))))))+IKsqr(((2.67172513291833e-5)*x2510*(((((-1.0)*(100000.0)*rxp0_2))+((r10*((((sj12*x2513))+(((-1.0)*x2514))))))+((r00*((x2513+((sj12*x2514))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((x2510*((((r01*(((((-1.0)*x2511))+(((-1.0)*sj12*x2512))))))+(((2.67172513291833)*rxp1_2))+((r11*((x2512+(((-1.0)*sj12*x2511))))))))), ((2.67172513291833e-5)*x2510*(((((-1.0)*(100000.0)*rxp0_2))+((r10*((((sj12*x2513))+(((-1.0)*x2514))))))+((r00*((x2513+((sj12*x2514))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2516=((0.069)*cj10);
IkReal x2517=((0.069)*sj10);
IkReal x2518=IKsin(j16);
IkReal x2519=((0.37429)*x2518);
IkReal x2520=IKcos(j16);
IkReal x2521=((0.37429)*x2520);
IkReal x2522=(sj13*x2518);
IkReal x2523=((1.0)*r00);
IkReal x2524=(cj13*x2518);
IkReal x2525=((1.0)*cj13*x2520);
IkReal x2526=(sj13*x2520);
IkReal x2527=((1.0)*r10);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x2519))+x2516+(((-1.0)*sj12*x2517))+(((-1.0)*r01*x2521)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x2521))+x2517+((sj12*x2516))+(((-1.0)*r10*x2519)));
evalcond[2]=(((r01*x2522))+(((-1.0)*x2523*x2526))+(((-1.0)*x2523*x2524))+(((-1.0)*r01*x2525)));
evalcond[3]=(((r11*x2522))+(((-1.0)*r11*x2525))+(((-1.0)*x2524*x2527))+(((-1.0)*x2526*x2527)));
evalcond[4]=(((r11*x2524))+((r10*x2522))+(((-1.0)*r10*x2525))+((r11*x2526))+((cj10*sj12)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+((r01*x2524))+(((-1.0)*cj13*x2520*x2523))+((r00*x2522))+((r01*x2526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2528=((100000.0)*cj13*py);
IkReal x2529=((6900.0)*cj13*sj10);
IkReal x2530=((100000.0)*py*sj13);
IkReal x2531=((6900.0)*sj10*sj13);
IkReal x2532=((6900.0)*cj10*cj13*sj12);
IkReal x2533=((6900.0)*cj10*sj12*sj13);
CheckValue<IkReal> x2534=IKPowWithIntegerCheck(IKsign((cj13*r22)),-1);
if(!x2534.valid){
continue;
}
CheckValue<IkReal> x2535 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2533))+(((-1.0)*r00*x2531))+(((-1.0)*r01*x2532))+(((-1.0)*r01*x2529))+((r01*x2528))+((r00*x2530)))),IkReal((((r00*x2529))+((r00*x2532))+(((-1.0)*r01*x2533))+(((-1.0)*r01*x2531))+(((-1.0)*r00*x2528))+((r01*x2530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2535.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2534.value)))+(x2535.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2536=((0.069)*cj10);
IkReal x2537=((0.069)*sj10);
IkReal x2538=IKsin(j16);
IkReal x2539=((0.37429)*x2538);
IkReal x2540=IKcos(j16);
IkReal x2541=((0.37429)*x2540);
IkReal x2542=(sj13*x2538);
IkReal x2543=((1.0)*r00);
IkReal x2544=(cj13*x2538);
IkReal x2545=((1.0)*cj13*x2540);
IkReal x2546=(sj13*x2540);
IkReal x2547=((1.0)*r10);
evalcond[0]=(x2536+(((-1.0)*(1.0)*px))+(((-1.0)*sj12*x2537))+(((-1.0)*r01*x2541))+(((-1.0)*r00*x2539)));
evalcond[1]=(x2537+(((-1.0)*r11*x2541))+((sj12*x2536))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x2539)));
evalcond[2]=((((-1.0)*x2543*x2544))+(((-1.0)*x2543*x2546))+((r01*x2542))+(((-1.0)*r01*x2545)));
evalcond[3]=((((-1.0)*x2544*x2547))+(((-1.0)*x2546*x2547))+(((-1.0)*r11*x2545))+((r11*x2542)));
evalcond[4]=((((-1.0)*r10*x2545))+((r11*x2544))+((r10*x2542))+((cj10*sj12))+((r11*x2546)));
evalcond[5]=(((r01*x2546))+((r00*x2542))+(((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*cj13*x2540*x2543))+((r01*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2548=((6900.0)*cj10*cj13);
IkReal x2549=((6900.0)*cj10*sj13);
IkReal x2550=((100000.0)*cj13*px);
IkReal x2551=((100000.0)*px*sj13);
IkReal x2552=((6900.0)*cj13*sj10*sj12);
IkReal x2553=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal((((r01*x2550))+((r00*x2553))+(((-1.0)*r00*x2549))+(((-1.0)*r01*x2548))+((r00*x2551))+((r01*x2552)))),IkReal(((((-1.0)*r01*x2549))+(((-1.0)*r00*x2550))+((r00*x2548))+(((-1.0)*r00*x2552))+((r01*x2551))+((r01*x2553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x2555.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2554.value)+(((-1.0)*(1.5707963267949)*(x2555.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2556=((0.069)*cj10);
IkReal x2557=((0.069)*sj10);
IkReal x2558=IKsin(j16);
IkReal x2559=((0.37429)*x2558);
IkReal x2560=IKcos(j16);
IkReal x2561=((0.37429)*x2560);
IkReal x2562=(sj13*x2558);
IkReal x2563=((1.0)*r00);
IkReal x2564=(cj13*x2558);
IkReal x2565=((1.0)*cj13*x2560);
IkReal x2566=(sj13*x2560);
IkReal x2567=((1.0)*r10);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x2561))+x2556+(((-1.0)*r00*x2559))+(((-1.0)*sj12*x2557)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x2561))+x2557+(((-1.0)*r10*x2559))+((sj12*x2556)));
evalcond[2]=((((-1.0)*x2563*x2564))+(((-1.0)*x2563*x2566))+((r01*x2562))+(((-1.0)*r01*x2565)));
evalcond[3]=((((-1.0)*r11*x2565))+(((-1.0)*x2566*x2567))+(((-1.0)*x2564*x2567))+((r11*x2562)));
evalcond[4]=(((r10*x2562))+(((-1.0)*r10*x2565))+((cj10*sj12))+((r11*x2566))+((r11*x2564)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+((r01*x2566))+(((-1.0)*cj13*x2560*x2563))+((r01*x2564))+((r00*x2562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j15), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x2568=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2568);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2568);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
j16eval[0]=sj13;
j16eval[1]=IKsign(sj13);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2569=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2569);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2569);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x2570=(cj13*r22);
j16eval[0]=x2570;
j16eval[1]=IKsign(x2570);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x2571=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2571);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2571);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
j16eval[0]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(r22,-1);
if(!x2577.valid){
continue;
}
IkReal x2572=x2577.value;
IkReal x2573=((0.184349034171364)*sj10);
IkReal x2574=((0.184349034171364)*cj10);
IkReal x2575=((6900.0)*sj10);
IkReal x2576=((6900.0)*cj10);
if( IKabs((x2572*((((r01*(((((-1.0)*x2573))+(((-1.0)*sj12*x2574))))))+(((2.67172513291833)*rxp1_2))+((r11*(((((-1.0)*sj12*x2573))+x2574)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.67172513291833e-5)*x2572*(((((-1.0)*(100000.0)*rxp0_2))+((r00*((((sj12*x2576))+x2575))))+((r10*((((sj12*x2575))+(((-1.0)*x2576)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2572*((((r01*(((((-1.0)*x2573))+(((-1.0)*sj12*x2574))))))+(((2.67172513291833)*rxp1_2))+((r11*(((((-1.0)*sj12*x2573))+x2574))))))))+IKsqr(((2.67172513291833e-5)*x2572*(((((-1.0)*(100000.0)*rxp0_2))+((r00*((((sj12*x2576))+x2575))))+((r10*((((sj12*x2575))+(((-1.0)*x2576))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((x2572*((((r01*(((((-1.0)*x2573))+(((-1.0)*sj12*x2574))))))+(((2.67172513291833)*rxp1_2))+((r11*(((((-1.0)*sj12*x2573))+x2574))))))), ((2.67172513291833e-5)*x2572*(((((-1.0)*(100000.0)*rxp0_2))+((r00*((((sj12*x2576))+x2575))))+((r10*((((sj12*x2575))+(((-1.0)*x2576))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2578=((0.069)*cj10);
IkReal x2579=((0.069)*sj10);
IkReal x2580=IKsin(j16);
IkReal x2581=((0.37429)*x2580);
IkReal x2582=IKcos(j16);
IkReal x2583=((0.37429)*x2582);
IkReal x2584=(r00*sj13);
IkReal x2585=((1.0)*cj13*x2580);
IkReal x2586=((1.0)*cj13*x2582);
IkReal x2587=((1.0)*sj13*x2580);
IkReal x2588=(sj13*x2582);
IkReal x2589=(r10*x2580);
IkReal x2590=(cj13*x2582);
evalcond[0]=((((-1.0)*r00*x2581))+(((-1.0)*r01*x2583))+(((-1.0)*(1.0)*px))+(((-1.0)*sj12*x2579))+x2578);
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x2583))+((sj12*x2578))+(((-1.0)*r10*x2581))+x2579);
evalcond[2]=((((-1.0)*r01*x2586))+((x2582*x2584))+(((-1.0)*r00*x2585))+(((-1.0)*r01*x2587)));
evalcond[3]=((((-1.0)*r11*x2586))+(((-1.0)*cj13*x2589))+((r10*x2588))+(((-1.0)*r11*x2587)));
evalcond[4]=(((r10*x2590))+((sj13*x2589))+(((-1.0)*r11*x2585))+((cj10*sj12))+((r11*x2588)));
evalcond[5]=(((r01*x2588))+(((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*r01*x2585))+((x2580*x2584))+((r00*x2590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2591=((100000.0)*cj13*py);
IkReal x2592=((6900.0)*cj13*sj10);
IkReal x2593=((100000.0)*py*sj13);
IkReal x2594=((6900.0)*sj10*sj13);
IkReal x2595=((6900.0)*cj10*cj13*sj12);
IkReal x2596=((6900.0)*cj10*sj12*sj13);
CheckValue<IkReal> x2597=IKPowWithIntegerCheck(IKsign((cj13*r22)),-1);
if(!x2597.valid){
continue;
}
CheckValue<IkReal> x2598 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2593))+(((-1.0)*r01*x2592))+((r01*x2591))+((r00*x2594))+(((-1.0)*r01*x2595))+((r00*x2596)))),IkReal(((((-1.0)*r01*x2593))+((r01*x2596))+((r01*x2594))+((r00*x2595))+((r00*x2592))+(((-1.0)*r00*x2591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2598.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2597.value)))+(x2598.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2599=((0.069)*cj10);
IkReal x2600=((0.069)*sj10);
IkReal x2601=IKsin(j16);
IkReal x2602=((0.37429)*x2601);
IkReal x2603=IKcos(j16);
IkReal x2604=((0.37429)*x2603);
IkReal x2605=(r00*sj13);
IkReal x2606=((1.0)*cj13*x2601);
IkReal x2607=((1.0)*cj13*x2603);
IkReal x2608=((1.0)*sj13*x2601);
IkReal x2609=(sj13*x2603);
IkReal x2610=(r10*x2601);
IkReal x2611=(cj13*x2603);
evalcond[0]=((((-1.0)*(1.0)*px))+x2599+(((-1.0)*r00*x2602))+(((-1.0)*r01*x2604))+(((-1.0)*sj12*x2600)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x2604))+x2600+((sj12*x2599))+(((-1.0)*r10*x2602)));
evalcond[2]=((((-1.0)*r00*x2606))+(((-1.0)*r01*x2607))+((x2603*x2605))+(((-1.0)*r01*x2608)));
evalcond[3]=((((-1.0)*cj13*x2610))+(((-1.0)*r11*x2608))+(((-1.0)*r11*x2607))+((r10*x2609)));
evalcond[4]=(((r10*x2611))+(((-1.0)*r11*x2606))+((sj13*x2610))+((r11*x2609))+((cj10*sj12)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+((x2601*x2605))+(((-1.0)*r01*x2606))+((r00*x2611))+((r01*x2609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2612=((6900.0)*cj10*cj13);
IkReal x2613=((6900.0)*cj10*sj13);
IkReal x2614=((100000.0)*cj13*px);
IkReal x2615=((100000.0)*px*sj13);
IkReal x2616=((6900.0)*cj13*sj10*sj12);
IkReal x2617=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x2618 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2615))+((r00*x2613))+(((-1.0)*r00*x2617))+(((-1.0)*r01*x2612))+((r01*x2616))+((r01*x2614)))),IkReal(((((-1.0)*r00*x2616))+(((-1.0)*r01*x2617))+(((-1.0)*r00*x2614))+((r01*x2613))+(((-1.0)*r01*x2615))+((r00*x2612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2618.valid){
continue;
}
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x2619.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2618.value)+(((1.5707963267949)*(x2619.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2620=((0.069)*cj10);
IkReal x2621=((0.069)*sj10);
IkReal x2622=IKsin(j16);
IkReal x2623=((0.37429)*x2622);
IkReal x2624=IKcos(j16);
IkReal x2625=((0.37429)*x2624);
IkReal x2626=(r00*sj13);
IkReal x2627=((1.0)*cj13*x2622);
IkReal x2628=((1.0)*cj13*x2624);
IkReal x2629=((1.0)*sj13*x2622);
IkReal x2630=(sj13*x2624);
IkReal x2631=(r10*x2622);
IkReal x2632=(cj13*x2624);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*sj12*x2621))+x2620+(((-1.0)*r01*x2625))+(((-1.0)*r00*x2623)));
evalcond[1]=((((-1.0)*(1.0)*py))+x2621+((sj12*x2620))+(((-1.0)*r11*x2625))+(((-1.0)*r10*x2623)));
evalcond[2]=(((x2624*x2626))+(((-1.0)*r01*x2629))+(((-1.0)*r00*x2627))+(((-1.0)*r01*x2628)));
evalcond[3]=((((-1.0)*r11*x2628))+((r10*x2630))+(((-1.0)*cj13*x2631))+(((-1.0)*r11*x2629)));
evalcond[4]=(((r11*x2630))+((sj13*x2631))+((cj10*sj12))+((r10*x2632))+(((-1.0)*r11*x2627)));
evalcond[5]=(((x2622*x2626))+(((-1.0)*(1.0)*sj10*sj12))+((r01*x2630))+((r00*x2632))+(((-1.0)*r01*x2627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j15), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x2633=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2633);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2633);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x2634=((6900.0)*cj10);
IkReal x2635=((6900.0)*sj10);
IkReal x2636=((6900.0)*cj10*sj12);
IkReal x2637=((6900.0)*sj10*sj12);
j16eval[0]=r22;
j16eval[1]=((IKabs((((r11*x2637))+((r01*x2635))+((r01*x2636))+(((-1.0)*(100000.0)*rxp1_2))+(((-1.0)*r11*x2634)))))+(IKabs(((((-1.0)*r00*x2636))+((r10*x2634))+(((-1.0)*r00*x2635))+(((-1.0)*r10*x2637))+(((100000.0)*rxp0_2))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2638=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2638);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2638);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
j16eval[0]=sj13;
j16eval[1]=IKsign(sj13);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2639=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2639);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2639);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x2640=(cj13*r22);
j16eval[0]=x2640;
j16eval[1]=IKsign(x2640);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2641=((6900.0)*cj10*cj13);
IkReal x2642=((6900.0)*cj10*sj13);
IkReal x2643=((100000.0)*cj13*px);
IkReal x2644=((100000.0)*px*sj13);
IkReal x2645=((6900.0)*cj13*sj10*sj12);
IkReal x2646=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x2647=IKPowWithIntegerCheck(IKsign((cj13*r22)),-1);
if(!x2647.valid){
continue;
}
CheckValue<IkReal> x2648 = IKatan2WithCheck(IkReal((((r10*x2642))+(((-1.0)*r10*x2644))+(((-1.0)*r10*x2646))+(((-1.0)*r11*x2641))+((r11*x2645))+((r11*x2643)))),IkReal((((r11*x2642))+(((-1.0)*r11*x2644))+(((-1.0)*r10*x2645))+(((-1.0)*r11*x2646))+(((-1.0)*r10*x2643))+((r10*x2641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2648.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2647.value)))+(x2648.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2649=((0.069)*cj10);
IkReal x2650=((0.069)*sj10);
IkReal x2651=IKsin(j16);
IkReal x2652=((0.37429)*x2651);
IkReal x2653=IKcos(j16);
IkReal x2654=((0.37429)*x2653);
IkReal x2655=(cj13*x2651);
IkReal x2656=(cj13*x2653);
IkReal x2657=(sj13*x2651);
IkReal x2658=((1.0)*r00);
IkReal x2659=((1.0)*sj13*x2653);
IkReal x2660=((1.0)*cj13*x2653);
evalcond[0]=((((-1.0)*(1.0)*px))+((r00*x2652))+x2649+(((-1.0)*sj12*x2650))+((r01*x2654)));
evalcond[1]=((((-1.0)*(1.0)*py))+((sj12*x2649))+((r10*x2652))+x2650+((r11*x2654)));
evalcond[2]=(((r00*x2655))+(((-1.0)*sj13*x2653*x2658))+((r01*x2656))+((r01*x2657)));
evalcond[3]=(((r11*x2656))+((r11*x2657))+((r10*x2655))+(((-1.0)*r10*x2659)));
evalcond[4]=((((-1.0)*r10*x2660))+(((-1.0)*r10*x2657))+((r11*x2655))+(((-1.0)*r11*x2659))+((cj10*sj12)));
evalcond[5]=((((-1.0)*x2657*x2658))+(((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*r01*x2659))+((r01*x2655))+(((-1.0)*r00*x2660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2661=((6900.0)*cj10*cj13);
IkReal x2662=((6900.0)*cj10*sj13);
IkReal x2663=((100000.0)*cj13*px);
IkReal x2664=((100000.0)*px*sj13);
IkReal x2665=((6900.0)*cj13*sj10*sj12);
IkReal x2666=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x2667 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2666))+(((-1.0)*r00*x2664))+(((-1.0)*r01*x2661))+((r01*x2663))+((r00*x2662))+((r01*x2665)))),IkReal(((((-1.0)*r01*x2664))+(((-1.0)*r01*x2666))+(((-1.0)*r00*x2663))+((r01*x2662))+((r00*x2661))+(((-1.0)*r00*x2665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2667.valid){
continue;
}
CheckValue<IkReal> x2668=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x2668.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2667.value)+(((-1.0)*(1.5707963267949)*(x2668.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2669=((0.069)*cj10);
IkReal x2670=((0.069)*sj10);
IkReal x2671=IKsin(j16);
IkReal x2672=((0.37429)*x2671);
IkReal x2673=IKcos(j16);
IkReal x2674=((0.37429)*x2673);
IkReal x2675=(cj13*x2671);
IkReal x2676=(cj13*x2673);
IkReal x2677=(sj13*x2671);
IkReal x2678=((1.0)*r00);
IkReal x2679=((1.0)*sj13*x2673);
IkReal x2680=((1.0)*cj13*x2673);
evalcond[0]=(((r00*x2672))+(((-1.0)*(1.0)*px))+(((-1.0)*sj12*x2670))+x2669+((r01*x2674)));
evalcond[1]=((((-1.0)*(1.0)*py))+((sj12*x2669))+x2670+((r10*x2672))+((r11*x2674)));
evalcond[2]=((((-1.0)*sj13*x2673*x2678))+((r01*x2676))+((r00*x2675))+((r01*x2677)));
evalcond[3]=((((-1.0)*r10*x2679))+((r10*x2675))+((r11*x2677))+((r11*x2676)));
evalcond[4]=((((-1.0)*r10*x2677))+(((-1.0)*r10*x2680))+((cj10*sj12))+((r11*x2675))+(((-1.0)*r11*x2679)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*x2677*x2678))+(((-1.0)*r01*x2679))+(((-1.0)*r00*x2680))+((r01*x2675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2681=((6900.0)*sj10);
IkReal x2682=((6900.0)*cj10);
IkReal x2683=(sj12*x2682);
IkReal x2684=(sj12*x2681);
CheckValue<IkReal> x2685=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2685.valid){
continue;
}
CheckValue<IkReal> x2686 = IKatan2WithCheck(IkReal((((r01*((x2683+x2681))))+((r11*(((((-1.0)*x2682))+x2684))))+(((-1.0)*(100000.0)*rxp1_2)))),IkReal((((r00*(((((-1.0)*x2681))+(((-1.0)*x2683))))))+((r10*((x2682+(((-1.0)*x2684))))))+(((100000.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2686.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2685.value)))+(x2686.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2687=((0.069)*cj10);
IkReal x2688=((0.069)*sj10);
IkReal x2689=IKsin(j16);
IkReal x2690=((0.37429)*x2689);
IkReal x2691=IKcos(j16);
IkReal x2692=((0.37429)*x2691);
IkReal x2693=(cj13*x2689);
IkReal x2694=(cj13*x2691);
IkReal x2695=(sj13*x2689);
IkReal x2696=((1.0)*r00);
IkReal x2697=((1.0)*sj13*x2691);
IkReal x2698=((1.0)*cj13*x2691);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*sj12*x2688))+x2687+((r00*x2690))+((r01*x2692)));
evalcond[1]=((((-1.0)*(1.0)*py))+x2688+((r11*x2692))+((r10*x2690))+((sj12*x2687)));
evalcond[2]=(((r00*x2693))+(((-1.0)*sj13*x2691*x2696))+((r01*x2695))+((r01*x2694)));
evalcond[3]=(((r11*x2694))+((r10*x2693))+(((-1.0)*r10*x2697))+((r11*x2695)));
evalcond[4]=(((r11*x2693))+((cj10*sj12))+(((-1.0)*r11*x2697))+(((-1.0)*r10*x2695))+(((-1.0)*r10*x2698)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*x2695*x2696))+(((-1.0)*r01*x2697))+((r01*x2693))+(((-1.0)*r00*x2698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j15), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x2699=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2699);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2699);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x2700=((6900.0)*cj10);
IkReal x2701=((6900.0)*sj10);
IkReal x2702=((6900.0)*cj10*sj12);
IkReal x2703=((6900.0)*sj10*sj12);
j16eval[0]=r22;
j16eval[1]=((IKabs((((r01*x2701))+((r01*x2702))+(((-1.0)*r11*x2700))+((r11*x2703))+(((-1.0)*(100000.0)*rxp1_2)))))+(IKabs(((((-1.0)*r10*x2703))+(((-1.0)*r00*x2701))+(((-1.0)*r00*x2702))+(((100000.0)*rxp0_2))+((r10*x2700))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2704=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2704);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2704);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
j16eval[0]=sj13;
j16eval[1]=IKsign(sj13);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x2705=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2705);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2705);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x2706=(cj13*r22);
j16eval[0]=x2706;
j16eval[1]=IKsign(x2706);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2707=((6900.0)*cj10*cj13);
IkReal x2708=((6900.0)*cj10*sj13);
IkReal x2709=((100000.0)*cj13*px);
IkReal x2710=((100000.0)*px*sj13);
IkReal x2711=((6900.0)*cj13*sj10*sj12);
IkReal x2712=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x2713 = IKatan2WithCheck(IkReal((((r10*x2710))+((r11*x2711))+((r10*x2712))+(((-1.0)*r11*x2707))+(((-1.0)*r10*x2708))+((r11*x2709)))),IkReal(((((-1.0)*r10*x2709))+(((-1.0)*r10*x2711))+((r11*x2712))+((r11*x2710))+(((-1.0)*r11*x2708))+((r10*x2707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2713.valid){
continue;
}
CheckValue<IkReal> x2714=IKPowWithIntegerCheck(IKsign((cj13*r22)),-1);
if(!x2714.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2713.value)+(((1.5707963267949)*(x2714.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2715=((0.069)*cj10);
IkReal x2716=((0.069)*sj10);
IkReal x2717=IKsin(j16);
IkReal x2718=((0.37429)*x2717);
IkReal x2719=IKcos(j16);
IkReal x2720=((0.37429)*x2719);
IkReal x2721=(cj13*r00);
IkReal x2722=(cj13*x2719);
IkReal x2723=(sj13*x2719);
IkReal x2724=((1.0)*sj13*x2717);
IkReal x2725=((1.0)*cj13*x2717);
IkReal x2726=((1.0)*sj13*x2719);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x2720))+((r00*x2718))+(((-1.0)*sj12*x2716))+x2715);
evalcond[1]=(((sj12*x2715))+(((-1.0)*(1.0)*py))+((r11*x2720))+((r10*x2718))+x2716);
evalcond[2]=(((r01*x2722))+((r00*x2723))+((x2717*x2721))+(((-1.0)*r01*x2724)));
evalcond[3]=(((cj13*r10*x2717))+(((-1.0)*r11*x2724))+((r11*x2722))+((r10*x2723)));
evalcond[4]=(((r10*x2722))+((cj10*sj12))+(((-1.0)*r10*x2724))+(((-1.0)*r11*x2725))+(((-1.0)*r11*x2726)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*r00*x2724))+(((-1.0)*r01*x2725))+(((-1.0)*r01*x2726))+((x2719*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2727=((6900.0)*cj10*cj13);
IkReal x2728=((6900.0)*cj10*sj13);
IkReal x2729=((100000.0)*cj13*px);
IkReal x2730=((100000.0)*px*sj13);
IkReal x2731=((6900.0)*cj13*sj10*sj12);
IkReal x2732=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x2733=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x2733.valid){
continue;
}
CheckValue<IkReal> x2734 = IKatan2WithCheck(IkReal((((r01*x2729))+((r00*x2732))+((r00*x2730))+(((-1.0)*r01*x2727))+((r01*x2731))+(((-1.0)*r00*x2728)))),IkReal((((r00*x2727))+((r01*x2730))+(((-1.0)*r01*x2728))+(((-1.0)*r00*x2729))+(((-1.0)*r00*x2731))+((r01*x2732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2734.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2733.value)))+(x2734.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2735=((0.069)*cj10);
IkReal x2736=((0.069)*sj10);
IkReal x2737=IKsin(j16);
IkReal x2738=((0.37429)*x2737);
IkReal x2739=IKcos(j16);
IkReal x2740=((0.37429)*x2739);
IkReal x2741=(cj13*r00);
IkReal x2742=(cj13*x2739);
IkReal x2743=(sj13*x2739);
IkReal x2744=((1.0)*sj13*x2737);
IkReal x2745=((1.0)*cj13*x2737);
IkReal x2746=((1.0)*sj13*x2739);
evalcond[0]=((((-1.0)*(1.0)*px))+((r00*x2738))+x2735+(((-1.0)*sj12*x2736))+((r01*x2740)));
evalcond[1]=(x2736+(((-1.0)*(1.0)*py))+((r11*x2740))+((r10*x2738))+((sj12*x2735)));
evalcond[2]=(((r01*x2742))+((x2737*x2741))+((r00*x2743))+(((-1.0)*r01*x2744)));
evalcond[3]=(((r11*x2742))+((cj13*r10*x2737))+((r10*x2743))+(((-1.0)*r11*x2744)));
evalcond[4]=((((-1.0)*r11*x2745))+((cj10*sj12))+((r10*x2742))+(((-1.0)*r10*x2744))+(((-1.0)*r11*x2746)));
evalcond[5]=(((x2739*x2741))+(((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*r01*x2745))+(((-1.0)*r00*x2744))+(((-1.0)*r01*x2746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2747=((6900.0)*sj10);
IkReal x2748=((6900.0)*cj10);
IkReal x2749=(sj12*x2748);
IkReal x2750=(sj12*x2747);
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal((((r01*((x2749+x2747))))+((r11*((x2750+(((-1.0)*x2748))))))+(((-1.0)*(100000.0)*rxp1_2)))),IkReal((((r00*(((((-1.0)*x2747))+(((-1.0)*x2749))))))+(((100000.0)*rxp0_2))+((r10*((x2748+(((-1.0)*x2750)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
CheckValue<IkReal> x2752=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2752.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2751.value)+(((1.5707963267949)*(x2752.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2753=((0.069)*cj10);
IkReal x2754=((0.069)*sj10);
IkReal x2755=IKsin(j16);
IkReal x2756=((0.37429)*x2755);
IkReal x2757=IKcos(j16);
IkReal x2758=((0.37429)*x2757);
IkReal x2759=(cj13*r00);
IkReal x2760=(cj13*x2757);
IkReal x2761=(sj13*x2757);
IkReal x2762=((1.0)*sj13*x2755);
IkReal x2763=((1.0)*cj13*x2755);
IkReal x2764=((1.0)*sj13*x2757);
evalcond[0]=((((-1.0)*(1.0)*px))+x2753+(((-1.0)*sj12*x2754))+((r01*x2758))+((r00*x2756)));
evalcond[1]=((((-1.0)*(1.0)*py))+((sj12*x2753))+((r11*x2758))+x2754+((r10*x2756)));
evalcond[2]=((((-1.0)*r01*x2762))+((x2755*x2759))+((r01*x2760))+((r00*x2761)));
evalcond[3]=(((r10*x2761))+(((-1.0)*r11*x2762))+((cj13*r10*x2755))+((r11*x2760)));
evalcond[4]=(((r10*x2760))+(((-1.0)*r11*x2763))+((cj10*sj12))+(((-1.0)*r11*x2764))+(((-1.0)*r10*x2762)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+((x2757*x2759))+(((-1.0)*r00*x2762))+(((-1.0)*r01*x2764))+(((-1.0)*r01*x2763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2765=(cj14*sj13*sj14);
IkReal x2766=(cj10*cj11*cj14);
IkReal x2767=(cj10*cj11*cj15*sj14);
IkReal x2768=((1.0)*r01);
IkReal x2769=(cj10*cj12*cj13*sj15);
IkReal x2770=((1.0)*r00);
IkReal x2771=(cj10*cj12*sj13*sj14);
IkReal x2772=(cj10*cj12*cj14*cj15*sj13);
IkReal x2773=(cj13*sj10*sj11*sj12*sj15);
IkReal x2774=(sj10*sj11*sj12*sj13*sj14);
IkReal x2775=(cj14*cj15*sj10*sj11*sj12*sj13);
CheckValue<IkReal> x2776=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*x2765))+((x2765*(cj15*cj15)))+((((cj15*sj14))*((cj13*sj15)))))))),-1);
if(!x2776.valid){
continue;
}
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal(((((-1.0)*x2768*x2772))+(((-1.0)*x2768*x2769))+(((-1.0)*x2768*x2775))+(((-1.0)*x2768*x2773))+(((-1.0)*x2770*x2774))+(((-1.0)*x2770*x2771))+(((-1.0)*r11*x2767))+((r10*x2766)))),IkReal(((((-1.0)*x2768*x2771))+(((-1.0)*x2768*x2774))+((r00*x2775))+((r11*x2766))+((r10*x2767))+((r00*x2772))+((r00*x2769))+((r00*x2773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2776.value)))+(x2777.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2778=(cj10*cj12);
IkReal x2779=IKcos(j16);
IkReal x2780=(cj14*x2779);
IkReal x2781=IKsin(j16);
IkReal x2782=((1.0)*cj14*x2781);
IkReal x2783=((1.0)*cj15*sj14*x2781);
IkReal x2784=((1.0)*cj15*sj14*x2779);
IkReal x2785=((1.0)*sj10);
IkReal x2786=(cj12*x2785);
IkReal x2787=(cj10*sj12);
IkReal x2788=((0.069)*cj10);
IkReal x2789=(cj10*cj11);
IkReal x2790=((0.069)*sj10);
IkReal x2791=(cj12*sj11);
IkReal x2792=((0.01)*cj15*x2781);
IkReal x2793=((0.01)*cj15*x2779);
IkReal x2794=((0.37429)*sj15*x2781);
IkReal x2795=((0.37429)*sj15*x2779);
IkReal x2796=(cj11*sj10);
IkReal x2797=(sj13*sj14*x2781);
IkReal x2798=((1.0)*cj13*r00);
IkReal x2799=(sj15*x2781);
IkReal x2800=((1.0)*cj13*sj15*x2779);
IkReal x2801=((1.0)*sj13*sj14*x2779);
IkReal x2802=((1.0)*cj14*cj15*sj13*x2781);
IkReal x2803=((1.0)*cj14*cj15*sj13*x2779);
IkReal x2804=((1.0)*cj13*r10);
IkReal x2805=(cj13*sj14*x2781);
IkReal x2806=(sj13*sj15*x2781);
IkReal x2807=(sj13*sj15*x2779);
IkReal x2808=(sj14*x2779);
IkReal x2809=((1.0)*cj13*cj14*cj15*x2781);
IkReal x2810=((1.0)*cj13*cj14*cj15*x2779);
evalcond[0]=((((-1.0)*r11*x2782))+(((-1.0)*r10*x2783))+((r10*x2780))+(((-1.0)*r11*x2784))+x2778+((sj10*sj11*sj12)));
evalcond[1]=((((-1.0)*r01*x2784))+(((-1.0)*x2786))+((sj11*x2787))+(((-1.0)*r00*x2783))+((r00*x2780))+(((-1.0)*r01*x2782)));
evalcond[2]=((((-1.0)*(1.0)*px))+((r00*x2792))+(((-1.0)*r01*x2795))+x2788+(((-1.0)*r00*x2794))+((r01*x2793))+(((-1.0)*x2788*x2791))+(((-1.0)*sj12*x2790))+(((0.36442)*x2789)));
evalcond[3]=((((0.36442)*x2796))+x2790+(((-1.0)*(1.0)*py))+(((-1.0)*x2790*x2791))+((r11*x2793))+(((-1.0)*r10*x2794))+((r10*x2792))+(((-1.0)*r11*x2795))+((sj12*x2788)));
evalcond[4]=(((r01*x2797))+(((-1.0)*r00*x2802))+(((-1.0)*x2789))+(((-1.0)*x2798*x2799))+(((-1.0)*r01*x2800))+(((-1.0)*r01*x2803))+(((-1.0)*r00*x2801)));
evalcond[5]=((((-1.0)*r10*x2802))+(((-1.0)*x2799*x2804))+(((-1.0)*r10*x2801))+(((-1.0)*x2796))+(((-1.0)*r11*x2803))+(((-1.0)*r11*x2800))+((r11*x2797)));
evalcond[6]=((((-1.0)*r11*x2810))+((r10*x2806))+(((-1.0)*x2804*x2808))+x2787+(((-1.0)*r10*x2809))+(((-1.0)*sj11*x2786))+((r11*x2807))+((r11*x2805)));
evalcond[7]=(((r01*x2807))+(((-1.0)*sj12*x2785))+(((-1.0)*r01*x2810))+(((-1.0)*x2798*x2808))+((r00*x2806))+(((-1.0)*sj11*x2778))+(((-1.0)*r00*x2809))+((r01*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2811=((1.0)*cj13*sj15);
IkReal x2812=(cj10*cj11*cj14);
IkReal x2813=(cj13*sj15);
IkReal x2814=(r00*sj13*sj14);
IkReal x2815=(cj14*cj15);
IkReal x2816=(cj12*r01*sj10*sj13);
IkReal x2817=(cj10*r01*sj11*sj12);
IkReal x2818=((1.0)*cj10*sj11*sj12);
IkReal x2819=((1.0)*cj14*cj15*sj13);
IkReal x2820=(cj12*r00*sj10);
CheckValue<IkReal> x2821 = IKatan2WithCheck(IkReal((((cj12*sj10*x2814))+(((-1.0)*x2814*x2818))+(((-1.0)*x2817*x2819))+((r00*x2812))+((x2815*x2816))+(((-1.0)*cj10*cj11*cj15*r01*sj14))+(((-1.0)*x2811*x2817))+((cj12*r01*sj10*x2813)))),IkReal((((((cj15*r00*sj14))*((cj10*cj11))))+((cj10*r00*sj11*sj12*sj13*x2815))+((r01*x2812))+((sj14*x2816))+(((-1.0)*x2819*x2820))+(((-1.0)*r01*sj13*sj14*x2818))+((cj10*r00*sj11*sj12*x2813))+(((-1.0)*x2811*x2820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2821.valid){
continue;
}
CheckValue<IkReal> x2822=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*sj13))+(((-1.0)*cj14*x2811)))),-1);
if(!x2822.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2821.value)+(((1.5707963267949)*(x2822.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2823=(cj10*cj12);
IkReal x2824=IKcos(j16);
IkReal x2825=(cj14*x2824);
IkReal x2826=IKsin(j16);
IkReal x2827=((1.0)*cj14*x2826);
IkReal x2828=((1.0)*cj15*sj14*x2826);
IkReal x2829=((1.0)*cj15*sj14*x2824);
IkReal x2830=((1.0)*sj10);
IkReal x2831=(cj12*x2830);
IkReal x2832=(cj10*sj12);
IkReal x2833=((0.069)*cj10);
IkReal x2834=(cj10*cj11);
IkReal x2835=((0.069)*sj10);
IkReal x2836=(cj12*sj11);
IkReal x2837=((0.01)*cj15*x2826);
IkReal x2838=((0.01)*cj15*x2824);
IkReal x2839=((0.37429)*sj15*x2826);
IkReal x2840=((0.37429)*sj15*x2824);
IkReal x2841=(cj11*sj10);
IkReal x2842=(sj13*sj14*x2826);
IkReal x2843=((1.0)*cj13*r00);
IkReal x2844=(sj15*x2826);
IkReal x2845=((1.0)*cj13*sj15*x2824);
IkReal x2846=((1.0)*sj13*sj14*x2824);
IkReal x2847=((1.0)*cj14*cj15*sj13*x2826);
IkReal x2848=((1.0)*cj14*cj15*sj13*x2824);
IkReal x2849=((1.0)*cj13*r10);
IkReal x2850=(cj13*sj14*x2826);
IkReal x2851=(sj13*sj15*x2826);
IkReal x2852=(sj13*sj15*x2824);
IkReal x2853=(sj14*x2824);
IkReal x2854=((1.0)*cj13*cj14*cj15*x2826);
IkReal x2855=((1.0)*cj13*cj14*cj15*x2824);
evalcond[0]=(((r10*x2825))+(((-1.0)*r10*x2828))+(((-1.0)*r11*x2827))+x2823+(((-1.0)*r11*x2829))+((sj10*sj11*sj12)));
evalcond[1]=(((r00*x2825))+((sj11*x2832))+(((-1.0)*r01*x2827))+(((-1.0)*r00*x2828))+(((-1.0)*r01*x2829))+(((-1.0)*x2831)));
evalcond[2]=((((-1.0)*(1.0)*px))+((r01*x2838))+(((-1.0)*r01*x2840))+(((-1.0)*r00*x2839))+(((0.36442)*x2834))+((r00*x2837))+(((-1.0)*sj12*x2835))+(((-1.0)*x2833*x2836))+x2833);
evalcond[3]=((((-1.0)*r11*x2840))+(((-1.0)*(1.0)*py))+((r11*x2838))+(((0.36442)*x2841))+((r10*x2837))+(((-1.0)*x2835*x2836))+(((-1.0)*r10*x2839))+x2835+((sj12*x2833)));
evalcond[4]=(((r01*x2842))+(((-1.0)*x2843*x2844))+(((-1.0)*r01*x2845))+(((-1.0)*r01*x2848))+(((-1.0)*r00*x2846))+(((-1.0)*r00*x2847))+(((-1.0)*x2834)));
evalcond[5]=((((-1.0)*r10*x2846))+((r11*x2842))+(((-1.0)*x2841))+(((-1.0)*r11*x2845))+(((-1.0)*r11*x2848))+(((-1.0)*r10*x2847))+(((-1.0)*x2844*x2849)));
evalcond[6]=((((-1.0)*r10*x2854))+(((-1.0)*sj11*x2831))+(((-1.0)*x2849*x2853))+((r11*x2850))+((r11*x2852))+(((-1.0)*r11*x2855))+((r10*x2851))+x2832);
evalcond[7]=((((-1.0)*r01*x2855))+((r00*x2851))+(((-1.0)*sj12*x2830))+(((-1.0)*x2843*x2853))+((r01*x2852))+((r01*x2850))+(((-1.0)*r00*x2854))+(((-1.0)*sj11*x2823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2856=cj14*cj14;
IkReal x2857=cj15*cj15;
IkReal x2858=(cj10*cj12*cj14);
IkReal x2859=(cj12*cj14*sj10);
IkReal x2860=(cj14*sj10*sj11*sj12);
IkReal x2861=((1.0)*r01);
IkReal x2862=(cj10*cj12*cj15*sj14);
IkReal x2863=((1.0)*cj10*cj14*sj11*sj12);
IkReal x2864=(cj12*cj15*sj10*sj14);
IkReal x2865=(cj10*cj15*sj11*sj12*sj14);
IkReal x2866=(cj15*sj10*sj11*sj12*sj14);
CheckValue<IkReal> x2867 = IKatan2WithCheck(IkReal(((((-1.0)*x2861*x2866))+(((-1.0)*r10*x2863))+((r00*x2858))+((r00*x2860))+((r10*x2859))+((r11*x2865))+(((-1.0)*r11*x2864))+(((-1.0)*x2861*x2862)))),IkReal((((r00*x2862))+((r01*x2858))+((r00*x2866))+(((-1.0)*r11*x2863))+((r10*x2864))+((r01*x2860))+(((-1.0)*r10*x2865))+((r11*x2859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2867.valid){
continue;
}
CheckValue<IkReal> x2868=IKPowWithIntegerCheck(IKsign((r22*((x2857+x2856+(((-1.0)*x2856*x2857)))))),-1);
if(!x2868.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2867.value)+(((1.5707963267949)*(x2868.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x2869=(cj10*cj12);
IkReal x2870=IKcos(j16);
IkReal x2871=(cj14*x2870);
IkReal x2872=IKsin(j16);
IkReal x2873=((1.0)*cj14*x2872);
IkReal x2874=((1.0)*cj15*sj14*x2872);
IkReal x2875=((1.0)*cj15*sj14*x2870);
IkReal x2876=((1.0)*sj10);
IkReal x2877=(cj12*x2876);
IkReal x2878=(cj10*sj12);
IkReal x2879=((0.069)*cj10);
IkReal x2880=(cj10*cj11);
IkReal x2881=((0.069)*sj10);
IkReal x2882=(cj12*sj11);
IkReal x2883=((0.01)*cj15*x2872);
IkReal x2884=((0.01)*cj15*x2870);
IkReal x2885=((0.37429)*sj15*x2872);
IkReal x2886=((0.37429)*sj15*x2870);
IkReal x2887=(cj11*sj10);
IkReal x2888=(sj13*sj14*x2872);
IkReal x2889=((1.0)*cj13*r00);
IkReal x2890=(sj15*x2872);
IkReal x2891=((1.0)*cj13*sj15*x2870);
IkReal x2892=((1.0)*sj13*sj14*x2870);
IkReal x2893=((1.0)*cj14*cj15*sj13*x2872);
IkReal x2894=((1.0)*cj14*cj15*sj13*x2870);
IkReal x2895=((1.0)*cj13*r10);
IkReal x2896=(cj13*sj14*x2872);
IkReal x2897=(sj13*sj15*x2872);
IkReal x2898=(sj13*sj15*x2870);
IkReal x2899=(sj14*x2870);
IkReal x2900=((1.0)*cj13*cj14*cj15*x2872);
IkReal x2901=((1.0)*cj13*cj14*cj15*x2870);
evalcond[0]=(x2869+((r10*x2871))+(((-1.0)*r10*x2874))+(((-1.0)*r11*x2873))+(((-1.0)*r11*x2875))+((sj10*sj11*sj12)));
evalcond[1]=((((-1.0)*r01*x2875))+(((-1.0)*x2877))+(((-1.0)*r00*x2874))+(((-1.0)*r01*x2873))+((sj11*x2878))+((r00*x2871)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*x2879*x2882))+((r01*x2884))+x2879+(((-1.0)*sj12*x2881))+((r00*x2883))+(((0.36442)*x2880))+(((-1.0)*r01*x2886))+(((-1.0)*r00*x2885)));
evalcond[3]=(((sj12*x2879))+(((-1.0)*(1.0)*py))+((r11*x2884))+x2881+(((-1.0)*r11*x2886))+(((-1.0)*x2881*x2882))+(((-1.0)*r10*x2885))+(((0.36442)*x2887))+((r10*x2883)));
evalcond[4]=((((-1.0)*x2880))+(((-1.0)*r01*x2894))+(((-1.0)*r01*x2891))+(((-1.0)*x2889*x2890))+((r01*x2888))+(((-1.0)*r00*x2893))+(((-1.0)*r00*x2892)));
evalcond[5]=(((r11*x2888))+(((-1.0)*r11*x2891))+(((-1.0)*r10*x2893))+(((-1.0)*x2887))+(((-1.0)*r10*x2892))+(((-1.0)*r11*x2894))+(((-1.0)*x2890*x2895)));
evalcond[6]=((((-1.0)*r10*x2900))+(((-1.0)*r11*x2901))+x2878+(((-1.0)*sj11*x2877))+((r10*x2897))+(((-1.0)*x2895*x2899))+((r11*x2898))+((r11*x2896)));
evalcond[7]=((((-1.0)*sj11*x2869))+(((-1.0)*sj12*x2876))+(((-1.0)*r01*x2901))+((r00*x2897))+((r01*x2896))+(((-1.0)*r00*x2900))+((r01*x2898))+(((-1.0)*x2889*x2899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2903=IKPowWithIntegerCheck(r22,-1);
if(!x2903.valid){
continue;
}
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(sj15,-1);
if(!x2904.valid){
continue;
}
IkReal x2902=((x2903.value)*(x2904.value));
CheckValue<IkReal> x2905=IKPowWithIntegerCheck(sj13,-1);
if(!x2905.valid){
continue;
}
if( IKabs((cj11*sj12*x2902)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2902*(x2905.value)*((((cj13*cj15*r22))+sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj11*sj12*x2902))+IKsqr((x2902*(x2905.value)*((((cj13*cj15*r22))+sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((cj11*sj12*x2902), (x2902*(x2905.value)*((((cj13*cj15*r22))+sj11))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x2906=((1.0)*r22*sj15);
IkReal x2907=(cj15*r22);
IkReal x2908=((1.0)*sj13);
IkReal x2909=IKcos(j14);
evalcond[0]=(((cj11*sj12))+(((-1.0)*x2906*(IKsin(j14)))));
evalcond[1]=(((cj13*x2907))+sj11+(((-1.0)*r22*sj15*x2908*x2909)));
evalcond[2]=((((-1.0)*x2907*x2908))+(((-1.0)*(1.0)*cj11*cj12))+(((-1.0)*cj13*x2906*x2909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x2910=(cj14*r10);
IkReal x2911=(cj15*sj14);
IkReal x2912=(r11*x2911);
IkReal x2913=((((-1.0)*x2912))+x2910);
IkReal x2914=(cj12+x2913);
IkReal x2915=((2.0)*cj14);
IkReal x2916=((2.0)*cj15*sj14);
IkReal x2917=((((-1.0)*r11*x2915))+(((-1.0)*r10*x2916)));
IkReal x2918=((((-1.0)*x2910))+x2912);
IkReal x2919=(cj12+x2918);
IkReal x2920=(sj11*sj12);
IkReal x2921=(cj14*r00);
IkReal x2922=(r01*x2911);
IkReal x2923=((((-1.0)*x2922))+x2921);
IkReal x2924=(x2920+x2923);
IkReal x2925=((((-1.0)*r00*x2916))+(((-1.0)*r01*x2915)));
IkReal x2926=(x2922+(((-1.0)*x2921)));
IkReal x2927=(x2920+x2926);
IkReal x2928=((-1.0)*(((1.0)*cj12)));
IkReal x2929=(x2913+x2928);
IkReal x2930=(x2918+x2928);
IkReal x2931=((-1.0)*x2920);
IkReal x2932=(x2931+x2923);
IkReal x2933=(x2931+x2926);
IkReal gconst0=x2914;
IkReal gconst1=x2917;
IkReal gconst2=x2919;
IkReal gconst3=x2924;
IkReal gconst4=x2925;
IkReal gconst5=x2927;
IkReal gconst6=x2914;
IkReal gconst7=x2917;
IkReal gconst8=x2919;
IkReal gconst9=x2924;
IkReal gconst10=x2925;
IkReal gconst11=x2927;
IkReal gconst12=x2929;
IkReal gconst13=x2917;
IkReal gconst14=x2930;
IkReal gconst15=x2932;
IkReal gconst16=x2925;
IkReal gconst17=x2933;
IkReal gconst18=x2929;
IkReal gconst19=x2917;
IkReal gconst20=x2930;
IkReal gconst21=x2932;
IkReal gconst22=x2925;
IkReal gconst23=x2933;
IkReal x2934=(gconst12*gconst17);
IkReal x2935=(gconst20*gconst21);
IkReal x2936=(gconst13*gconst22);
IkReal x2937=(gconst17*gconst18);
IkReal x2938=(gconst14*gconst23);
IkReal x2939=(gconst15*gconst18);
IkReal x2940=(gconst14*gconst16*gconst19);
IkReal x2941=((1.0)*gconst12*gconst23);
IkReal x2942=(gconst19*gconst21);
IkReal x2943=((1.0)*gconst13*gconst17);
IkReal x2944=((1.0)*gconst14*gconst15);
IkReal x2945=(gconst14*gconst22);
IkReal x2946=((1.0)*gconst16*gconst18);
IkReal x2947=((2.0)*cj12*gconst12);
IkReal x2948=((2.0)*cj12*gconst20);
IkReal x2949=(gconst18*gconst23);
IkReal x2950=((2.0)*cj12*gconst13*gconst19);
IkReal x2951=((2.0)*cj12*gconst18);
IkReal x2952=((2.0)*cj12*gconst14);
IkReal x2953=((2.0)*cj12);
IkReal x2954=((2.0)*gconst12*gconst17*sj11*sj12);
IkReal x2955=((2.0)*sj11*sj12);
IkReal x2956=(gconst13*gconst17*gconst22);
IkReal x2957=(gconst14*gconst21);
IkReal x2958=((2.0)*gconst15*sj11*sj12);
IkReal x2959=((2.0)*gconst16*sj11*sj12);
IkReal x2960=((2.0)*gconst23*sj11*sj12);
IkReal x2961=(gconst0*gconst17);
IkReal x2962=(gconst1*gconst22);
IkReal x2963=(gconst10*gconst13);
IkReal x2964=(gconst11*gconst14);
IkReal x2965=(gconst20*gconst9);
IkReal x2966=(gconst21*gconst8);
IkReal x2967=(gconst12*gconst5);
IkReal x2968=(gconst18*gconst5);
IkReal x2969=(gconst15*gconst6);
IkReal x2970=(gconst16*gconst7);
IkReal x2971=(gconst18*gconst3);
IkReal x2972=(gconst19*gconst4);
IkReal x2973=(gconst2*gconst23);
IkReal x2974=(gconst16*gconst19);
IkReal x2975=(gconst2*gconst21);
IkReal x2976=((1.0)*gconst1*gconst17);
IkReal x2977=(gconst10*gconst14);
IkReal x2978=((1.0)*gconst11*gconst12);
IkReal x2979=((1.0)*gconst23*gconst6);
IkReal x2980=(gconst19*gconst9);
IkReal x2981=(gconst21*gconst7);
IkReal x2982=((1.0)*gconst13*gconst5);
IkReal x2983=((1.0)*gconst16*gconst6);
IkReal x2984=((1.0)*gconst18*gconst4);
IkReal x2985=((1.0)*gconst14*gconst3);
IkReal x2986=((1.0)*gconst15*gconst2);
IkReal x2987=(gconst2*gconst22);
IkReal x2988=cj12*cj12;
IkReal x2989=((4.0)*gconst12*x2988);
IkReal x2990=((4.0)*x2988);
IkReal x2991=((4.0)*gconst14*x2988);
IkReal x2992=((4.0)*cj12*gconst12*sj11*sj12);
IkReal x2993=((4.0)*cj12*sj11*sj12);
IkReal x2994=((4.0)*cj12*gconst20*sj11*sj12);
IkReal x2995=sj11*sj11;
IkReal x2996=sj12*sj12;
IkReal x2997=((4.0)*gconst15*x2995*x2996);
IkReal x2998=((4.0)*x2995*x2996);
IkReal x2999=((4.0)*gconst17*x2995*x2996);
IkReal x3000=(gconst8*gconst9);
IkReal x3001=(gconst0*gconst5);
IkReal x3002=(gconst1*gconst10*gconst6);
IkReal x3003=(gconst1*gconst10);
IkReal x3004=(gconst5*gconst6);
IkReal x3005=(gconst3*gconst6);
IkReal x3006=(gconst11*gconst2);
IkReal x3007=(gconst4*gconst7*gconst9);
IkReal x3008=(gconst2*gconst9);
IkReal x3009=(gconst4*gconst7);
IkReal x3010=((1.0)*gconst11*gconst6);
IkReal x3011=(gconst7*gconst9);
IkReal x3012=((1.0)*gconst1*gconst5);
IkReal x3013=((1.0)*gconst4*gconst6);
IkReal x3014=(gconst10*gconst2);
IkReal x3015=((1.0)*gconst2*gconst3);
IkReal x3016=((4.0)*gconst0*x2988);
IkReal x3017=((4.0)*gconst2*x2988);
IkReal x3018=(gconst0*gconst11);
IkReal x3019=((4.0)*cj12*gconst8*sj11*sj12);
IkReal x3020=((4.0)*gconst11*x2995*x2996);
IkReal x3021=((4.0)*gconst9*x2995*x2996);
IkReal x3022=((2.0)*cj12*gconst6);
IkReal x3023=((2.0)*cj12*gconst8);
IkReal x3024=((2.0)*cj12*gconst8*gconst9);
IkReal x3025=((2.0)*cj12*gconst1*gconst7);
IkReal x3026=((2.0)*cj12*gconst2);
IkReal x3027=((2.0)*gconst0*gconst5*sj11*sj12);
IkReal x3028=((2.0)*gconst5*sj11*sj12);
IkReal x3029=((2.0)*gconst4*sj11*sj12);
IkReal x3030=((2.0)*gconst3*sj11*sj12);
IkReal x3031=((2.0)*gconst11*sj11*sj12);
op[0]=(((x2938*x2939))+(((-1.0)*x2935*x2944))+((gconst21*x2940))+((x2936*x2937))+(((-1.0)*x2942*x2943))+(((-1.0)*x2937*x2941))+((x2934*x2935))+(((-1.0)*x2945*x2946)));
op[1]=(((x2947*x2949))+(((-1.0)*x2935*x2947))+(((-1.0)*x2936*x2951))+((x2935*x2952))+(((-1.0)*x2935*x2958))+((gconst14*gconst15*x2948))+(((-1.0)*x2945*x2959))+((gconst17*gconst20*gconst21*x2955))+(((-1.0)*x2934*x2948))+(((-1.0)*x2957*x2958))+((gconst21*x2950))+((gconst21*x2954))+(((-1.0)*gconst23*x2954))+(((-1.0)*x2940*x2953))+((gconst16*gconst19*gconst21*x2955))+((x2938*x2958))+(((-1.0)*gconst18*gconst22*x2959))+(((-1.0)*x2939*x2952))+(((-1.0)*x2937*x2960))+(((-1.0)*x2938*x2951))+((gconst17*x2950))+((x2939*x2960))+((x2955*x2956))+((x2937*x2947)));
op[2]=((((-1.0)*gconst0*gconst17*x2949))+((gconst6*x2956))+(((-1.0)*x2938*x2993))+((x2935*x2967))+((x2937*x2993))+((x2935*x2961))+((x2936*x2968))+((gconst23*x2997))+(((-1.0)*x2939*x2993))+(((-1.0)*gconst18*x2989))+(((-1.0)*x2946*x2977))+(((-1.0)*gconst21*x2997))+(((-1.0)*x2944*x2965))+(((-1.0)*x2974*x2993))+((x2974*x2975))+((x2934*x2966))+((x2957*x2993))+(((-1.0)*x2943*x2981))+(((-1.0)*gconst17*x2994))+(((-1.0)*x2943*x2980))+(((-1.0)*x2945*x2983))+((x2938*x2971))+((x2934*x2965))+((gconst9*x2940))+(((-1.0)*gconst16*gconst22*x2998))+(((-1.0)*x2944*x2966))+(((-1.0)*gconst23*x2999))+(((-1.0)*gconst20*x2991))+((x2957*x2972))+(((-1.0)*x2937*x2978))+((x2938*x2969))+((gconst20*x2989))+(((-1.0)*gconst13*gconst19*x2990))+((x2939*x2973))+(((-1.0)*x2934*x2979))+(((-1.0)*x2946*x2987))+((gconst18*x2991))+((gconst23*x2992))+((x2937*x2963))+((gconst15*x2994))+(((-1.0)*gconst21*x2992))+((x2957*x2970))+((x2937*x2962))+(((-1.0)*x2941*x2968))+(((-1.0)*x2945*x2984))+(((-1.0)*x2936*x2993))+(((-1.0)*x2935*x2986))+((x2939*x2964))+(((-1.0)*x2935*x2985))+((gconst21*x2999))+(((-1.0)*x2942*x2982))+(((-1.0)*x2942*x2976)));
op[3]=((((2.0)*cj12*gconst14*gconst21*gconst8))+(((-2.0)*cj12*gconst10*gconst13*gconst18))+(((-2.0)*cj12*gconst14*gconst19*gconst4))+(((-2.0)*gconst20*gconst21*gconst3*sj11*sj12))+(((-2.0)*cj12*gconst16*gconst19*gconst2))+(((-2.0)*gconst0*gconst17*gconst23*sj11*sj12))+(((2.0)*cj12*gconst1*gconst17*gconst19))+(((-2.0)*cj12*gconst12*gconst21*gconst8))+(((-2.0)*gconst15*gconst2*gconst21*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst15*gconst6))+(((-2.0)*gconst16*gconst22*gconst6*sj11*sj12))+(((-2.0)*cj12*gconst15*gconst18*gconst2))+(((2.0)*gconst10*gconst13*gconst17*sj11*sj12))+(((2.0)*gconst15*gconst23*gconst6*sj11*sj12))+(((2.0)*cj12*gconst14*gconst15*gconst8))+(((2.0)*gconst12*gconst17*gconst9*sj11*sj12))+(((2.0)*gconst17*gconst21*gconst8*sj11*sj12))+(((-2.0)*gconst10*gconst14*gconst16*sj11*sj12))+(((-2.0)*cj12*gconst18*gconst2*gconst23))+(((-2.0)*gconst11*gconst12*gconst17*sj11*sj12))+(((-2.0)*gconst17*gconst23*gconst6*sj11*sj12))+(((2.0)*gconst17*gconst20*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst18*gconst3))+(((2.0)*cj12*gconst11*gconst12*gconst18))+(((2.0)*gconst0*gconst17*gconst21*sj11*sj12))+(((2.0)*cj12*gconst1*gconst19*gconst21))+(((-2.0)*gconst15*gconst21*gconst8*sj11*sj12))+(((2.0)*cj12*gconst14*gconst20*gconst3))+(((-2.0)*cj12*gconst12*gconst17*gconst8))+(((2.0)*cj12*gconst0*gconst18*gconst23))+(((2.0)*gconst16*gconst21*gconst7*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst23*gconst6))+(((2.0)*cj12*gconst13*gconst19*gconst5))+(((2.0)*gconst19*gconst21*gconst4*sj11*sj12))+(((2.0)*gconst15*gconst2*gconst23*sj11*sj12))+(((2.0)*cj12*gconst0*gconst17*gconst18))+(((-2.0)*cj12*gconst0*gconst17*gconst20))+(((2.0)*gconst12*gconst21*gconst5*sj11*sj12))+(((-2.0)*cj12*gconst12*gconst20*gconst5))+(((2.0)*gconst16*gconst19*gconst9*sj11*sj12))+(((2.0)*cj12*gconst12*gconst17*gconst6))+(((2.0)*gconst11*gconst14*gconst15*sj11*sj12))+(((2.0)*gconst13*gconst22*gconst5*sj11*sj12))+(((-2.0)*gconst15*gconst20*gconst9*sj11*sj12))+(((2.0)*cj12*gconst12*gconst18*gconst5))+(((-2.0)*gconst10*gconst16*gconst18*sj11*sj12))+(((-2.0)*cj12*gconst1*gconst18*gconst22))+(((-2.0)*gconst12*gconst23*gconst5*sj11*sj12))+(((2.0)*gconst20*gconst21*gconst5*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst16*gconst7))+(((-2.0)*gconst14*gconst22*gconst4*sj11*sj12))+(((2.0)*cj12*gconst14*gconst20*gconst9))+(((-2.0)*gconst18*gconst23*gconst5*sj11*sj12))+(((2.0)*cj12*gconst12*gconst23*gconst6))+(((-2.0)*cj12*gconst0*gconst20*gconst21))+(((-2.0)*cj12*gconst13*gconst22*gconst6))+(((2.0)*cj12*gconst13*gconst19*gconst9))+(((2.0)*cj12*gconst15*gconst2*gconst20))+(((2.0)*gconst14*gconst23*gconst3*sj11*sj12))+(((2.0)*gconst11*gconst15*gconst18*sj11*sj12))+(((2.0)*cj12*gconst13*gconst17*gconst7))+(((-2.0)*gconst16*gconst2*gconst22*sj11*sj12))+(((2.0)*gconst1*gconst17*gconst22*sj11*sj12))+(((-2.0)*gconst11*gconst17*gconst18*sj11*sj12))+(((2.0)*cj12*gconst13*gconst21*gconst7))+(((-2.0)*gconst14*gconst21*gconst3*sj11*sj12))+(((2.0)*gconst18*gconst23*gconst3*sj11*sj12))+(((-2.0)*gconst14*gconst15*gconst9*sj11*sj12))+(((-2.0)*gconst18*gconst22*gconst4*sj11*sj12))+(((2.0)*cj12*gconst2*gconst20*gconst21))+(((-2.0)*cj12*gconst12*gconst20*gconst9))+(((-2.0)*cj12*gconst11*gconst14*gconst18)));
op[4]=((((-1.0)*gconst14*gconst21*gconst3*gconst8))+(((-4.0)*gconst21*gconst3*(sj11*sj11)*(sj12*sj12)))+(((4.0)*gconst11*gconst15*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*cj12*gconst0*gconst21*sj11*sj12))+(((-4.0)*cj12*gconst15*gconst6*sj11*sj12))+(((4.0)*cj12*gconst20*gconst3*sj11*sj12))+(((-4.0)*gconst22*gconst4*(sj11*sj11)*(sj12*sj12)))+(((-1.0)*gconst1*gconst17*gconst21*gconst7))+((gconst14*gconst19*gconst4*gconst9))+(((-1.0)*gconst14*gconst22*gconst4*gconst6))+(((-1.0)*gconst1*gconst17*gconst19*gconst9))+(((-1.0)*gconst12*gconst23*gconst5*gconst6))+(((-1.0)*gconst10*gconst16*gconst18*gconst2))+(((-1.0)*gconst11*gconst12*gconst17*gconst6))+(((4.0)*cj12*gconst2*gconst21*sj11*sj12))+(((-4.0)*cj12*gconst20*gconst5*sj11*sj12))+(((-4.0)*cj12*gconst11*gconst14*sj11*sj12))+(((4.0)*cj12*gconst0*gconst23*sj11*sj12))+(((4.0)*gconst18*gconst2*(cj12*cj12)))+(((-1.0)*gconst11*gconst12*gconst18*gconst5))+(((-4.0)*gconst11*gconst17*(sj11*sj11)*(sj12*sj12)))+(((-1.0)*gconst10*gconst14*gconst16*gconst6))+(((-4.0)*cj12*gconst19*gconst4*sj11*sj12))+(((4.0)*cj12*gconst15*gconst8*sj11*sj12))+((gconst0*gconst17*gconst20*gconst9))+(((-1.0)*gconst1*gconst19*gconst21*gconst5))+((gconst12*gconst21*gconst5*gconst8))+(((-4.0)*cj12*gconst10*gconst13*sj11*sj12))+((gconst19*gconst2*gconst21*gconst4))+(((-4.0)*cj12*gconst18*gconst3*sj11*sj12))+(((4.0)*cj12*gconst18*gconst5*sj11*sj12))+((gconst14*gconst16*gconst7*gconst9))+(((-4.0)*gconst1*gconst19*(cj12*cj12)))+((gconst14*gconst23*gconst3*gconst6))+(((-1.0)*gconst0*gconst17*gconst23*gconst6))+((gconst14*gconst21*gconst4*gconst7))+(((-1.0)*gconst10*gconst14*gconst18*gconst4))+(((4.0)*gconst14*gconst6*(cj12*cj12)))+(((-4.0)*cj12*gconst12*gconst9*sj11*sj12))+((gconst15*gconst2*gconst23*gconst6))+(((-4.0)*cj12*gconst2*gconst23*sj11*sj12))+((gconst12*gconst20*gconst5*gconst9))+((gconst10*gconst13*gconst18*gconst5))+(((-4.0)*cj12*gconst16*gconst7*sj11*sj12))+((gconst13*gconst22*gconst5*gconst6))+(((-4.0)*cj12*gconst17*gconst8*sj11*sj12))+(((4.0)*cj12*gconst11*gconst12*sj11*sj12))+(((-1.0)*gconst15*gconst2*gconst20*gconst9))+(((-1.0)*gconst15*gconst2*gconst21*gconst8))+(((-4.0)*gconst12*gconst6*(cj12*cj12)))+(((-1.0)*gconst13*gconst21*gconst5*gconst7))+((gconst11*gconst15*gconst18*gconst2))+(((-4.0)*cj12*gconst1*gconst22*sj11*sj12))+(((-1.0)*gconst13*gconst19*gconst5*gconst9))+((gconst10*gconst13*gconst17*gconst6))+(((-4.0)*gconst23*gconst5*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*gconst0*gconst18*(cj12*cj12)))+(((-1.0)*gconst2*gconst20*gconst21*gconst3))+(((-1.0)*gconst16*gconst2*gconst22*gconst6))+(((4.0)*gconst0*gconst20*(cj12*cj12)))+(((4.0)*gconst17*gconst9*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*gconst15*gconst9*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*gconst14*gconst8*(cj12*cj12)))+(((-1.0)*gconst14*gconst20*gconst3*gconst9))+((gconst1*gconst17*gconst22*gconst6))+(((4.0)*gconst21*gconst5*(sj11*sj11)*(sj12*sj12)))+(((-1.0)*gconst0*gconst11*gconst17*gconst18))+(((-1.0)*gconst18*gconst2*gconst22*gconst4))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+((gconst16*gconst2*gconst21*gconst7))+((gconst16*gconst19*gconst2*gconst9))+((gconst11*gconst14*gconst15*gconst6))+(((-1.0)*gconst13*gconst17*gconst7*gconst9))+(((4.0)*gconst23*gconst3*(sj11*sj11)*(sj12*sj12)))+(((-4.0)*gconst2*gconst20*(cj12*cj12)))+(((-4.0)*gconst10*gconst16*(sj11*sj11)*(sj12*sj12)))+((gconst12*gconst17*gconst8*gconst9))+((gconst1*gconst18*gconst22*gconst5))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+(((-4.0)*gconst13*gconst7*(cj12*cj12)))+((gconst11*gconst14*gconst18*gconst3))+(((4.0)*cj12*gconst17*gconst6*sj11*sj12))+((gconst0*gconst17*gconst21*gconst8))+(((4.0)*gconst12*gconst8*(cj12*cj12)))+((gconst1*gconst10*gconst17*gconst18))+(((4.0)*cj12*gconst14*gconst9*sj11*sj12))+((gconst0*gconst20*gconst21*gconst5))+((gconst18*gconst2*gconst23*gconst3)));
op[5]=((((2.0)*cj12*gconst0*gconst23*gconst6))+(((2.0)*gconst11*gconst15*gconst6*sj11*sj12))+(((2.0)*cj12*gconst14*gconst3*gconst8))+(((-2.0)*cj12*gconst12*gconst8*gconst9))+(((-2.0)*cj12*gconst0*gconst20*gconst9))+(((2.0)*gconst11*gconst14*gconst3*sj11*sj12))+(((-2.0)*cj12*gconst11*gconst14*gconst6))+(((-2.0)*cj12*gconst16*gconst2*gconst7))+(((2.0)*gconst10*gconst13*gconst5*sj11*sj12))+(((-2.0)*gconst11*gconst12*gconst5*sj11*sj12))+(((-2.0)*gconst22*gconst4*gconst6*sj11*sj12))+(((2.0)*gconst12*gconst5*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst2*gconst23*gconst6))+(((2.0)*cj12*gconst15*gconst2*gconst8))+(((-2.0)*gconst15*gconst8*gconst9*sj11*sj12))+(((-2.0)*gconst2*gconst21*gconst3*sj11*sj12))+(((-2.0)*gconst14*gconst3*gconst9*sj11*sj12))+(((2.0)*cj12*gconst14*gconst8*gconst9))+(((-2.0)*gconst11*gconst18*gconst5*sj11*sj12))+(((2.0)*cj12*gconst2*gconst21*gconst8))+(((2.0)*cj12*gconst1*gconst17*gconst7))+(((-2.0)*gconst11*gconst17*gconst6*sj11*sj12))+(((-2.0)*gconst0*gconst11*gconst17*sj11*sj12))+(((2.0)*cj12*gconst2*gconst20*gconst3))+(((2.0)*cj12*gconst1*gconst19*gconst5))+(((2.0)*gconst19*gconst4*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst1*gconst22*gconst6))+(((-2.0)*cj12*gconst1*gconst10*gconst18))+(((-2.0)*cj12*gconst0*gconst20*gconst5))+(((-2.0)*gconst10*gconst16*gconst6*sj11*sj12))+(((2.0)*cj12*gconst0*gconst17*gconst6))+(((-2.0)*cj12*gconst19*gconst2*gconst4))+(((2.0)*gconst11*gconst18*gconst3*sj11*sj12))+(((2.0)*cj12*gconst12*gconst5*gconst6))+(((-2.0)*gconst21*gconst3*gconst8*sj11*sj12))+(((2.0)*gconst20*gconst5*gconst9*sj11*sj12))+(((2.0)*gconst17*gconst8*gconst9*sj11*sj12))+(((-2.0)*gconst15*gconst2*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst0*gconst17*gconst8))+(((2.0)*cj12*gconst1*gconst19*gconst9))+(((2.0)*gconst16*gconst7*gconst9*sj11*sj12))+(((-2.0)*cj12*gconst14*gconst4*gconst7))+(((-2.0)*cj12*gconst12*gconst5*gconst8))+(((-2.0)*cj12*gconst10*gconst13*gconst6))+(((2.0)*gconst23*gconst3*gconst6*sj11*sj12))+(((2.0)*cj12*gconst0*gconst11*gconst18))+(((-2.0)*cj12*gconst14*gconst3*gconst6))+(((2.0)*cj12*gconst1*gconst21*gconst7))+(((2.0)*gconst1*gconst10*gconst17*sj11*sj12))+(((2.0)*cj12*gconst2*gconst20*gconst9))+(((2.0)*gconst0*gconst17*gconst9*sj11*sj12))+(((2.0)*gconst21*gconst4*gconst7*sj11*sj12))+(((-2.0)*gconst20*gconst3*gconst9*sj11*sj12))+(((-2.0)*gconst10*gconst18*gconst4*sj11*sj12))+(((2.0)*cj12*gconst13*gconst5*gconst7))+(((-2.0)*gconst23*gconst5*gconst6*sj11*sj12))+(((-2.0)*gconst0*gconst23*gconst5*sj11*sj12))+(((2.0)*gconst2*gconst23*gconst3*sj11*sj12))+(((-2.0)*cj12*gconst15*gconst2*gconst6))+(((2.0)*gconst1*gconst22*gconst5*sj11*sj12))+(((-2.0)*cj12*gconst0*gconst21*gconst8))+(((-2.0)*gconst10*gconst14*gconst4*sj11*sj12))+(((2.0)*gconst11*gconst15*gconst2*sj11*sj12))+(((-2.0)*gconst10*gconst16*gconst2*sj11*sj12))+(((2.0)*cj12*gconst0*gconst18*gconst5))+(((-2.0)*cj12*gconst11*gconst18*gconst2))+(((-2.0)*cj12*gconst18*gconst2*gconst3))+(((2.0)*cj12*gconst13*gconst7*gconst9))+(((2.0)*cj12*gconst11*gconst12*gconst6))+(((-2.0)*gconst2*gconst22*gconst4*sj11*sj12))+(((2.0)*gconst21*gconst5*gconst8*sj11*sj12))+(((2.0)*gconst0*gconst21*gconst5*sj11*sj12)));
op[6]=(((gconst3*x3020))+(((-1.0)*x2977*x3013))+(((-1.0)*x2961*x3010))+((x2963*x3004))+((gconst14*x3007))+(((-1.0)*x2982*x3011))+(((-1.0)*gconst6*x3016))+(((-1.0)*x2984*x3014))+((x2993*x3018))+(((-1.0)*x2985*x3000))+((gconst8*x3016))+(((-1.0)*gconst1*gconst7*x2990))+((gconst6*x3017))+((x2967*x3000))+((x2964*x3005))+(((-1.0)*gconst3*x3021))+(((-1.0)*gconst0*gconst9*x2993))+((x2961*x3000))+((x2975*x3009))+(((-1.0)*x2986*x3000))+((x2970*x3008))+(((-1.0)*x2980*x3012))+((x2972*x3008))+(((-1.0)*gconst8*x3017))+(((-1.0)*x2983*x3014))+((x2965*x3001))+(((-1.0)*x2993*x3009))+((x2969*x3006))+((x2993*x3004))+((x2971*x3006))+(((-1.0)*gconst0*gconst11*gconst18*gconst5))+(((-1.0)*x2993*x3005))+(((-1.0)*x2987*x3013))+(((-1.0)*x2976*x3011))+((x2973*x3005))+(((-1.0)*x2965*x3015))+(((-1.0)*x2993*x3003))+(((-1.0)*x2981*x3012))+(((-1.0)*x2966*x3015))+(((-1.0)*x2993*x3006))+(((-1.0)*x2978*x3004))+((x2962*x3004))+((gconst17*x3002))+(((-1.0)*gconst5*x3019))+((x2993*x3008))+(((-1.0)*gconst10*gconst4*x2998))+(((-1.0)*gconst5*x3020))+((gconst3*x3019))+((x2966*x3001))+((x2968*x3003))+((gconst5*x3021))+(((-1.0)*x2979*x3001)));
op[7]=(((gconst9*x3025))+(((-1.0)*x3004*x3031))+((x2955*x3007))+(((-1.0)*gconst11*x3027))+((gconst5*x3025))+((gconst9*x3027))+((x3005*x3031))+((x3000*x3028))+(((-1.0)*x3005*x3026))+(((-1.0)*x3000*x3030))+(((-1.0)*x3008*x3030))+((x3006*x3030))+(((-1.0)*x2953*x3002))+((x3018*x3022))+(((-1.0)*x3006*x3022))+((x3001*x3022))+(((-1.0)*x3009*x3026))+((gconst2*x3024))+(((-1.0)*gconst10*gconst6*x3029))+((gconst2*gconst3*x3023))+(((-1.0)*x3014*x3029))+(((-1.0)*gconst0*x3024))+((x3003*x3028))+(((-1.0)*x3001*x3023)));
op[8]=(((gconst5*x3002))+((x3000*x3001))+(((-1.0)*x3000*x3015))+((gconst2*x3007))+((x3005*x3006))+(((-1.0)*x3011*x3012))+(((-1.0)*x3001*x3010))+(((-1.0)*x3013*x3014)));
polyroots8(op,zeror,numroots);
IkReal j10array[8], cj10array[8], sj10array[8], tempj10array[1];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ++ij10)
{
IkReal htj10 = zeror[ij10];
tempj10array[0]=((2.0)*(atan(htj10)));
for(int kj10 = 0; kj10 < 1; ++kj10)
{
j10array[numsolutions] = tempj10array[kj10];
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
numsolutions++;
}
}
bool j10valid[8]={true,true,true,true,true,true,true,true};
_nj10 = 8;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
htj10 = IKtan(j10/2);

_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
{
IkReal j16eval[2];
IkReal x3032=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3032);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3032);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x3033=(r22*(cj14*cj14));
IkReal x3034=cj15*cj15;
IkReal x3035=(((r22*x3034))+(((-1.0)*x3033*x3034))+x3033);
j16eval[0]=x3035;
j16eval[1]=IKsign(x3035);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3036=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3036);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3036);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x3037=((((-1.0)*(1.0)*cj13*cj14*sj15))+(((-1.0)*(1.0)*cj15*sj13)));
j16eval[0]=x3037;
j16eval[1]=IKsign(x3037);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3038=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3038);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3038);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x3039=(cj14*r22*sj13*sj14);
IkReal x3040=(((x3039*(cj15*cj15)))+(((-1.0)*x3039))+((((cj13*cj15*sj15))*((r22*sj14)))));
j16eval[0]=x3040;
j16eval[1]=IKsign(x3040);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x3041=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3041);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3041);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x3042=((6.9)*cj10);
IkReal x3043=(r10*x3042);
IkReal x3044=((6.9)*sj10);
IkReal x3045=(r00*x3044);
IkReal x3046=(cj12*sj11);
IkReal x3047=(r11*x3042);
IkReal x3048=(r01*x3044);
j16eval[0]=r22;
j16eval[1]=((IKabs(((((100.0)*rxp0_2))+x3043+(((-1.0)*x3043*x3046))+((x3045*x3046))+(((-1.0)*x3045)))))+(IKabs((x3048+(((-1.0)*x3046*x3048))+((x3046*x3047))+(((-1.0)*(100.0)*rxp1_2))+(((-1.0)*x3047))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3049=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3049);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3049);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3050=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3050);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3050);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x3051=(r22*sj14);
j16eval[0]=x3051;
j16eval[1]=IKsign(x3051);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3052=(cj10*cj12);
IkReal x3053=((6.9)*cj10*cj14);
IkReal x3054=((6.9)*cj10*sj14);
IkReal x3055=((100.0)*cj14*px);
IkReal x3056=((100.0)*px*sj14);
IkReal x3057=((6.9)*cj10*cj12*cj14*sj11);
IkReal x3058=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x3059 = IKatan2WithCheck(IkReal((((r11*x3054))+(((-1.0)*r11*x3058))+(((-1.0)*r11*x3056))+(((-1.0)*r10*x3053))+((r10*x3055))+((r01*x3052))+((r10*x3057)))),IkReal((((r11*x3055))+(((-1.0)*r10*x3054))+(((-1.0)*r11*x3053))+(((-1.0)*r00*x3052))+((r11*x3057))+((r10*x3056))+((r10*x3058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x3060.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3059.value)+(((-1.0)*(1.5707963267949)*(x3060.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3061=((0.069)*cj10);
IkReal x3062=IKsin(j16);
IkReal x3063=((0.01)*x3062);
IkReal x3064=IKcos(j16);
IkReal x3065=((0.01)*x3064);
IkReal x3066=(cj12*sj11);
IkReal x3067=((0.069)*sj10);
IkReal x3068=(cj10*cj12);
IkReal x3069=(cj14*x3064);
IkReal x3070=((1.0)*cj14*x3062);
IkReal x3071=((1.0)*sj14*x3062);
IkReal x3072=((1.0)*sj14*x3064);
IkReal x3073=((1.0)*cj12*sj10);
IkReal x3074=(sj13*sj14*x3062);
IkReal x3075=((1.0)*cj14*sj13*x3062);
IkReal x3076=((1.0)*cj14*sj13*x3064);
IkReal x3077=((1.0)*sj13*sj14*x3064);
IkReal x3078=(cj13*sj14*x3062);
IkReal x3079=((1.0)*cj13*cj14*x3062);
IkReal x3080=((1.0)*cj13*cj14*x3064);
IkReal x3081=((1.0)*cj13*sj14*x3064);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x3065))+((r00*x3063))+(((-1.0)*x3061*x3066))+x3061);
evalcond[1]=((((-1.0)*(1.0)*py))+((r11*x3065))+(((-1.0)*x3066*x3067))+x3067+((r10*x3063)));
evalcond[2]=(((r10*x3069))+(((-1.0)*r10*x3071))+x3068+(((-1.0)*r11*x3070))+(((-1.0)*r11*x3072)));
evalcond[3]=((((-1.0)*x3073))+((r00*x3069))+(((-1.0)*r01*x3072))+(((-1.0)*r00*x3071))+(((-1.0)*r01*x3070)));
evalcond[4]=((((-1.0)*r01*x3076))+(((-1.0)*r00*x3075))+((r01*x3074))+(((-1.0)*r00*x3077)));
evalcond[5]=((((-1.0)*r10*x3075))+((r11*x3074))+(((-1.0)*r11*x3076))+(((-1.0)*r10*x3077)));
evalcond[6]=((((-1.0)*sj11*x3073))+(((-1.0)*r10*x3081))+(((-1.0)*r10*x3079))+((r11*x3078))+(((-1.0)*r11*x3080)));
evalcond[7]=((((-1.0)*r00*x3079))+((r01*x3078))+(((-1.0)*r01*x3080))+(((-1.0)*sj11*x3068))+(((-1.0)*r00*x3081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3082=(cj10*cj12);
IkReal x3083=((100.0)*cj14*py);
IkReal x3084=((6.9)*cj14*sj10);
IkReal x3085=(r10*x3084);
IkReal x3086=((100.0)*py*sj14);
IkReal x3087=((6.9)*sj10*sj14);
IkReal x3088=(r11*x3087);
IkReal x3089=(cj12*sj11);
IkReal x3090=(r11*x3084);
IkReal x3091=(r10*x3087);
CheckValue<IkReal> x3092=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x3092.valid){
continue;
}
CheckValue<IkReal> x3093 = IKatan2WithCheck(IkReal((((r11*x3082))+((x3085*x3089))+(((-1.0)*x3088*x3089))+(((-1.0)*r11*x3086))+((r10*x3083))+x3088+(((-1.0)*x3085)))),IkReal((((r10*x3086))+(((-1.0)*x3091))+(((-1.0)*x3090))+((x3089*x3090))+(((-1.0)*r10*x3082))+((x3089*x3091))+((r11*x3083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3093.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3092.value)))+(x3093.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3094=((0.069)*cj10);
IkReal x3095=IKsin(j16);
IkReal x3096=((0.01)*x3095);
IkReal x3097=IKcos(j16);
IkReal x3098=((0.01)*x3097);
IkReal x3099=(cj12*sj11);
IkReal x3100=((0.069)*sj10);
IkReal x3101=(cj10*cj12);
IkReal x3102=(cj14*x3097);
IkReal x3103=((1.0)*cj14*x3095);
IkReal x3104=((1.0)*sj14*x3095);
IkReal x3105=((1.0)*sj14*x3097);
IkReal x3106=((1.0)*cj12*sj10);
IkReal x3107=(sj13*sj14*x3095);
IkReal x3108=((1.0)*cj14*sj13*x3095);
IkReal x3109=((1.0)*cj14*sj13*x3097);
IkReal x3110=((1.0)*sj13*sj14*x3097);
IkReal x3111=(cj13*sj14*x3095);
IkReal x3112=((1.0)*cj13*cj14*x3095);
IkReal x3113=((1.0)*cj13*cj14*x3097);
IkReal x3114=((1.0)*cj13*sj14*x3097);
evalcond[0]=((((-1.0)*(1.0)*px))+((r00*x3096))+(((-1.0)*x3094*x3099))+((r01*x3098))+x3094);
evalcond[1]=((((-1.0)*(1.0)*py))+((r11*x3098))+(((-1.0)*x3099*x3100))+x3100+((r10*x3096)));
evalcond[2]=(((r10*x3102))+x3101+(((-1.0)*r10*x3104))+(((-1.0)*r11*x3103))+(((-1.0)*r11*x3105)));
evalcond[3]=((((-1.0)*x3106))+(((-1.0)*r00*x3104))+(((-1.0)*r01*x3105))+((r00*x3102))+(((-1.0)*r01*x3103)));
evalcond[4]=((((-1.0)*r01*x3109))+((r01*x3107))+(((-1.0)*r00*x3108))+(((-1.0)*r00*x3110)));
evalcond[5]=((((-1.0)*r10*x3110))+(((-1.0)*r10*x3108))+((r11*x3107))+(((-1.0)*r11*x3109)));
evalcond[6]=((((-1.0)*sj11*x3106))+(((-1.0)*r11*x3113))+(((-1.0)*r10*x3114))+((r11*x3111))+(((-1.0)*r10*x3112)));
evalcond[7]=(((r01*x3111))+(((-1.0)*r00*x3112))+(((-1.0)*sj11*x3101))+(((-1.0)*r01*x3113))+(((-1.0)*r00*x3114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3115=((6.9)*sj10);
IkReal x3116=(cj12*sj11);
IkReal x3117=(x3115*x3116);
IkReal x3118=((6.9)*cj10);
IkReal x3119=(x3116*x3118);
CheckValue<IkReal> x3120=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3120.valid){
continue;
}
CheckValue<IkReal> x3121 = IKatan2WithCheck(IkReal((((r01*(((((-1.0)*x3117))+x3115))))+((r11*(((((-1.0)*x3118))+x3119))))+(((-1.0)*(100.0)*rxp1_2)))),IkReal((((r10*((x3118+(((-1.0)*x3119))))))+(((100.0)*rxp0_2))+((r00*(((((-1.0)*x3115))+x3117)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3121.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3120.value)))+(x3121.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3122=((0.069)*cj10);
IkReal x3123=IKsin(j16);
IkReal x3124=((0.01)*x3123);
IkReal x3125=IKcos(j16);
IkReal x3126=((0.01)*x3125);
IkReal x3127=(cj12*sj11);
IkReal x3128=((0.069)*sj10);
IkReal x3129=(cj10*cj12);
IkReal x3130=(cj14*x3125);
IkReal x3131=((1.0)*cj14*x3123);
IkReal x3132=((1.0)*sj14*x3123);
IkReal x3133=((1.0)*sj14*x3125);
IkReal x3134=((1.0)*cj12*sj10);
IkReal x3135=(sj13*sj14*x3123);
IkReal x3136=((1.0)*cj14*sj13*x3123);
IkReal x3137=((1.0)*cj14*sj13*x3125);
IkReal x3138=((1.0)*sj13*sj14*x3125);
IkReal x3139=(cj13*sj14*x3123);
IkReal x3140=((1.0)*cj13*cj14*x3123);
IkReal x3141=((1.0)*cj13*cj14*x3125);
IkReal x3142=((1.0)*cj13*sj14*x3125);
evalcond[0]=((((-1.0)*(1.0)*px))+((r00*x3124))+x3122+(((-1.0)*x3122*x3127))+((r01*x3126)));
evalcond[1]=(((r10*x3124))+(((-1.0)*(1.0)*py))+x3128+((r11*x3126))+(((-1.0)*x3127*x3128)));
evalcond[2]=((((-1.0)*r10*x3132))+((r10*x3130))+x3129+(((-1.0)*r11*x3133))+(((-1.0)*r11*x3131)));
evalcond[3]=((((-1.0)*r00*x3132))+((r00*x3130))+(((-1.0)*r01*x3131))+(((-1.0)*r01*x3133))+(((-1.0)*x3134)));
evalcond[4]=(((r01*x3135))+(((-1.0)*r00*x3136))+(((-1.0)*r00*x3138))+(((-1.0)*r01*x3137)));
evalcond[5]=((((-1.0)*r11*x3137))+(((-1.0)*r10*x3138))+((r11*x3135))+(((-1.0)*r10*x3136)));
evalcond[6]=((((-1.0)*sj11*x3134))+(((-1.0)*r11*x3141))+(((-1.0)*r10*x3142))+((r11*x3139))+(((-1.0)*r10*x3140)));
evalcond[7]=(((r01*x3139))+(((-1.0)*r00*x3142))+(((-1.0)*r01*x3141))+(((-1.0)*sj11*x3129))+(((-1.0)*r00*x3140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x3143=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3143);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3143);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x3144=((6.9)*cj10);
IkReal x3145=(r10*x3144);
IkReal x3146=((6.9)*sj10);
IkReal x3147=(r00*x3146);
IkReal x3148=(cj12*sj11);
IkReal x3149=(r11*x3144);
IkReal x3150=(r01*x3146);
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=((IKabs(((((-1.0)*x3147*x3148))+(((-1.0)*x3145))+((x3145*x3148))+(((-1.0)*(100.0)*rxp0_2))+x3147)))+(IKabs((((x3148*x3150))+(((100.0)*rxp1_2))+(((-1.0)*x3148*x3149))+(((-1.0)*x3150))+x3149))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3151=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3151);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3151);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3152=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3152);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3152);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x3153=(r22*sj14);
j16eval[0]=x3153;
j16eval[1]=IKsign(x3153);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3154=(cj10*cj12);
IkReal x3155=((6.9)*cj10*cj14);
IkReal x3156=((6.9)*cj10*sj14);
IkReal x3157=((100.0)*cj14*px);
IkReal x3158=((100.0)*px*sj14);
IkReal x3159=((6.9)*cj10*cj12*cj14*sj11);
IkReal x3160=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x3161=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x3161.valid){
continue;
}
CheckValue<IkReal> x3162 = IKatan2WithCheck(IkReal((((r01*x3154))+(((-1.0)*r10*x3157))+((r10*x3155))+(((-1.0)*r11*x3160))+(((-1.0)*r10*x3159))+(((-1.0)*r11*x3158))+((r11*x3156)))),IkReal(((((-1.0)*r10*x3156))+(((-1.0)*r00*x3154))+((r10*x3160))+(((-1.0)*r11*x3159))+(((-1.0)*r11*x3157))+((r11*x3155))+((r10*x3158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3162.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3161.value)))+(x3162.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3163=((0.069)*cj10);
IkReal x3164=IKsin(j16);
IkReal x3165=((0.01)*x3164);
IkReal x3166=IKcos(j16);
IkReal x3167=((0.01)*x3166);
IkReal x3168=(cj12*sj11);
IkReal x3169=((0.069)*sj10);
IkReal x3170=(cj10*cj12);
IkReal x3171=(cj14*x3166);
IkReal x3172=(sj14*x3164);
IkReal x3173=(sj14*x3166);
IkReal x3174=((1.0)*cj14*x3164);
IkReal x3175=((1.0)*cj12*sj10);
IkReal x3176=(cj14*sj13*x3164);
IkReal x3177=(cj14*sj13*x3166);
IkReal x3178=(sj13*sj14*x3164);
IkReal x3179=((1.0)*sj13*sj14*x3166);
IkReal x3180=(cj13*cj14*x3164);
IkReal x3181=(cj13*cj14*x3166);
IkReal x3182=(cj13*sj14*x3164);
IkReal x3183=((1.0)*cj13*sj14*x3166);
evalcond[0]=((((-1.0)*(1.0)*px))+x3163+(((-1.0)*r01*x3167))+(((-1.0)*x3163*x3168))+(((-1.0)*r00*x3165)));
evalcond[1]=((((-1.0)*r10*x3165))+x3169+(((-1.0)*(1.0)*py))+(((-1.0)*x3168*x3169))+(((-1.0)*r11*x3167)));
evalcond[2]=(x3170+(((-1.0)*r11*x3174))+((r10*x3172))+((r11*x3173))+((r10*x3171)));
evalcond[3]=((((-1.0)*r01*x3174))+((r00*x3171))+((r00*x3172))+(((-1.0)*x3175))+((r01*x3173)));
evalcond[4]=(((r01*x3178))+(((-1.0)*r00*x3179))+((r00*x3176))+((r01*x3177)));
evalcond[5]=(((r10*x3176))+(((-1.0)*r10*x3179))+((r11*x3178))+((r11*x3177)));
evalcond[6]=(((r10*x3180))+(((-1.0)*r10*x3183))+(((-1.0)*sj11*x3175))+((r11*x3182))+((r11*x3181)));
evalcond[7]=((((-1.0)*r00*x3183))+(((-1.0)*sj11*x3170))+((r00*x3180))+((r01*x3182))+((r01*x3181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3184=(cj10*cj12);
IkReal x3185=((100.0)*cj14*py);
IkReal x3186=((6.9)*cj14*sj10);
IkReal x3187=(r10*x3186);
IkReal x3188=((100.0)*py*sj14);
IkReal x3189=((6.9)*sj10*sj14);
IkReal x3190=(r11*x3189);
IkReal x3191=(cj12*sj11);
IkReal x3192=(r11*x3186);
IkReal x3193=(r10*x3189);
CheckValue<IkReal> x3194=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x3194.valid){
continue;
}
CheckValue<IkReal> x3195 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3185))+(((-1.0)*r11*x3188))+x3187+x3190+(((-1.0)*x3187*x3191))+((r11*x3184))+(((-1.0)*x3190*x3191)))),IkReal(((((-1.0)*r11*x3185))+x3192+((r10*x3188))+(((-1.0)*x3191*x3192))+((x3191*x3193))+(((-1.0)*r10*x3184))+(((-1.0)*x3193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3195.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3194.value)))+(x3195.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3196=((0.069)*cj10);
IkReal x3197=IKsin(j16);
IkReal x3198=((0.01)*x3197);
IkReal x3199=IKcos(j16);
IkReal x3200=((0.01)*x3199);
IkReal x3201=(cj12*sj11);
IkReal x3202=((0.069)*sj10);
IkReal x3203=(cj10*cj12);
IkReal x3204=(cj14*x3199);
IkReal x3205=(sj14*x3197);
IkReal x3206=(sj14*x3199);
IkReal x3207=((1.0)*cj14*x3197);
IkReal x3208=((1.0)*cj12*sj10);
IkReal x3209=(cj14*sj13*x3197);
IkReal x3210=(cj14*sj13*x3199);
IkReal x3211=(sj13*sj14*x3197);
IkReal x3212=((1.0)*sj13*sj14*x3199);
IkReal x3213=(cj13*cj14*x3197);
IkReal x3214=(cj13*cj14*x3199);
IkReal x3215=(cj13*sj14*x3197);
IkReal x3216=((1.0)*cj13*sj14*x3199);
evalcond[0]=((((-1.0)*(1.0)*px))+x3196+(((-1.0)*r00*x3198))+(((-1.0)*x3196*x3201))+(((-1.0)*r01*x3200)));
evalcond[1]=((((-1.0)*x3201*x3202))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x3200))+x3202+(((-1.0)*r10*x3198)));
evalcond[2]=(((r10*x3205))+((r11*x3206))+((r10*x3204))+x3203+(((-1.0)*r11*x3207)));
evalcond[3]=((((-1.0)*r01*x3207))+((r00*x3205))+((r00*x3204))+(((-1.0)*x3208))+((r01*x3206)));
evalcond[4]=(((r01*x3210))+((r00*x3209))+(((-1.0)*r00*x3212))+((r01*x3211)));
evalcond[5]=((((-1.0)*r10*x3212))+((r11*x3211))+((r11*x3210))+((r10*x3209)));
evalcond[6]=((((-1.0)*r10*x3216))+((r11*x3215))+((r11*x3214))+(((-1.0)*sj11*x3208))+((r10*x3213)));
evalcond[7]=((((-1.0)*sj11*x3203))+((r00*x3213))+(((-1.0)*r00*x3216))+((r01*x3214))+((r01*x3215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3217=((6.9)*sj10);
IkReal x3218=(cj12*sj11);
IkReal x3219=(x3217*x3218);
IkReal x3220=((6.9)*cj10);
IkReal x3221=(x3218*x3220);
CheckValue<IkReal> x3222 = IKatan2WithCheck(IkReal((((r01*((x3219+(((-1.0)*x3217))))))+(((100.0)*rxp1_2))+((r11*((x3220+(((-1.0)*x3221)))))))),IkReal((((r00*(((((-1.0)*x3219))+x3217))))+(((-1.0)*(100.0)*rxp0_2))+((r10*((x3221+(((-1.0)*x3220)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3222.valid){
continue;
}
CheckValue<IkReal> x3223=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3223.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3222.value)+(((1.5707963267949)*(x3223.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3224=((0.069)*cj10);
IkReal x3225=IKsin(j16);
IkReal x3226=((0.01)*x3225);
IkReal x3227=IKcos(j16);
IkReal x3228=((0.01)*x3227);
IkReal x3229=(cj12*sj11);
IkReal x3230=((0.069)*sj10);
IkReal x3231=(cj10*cj12);
IkReal x3232=(cj14*x3227);
IkReal x3233=(sj14*x3225);
IkReal x3234=(sj14*x3227);
IkReal x3235=((1.0)*cj14*x3225);
IkReal x3236=((1.0)*cj12*sj10);
IkReal x3237=(cj14*sj13*x3225);
IkReal x3238=(cj14*sj13*x3227);
IkReal x3239=(sj13*sj14*x3225);
IkReal x3240=((1.0)*sj13*sj14*x3227);
IkReal x3241=(cj13*cj14*x3225);
IkReal x3242=(cj13*cj14*x3227);
IkReal x3243=(cj13*sj14*x3225);
IkReal x3244=((1.0)*cj13*sj14*x3227);
evalcond[0]=((((-1.0)*(1.0)*px))+x3224+(((-1.0)*x3224*x3229))+(((-1.0)*r00*x3226))+(((-1.0)*r01*x3228)));
evalcond[1]=((((-1.0)*r11*x3228))+(((-1.0)*(1.0)*py))+(((-1.0)*x3229*x3230))+x3230+(((-1.0)*r10*x3226)));
evalcond[2]=(((r11*x3234))+x3231+(((-1.0)*r11*x3235))+((r10*x3233))+((r10*x3232)));
evalcond[3]=((((-1.0)*x3236))+(((-1.0)*r01*x3235))+((r00*x3233))+((r01*x3234))+((r00*x3232)));
evalcond[4]=(((r01*x3239))+((r00*x3237))+((r01*x3238))+(((-1.0)*r00*x3240)));
evalcond[5]=(((r10*x3237))+((r11*x3239))+(((-1.0)*r10*x3240))+((r11*x3238)));
evalcond[6]=(((r11*x3242))+(((-1.0)*sj11*x3236))+((r11*x3243))+(((-1.0)*r10*x3244))+((r10*x3241)));
evalcond[7]=((((-1.0)*r00*x3244))+(((-1.0)*sj11*x3231))+((r00*x3241))+((r01*x3242))+((r01*x3243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs(((1.0)+cj15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x3245=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3245);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3245);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265;
IkReal x3246=((6.9)*cj10);
IkReal x3247=(r10*x3246);
IkReal x3248=((6.9)*sj10);
IkReal x3249=(r00*x3248);
IkReal x3250=(cj12*sj11);
IkReal x3251=(r11*x3246);
IkReal x3252=(r01*x3248);
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=((IKabs(((((-1.0)*x3250*x3251))+x3251+(((-1.0)*x3252))+((x3250*x3252))+(((100.0)*rxp1_2)))))+(IKabs(((((-1.0)*x3249*x3250))+(((-1.0)*x3247))+(((-1.0)*(100.0)*rxp0_2))+x3249+((x3247*x3250))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3253=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3253);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3253);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3254=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3254);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3254);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265;
IkReal x3255=(r22*sj14);
j16eval[0]=x3255;
j16eval[1]=IKsign(x3255);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3256=(cj10*cj12);
IkReal x3257=((6.9)*cj10*cj14);
IkReal x3258=((6.9)*cj10*sj14);
IkReal x3259=((100.0)*cj14*px);
IkReal x3260=((100.0)*px*sj14);
IkReal x3261=((6.9)*cj10*cj12*cj14*sj11);
IkReal x3262=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x3263=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x3263.valid){
continue;
}
CheckValue<IkReal> x3264 = IKatan2WithCheck(IkReal((((r10*x3257))+(((-1.0)*r10*x3259))+(((-1.0)*r11*x3260))+(((-1.0)*r11*x3262))+(((-1.0)*r10*x3261))+((r11*x3258))+((r01*x3256)))),IkReal(((((-1.0)*r10*x3258))+(((-1.0)*r00*x3256))+(((-1.0)*r11*x3261))+(((-1.0)*r11*x3259))+((r10*x3260))+((r10*x3262))+((r11*x3257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3264.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3263.value)))+(x3264.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3265=((0.069)*cj10);
IkReal x3266=IKsin(j16);
IkReal x3267=((0.01)*x3266);
IkReal x3268=IKcos(j16);
IkReal x3269=((0.01)*x3268);
IkReal x3270=(cj12*sj11);
IkReal x3271=((0.069)*sj10);
IkReal x3272=(cj10*cj12);
IkReal x3273=(cj14*x3268);
IkReal x3274=(sj14*x3266);
IkReal x3275=(sj14*x3268);
IkReal x3276=((1.0)*cj14*x3266);
IkReal x3277=((1.0)*cj12*sj10);
IkReal x3278=(cj14*sj13*x3266);
IkReal x3279=(cj14*sj13*x3268);
IkReal x3280=(sj13*sj14*x3266);
IkReal x3281=((1.0)*sj13*sj14*x3268);
IkReal x3282=(cj13*cj14*x3266);
IkReal x3283=(cj13*cj14*x3268);
IkReal x3284=(cj13*sj14*x3266);
IkReal x3285=((1.0)*cj13*sj14*x3268);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*x3265*x3270))+(((-1.0)*r01*x3269))+(((-1.0)*r00*x3267))+x3265);
evalcond[1]=((((-1.0)*r10*x3267))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x3269))+x3271+(((-1.0)*x3270*x3271)));
evalcond[2]=(((r11*x3275))+x3272+(((-1.0)*r11*x3276))+((r10*x3274))+((r10*x3273)));
evalcond[3]=(((r00*x3273))+((r00*x3274))+((r01*x3275))+(((-1.0)*x3277))+(((-1.0)*r01*x3276)));
evalcond[4]=(((r01*x3280))+((r01*x3279))+((r00*x3278))+(((-1.0)*r00*x3281)));
evalcond[5]=(((r11*x3280))+(((-1.0)*r10*x3281))+((r11*x3279))+((r10*x3278)));
evalcond[6]=((((-1.0)*r10*x3285))+((r11*x3284))+(((-1.0)*sj11*x3277))+((r11*x3283))+((r10*x3282)));
evalcond[7]=(((r00*x3282))+(((-1.0)*sj11*x3272))+(((-1.0)*r00*x3285))+((r01*x3283))+((r01*x3284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3286=(cj10*cj12);
IkReal x3287=((100.0)*cj14*py);
IkReal x3288=((6.9)*cj14*sj10);
IkReal x3289=(r10*x3288);
IkReal x3290=((100.0)*py*sj14);
IkReal x3291=((6.9)*sj10*sj14);
IkReal x3292=(r11*x3291);
IkReal x3293=(cj12*sj11);
IkReal x3294=(r11*x3288);
IkReal x3295=(r10*x3291);
CheckValue<IkReal> x3296 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3287))+(((-1.0)*x3289*x3293))+(((-1.0)*x3292*x3293))+x3289+((r11*x3286))+x3292+(((-1.0)*r11*x3290)))),IkReal(((((-1.0)*x3295))+x3294+(((-1.0)*r11*x3287))+(((-1.0)*x3293*x3294))+(((-1.0)*r10*x3286))+((x3293*x3295))+((r10*x3290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3296.valid){
continue;
}
CheckValue<IkReal> x3297=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x3297.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3296.value)+(((1.5707963267949)*(x3297.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3298=((0.069)*cj10);
IkReal x3299=IKsin(j16);
IkReal x3300=((0.01)*x3299);
IkReal x3301=IKcos(j16);
IkReal x3302=((0.01)*x3301);
IkReal x3303=(cj12*sj11);
IkReal x3304=((0.069)*sj10);
IkReal x3305=(cj10*cj12);
IkReal x3306=(cj14*x3301);
IkReal x3307=(sj14*x3299);
IkReal x3308=(sj14*x3301);
IkReal x3309=((1.0)*cj14*x3299);
IkReal x3310=((1.0)*cj12*sj10);
IkReal x3311=(cj14*sj13*x3299);
IkReal x3312=(cj14*sj13*x3301);
IkReal x3313=(sj13*sj14*x3299);
IkReal x3314=((1.0)*sj13*sj14*x3301);
IkReal x3315=(cj13*cj14*x3299);
IkReal x3316=(cj13*cj14*x3301);
IkReal x3317=(cj13*sj14*x3299);
IkReal x3318=((1.0)*cj13*sj14*x3301);
evalcond[0]=((((-1.0)*r01*x3302))+(((-1.0)*(1.0)*px))+x3298+(((-1.0)*x3298*x3303))+(((-1.0)*r00*x3300)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r10*x3300))+(((-1.0)*r11*x3302))+x3304+(((-1.0)*x3303*x3304)));
evalcond[2]=(((r11*x3308))+x3305+(((-1.0)*r11*x3309))+((r10*x3306))+((r10*x3307)));
evalcond[3]=(((r00*x3306))+((r00*x3307))+(((-1.0)*r01*x3309))+((r01*x3308))+(((-1.0)*x3310)));
evalcond[4]=(((r00*x3311))+((r01*x3313))+((r01*x3312))+(((-1.0)*r00*x3314)));
evalcond[5]=((((-1.0)*r10*x3314))+((r10*x3311))+((r11*x3312))+((r11*x3313)));
evalcond[6]=((((-1.0)*sj11*x3310))+((r11*x3317))+((r10*x3315))+((r11*x3316))+(((-1.0)*r10*x3318)));
evalcond[7]=(((r01*x3317))+((r01*x3316))+((r00*x3315))+(((-1.0)*r00*x3318))+(((-1.0)*sj11*x3305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3319=((6.9)*sj10);
IkReal x3320=(cj12*sj11);
IkReal x3321=(x3319*x3320);
IkReal x3322=((6.9)*cj10);
IkReal x3323=(x3320*x3322);
CheckValue<IkReal> x3324 = IKatan2WithCheck(IkReal((((r11*(((((-1.0)*x3323))+x3322))))+((r01*((x3321+(((-1.0)*x3319))))))+(((100.0)*rxp1_2)))),IkReal((((r10*((x3323+(((-1.0)*x3322))))))+(((-1.0)*(100.0)*rxp0_2))+((r00*(((((-1.0)*x3321))+x3319)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3324.valid){
continue;
}
CheckValue<IkReal> x3325=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3325.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3324.value)+(((1.5707963267949)*(x3325.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3326=((0.069)*cj10);
IkReal x3327=IKsin(j16);
IkReal x3328=((0.01)*x3327);
IkReal x3329=IKcos(j16);
IkReal x3330=((0.01)*x3329);
IkReal x3331=(cj12*sj11);
IkReal x3332=((0.069)*sj10);
IkReal x3333=(cj10*cj12);
IkReal x3334=(cj14*x3329);
IkReal x3335=(sj14*x3327);
IkReal x3336=(sj14*x3329);
IkReal x3337=((1.0)*cj14*x3327);
IkReal x3338=((1.0)*cj12*sj10);
IkReal x3339=(cj14*sj13*x3327);
IkReal x3340=(cj14*sj13*x3329);
IkReal x3341=(sj13*sj14*x3327);
IkReal x3342=((1.0)*sj13*sj14*x3329);
IkReal x3343=(cj13*cj14*x3327);
IkReal x3344=(cj13*cj14*x3329);
IkReal x3345=(cj13*sj14*x3327);
IkReal x3346=((1.0)*cj13*sj14*x3329);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x3330))+x3326+(((-1.0)*x3326*x3331))+(((-1.0)*r00*x3328)));
evalcond[1]=((((-1.0)*r11*x3330))+(((-1.0)*r10*x3328))+(((-1.0)*(1.0)*py))+x3332+(((-1.0)*x3331*x3332)));
evalcond[2]=((((-1.0)*r11*x3337))+((r11*x3336))+((r10*x3335))+((r10*x3334))+x3333);
evalcond[3]=((((-1.0)*r01*x3337))+((r00*x3335))+((r00*x3334))+((r01*x3336))+(((-1.0)*x3338)));
evalcond[4]=(((r01*x3341))+((r00*x3339))+(((-1.0)*r00*x3342))+((r01*x3340)));
evalcond[5]=(((r11*x3340))+((r11*x3341))+(((-1.0)*r10*x3342))+((r10*x3339)));
evalcond[6]=((((-1.0)*sj11*x3338))+(((-1.0)*r10*x3346))+((r10*x3343))+((r11*x3345))+((r11*x3344)));
evalcond[7]=(((r01*x3344))+(((-1.0)*r00*x3346))+((r01*x3345))+(((-1.0)*sj11*x3333))+((r00*x3343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj15)))))+(IKabs(((1.0)+cj15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x3347=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3347);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3347);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=-3.14159265;
IkReal x3348=((6.9)*cj10);
IkReal x3349=(r10*x3348);
IkReal x3350=((6.9)*sj10);
IkReal x3351=(r00*x3350);
IkReal x3352=(cj12*sj11);
IkReal x3353=(r11*x3348);
IkReal x3354=(r01*x3350);
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=((IKabs((x3353+(((-1.0)*x3354))+(((100.0)*rxp1_2))+((x3352*x3354))+(((-1.0)*x3352*x3353)))))+(IKabs((((x3349*x3352))+(((-1.0)*x3349))+x3351+(((-1.0)*(100.0)*rxp0_2))+(((-1.0)*x3351*x3352))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3355=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3355);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3355);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=-3.14159265;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3356=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3356);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3356);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=-3.14159265;
IkReal x3357=(r22*sj14);
j16eval[0]=x3357;
j16eval[1]=IKsign(x3357);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3358=(cj10*cj12);
IkReal x3359=((6.9)*cj10*cj14);
IkReal x3360=((6.9)*cj10*sj14);
IkReal x3361=((100.0)*cj14*px);
IkReal x3362=((100.0)*px*sj14);
IkReal x3363=((6.9)*cj10*cj12*cj14*sj11);
IkReal x3364=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x3365 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3361))+((r01*x3358))+((r10*x3359))+((r11*x3360))+(((-1.0)*r10*x3363))+(((-1.0)*r11*x3362))+(((-1.0)*r11*x3364)))),IkReal((((r10*x3364))+((r10*x3362))+(((-1.0)*r10*x3360))+((r11*x3359))+(((-1.0)*r11*x3361))+(((-1.0)*r00*x3358))+(((-1.0)*r11*x3363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3365.valid){
continue;
}
CheckValue<IkReal> x3366=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x3366.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3365.value)+(((1.5707963267949)*(x3366.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3367=((0.069)*cj10);
IkReal x3368=IKsin(j16);
IkReal x3369=((0.01)*x3368);
IkReal x3370=IKcos(j16);
IkReal x3371=((0.01)*x3370);
IkReal x3372=(cj12*sj11);
IkReal x3373=((0.069)*sj10);
IkReal x3374=(cj10*cj12);
IkReal x3375=(cj14*x3370);
IkReal x3376=(sj14*x3368);
IkReal x3377=(sj14*x3370);
IkReal x3378=((1.0)*cj14*x3368);
IkReal x3379=((1.0)*cj12*sj10);
IkReal x3380=(cj14*sj13*x3368);
IkReal x3381=(cj14*sj13*x3370);
IkReal x3382=(sj13*sj14*x3368);
IkReal x3383=((1.0)*sj13*sj14*x3370);
IkReal x3384=(cj13*cj14*x3368);
IkReal x3385=(cj13*cj14*x3370);
IkReal x3386=(cj13*sj14*x3368);
IkReal x3387=((1.0)*cj13*sj14*x3370);
evalcond[0]=((((-1.0)*r01*x3371))+(((-1.0)*(1.0)*px))+(((-1.0)*x3367*x3372))+(((-1.0)*r00*x3369))+x3367);
evalcond[1]=((((-1.0)*x3372*x3373))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x3369))+(((-1.0)*r11*x3371))+x3373);
evalcond[2]=(((r10*x3375))+((r10*x3376))+(((-1.0)*r11*x3378))+((r11*x3377))+x3374);
evalcond[3]=(((r00*x3376))+(((-1.0)*x3379))+(((-1.0)*r01*x3378))+((r01*x3377))+((r00*x3375)));
evalcond[4]=(((r01*x3382))+((r01*x3381))+(((-1.0)*r00*x3383))+((r00*x3380)));
evalcond[5]=(((r11*x3382))+((r11*x3381))+((r10*x3380))+(((-1.0)*r10*x3383)));
evalcond[6]=((((-1.0)*r10*x3387))+((r11*x3386))+(((-1.0)*sj11*x3379))+((r11*x3385))+((r10*x3384)));
evalcond[7]=((((-1.0)*r00*x3387))+((r01*x3386))+(((-1.0)*sj11*x3374))+((r00*x3384))+((r01*x3385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3388=(cj10*cj12);
IkReal x3389=((100.0)*cj14*py);
IkReal x3390=((6.9)*cj14*sj10);
IkReal x3391=(r10*x3390);
IkReal x3392=((100.0)*py*sj14);
IkReal x3393=((6.9)*sj10*sj14);
IkReal x3394=(r11*x3393);
IkReal x3395=(cj12*sj11);
IkReal x3396=(r11*x3390);
IkReal x3397=(r10*x3393);
CheckValue<IkReal> x3398=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x3398.valid){
continue;
}
CheckValue<IkReal> x3399 = IKatan2WithCheck(IkReal(((((-1.0)*x3394*x3395))+((r11*x3388))+x3394+x3391+(((-1.0)*r10*x3389))+(((-1.0)*r11*x3392))+(((-1.0)*x3391*x3395)))),IkReal(((((-1.0)*r11*x3389))+x3396+(((-1.0)*x3395*x3396))+((r10*x3392))+(((-1.0)*r10*x3388))+((x3395*x3397))+(((-1.0)*x3397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3399.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3398.value)))+(x3399.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3400=((0.069)*cj10);
IkReal x3401=IKsin(j16);
IkReal x3402=((0.01)*x3401);
IkReal x3403=IKcos(j16);
IkReal x3404=((0.01)*x3403);
IkReal x3405=(cj12*sj11);
IkReal x3406=((0.069)*sj10);
IkReal x3407=(cj10*cj12);
IkReal x3408=(cj14*x3403);
IkReal x3409=(sj14*x3401);
IkReal x3410=(sj14*x3403);
IkReal x3411=((1.0)*cj14*x3401);
IkReal x3412=((1.0)*cj12*sj10);
IkReal x3413=(cj14*sj13*x3401);
IkReal x3414=(cj14*sj13*x3403);
IkReal x3415=(sj13*sj14*x3401);
IkReal x3416=((1.0)*sj13*sj14*x3403);
IkReal x3417=(cj13*cj14*x3401);
IkReal x3418=(cj13*cj14*x3403);
IkReal x3419=(cj13*sj14*x3401);
IkReal x3420=((1.0)*cj13*sj14*x3403);
evalcond[0]=((((-1.0)*r01*x3404))+(((-1.0)*(1.0)*px))+(((-1.0)*x3400*x3405))+x3400+(((-1.0)*r00*x3402)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x3404))+x3406+(((-1.0)*r10*x3402))+(((-1.0)*x3405*x3406)));
evalcond[2]=(((r10*x3409))+((r10*x3408))+((r11*x3410))+x3407+(((-1.0)*r11*x3411)));
evalcond[3]=(((r01*x3410))+((r00*x3409))+((r00*x3408))+(((-1.0)*x3412))+(((-1.0)*r01*x3411)));
evalcond[4]=((((-1.0)*r00*x3416))+((r01*x3415))+((r01*x3414))+((r00*x3413)));
evalcond[5]=(((r11*x3415))+((r11*x3414))+((r10*x3413))+(((-1.0)*r10*x3416)));
evalcond[6]=(((r10*x3417))+(((-1.0)*sj11*x3412))+((r11*x3419))+((r11*x3418))+(((-1.0)*r10*x3420)));
evalcond[7]=(((r01*x3419))+((r00*x3417))+(((-1.0)*r00*x3420))+((r01*x3418))+(((-1.0)*sj11*x3407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3421=((6.9)*sj10);
IkReal x3422=(cj12*sj11);
IkReal x3423=(x3421*x3422);
IkReal x3424=((6.9)*cj10);
IkReal x3425=(x3422*x3424);
CheckValue<IkReal> x3426=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3426.valid){
continue;
}
CheckValue<IkReal> x3427 = IKatan2WithCheck(IkReal((((r11*((x3424+(((-1.0)*x3425))))))+((r01*((x3423+(((-1.0)*x3421))))))+(((100.0)*rxp1_2)))),IkReal((((r10*((x3425+(((-1.0)*x3424))))))+((r00*(((((-1.0)*x3423))+x3421))))+(((-1.0)*(100.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3427.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3426.value)))+(x3427.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3428=((0.069)*cj10);
IkReal x3429=IKsin(j16);
IkReal x3430=((0.01)*x3429);
IkReal x3431=IKcos(j16);
IkReal x3432=((0.01)*x3431);
IkReal x3433=(cj12*sj11);
IkReal x3434=((0.069)*sj10);
IkReal x3435=(cj10*cj12);
IkReal x3436=(cj14*x3431);
IkReal x3437=(sj14*x3429);
IkReal x3438=(sj14*x3431);
IkReal x3439=((1.0)*cj14*x3429);
IkReal x3440=((1.0)*cj12*sj10);
IkReal x3441=(cj14*sj13*x3429);
IkReal x3442=(cj14*sj13*x3431);
IkReal x3443=(sj13*sj14*x3429);
IkReal x3444=((1.0)*sj13*sj14*x3431);
IkReal x3445=(cj13*cj14*x3429);
IkReal x3446=(cj13*cj14*x3431);
IkReal x3447=(cj13*sj14*x3429);
IkReal x3448=((1.0)*cj13*sj14*x3431);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*x3428*x3433))+(((-1.0)*r00*x3430))+x3428+(((-1.0)*r01*x3432)));
evalcond[1]=((((-1.0)*r10*x3430))+(((-1.0)*x3433*x3434))+(((-1.0)*(1.0)*py))+x3434+(((-1.0)*r11*x3432)));
evalcond[2]=(x3435+(((-1.0)*r11*x3439))+((r11*x3438))+((r10*x3437))+((r10*x3436)));
evalcond[3]=(((r00*x3436))+(((-1.0)*x3440))+((r01*x3438))+((r00*x3437))+(((-1.0)*r01*x3439)));
evalcond[4]=(((r01*x3442))+((r01*x3443))+(((-1.0)*r00*x3444))+((r00*x3441)));
evalcond[5]=(((r11*x3442))+((r11*x3443))+(((-1.0)*r10*x3444))+((r10*x3441)));
evalcond[6]=((((-1.0)*r10*x3448))+((r11*x3446))+(((-1.0)*sj11*x3440))+((r11*x3447))+((r10*x3445)));
evalcond[7]=(((r00*x3445))+((r01*x3446))+((r01*x3447))+(((-1.0)*r00*x3448))+(((-1.0)*sj11*x3435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs(((-1.0)+cj15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x3449=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3449);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3449);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x3450=((6.9)*cj10);
IkReal x3451=(r10*x3450);
IkReal x3452=((6.9)*sj10);
IkReal x3453=(r00*x3452);
IkReal x3454=(cj12*sj11);
IkReal x3455=(r11*x3450);
IkReal x3456=(r01*x3452);
j16eval[0]=r22;
j16eval[1]=((IKabs((((x3454*x3455))+x3456+(((-1.0)*x3455))+(((-1.0)*x3454*x3456))+(((-1.0)*(100.0)*rxp1_2)))))+(IKabs(((((-1.0)*x3451*x3454))+x3451+(((100.0)*rxp0_2))+(((-1.0)*x3453))+((x3453*x3454))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3457=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3457);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3457);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3458=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3458);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3458);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x3459=(r22*sj14);
j16eval[0]=x3459;
j16eval[1]=IKsign(x3459);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3460=(cj10*cj12);
IkReal x3461=((6.9)*cj10*cj14);
IkReal x3462=((6.9)*cj10*sj14);
IkReal x3463=((100.0)*cj14*px);
IkReal x3464=((100.0)*px*sj14);
IkReal x3465=((6.9)*cj10*cj12*cj14*sj11);
IkReal x3466=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x3467 = IKatan2WithCheck(IkReal((((r10*x3463))+((r11*x3462))+((r01*x3460))+(((-1.0)*r11*x3464))+((r10*x3465))+(((-1.0)*r10*x3461))+(((-1.0)*r11*x3466)))),IkReal((((r11*x3463))+(((-1.0)*r11*x3461))+(((-1.0)*r10*x3462))+((r11*x3465))+((r10*x3466))+((r10*x3464))+(((-1.0)*r00*x3460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3467.valid){
continue;
}
CheckValue<IkReal> x3468=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x3468.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3467.value)+(((-1.0)*(1.5707963267949)*(x3468.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3469=((0.069)*cj10);
IkReal x3470=IKsin(j16);
IkReal x3471=((0.01)*x3470);
IkReal x3472=IKcos(j16);
IkReal x3473=((0.01)*x3472);
IkReal x3474=(cj12*sj11);
IkReal x3475=((0.069)*sj10);
IkReal x3476=(cj10*cj12);
IkReal x3477=(cj14*x3472);
IkReal x3478=((1.0)*cj14*x3470);
IkReal x3479=((1.0)*sj14*x3470);
IkReal x3480=((1.0)*sj14*x3472);
IkReal x3481=((1.0)*cj12*sj10);
IkReal x3482=(sj13*sj14*x3470);
IkReal x3483=((1.0)*cj14*sj13*x3470);
IkReal x3484=((1.0)*cj14*sj13*x3472);
IkReal x3485=((1.0)*sj13*sj14*x3472);
IkReal x3486=(cj13*sj14*x3470);
IkReal x3487=((1.0)*cj13*cj14*x3470);
IkReal x3488=((1.0)*cj13*cj14*x3472);
IkReal x3489=((1.0)*cj13*sj14*x3472);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x3473))+x3469+((r00*x3471))+(((-1.0)*x3469*x3474)));
evalcond[1]=(x3475+((r11*x3473))+(((-1.0)*(1.0)*py))+((r10*x3471))+(((-1.0)*x3474*x3475)));
evalcond[2]=(x3476+(((-1.0)*r11*x3480))+((r10*x3477))+(((-1.0)*r10*x3479))+(((-1.0)*r11*x3478)));
evalcond[3]=((((-1.0)*r01*x3480))+((r00*x3477))+(((-1.0)*r01*x3478))+(((-1.0)*r00*x3479))+(((-1.0)*x3481)));
evalcond[4]=((((-1.0)*r00*x3483))+(((-1.0)*r00*x3485))+((r01*x3482))+(((-1.0)*r01*x3484)));
evalcond[5]=((((-1.0)*r10*x3483))+(((-1.0)*r10*x3485))+(((-1.0)*r11*x3484))+((r11*x3482)));
evalcond[6]=(((r11*x3486))+(((-1.0)*r10*x3487))+(((-1.0)*sj11*x3481))+(((-1.0)*r11*x3488))+(((-1.0)*r10*x3489)));
evalcond[7]=((((-1.0)*r00*x3487))+(((-1.0)*r00*x3489))+((r01*x3486))+(((-1.0)*r01*x3488))+(((-1.0)*sj11*x3476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3490=(cj10*cj12);
IkReal x3491=((100.0)*cj14*py);
IkReal x3492=((6.9)*cj14*sj10);
IkReal x3493=(r10*x3492);
IkReal x3494=((100.0)*py*sj14);
IkReal x3495=((6.9)*sj10*sj14);
IkReal x3496=(r11*x3495);
IkReal x3497=(cj12*sj11);
IkReal x3498=(r11*x3492);
IkReal x3499=(r10*x3495);
CheckValue<IkReal> x3500=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x3500.valid){
continue;
}
CheckValue<IkReal> x3501 = IKatan2WithCheck(IkReal((((r10*x3491))+x3496+((x3493*x3497))+(((-1.0)*x3496*x3497))+(((-1.0)*r11*x3494))+((r11*x3490))+(((-1.0)*x3493)))),IkReal((((x3497*x3499))+(((-1.0)*x3499))+(((-1.0)*x3498))+((r10*x3494))+((r11*x3491))+(((-1.0)*r10*x3490))+((x3497*x3498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3501.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3500.value)))+(x3501.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3502=((0.069)*cj10);
IkReal x3503=IKsin(j16);
IkReal x3504=((0.01)*x3503);
IkReal x3505=IKcos(j16);
IkReal x3506=((0.01)*x3505);
IkReal x3507=(cj12*sj11);
IkReal x3508=((0.069)*sj10);
IkReal x3509=(cj10*cj12);
IkReal x3510=(cj14*x3505);
IkReal x3511=((1.0)*cj14*x3503);
IkReal x3512=((1.0)*sj14*x3503);
IkReal x3513=((1.0)*sj14*x3505);
IkReal x3514=((1.0)*cj12*sj10);
IkReal x3515=(sj13*sj14*x3503);
IkReal x3516=((1.0)*cj14*sj13*x3503);
IkReal x3517=((1.0)*cj14*sj13*x3505);
IkReal x3518=((1.0)*sj13*sj14*x3505);
IkReal x3519=(cj13*sj14*x3503);
IkReal x3520=((1.0)*cj13*cj14*x3503);
IkReal x3521=((1.0)*cj13*cj14*x3505);
IkReal x3522=((1.0)*cj13*sj14*x3505);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x3506))+(((-1.0)*x3502*x3507))+((r00*x3504))+x3502);
evalcond[1]=((((-1.0)*(1.0)*py))+((r10*x3504))+((r11*x3506))+(((-1.0)*x3507*x3508))+x3508);
evalcond[2]=((((-1.0)*r11*x3511))+((r10*x3510))+(((-1.0)*r10*x3512))+(((-1.0)*r11*x3513))+x3509);
evalcond[3]=((((-1.0)*r00*x3512))+(((-1.0)*r01*x3511))+((r00*x3510))+(((-1.0)*x3514))+(((-1.0)*r01*x3513)));
evalcond[4]=((((-1.0)*r01*x3517))+((r01*x3515))+(((-1.0)*r00*x3518))+(((-1.0)*r00*x3516)));
evalcond[5]=((((-1.0)*r10*x3518))+(((-1.0)*r10*x3516))+((r11*x3515))+(((-1.0)*r11*x3517)));
evalcond[6]=((((-1.0)*r11*x3521))+(((-1.0)*r10*x3520))+(((-1.0)*sj11*x3514))+(((-1.0)*r10*x3522))+((r11*x3519)));
evalcond[7]=((((-1.0)*sj11*x3509))+(((-1.0)*r00*x3520))+(((-1.0)*r01*x3521))+((r01*x3519))+(((-1.0)*r00*x3522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3523=((6.9)*sj10);
IkReal x3524=(cj12*sj11);
IkReal x3525=(x3523*x3524);
IkReal x3526=((6.9)*cj10);
IkReal x3527=(x3524*x3526);
CheckValue<IkReal> x3528 = IKatan2WithCheck(IkReal((((r11*((x3527+(((-1.0)*x3526))))))+((r01*(((((-1.0)*x3525))+x3523))))+(((-1.0)*(100.0)*rxp1_2)))),IkReal(((((100.0)*rxp0_2))+((r00*(((((-1.0)*x3523))+x3525))))+((r10*(((((-1.0)*x3527))+x3526)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3528.valid){
continue;
}
CheckValue<IkReal> x3529=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3529.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3528.value)+(((1.5707963267949)*(x3529.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3530=((0.069)*cj10);
IkReal x3531=IKsin(j16);
IkReal x3532=((0.01)*x3531);
IkReal x3533=IKcos(j16);
IkReal x3534=((0.01)*x3533);
IkReal x3535=(cj12*sj11);
IkReal x3536=((0.069)*sj10);
IkReal x3537=(cj10*cj12);
IkReal x3538=(cj14*x3533);
IkReal x3539=((1.0)*cj14*x3531);
IkReal x3540=((1.0)*sj14*x3531);
IkReal x3541=((1.0)*sj14*x3533);
IkReal x3542=((1.0)*cj12*sj10);
IkReal x3543=(sj13*sj14*x3531);
IkReal x3544=((1.0)*cj14*sj13*x3531);
IkReal x3545=((1.0)*cj14*sj13*x3533);
IkReal x3546=((1.0)*sj13*sj14*x3533);
IkReal x3547=(cj13*sj14*x3531);
IkReal x3548=((1.0)*cj13*cj14*x3531);
IkReal x3549=((1.0)*cj13*cj14*x3533);
IkReal x3550=((1.0)*cj13*sj14*x3533);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*x3530*x3535))+x3530+((r01*x3534))+((r00*x3532)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*x3535*x3536))+((r11*x3534))+((r10*x3532))+x3536);
evalcond[2]=((((-1.0)*r11*x3541))+(((-1.0)*r10*x3540))+x3537+(((-1.0)*r11*x3539))+((r10*x3538)));
evalcond[3]=((((-1.0)*r00*x3540))+(((-1.0)*r01*x3541))+(((-1.0)*x3542))+(((-1.0)*r01*x3539))+((r00*x3538)));
evalcond[4]=((((-1.0)*r00*x3544))+((r01*x3543))+(((-1.0)*r00*x3546))+(((-1.0)*r01*x3545)));
evalcond[5]=((((-1.0)*r10*x3546))+(((-1.0)*r11*x3545))+(((-1.0)*r10*x3544))+((r11*x3543)));
evalcond[6]=(((r11*x3547))+(((-1.0)*sj11*x3542))+(((-1.0)*r11*x3549))+(((-1.0)*r10*x3550))+(((-1.0)*r10*x3548)));
evalcond[7]=((((-1.0)*r00*x3548))+(((-1.0)*r00*x3550))+(((-1.0)*r01*x3549))+((r01*x3547))+(((-1.0)*sj11*x3537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj15)))+(IKabs(((1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x3551=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3551);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3551);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x3552=((6.9)*cj10);
IkReal x3553=(r10*x3552);
IkReal x3554=((6.9)*sj10);
IkReal x3555=(r00*x3554);
IkReal x3556=(cj12*sj11);
IkReal x3557=(r11*x3552);
IkReal x3558=(r01*x3554);
j16eval[0]=r22;
j16eval[1]=((IKabs((x3558+((x3556*x3557))+(((-1.0)*x3556*x3558))+(((-1.0)*x3557))+(((-1.0)*(100.0)*rxp1_2)))))+(IKabs(((((-1.0)*x3553*x3556))+x3553+(((100.0)*rxp0_2))+(((-1.0)*x3555))+((x3555*x3556))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3559=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3559);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3559);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
j16eval[0]=cj14;
j16eval[1]=IKsign(cj14);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3560=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3560);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3560);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal x3561=(r22*sj14);
j16eval[0]=x3561;
j16eval[1]=IKsign(x3561);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3562=(cj10*cj12);
IkReal x3563=((6.9)*cj10*cj14);
IkReal x3564=((6.9)*cj10*sj14);
IkReal x3565=((100.0)*cj14*px);
IkReal x3566=((100.0)*px*sj14);
IkReal x3567=((6.9)*cj10*cj12*cj14*sj11);
IkReal x3568=((6.9)*cj10*cj12*sj11*sj14);
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3568))+((r11*x3564))+(((-1.0)*r11*x3566))+((r10*x3565))+((r01*x3562))+((r10*x3567))+(((-1.0)*r10*x3563)))),IkReal((((r10*x3568))+(((-1.0)*r11*x3563))+((r11*x3567))+((r10*x3566))+(((-1.0)*r00*x3562))+((r11*x3565))+(((-1.0)*r10*x3564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
CheckValue<IkReal> x3570=IKPowWithIntegerCheck(IKsign((r22*sj14)),-1);
if(!x3570.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3569.value)+(((-1.0)*(1.5707963267949)*(x3570.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3571=((0.069)*cj10);
IkReal x3572=IKsin(j16);
IkReal x3573=((0.01)*x3572);
IkReal x3574=IKcos(j16);
IkReal x3575=((0.01)*x3574);
IkReal x3576=(cj12*sj11);
IkReal x3577=((0.069)*sj10);
IkReal x3578=(cj10*cj12);
IkReal x3579=(cj14*x3574);
IkReal x3580=((1.0)*cj14*x3572);
IkReal x3581=((1.0)*sj14*x3572);
IkReal x3582=((1.0)*sj14*x3574);
IkReal x3583=((1.0)*cj12*sj10);
IkReal x3584=(sj13*sj14*x3572);
IkReal x3585=((1.0)*cj14*sj13*x3572);
IkReal x3586=((1.0)*cj14*sj13*x3574);
IkReal x3587=((1.0)*sj13*sj14*x3574);
IkReal x3588=(cj13*sj14*x3572);
IkReal x3589=((1.0)*cj13*cj14*x3572);
IkReal x3590=((1.0)*cj13*cj14*x3574);
IkReal x3591=((1.0)*cj13*sj14*x3574);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x3575))+x3571+(((-1.0)*x3571*x3576))+((r00*x3573)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r10*x3573))+((r11*x3575))+(((-1.0)*x3576*x3577))+x3577);
evalcond[2]=((((-1.0)*r10*x3581))+(((-1.0)*r11*x3580))+((r10*x3579))+(((-1.0)*r11*x3582))+x3578);
evalcond[3]=((((-1.0)*r00*x3581))+((r00*x3579))+(((-1.0)*x3583))+(((-1.0)*r01*x3580))+(((-1.0)*r01*x3582)));
evalcond[4]=((((-1.0)*r00*x3587))+(((-1.0)*r01*x3586))+(((-1.0)*r00*x3585))+((r01*x3584)));
evalcond[5]=((((-1.0)*r10*x3585))+((r11*x3584))+(((-1.0)*r10*x3587))+(((-1.0)*r11*x3586)));
evalcond[6]=(((r11*x3588))+(((-1.0)*r10*x3591))+(((-1.0)*sj11*x3583))+(((-1.0)*r10*x3589))+(((-1.0)*r11*x3590)));
evalcond[7]=((((-1.0)*sj11*x3578))+(((-1.0)*r00*x3589))+((r01*x3588))+(((-1.0)*r01*x3590))+(((-1.0)*r00*x3591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3592=(cj10*cj12);
IkReal x3593=((100.0)*cj14*py);
IkReal x3594=((6.9)*cj14*sj10);
IkReal x3595=(r10*x3594);
IkReal x3596=((100.0)*py*sj14);
IkReal x3597=((6.9)*sj10*sj14);
IkReal x3598=(r11*x3597);
IkReal x3599=(cj12*sj11);
IkReal x3600=(r11*x3594);
IkReal x3601=(r10*x3597);
CheckValue<IkReal> x3602=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x3602.valid){
continue;
}
CheckValue<IkReal> x3603 = IKatan2WithCheck(IkReal(((((-1.0)*x3598*x3599))+((x3595*x3599))+x3598+((r10*x3593))+((r11*x3592))+(((-1.0)*r11*x3596))+(((-1.0)*x3595)))),IkReal((((r11*x3593))+(((-1.0)*x3600))+((r10*x3596))+((x3599*x3600))+((x3599*x3601))+(((-1.0)*x3601))+(((-1.0)*r10*x3592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3603.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3602.value)))+(x3603.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3604=((0.069)*cj10);
IkReal x3605=IKsin(j16);
IkReal x3606=((0.01)*x3605);
IkReal x3607=IKcos(j16);
IkReal x3608=((0.01)*x3607);
IkReal x3609=(cj12*sj11);
IkReal x3610=((0.069)*sj10);
IkReal x3611=(cj10*cj12);
IkReal x3612=(cj14*x3607);
IkReal x3613=((1.0)*cj14*x3605);
IkReal x3614=((1.0)*sj14*x3605);
IkReal x3615=((1.0)*sj14*x3607);
IkReal x3616=((1.0)*cj12*sj10);
IkReal x3617=(sj13*sj14*x3605);
IkReal x3618=((1.0)*cj14*sj13*x3605);
IkReal x3619=((1.0)*cj14*sj13*x3607);
IkReal x3620=((1.0)*sj13*sj14*x3607);
IkReal x3621=(cj13*sj14*x3605);
IkReal x3622=((1.0)*cj13*cj14*x3605);
IkReal x3623=((1.0)*cj13*cj14*x3607);
IkReal x3624=((1.0)*cj13*sj14*x3607);
evalcond[0]=(((r00*x3606))+(((-1.0)*(1.0)*px))+((r01*x3608))+x3604+(((-1.0)*x3604*x3609)));
evalcond[1]=(((r11*x3608))+(((-1.0)*(1.0)*py))+x3610+((r10*x3606))+(((-1.0)*x3609*x3610)));
evalcond[2]=(x3611+(((-1.0)*r11*x3615))+(((-1.0)*r10*x3614))+(((-1.0)*r11*x3613))+((r10*x3612)));
evalcond[3]=((((-1.0)*x3616))+(((-1.0)*r00*x3614))+((r00*x3612))+(((-1.0)*r01*x3613))+(((-1.0)*r01*x3615)));
evalcond[4]=((((-1.0)*r00*x3620))+(((-1.0)*r01*x3619))+((r01*x3617))+(((-1.0)*r00*x3618)));
evalcond[5]=((((-1.0)*r11*x3619))+(((-1.0)*r10*x3620))+((r11*x3617))+(((-1.0)*r10*x3618)));
evalcond[6]=((((-1.0)*r10*x3624))+(((-1.0)*r11*x3623))+(((-1.0)*sj11*x3616))+((r11*x3621))+(((-1.0)*r10*x3622)));
evalcond[7]=((((-1.0)*r00*x3624))+(((-1.0)*r01*x3623))+(((-1.0)*r00*x3622))+((r01*x3621))+(((-1.0)*sj11*x3611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3625=((6.9)*sj10);
IkReal x3626=(cj12*sj11);
IkReal x3627=(x3625*x3626);
IkReal x3628=((6.9)*cj10);
IkReal x3629=(x3626*x3628);
CheckValue<IkReal> x3630 = IKatan2WithCheck(IkReal((((r01*(((((-1.0)*x3627))+x3625))))+((r11*(((((-1.0)*x3628))+x3629))))+(((-1.0)*(100.0)*rxp1_2)))),IkReal(((((100.0)*rxp0_2))+((r10*(((((-1.0)*x3629))+x3628))))+((r00*(((((-1.0)*x3625))+x3627)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3630.valid){
continue;
}
CheckValue<IkReal> x3631=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3631.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3630.value)+(((1.5707963267949)*(x3631.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3632=((0.069)*cj10);
IkReal x3633=IKsin(j16);
IkReal x3634=((0.01)*x3633);
IkReal x3635=IKcos(j16);
IkReal x3636=((0.01)*x3635);
IkReal x3637=(cj12*sj11);
IkReal x3638=((0.069)*sj10);
IkReal x3639=(cj10*cj12);
IkReal x3640=(cj14*x3635);
IkReal x3641=((1.0)*cj14*x3633);
IkReal x3642=((1.0)*sj14*x3633);
IkReal x3643=((1.0)*sj14*x3635);
IkReal x3644=((1.0)*cj12*sj10);
IkReal x3645=(sj13*sj14*x3633);
IkReal x3646=((1.0)*cj14*sj13*x3633);
IkReal x3647=((1.0)*cj14*sj13*x3635);
IkReal x3648=((1.0)*sj13*sj14*x3635);
IkReal x3649=(cj13*sj14*x3633);
IkReal x3650=((1.0)*cj13*cj14*x3633);
IkReal x3651=((1.0)*cj13*cj14*x3635);
IkReal x3652=((1.0)*cj13*sj14*x3635);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*x3632*x3637))+((r00*x3634))+x3632+((r01*x3636)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r10*x3634))+(((-1.0)*x3637*x3638))+((r11*x3636))+x3638);
evalcond[2]=((((-1.0)*r10*x3642))+x3639+(((-1.0)*r11*x3641))+((r10*x3640))+(((-1.0)*r11*x3643)));
evalcond[3]=((((-1.0)*r00*x3642))+(((-1.0)*r01*x3643))+((r00*x3640))+(((-1.0)*x3644))+(((-1.0)*r01*x3641)));
evalcond[4]=((((-1.0)*r01*x3647))+(((-1.0)*r00*x3646))+(((-1.0)*r00*x3648))+((r01*x3645)));
evalcond[5]=((((-1.0)*r11*x3647))+(((-1.0)*r10*x3646))+(((-1.0)*r10*x3648))+((r11*x3645)));
evalcond[6]=((((-1.0)*r10*x3650))+(((-1.0)*r10*x3652))+(((-1.0)*sj11*x3644))+(((-1.0)*r11*x3651))+((r11*x3649)));
evalcond[7]=((((-1.0)*r01*x3651))+(((-1.0)*r00*x3650))+(((-1.0)*sj11*x3639))+(((-1.0)*r00*x3652))+((r01*x3649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
IkReal x3653=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3653);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3653);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj14=0;
cj14=1.0;
j14=0;
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=cj12;
j16eval[3]=((cj10*cj10)+(sj10*sj10));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3654=(cj10*cj12);
IkReal x3655=(cj12*sj10);
CheckValue<IkReal> x3656 = IKatan2WithCheck(IkReal((((r10*x3655))+((r00*x3654)))),IkReal((((r01*x3654))+((r11*x3655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3656.valid){
continue;
}
CheckValue<IkReal> x3657=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3657.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3656.value)+(((1.5707963267949)*(x3657.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3658=(cj10*cj12);
IkReal x3659=IKcos(j16);
IkReal x3660=IKsin(j16);
IkReal x3661=((1.0)*x3660);
IkReal x3662=((1.0)*cj12*sj10);
IkReal x3663=((1.0)*cj13*sj15*x3660);
IkReal x3664=((1.0)*cj13*sj15*x3659);
IkReal x3665=((1.0)*cj15*sj13*x3660);
IkReal x3666=((1.0)*cj15*sj13*x3659);
IkReal x3667=(sj13*sj15*x3660);
IkReal x3668=(sj13*sj15*x3659);
IkReal x3669=((1.0)*cj13*cj15*x3660);
IkReal x3670=((1.0)*cj13*cj15*x3659);
IkReal x3671=((0.069)*cj10);
IkReal x3672=(cj12*sj11);
IkReal x3673=((0.01)*cj15*x3660);
IkReal x3674=((0.01)*cj15*x3659);
IkReal x3675=((0.37429)*sj15*x3660);
IkReal x3676=((0.37429)*sj15*x3659);
IkReal x3677=((0.069)*sj10);
evalcond[0]=((((-1.0)*r11*x3661))+x3658+((r10*x3659)));
evalcond[1]=((((-1.0)*r01*x3661))+((r00*x3659))+(((-1.0)*x3662)));
evalcond[2]=((((-1.0)*r00*x3665))+(((-1.0)*r01*x3666))+(((-1.0)*r01*x3664))+(((-1.0)*r00*x3663)));
evalcond[3]=((((-1.0)*r11*x3664))+(((-1.0)*r10*x3665))+(((-1.0)*r11*x3666))+(((-1.0)*r10*x3663)));
evalcond[4]=(((r11*x3668))+(((-1.0)*r10*x3669))+(((-1.0)*r11*x3670))+((r10*x3667))+(((-1.0)*sj11*x3662)));
evalcond[5]=((((-1.0)*sj11*x3658))+(((-1.0)*r00*x3669))+((r01*x3668))+((r00*x3667))+(((-1.0)*r01*x3670)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r00*x3673))+((r01*x3674))+x3671+(((-1.0)*r00*x3675))+(((-1.0)*r01*x3676))+(((-1.0)*x3671*x3672)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x3676))+(((-1.0)*r10*x3675))+((r10*x3673))+(((-1.0)*x3672*x3677))+x3677+((r11*x3674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
IkReal x3678=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3678);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3678);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj14=0;
cj14=-1.0;
j14=3.14159265358979;
j16eval[0]=r22;
j16eval[1]=IKsign(r22);
j16eval[2]=cj12;
j16eval[3]=((cj10*cj10)+(sj10*sj10));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3679=((1.0)*cj10*cj12);
IkReal x3680=((1.0)*cj12*sj10);
CheckValue<IkReal> x3681 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3680))+(((-1.0)*r00*x3679)))),IkReal(((((-1.0)*r01*x3679))+(((-1.0)*r11*x3680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3681.valid){
continue;
}
CheckValue<IkReal> x3682=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3682.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3681.value)+(((1.5707963267949)*(x3682.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3683=IKsin(j16);
IkReal x3684=IKcos(j16);
IkReal x3685=((1.0)*x3684);
IkReal x3686=((1.0)*sj10);
IkReal x3687=(cj15*sj13*x3683);
IkReal x3688=(cj15*sj13*x3684);
IkReal x3689=((1.0)*cj13*sj15*x3683);
IkReal x3690=((1.0)*cj13*sj15*x3684);
IkReal x3691=((0.069)*cj10);
IkReal x3692=(cj12*sj11);
IkReal x3693=((0.01)*cj15*x3683);
IkReal x3694=((0.01)*cj15*x3684);
IkReal x3695=((0.37429)*sj15*x3683);
IkReal x3696=((0.37429)*sj15*x3684);
IkReal x3697=((0.069)*sj10);
IkReal x3698=((((-1.0)*(1.0)*j15))+j13);
IkReal x3699=IKcos(x3698);
IkReal x3700=(x3683*x3699);
IkReal x3701=(x3684*x3699);
CheckValue<IkReal> x3703=IKPowWithIntegerCheck(cj11,-1);
if(!x3703.valid){
continue;
}
IkReal x3702=(x3699*(x3703.value)*(r22*r22)*(IKsin(x3698)));
evalcond[0]=(((r11*x3683))+((cj10*cj12))+(((-1.0)*r10*x3685)));
evalcond[1]=((((-1.0)*r00*x3685))+((r01*x3683))+(((-1.0)*cj12*x3686)));
evalcond[2]=((((-1.0)*r00*x3689))+((r00*x3687))+((r01*x3688))+(((-1.0)*r01*x3690)));
evalcond[3]=((((-1.0)*r10*x3689))+((r11*x3688))+(((-1.0)*r11*x3690))+((r10*x3687)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((-1.0)*x3691*x3692))+(((-1.0)*r01*x3696))+(((-1.0)*r00*x3695))+x3691+((r00*x3693))+((r01*x3694)));
evalcond[5]=((((-1.0)*(1.0)*py))+((r10*x3693))+(((-1.0)*r11*x3696))+x3697+((r11*x3694))+(((-1.0)*r10*x3695))+(((-1.0)*x3692*x3697)));
evalcond[6]=(((r10*x3700))+((r11*x3701))+(((-1.0)*x3686*x3702)));
evalcond[7]=((((-1.0)*cj10*x3702))+((r00*x3700))+((r01*x3701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j15), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x3704=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3704);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3704);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
j16eval[0]=sj13;
j16eval[1]=IKsign(sj13);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3705=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3705);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3705);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x3706=(cj13*r22);
j16eval[0]=x3706;
j16eval[1]=IKsign(x3706);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x3707=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3707);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3707);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
j16eval[0]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3713=IKPowWithIntegerCheck(r22,-1);
if(!x3713.valid){
continue;
}
IkReal x3708=x3713.value;
IkReal x3709=((0.184349034171364)*sj10);
IkReal x3710=((0.184349034171364)*cj10);
IkReal x3711=((6900.0)*sj10);
IkReal x3712=((6900.0)*cj10);
if( IKabs((x3708*((((r11*(((((-1.0)*sj12*x3709))+x3710))))+((r01*(((((-1.0)*sj12*x3710))+(((-1.0)*x3709))))))+(((2.67172513291833)*rxp1_2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.67172513291833e-5)*x3708*(((((-1.0)*(100000.0)*rxp0_2))+((r00*((x3711+((sj12*x3712))))))+((r10*((((sj12*x3711))+(((-1.0)*x3712)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3708*((((r11*(((((-1.0)*sj12*x3709))+x3710))))+((r01*(((((-1.0)*sj12*x3710))+(((-1.0)*x3709))))))+(((2.67172513291833)*rxp1_2))))))+IKsqr(((2.67172513291833e-5)*x3708*(((((-1.0)*(100000.0)*rxp0_2))+((r00*((x3711+((sj12*x3712))))))+((r10*((((sj12*x3711))+(((-1.0)*x3712))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((x3708*((((r11*(((((-1.0)*sj12*x3709))+x3710))))+((r01*(((((-1.0)*sj12*x3710))+(((-1.0)*x3709))))))+(((2.67172513291833)*rxp1_2))))), ((2.67172513291833e-5)*x3708*(((((-1.0)*(100000.0)*rxp0_2))+((r00*((x3711+((sj12*x3712))))))+((r10*((((sj12*x3711))+(((-1.0)*x3712))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3714=((0.069)*cj10);
IkReal x3715=((0.069)*sj10);
IkReal x3716=IKsin(j16);
IkReal x3717=((0.37429)*x3716);
IkReal x3718=IKcos(j16);
IkReal x3719=((0.37429)*x3718);
IkReal x3720=(sj13*x3716);
IkReal x3721=((1.0)*r00);
IkReal x3722=(cj13*x3716);
IkReal x3723=((1.0)*cj13*x3718);
IkReal x3724=(sj13*x3718);
IkReal x3725=((1.0)*r10);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x3717))+x3714+(((-1.0)*r01*x3719))+(((-1.0)*sj12*x3715)));
evalcond[1]=(((sj12*x3714))+(((-1.0)*(1.0)*py))+x3715+(((-1.0)*r11*x3719))+(((-1.0)*r10*x3717)));
evalcond[2]=((((-1.0)*r01*x3723))+(((-1.0)*x3721*x3722))+(((-1.0)*x3721*x3724))+((r01*x3720)));
evalcond[3]=((((-1.0)*r11*x3723))+(((-1.0)*x3724*x3725))+((r11*x3720))+(((-1.0)*x3722*x3725)));
evalcond[4]=(((r10*x3720))+(((-1.0)*r10*x3723))+((cj10*sj12))+((r11*x3722))+((r11*x3724)));
evalcond[5]=(((r01*x3724))+(((-1.0)*cj13*x3718*x3721))+(((-1.0)*(1.0)*sj10*sj12))+((r01*x3722))+((r00*x3720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3726=((100000.0)*cj13*py);
IkReal x3727=((6900.0)*cj13*sj10);
IkReal x3728=((100000.0)*py*sj13);
IkReal x3729=((6900.0)*sj10*sj13);
IkReal x3730=((6900.0)*cj10*cj13*sj12);
IkReal x3731=((6900.0)*cj10*sj12*sj13);
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(IKsign((cj13*r22)),-1);
if(!x3732.valid){
continue;
}
CheckValue<IkReal> x3733 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3729))+((r01*x3726))+((r00*x3728))+(((-1.0)*r00*x3731))+(((-1.0)*r01*x3730))+(((-1.0)*r01*x3727)))),IkReal((((r01*x3728))+((r00*x3727))+(((-1.0)*r01*x3731))+(((-1.0)*r00*x3726))+(((-1.0)*r01*x3729))+((r00*x3730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3733.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3732.value)))+(x3733.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3734=((0.069)*cj10);
IkReal x3735=((0.069)*sj10);
IkReal x3736=IKsin(j16);
IkReal x3737=((0.37429)*x3736);
IkReal x3738=IKcos(j16);
IkReal x3739=((0.37429)*x3738);
IkReal x3740=(sj13*x3736);
IkReal x3741=((1.0)*r00);
IkReal x3742=(cj13*x3736);
IkReal x3743=((1.0)*cj13*x3738);
IkReal x3744=(sj13*x3738);
IkReal x3745=((1.0)*r10);
evalcond[0]=((((-1.0)*(1.0)*px))+x3734+(((-1.0)*sj12*x3735))+(((-1.0)*r01*x3739))+(((-1.0)*r00*x3737)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r10*x3737))+x3735+((sj12*x3734))+(((-1.0)*r11*x3739)));
evalcond[2]=(((r01*x3740))+(((-1.0)*x3741*x3742))+(((-1.0)*x3741*x3744))+(((-1.0)*r01*x3743)));
evalcond[3]=((((-1.0)*r11*x3743))+(((-1.0)*x3744*x3745))+(((-1.0)*x3742*x3745))+((r11*x3740)));
evalcond[4]=(((cj10*sj12))+(((-1.0)*r10*x3743))+((r10*x3740))+((r11*x3742))+((r11*x3744)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+((r01*x3742))+((r01*x3744))+((r00*x3740))+(((-1.0)*cj13*x3738*x3741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3746=((6900.0)*cj10*cj13);
IkReal x3747=((6900.0)*cj10*sj13);
IkReal x3748=((100000.0)*cj13*px);
IkReal x3749=((100000.0)*px*sj13);
IkReal x3750=((6900.0)*cj13*sj10*sj12);
IkReal x3751=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x3752 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3747))+((r00*x3751))+((r00*x3749))+((r01*x3748))+((r01*x3750))+(((-1.0)*r01*x3746)))),IkReal(((((-1.0)*r01*x3747))+(((-1.0)*r00*x3748))+((r00*x3746))+((r01*x3749))+(((-1.0)*r00*x3750))+((r01*x3751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3752.valid){
continue;
}
CheckValue<IkReal> x3753=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x3753.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3752.value)+(((-1.0)*(1.5707963267949)*(x3753.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3754=((0.069)*cj10);
IkReal x3755=((0.069)*sj10);
IkReal x3756=IKsin(j16);
IkReal x3757=((0.37429)*x3756);
IkReal x3758=IKcos(j16);
IkReal x3759=((0.37429)*x3758);
IkReal x3760=(sj13*x3756);
IkReal x3761=((1.0)*r00);
IkReal x3762=(cj13*x3756);
IkReal x3763=((1.0)*cj13*x3758);
IkReal x3764=(sj13*x3758);
IkReal x3765=((1.0)*r10);
evalcond[0]=((((-1.0)*(1.0)*px))+x3754+(((-1.0)*sj12*x3755))+(((-1.0)*r00*x3757))+(((-1.0)*r01*x3759)));
evalcond[1]=((((-1.0)*(1.0)*py))+x3755+(((-1.0)*r10*x3757))+((sj12*x3754))+(((-1.0)*r11*x3759)));
evalcond[2]=((((-1.0)*x3761*x3762))+(((-1.0)*r01*x3763))+((r01*x3760))+(((-1.0)*x3761*x3764)));
evalcond[3]=(((r11*x3760))+(((-1.0)*x3764*x3765))+(((-1.0)*x3762*x3765))+(((-1.0)*r11*x3763)));
evalcond[4]=((((-1.0)*r10*x3763))+((r11*x3762))+((cj10*sj12))+((r10*x3760))+((r11*x3764)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+((r00*x3760))+((r01*x3764))+(((-1.0)*cj13*x3758*x3761))+((r01*x3762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j15), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x3766=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3766);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3766);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
j16eval[0]=sj13;
j16eval[1]=IKsign(sj13);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3767=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3767);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3767);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x3768=(cj13*r22);
j16eval[0]=x3768;
j16eval[1]=IKsign(x3768);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x3769=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3769);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3769);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=1.5707963267949;
sj15=1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
j16eval[0]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3775=IKPowWithIntegerCheck(r22,-1);
if(!x3775.valid){
continue;
}
IkReal x3770=x3775.value;
IkReal x3771=((0.184349034171364)*sj10);
IkReal x3772=((0.184349034171364)*cj10);
IkReal x3773=((6900.0)*sj10);
IkReal x3774=((6900.0)*cj10);
if( IKabs((x3770*((((r01*(((((-1.0)*x3771))+(((-1.0)*sj12*x3772))))))+((r11*((x3772+(((-1.0)*sj12*x3771))))))+(((2.67172513291833)*rxp1_2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.67172513291833e-5)*x3770*(((((-1.0)*(100000.0)*rxp0_2))+((r10*(((((-1.0)*x3774))+((sj12*x3773))))))+((r00*((x3773+((sj12*x3774)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3770*((((r01*(((((-1.0)*x3771))+(((-1.0)*sj12*x3772))))))+((r11*((x3772+(((-1.0)*sj12*x3771))))))+(((2.67172513291833)*rxp1_2))))))+IKsqr(((2.67172513291833e-5)*x3770*(((((-1.0)*(100000.0)*rxp0_2))+((r10*(((((-1.0)*x3774))+((sj12*x3773))))))+((r00*((x3773+((sj12*x3774))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2((x3770*((((r01*(((((-1.0)*x3771))+(((-1.0)*sj12*x3772))))))+((r11*((x3772+(((-1.0)*sj12*x3771))))))+(((2.67172513291833)*rxp1_2))))), ((2.67172513291833e-5)*x3770*(((((-1.0)*(100000.0)*rxp0_2))+((r10*(((((-1.0)*x3774))+((sj12*x3773))))))+((r00*((x3773+((sj12*x3774))))))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3776=((0.069)*cj10);
IkReal x3777=((0.069)*sj10);
IkReal x3778=IKsin(j16);
IkReal x3779=((0.37429)*x3778);
IkReal x3780=IKcos(j16);
IkReal x3781=((0.37429)*x3780);
IkReal x3782=(r00*sj13);
IkReal x3783=((1.0)*cj13*x3778);
IkReal x3784=((1.0)*cj13*x3780);
IkReal x3785=((1.0)*sj13*x3778);
IkReal x3786=(sj13*x3780);
IkReal x3787=(r10*x3778);
IkReal x3788=(cj13*x3780);
evalcond[0]=(x3776+(((-1.0)*(1.0)*px))+(((-1.0)*sj12*x3777))+(((-1.0)*r00*x3779))+(((-1.0)*r01*x3781)));
evalcond[1]=(x3777+(((-1.0)*(1.0)*py))+((sj12*x3776))+(((-1.0)*r10*x3779))+(((-1.0)*r11*x3781)));
evalcond[2]=((((-1.0)*r00*x3783))+(((-1.0)*r01*x3785))+(((-1.0)*r01*x3784))+((x3780*x3782)));
evalcond[3]=((((-1.0)*r11*x3784))+(((-1.0)*r11*x3785))+(((-1.0)*cj13*x3787))+((r10*x3786)));
evalcond[4]=(((r11*x3786))+((sj13*x3787))+((cj10*sj12))+(((-1.0)*r11*x3783))+((r10*x3788)));
evalcond[5]=((((-1.0)*r01*x3783))+(((-1.0)*(1.0)*sj10*sj12))+((x3778*x3782))+((r01*x3786))+((r00*x3788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3789=((100000.0)*cj13*py);
IkReal x3790=((6900.0)*cj13*sj10);
IkReal x3791=((100000.0)*py*sj13);
IkReal x3792=((6900.0)*sj10*sj13);
IkReal x3793=((6900.0)*cj10*cj13*sj12);
IkReal x3794=((6900.0)*cj10*sj12*sj13);
CheckValue<IkReal> x3795=IKPowWithIntegerCheck(IKsign((cj13*r22)),-1);
if(!x3795.valid){
continue;
}
CheckValue<IkReal> x3796 = IKatan2WithCheck(IkReal((((r01*x3789))+((r00*x3794))+((r00*x3792))+(((-1.0)*r01*x3793))+(((-1.0)*r01*x3790))+(((-1.0)*r00*x3791)))),IkReal((((r01*x3792))+(((-1.0)*r01*x3791))+((r00*x3790))+(((-1.0)*r00*x3789))+((r00*x3793))+((r01*x3794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3796.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3795.value)))+(x3796.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3797=((0.069)*cj10);
IkReal x3798=((0.069)*sj10);
IkReal x3799=IKsin(j16);
IkReal x3800=((0.37429)*x3799);
IkReal x3801=IKcos(j16);
IkReal x3802=((0.37429)*x3801);
IkReal x3803=(r00*sj13);
IkReal x3804=((1.0)*cj13*x3799);
IkReal x3805=((1.0)*cj13*x3801);
IkReal x3806=((1.0)*sj13*x3799);
IkReal x3807=(sj13*x3801);
IkReal x3808=(r10*x3799);
IkReal x3809=(cj13*x3801);
evalcond[0]=((((-1.0)*(1.0)*px))+x3797+(((-1.0)*r00*x3800))+(((-1.0)*r01*x3802))+(((-1.0)*sj12*x3798)));
evalcond[1]=(x3798+(((-1.0)*r10*x3800))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x3802))+((sj12*x3797)));
evalcond[2]=((((-1.0)*r01*x3806))+(((-1.0)*r00*x3804))+(((-1.0)*r01*x3805))+((x3801*x3803)));
evalcond[3]=((((-1.0)*r11*x3806))+(((-1.0)*cj13*x3808))+(((-1.0)*r11*x3805))+((r10*x3807)));
evalcond[4]=(((r10*x3809))+((r11*x3807))+((sj13*x3808))+((cj10*sj12))+(((-1.0)*r11*x3804)));
evalcond[5]=((((-1.0)*r01*x3804))+(((-1.0)*(1.0)*sj10*sj12))+((r00*x3809))+((x3799*x3803))+((r01*x3807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3810=((6900.0)*cj10*cj13);
IkReal x3811=((6900.0)*cj10*sj13);
IkReal x3812=((100000.0)*cj13*px);
IkReal x3813=((100000.0)*px*sj13);
IkReal x3814=((6900.0)*cj13*sj10*sj12);
IkReal x3815=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x3816=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x3816.valid){
continue;
}
CheckValue<IkReal> x3817 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3813))+((r00*x3811))+((r01*x3812))+(((-1.0)*r00*x3815))+((r01*x3814))+(((-1.0)*r01*x3810)))),IkReal(((((-1.0)*r00*x3814))+((r01*x3811))+(((-1.0)*r00*x3812))+((r00*x3810))+(((-1.0)*r01*x3813))+(((-1.0)*r01*x3815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3817.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3816.value)))+(x3817.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3818=((0.069)*cj10);
IkReal x3819=((0.069)*sj10);
IkReal x3820=IKsin(j16);
IkReal x3821=((0.37429)*x3820);
IkReal x3822=IKcos(j16);
IkReal x3823=((0.37429)*x3822);
IkReal x3824=(r00*sj13);
IkReal x3825=((1.0)*cj13*x3820);
IkReal x3826=((1.0)*cj13*x3822);
IkReal x3827=((1.0)*sj13*x3820);
IkReal x3828=(sj13*x3822);
IkReal x3829=(r10*x3820);
IkReal x3830=(cj13*x3822);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x3823))+(((-1.0)*r00*x3821))+x3818+(((-1.0)*sj12*x3819)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r10*x3821))+x3819+(((-1.0)*r11*x3823))+((sj12*x3818)));
evalcond[2]=((((-1.0)*r01*x3827))+(((-1.0)*r00*x3825))+((x3822*x3824))+(((-1.0)*r01*x3826)));
evalcond[3]=((((-1.0)*r11*x3826))+((r10*x3828))+(((-1.0)*cj13*x3829))+(((-1.0)*r11*x3827)));
evalcond[4]=(((r10*x3830))+((r11*x3828))+((cj10*sj12))+((sj13*x3829))+(((-1.0)*r11*x3825)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+((r00*x3830))+((r01*x3828))+((x3820*x3824))+(((-1.0)*r01*x3825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j15), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x3831=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3831);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3831);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x3832=((6900.0)*cj10);
IkReal x3833=((6900.0)*sj10);
IkReal x3834=((6900.0)*cj10*sj12);
IkReal x3835=((6900.0)*sj10*sj12);
j16eval[0]=r22;
j16eval[1]=((IKabs((((r01*x3833))+(((-1.0)*r11*x3832))+((r11*x3835))+(((-1.0)*(100000.0)*rxp1_2))+((r01*x3834)))))+(IKabs(((((-1.0)*r00*x3834))+(((-1.0)*r00*x3833))+(((-1.0)*r10*x3835))+((r10*x3832))+(((100000.0)*rxp0_2))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3836=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3836);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3836);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
j16eval[0]=sj13;
j16eval[1]=IKsign(sj13);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3837=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3837);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3837);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x3838=(cj13*r22);
j16eval[0]=x3838;
j16eval[1]=IKsign(x3838);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3839=((6900.0)*cj10*cj13);
IkReal x3840=((6900.0)*cj10*sj13);
IkReal x3841=((100000.0)*cj13*px);
IkReal x3842=((100000.0)*px*sj13);
IkReal x3843=((6900.0)*cj13*sj10*sj12);
IkReal x3844=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x3845 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3842))+((r11*x3843))+((r10*x3840))+(((-1.0)*r11*x3839))+(((-1.0)*r10*x3844))+((r11*x3841)))),IkReal(((((-1.0)*r11*x3842))+(((-1.0)*r10*x3843))+((r11*x3840))+(((-1.0)*r10*x3841))+((r10*x3839))+(((-1.0)*r11*x3844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3845.valid){
continue;
}
CheckValue<IkReal> x3846=IKPowWithIntegerCheck(IKsign((cj13*r22)),-1);
if(!x3846.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3845.value)+(((1.5707963267949)*(x3846.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3847=((0.069)*cj10);
IkReal x3848=((0.069)*sj10);
IkReal x3849=IKsin(j16);
IkReal x3850=((0.37429)*x3849);
IkReal x3851=IKcos(j16);
IkReal x3852=((0.37429)*x3851);
IkReal x3853=(cj13*x3849);
IkReal x3854=(cj13*x3851);
IkReal x3855=(sj13*x3849);
IkReal x3856=((1.0)*r00);
IkReal x3857=((1.0)*sj13*x3851);
IkReal x3858=((1.0)*cj13*x3851);
evalcond[0]=((((-1.0)*(1.0)*px))+x3847+((r00*x3850))+((r01*x3852))+(((-1.0)*sj12*x3848)));
evalcond[1]=(((r10*x3850))+(((-1.0)*(1.0)*py))+x3848+((sj12*x3847))+((r11*x3852)));
evalcond[2]=(((r00*x3853))+((r01*x3855))+((r01*x3854))+(((-1.0)*sj13*x3851*x3856)));
evalcond[3]=((((-1.0)*r10*x3857))+((r11*x3854))+((r10*x3853))+((r11*x3855)));
evalcond[4]=(((r11*x3853))+(((-1.0)*r10*x3858))+((cj10*sj12))+(((-1.0)*r10*x3855))+(((-1.0)*r11*x3857)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*x3855*x3856))+(((-1.0)*r01*x3857))+(((-1.0)*r00*x3858))+((r01*x3853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3859=((6900.0)*cj10*cj13);
IkReal x3860=((6900.0)*cj10*sj13);
IkReal x3861=((100000.0)*cj13*px);
IkReal x3862=((100000.0)*px*sj13);
IkReal x3863=((6900.0)*cj13*sj10*sj12);
IkReal x3864=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x3865 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3864))+((r00*x3860))+((r01*x3861))+(((-1.0)*r01*x3859))+((r01*x3863))+(((-1.0)*r00*x3862)))),IkReal(((((-1.0)*r01*x3864))+(((-1.0)*r01*x3862))+((r00*x3859))+((r01*x3860))+(((-1.0)*r00*x3863))+(((-1.0)*r00*x3861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3865.valid){
continue;
}
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x3866.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3865.value)+(((-1.0)*(1.5707963267949)*(x3866.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3867=((0.069)*cj10);
IkReal x3868=((0.069)*sj10);
IkReal x3869=IKsin(j16);
IkReal x3870=((0.37429)*x3869);
IkReal x3871=IKcos(j16);
IkReal x3872=((0.37429)*x3871);
IkReal x3873=(cj13*x3869);
IkReal x3874=(cj13*x3871);
IkReal x3875=(sj13*x3869);
IkReal x3876=((1.0)*r00);
IkReal x3877=((1.0)*sj13*x3871);
IkReal x3878=((1.0)*cj13*x3871);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*sj12*x3868))+((r01*x3872))+((r00*x3870))+x3867);
evalcond[1]=(((r10*x3870))+(((-1.0)*(1.0)*py))+((sj12*x3867))+((r11*x3872))+x3868);
evalcond[2]=(((r00*x3873))+((r01*x3875))+((r01*x3874))+(((-1.0)*sj13*x3871*x3876)));
evalcond[3]=(((r11*x3874))+((r10*x3873))+((r11*x3875))+(((-1.0)*r10*x3877)));
evalcond[4]=((((-1.0)*r10*x3878))+((r11*x3873))+(((-1.0)*r11*x3877))+((cj10*sj12))+(((-1.0)*r10*x3875)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*r01*x3877))+(((-1.0)*r00*x3878))+((r01*x3873))+(((-1.0)*x3875*x3876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3879=((6900.0)*sj10);
IkReal x3880=((6900.0)*cj10);
IkReal x3881=(sj12*x3880);
IkReal x3882=(sj12*x3879);
CheckValue<IkReal> x3883=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3883.valid){
continue;
}
CheckValue<IkReal> x3884 = IKatan2WithCheck(IkReal((((r01*((x3879+x3881))))+((r11*(((((-1.0)*x3880))+x3882))))+(((-1.0)*(100000.0)*rxp1_2)))),IkReal((((r00*(((((-1.0)*x3879))+(((-1.0)*x3881))))))+((r10*(((((-1.0)*x3882))+x3880))))+(((100000.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3884.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3883.value)))+(x3884.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3885=((0.069)*cj10);
IkReal x3886=((0.069)*sj10);
IkReal x3887=IKsin(j16);
IkReal x3888=((0.37429)*x3887);
IkReal x3889=IKcos(j16);
IkReal x3890=((0.37429)*x3889);
IkReal x3891=(cj13*x3887);
IkReal x3892=(cj13*x3889);
IkReal x3893=(sj13*x3887);
IkReal x3894=((1.0)*r00);
IkReal x3895=((1.0)*sj13*x3889);
IkReal x3896=((1.0)*cj13*x3889);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x3890))+(((-1.0)*sj12*x3886))+x3885+((r00*x3888)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r11*x3890))+((r10*x3888))+((sj12*x3885))+x3886);
evalcond[2]=(((r01*x3892))+(((-1.0)*sj13*x3889*x3894))+((r01*x3893))+((r00*x3891)));
evalcond[3]=(((r11*x3892))+((r11*x3893))+(((-1.0)*r10*x3895))+((r10*x3891)));
evalcond[4]=((((-1.0)*r10*x3896))+(((-1.0)*r10*x3893))+((cj10*sj12))+((r11*x3891))+(((-1.0)*r11*x3895)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*r00*x3896))+(((-1.0)*r01*x3895))+(((-1.0)*x3893*x3894))+((r01*x3891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j15), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
IkReal x3897=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3897);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3897);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x3898=((6900.0)*cj10);
IkReal x3899=((6900.0)*sj10);
IkReal x3900=((6900.0)*cj10*sj12);
IkReal x3901=((6900.0)*sj10*sj12);
j16eval[0]=r22;
j16eval[1]=((IKabs((((r10*x3898))+(((-1.0)*r00*x3900))+(((-1.0)*r00*x3899))+(((100000.0)*rxp0_2))+(((-1.0)*r10*x3901)))))+(IKabs((((r01*x3900))+((r01*x3899))+(((-1.0)*r11*x3898))+((r11*x3901))+(((-1.0)*(100000.0)*rxp1_2))))));
j16eval[2]=IKsign(r22);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3902=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3902);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3902);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
j16eval[0]=sj13;
j16eval[1]=IKsign(sj13);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x3903=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x3903);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x3903);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j15=-1.5707963267949;
sj15=-1.0;
cj15=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x3904=(cj13*r22);
j16eval[0]=x3904;
j16eval[1]=IKsign(x3904);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3905=((6900.0)*cj10*cj13);
IkReal x3906=((6900.0)*cj10*sj13);
IkReal x3907=((100000.0)*cj13*px);
IkReal x3908=((100000.0)*px*sj13);
IkReal x3909=((6900.0)*cj13*sj10*sj12);
IkReal x3910=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x3911=IKPowWithIntegerCheck(IKsign((cj13*r22)),-1);
if(!x3911.valid){
continue;
}
CheckValue<IkReal> x3912 = IKatan2WithCheck(IkReal((((r11*x3907))+((r10*x3908))+((r11*x3909))+(((-1.0)*r11*x3905))+(((-1.0)*r10*x3906))+((r10*x3910)))),IkReal(((((-1.0)*r11*x3906))+((r11*x3908))+(((-1.0)*r10*x3907))+(((-1.0)*r10*x3909))+((r10*x3905))+((r11*x3910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3912.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3911.value)))+(x3912.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3913=((0.069)*cj10);
IkReal x3914=((0.069)*sj10);
IkReal x3915=IKsin(j16);
IkReal x3916=((0.37429)*x3915);
IkReal x3917=IKcos(j16);
IkReal x3918=((0.37429)*x3917);
IkReal x3919=(cj13*r00);
IkReal x3920=(cj13*x3917);
IkReal x3921=(sj13*x3917);
IkReal x3922=((1.0)*sj13*x3915);
IkReal x3923=((1.0)*cj13*x3915);
IkReal x3924=((1.0)*sj13*x3917);
evalcond[0]=((((-1.0)*(1.0)*px))+x3913+((r00*x3916))+(((-1.0)*sj12*x3914))+((r01*x3918)));
evalcond[1]=((((-1.0)*(1.0)*py))+x3914+((r10*x3916))+((r11*x3918))+((sj12*x3913)));
evalcond[2]=(((x3915*x3919))+(((-1.0)*r01*x3922))+((r00*x3921))+((r01*x3920)));
evalcond[3]=(((r10*x3921))+((cj13*r10*x3915))+((r11*x3920))+(((-1.0)*r11*x3922)));
evalcond[4]=((((-1.0)*r10*x3922))+((r10*x3920))+(((-1.0)*r11*x3924))+((cj10*sj12))+(((-1.0)*r11*x3923)));
evalcond[5]=((((-1.0)*r01*x3924))+(((-1.0)*(1.0)*sj10*sj12))+(((-1.0)*r01*x3923))+((x3917*x3919))+(((-1.0)*r00*x3922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3925=((6900.0)*cj10*cj13);
IkReal x3926=((6900.0)*cj10*sj13);
IkReal x3927=((100000.0)*cj13*px);
IkReal x3928=((100000.0)*px*sj13);
IkReal x3929=((6900.0)*cj13*sj10*sj12);
IkReal x3930=((6900.0)*sj10*sj12*sj13);
CheckValue<IkReal> x3931=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x3931.valid){
continue;
}
CheckValue<IkReal> x3932 = IKatan2WithCheck(IkReal((((r00*x3930))+(((-1.0)*r01*x3925))+((r01*x3927))+((r00*x3928))+(((-1.0)*r00*x3926))+((r01*x3929)))),IkReal((((r01*x3930))+(((-1.0)*r01*x3926))+((r00*x3925))+(((-1.0)*r00*x3927))+(((-1.0)*r00*x3929))+((r01*x3928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3932.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3931.value)))+(x3932.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3933=((0.069)*cj10);
IkReal x3934=((0.069)*sj10);
IkReal x3935=IKsin(j16);
IkReal x3936=((0.37429)*x3935);
IkReal x3937=IKcos(j16);
IkReal x3938=((0.37429)*x3937);
IkReal x3939=(cj13*r00);
IkReal x3940=(cj13*x3937);
IkReal x3941=(sj13*x3937);
IkReal x3942=((1.0)*sj13*x3935);
IkReal x3943=((1.0)*cj13*x3935);
IkReal x3944=((1.0)*sj13*x3937);
evalcond[0]=((((-1.0)*(1.0)*px))+x3933+((r00*x3936))+(((-1.0)*sj12*x3934))+((r01*x3938)));
evalcond[1]=(x3934+(((-1.0)*(1.0)*py))+((sj12*x3933))+((r10*x3936))+((r11*x3938)));
evalcond[2]=((((-1.0)*r01*x3942))+((r01*x3940))+((x3935*x3939))+((r00*x3941)));
evalcond[3]=((((-1.0)*r11*x3942))+((r10*x3941))+((r11*x3940))+((cj13*r10*x3935)));
evalcond[4]=((((-1.0)*r11*x3943))+(((-1.0)*r10*x3942))+((cj10*sj12))+(((-1.0)*r11*x3944))+((r10*x3940)));
evalcond[5]=((((-1.0)*(1.0)*sj10*sj12))+((x3937*x3939))+(((-1.0)*r01*x3943))+(((-1.0)*r00*x3942))+(((-1.0)*r01*x3944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3945=((6900.0)*sj10);
IkReal x3946=((6900.0)*cj10);
IkReal x3947=(sj12*x3946);
IkReal x3948=(sj12*x3945);
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal((((r01*((x3947+x3945))))+(((-1.0)*(100000.0)*rxp1_2))+((r11*(((((-1.0)*x3946))+x3948)))))),IkReal((((r10*(((((-1.0)*x3948))+x3946))))+((r00*(((((-1.0)*x3947))+(((-1.0)*x3945))))))+(((100000.0)*rxp0_2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
CheckValue<IkReal> x3950=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3950.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3949.value)+(((1.5707963267949)*(x3950.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3951=((0.069)*cj10);
IkReal x3952=((0.069)*sj10);
IkReal x3953=IKsin(j16);
IkReal x3954=((0.37429)*x3953);
IkReal x3955=IKcos(j16);
IkReal x3956=((0.37429)*x3955);
IkReal x3957=(cj13*r00);
IkReal x3958=(cj13*x3955);
IkReal x3959=(sj13*x3955);
IkReal x3960=((1.0)*sj13*x3953);
IkReal x3961=((1.0)*cj13*x3953);
IkReal x3962=((1.0)*sj13*x3955);
evalcond[0]=((((-1.0)*(1.0)*px))+((r00*x3954))+((r01*x3956))+(((-1.0)*sj12*x3952))+x3951);
evalcond[1]=((((-1.0)*(1.0)*py))+((r11*x3956))+((r10*x3954))+((sj12*x3951))+x3952);
evalcond[2]=(((r01*x3958))+((x3953*x3957))+((r00*x3959))+(((-1.0)*r01*x3960)));
evalcond[3]=((((-1.0)*r11*x3960))+((r11*x3958))+((cj13*r10*x3953))+((r10*x3959)));
evalcond[4]=((((-1.0)*r11*x3961))+(((-1.0)*r11*x3962))+((cj10*sj12))+(((-1.0)*r10*x3960))+((r10*x3958)));
evalcond[5]=((((-1.0)*r01*x3961))+(((-1.0)*r00*x3960))+(((-1.0)*(1.0)*sj10*sj12))+((x3955*x3957))+(((-1.0)*r01*x3962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3963=(cj14*sj13*sj14);
IkReal x3964=(cj10*cj11*cj14);
IkReal x3965=(cj10*cj11*cj15*sj14);
IkReal x3966=((1.0)*r01);
IkReal x3967=(cj10*cj12*cj13*sj15);
IkReal x3968=((1.0)*r00);
IkReal x3969=(cj10*cj12*sj13*sj14);
IkReal x3970=(cj10*cj12*cj14*cj15*sj13);
IkReal x3971=(cj13*sj10*sj11*sj12*sj15);
IkReal x3972=(sj10*sj11*sj12*sj13*sj14);
IkReal x3973=(cj14*cj15*sj10*sj11*sj12*sj13);
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(((((-1.0)*x3966*x3970))+(((-1.0)*x3968*x3969))+(((-1.0)*r11*x3965))+(((-1.0)*x3968*x3972))+(((-1.0)*x3966*x3971))+(((-1.0)*x3966*x3973))+(((-1.0)*x3966*x3967))+((r10*x3964)))),IkReal(((((-1.0)*x3966*x3969))+(((-1.0)*x3966*x3972))+((r00*x3973))+((r10*x3965))+((r11*x3964))+((r00*x3967))+((r00*x3971))+((r00*x3970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
CheckValue<IkReal> x3975=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*x3963))+((((cj15*sj14))*((cj13*sj15))))+((x3963*(cj15*cj15))))))),-1);
if(!x3975.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3974.value)+(((1.5707963267949)*(x3975.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x3976=(cj10*cj12);
IkReal x3977=IKcos(j16);
IkReal x3978=(cj14*x3977);
IkReal x3979=IKsin(j16);
IkReal x3980=((1.0)*cj14*x3979);
IkReal x3981=((1.0)*cj15*sj14*x3979);
IkReal x3982=((1.0)*cj15*sj14*x3977);
IkReal x3983=((1.0)*sj10);
IkReal x3984=(cj12*x3983);
IkReal x3985=(cj10*sj12);
IkReal x3986=((0.069)*cj10);
IkReal x3987=(cj10*cj11);
IkReal x3988=((0.069)*sj10);
IkReal x3989=(cj12*sj11);
IkReal x3990=((0.01)*cj15*x3979);
IkReal x3991=((0.01)*cj15*x3977);
IkReal x3992=((0.37429)*sj15*x3979);
IkReal x3993=((0.37429)*sj15*x3977);
IkReal x3994=(cj11*sj10);
IkReal x3995=(sj13*sj14*x3979);
IkReal x3996=((1.0)*cj13*r00);
IkReal x3997=(sj15*x3979);
IkReal x3998=((1.0)*cj13*sj15*x3977);
IkReal x3999=((1.0)*sj13*sj14*x3977);
IkReal x4000=((1.0)*cj14*cj15*sj13*x3979);
IkReal x4001=((1.0)*cj14*cj15*sj13*x3977);
IkReal x4002=((1.0)*cj13*r10);
IkReal x4003=(cj13*sj14*x3979);
IkReal x4004=(sj13*sj15*x3979);
IkReal x4005=(sj13*sj15*x3977);
IkReal x4006=(sj14*x3977);
IkReal x4007=((1.0)*cj13*cj14*cj15*x3979);
IkReal x4008=((1.0)*cj13*cj14*cj15*x3977);
evalcond[0]=((((-1.0)*r10*x3981))+((r10*x3978))+(((-1.0)*r11*x3980))+x3976+(((-1.0)*r11*x3982))+((sj10*sj11*sj12)));
evalcond[1]=((((-1.0)*r00*x3981))+(((-1.0)*x3984))+((r00*x3978))+(((-1.0)*r01*x3982))+(((-1.0)*r01*x3980))+((sj11*x3985)));
evalcond[2]=((((-1.0)*(1.0)*px))+((r00*x3990))+(((-1.0)*r00*x3992))+(((-1.0)*x3986*x3989))+x3986+((r01*x3991))+(((-1.0)*sj12*x3988))+(((0.36442)*x3987))+(((-1.0)*r01*x3993)));
evalcond[3]=(((r10*x3990))+(((-1.0)*(1.0)*py))+(((0.36442)*x3994))+(((-1.0)*r11*x3993))+(((-1.0)*x3988*x3989))+((r11*x3991))+x3988+(((-1.0)*r10*x3992))+((sj12*x3986)));
evalcond[4]=((((-1.0)*r01*x4001))+(((-1.0)*r00*x4000))+(((-1.0)*r00*x3999))+(((-1.0)*x3996*x3997))+(((-1.0)*x3987))+(((-1.0)*r01*x3998))+((r01*x3995)));
evalcond[5]=(((r11*x3995))+(((-1.0)*r10*x4000))+(((-1.0)*r10*x3999))+(((-1.0)*x3997*x4002))+(((-1.0)*r11*x3998))+(((-1.0)*r11*x4001))+(((-1.0)*x3994)));
evalcond[6]=((((-1.0)*r10*x4007))+(((-1.0)*sj11*x3984))+((r11*x4003))+((r11*x4005))+x3985+(((-1.0)*x4002*x4006))+((r10*x4004))+(((-1.0)*r11*x4008)));
evalcond[7]=((((-1.0)*x3996*x4006))+(((-1.0)*sj11*x3976))+((r01*x4003))+((r01*x4005))+((r00*x4004))+(((-1.0)*r00*x4007))+(((-1.0)*r01*x4008))+(((-1.0)*sj12*x3983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4009=((1.0)*cj13*sj15);
IkReal x4010=(cj10*cj11*cj14);
IkReal x4011=(cj13*sj15);
IkReal x4012=(r00*sj13*sj14);
IkReal x4013=(cj14*cj15);
IkReal x4014=(cj12*r01*sj10*sj13);
IkReal x4015=(cj10*r01*sj11*sj12);
IkReal x4016=((1.0)*cj10*sj11*sj12);
IkReal x4017=((1.0)*cj14*cj15*sj13);
IkReal x4018=(cj12*r00*sj10);
CheckValue<IkReal> x4019 = IKatan2WithCheck(IkReal(((((-1.0)*x4012*x4016))+((cj12*sj10*x4012))+(((-1.0)*x4009*x4015))+(((-1.0)*cj10*cj11*cj15*r01*sj14))+((cj12*r01*sj10*x4011))+((x4013*x4014))+(((-1.0)*x4015*x4017))+((r00*x4010)))),IkReal((((cj10*r00*sj11*sj12*sj13*x4013))+((((cj15*r00*sj14))*((cj10*cj11))))+(((-1.0)*x4009*x4018))+(((-1.0)*r01*sj13*sj14*x4016))+((r01*x4010))+((sj14*x4014))+((cj10*r00*sj11*sj12*x4011))+(((-1.0)*x4017*x4018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4019.valid){
continue;
}
CheckValue<IkReal> x4020=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj14*x4009))+(((-1.0)*cj15*sj13)))),-1);
if(!x4020.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4019.value)+(((1.5707963267949)*(x4020.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x4021=(cj10*cj12);
IkReal x4022=IKcos(j16);
IkReal x4023=(cj14*x4022);
IkReal x4024=IKsin(j16);
IkReal x4025=((1.0)*cj14*x4024);
IkReal x4026=((1.0)*cj15*sj14*x4024);
IkReal x4027=((1.0)*cj15*sj14*x4022);
IkReal x4028=((1.0)*sj10);
IkReal x4029=(cj12*x4028);
IkReal x4030=(cj10*sj12);
IkReal x4031=((0.069)*cj10);
IkReal x4032=(cj10*cj11);
IkReal x4033=((0.069)*sj10);
IkReal x4034=(cj12*sj11);
IkReal x4035=((0.01)*cj15*x4024);
IkReal x4036=((0.01)*cj15*x4022);
IkReal x4037=((0.37429)*sj15*x4024);
IkReal x4038=((0.37429)*sj15*x4022);
IkReal x4039=(cj11*sj10);
IkReal x4040=(sj13*sj14*x4024);
IkReal x4041=((1.0)*cj13*r00);
IkReal x4042=(sj15*x4024);
IkReal x4043=((1.0)*cj13*sj15*x4022);
IkReal x4044=((1.0)*sj13*sj14*x4022);
IkReal x4045=((1.0)*cj14*cj15*sj13*x4024);
IkReal x4046=((1.0)*cj14*cj15*sj13*x4022);
IkReal x4047=((1.0)*cj13*r10);
IkReal x4048=(cj13*sj14*x4024);
IkReal x4049=(sj13*sj15*x4024);
IkReal x4050=(sj13*sj15*x4022);
IkReal x4051=(sj14*x4022);
IkReal x4052=((1.0)*cj13*cj14*cj15*x4024);
IkReal x4053=((1.0)*cj13*cj14*cj15*x4022);
evalcond[0]=(((r10*x4023))+(((-1.0)*r10*x4026))+(((-1.0)*r11*x4027))+(((-1.0)*r11*x4025))+x4021+((sj10*sj11*sj12)));
evalcond[1]=((((-1.0)*r00*x4026))+(((-1.0)*x4029))+(((-1.0)*r01*x4025))+((sj11*x4030))+(((-1.0)*r01*x4027))+((r00*x4023)));
evalcond[2]=((((-1.0)*(1.0)*px))+((r00*x4035))+(((-1.0)*r01*x4038))+(((0.36442)*x4032))+(((-1.0)*x4031*x4034))+x4031+((r01*x4036))+(((-1.0)*sj12*x4033))+(((-1.0)*r00*x4037)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x4038))+(((-1.0)*x4033*x4034))+((r10*x4035))+((sj12*x4031))+x4033+(((0.36442)*x4039))+((r11*x4036))+(((-1.0)*r10*x4037)));
evalcond[4]=((((-1.0)*r01*x4046))+(((-1.0)*r01*x4043))+(((-1.0)*r00*x4044))+(((-1.0)*x4032))+((r01*x4040))+(((-1.0)*x4041*x4042))+(((-1.0)*r00*x4045)));
evalcond[5]=((((-1.0)*r10*x4044))+(((-1.0)*r11*x4043))+(((-1.0)*r11*x4046))+((r11*x4040))+(((-1.0)*r10*x4045))+(((-1.0)*x4039))+(((-1.0)*x4042*x4047)));
evalcond[6]=((((-1.0)*x4047*x4051))+((r10*x4049))+(((-1.0)*r11*x4053))+x4030+(((-1.0)*r10*x4052))+((r11*x4048))+((r11*x4050))+(((-1.0)*sj11*x4029)));
evalcond[7]=(((r01*x4050))+(((-1.0)*sj12*x4028))+((r00*x4049))+(((-1.0)*r00*x4052))+((r01*x4048))+(((-1.0)*r01*x4053))+(((-1.0)*sj11*x4021))+(((-1.0)*x4041*x4051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4054=cj14*cj14;
IkReal x4055=cj15*cj15;
IkReal x4056=(cj10*cj12*cj14);
IkReal x4057=(cj12*cj14*sj10);
IkReal x4058=(cj14*sj10*sj11*sj12);
IkReal x4059=((1.0)*r01);
IkReal x4060=(cj10*cj12*cj15*sj14);
IkReal x4061=((1.0)*cj10*cj14*sj11*sj12);
IkReal x4062=(cj12*cj15*sj10*sj14);
IkReal x4063=(cj10*cj15*sj11*sj12*sj14);
IkReal x4064=(cj15*sj10*sj11*sj12*sj14);
CheckValue<IkReal> x4065=IKPowWithIntegerCheck(IKsign((r22*((x4055+x4054+(((-1.0)*x4054*x4055)))))),-1);
if(!x4065.valid){
continue;
}
CheckValue<IkReal> x4066 = IKatan2WithCheck(IkReal((((r11*x4063))+(((-1.0)*r11*x4062))+(((-1.0)*x4059*x4060))+(((-1.0)*x4059*x4064))+((r10*x4057))+((r00*x4058))+((r00*x4056))+(((-1.0)*r10*x4061)))),IkReal(((((-1.0)*r10*x4063))+((r11*x4057))+((r01*x4058))+((r00*x4060))+((r01*x4056))+((r00*x4064))+(((-1.0)*r11*x4061))+((r10*x4062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4066.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4065.value)))+(x4066.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[8];
IkReal x4067=(cj10*cj12);
IkReal x4068=IKcos(j16);
IkReal x4069=(cj14*x4068);
IkReal x4070=IKsin(j16);
IkReal x4071=((1.0)*cj14*x4070);
IkReal x4072=((1.0)*cj15*sj14*x4070);
IkReal x4073=((1.0)*cj15*sj14*x4068);
IkReal x4074=((1.0)*sj10);
IkReal x4075=(cj12*x4074);
IkReal x4076=(cj10*sj12);
IkReal x4077=((0.069)*cj10);
IkReal x4078=(cj10*cj11);
IkReal x4079=((0.069)*sj10);
IkReal x4080=(cj12*sj11);
IkReal x4081=((0.01)*cj15*x4070);
IkReal x4082=((0.01)*cj15*x4068);
IkReal x4083=((0.37429)*sj15*x4070);
IkReal x4084=((0.37429)*sj15*x4068);
IkReal x4085=(cj11*sj10);
IkReal x4086=(sj13*sj14*x4070);
IkReal x4087=((1.0)*cj13*r00);
IkReal x4088=(sj15*x4070);
IkReal x4089=((1.0)*cj13*sj15*x4068);
IkReal x4090=((1.0)*sj13*sj14*x4068);
IkReal x4091=((1.0)*cj14*cj15*sj13*x4070);
IkReal x4092=((1.0)*cj14*cj15*sj13*x4068);
IkReal x4093=((1.0)*cj13*r10);
IkReal x4094=(cj13*sj14*x4070);
IkReal x4095=(sj13*sj15*x4070);
IkReal x4096=(sj13*sj15*x4068);
IkReal x4097=(sj14*x4068);
IkReal x4098=((1.0)*cj13*cj14*cj15*x4070);
IkReal x4099=((1.0)*cj13*cj14*cj15*x4068);
evalcond[0]=((((-1.0)*r11*x4071))+x4067+((r10*x4069))+(((-1.0)*r10*x4072))+(((-1.0)*r11*x4073))+((sj10*sj11*sj12)));
evalcond[1]=(((sj11*x4076))+(((-1.0)*x4075))+((r00*x4069))+(((-1.0)*r01*x4073))+(((-1.0)*r01*x4071))+(((-1.0)*r00*x4072)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*sj12*x4079))+(((-1.0)*r00*x4083))+(((-1.0)*x4077*x4080))+((r00*x4081))+(((0.36442)*x4078))+x4077+(((-1.0)*r01*x4084))+((r01*x4082)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-1.0)*x4079*x4080))+((r10*x4081))+x4079+((sj12*x4077))+(((0.36442)*x4085))+((r11*x4082))+(((-1.0)*r10*x4083))+(((-1.0)*r11*x4084)));
evalcond[4]=(((r01*x4086))+(((-1.0)*r01*x4089))+(((-1.0)*x4078))+(((-1.0)*r01*x4092))+(((-1.0)*r00*x4090))+(((-1.0)*r00*x4091))+(((-1.0)*x4087*x4088)));
evalcond[5]=((((-1.0)*r11*x4089))+(((-1.0)*r11*x4092))+(((-1.0)*r10*x4090))+(((-1.0)*x4088*x4093))+(((-1.0)*r10*x4091))+(((-1.0)*x4085))+((r11*x4086)));
evalcond[6]=(((r11*x4096))+(((-1.0)*sj11*x4075))+(((-1.0)*r11*x4099))+x4076+((r11*x4094))+(((-1.0)*r10*x4098))+(((-1.0)*x4093*x4097))+((r10*x4095)));
evalcond[7]=(((r01*x4096))+(((-1.0)*r01*x4099))+(((-1.0)*x4087*x4097))+((r00*x4095))+(((-1.0)*sj11*x4067))+(((-1.0)*r00*x4098))+((r01*x4094))+(((-1.0)*sj12*x4074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14, j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
IkReal x4100=((0.01)*cj15);
IkReal x4101=((0.37429)*sj15);
IkReal x4102=(((r21*x4100))+(((-1.0)*r21*x4101)));
IkReal x4103=((((-1.0)*r20*x4101))+((r20*x4100)));
CheckValue<IkReal> x4106 = IKatan2WithCheck(IkReal(x4102),IkReal(x4103),IKFAST_ATAN2_MAGTHRESH);
if(!x4106.valid){
continue;
}
IkReal x4104=((-1.0)*(x4106.value));
if((((x4103*x4103)+(x4102*x4102))) < -0.00001)
continue;
CheckValue<IkReal> x4107=IKPowWithIntegerCheck(IKabs(IKsqrt(((x4103*x4103)+(x4102*x4102)))),-1);
if(!x4107.valid){
continue;
}
if( (((x4107.value)*(((((-1.0)*(1.0)*pz))+(((0.37429)*cj15*r22))+(((-1.0)*(0.36442)*sj11))+(((-1.0)*(0.069)*cj11*cj12))+(((0.01)*r22*sj15)))))) < -1-IKFAST_SINCOS_THRESH || (((x4107.value)*(((((-1.0)*(1.0)*pz))+(((0.37429)*cj15*r22))+(((-1.0)*(0.36442)*sj11))+(((-1.0)*(0.069)*cj11*cj12))+(((0.01)*r22*sj15)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4105=IKasin(((x4107.value)*(((((-1.0)*(1.0)*pz))+(((0.37429)*cj15*r22))+(((-1.0)*(0.36442)*sj11))+(((-1.0)*(0.069)*cj11*cj12))+(((0.01)*r22*sj15))))));
j16array[0]=((((-1.0)*x4105))+x4104);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
j16array[1]=((3.14159265358979)+x4105+x4104);
sj16array[1]=IKsin(j16array[1]);
cj16array[1]=IKcos(j16array[1]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
if( j16array[1] > IKPI )
{
    j16array[1]-=IK2PI;
}
else if( j16array[1] < -IKPI )
{    j16array[1]+=IK2PI;
}
j16valid[1] = true;
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break;
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IkReal j14eval[2];
IkReal x4108=r21*r21;
IkReal x4109=((1.0)*sj13);
IkReal x4110=(x4108*x4109);
IkReal x4111=r22*r22;
IkReal x4112=((2.0)*cj16*r21*sj13);
IkReal x4113=(r20*sj16*x4112);
IkReal x4114=cj15*cj15;
IkReal x4115=(sj13*x4114);
IkReal x4116=cj16*cj16;
IkReal x4117=(cj15*r22*sj15);
IkReal x4118=r20*r20;
IkReal x4119=((1.0)*sj13*x4118);
IkReal x4120=((((-2.0)*r20*sj13*sj16*x4117))+((sj13*x4108*x4116))+(((-1.0)*x4110))+((x4115*x4116*x4118))+(((-1.0)*x4109*x4111))+(((-1.0)*x4113*x4114))+(((-1.0)*x4112*x4117))+(((-1.0)*x4110*x4114*x4116))+(((-1.0)*x4116*x4119))+x4113+(((-1.0)*x4114*x4119))+((x4111*x4115)));
j14eval[0]=x4120;
j14eval[1]=IKsign(x4120);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x4121=((1.0)*cj13);
IkReal x4122=r21*r21;
IkReal x4123=(x4121*x4122);
IkReal x4124=r22*r22;
IkReal x4125=((2.0)*cj13*cj16*r21);
IkReal x4126=(r20*sj16*x4125);
IkReal x4127=cj15*cj15;
IkReal x4128=(cj13*x4127);
IkReal x4129=cj16*cj16;
IkReal x4130=(cj15*r22*sj15);
IkReal x4131=r20*r20;
IkReal x4132=((1.0)*cj13*x4131);
IkReal x4133=((((-1.0)*x4127*x4132))+(((-1.0)*x4129*x4132))+(((-1.0)*x4125*x4130))+(((-1.0)*x4123*x4127*x4129))+((x4124*x4128))+(((-1.0)*x4126*x4127))+(((-1.0)*x4123))+((x4128*x4129*x4131))+(((-1.0)*x4121*x4124))+(((-2.0)*cj13*r20*sj16*x4130))+x4126+((cj13*x4122*x4129)));
j14eval[0]=x4133;
j14eval[1]=IKsign(x4133);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x4134=((10.5628985507246)*cj11);
IkReal x4135=(cj12*sj11);
IkReal x4136=cj11*cj11;
IkReal x4137=(x4136*(cj12*cj12));
IkReal x4138=((50289.96)*cj11);
j10eval[0]=((2.0)+(((-2.0)*x4135))+(((27.8937064482252)*x4136))+x4134+(((-1.0)*x4134*x4135))+(((-1.0)*x4137)));
j10eval[1]=IKsign(((9522.0)+(((132801.9364)*x4136))+x4138+(((-9522.0)*x4135))+(((-4761.0)*x4137))+(((-1.0)*x4135*x4138))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x4139=((1.0)+(((-1.0)*(1.0)*(cj11*cj11)*(cj12*cj12))));
j10eval[0]=x4139;
j10eval[1]=IKsign(x4139);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x4140=r21*r21;
IkReal x4141=r22*r22;
IkReal x4142=(cj16*r20);
IkReal x4143=((2.0)*r21*sj16*x4142);
IkReal x4144=cj15*cj15;
IkReal x4145=r20*r20;
IkReal x4146=(x4144*x4145);
IkReal x4147=cj16*cj16;
IkReal x4148=((2.0)*r22*sj15);
IkReal x4149=(cj15*cj16*r21);
IkReal x4150=(cj15*r20*sj16);
IkReal x4151=(x4140*x4147);
IkReal x4152=(((x4148*x4149))+((x4148*x4150))+((x4144*x4151))+(((-1.0)*x4151))+x4141+x4140+x4146+((x4143*x4144))+(((-1.0)*x4143))+(((-1.0)*x4146*x4147))+((x4145*x4147))+(((-1.0)*x4141*x4144)));
IkReal x4153=(r22*sj15);
IkReal x4154=(cj11*sj12);
IkReal x4155=(r21*sj16);
IkReal x4156=(cj16*sj11);
j14eval[0]=x4152;
j14eval[1]=IKsign(x4152);
j14eval[2]=((IKabs(((((-1.0)*cj11*sj12*x4142))+((x4154*x4155))+((sj11*x4150))+((sj11*x4153))+((cj15*r21*x4156)))))+(IKabs((((x4149*x4154))+((x4153*x4154))+((x4150*x4154))+(((-1.0)*sj11*x4155))+((r20*x4156))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x4157=(cj12*sj11);
IkReal x4158=(cj11*cj12*sj11);
IkReal x4159=((cj11*cj11)*(cj12*cj12));
j10eval[0]=((-1.0)+x4159+x4157+(((5.28144927536232)*x4158)));
j10eval[1]=IKsign(((-69.0)+(((69.0)*x4159))+(((364.42)*x4158))+(((69.0)*x4157))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4160=((0.863573439158322)*cj15);
IkReal x4161=((0.0230723086152)*sj15);
IkReal x4162=((0.0230723086152)*cj15*cj16);
IkReal x4163=((0.0230723086152)*cj15*sj16);
IkReal x4164=((0.863573439158322)*cj16*sj15);
IkReal x4165=((0.863573439158322)*sj15*sj16);
if( IKabs((((r10*x4165))+((r11*x4164))+(((-1.0)*r12*x4161))+(((-1.0)*r12*x4160))+(((-1.0)*r11*x4162))+(((2.30723086152)*py))+(((-1.0)*r10*x4163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x4164))+((r00*x4165))+(((-1.0)*r00*x4163))+(((2.30723086152)*px))+(((-1.0)*r01*x4162))+(((-1.0)*r02*x4160))+(((-1.0)*r02*x4161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x4165))+((r11*x4164))+(((-1.0)*r12*x4161))+(((-1.0)*r12*x4160))+(((-1.0)*r11*x4162))+(((2.30723086152)*py))+(((-1.0)*r10*x4163))))+IKsqr((((r01*x4164))+((r00*x4165))+(((-1.0)*r00*x4163))+(((2.30723086152)*px))+(((-1.0)*r01*x4162))+(((-1.0)*r02*x4160))+(((-1.0)*r02*x4161))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r10*x4165))+((r11*x4164))+(((-1.0)*r12*x4161))+(((-1.0)*r12*x4160))+(((-1.0)*r11*x4162))+(((2.30723086152)*py))+(((-1.0)*r10*x4163))), (((r01*x4164))+((r00*x4165))+(((-1.0)*r00*x4163))+(((2.30723086152)*px))+(((-1.0)*r01*x4162))+(((-1.0)*r02*x4160))+(((-1.0)*r02*x4161))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4166=((0.37429)*cj15);
IkReal x4167=((0.01)*sj15);
IkReal x4168=((0.01)*cj15*cj16);
IkReal x4169=((0.01)*cj15*sj16);
IkReal x4170=((0.37429)*cj16*sj15);
IkReal x4171=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+((r02*x4167))+((r01*x4168))+(((-1.0)*r00*x4171))+((r00*x4169))+(((-1.0)*r01*x4170))+(((0.43342)*(IKcos(j10))))+((r02*x4166)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((0.43342)*(IKsin(j10))))+((r11*x4168))+((r12*x4167))+(((-1.0)*r10*x4171))+(((-1.0)*r11*x4170))+((r10*x4169))+((r12*x4166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4172=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x4173=(cj16*sj10);
IkReal x4174=(sj10*sj16);
j14eval[0]=x4172;
j14eval[1]=((IKabs((((cj15*r20*x4174))+((r22*sj10*sj15))+((cj15*r21*x4173)))))+(IKabs((((r20*x4173))+(((-1.0)*r21*x4174))))));
j14eval[2]=IKsign(x4172);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4175=((1.0)*cj16);
IkReal x4176=((((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02))+(((-1.0)*r01*sj15*x4175)));
IkReal x4177=(cj10*r21);
IkReal x4178=(cj10*r20);
j14eval[0]=x4176;
j14eval[1]=((IKabs((((sj16*x4177))+(((-1.0)*x4175*x4178)))))+(IKabs((((cj15*cj16*x4177))+((cj10*r22*sj15))+((cj15*sj16*x4178))))));
j14eval[2]=IKsign(x4176);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4179=(r12*r22);
IkReal x4180=cj15*cj15;
IkReal x4181=(r10*r20);
IkReal x4182=(x4180*x4181);
IkReal x4183=cj16*cj16;
IkReal x4184=(r10*r21);
IkReal x4185=((1.0)*cj16*sj16);
IkReal x4186=(r11*r20);
IkReal x4187=(cj15*cj16);
IkReal x4188=(r12*sj15);
IkReal x4189=(cj15*sj16);
IkReal x4190=(r11*r21*x4183);
IkReal x4191=(cj16*sj16*x4180);
IkReal x4192=(x4179+((r10*r22*sj15*x4189))+((x4180*x4190))+(((-1.0)*x4179*x4180))+(((-1.0)*x4184*x4185))+(((-1.0)*x4185*x4186))+((x4181*x4183))+((cj15*r20*sj16*x4188))+(((-1.0)*x4182*x4183))+x4182+((x4186*x4191))+((cj15*cj16*r21*x4188))+((r11*r21))+(((-1.0)*x4190))+((x4184*x4191))+((r11*r22*sj15*x4187)));
IkReal x4193=(cj10*r21);
IkReal x4194=(cj10*r20);
j14eval[0]=x4192;
j14eval[1]=IKsign(x4192);
j14eval[2]=((IKabs((((sj16*x4193))+(((-1.0)*cj16*x4194)))))+(IKabs((((cj10*((r22*sj15))))+((x4189*x4194))+((x4187*x4193))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4195=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x4195;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x4195);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4196=((1.0)*sj16);
IkReal x4197=((((-1.0)*(1.0)*cj16*r21*sj15))+((cj15*r22))+(((-1.0)*r20*sj15*x4196)));
j14eval[0]=x4197;
j14eval[1]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs(((((-1.0)*r11*x4196))+((cj16*r10))))));
j14eval[2]=IKsign(x4197);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4198=r11*r11;
IkReal x4199=((1.0)*x4198);
IkReal x4200=r12*r12;
IkReal x4201=(r11*sj16);
IkReal x4202=((2.0)*cj16*r10*x4201);
IkReal x4203=cj15*cj15;
IkReal x4204=cj16*cj16;
IkReal x4205=((2.0)*r12*sj15);
IkReal x4206=(cj15*cj16*r11);
IkReal x4207=(cj15*r10*sj16);
IkReal x4208=r10*r10;
IkReal x4209=((1.0)*x4208);
IkReal x4210=(x4203*x4204);
IkReal x4211=(((x4198*x4204))+((x4208*x4210))+(((-1.0)*x4202*x4203))+(((-1.0)*x4200))+(((-1.0)*x4203*x4209))+((x4200*x4203))+(((-1.0)*x4199))+x4202+(((-1.0)*x4199*x4210))+(((-1.0)*x4205*x4207))+(((-1.0)*x4205*x4206))+(((-1.0)*x4204*x4209)));
j14eval[0]=x4211;
j14eval[1]=((IKabs((((r12*sj15))+x4206+x4207)))+(IKabs(((((-1.0)*x4201))+((cj16*r10))))));
j14eval[2]=IKsign(x4211);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4212=(r11*sj16);
IkReal x4213=(cj15*cj16*r11);
IkReal x4214=(cj15*r10*sj16);
IkReal x4215=r11*r11;
IkReal x4216=((1.0)*x4215);
IkReal x4217=r12*r12;
IkReal x4218=((2.0)*cj16*r10*x4212);
IkReal x4219=cj15*cj15;
IkReal x4220=cj16*cj16;
IkReal x4221=((2.0)*r12*sj15);
IkReal x4222=r10*r10;
IkReal x4223=((1.0)*x4222);
IkReal x4224=(x4219*x4220);
CheckValue<IkReal> x4225 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x4212)))),IkReal((((r12*sj15))+x4214+x4213)),IKFAST_ATAN2_MAGTHRESH);
if(!x4225.valid){
continue;
}
CheckValue<IkReal> x4226=IKPowWithIntegerCheck(IKsign((((x4215*x4220))+(((-1.0)*x4218*x4219))+(((-1.0)*x4216))+(((-1.0)*x4219*x4223))+((x4217*x4219))+(((-1.0)*x4214*x4221))+(((-1.0)*x4217))+(((-1.0)*x4220*x4223))+((x4222*x4224))+x4218+(((-1.0)*x4213*x4221))+(((-1.0)*x4216*x4224)))),-1);
if(!x4226.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4225.value)+(((1.5707963267949)*(x4226.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4227=IKcos(j14);
IkReal x4228=(cj16*x4227);
IkReal x4229=((1.0)*sj16*x4227);
IkReal x4230=(r22*sj15);
IkReal x4231=IKsin(j14);
IkReal x4232=((1.0)*x4231);
IkReal x4233=(cj15*r21);
IkReal x4234=((1.0)*cj16*x4231);
IkReal x4235=(cj15*r20);
IkReal x4236=((1.0)*sj16*x4231);
IkReal x4237=(r12*sj15);
IkReal x4238=(cj15*r11);
IkReal x4239=(cj15*r10);
IkReal x4240=(sj16*x4231);
IkReal x4241=((1.0)*x4227);
IkReal x4242=((1.0)*cj16*x4227);
IkReal x4243=(r02*sj15);
IkReal x4244=(cj15*r01);
IkReal x4245=(cj15*r00);
evalcond[0]=((((-1.0)*x4233*x4234))+(((-1.0)*r21*x4229))+(((-1.0)*x4235*x4236))+(((-1.0)*x4230*x4232))+((r20*x4228)));
evalcond[1]=((((-1.0)*r11*x4229))+(((-1.0)*x4236*x4239))+(((-1.0)*x4234*x4238))+((r10*x4228))+(((-1.0)*x4232*x4237)));
evalcond[2]=((((-1.0)*r20*x4234))+((r21*x4240))+(((-1.0)*x4233*x4242))+(((-1.0)*x4229*x4235))+(((-1.0)*x4230*x4241)));
evalcond[3]=((((-1.0)*x4229*x4245))+(((-1.0)*r00*x4234))+(((-1.0)*x4242*x4244))+(((-1.0)*x4241*x4243))+((r01*x4240)));
evalcond[4]=((-1.0)+(((-1.0)*x4234*x4244))+(((-1.0)*r01*x4229))+((r00*x4228))+(((-1.0)*x4232*x4243))+(((-1.0)*x4236*x4245)));
evalcond[5]=((-1.0)+(((-1.0)*x4237*x4241))+(((-1.0)*x4238*x4242))+(((-1.0)*x4229*x4239))+((r11*x4240))+(((-1.0)*r10*x4234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4246=((1.0)*sj16);
CheckValue<IkReal> x4247 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x4246)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4247.valid){
continue;
}
CheckValue<IkReal> x4248=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x4246))+((cj15*r22)))),-1);
if(!x4248.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4247.value)+(((1.5707963267949)*(x4248.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4249=IKcos(j14);
IkReal x4250=(cj16*x4249);
IkReal x4251=((1.0)*sj16*x4249);
IkReal x4252=(r22*sj15);
IkReal x4253=IKsin(j14);
IkReal x4254=((1.0)*x4253);
IkReal x4255=(cj15*r21);
IkReal x4256=((1.0)*cj16*x4253);
IkReal x4257=(cj15*r20);
IkReal x4258=((1.0)*sj16*x4253);
IkReal x4259=(r12*sj15);
IkReal x4260=(cj15*r11);
IkReal x4261=(cj15*r10);
IkReal x4262=(sj16*x4253);
IkReal x4263=((1.0)*x4249);
IkReal x4264=((1.0)*cj16*x4249);
IkReal x4265=(r02*sj15);
IkReal x4266=(cj15*r01);
IkReal x4267=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x4251))+(((-1.0)*x4252*x4254))+(((-1.0)*x4255*x4256))+((r20*x4250))+(((-1.0)*x4257*x4258)));
evalcond[1]=((((-1.0)*r11*x4251))+(((-1.0)*x4256*x4260))+((r10*x4250))+(((-1.0)*x4258*x4261))+(((-1.0)*x4254*x4259)));
evalcond[2]=((((-1.0)*x4255*x4264))+(((-1.0)*x4251*x4257))+((r21*x4262))+(((-1.0)*r20*x4256))+(((-1.0)*x4252*x4263)));
evalcond[3]=((((-1.0)*x4263*x4265))+((r01*x4262))+(((-1.0)*r00*x4256))+(((-1.0)*x4264*x4266))+(((-1.0)*x4251*x4267)));
evalcond[4]=((-1.0)+(((-1.0)*x4258*x4267))+((r00*x4250))+(((-1.0)*x4256*x4266))+(((-1.0)*x4254*x4265))+(((-1.0)*r01*x4251)));
evalcond[5]=((-1.0)+(((-1.0)*x4260*x4264))+(((-1.0)*r10*x4256))+(((-1.0)*x4259*x4263))+(((-1.0)*x4251*x4261))+((r11*x4262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4268 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4268.valid){
continue;
}
CheckValue<IkReal> x4269=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x4269.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4268.value)+(((1.5707963267949)*(x4269.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4270=IKcos(j14);
IkReal x4271=(cj16*x4270);
IkReal x4272=((1.0)*sj16*x4270);
IkReal x4273=(r22*sj15);
IkReal x4274=IKsin(j14);
IkReal x4275=((1.0)*x4274);
IkReal x4276=(cj15*r21);
IkReal x4277=((1.0)*cj16*x4274);
IkReal x4278=(cj15*r20);
IkReal x4279=((1.0)*sj16*x4274);
IkReal x4280=(r12*sj15);
IkReal x4281=(cj15*r11);
IkReal x4282=(cj15*r10);
IkReal x4283=(sj16*x4274);
IkReal x4284=((1.0)*x4270);
IkReal x4285=((1.0)*cj16*x4270);
IkReal x4286=(r02*sj15);
IkReal x4287=(cj15*r01);
IkReal x4288=(cj15*r00);
evalcond[0]=((((-1.0)*x4273*x4275))+(((-1.0)*x4278*x4279))+(((-1.0)*r21*x4272))+(((-1.0)*x4276*x4277))+((r20*x4271)));
evalcond[1]=((((-1.0)*x4277*x4281))+((r10*x4271))+(((-1.0)*x4279*x4282))+(((-1.0)*r11*x4272))+(((-1.0)*x4275*x4280)));
evalcond[2]=((((-1.0)*x4273*x4284))+(((-1.0)*r20*x4277))+(((-1.0)*x4276*x4285))+(((-1.0)*x4272*x4278))+((r21*x4283)));
evalcond[3]=(((r01*x4283))+(((-1.0)*r00*x4277))+(((-1.0)*x4284*x4286))+(((-1.0)*x4285*x4287))+(((-1.0)*x4272*x4288)));
evalcond[4]=((-1.0)+((r00*x4271))+(((-1.0)*x4277*x4287))+(((-1.0)*r01*x4272))+(((-1.0)*x4279*x4288))+(((-1.0)*x4275*x4286)));
evalcond[5]=((-1.0)+(((-1.0)*x4280*x4284))+(((-1.0)*x4272*x4282))+(((-1.0)*r10*x4277))+(((-1.0)*x4281*x4285))+((r11*x4283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4289=((1.0)*cj15);
IkReal x4290=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x4289)));
j14eval[0]=x4290;
j14eval[1]=((IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))))+(IKabs(((((-1.0)*r20*sj16*x4289))+(((-1.0)*cj16*r21*x4289))+(((-1.0)*(1.0)*r22*sj15))))));
j14eval[2]=IKsign(x4290);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4291=((1.0)*cj16);
IkReal x4292=((1.0)*sj15);
IkReal x4293=((((-1.0)*r21*sj15*x4291))+((cj15*r22))+(((-1.0)*r20*sj16*x4292)));
j14eval[0]=x4293;
j14eval[1]=((IKabs((((r11*sj16))+(((-1.0)*r10*x4291)))))+(IKabs(((((-1.0)*cj15*r11*x4291))+(((-1.0)*r12*x4292))+(((-1.0)*(1.0)*cj15*r10*sj16))))));
j14eval[2]=IKsign(x4293);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4294=r11*r11;
IkReal x4295=r12*r12;
IkReal x4296=(r11*sj16);
IkReal x4297=((2.0)*cj16*r10*x4296);
IkReal x4298=cj15*cj15;
IkReal x4299=r10*r10;
IkReal x4300=(x4298*x4299);
IkReal x4301=cj16*cj16;
IkReal x4302=((2.0)*r12*sj15);
IkReal x4303=(cj15*cj16*r11);
IkReal x4304=(cj15*r10*sj16);
IkReal x4305=(x4294*x4301);
IkReal x4306=(((x4302*x4304))+(((-1.0)*x4297))+x4295+x4294+(((-1.0)*x4295*x4298))+((x4299*x4301))+((x4302*x4303))+((x4298*x4305))+x4300+((x4297*x4298))+(((-1.0)*x4300*x4301))+(((-1.0)*x4305)));
j14eval[0]=x4306;
j14eval[1]=IKsign(x4306);
j14eval[2]=((IKabs((((r12*sj15))+x4304+x4303)))+(IKabs((((cj16*r10))+(((-1.0)*x4296))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4307=(r11*sj16);
IkReal x4308=(cj15*cj16*r11);
IkReal x4309=(cj15*r10*sj16);
IkReal x4310=r11*r11;
IkReal x4311=r12*r12;
IkReal x4312=((2.0)*cj16*r10*x4307);
IkReal x4313=cj15*cj15;
IkReal x4314=r10*r10;
IkReal x4315=(x4313*x4314);
IkReal x4316=cj16*cj16;
IkReal x4317=((2.0)*r12*sj15);
IkReal x4318=(x4310*x4316);
CheckValue<IkReal> x4319 = IKatan2WithCheck(IkReal(((((-1.0)*x4307))+((cj16*r10)))),IkReal((((r12*sj15))+x4308+x4309)),IKFAST_ATAN2_MAGTHRESH);
if(!x4319.valid){
continue;
}
CheckValue<IkReal> x4320=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4315*x4316))+((x4313*x4318))+(((-1.0)*x4318))+(((-1.0)*x4312))+((x4312*x4313))+x4315+x4310+x4311+(((-1.0)*x4311*x4313))+((x4314*x4316))+((x4308*x4317))+((x4309*x4317)))),-1);
if(!x4320.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4319.value)+(((1.5707963267949)*(x4320.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4321=IKcos(j14);
IkReal x4322=(cj16*x4321);
IkReal x4323=((1.0)*sj16*x4321);
IkReal x4324=(r22*sj15);
IkReal x4325=IKsin(j14);
IkReal x4326=((1.0)*x4325);
IkReal x4327=(cj15*r21);
IkReal x4328=((1.0)*cj16*x4325);
IkReal x4329=(cj15*r20);
IkReal x4330=((1.0)*sj16*x4325);
IkReal x4331=(r12*sj15);
IkReal x4332=(cj15*r11);
IkReal x4333=(cj15*r10);
IkReal x4334=(sj16*x4325);
IkReal x4335=((1.0)*x4321);
IkReal x4336=((1.0)*cj16*x4321);
IkReal x4337=(r02*sj15);
IkReal x4338=(cj15*r01);
IkReal x4339=(cj15*r00);
evalcond[0]=((((-1.0)*x4329*x4330))+(((-1.0)*x4324*x4326))+((r20*x4322))+(((-1.0)*x4327*x4328))+(((-1.0)*r21*x4323)));
evalcond[1]=(((r10*x4322))+(((-1.0)*x4328*x4332))+(((-1.0)*r11*x4323))+(((-1.0)*x4330*x4333))+(((-1.0)*x4326*x4331)));
evalcond[2]=((((-1.0)*x4327*x4336))+(((-1.0)*x4323*x4329))+(((-1.0)*r20*x4328))+(((-1.0)*x4324*x4335))+((r21*x4334)));
evalcond[3]=((((-1.0)*x4323*x4339))+(((-1.0)*x4335*x4337))+((r01*x4334))+(((-1.0)*x4336*x4338))+(((-1.0)*r00*x4328)));
evalcond[4]=((1.0)+(((-1.0)*x4328*x4338))+(((-1.0)*r01*x4323))+(((-1.0)*x4326*x4337))+((r00*x4322))+(((-1.0)*x4330*x4339)));
evalcond[5]=((1.0)+((r11*x4334))+(((-1.0)*x4332*x4336))+(((-1.0)*x4323*x4333))+(((-1.0)*x4331*x4335))+(((-1.0)*r10*x4328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4340=((1.0)*cj16);
IkReal x4341=((1.0)*sj15);
CheckValue<IkReal> x4342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj15*x4340))+(((-1.0)*r20*sj16*x4341))+((cj15*r22)))),-1);
if(!x4342.valid){
continue;
}
CheckValue<IkReal> x4343 = IKatan2WithCheck(IkReal((((r11*sj16))+(((-1.0)*r10*x4340)))),IkReal(((((-1.0)*r12*x4341))+(((-1.0)*cj15*r11*x4340))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4343.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4342.value)))+(x4343.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4344=IKcos(j14);
IkReal x4345=(cj16*x4344);
IkReal x4346=((1.0)*sj16*x4344);
IkReal x4347=(r22*sj15);
IkReal x4348=IKsin(j14);
IkReal x4349=((1.0)*x4348);
IkReal x4350=(cj15*r21);
IkReal x4351=((1.0)*cj16*x4348);
IkReal x4352=(cj15*r20);
IkReal x4353=((1.0)*sj16*x4348);
IkReal x4354=(r12*sj15);
IkReal x4355=(cj15*r11);
IkReal x4356=(cj15*r10);
IkReal x4357=(sj16*x4348);
IkReal x4358=((1.0)*x4344);
IkReal x4359=((1.0)*cj16*x4344);
IkReal x4360=(r02*sj15);
IkReal x4361=(cj15*r01);
IkReal x4362=(cj15*r00);
evalcond[0]=((((-1.0)*x4347*x4349))+(((-1.0)*x4350*x4351))+(((-1.0)*x4352*x4353))+(((-1.0)*r21*x4346))+((r20*x4345)));
evalcond[1]=((((-1.0)*x4353*x4356))+(((-1.0)*x4351*x4355))+(((-1.0)*x4349*x4354))+((r10*x4345))+(((-1.0)*r11*x4346)));
evalcond[2]=((((-1.0)*r20*x4351))+(((-1.0)*x4350*x4359))+((r21*x4357))+(((-1.0)*x4346*x4352))+(((-1.0)*x4347*x4358)));
evalcond[3]=((((-1.0)*x4358*x4360))+(((-1.0)*x4346*x4362))+((r01*x4357))+(((-1.0)*x4359*x4361))+(((-1.0)*r00*x4351)));
evalcond[4]=((1.0)+(((-1.0)*x4351*x4361))+(((-1.0)*r01*x4346))+((r00*x4345))+(((-1.0)*x4353*x4362))+(((-1.0)*x4349*x4360)));
evalcond[5]=((1.0)+(((-1.0)*x4354*x4358))+((r11*x4357))+(((-1.0)*x4355*x4359))+(((-1.0)*x4346*x4356))+(((-1.0)*r10*x4351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4363=((1.0)*cj15);
CheckValue<IkReal> x4364 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*r20*sj16*x4363))+(((-1.0)*cj16*r21*x4363))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4364.valid){
continue;
}
CheckValue<IkReal> x4365=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x4363)))),-1);
if(!x4365.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4364.value)+(((1.5707963267949)*(x4365.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4366=IKcos(j14);
IkReal x4367=(cj16*x4366);
IkReal x4368=((1.0)*sj16*x4366);
IkReal x4369=(r22*sj15);
IkReal x4370=IKsin(j14);
IkReal x4371=((1.0)*x4370);
IkReal x4372=(cj15*r21);
IkReal x4373=((1.0)*cj16*x4370);
IkReal x4374=(cj15*r20);
IkReal x4375=((1.0)*sj16*x4370);
IkReal x4376=(r12*sj15);
IkReal x4377=(cj15*r11);
IkReal x4378=(cj15*r10);
IkReal x4379=(sj16*x4370);
IkReal x4380=((1.0)*x4366);
IkReal x4381=((1.0)*cj16*x4366);
IkReal x4382=(r02*sj15);
IkReal x4383=(cj15*r01);
IkReal x4384=(cj15*r00);
evalcond[0]=((((-1.0)*x4374*x4375))+(((-1.0)*r21*x4368))+((r20*x4367))+(((-1.0)*x4372*x4373))+(((-1.0)*x4369*x4371)));
evalcond[1]=((((-1.0)*x4373*x4377))+(((-1.0)*x4371*x4376))+((r10*x4367))+(((-1.0)*r11*x4368))+(((-1.0)*x4375*x4378)));
evalcond[2]=((((-1.0)*x4372*x4381))+(((-1.0)*x4368*x4374))+((r21*x4379))+(((-1.0)*r20*x4373))+(((-1.0)*x4369*x4380)));
evalcond[3]=((((-1.0)*x4380*x4382))+((r01*x4379))+(((-1.0)*x4381*x4383))+(((-1.0)*x4368*x4384))+(((-1.0)*r00*x4373)));
evalcond[4]=((1.0)+((r00*x4367))+(((-1.0)*r01*x4368))+(((-1.0)*x4373*x4383))+(((-1.0)*x4375*x4384))+(((-1.0)*x4371*x4382)));
evalcond[5]=((1.0)+(((-1.0)*x4368*x4378))+((r11*x4379))+(((-1.0)*r10*x4373))+(((-1.0)*x4377*x4381))+(((-1.0)*x4376*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4385=((1.0)*cj15);
IkReal x4386=(((r20*sj15*sj16))+((cj16*r21*sj15))+(((-1.0)*r22*x4385)));
j14eval[0]=x4386;
j14eval[1]=IKsign(x4386);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*cj16*r01*x4385))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*r00*sj16*x4385))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4387=((1.0)*cj16);
IkReal x4388=((1.0)*sj15);
IkReal x4389=((((-1.0)*r00*sj16*x4388))+((cj15*r02))+(((-1.0)*r01*sj15*x4387)));
j14eval[0]=x4389;
j14eval[1]=((IKabs(((((-1.0)*r20*x4387))+((r21*sj16)))))+(IKabs(((((-1.0)*r22*x4388))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*cj15*r21*x4387))))));
j14eval[2]=IKsign(x4389);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4390=r01*r01;
IkReal x4391=((1.0)*x4390);
IkReal x4392=r02*r02;
IkReal x4393=(r01*sj16);
IkReal x4394=((2.0)*cj16*r00*x4393);
IkReal x4395=cj15*cj15;
IkReal x4396=cj16*cj16;
IkReal x4397=((2.0)*r02*sj15);
IkReal x4398=(cj15*cj16*r01);
IkReal x4399=(cj15*r00*sj16);
IkReal x4400=r00*r00;
IkReal x4401=((1.0)*x4400);
IkReal x4402=(x4395*x4396);
IkReal x4403=((((-1.0)*x4391))+((x4390*x4396))+(((-1.0)*x4392))+(((-1.0)*x4397*x4399))+((x4392*x4395))+(((-1.0)*x4396*x4401))+(((-1.0)*x4395*x4401))+(((-1.0)*x4391*x4402))+((x4400*x4402))+(((-1.0)*x4397*x4398))+x4394+(((-1.0)*x4394*x4395)));
j14eval[0]=x4403;
j14eval[1]=IKsign(x4403);
j14eval[2]=((IKabs(((((-1.0)*x4393))+((cj16*r00)))))+(IKabs((((r02*sj15))+x4398+x4399))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4404=(r01*sj16);
IkReal x4405=(cj15*cj16*r01);
IkReal x4406=(cj15*r00*sj16);
IkReal x4407=r01*r01;
IkReal x4408=((1.0)*x4407);
IkReal x4409=r02*r02;
IkReal x4410=((2.0)*cj16*r00*x4404);
IkReal x4411=cj15*cj15;
IkReal x4412=cj16*cj16;
IkReal x4413=((2.0)*r02*sj15);
IkReal x4414=r00*r00;
IkReal x4415=((1.0)*x4414);
IkReal x4416=(x4411*x4412);
CheckValue<IkReal> x4417=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4412*x4415))+((x4407*x4412))+(((-1.0)*x4410*x4411))+(((-1.0)*x4405*x4413))+(((-1.0)*x4408*x4416))+(((-1.0)*x4409))+((x4414*x4416))+(((-1.0)*x4411*x4415))+(((-1.0)*x4408))+((x4409*x4411))+(((-1.0)*x4406*x4413))+x4410)),-1);
if(!x4417.valid){
continue;
}
CheckValue<IkReal> x4418 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*x4404)))),IkReal((x4405+x4406+((r02*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4418.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4417.value)))+(x4418.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4419=IKcos(j14);
IkReal x4420=(cj16*x4419);
IkReal x4421=((1.0)*sj16*x4419);
IkReal x4422=(r22*sj15);
IkReal x4423=IKsin(j14);
IkReal x4424=((1.0)*x4423);
IkReal x4425=(cj15*r21);
IkReal x4426=((1.0)*cj16*x4423);
IkReal x4427=(cj15*r20);
IkReal x4428=((1.0)*sj16*x4423);
IkReal x4429=(r02*sj15);
IkReal x4430=(cj15*r01);
IkReal x4431=(cj15*r00);
IkReal x4432=(sj16*x4423);
IkReal x4433=((1.0)*x4419);
IkReal x4434=((1.0)*cj16*x4419);
IkReal x4435=(r12*sj15);
IkReal x4436=(cj15*r11);
IkReal x4437=(cj15*r10);
evalcond[0]=(((r20*x4420))+(((-1.0)*x4425*x4426))+(((-1.0)*x4422*x4424))+(((-1.0)*r21*x4421))+(((-1.0)*x4427*x4428)));
evalcond[1]=((((-1.0)*x4424*x4429))+((r00*x4420))+(((-1.0)*r01*x4421))+(((-1.0)*x4426*x4430))+(((-1.0)*x4428*x4431)));
evalcond[2]=((((-1.0)*x4421*x4427))+(((-1.0)*x4422*x4433))+(((-1.0)*r20*x4426))+((r21*x4432))+(((-1.0)*x4425*x4434)));
evalcond[3]=((((-1.0)*x4433*x4435))+(((-1.0)*x4434*x4436))+((r11*x4432))+(((-1.0)*x4421*x4437))+(((-1.0)*r10*x4426)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4421))+(((-1.0)*x4424*x4435))+(((-1.0)*x4426*x4436))+(((-1.0)*x4428*x4437))+((r10*x4420)));
evalcond[5]=((-1.0)+(((-1.0)*x4430*x4434))+(((-1.0)*r00*x4426))+(((-1.0)*x4421*x4431))+(((-1.0)*x4429*x4433))+((r01*x4432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4438=((1.0)*cj16);
IkReal x4439=((1.0)*sj15);
CheckValue<IkReal> x4440=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x4439))+(((-1.0)*r01*sj15*x4438))+((cj15*r02)))),-1);
if(!x4440.valid){
continue;
}
CheckValue<IkReal> x4441 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*r20*x4438)))),IkReal(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x4439))+(((-1.0)*cj15*r21*x4438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4441.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4440.value)))+(x4441.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4442=IKcos(j14);
IkReal x4443=(cj16*x4442);
IkReal x4444=((1.0)*sj16*x4442);
IkReal x4445=(r22*sj15);
IkReal x4446=IKsin(j14);
IkReal x4447=((1.0)*x4446);
IkReal x4448=(cj15*r21);
IkReal x4449=((1.0)*cj16*x4446);
IkReal x4450=(cj15*r20);
IkReal x4451=((1.0)*sj16*x4446);
IkReal x4452=(r02*sj15);
IkReal x4453=(cj15*r01);
IkReal x4454=(cj15*r00);
IkReal x4455=(sj16*x4446);
IkReal x4456=((1.0)*x4442);
IkReal x4457=((1.0)*cj16*x4442);
IkReal x4458=(r12*sj15);
IkReal x4459=(cj15*r11);
IkReal x4460=(cj15*r10);
evalcond[0]=((((-1.0)*x4445*x4447))+(((-1.0)*x4450*x4451))+(((-1.0)*r21*x4444))+((r20*x4443))+(((-1.0)*x4448*x4449)));
evalcond[1]=(((r00*x4443))+(((-1.0)*x4447*x4452))+(((-1.0)*r01*x4444))+(((-1.0)*x4451*x4454))+(((-1.0)*x4449*x4453)));
evalcond[2]=((((-1.0)*r20*x4449))+(((-1.0)*x4445*x4456))+(((-1.0)*x4448*x4457))+(((-1.0)*x4444*x4450))+((r21*x4455)));
evalcond[3]=((((-1.0)*x4456*x4458))+(((-1.0)*x4457*x4459))+(((-1.0)*r10*x4449))+(((-1.0)*x4444*x4460))+((r11*x4455)));
evalcond[4]=((1.0)+(((-1.0)*x4447*x4458))+((r10*x4443))+(((-1.0)*r11*x4444))+(((-1.0)*x4449*x4459))+(((-1.0)*x4451*x4460)));
evalcond[5]=((-1.0)+(((-1.0)*x4452*x4456))+((r01*x4455))+(((-1.0)*r00*x4449))+(((-1.0)*x4444*x4454))+(((-1.0)*x4453*x4457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4461=((1.0)*cj15);
CheckValue<IkReal> x4462 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*(1.0)*r02*sj15))+(((-1.0)*r00*sj16*x4461))+(((-1.0)*cj16*r01*x4461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4462.valid){
continue;
}
CheckValue<IkReal> x4463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x4461))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x4463.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4462.value)+(((1.5707963267949)*(x4463.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4464=IKcos(j14);
IkReal x4465=(cj16*x4464);
IkReal x4466=((1.0)*sj16*x4464);
IkReal x4467=(r22*sj15);
IkReal x4468=IKsin(j14);
IkReal x4469=((1.0)*x4468);
IkReal x4470=(cj15*r21);
IkReal x4471=((1.0)*cj16*x4468);
IkReal x4472=(cj15*r20);
IkReal x4473=((1.0)*sj16*x4468);
IkReal x4474=(r02*sj15);
IkReal x4475=(cj15*r01);
IkReal x4476=(cj15*r00);
IkReal x4477=(sj16*x4468);
IkReal x4478=((1.0)*x4464);
IkReal x4479=((1.0)*cj16*x4464);
IkReal x4480=(r12*sj15);
IkReal x4481=(cj15*r11);
IkReal x4482=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x4466))+(((-1.0)*x4470*x4471))+(((-1.0)*x4472*x4473))+((r20*x4465))+(((-1.0)*x4467*x4469)));
evalcond[1]=((((-1.0)*x4471*x4475))+((r00*x4465))+(((-1.0)*x4473*x4476))+(((-1.0)*r01*x4466))+(((-1.0)*x4469*x4474)));
evalcond[2]=((((-1.0)*r20*x4471))+(((-1.0)*x4466*x4472))+(((-1.0)*x4470*x4479))+((r21*x4477))+(((-1.0)*x4467*x4478)));
evalcond[3]=((((-1.0)*x4466*x4482))+(((-1.0)*r10*x4471))+(((-1.0)*x4479*x4481))+((r11*x4477))+(((-1.0)*x4478*x4480)));
evalcond[4]=((1.0)+(((-1.0)*x4471*x4481))+((r10*x4465))+(((-1.0)*r11*x4466))+(((-1.0)*x4473*x4482))+(((-1.0)*x4469*x4480)));
evalcond[5]=((-1.0)+(((-1.0)*x4474*x4478))+(((-1.0)*r00*x4471))+(((-1.0)*x4475*x4479))+((r01*x4477))+(((-1.0)*x4466*x4476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4483=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x4483;
j14eval[1]=IKsign(x4483);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4484=((1.0)*sj16);
IkReal x4485=((((-1.0)*r00*sj15*x4484))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
j14eval[0]=x4485;
j14eval[1]=IKsign(x4485);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*r21*x4484))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4486=r01*r01;
IkReal x4487=r02*r02;
IkReal x4488=(r01*sj16);
IkReal x4489=((2.0)*cj16*r00*x4488);
IkReal x4490=cj15*cj15;
IkReal x4491=r00*r00;
IkReal x4492=(x4490*x4491);
IkReal x4493=cj16*cj16;
IkReal x4494=((2.0)*r02*sj15);
IkReal x4495=(cj15*cj16*r01);
IkReal x4496=(cj15*r00*sj16);
IkReal x4497=(x4486*x4493);
IkReal x4498=(((x4489*x4490))+x4487+x4486+(((-1.0)*x4492*x4493))+x4492+((x4494*x4495))+(((-1.0)*x4489))+((x4494*x4496))+(((-1.0)*x4487*x4490))+(((-1.0)*x4497))+((x4490*x4497))+((x4491*x4493)));
j14eval[0]=x4498;
j14eval[1]=((IKabs((x4496+x4495+((r02*sj15)))))+(IKabs(((((-1.0)*x4488))+((cj16*r00))))));
j14eval[2]=IKsign(x4498);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4499=(r01*sj16);
IkReal x4500=(cj15*cj16*r01);
IkReal x4501=(cj15*r00*sj16);
IkReal x4502=r01*r01;
IkReal x4503=r02*r02;
IkReal x4504=((2.0)*cj16*r00*x4499);
IkReal x4505=cj15*cj15;
IkReal x4506=r00*r00;
IkReal x4507=(x4505*x4506);
IkReal x4508=cj16*cj16;
IkReal x4509=((2.0)*r02*sj15);
IkReal x4510=(x4502*x4508);
CheckValue<IkReal> x4511=IKPowWithIntegerCheck(IKsign((((x4505*x4510))+((x4506*x4508))+((x4504*x4505))+(((-1.0)*x4504))+x4507+x4503+x4502+(((-1.0)*x4507*x4508))+(((-1.0)*x4503*x4505))+(((-1.0)*x4510))+((x4500*x4509))+((x4501*x4509)))),-1);
if(!x4511.valid){
continue;
}
CheckValue<IkReal> x4512 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*x4499)))),IkReal((((r02*sj15))+x4501+x4500)),IKFAST_ATAN2_MAGTHRESH);
if(!x4512.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4511.value)))+(x4512.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4513=IKcos(j14);
IkReal x4514=(cj16*x4513);
IkReal x4515=((1.0)*sj16*x4513);
IkReal x4516=(r22*sj15);
IkReal x4517=IKsin(j14);
IkReal x4518=((1.0)*x4517);
IkReal x4519=(cj15*r21);
IkReal x4520=((1.0)*cj16*x4517);
IkReal x4521=(cj15*r20);
IkReal x4522=((1.0)*sj16*x4517);
IkReal x4523=(r02*sj15);
IkReal x4524=(cj15*r01);
IkReal x4525=(cj15*r00);
IkReal x4526=(sj16*x4517);
IkReal x4527=((1.0)*x4513);
IkReal x4528=((1.0)*cj16*x4513);
IkReal x4529=(r12*sj15);
IkReal x4530=(cj15*r11);
IkReal x4531=(cj15*r10);
evalcond[0]=((((-1.0)*x4521*x4522))+((r20*x4514))+(((-1.0)*r21*x4515))+(((-1.0)*x4519*x4520))+(((-1.0)*x4516*x4518)));
evalcond[1]=((((-1.0)*x4522*x4525))+(((-1.0)*x4520*x4524))+(((-1.0)*r01*x4515))+(((-1.0)*x4518*x4523))+((r00*x4514)));
evalcond[2]=((((-1.0)*x4516*x4527))+(((-1.0)*r20*x4520))+(((-1.0)*x4519*x4528))+((r21*x4526))+(((-1.0)*x4515*x4521)));
evalcond[3]=((((-1.0)*x4528*x4530))+((r11*x4526))+(((-1.0)*x4515*x4531))+(((-1.0)*r10*x4520))+(((-1.0)*x4527*x4529)));
evalcond[4]=((-1.0)+((r10*x4514))+(((-1.0)*x4522*x4531))+(((-1.0)*r11*x4515))+(((-1.0)*x4518*x4529))+(((-1.0)*x4520*x4530)));
evalcond[5]=((1.0)+(((-1.0)*x4523*x4527))+(((-1.0)*x4515*x4525))+(((-1.0)*r00*x4520))+((r01*x4526))+(((-1.0)*x4524*x4528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4532=((1.0)*sj16);
CheckValue<IkReal> x4533 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*r21*x4532)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4533.valid){
continue;
}
CheckValue<IkReal> x4534=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15*x4532))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x4534.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4533.value)+(((1.5707963267949)*(x4534.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4535=IKcos(j14);
IkReal x4536=(cj16*x4535);
IkReal x4537=((1.0)*sj16*x4535);
IkReal x4538=(r22*sj15);
IkReal x4539=IKsin(j14);
IkReal x4540=((1.0)*x4539);
IkReal x4541=(cj15*r21);
IkReal x4542=((1.0)*cj16*x4539);
IkReal x4543=(cj15*r20);
IkReal x4544=((1.0)*sj16*x4539);
IkReal x4545=(r02*sj15);
IkReal x4546=(cj15*r01);
IkReal x4547=(cj15*r00);
IkReal x4548=(sj16*x4539);
IkReal x4549=((1.0)*x4535);
IkReal x4550=((1.0)*cj16*x4535);
IkReal x4551=(r12*sj15);
IkReal x4552=(cj15*r11);
IkReal x4553=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x4537))+((r20*x4536))+(((-1.0)*x4543*x4544))+(((-1.0)*x4541*x4542))+(((-1.0)*x4538*x4540)));
evalcond[1]=((((-1.0)*x4544*x4547))+(((-1.0)*r01*x4537))+((r00*x4536))+(((-1.0)*x4540*x4545))+(((-1.0)*x4542*x4546)));
evalcond[2]=((((-1.0)*x4537*x4543))+(((-1.0)*r20*x4542))+(((-1.0)*x4541*x4550))+((r21*x4548))+(((-1.0)*x4538*x4549)));
evalcond[3]=((((-1.0)*x4537*x4553))+(((-1.0)*r10*x4542))+((r11*x4548))+(((-1.0)*x4550*x4552))+(((-1.0)*x4549*x4551)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4537))+(((-1.0)*x4544*x4553))+(((-1.0)*x4542*x4552))+(((-1.0)*x4540*x4551))+((r10*x4536)));
evalcond[5]=((1.0)+(((-1.0)*x4545*x4549))+((r01*x4548))+(((-1.0)*x4546*x4550))+(((-1.0)*r00*x4542))+(((-1.0)*x4537*x4547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4554 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4554.valid){
continue;
}
CheckValue<IkReal> x4555=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x4555.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4554.value)+(((1.5707963267949)*(x4555.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4556=IKcos(j14);
IkReal x4557=(cj16*x4556);
IkReal x4558=((1.0)*sj16*x4556);
IkReal x4559=(r22*sj15);
IkReal x4560=IKsin(j14);
IkReal x4561=((1.0)*x4560);
IkReal x4562=(cj15*r21);
IkReal x4563=((1.0)*cj16*x4560);
IkReal x4564=(cj15*r20);
IkReal x4565=((1.0)*sj16*x4560);
IkReal x4566=(r02*sj15);
IkReal x4567=(cj15*r01);
IkReal x4568=(cj15*r00);
IkReal x4569=(sj16*x4560);
IkReal x4570=((1.0)*x4556);
IkReal x4571=((1.0)*cj16*x4556);
IkReal x4572=(r12*sj15);
IkReal x4573=(cj15*r11);
IkReal x4574=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x4558))+(((-1.0)*x4559*x4561))+(((-1.0)*x4562*x4563))+(((-1.0)*x4564*x4565))+((r20*x4557)));
evalcond[1]=(((r00*x4557))+(((-1.0)*r01*x4558))+(((-1.0)*x4565*x4568))+(((-1.0)*x4563*x4567))+(((-1.0)*x4561*x4566)));
evalcond[2]=((((-1.0)*x4562*x4571))+(((-1.0)*r20*x4563))+(((-1.0)*x4558*x4564))+((r21*x4569))+(((-1.0)*x4559*x4570)));
evalcond[3]=(((r11*x4569))+(((-1.0)*x4558*x4574))+(((-1.0)*x4571*x4573))+(((-1.0)*x4570*x4572))+(((-1.0)*r10*x4563)));
evalcond[4]=((-1.0)+((r10*x4557))+(((-1.0)*x4561*x4572))+(((-1.0)*x4565*x4574))+(((-1.0)*r11*x4558))+(((-1.0)*x4563*x4573)));
evalcond[5]=((1.0)+(((-1.0)*x4566*x4570))+((r01*x4569))+(((-1.0)*x4567*x4571))+(((-1.0)*r00*x4563))+(((-1.0)*x4558*x4568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4575=(cj10*r21);
IkReal x4576=(cj15*cj16);
IkReal x4577=(cj10*r20);
IkReal x4578=(cj15*sj16);
IkReal x4579=(r12*r22);
IkReal x4580=cj15*cj15;
IkReal x4581=(r10*r20);
IkReal x4582=(x4580*x4581);
IkReal x4583=cj16*cj16;
IkReal x4584=(r10*r21);
IkReal x4585=((1.0)*cj16*sj16);
IkReal x4586=(r11*r20);
IkReal x4587=(r12*sj15);
IkReal x4588=(r11*r21*x4583);
IkReal x4589=(cj16*sj16*x4580);
CheckValue<IkReal> x4590=IKPowWithIntegerCheck(IKsign((((r10*r22*sj15*x4578))+((cj15*r20*sj16*x4587))+((x4581*x4583))+x4582+(((-1.0)*x4585*x4586))+(((-1.0)*x4579*x4580))+((x4586*x4589))+(((-1.0)*x4588))+((cj15*cj16*r21*x4587))+((x4580*x4588))+(((-1.0)*x4584*x4585))+x4579+((r11*r22*sj15*x4576))+((r11*r21))+(((-1.0)*x4582*x4583))+((x4584*x4589)))),-1);
if(!x4590.valid){
continue;
}
CheckValue<IkReal> x4591 = IKatan2WithCheck(IkReal((((x4575*x4576))+((cj10*((r22*sj15))))+((x4577*x4578)))),IkReal((((sj16*x4575))+(((-1.0)*cj16*x4577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4591.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4590.value)))+(x4591.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4592=IKcos(j14);
IkReal x4593=(cj16*x4592);
IkReal x4594=((1.0)*sj16*x4592);
IkReal x4595=(r22*sj15);
IkReal x4596=IKsin(j14);
IkReal x4597=((1.0)*x4596);
IkReal x4598=(cj15*r21);
IkReal x4599=((1.0)*cj16*x4596);
IkReal x4600=(cj15*r20);
IkReal x4601=((1.0)*sj16*x4596);
IkReal x4602=(sj16*x4596);
IkReal x4603=((1.0)*x4592);
IkReal x4604=((1.0)*cj16*x4592);
IkReal x4605=(r12*sj15);
IkReal x4606=(cj15*r11);
IkReal x4607=(cj15*r10);
IkReal x4608=((-1.0)*(((1.0)*sj10)));
IkReal x4609=(r02*sj15);
IkReal x4610=(cj15*r01);
IkReal x4611=(cj15*r00);
evalcond[0]=(((r20*x4593))+(((-1.0)*x4598*x4599))+(((-1.0)*r21*x4594))+(((-1.0)*x4600*x4601))+(((-1.0)*x4595*x4597)));
evalcond[1]=((((-1.0)*r20*x4599))+(((-1.0)*x4595*x4603))+(((-1.0)*x4598*x4604))+((r21*x4602))+(((-1.0)*x4594*x4600)));
evalcond[2]=((((-1.0)*x4599*x4606))+(((-1.0)*r11*x4594))+((r10*x4593))+cj10+(((-1.0)*x4601*x4607))+(((-1.0)*x4597*x4605)));
evalcond[3]=((((-1.0)*x4599*x4610))+(((-1.0)*x4601*x4611))+(((-1.0)*x4597*x4609))+(((-1.0)*r01*x4594))+((r00*x4593))+x4608);
evalcond[4]=((((-1.0)*x4603*x4609))+(((-1.0)*x4594*x4611))+(((-1.0)*x4604*x4610))+(((-1.0)*r00*x4599))+((r01*x4602))+(((-1.0)*(1.0)*cj10)));
evalcond[5]=((((-1.0)*x4604*x4606))+(((-1.0)*x4603*x4605))+((r11*x4602))+(((-1.0)*x4594*x4607))+(((-1.0)*r10*x4599))+x4608);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4612=((1.0)*sj15);
IkReal x4613=(cj10*r21);
IkReal x4614=((1.0)*cj10*r20);
CheckValue<IkReal> x4615 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*x4614))+((sj16*x4613)))),IkReal(((((-1.0)*cj10*r22*sj15))+(((-1.0)*cj15*cj16*x4613))+(((-1.0)*cj15*sj16*x4614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4615.valid){
continue;
}
CheckValue<IkReal> x4616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x4612))+(((-1.0)*cj16*r01*x4612))+((cj15*r02)))),-1);
if(!x4616.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4615.value)+(((1.5707963267949)*(x4616.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4617=IKcos(j14);
IkReal x4618=(cj16*x4617);
IkReal x4619=((1.0)*sj16*x4617);
IkReal x4620=(r22*sj15);
IkReal x4621=IKsin(j14);
IkReal x4622=((1.0)*x4621);
IkReal x4623=(cj15*r21);
IkReal x4624=((1.0)*cj16*x4621);
IkReal x4625=(cj15*r20);
IkReal x4626=((1.0)*sj16*x4621);
IkReal x4627=(sj16*x4621);
IkReal x4628=((1.0)*x4617);
IkReal x4629=((1.0)*cj16*x4617);
IkReal x4630=(r12*sj15);
IkReal x4631=(cj15*r11);
IkReal x4632=(cj15*r10);
IkReal x4633=((-1.0)*(((1.0)*sj10)));
IkReal x4634=(r02*sj15);
IkReal x4635=(cj15*r01);
IkReal x4636=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x4619))+(((-1.0)*x4625*x4626))+(((-1.0)*x4623*x4624))+((r20*x4618))+(((-1.0)*x4620*x4622)));
evalcond[1]=((((-1.0)*x4619*x4625))+((r21*x4627))+(((-1.0)*x4620*x4628))+(((-1.0)*x4623*x4629))+(((-1.0)*r20*x4624)));
evalcond[2]=(((r10*x4618))+cj10+(((-1.0)*r11*x4619))+(((-1.0)*x4624*x4631))+(((-1.0)*x4626*x4632))+(((-1.0)*x4622*x4630)));
evalcond[3]=((((-1.0)*x4624*x4635))+((r00*x4618))+(((-1.0)*x4622*x4634))+(((-1.0)*r01*x4619))+(((-1.0)*x4626*x4636))+x4633);
evalcond[4]=((((-1.0)*x4619*x4636))+((r01*x4627))+(((-1.0)*x4629*x4635))+(((-1.0)*(1.0)*cj10))+(((-1.0)*r00*x4624))+(((-1.0)*x4628*x4634)));
evalcond[5]=(((r11*x4627))+(((-1.0)*x4619*x4632))+(((-1.0)*x4628*x4630))+x4633+(((-1.0)*r10*x4624))+(((-1.0)*x4629*x4631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4637=(cj16*sj10);
IkReal x4638=(sj10*sj16);
CheckValue<IkReal> x4639 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4638))+((r20*x4637)))),IkReal((((r22*sj10*sj15))+((cj15*r21*x4637))+((cj15*r20*x4638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4639.valid){
continue;
}
CheckValue<IkReal> x4640=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x4640.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4639.value)+(((1.5707963267949)*(x4640.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4641=IKcos(j14);
IkReal x4642=(cj16*x4641);
IkReal x4643=((1.0)*sj16*x4641);
IkReal x4644=(r22*sj15);
IkReal x4645=IKsin(j14);
IkReal x4646=((1.0)*x4645);
IkReal x4647=(cj15*r21);
IkReal x4648=((1.0)*cj16*x4645);
IkReal x4649=(cj15*r20);
IkReal x4650=((1.0)*sj16*x4645);
IkReal x4651=(sj16*x4645);
IkReal x4652=((1.0)*x4641);
IkReal x4653=((1.0)*cj16*x4641);
IkReal x4654=(r12*sj15);
IkReal x4655=(cj15*r11);
IkReal x4656=(cj15*r10);
IkReal x4657=((-1.0)*(((1.0)*sj10)));
IkReal x4658=(r02*sj15);
IkReal x4659=(cj15*r01);
IkReal x4660=(cj15*r00);
evalcond[0]=((((-1.0)*x4644*x4646))+((r20*x4642))+(((-1.0)*x4647*x4648))+(((-1.0)*r21*x4643))+(((-1.0)*x4649*x4650)));
evalcond[1]=((((-1.0)*r20*x4648))+((r21*x4651))+(((-1.0)*x4643*x4649))+(((-1.0)*x4644*x4652))+(((-1.0)*x4647*x4653)));
evalcond[2]=(((r10*x4642))+(((-1.0)*x4646*x4654))+cj10+(((-1.0)*x4648*x4655))+(((-1.0)*x4650*x4656))+(((-1.0)*r11*x4643)));
evalcond[3]=(x4657+(((-1.0)*x4650*x4660))+((r00*x4642))+(((-1.0)*r01*x4643))+(((-1.0)*x4646*x4658))+(((-1.0)*x4648*x4659)));
evalcond[4]=((((-1.0)*r00*x4648))+(((-1.0)*x4643*x4660))+(((-1.0)*x4653*x4659))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x4652*x4658))+((r01*x4651)));
evalcond[5]=(x4657+((r11*x4651))+(((-1.0)*x4643*x4656))+(((-1.0)*r10*x4648))+(((-1.0)*x4653*x4655))+(((-1.0)*x4652*x4654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4661=((0.863573439158322)*cj15);
IkReal x4662=((0.0230723086152)*sj15);
IkReal x4663=((0.0230723086152)*cj15*cj16);
IkReal x4664=((0.0230723086152)*cj15*sj16);
IkReal x4665=((0.863573439158322)*cj16*sj15);
IkReal x4666=((0.863573439158322)*sj15*sj16);
if( IKabs(((((-1.0)*r12*x4662))+(((-1.0)*r10*x4664))+((r11*x4665))+(((-1.0)*r11*x4663))+(((-1.0)*r12*x4661))+(((2.30723086152)*py))+((r10*x4666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x4666))+(((-1.0)*r02*x4661))+(((-1.0)*r00*x4664))+(((2.30723086152)*px))+((r01*x4665))+(((-1.0)*r02*x4662))+(((-1.0)*r01*x4663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x4662))+(((-1.0)*r10*x4664))+((r11*x4665))+(((-1.0)*r11*x4663))+(((-1.0)*r12*x4661))+(((2.30723086152)*py))+((r10*x4666))))+IKsqr((((r00*x4666))+(((-1.0)*r02*x4661))+(((-1.0)*r00*x4664))+(((2.30723086152)*px))+((r01*x4665))+(((-1.0)*r02*x4662))+(((-1.0)*r01*x4663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r12*x4662))+(((-1.0)*r10*x4664))+((r11*x4665))+(((-1.0)*r11*x4663))+(((-1.0)*r12*x4661))+(((2.30723086152)*py))+((r10*x4666))), (((r00*x4666))+(((-1.0)*r02*x4661))+(((-1.0)*r00*x4664))+(((2.30723086152)*px))+((r01*x4665))+(((-1.0)*r02*x4662))+(((-1.0)*r01*x4663))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4667=((0.37429)*cj15);
IkReal x4668=((0.01)*sj15);
IkReal x4669=((0.01)*cj15*cj16);
IkReal x4670=((0.01)*cj15*sj16);
IkReal x4671=((0.37429)*cj16*sj15);
IkReal x4672=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+((r02*x4668))+((r00*x4670))+(((-1.0)*r01*x4671))+(((-1.0)*r00*x4672))+((r01*x4669))+((r02*x4667))+(((0.43342)*(IKcos(j10)))));
evalcond[1]=((((-1.0)*(1.0)*py))+(((0.43342)*(IKsin(j10))))+((r10*x4670))+(((-1.0)*r11*x4671))+((r11*x4669))+((r12*x4668))+((r12*x4667))+(((-1.0)*r10*x4672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4673=((1.0)*sj16);
IkReal x4674=((((-1.0)*r00*sj15*x4673))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
IkReal x4675=(cj10*cj16);
j14eval[0]=x4674;
j14eval[1]=IKsign(x4674);
j14eval[2]=((IKabs((((cj15*r21*x4675))+((cj10*r22*sj15))+((cj10*cj15*r20*sj16)))))+(IKabs(((((-1.0)*cj10*r21*x4673))+((r20*x4675))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4676=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x4677=(r21*sj10);
IkReal x4678=(r20*sj10);
j14eval[0]=x4676;
j14eval[1]=((IKabs((((r22*sj10*sj15))+((cj15*sj16*x4678))+((cj15*cj16*x4677)))))+(IKabs((((sj16*x4677))+(((-1.0)*cj16*x4678))))));
j14eval[2]=IKsign(x4676);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4679=(r02*r22);
IkReal x4680=cj15*cj15;
IkReal x4681=(r00*r20);
IkReal x4682=(x4680*x4681);
IkReal x4683=cj16*cj16;
IkReal x4684=(r00*r21);
IkReal x4685=((1.0)*cj16*sj16);
IkReal x4686=(r01*r20);
IkReal x4687=(cj15*cj16);
IkReal x4688=(r02*sj15);
IkReal x4689=(cj15*sj16);
IkReal x4690=(r01*r21*x4683);
IkReal x4691=(cj16*sj16*x4680);
IkReal x4692=(((cj15*r20*sj16*x4688))+(((-1.0)*x4682*x4683))+((cj15*cj16*r21*x4688))+(((-1.0)*x4679*x4680))+((x4681*x4683))+(((-1.0)*x4685*x4686))+x4679+(((-1.0)*x4690))+((x4680*x4690))+x4682+((r00*r22*sj15*x4689))+((r01*r21))+((r01*r22*sj15*x4687))+((x4686*x4691))+(((-1.0)*x4684*x4685))+((x4684*x4691)));
IkReal x4693=(r21*sj10);
IkReal x4694=(r20*sj10);
j14eval[0]=x4692;
j14eval[1]=IKsign(x4692);
j14eval[2]=((IKabs((((x4687*x4693))+((x4689*x4694))+((sj10*((r22*sj15)))))))+(IKabs((((sj16*x4693))+(((-1.0)*cj16*x4694))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4695=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x4695;
j14eval[1]=IKsign(x4695);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4696=((1.0)*sj16);
IkReal x4697=(((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15))+(((-1.0)*r00*sj15*x4696)));
j14eval[0]=x4697;
j14eval[1]=IKsign(x4697);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs(((((-1.0)*r21*x4696))+((cj16*r20))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4698=r01*r01;
IkReal x4699=((1.0)*x4698);
IkReal x4700=r02*r02;
IkReal x4701=(r01*sj16);
IkReal x4702=((2.0)*cj16*r00*x4701);
IkReal x4703=cj15*cj15;
IkReal x4704=cj16*cj16;
IkReal x4705=((2.0)*r02*sj15);
IkReal x4706=(cj15*cj16*r01);
IkReal x4707=(cj15*r00*sj16);
IkReal x4708=r00*r00;
IkReal x4709=((1.0)*x4708);
IkReal x4710=(x4703*x4704);
IkReal x4711=((((-1.0)*x4702*x4703))+(((-1.0)*x4699))+x4702+(((-1.0)*x4700))+(((-1.0)*x4704*x4709))+((x4698*x4704))+(((-1.0)*x4705*x4706))+((x4708*x4710))+(((-1.0)*x4703*x4709))+(((-1.0)*x4699*x4710))+((x4700*x4703))+(((-1.0)*x4705*x4707)));
j14eval[0]=x4711;
j14eval[1]=IKsign(x4711);
j14eval[2]=((IKabs((((r02*sj15))+x4706+x4707)))+(IKabs(((((-1.0)*x4701))+((cj16*r00))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4712=(r01*sj16);
IkReal x4713=(cj15*cj16*r01);
IkReal x4714=(cj15*r00*sj16);
IkReal x4715=r01*r01;
IkReal x4716=((1.0)*x4715);
IkReal x4717=r02*r02;
IkReal x4718=((2.0)*cj16*r00*x4712);
IkReal x4719=cj15*cj15;
IkReal x4720=cj16*cj16;
IkReal x4721=((2.0)*r02*sj15);
IkReal x4722=r00*r00;
IkReal x4723=((1.0)*x4722);
IkReal x4724=(x4719*x4720);
CheckValue<IkReal> x4725=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4720*x4723))+((x4717*x4719))+(((-1.0)*x4719*x4723))+(((-1.0)*x4716))+((x4715*x4720))+((x4722*x4724))+x4718+(((-1.0)*x4718*x4719))+(((-1.0)*x4716*x4724))+(((-1.0)*x4717))+(((-1.0)*x4713*x4721))+(((-1.0)*x4714*x4721)))),-1);
if(!x4725.valid){
continue;
}
CheckValue<IkReal> x4726 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*x4712)))),IkReal((((r02*sj15))+x4713+x4714)),IKFAST_ATAN2_MAGTHRESH);
if(!x4726.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4725.value)))+(x4726.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4727=IKcos(j14);
IkReal x4728=(cj16*x4727);
IkReal x4729=((1.0)*sj16*x4727);
IkReal x4730=(r22*sj15);
IkReal x4731=IKsin(j14);
IkReal x4732=((1.0)*x4731);
IkReal x4733=(cj15*r21);
IkReal x4734=((1.0)*cj16*x4731);
IkReal x4735=(cj15*r20);
IkReal x4736=((1.0)*sj16*x4731);
IkReal x4737=(r02*sj15);
IkReal x4738=(cj15*r01);
IkReal x4739=(cj15*r00);
IkReal x4740=(sj16*x4731);
IkReal x4741=((1.0)*x4727);
IkReal x4742=((1.0)*cj16*x4727);
IkReal x4743=(r12*sj15);
IkReal x4744=(cj15*r11);
IkReal x4745=(cj15*r10);
evalcond[0]=((((-1.0)*x4735*x4736))+(((-1.0)*x4730*x4732))+(((-1.0)*r21*x4729))+((r20*x4728))+(((-1.0)*x4733*x4734)));
evalcond[1]=((((-1.0)*x4734*x4738))+((r00*x4728))+(((-1.0)*x4732*x4737))+(((-1.0)*r01*x4729))+(((-1.0)*x4736*x4739)));
evalcond[2]=((((-1.0)*r20*x4734))+((r21*x4740))+(((-1.0)*x4733*x4742))+(((-1.0)*x4729*x4735))+(((-1.0)*x4730*x4741)));
evalcond[3]=((((-1.0)*x4742*x4744))+((r11*x4740))+(((-1.0)*r10*x4734))+(((-1.0)*x4741*x4743))+(((-1.0)*x4729*x4745)));
evalcond[4]=((-1.0)+((r10*x4728))+(((-1.0)*r11*x4729))+(((-1.0)*x4736*x4745))+(((-1.0)*x4734*x4744))+(((-1.0)*x4732*x4743)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x4734))+(((-1.0)*x4737*x4741))+((r01*x4740))+(((-1.0)*x4738*x4742))+(((-1.0)*x4729*x4739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4746=((1.0)*sj16);
CheckValue<IkReal> x4747 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4746))+((cj16*r20)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4747.valid){
continue;
}
CheckValue<IkReal> x4748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15*x4746))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x4748.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4747.value)+(((1.5707963267949)*(x4748.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4749=IKcos(j14);
IkReal x4750=(cj16*x4749);
IkReal x4751=((1.0)*sj16*x4749);
IkReal x4752=(r22*sj15);
IkReal x4753=IKsin(j14);
IkReal x4754=((1.0)*x4753);
IkReal x4755=(cj15*r21);
IkReal x4756=((1.0)*cj16*x4753);
IkReal x4757=(cj15*r20);
IkReal x4758=((1.0)*sj16*x4753);
IkReal x4759=(r02*sj15);
IkReal x4760=(cj15*r01);
IkReal x4761=(cj15*r00);
IkReal x4762=(sj16*x4753);
IkReal x4763=((1.0)*x4749);
IkReal x4764=((1.0)*cj16*x4749);
IkReal x4765=(r12*sj15);
IkReal x4766=(cj15*r11);
IkReal x4767=(cj15*r10);
evalcond[0]=((((-1.0)*x4752*x4754))+(((-1.0)*x4757*x4758))+((r20*x4750))+(((-1.0)*x4755*x4756))+(((-1.0)*r21*x4751)));
evalcond[1]=((((-1.0)*x4756*x4760))+(((-1.0)*x4758*x4761))+((r00*x4750))+(((-1.0)*r01*x4751))+(((-1.0)*x4754*x4759)));
evalcond[2]=((((-1.0)*x4751*x4757))+(((-1.0)*x4752*x4763))+((r21*x4762))+(((-1.0)*r20*x4756))+(((-1.0)*x4755*x4764)));
evalcond[3]=((((-1.0)*r10*x4756))+((r11*x4762))+(((-1.0)*x4751*x4767))+(((-1.0)*x4763*x4765))+(((-1.0)*x4764*x4766)));
evalcond[4]=((-1.0)+(((-1.0)*x4756*x4766))+(((-1.0)*x4754*x4765))+((r10*x4750))+(((-1.0)*r11*x4751))+(((-1.0)*x4758*x4767)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x4756))+(((-1.0)*x4760*x4764))+(((-1.0)*x4751*x4761))+((r01*x4762))+(((-1.0)*x4759*x4763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4768 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4768.valid){
continue;
}
CheckValue<IkReal> x4769=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x4769.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4768.value)+(((1.5707963267949)*(x4769.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4770=IKcos(j14);
IkReal x4771=(cj16*x4770);
IkReal x4772=((1.0)*sj16*x4770);
IkReal x4773=(r22*sj15);
IkReal x4774=IKsin(j14);
IkReal x4775=((1.0)*x4774);
IkReal x4776=(cj15*r21);
IkReal x4777=((1.0)*cj16*x4774);
IkReal x4778=(cj15*r20);
IkReal x4779=((1.0)*sj16*x4774);
IkReal x4780=(r02*sj15);
IkReal x4781=(cj15*r01);
IkReal x4782=(cj15*r00);
IkReal x4783=(sj16*x4774);
IkReal x4784=((1.0)*x4770);
IkReal x4785=((1.0)*cj16*x4770);
IkReal x4786=(r12*sj15);
IkReal x4787=(cj15*r11);
IkReal x4788=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x4772))+(((-1.0)*x4773*x4775))+((r20*x4771))+(((-1.0)*x4778*x4779))+(((-1.0)*x4776*x4777)));
evalcond[1]=((((-1.0)*x4777*x4781))+((r00*x4771))+(((-1.0)*r01*x4772))+(((-1.0)*x4779*x4782))+(((-1.0)*x4775*x4780)));
evalcond[2]=((((-1.0)*x4773*x4784))+((r21*x4783))+(((-1.0)*r20*x4777))+(((-1.0)*x4772*x4778))+(((-1.0)*x4776*x4785)));
evalcond[3]=((((-1.0)*x4772*x4788))+(((-1.0)*x4785*x4787))+(((-1.0)*x4784*x4786))+(((-1.0)*r10*x4777))+((r11*x4783)));
evalcond[4]=((-1.0)+(((-1.0)*x4777*x4787))+(((-1.0)*x4775*x4786))+(((-1.0)*r11*x4772))+(((-1.0)*x4779*x4788))+((r10*x4771)));
evalcond[5]=((-1.0)+(((-1.0)*x4772*x4782))+(((-1.0)*x4781*x4785))+(((-1.0)*r00*x4777))+((r01*x4783))+(((-1.0)*x4780*x4784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4789=((1.0)*cj15);
IkReal x4790=((((-1.0)*r22*x4789))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x4790;
j14eval[1]=IKsign(x4790);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*cj16*r01*x4789))+(((-1.0)*r00*sj16*x4789))+(((-1.0)*(1.0)*r02*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4791=((1.0)*cj16);
IkReal x4792=((1.0)*sj15);
IkReal x4793=((((-1.0)*r01*sj15*x4791))+(((-1.0)*r00*sj16*x4792))+((cj15*r02)));
j14eval[0]=x4793;
j14eval[1]=((IKabs(((((-1.0)*r20*x4791))+((r21*sj16)))))+(IKabs(((((-1.0)*cj15*r21*x4791))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x4792))))));
j14eval[2]=IKsign(x4793);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4794=r01*r01;
IkReal x4795=r02*r02;
IkReal x4796=(r01*sj16);
IkReal x4797=((2.0)*cj16*r00*x4796);
IkReal x4798=cj15*cj15;
IkReal x4799=r00*r00;
IkReal x4800=(x4798*x4799);
IkReal x4801=cj16*cj16;
IkReal x4802=((2.0)*r02*sj15);
IkReal x4803=(cj15*cj16*r01);
IkReal x4804=(cj15*r00*sj16);
IkReal x4805=(x4794*x4801);
IkReal x4806=(((x4799*x4801))+((x4797*x4798))+(((-1.0)*x4797))+(((-1.0)*x4795*x4798))+x4794+x4795+((x4802*x4804))+(((-1.0)*x4800*x4801))+((x4802*x4803))+x4800+((x4798*x4805))+(((-1.0)*x4805)));
j14eval[0]=x4806;
j14eval[1]=((IKabs((((r02*sj15))+x4803+x4804)))+(IKabs((((cj16*r00))+(((-1.0)*x4796))))));
j14eval[2]=IKsign(x4806);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4807=(r01*sj16);
IkReal x4808=(cj15*cj16*r01);
IkReal x4809=(cj15*r00*sj16);
IkReal x4810=r01*r01;
IkReal x4811=r02*r02;
IkReal x4812=((2.0)*cj16*r00*x4807);
IkReal x4813=cj15*cj15;
IkReal x4814=r00*r00;
IkReal x4815=(x4813*x4814);
IkReal x4816=cj16*cj16;
IkReal x4817=((2.0)*r02*sj15);
IkReal x4818=(x4810*x4816);
CheckValue<IkReal> x4819=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4811*x4813))+((x4813*x4818))+(((-1.0)*x4815*x4816))+((x4809*x4817))+((x4814*x4816))+((x4808*x4817))+((x4812*x4813))+x4811+x4815+x4810+(((-1.0)*x4812))+(((-1.0)*x4818)))),-1);
if(!x4819.valid){
continue;
}
CheckValue<IkReal> x4820 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*x4807)))),IkReal((((r02*sj15))+x4809+x4808)),IKFAST_ATAN2_MAGTHRESH);
if(!x4820.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4819.value)))+(x4820.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4821=IKcos(j14);
IkReal x4822=(cj16*x4821);
IkReal x4823=((1.0)*sj16*x4821);
IkReal x4824=(r22*sj15);
IkReal x4825=IKsin(j14);
IkReal x4826=((1.0)*x4825);
IkReal x4827=(cj15*r21);
IkReal x4828=((1.0)*cj16*x4825);
IkReal x4829=(cj15*r20);
IkReal x4830=((1.0)*sj16*x4825);
IkReal x4831=(r02*sj15);
IkReal x4832=(cj15*r01);
IkReal x4833=(cj15*r00);
IkReal x4834=(sj16*x4825);
IkReal x4835=((1.0)*x4821);
IkReal x4836=((1.0)*cj16*x4821);
IkReal x4837=(r12*sj15);
IkReal x4838=(cj15*r11);
IkReal x4839=(cj15*r10);
evalcond[0]=((((-1.0)*x4824*x4826))+(((-1.0)*x4829*x4830))+(((-1.0)*r21*x4823))+((r20*x4822))+(((-1.0)*x4827*x4828)));
evalcond[1]=((((-1.0)*x4828*x4832))+(((-1.0)*r01*x4823))+(((-1.0)*x4830*x4833))+((r00*x4822))+(((-1.0)*x4826*x4831)));
evalcond[2]=(((r21*x4834))+(((-1.0)*x4823*x4829))+(((-1.0)*x4824*x4835))+(((-1.0)*x4827*x4836))+(((-1.0)*r20*x4828)));
evalcond[3]=((((-1.0)*x4836*x4838))+(((-1.0)*x4823*x4839))+(((-1.0)*r10*x4828))+(((-1.0)*x4835*x4837))+((r11*x4834)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4823))+(((-1.0)*x4828*x4838))+(((-1.0)*x4830*x4839))+(((-1.0)*x4826*x4837))+((r10*x4822)));
evalcond[5]=((1.0)+((r01*x4834))+(((-1.0)*x4823*x4833))+(((-1.0)*x4832*x4836))+(((-1.0)*r00*x4828))+(((-1.0)*x4831*x4835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4840=((1.0)*cj16);
IkReal x4841=((1.0)*sj15);
CheckValue<IkReal> x4842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj15*x4840))+((cj15*r02))+(((-1.0)*r00*sj16*x4841)))),-1);
if(!x4842.valid){
continue;
}
CheckValue<IkReal> x4843 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4840))+((r21*sj16)))),IkReal(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x4841))+(((-1.0)*cj15*r21*x4840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4843.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4842.value)))+(x4843.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4844=IKcos(j14);
IkReal x4845=(cj16*x4844);
IkReal x4846=((1.0)*sj16*x4844);
IkReal x4847=(r22*sj15);
IkReal x4848=IKsin(j14);
IkReal x4849=((1.0)*x4848);
IkReal x4850=(cj15*r21);
IkReal x4851=((1.0)*cj16*x4848);
IkReal x4852=(cj15*r20);
IkReal x4853=((1.0)*sj16*x4848);
IkReal x4854=(r02*sj15);
IkReal x4855=(cj15*r01);
IkReal x4856=(cj15*r00);
IkReal x4857=(sj16*x4848);
IkReal x4858=((1.0)*x4844);
IkReal x4859=((1.0)*cj16*x4844);
IkReal x4860=(r12*sj15);
IkReal x4861=(cj15*r11);
IkReal x4862=(cj15*r10);
evalcond[0]=((((-1.0)*x4847*x4849))+(((-1.0)*x4850*x4851))+((r20*x4845))+(((-1.0)*x4852*x4853))+(((-1.0)*r21*x4846)));
evalcond[1]=((((-1.0)*x4851*x4855))+(((-1.0)*x4849*x4854))+((r00*x4845))+(((-1.0)*x4853*x4856))+(((-1.0)*r01*x4846)));
evalcond[2]=(((r21*x4857))+(((-1.0)*x4850*x4859))+(((-1.0)*r20*x4851))+(((-1.0)*x4847*x4858))+(((-1.0)*x4846*x4852)));
evalcond[3]=((((-1.0)*x4858*x4860))+((r11*x4857))+(((-1.0)*x4859*x4861))+(((-1.0)*r10*x4851))+(((-1.0)*x4846*x4862)));
evalcond[4]=((1.0)+(((-1.0)*x4849*x4860))+(((-1.0)*r11*x4846))+((r10*x4845))+(((-1.0)*x4853*x4862))+(((-1.0)*x4851*x4861)));
evalcond[5]=((1.0)+((r01*x4857))+(((-1.0)*x4846*x4856))+(((-1.0)*r00*x4851))+(((-1.0)*x4855*x4859))+(((-1.0)*x4854*x4858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4863=((1.0)*cj15);
CheckValue<IkReal> x4864=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+(((-1.0)*r22*x4863))+((cj16*r21*sj15)))),-1);
if(!x4864.valid){
continue;
}
CheckValue<IkReal> x4865 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*cj16*r01*x4863))+(((-1.0)*r00*sj16*x4863))+(((-1.0)*(1.0)*r02*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4865.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4864.value)))+(x4865.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4866=IKcos(j14);
IkReal x4867=(cj16*x4866);
IkReal x4868=((1.0)*sj16*x4866);
IkReal x4869=(r22*sj15);
IkReal x4870=IKsin(j14);
IkReal x4871=((1.0)*x4870);
IkReal x4872=(cj15*r21);
IkReal x4873=((1.0)*cj16*x4870);
IkReal x4874=(cj15*r20);
IkReal x4875=((1.0)*sj16*x4870);
IkReal x4876=(r02*sj15);
IkReal x4877=(cj15*r01);
IkReal x4878=(cj15*r00);
IkReal x4879=(sj16*x4870);
IkReal x4880=((1.0)*x4866);
IkReal x4881=((1.0)*cj16*x4866);
IkReal x4882=(r12*sj15);
IkReal x4883=(cj15*r11);
IkReal x4884=(cj15*r10);
evalcond[0]=(((r20*x4867))+(((-1.0)*x4874*x4875))+(((-1.0)*x4872*x4873))+(((-1.0)*x4869*x4871))+(((-1.0)*r21*x4868)));
evalcond[1]=((((-1.0)*x4871*x4876))+((r00*x4867))+(((-1.0)*r01*x4868))+(((-1.0)*x4873*x4877))+(((-1.0)*x4875*x4878)));
evalcond[2]=(((r21*x4879))+(((-1.0)*x4868*x4874))+(((-1.0)*x4869*x4880))+(((-1.0)*x4872*x4881))+(((-1.0)*r20*x4873)));
evalcond[3]=((((-1.0)*x4868*x4884))+(((-1.0)*x4881*x4883))+(((-1.0)*x4880*x4882))+((r11*x4879))+(((-1.0)*r10*x4873)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4868))+(((-1.0)*x4871*x4882))+((r10*x4867))+(((-1.0)*x4873*x4883))+(((-1.0)*x4875*x4884)));
evalcond[5]=((1.0)+((r01*x4879))+(((-1.0)*x4877*x4881))+(((-1.0)*r00*x4873))+(((-1.0)*x4868*x4878))+(((-1.0)*x4876*x4880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4885=((1.0)*cj15);
IkReal x4886=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x4885)));
j14eval[0]=x4886;
j14eval[1]=((IKabs(((((-1.0)*cj16*r21*x4885))+(((-1.0)*r20*sj16*x4885))+(((-1.0)*(1.0)*r22*sj15)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x4886);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4887=((1.0)*cj16);
IkReal x4888=((1.0)*sj15);
IkReal x4889=((((-1.0)*r20*sj16*x4888))+(((-1.0)*r21*sj15*x4887))+((cj15*r22)));
j14eval[0]=x4889;
j14eval[1]=((IKabs(((((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*r12*x4888))+(((-1.0)*cj15*r11*x4887)))))+(IKabs(((((-1.0)*r10*x4887))+((r11*sj16))))));
j14eval[2]=IKsign(x4889);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4890=r11*r11;
IkReal x4891=((1.0)*x4890);
IkReal x4892=r12*r12;
IkReal x4893=(r11*sj16);
IkReal x4894=((2.0)*cj16*r10*x4893);
IkReal x4895=cj15*cj15;
IkReal x4896=cj16*cj16;
IkReal x4897=((2.0)*r12*sj15);
IkReal x4898=(cj15*cj16*r11);
IkReal x4899=(cj15*r10*sj16);
IkReal x4900=r10*r10;
IkReal x4901=((1.0)*x4900);
IkReal x4902=(x4895*x4896);
IkReal x4903=((((-1.0)*x4897*x4899))+(((-1.0)*x4894*x4895))+x4894+(((-1.0)*x4892))+(((-1.0)*x4895*x4901))+((x4900*x4902))+(((-1.0)*x4891))+(((-1.0)*x4897*x4898))+((x4892*x4895))+(((-1.0)*x4891*x4902))+((x4890*x4896))+(((-1.0)*x4896*x4901)));
j14eval[0]=x4903;
j14eval[1]=((IKabs((((cj16*r10))+(((-1.0)*x4893)))))+(IKabs((x4898+x4899+((r12*sj15))))));
j14eval[2]=IKsign(x4903);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4904=(r11*sj16);
IkReal x4905=(cj15*cj16*r11);
IkReal x4906=(cj15*r10*sj16);
IkReal x4907=r11*r11;
IkReal x4908=((1.0)*x4907);
IkReal x4909=r12*r12;
IkReal x4910=((2.0)*cj16*r10*x4904);
IkReal x4911=cj15*cj15;
IkReal x4912=cj16*cj16;
IkReal x4913=((2.0)*r12*sj15);
IkReal x4914=r10*r10;
IkReal x4915=((1.0)*x4914);
IkReal x4916=(x4911*x4912);
CheckValue<IkReal> x4917=IKPowWithIntegerCheck(IKsign((((x4907*x4912))+(((-1.0)*x4908))+(((-1.0)*x4910*x4911))+(((-1.0)*x4906*x4913))+((x4914*x4916))+(((-1.0)*x4912*x4915))+(((-1.0)*x4905*x4913))+x4910+(((-1.0)*x4909))+((x4909*x4911))+(((-1.0)*x4911*x4915))+(((-1.0)*x4908*x4916)))),-1);
if(!x4917.valid){
continue;
}
CheckValue<IkReal> x4918 = IKatan2WithCheck(IkReal(((((-1.0)*x4904))+((cj16*r10)))),IkReal((x4905+x4906+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4918.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4917.value)))+(x4918.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4919=IKcos(j14);
IkReal x4920=(cj16*x4919);
IkReal x4921=((1.0)*sj16*x4919);
IkReal x4922=(r22*sj15);
IkReal x4923=IKsin(j14);
IkReal x4924=((1.0)*x4923);
IkReal x4925=(cj15*r21);
IkReal x4926=((1.0)*cj16*x4923);
IkReal x4927=(cj15*r20);
IkReal x4928=((1.0)*sj16*x4923);
IkReal x4929=(r12*sj15);
IkReal x4930=(cj15*r11);
IkReal x4931=(cj15*r10);
IkReal x4932=(sj16*x4923);
IkReal x4933=((1.0)*x4919);
IkReal x4934=((1.0)*cj16*x4919);
IkReal x4935=(r02*sj15);
IkReal x4936=(cj15*r01);
IkReal x4937=(cj15*r00);
evalcond[0]=(((r20*x4920))+(((-1.0)*r21*x4921))+(((-1.0)*x4927*x4928))+(((-1.0)*x4922*x4924))+(((-1.0)*x4925*x4926)));
evalcond[1]=((((-1.0)*x4924*x4929))+(((-1.0)*x4926*x4930))+(((-1.0)*r11*x4921))+(((-1.0)*x4928*x4931))+((r10*x4920)));
evalcond[2]=((((-1.0)*x4925*x4934))+((r21*x4932))+(((-1.0)*r20*x4926))+(((-1.0)*x4922*x4933))+(((-1.0)*x4921*x4927)));
evalcond[3]=((((-1.0)*x4921*x4937))+(((-1.0)*r00*x4926))+((r01*x4932))+(((-1.0)*x4933*x4935))+(((-1.0)*x4934*x4936)));
evalcond[4]=((1.0)+(((-1.0)*x4928*x4937))+((r00*x4920))+(((-1.0)*x4926*x4936))+(((-1.0)*r01*x4921))+(((-1.0)*x4924*x4935)));
evalcond[5]=((-1.0)+(((-1.0)*x4929*x4933))+((r11*x4932))+(((-1.0)*x4930*x4934))+(((-1.0)*r10*x4926))+(((-1.0)*x4921*x4931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4938=((1.0)*cj16);
IkReal x4939=((1.0)*sj15);
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4938))+((r11*sj16)))),IkReal(((((-1.0)*cj15*r11*x4938))+(((-1.0)*r12*x4939))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
CheckValue<IkReal> x4941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj15*x4938))+(((-1.0)*r20*sj16*x4939))+((cj15*r22)))),-1);
if(!x4941.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4940.value)+(((1.5707963267949)*(x4941.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4942=IKcos(j14);
IkReal x4943=(cj16*x4942);
IkReal x4944=((1.0)*sj16*x4942);
IkReal x4945=(r22*sj15);
IkReal x4946=IKsin(j14);
IkReal x4947=((1.0)*x4946);
IkReal x4948=(cj15*r21);
IkReal x4949=((1.0)*cj16*x4946);
IkReal x4950=(cj15*r20);
IkReal x4951=((1.0)*sj16*x4946);
IkReal x4952=(r12*sj15);
IkReal x4953=(cj15*r11);
IkReal x4954=(cj15*r10);
IkReal x4955=(sj16*x4946);
IkReal x4956=((1.0)*x4942);
IkReal x4957=((1.0)*cj16*x4942);
IkReal x4958=(r02*sj15);
IkReal x4959=(cj15*r01);
IkReal x4960=(cj15*r00);
evalcond[0]=(((r20*x4943))+(((-1.0)*x4948*x4949))+(((-1.0)*x4950*x4951))+(((-1.0)*x4945*x4947))+(((-1.0)*r21*x4944)));
evalcond[1]=((((-1.0)*x4951*x4954))+(((-1.0)*x4949*x4953))+(((-1.0)*x4947*x4952))+(((-1.0)*r11*x4944))+((r10*x4943)));
evalcond[2]=((((-1.0)*x4945*x4956))+(((-1.0)*x4944*x4950))+(((-1.0)*r20*x4949))+((r21*x4955))+(((-1.0)*x4948*x4957)));
evalcond[3]=((((-1.0)*r00*x4949))+(((-1.0)*x4944*x4960))+(((-1.0)*x4957*x4959))+((r01*x4955))+(((-1.0)*x4956*x4958)));
evalcond[4]=((1.0)+((r00*x4943))+(((-1.0)*r01*x4944))+(((-1.0)*x4949*x4959))+(((-1.0)*x4947*x4958))+(((-1.0)*x4951*x4960)));
evalcond[5]=((-1.0)+(((-1.0)*x4953*x4957))+(((-1.0)*x4944*x4954))+(((-1.0)*r10*x4949))+((r11*x4955))+(((-1.0)*x4952*x4956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4961=((1.0)*cj15);
CheckValue<IkReal> x4962 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*cj16*r21*x4961))+(((-1.0)*r20*sj16*x4961))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4962.valid){
continue;
}
CheckValue<IkReal> x4963=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x4961)))),-1);
if(!x4963.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4962.value)+(((1.5707963267949)*(x4963.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4964=IKcos(j14);
IkReal x4965=(cj16*x4964);
IkReal x4966=((1.0)*sj16*x4964);
IkReal x4967=(r22*sj15);
IkReal x4968=IKsin(j14);
IkReal x4969=((1.0)*x4968);
IkReal x4970=(cj15*r21);
IkReal x4971=((1.0)*cj16*x4968);
IkReal x4972=(cj15*r20);
IkReal x4973=((1.0)*sj16*x4968);
IkReal x4974=(r12*sj15);
IkReal x4975=(cj15*r11);
IkReal x4976=(cj15*r10);
IkReal x4977=(sj16*x4968);
IkReal x4978=((1.0)*x4964);
IkReal x4979=((1.0)*cj16*x4964);
IkReal x4980=(r02*sj15);
IkReal x4981=(cj15*r01);
IkReal x4982=(cj15*r00);
evalcond[0]=((((-1.0)*x4967*x4969))+(((-1.0)*x4972*x4973))+(((-1.0)*x4970*x4971))+(((-1.0)*r21*x4966))+((r20*x4965)));
evalcond[1]=((((-1.0)*r11*x4966))+(((-1.0)*x4971*x4975))+(((-1.0)*x4969*x4974))+(((-1.0)*x4973*x4976))+((r10*x4965)));
evalcond[2]=(((r21*x4977))+(((-1.0)*x4966*x4972))+(((-1.0)*r20*x4971))+(((-1.0)*x4970*x4979))+(((-1.0)*x4967*x4978)));
evalcond[3]=((((-1.0)*r00*x4971))+((r01*x4977))+(((-1.0)*x4978*x4980))+(((-1.0)*x4966*x4982))+(((-1.0)*x4979*x4981)));
evalcond[4]=((1.0)+(((-1.0)*x4973*x4982))+(((-1.0)*r01*x4966))+(((-1.0)*x4971*x4981))+(((-1.0)*x4969*x4980))+((r00*x4965)));
evalcond[5]=((-1.0)+(((-1.0)*x4975*x4979))+(((-1.0)*r10*x4971))+((r11*x4977))+(((-1.0)*x4966*x4976))+(((-1.0)*x4974*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4983=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x4983;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x4983);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4984=((1.0)*sj16);
IkReal x4985=((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x4984))+((cj15*r22)));
j14eval[0]=x4985;
j14eval[1]=((IKabs(((((-1.0)*r11*x4984))+((cj16*r10)))))+(IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15))))));
j14eval[2]=IKsign(x4985);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4986=r11*r11;
IkReal x4987=r12*r12;
IkReal x4988=(r11*sj16);
IkReal x4989=((2.0)*cj16*r10*x4988);
IkReal x4990=cj15*cj15;
IkReal x4991=r10*r10;
IkReal x4992=(x4990*x4991);
IkReal x4993=cj16*cj16;
IkReal x4994=((2.0)*r12*sj15);
IkReal x4995=(cj15*cj16*r11);
IkReal x4996=(cj15*r10*sj16);
IkReal x4997=(x4986*x4993);
IkReal x4998=(((x4994*x4995))+((x4989*x4990))+(((-1.0)*x4987*x4990))+x4992+x4987+x4986+(((-1.0)*x4997))+((x4994*x4996))+(((-1.0)*x4992*x4993))+((x4991*x4993))+(((-1.0)*x4989))+((x4990*x4997)));
j14eval[0]=x4998;
j14eval[1]=IKsign(x4998);
j14eval[2]=((IKabs(((((-1.0)*x4988))+((cj16*r10)))))+(IKabs((x4995+x4996+((r12*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4999=(r11*sj16);
IkReal x5000=(cj15*cj16*r11);
IkReal x5001=(cj15*r10*sj16);
IkReal x5002=r11*r11;
IkReal x5003=r12*r12;
IkReal x5004=((2.0)*cj16*r10*x4999);
IkReal x5005=cj15*cj15;
IkReal x5006=r10*r10;
IkReal x5007=(x5005*x5006);
IkReal x5008=cj16*cj16;
IkReal x5009=((2.0)*r12*sj15);
IkReal x5010=(x5002*x5008);
CheckValue<IkReal> x5011=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5010))+((x5005*x5010))+((x5001*x5009))+((x5004*x5005))+(((-1.0)*x5004))+((x5000*x5009))+((x5006*x5008))+(((-1.0)*x5003*x5005))+(((-1.0)*x5007*x5008))+x5007+x5002+x5003)),-1);
if(!x5011.valid){
continue;
}
CheckValue<IkReal> x5012 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x4999)))),IkReal((((r12*sj15))+x5000+x5001)),IKFAST_ATAN2_MAGTHRESH);
if(!x5012.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5011.value)))+(x5012.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5013=IKcos(j14);
IkReal x5014=(cj16*x5013);
IkReal x5015=((1.0)*sj16*x5013);
IkReal x5016=(r22*sj15);
IkReal x5017=IKsin(j14);
IkReal x5018=((1.0)*x5017);
IkReal x5019=(cj15*r21);
IkReal x5020=((1.0)*cj16*x5017);
IkReal x5021=(cj15*r20);
IkReal x5022=((1.0)*sj16*x5017);
IkReal x5023=(r12*sj15);
IkReal x5024=(cj15*r11);
IkReal x5025=(cj15*r10);
IkReal x5026=(sj16*x5017);
IkReal x5027=((1.0)*x5013);
IkReal x5028=((1.0)*cj16*x5013);
IkReal x5029=(r02*sj15);
IkReal x5030=(cj15*r01);
IkReal x5031=(cj15*r00);
evalcond[0]=((((-1.0)*x5021*x5022))+(((-1.0)*x5019*x5020))+(((-1.0)*r21*x5015))+(((-1.0)*x5016*x5018))+((r20*x5014)));
evalcond[1]=(((r10*x5014))+(((-1.0)*x5022*x5025))+(((-1.0)*x5020*x5024))+(((-1.0)*r11*x5015))+(((-1.0)*x5018*x5023)));
evalcond[2]=((((-1.0)*x5019*x5028))+(((-1.0)*x5016*x5027))+(((-1.0)*r20*x5020))+(((-1.0)*x5015*x5021))+((r21*x5026)));
evalcond[3]=((((-1.0)*x5015*x5031))+(((-1.0)*x5028*x5030))+(((-1.0)*r00*x5020))+(((-1.0)*x5027*x5029))+((r01*x5026)));
evalcond[4]=((-1.0)+((r00*x5014))+(((-1.0)*r01*x5015))+(((-1.0)*x5018*x5029))+(((-1.0)*x5022*x5031))+(((-1.0)*x5020*x5030)));
evalcond[5]=((1.0)+((r11*x5026))+(((-1.0)*x5024*x5028))+(((-1.0)*x5015*x5025))+(((-1.0)*r10*x5020))+(((-1.0)*x5023*x5027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5032=((1.0)*sj16);
CheckValue<IkReal> x5033=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x5032))+((cj15*r22)))),-1);
if(!x5033.valid){
continue;
}
CheckValue<IkReal> x5034 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x5032)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5034.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5033.value)))+(x5034.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5035=IKcos(j14);
IkReal x5036=(cj16*x5035);
IkReal x5037=((1.0)*sj16*x5035);
IkReal x5038=(r22*sj15);
IkReal x5039=IKsin(j14);
IkReal x5040=((1.0)*x5039);
IkReal x5041=(cj15*r21);
IkReal x5042=((1.0)*cj16*x5039);
IkReal x5043=(cj15*r20);
IkReal x5044=((1.0)*sj16*x5039);
IkReal x5045=(r12*sj15);
IkReal x5046=(cj15*r11);
IkReal x5047=(cj15*r10);
IkReal x5048=(sj16*x5039);
IkReal x5049=((1.0)*x5035);
IkReal x5050=((1.0)*cj16*x5035);
IkReal x5051=(r02*sj15);
IkReal x5052=(cj15*r01);
IkReal x5053=(cj15*r00);
evalcond[0]=((((-1.0)*x5043*x5044))+(((-1.0)*r21*x5037))+(((-1.0)*x5038*x5040))+((r20*x5036))+(((-1.0)*x5041*x5042)));
evalcond[1]=((((-1.0)*r11*x5037))+(((-1.0)*x5040*x5045))+(((-1.0)*x5044*x5047))+((r10*x5036))+(((-1.0)*x5042*x5046)));
evalcond[2]=((((-1.0)*r20*x5042))+((r21*x5048))+(((-1.0)*x5038*x5049))+(((-1.0)*x5037*x5043))+(((-1.0)*x5041*x5050)));
evalcond[3]=((((-1.0)*x5049*x5051))+(((-1.0)*r00*x5042))+(((-1.0)*x5037*x5053))+(((-1.0)*x5050*x5052))+((r01*x5048)));
evalcond[4]=((-1.0)+((r00*x5036))+(((-1.0)*x5044*x5053))+(((-1.0)*r01*x5037))+(((-1.0)*x5042*x5052))+(((-1.0)*x5040*x5051)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5042))+(((-1.0)*x5037*x5047))+((r11*x5048))+(((-1.0)*x5046*x5050))+(((-1.0)*x5045*x5049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5054 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5054.valid){
continue;
}
CheckValue<IkReal> x5055=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x5055.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5054.value)+(((1.5707963267949)*(x5055.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5056=IKcos(j14);
IkReal x5057=(cj16*x5056);
IkReal x5058=((1.0)*sj16*x5056);
IkReal x5059=(r22*sj15);
IkReal x5060=IKsin(j14);
IkReal x5061=((1.0)*x5060);
IkReal x5062=(cj15*r21);
IkReal x5063=((1.0)*cj16*x5060);
IkReal x5064=(cj15*r20);
IkReal x5065=((1.0)*sj16*x5060);
IkReal x5066=(r12*sj15);
IkReal x5067=(cj15*r11);
IkReal x5068=(cj15*r10);
IkReal x5069=(sj16*x5060);
IkReal x5070=((1.0)*x5056);
IkReal x5071=((1.0)*cj16*x5056);
IkReal x5072=(r02*sj15);
IkReal x5073=(cj15*r01);
IkReal x5074=(cj15*r00);
evalcond[0]=((((-1.0)*x5062*x5063))+(((-1.0)*x5064*x5065))+(((-1.0)*x5059*x5061))+(((-1.0)*r21*x5058))+((r20*x5057)));
evalcond[1]=(((r10*x5057))+(((-1.0)*x5065*x5068))+(((-1.0)*r11*x5058))+(((-1.0)*x5061*x5066))+(((-1.0)*x5063*x5067)));
evalcond[2]=(((r21*x5069))+(((-1.0)*r20*x5063))+(((-1.0)*x5058*x5064))+(((-1.0)*x5059*x5070))+(((-1.0)*x5062*x5071)));
evalcond[3]=(((r01*x5069))+(((-1.0)*r00*x5063))+(((-1.0)*x5058*x5074))+(((-1.0)*x5070*x5072))+(((-1.0)*x5071*x5073)));
evalcond[4]=((-1.0)+(((-1.0)*x5061*x5072))+(((-1.0)*x5063*x5073))+((r00*x5057))+(((-1.0)*r01*x5058))+(((-1.0)*x5065*x5074)));
evalcond[5]=((1.0)+((r11*x5069))+(((-1.0)*x5058*x5068))+(((-1.0)*x5067*x5071))+(((-1.0)*x5066*x5070))+(((-1.0)*r10*x5063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5075=(cj15*cj16);
IkReal x5076=(r21*sj10);
IkReal x5077=(cj15*sj16);
IkReal x5078=(r20*sj10);
IkReal x5079=(r02*r22);
IkReal x5080=cj15*cj15;
IkReal x5081=(r00*r20);
IkReal x5082=(x5080*x5081);
IkReal x5083=cj16*cj16;
IkReal x5084=(r00*r21);
IkReal x5085=((1.0)*cj16*sj16);
IkReal x5086=(r01*r20);
IkReal x5087=(r02*sj15);
IkReal x5088=(r01*r21*x5083);
IkReal x5089=(cj16*sj16*x5080);
CheckValue<IkReal> x5090=IKPowWithIntegerCheck(IKsign((((cj15*cj16*r21*x5087))+(((-1.0)*x5082*x5083))+((cj15*r20*sj16*x5087))+x5082+x5079+((r01*r22*sj15*x5075))+((x5080*x5088))+((r00*r22*sj15*x5077))+(((-1.0)*x5084*x5085))+(((-1.0)*x5079*x5080))+((x5084*x5089))+(((-1.0)*x5085*x5086))+((x5086*x5089))+((r01*r21))+(((-1.0)*x5088))+((x5081*x5083)))),-1);
if(!x5090.valid){
continue;
}
CheckValue<IkReal> x5091 = IKatan2WithCheck(IkReal((((x5075*x5076))+((x5077*x5078))+((sj10*((r22*sj15)))))),IkReal((((sj16*x5076))+(((-1.0)*cj16*x5078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5091.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5090.value)))+(x5091.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5092=IKcos(j14);
IkReal x5093=(cj16*x5092);
IkReal x5094=((1.0)*sj16*x5092);
IkReal x5095=(r22*sj15);
IkReal x5096=IKsin(j14);
IkReal x5097=((1.0)*x5096);
IkReal x5098=(cj15*r21);
IkReal x5099=((1.0)*cj16*x5096);
IkReal x5100=(cj15*r20);
IkReal x5101=((1.0)*sj16*x5096);
IkReal x5102=(sj16*x5096);
IkReal x5103=((1.0)*x5092);
IkReal x5104=((1.0)*cj16*x5092);
IkReal x5105=(r02*sj15);
IkReal x5106=(cj15*r01);
IkReal x5107=(cj15*r00);
IkReal x5108=((-1.0)*(((1.0)*cj10)));
IkReal x5109=(r12*sj15);
IkReal x5110=(cj15*r11);
IkReal x5111=(cj15*r10);
evalcond[0]=((((-1.0)*x5098*x5099))+(((-1.0)*x5095*x5097))+(((-1.0)*x5100*x5101))+((r20*x5093))+(((-1.0)*r21*x5094)));
evalcond[1]=((((-1.0)*x5098*x5104))+(((-1.0)*r20*x5099))+((r21*x5102))+(((-1.0)*x5095*x5103))+(((-1.0)*x5094*x5100)));
evalcond[2]=((((-1.0)*x5097*x5105))+(((-1.0)*x5099*x5106))+sj10+((r00*x5093))+(((-1.0)*r01*x5094))+(((-1.0)*x5101*x5107)));
evalcond[3]=((((-1.0)*x5097*x5109))+((r10*x5093))+(((-1.0)*x5101*x5111))+(((-1.0)*r11*x5094))+(((-1.0)*x5099*x5110))+x5108);
evalcond[4]=((((-1.0)*x5104*x5106))+((r01*x5102))+(((-1.0)*x5103*x5105))+(((-1.0)*r00*x5099))+(((-1.0)*x5094*x5107))+x5108);
evalcond[5]=((((-1.0)*x5094*x5111))+(((-1.0)*r10*x5099))+((r11*x5102))+(((-1.0)*x5103*x5109))+(((-1.0)*x5104*x5110))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5112=((1.0)*cj15);
IkReal x5113=(r21*sj10);
IkReal x5114=((1.0)*sj10);
CheckValue<IkReal> x5115 = IKatan2WithCheck(IkReal((((sj16*x5113))+(((-1.0)*cj16*r20*x5114)))),IkReal(((((-1.0)*r22*sj15*x5114))+(((-1.0)*cj15*cj16*x5113))+(((-1.0)*r20*sj10*sj16*x5112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5115.valid){
continue;
}
CheckValue<IkReal> x5116=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x5112)))),-1);
if(!x5116.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5115.value)+(((1.5707963267949)*(x5116.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5117=IKcos(j14);
IkReal x5118=(cj16*x5117);
IkReal x5119=((1.0)*sj16*x5117);
IkReal x5120=(r22*sj15);
IkReal x5121=IKsin(j14);
IkReal x5122=((1.0)*x5121);
IkReal x5123=(cj15*r21);
IkReal x5124=((1.0)*cj16*x5121);
IkReal x5125=(cj15*r20);
IkReal x5126=((1.0)*sj16*x5121);
IkReal x5127=(sj16*x5121);
IkReal x5128=((1.0)*x5117);
IkReal x5129=((1.0)*cj16*x5117);
IkReal x5130=(r02*sj15);
IkReal x5131=(cj15*r01);
IkReal x5132=(cj15*r00);
IkReal x5133=((-1.0)*(((1.0)*cj10)));
IkReal x5134=(r12*sj15);
IkReal x5135=(cj15*r11);
IkReal x5136=(cj15*r10);
evalcond[0]=(((r20*x5118))+(((-1.0)*x5123*x5124))+(((-1.0)*x5125*x5126))+(((-1.0)*r21*x5119))+(((-1.0)*x5120*x5122)));
evalcond[1]=((((-1.0)*x5120*x5128))+(((-1.0)*x5123*x5129))+(((-1.0)*r20*x5124))+((r21*x5127))+(((-1.0)*x5119*x5125)));
evalcond[2]=((((-1.0)*x5126*x5132))+(((-1.0)*r01*x5119))+(((-1.0)*x5124*x5131))+sj10+(((-1.0)*x5122*x5130))+((r00*x5118)));
evalcond[3]=((((-1.0)*x5122*x5134))+(((-1.0)*x5126*x5136))+(((-1.0)*x5124*x5135))+x5133+(((-1.0)*r11*x5119))+((r10*x5118)));
evalcond[4]=((((-1.0)*r00*x5124))+(((-1.0)*x5129*x5131))+x5133+(((-1.0)*x5128*x5130))+((r01*x5127))+(((-1.0)*x5119*x5132)));
evalcond[5]=((((-1.0)*x5119*x5136))+((r11*x5127))+(((-1.0)*x5128*x5134))+(((-1.0)*r10*x5124))+(((-1.0)*x5129*x5135))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5137=((1.0)*sj16);
IkReal x5138=(cj10*cj16);
CheckValue<IkReal> x5139=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*r00*sj15*x5137))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x5139.valid){
continue;
}
CheckValue<IkReal> x5140 = IKatan2WithCheck(IkReal((((r20*x5138))+(((-1.0)*cj10*r21*x5137)))),IkReal((((cj10*r22*sj15))+((cj10*cj15*r20*sj16))+((cj15*r21*x5138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5140.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5139.value)))+(x5140.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5141=IKcos(j14);
IkReal x5142=(cj16*x5141);
IkReal x5143=((1.0)*sj16*x5141);
IkReal x5144=(r22*sj15);
IkReal x5145=IKsin(j14);
IkReal x5146=((1.0)*x5145);
IkReal x5147=(cj15*r21);
IkReal x5148=((1.0)*cj16*x5145);
IkReal x5149=(cj15*r20);
IkReal x5150=((1.0)*sj16*x5145);
IkReal x5151=(sj16*x5145);
IkReal x5152=((1.0)*x5141);
IkReal x5153=((1.0)*cj16*x5141);
IkReal x5154=(r02*sj15);
IkReal x5155=(cj15*r01);
IkReal x5156=(cj15*r00);
IkReal x5157=((-1.0)*(((1.0)*cj10)));
IkReal x5158=(r12*sj15);
IkReal x5159=(cj15*r11);
IkReal x5160=(cj15*r10);
evalcond[0]=((((-1.0)*x5144*x5146))+(((-1.0)*r21*x5143))+((r20*x5142))+(((-1.0)*x5149*x5150))+(((-1.0)*x5147*x5148)));
evalcond[1]=((((-1.0)*r20*x5148))+(((-1.0)*x5144*x5152))+(((-1.0)*x5147*x5153))+(((-1.0)*x5143*x5149))+((r21*x5151)));
evalcond[2]=((((-1.0)*x5150*x5156))+(((-1.0)*x5146*x5154))+(((-1.0)*r01*x5143))+sj10+((r00*x5142))+(((-1.0)*x5148*x5155)));
evalcond[3]=((((-1.0)*x5150*x5160))+((r10*x5142))+(((-1.0)*x5146*x5158))+x5157+(((-1.0)*x5148*x5159))+(((-1.0)*r11*x5143)));
evalcond[4]=((((-1.0)*x5152*x5154))+(((-1.0)*r00*x5148))+x5157+((r01*x5151))+(((-1.0)*x5143*x5156))+(((-1.0)*x5153*x5155)));
evalcond[5]=(((r11*x5151))+(((-1.0)*x5143*x5160))+(((-1.0)*r10*x5148))+(((-1.0)*x5153*x5159))+(((-1.0)*(1.0)*sj10))+(((-1.0)*x5152*x5158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5161=((1.0)*cj15);
IkReal x5162=(cj16*sj15);
IkReal x5163=(sj15*sj16);
if( IKabs((((r10*x5163))+((r11*x5162))+(((-1.0)*r12*x5161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x5163))+(((-1.0)*r02*x5161))+((r01*x5162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x5163))+((r11*x5162))+(((-1.0)*r12*x5161))))+IKsqr((((r00*x5163))+(((-1.0)*r02*x5161))+((r01*x5162))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r10*x5163))+((r11*x5162))+(((-1.0)*r12*x5161))), (((r00*x5163))+(((-1.0)*r02*x5161))+((r01*x5162))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5164=((1.0)*cj15);
IkReal x5165=(cj16*sj15);
IkReal x5166=(sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*(IKsin(j10))))+((r10*x5166))+((r11*x5165))+(((-1.0)*r12*x5164)));
evalcond[1]=((((-1.0)*(1.0)*(IKcos(j10))))+(((-1.0)*r02*x5164))+((r00*x5166))+((r01*x5165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5167=((1.0)*cj16);
IkReal x5168=(((cj15*r12))+(((-1.0)*(1.0)*r10*sj15*sj16))+(((-1.0)*r11*sj15*x5167)));
j14eval[0]=x5168;
j14eval[1]=IKsign(x5168);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((r01*sj16))+(((-1.0)*r00*x5167))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5169=((1.0)*cj16);
IkReal x5170=((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x5169))+((cj15*r02)));
IkReal x5171=(cj10*r21);
IkReal x5172=(cj10*r20);
j14eval[0]=x5170;
j14eval[1]=((IKabs((((cj15*cj16*x5171))+((cj10*r22*sj15))+((cj15*sj16*x5172)))))+(IKabs((((sj16*x5171))+(((-1.0)*x5169*x5172))))));
j14eval[2]=IKsign(x5170);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5173=r21*r21;
IkReal x5174=((1.0)*x5173);
IkReal x5175=r22*r22;
IkReal x5176=((2.0)*cj16);
IkReal x5177=(r20*r21*sj16*x5176);
IkReal x5178=cj15*cj15;
IkReal x5179=cj16*cj16;
IkReal x5180=(cj15*r20*sj16);
IkReal x5181=r20*r20;
IkReal x5182=((1.0)*x5181);
IkReal x5183=(x5178*x5179);
IkReal x5184=(((x5175*x5178))+(((-1.0)*x5178*x5182))+(((-1.0)*cj15*r21*r22*sj15*x5176))+x5177+(((-1.0)*x5175))+(((-1.0)*x5177*x5178))+((x5181*x5183))+((x5173*x5179))+(((-2.0)*r22*sj15*x5180))+(((-1.0)*x5174*x5183))+(((-1.0)*x5179*x5182))+(((-1.0)*x5174)));
IkReal x5185=((1.0)*cj16);
j14eval[0]=x5184;
j14eval[1]=IKsign(x5184);
j14eval[2]=((IKabs(((((-1.0)*r22*sj15))+(((-1.0)*cj15*r21*x5185))+(((-1.0)*x5180)))))+(IKabs((((r21*sj16))+(((-1.0)*r20*x5185))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5186=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x5186;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x5186);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5187=((1.0)*sj16);
IkReal x5188=((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x5187))+((cj15*r22)));
j14eval[0]=x5188;
j14eval[1]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs(((((-1.0)*r11*x5187))+((cj16*r10))))));
j14eval[2]=IKsign(x5188);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5189=r21*r21;
IkReal x5190=((1.0)*x5189);
IkReal x5191=r22*r22;
IkReal x5192=((2.0)*cj16);
IkReal x5193=(r20*r21*sj16*x5192);
IkReal x5194=cj15*cj15;
IkReal x5195=cj16*cj16;
IkReal x5196=(cj15*r20*sj16);
IkReal x5197=r20*r20;
IkReal x5198=((1.0)*x5197);
IkReal x5199=(x5194*x5195);
IkReal x5200=(((x5191*x5194))+x5193+(((-1.0)*x5190))+(((-2.0)*r22*sj15*x5196))+((x5197*x5199))+((x5189*x5195))+(((-1.0)*x5195*x5198))+(((-1.0)*x5194*x5198))+(((-1.0)*cj15*r21*r22*sj15*x5192))+(((-1.0)*x5193*x5194))+(((-1.0)*x5191))+(((-1.0)*x5190*x5199)));
IkReal x5201=((1.0)*cj16);
j14eval[0]=x5200;
j14eval[1]=IKsign(x5200);
j14eval[2]=((IKabs((((r21*sj16))+(((-1.0)*r20*x5201)))))+(IKabs(((((-1.0)*r22*sj15))+(((-1.0)*cj15*r21*x5201))+(((-1.0)*x5196))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5202=((1.0)*cj16);
IkReal x5203=(cj15*r20*sj16);
IkReal x5204=r21*r21;
IkReal x5205=((1.0)*x5204);
IkReal x5206=r22*r22;
IkReal x5207=((2.0)*cj16);
IkReal x5208=(r20*r21*sj16*x5207);
IkReal x5209=cj15*cj15;
IkReal x5210=cj16*cj16;
IkReal x5211=r20*r20;
IkReal x5212=((1.0)*x5211);
IkReal x5213=(x5209*x5210);
CheckValue<IkReal> x5214=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5206))+(((-2.0)*r22*sj15*x5203))+(((-1.0)*x5209*x5212))+(((-1.0)*x5205*x5213))+((x5204*x5210))+(((-1.0)*cj15*r21*r22*sj15*x5207))+((x5206*x5209))+(((-1.0)*x5210*x5212))+(((-1.0)*x5205))+x5208+((x5211*x5213))+(((-1.0)*x5208*x5209)))),-1);
if(!x5214.valid){
continue;
}
CheckValue<IkReal> x5215 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*r20*x5202)))),IkReal(((((-1.0)*cj15*r21*x5202))+(((-1.0)*r22*sj15))+(((-1.0)*x5203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5215.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5214.value)))+(x5215.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5216=IKcos(j14);
IkReal x5217=(cj16*x5216);
IkReal x5218=((1.0)*sj16*x5216);
IkReal x5219=(r22*sj15);
IkReal x5220=IKsin(j14);
IkReal x5221=((1.0)*x5220);
IkReal x5222=(cj15*r21);
IkReal x5223=((1.0)*cj16*x5220);
IkReal x5224=(cj15*r20);
IkReal x5225=((1.0)*sj16*x5220);
IkReal x5226=(r12*sj15);
IkReal x5227=(cj15*r11);
IkReal x5228=(cj15*r10);
IkReal x5229=(sj16*x5220);
IkReal x5230=(r02*sj15);
IkReal x5231=((1.0)*x5216);
IkReal x5232=(cj15*r01);
IkReal x5233=((1.0)*cj16*x5216);
IkReal x5234=(cj15*r00);
evalcond[0]=((((-1.0)*x5219*x5221))+(((-1.0)*r21*x5218))+((r20*x5217))+(((-1.0)*x5222*x5223))+(((-1.0)*x5224*x5225)));
evalcond[1]=((((-1.0)*x5221*x5226))+(((-1.0)*x5223*x5227))+((r10*x5217))+(((-1.0)*r11*x5218))+(((-1.0)*x5225*x5228)));
evalcond[2]=((((-1.0)*x5218*x5234))+(((-1.0)*r00*x5223))+((r01*x5229))+(((-1.0)*x5230*x5231))+(((-1.0)*x5232*x5233)));
evalcond[3]=((((-1.0)*x5226*x5231))+(((-1.0)*x5218*x5228))+((r11*x5229))+(((-1.0)*r10*x5223))+(((-1.0)*x5227*x5233)));
evalcond[4]=((-1.0)+(((-1.0)*x5221*x5230))+((r00*x5217))+(((-1.0)*r01*x5218))+(((-1.0)*x5225*x5234))+(((-1.0)*x5223*x5232)));
evalcond[5]=((1.0)+(((-1.0)*x5222*x5233))+(((-1.0)*r20*x5223))+(((-1.0)*x5218*x5224))+(((-1.0)*x5219*x5231))+((r21*x5229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5235=((1.0)*sj16);
CheckValue<IkReal> x5236=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x5235))+((cj15*r22)))),-1);
if(!x5236.valid){
continue;
}
CheckValue<IkReal> x5237 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x5235)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5237.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5236.value)))+(x5237.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5238=IKcos(j14);
IkReal x5239=(cj16*x5238);
IkReal x5240=((1.0)*sj16*x5238);
IkReal x5241=(r22*sj15);
IkReal x5242=IKsin(j14);
IkReal x5243=((1.0)*x5242);
IkReal x5244=(cj15*r21);
IkReal x5245=((1.0)*cj16*x5242);
IkReal x5246=(cj15*r20);
IkReal x5247=((1.0)*sj16*x5242);
IkReal x5248=(r12*sj15);
IkReal x5249=(cj15*r11);
IkReal x5250=(cj15*r10);
IkReal x5251=(sj16*x5242);
IkReal x5252=(r02*sj15);
IkReal x5253=((1.0)*x5238);
IkReal x5254=(cj15*r01);
IkReal x5255=((1.0)*cj16*x5238);
IkReal x5256=(cj15*r00);
evalcond[0]=((((-1.0)*x5246*x5247))+(((-1.0)*x5244*x5245))+(((-1.0)*r21*x5240))+(((-1.0)*x5241*x5243))+((r20*x5239)));
evalcond[1]=((((-1.0)*x5243*x5248))+(((-1.0)*x5245*x5249))+(((-1.0)*x5247*x5250))+((r10*x5239))+(((-1.0)*r11*x5240)));
evalcond[2]=((((-1.0)*r00*x5245))+(((-1.0)*x5254*x5255))+(((-1.0)*x5252*x5253))+((r01*x5251))+(((-1.0)*x5240*x5256)));
evalcond[3]=((((-1.0)*x5249*x5255))+((r11*x5251))+(((-1.0)*x5240*x5250))+(((-1.0)*r10*x5245))+(((-1.0)*x5248*x5253)));
evalcond[4]=((-1.0)+(((-1.0)*x5243*x5252))+(((-1.0)*x5245*x5254))+((r00*x5239))+(((-1.0)*x5247*x5256))+(((-1.0)*r01*x5240)));
evalcond[5]=((1.0)+(((-1.0)*x5244*x5255))+(((-1.0)*x5241*x5253))+((r21*x5251))+(((-1.0)*x5240*x5246))+(((-1.0)*r20*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5257 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5257.valid){
continue;
}
CheckValue<IkReal> x5258=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x5258.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5257.value)+(((1.5707963267949)*(x5258.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5259=IKcos(j14);
IkReal x5260=(cj16*x5259);
IkReal x5261=((1.0)*sj16*x5259);
IkReal x5262=(r22*sj15);
IkReal x5263=IKsin(j14);
IkReal x5264=((1.0)*x5263);
IkReal x5265=(cj15*r21);
IkReal x5266=((1.0)*cj16*x5263);
IkReal x5267=(cj15*r20);
IkReal x5268=((1.0)*sj16*x5263);
IkReal x5269=(r12*sj15);
IkReal x5270=(cj15*r11);
IkReal x5271=(cj15*r10);
IkReal x5272=(sj16*x5263);
IkReal x5273=(r02*sj15);
IkReal x5274=((1.0)*x5259);
IkReal x5275=(cj15*r01);
IkReal x5276=((1.0)*cj16*x5259);
IkReal x5277=(cj15*r00);
evalcond[0]=(((r20*x5260))+(((-1.0)*x5267*x5268))+(((-1.0)*x5262*x5264))+(((-1.0)*r21*x5261))+(((-1.0)*x5265*x5266)));
evalcond[1]=(((r10*x5260))+(((-1.0)*x5264*x5269))+(((-1.0)*r11*x5261))+(((-1.0)*x5266*x5270))+(((-1.0)*x5268*x5271)));
evalcond[2]=((((-1.0)*x5275*x5276))+(((-1.0)*x5261*x5277))+((r01*x5272))+(((-1.0)*x5273*x5274))+(((-1.0)*r00*x5266)));
evalcond[3]=((((-1.0)*r10*x5266))+(((-1.0)*x5269*x5274))+(((-1.0)*x5270*x5276))+(((-1.0)*x5261*x5271))+((r11*x5272)));
evalcond[4]=((-1.0)+(((-1.0)*x5264*x5273))+((r00*x5260))+(((-1.0)*r01*x5261))+(((-1.0)*x5266*x5275))+(((-1.0)*x5268*x5277)));
evalcond[5]=((1.0)+(((-1.0)*x5262*x5274))+(((-1.0)*x5265*x5276))+(((-1.0)*r20*x5266))+(((-1.0)*x5261*x5267))+((r21*x5272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5278=((1.0)*cj15);
IkReal x5279=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x5278)));
j14eval[0]=x5279;
j14eval[1]=((IKabs(((((-1.0)*r20*sj16*x5278))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*cj16*r21*x5278)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x5279);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5280=((1.0)*cj16);
IkReal x5281=((1.0)*sj15);
IkReal x5282=((((-1.0)*r20*sj16*x5281))+((cj15*r22))+(((-1.0)*r21*sj15*x5280)));
j14eval[0]=x5282;
j14eval[1]=((IKabs(((((-1.0)*r10*x5280))+((r11*sj16)))))+(IKabs(((((-1.0)*r12*x5281))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*cj15*r11*x5280))))));
j14eval[2]=IKsign(x5282);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5283=r21*r21;
IkReal x5284=((1.0)*x5283);
IkReal x5285=r22*r22;
IkReal x5286=((2.0)*cj16);
IkReal x5287=(r20*r21*sj16*x5286);
IkReal x5288=cj15*cj15;
IkReal x5289=cj16*cj16;
IkReal x5290=(cj15*r20*sj16);
IkReal x5291=r20*r20;
IkReal x5292=((1.0)*x5291);
IkReal x5293=(x5288*x5289);
IkReal x5294=((((-2.0)*r22*sj15*x5290))+(((-1.0)*cj15*r21*r22*sj15*x5286))+((x5285*x5288))+(((-1.0)*x5288*x5292))+(((-1.0)*x5284))+(((-1.0)*x5284*x5293))+((x5283*x5289))+(((-1.0)*x5289*x5292))+(((-1.0)*x5285))+((x5291*x5293))+(((-1.0)*x5287*x5288))+x5287);
IkReal x5295=((1.0)*cj16);
j14eval[0]=x5294;
j14eval[1]=IKsign(x5294);
j14eval[2]=((IKabs(((((-1.0)*cj15*r21*x5295))+(((-1.0)*r22*sj15))+(((-1.0)*x5290)))))+(IKabs((((r21*sj16))+(((-1.0)*r20*x5295))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5296=((1.0)*cj16);
IkReal x5297=(cj15*r20*sj16);
IkReal x5298=r21*r21;
IkReal x5299=((1.0)*x5298);
IkReal x5300=r22*r22;
IkReal x5301=((2.0)*cj16);
IkReal x5302=(r20*r21*sj16*x5301);
IkReal x5303=cj15*cj15;
IkReal x5304=cj16*cj16;
IkReal x5305=r20*r20;
IkReal x5306=((1.0)*x5305);
IkReal x5307=(x5303*x5304);
CheckValue<IkReal> x5308 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5296))+((r21*sj16)))),IkReal(((((-1.0)*x5297))+(((-1.0)*r22*sj15))+(((-1.0)*cj15*r21*x5296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5308.valid){
continue;
}
CheckValue<IkReal> x5309=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5299))+(((-1.0)*x5300))+x5302+((x5300*x5303))+((x5305*x5307))+(((-1.0)*x5304*x5306))+((x5298*x5304))+(((-1.0)*x5302*x5303))+(((-2.0)*r22*sj15*x5297))+(((-1.0)*x5303*x5306))+(((-1.0)*cj15*r21*r22*sj15*x5301))+(((-1.0)*x5299*x5307)))),-1);
if(!x5309.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5308.value)+(((1.5707963267949)*(x5309.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5310=IKcos(j14);
IkReal x5311=(cj16*x5310);
IkReal x5312=((1.0)*sj16*x5310);
IkReal x5313=(r22*sj15);
IkReal x5314=IKsin(j14);
IkReal x5315=((1.0)*x5314);
IkReal x5316=(cj15*r21);
IkReal x5317=((1.0)*cj16*x5314);
IkReal x5318=(cj15*r20);
IkReal x5319=((1.0)*sj16*x5314);
IkReal x5320=(r12*sj15);
IkReal x5321=(cj15*r11);
IkReal x5322=(cj15*r10);
IkReal x5323=(sj16*x5314);
IkReal x5324=(r02*sj15);
IkReal x5325=((1.0)*x5310);
IkReal x5326=(cj15*r01);
IkReal x5327=((1.0)*cj16*x5310);
IkReal x5328=(cj15*r00);
evalcond[0]=((((-1.0)*x5318*x5319))+((r20*x5311))+(((-1.0)*x5313*x5315))+(((-1.0)*x5316*x5317))+(((-1.0)*r21*x5312)));
evalcond[1]=(((r10*x5311))+(((-1.0)*x5319*x5322))+(((-1.0)*r11*x5312))+(((-1.0)*x5317*x5321))+(((-1.0)*x5315*x5320)));
evalcond[2]=(((r01*x5323))+(((-1.0)*r00*x5317))+(((-1.0)*x5324*x5325))+(((-1.0)*x5326*x5327))+(((-1.0)*x5312*x5328)));
evalcond[3]=(((r11*x5323))+(((-1.0)*x5312*x5322))+(((-1.0)*x5321*x5327))+(((-1.0)*r10*x5317))+(((-1.0)*x5320*x5325)));
evalcond[4]=((1.0)+(((-1.0)*x5315*x5324))+(((-1.0)*x5317*x5326))+(((-1.0)*x5319*x5328))+(((-1.0)*r01*x5312))+((r00*x5311)));
evalcond[5]=((1.0)+(((-1.0)*x5312*x5318))+((r21*x5323))+(((-1.0)*x5316*x5327))+(((-1.0)*x5313*x5325))+(((-1.0)*r20*x5317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5329=((1.0)*cj16);
IkReal x5330=((1.0)*sj15);
CheckValue<IkReal> x5331 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5329))+((r11*sj16)))),IkReal(((((-1.0)*r12*x5330))+(((-1.0)*cj15*r11*x5329))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5331.valid){
continue;
}
CheckValue<IkReal> x5332=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj15*x5329))+(((-1.0)*r20*sj16*x5330))+((cj15*r22)))),-1);
if(!x5332.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5331.value)+(((1.5707963267949)*(x5332.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5333=IKcos(j14);
IkReal x5334=(cj16*x5333);
IkReal x5335=((1.0)*sj16*x5333);
IkReal x5336=(r22*sj15);
IkReal x5337=IKsin(j14);
IkReal x5338=((1.0)*x5337);
IkReal x5339=(cj15*r21);
IkReal x5340=((1.0)*cj16*x5337);
IkReal x5341=(cj15*r20);
IkReal x5342=((1.0)*sj16*x5337);
IkReal x5343=(r12*sj15);
IkReal x5344=(cj15*r11);
IkReal x5345=(cj15*r10);
IkReal x5346=(sj16*x5337);
IkReal x5347=(r02*sj15);
IkReal x5348=((1.0)*x5333);
IkReal x5349=(cj15*r01);
IkReal x5350=((1.0)*cj16*x5333);
IkReal x5351=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x5335))+(((-1.0)*x5336*x5338))+((r20*x5334))+(((-1.0)*x5339*x5340))+(((-1.0)*x5341*x5342)));
evalcond[1]=((((-1.0)*r11*x5335))+(((-1.0)*x5342*x5345))+(((-1.0)*x5340*x5344))+((r10*x5334))+(((-1.0)*x5338*x5343)));
evalcond[2]=((((-1.0)*r00*x5340))+(((-1.0)*x5347*x5348))+(((-1.0)*x5349*x5350))+((r01*x5346))+(((-1.0)*x5335*x5351)));
evalcond[3]=((((-1.0)*x5343*x5348))+((r11*x5346))+(((-1.0)*x5344*x5350))+(((-1.0)*r10*x5340))+(((-1.0)*x5335*x5345)));
evalcond[4]=((1.0)+((r00*x5334))+(((-1.0)*r01*x5335))+(((-1.0)*x5338*x5347))+(((-1.0)*x5340*x5349))+(((-1.0)*x5342*x5351)));
evalcond[5]=((1.0)+(((-1.0)*x5336*x5348))+((r21*x5346))+(((-1.0)*x5339*x5350))+(((-1.0)*x5335*x5341))+(((-1.0)*r20*x5340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5352=((1.0)*cj15);
CheckValue<IkReal> x5353 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*r20*sj16*x5352))+(((-1.0)*cj16*r21*x5352))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5353.valid){
continue;
}
CheckValue<IkReal> x5354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x5352))+((cj16*r11*sj15))+((r10*sj15*sj16)))),-1);
if(!x5354.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5353.value)+(((1.5707963267949)*(x5354.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5355=IKcos(j14);
IkReal x5356=(cj16*x5355);
IkReal x5357=((1.0)*sj16*x5355);
IkReal x5358=(r22*sj15);
IkReal x5359=IKsin(j14);
IkReal x5360=((1.0)*x5359);
IkReal x5361=(cj15*r21);
IkReal x5362=((1.0)*cj16*x5359);
IkReal x5363=(cj15*r20);
IkReal x5364=((1.0)*sj16*x5359);
IkReal x5365=(r12*sj15);
IkReal x5366=(cj15*r11);
IkReal x5367=(cj15*r10);
IkReal x5368=(sj16*x5359);
IkReal x5369=(r02*sj15);
IkReal x5370=((1.0)*x5355);
IkReal x5371=(cj15*r01);
IkReal x5372=((1.0)*cj16*x5355);
IkReal x5373=(cj15*r00);
evalcond[0]=((((-1.0)*x5358*x5360))+(((-1.0)*r21*x5357))+((r20*x5356))+(((-1.0)*x5361*x5362))+(((-1.0)*x5363*x5364)));
evalcond[1]=((((-1.0)*x5362*x5366))+(((-1.0)*r11*x5357))+((r10*x5356))+(((-1.0)*x5364*x5367))+(((-1.0)*x5360*x5365)));
evalcond[2]=((((-1.0)*x5357*x5373))+(((-1.0)*r00*x5362))+(((-1.0)*x5369*x5370))+(((-1.0)*x5371*x5372))+((r01*x5368)));
evalcond[3]=((((-1.0)*x5366*x5372))+(((-1.0)*x5365*x5370))+(((-1.0)*r10*x5362))+((r11*x5368))+(((-1.0)*x5357*x5367)));
evalcond[4]=((1.0)+((r00*x5356))+(((-1.0)*x5364*x5373))+(((-1.0)*x5362*x5371))+(((-1.0)*x5360*x5369))+(((-1.0)*r01*x5357)));
evalcond[5]=((1.0)+((r21*x5368))+(((-1.0)*x5361*x5372))+(((-1.0)*r20*x5362))+(((-1.0)*x5357*x5363))+(((-1.0)*x5358*x5370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5374=((1.0)*cj16);
IkReal x5375=(cj15*r20*sj16);
IkReal x5376=r21*r21;
IkReal x5377=((1.0)*x5376);
IkReal x5378=r22*r22;
IkReal x5379=((2.0)*cj16);
IkReal x5380=(r20*r21*sj16*x5379);
IkReal x5381=cj15*cj15;
IkReal x5382=cj16*cj16;
IkReal x5383=r20*r20;
IkReal x5384=((1.0)*x5383);
IkReal x5385=(x5381*x5382);
CheckValue<IkReal> x5386 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*r20*x5374)))),IkReal(((((-1.0)*cj15*r21*x5374))+(((-1.0)*x5375))+(((-1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5386.valid){
continue;
}
CheckValue<IkReal> x5387=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5382*x5384))+(((-1.0)*x5381*x5384))+(((-2.0)*r22*sj15*x5375))+((x5378*x5381))+(((-1.0)*x5378))+(((-1.0)*x5380*x5381))+((x5376*x5382))+(((-1.0)*x5377))+((x5383*x5385))+(((-1.0)*x5377*x5385))+(((-1.0)*cj15*r21*r22*sj15*x5379))+x5380)),-1);
if(!x5387.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5386.value)+(((1.5707963267949)*(x5387.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5388=IKcos(j14);
IkReal x5389=(cj16*x5388);
IkReal x5390=((1.0)*sj16*x5388);
IkReal x5391=(r22*sj15);
IkReal x5392=IKsin(j14);
IkReal x5393=((1.0)*x5392);
IkReal x5394=(cj15*r21);
IkReal x5395=((1.0)*cj16*x5392);
IkReal x5396=(cj15*r20);
IkReal x5397=((1.0)*sj16*x5392);
IkReal x5398=(sj16*x5392);
IkReal x5399=(r02*sj15);
IkReal x5400=((1.0)*x5388);
IkReal x5401=(cj15*r01);
IkReal x5402=((1.0)*cj16*x5388);
IkReal x5403=(cj15*r00);
IkReal x5404=(r12*sj15);
IkReal x5405=(cj15*r11);
IkReal x5406=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x5390))+(((-1.0)*x5394*x5395))+(((-1.0)*x5391*x5393))+((r20*x5389))+(((-1.0)*x5396*x5397)));
evalcond[1]=((((-1.0)*x5390*x5403))+(((-1.0)*x5401*x5402))+(((-1.0)*r00*x5395))+(((-1.0)*x5399*x5400))+((r01*x5398)));
evalcond[2]=((((-1.0)*x5400*x5404))+(((-1.0)*x5402*x5405))+((r11*x5398))+(((-1.0)*r10*x5395))+(((-1.0)*x5390*x5406)));
evalcond[3]=(((r10*x5389))+(((-1.0)*x5397*x5406))+(((-1.0)*x5393*x5404))+cj10+(((-1.0)*r11*x5390))+(((-1.0)*x5395*x5405)));
evalcond[4]=((1.0)+((r21*x5398))+(((-1.0)*x5391*x5400))+(((-1.0)*r20*x5395))+(((-1.0)*x5394*x5402))+(((-1.0)*x5390*x5396)));
evalcond[5]=((((-1.0)*r01*x5390))+(((-1.0)*x5395*x5401))+(((-1.0)*x5397*x5403))+(((-1.0)*x5393*x5399))+(((-1.0)*(1.0)*sj10))+((r00*x5389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5407=((1.0)*sj15);
IkReal x5408=(cj10*r21);
IkReal x5409=((1.0)*cj10*r20);
CheckValue<IkReal> x5410=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x5407))+(((-1.0)*r00*sj16*x5407))+((cj15*r02)))),-1);
if(!x5410.valid){
continue;
}
CheckValue<IkReal> x5411 = IKatan2WithCheck(IkReal((((sj16*x5408))+(((-1.0)*cj16*x5409)))),IkReal(((((-1.0)*cj10*r22*sj15))+(((-1.0)*cj15*cj16*x5408))+(((-1.0)*cj15*sj16*x5409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5411.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5410.value)))+(x5411.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5412=IKcos(j14);
IkReal x5413=(cj16*x5412);
IkReal x5414=((1.0)*sj16*x5412);
IkReal x5415=(r22*sj15);
IkReal x5416=IKsin(j14);
IkReal x5417=((1.0)*x5416);
IkReal x5418=(cj15*r21);
IkReal x5419=((1.0)*cj16*x5416);
IkReal x5420=(cj15*r20);
IkReal x5421=((1.0)*sj16*x5416);
IkReal x5422=(sj16*x5416);
IkReal x5423=(r02*sj15);
IkReal x5424=((1.0)*x5412);
IkReal x5425=(cj15*r01);
IkReal x5426=((1.0)*cj16*x5412);
IkReal x5427=(cj15*r00);
IkReal x5428=(r12*sj15);
IkReal x5429=(cj15*r11);
IkReal x5430=(cj15*r10);
evalcond[0]=((((-1.0)*x5418*x5419))+(((-1.0)*r21*x5414))+(((-1.0)*x5420*x5421))+(((-1.0)*x5415*x5417))+((r20*x5413)));
evalcond[1]=((((-1.0)*x5423*x5424))+(((-1.0)*r00*x5419))+((r01*x5422))+(((-1.0)*x5425*x5426))+(((-1.0)*x5414*x5427)));
evalcond[2]=((((-1.0)*x5414*x5430))+(((-1.0)*x5426*x5429))+(((-1.0)*x5424*x5428))+((r11*x5422))+(((-1.0)*r10*x5419)));
evalcond[3]=(((r10*x5413))+cj10+(((-1.0)*x5417*x5428))+(((-1.0)*r11*x5414))+(((-1.0)*x5419*x5429))+(((-1.0)*x5421*x5430)));
evalcond[4]=((1.0)+(((-1.0)*x5415*x5424))+(((-1.0)*x5414*x5420))+(((-1.0)*x5418*x5426))+((r21*x5422))+(((-1.0)*r20*x5419)));
evalcond[5]=((((-1.0)*r01*x5414))+((r00*x5413))+(((-1.0)*x5419*x5425))+(((-1.0)*x5421*x5427))+(((-1.0)*x5417*x5423))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5431=((1.0)*cj16);
CheckValue<IkReal> x5432 = IKatan2WithCheck(IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IkReal((((r01*sj16))+(((-1.0)*r00*x5431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5432.valid){
continue;
}
CheckValue<IkReal> x5433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj15*x5431))+((cj15*r12))+(((-1.0)*(1.0)*r10*sj15*sj16)))),-1);
if(!x5433.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5432.value)+(((1.5707963267949)*(x5433.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5434=IKcos(j14);
IkReal x5435=(cj16*x5434);
IkReal x5436=((1.0)*sj16*x5434);
IkReal x5437=(r22*sj15);
IkReal x5438=IKsin(j14);
IkReal x5439=((1.0)*x5438);
IkReal x5440=(cj15*r21);
IkReal x5441=((1.0)*cj16*x5438);
IkReal x5442=(cj15*r20);
IkReal x5443=((1.0)*sj16*x5438);
IkReal x5444=(sj16*x5438);
IkReal x5445=(r02*sj15);
IkReal x5446=((1.0)*x5434);
IkReal x5447=(cj15*r01);
IkReal x5448=((1.0)*cj16*x5434);
IkReal x5449=(cj15*r00);
IkReal x5450=(r12*sj15);
IkReal x5451=(cj15*r11);
IkReal x5452=(cj15*r10);
evalcond[0]=(((r20*x5435))+(((-1.0)*x5440*x5441))+(((-1.0)*x5442*x5443))+(((-1.0)*r21*x5436))+(((-1.0)*x5437*x5439)));
evalcond[1]=(((r01*x5444))+(((-1.0)*r00*x5441))+(((-1.0)*x5445*x5446))+(((-1.0)*x5447*x5448))+(((-1.0)*x5436*x5449)));
evalcond[2]=((((-1.0)*x5448*x5451))+((r11*x5444))+(((-1.0)*x5446*x5450))+(((-1.0)*x5436*x5452))+(((-1.0)*r10*x5441)));
evalcond[3]=((((-1.0)*x5441*x5451))+(((-1.0)*r11*x5436))+cj10+((r10*x5435))+(((-1.0)*x5439*x5450))+(((-1.0)*x5443*x5452)));
evalcond[4]=((1.0)+(((-1.0)*x5440*x5448))+(((-1.0)*x5437*x5446))+((r21*x5444))+(((-1.0)*r20*x5441))+(((-1.0)*x5436*x5442)));
evalcond[5]=(((r00*x5435))+(((-1.0)*x5443*x5449))+(((-1.0)*r01*x5436))+(((-1.0)*x5439*x5445))+(((-1.0)*x5441*x5447))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5453=((1.26697583102024)*cj15);
IkReal x5454=((0.0338501117053686)*sj15);
IkReal x5455=((0.0338501117053686)*cj15*cj16);
IkReal x5456=((0.0338501117053686)*cj15*sj16);
IkReal x5457=((1.26697583102024)*cj16*sj15);
IkReal x5458=((1.26697583102024)*sj15*sj16);
if( IKabs((((r12*x5453))+(((-1.0)*r11*x5457))+(((-1.0)*(3.38501117053686)*py))+(((-1.0)*r10*x5458))+((r10*x5456))+((r12*x5454))+((r11*x5455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x5456))+(((-1.0)*r00*x5458))+(((-1.0)*(3.38501117053686)*px))+((r01*x5455))+(((-1.0)*r01*x5457))+((r02*x5453))+((r02*x5454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x5453))+(((-1.0)*r11*x5457))+(((-1.0)*(3.38501117053686)*py))+(((-1.0)*r10*x5458))+((r10*x5456))+((r12*x5454))+((r11*x5455))))+IKsqr((((r00*x5456))+(((-1.0)*r00*x5458))+(((-1.0)*(3.38501117053686)*px))+((r01*x5455))+(((-1.0)*r01*x5457))+((r02*x5453))+((r02*x5454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r12*x5453))+(((-1.0)*r11*x5457))+(((-1.0)*(3.38501117053686)*py))+(((-1.0)*r10*x5458))+((r10*x5456))+((r12*x5454))+((r11*x5455))), (((r00*x5456))+(((-1.0)*r00*x5458))+(((-1.0)*(3.38501117053686)*px))+((r01*x5455))+(((-1.0)*r01*x5457))+((r02*x5453))+((r02*x5454))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5459=((0.37429)*cj15);
IkReal x5460=((0.01)*sj15);
IkReal x5461=((0.01)*cj15*cj16);
IkReal x5462=((0.01)*cj15*sj16);
IkReal x5463=((0.37429)*cj16*sj15);
IkReal x5464=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r00*x5464))+((r02*x5459))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x5463))+(((-1.0)*(0.29542)*(IKcos(j10))))+((r00*x5462))+((r02*x5460))+((r01*x5461)));
evalcond[1]=((((-1.0)*r10*x5464))+(((-1.0)*(1.0)*py))+((r12*x5460))+((r10*x5462))+(((-1.0)*(0.29542)*(IKsin(j10))))+((r11*x5461))+((r12*x5459))+(((-1.0)*r11*x5463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5465=((1.0)*cj16);
IkReal x5466=((((-1.0)*r01*sj15*x5465))+(((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02)));
IkReal x5467=(cj10*r21);
IkReal x5468=(cj10*r20);
j14eval[0]=x5466;
j14eval[1]=((IKabs(((((-1.0)*x5465*x5468))+((sj16*x5467)))))+(IKabs((((cj15*sj16*x5468))+((cj10*r22*sj15))+((cj15*cj16*x5467))))));
j14eval[2]=IKsign(x5466);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5469=(r12*r22);
IkReal x5470=cj15*cj15;
IkReal x5471=(r10*r20);
IkReal x5472=(x5470*x5471);
IkReal x5473=cj16*cj16;
IkReal x5474=(r10*r21);
IkReal x5475=((1.0)*cj16*sj16);
IkReal x5476=(r11*r20);
IkReal x5477=(cj15*cj16);
IkReal x5478=(r12*sj15);
IkReal x5479=(cj15*sj16);
IkReal x5480=(r11*r21*x5473);
IkReal x5481=(cj16*sj16*x5470);
IkReal x5482=((((-1.0)*x5472*x5473))+((r11*r22*sj15*x5477))+(((-1.0)*x5469*x5470))+((x5476*x5481))+((x5471*x5473))+(((-1.0)*x5480))+(((-1.0)*x5475*x5476))+((x5470*x5480))+x5469+((cj15*r20*sj16*x5478))+((r10*r22*sj15*x5479))+x5472+((r11*r21))+((cj15*cj16*r21*x5478))+(((-1.0)*x5474*x5475))+((x5474*x5481)));
IkReal x5483=(cj10*r21);
IkReal x5484=(cj10*r20);
j14eval[0]=x5482;
j14eval[1]=IKsign(x5482);
j14eval[2]=((IKabs(((((-1.0)*cj16*x5484))+((sj16*x5483)))))+(IKabs((((cj10*((r22*sj15))))+((x5479*x5484))+((x5477*x5483))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5485=(r01*r21);
IkReal x5486=((1.0)*x5485);
IkReal x5487=(r02*r22);
IkReal x5488=(cj16*sj16);
IkReal x5489=(r00*r21);
IkReal x5490=(r01*r20);
IkReal x5491=cj15*cj15;
IkReal x5492=cj16*cj16;
IkReal x5493=((1.0)*r00*r20);
IkReal x5494=((1.0)*cj15*sj16);
IkReal x5495=(x5491*x5492);
IkReal x5496=((1.0)*cj16*sj16*x5491);
IkReal x5497=((((-1.0)*r02*r20*sj15*x5494))+(((-1.0)*x5487))+(((-1.0)*r00*r22*sj15*x5494))+(((-1.0)*cj15*cj16*r02*r21*sj15))+((x5488*x5490))+(((-1.0)*x5486*x5495))+(((-1.0)*x5490*x5496))+((x5488*x5489))+((x5487*x5491))+(((-1.0)*x5491*x5493))+((x5485*x5492))+(((-1.0)*x5489*x5496))+(((-1.0)*x5486))+((r00*r20*x5495))+(((-1.0)*cj15*cj16*r01*r22*sj15))+(((-1.0)*x5492*x5493)));
IkReal x5498=(cj10*r21);
IkReal x5499=(cj10*r20);
j14eval[0]=x5497;
j14eval[1]=IKsign(x5497);
j14eval[2]=((IKabs(((((-1.0)*cj16*x5499))+((sj16*x5498)))))+(IKabs((((cj10*((r22*sj15))))+((cj15*sj16*x5499))+((cj15*cj16*x5498))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5500=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x5500;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x5500);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5501=((1.0)*sj16);
IkReal x5502=((((-1.0)*(1.0)*cj16*r21*sj15))+((cj15*r22))+(((-1.0)*r20*sj15*x5501)));
j14eval[0]=x5502;
j14eval[1]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs((((cj16*r10))+(((-1.0)*r11*x5501))))));
j14eval[2]=IKsign(x5502);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5503=r11*r11;
IkReal x5504=r12*r12;
IkReal x5505=(r11*sj16);
IkReal x5506=((2.0)*cj16*r10*x5505);
IkReal x5507=cj15*cj15;
IkReal x5508=r10*r10;
IkReal x5509=(x5507*x5508);
IkReal x5510=cj16*cj16;
IkReal x5511=((2.0)*r12*sj15);
IkReal x5512=(cj15*cj16*r11);
IkReal x5513=(cj15*r10*sj16);
IkReal x5514=(x5503*x5510);
IkReal x5515=(((x5506*x5507))+((x5511*x5513))+x5504+x5503+x5509+((x5508*x5510))+(((-1.0)*x5504*x5507))+(((-1.0)*x5514))+(((-1.0)*x5509*x5510))+((x5511*x5512))+(((-1.0)*x5506))+((x5507*x5514)));
j14eval[0]=x5515;
j14eval[1]=IKsign(x5515);
j14eval[2]=((IKabs((((cj16*r10))+(((-1.0)*x5505)))))+(IKabs((x5513+x5512+((r12*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5516=(r11*sj16);
IkReal x5517=(cj15*cj16*r11);
IkReal x5518=(cj15*r10*sj16);
IkReal x5519=r11*r11;
IkReal x5520=r12*r12;
IkReal x5521=((2.0)*cj16*r10*x5516);
IkReal x5522=cj15*cj15;
IkReal x5523=r10*r10;
IkReal x5524=(x5522*x5523);
IkReal x5525=cj16*cj16;
IkReal x5526=((2.0)*r12*sj15);
IkReal x5527=(x5519*x5525);
CheckValue<IkReal> x5528 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x5516)))),IkReal((x5517+x5518+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5528.valid){
continue;
}
CheckValue<IkReal> x5529=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5520*x5522))+(((-1.0)*x5521))+((x5517*x5526))+x5519+(((-1.0)*x5524*x5525))+(((-1.0)*x5527))+x5524+x5520+((x5518*x5526))+((x5522*x5527))+((x5521*x5522))+((x5523*x5525)))),-1);
if(!x5529.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5528.value)+(((1.5707963267949)*(x5529.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5530=IKcos(j14);
IkReal x5531=(cj16*x5530);
IkReal x5532=((1.0)*sj16*x5530);
IkReal x5533=(r22*sj15);
IkReal x5534=IKsin(j14);
IkReal x5535=((1.0)*x5534);
IkReal x5536=(cj15*r21);
IkReal x5537=((1.0)*cj16*x5534);
IkReal x5538=(cj15*r20);
IkReal x5539=((1.0)*sj16*x5534);
IkReal x5540=(r12*sj15);
IkReal x5541=(cj15*r11);
IkReal x5542=(cj15*r10);
IkReal x5543=(sj16*x5534);
IkReal x5544=((1.0)*x5530);
IkReal x5545=((1.0)*cj16*x5530);
IkReal x5546=(r02*sj15);
IkReal x5547=(cj15*r01);
IkReal x5548=(cj15*r00);
evalcond[0]=((((-1.0)*x5538*x5539))+(((-1.0)*r21*x5532))+((r20*x5531))+(((-1.0)*x5533*x5535))+(((-1.0)*x5536*x5537)));
evalcond[1]=(((r10*x5531))+(((-1.0)*r11*x5532))+(((-1.0)*x5539*x5542))+(((-1.0)*x5535*x5540))+(((-1.0)*x5537*x5541)));
evalcond[2]=((((-1.0)*x5532*x5538))+(((-1.0)*r20*x5537))+(((-1.0)*x5533*x5544))+((r21*x5543))+(((-1.0)*x5536*x5545)));
evalcond[3]=(((r01*x5543))+(((-1.0)*x5544*x5546))+(((-1.0)*x5545*x5547))+(((-1.0)*r00*x5537))+(((-1.0)*x5532*x5548)));
evalcond[4]=((-1.0)+(((-1.0)*x5539*x5548))+(((-1.0)*x5535*x5546))+(((-1.0)*r01*x5532))+((r00*x5531))+(((-1.0)*x5537*x5547)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5537))+(((-1.0)*x5532*x5542))+(((-1.0)*x5541*x5545))+(((-1.0)*x5540*x5544))+((r11*x5543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5549=((1.0)*sj16);
CheckValue<IkReal> x5550 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x5549)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5550.valid){
continue;
}
CheckValue<IkReal> x5551=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x5549))+((cj15*r22)))),-1);
if(!x5551.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5550.value)+(((1.5707963267949)*(x5551.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5552=IKcos(j14);
IkReal x5553=(cj16*x5552);
IkReal x5554=((1.0)*sj16*x5552);
IkReal x5555=(r22*sj15);
IkReal x5556=IKsin(j14);
IkReal x5557=((1.0)*x5556);
IkReal x5558=(cj15*r21);
IkReal x5559=((1.0)*cj16*x5556);
IkReal x5560=(cj15*r20);
IkReal x5561=((1.0)*sj16*x5556);
IkReal x5562=(r12*sj15);
IkReal x5563=(cj15*r11);
IkReal x5564=(cj15*r10);
IkReal x5565=(sj16*x5556);
IkReal x5566=((1.0)*x5552);
IkReal x5567=((1.0)*cj16*x5552);
IkReal x5568=(r02*sj15);
IkReal x5569=(cj15*r01);
IkReal x5570=(cj15*r00);
evalcond[0]=(((r20*x5553))+(((-1.0)*x5560*x5561))+(((-1.0)*x5558*x5559))+(((-1.0)*r21*x5554))+(((-1.0)*x5555*x5557)));
evalcond[1]=((((-1.0)*x5561*x5564))+(((-1.0)*x5557*x5562))+((r10*x5553))+(((-1.0)*r11*x5554))+(((-1.0)*x5559*x5563)));
evalcond[2]=(((r21*x5565))+(((-1.0)*r20*x5559))+(((-1.0)*x5554*x5560))+(((-1.0)*x5555*x5566))+(((-1.0)*x5558*x5567)));
evalcond[3]=((((-1.0)*r00*x5559))+(((-1.0)*x5566*x5568))+(((-1.0)*x5567*x5569))+(((-1.0)*x5554*x5570))+((r01*x5565)));
evalcond[4]=((-1.0)+(((-1.0)*x5561*x5570))+((r00*x5553))+(((-1.0)*x5557*x5568))+(((-1.0)*r01*x5554))+(((-1.0)*x5559*x5569)));
evalcond[5]=((1.0)+((r11*x5565))+(((-1.0)*x5554*x5564))+(((-1.0)*x5562*x5566))+(((-1.0)*x5563*x5567))+(((-1.0)*r10*x5559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5571 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5571.valid){
continue;
}
CheckValue<IkReal> x5572=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x5572.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5571.value)+(((1.5707963267949)*(x5572.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5573=IKcos(j14);
IkReal x5574=(cj16*x5573);
IkReal x5575=((1.0)*sj16*x5573);
IkReal x5576=(r22*sj15);
IkReal x5577=IKsin(j14);
IkReal x5578=((1.0)*x5577);
IkReal x5579=(cj15*r21);
IkReal x5580=((1.0)*cj16*x5577);
IkReal x5581=(cj15*r20);
IkReal x5582=((1.0)*sj16*x5577);
IkReal x5583=(r12*sj15);
IkReal x5584=(cj15*r11);
IkReal x5585=(cj15*r10);
IkReal x5586=(sj16*x5577);
IkReal x5587=((1.0)*x5573);
IkReal x5588=((1.0)*cj16*x5573);
IkReal x5589=(r02*sj15);
IkReal x5590=(cj15*r01);
IkReal x5591=(cj15*r00);
evalcond[0]=((((-1.0)*x5576*x5578))+((r20*x5574))+(((-1.0)*x5579*x5580))+(((-1.0)*r21*x5575))+(((-1.0)*x5581*x5582)));
evalcond[1]=(((r10*x5574))+(((-1.0)*x5580*x5584))+(((-1.0)*r11*x5575))+(((-1.0)*x5578*x5583))+(((-1.0)*x5582*x5585)));
evalcond[2]=((((-1.0)*x5576*x5587))+(((-1.0)*x5579*x5588))+((r21*x5586))+(((-1.0)*r20*x5580))+(((-1.0)*x5575*x5581)));
evalcond[3]=((((-1.0)*x5575*x5591))+((r01*x5586))+(((-1.0)*x5588*x5590))+(((-1.0)*r00*x5580))+(((-1.0)*x5587*x5589)));
evalcond[4]=((-1.0)+(((-1.0)*x5580*x5590))+(((-1.0)*x5578*x5589))+(((-1.0)*x5582*x5591))+(((-1.0)*r01*x5575))+((r00*x5574)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5580))+(((-1.0)*x5583*x5587))+(((-1.0)*x5584*x5588))+(((-1.0)*x5575*x5585))+((r11*x5586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5592=((1.0)*cj15);
IkReal x5593=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x5592)));
j14eval[0]=x5593;
j14eval[1]=((IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))))+(IKabs(((((-1.0)*cj16*r21*x5592))+(((-1.0)*r20*sj16*x5592))+(((-1.0)*(1.0)*r22*sj15))))));
j14eval[2]=IKsign(x5593);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5594=((1.0)*cj16);
IkReal x5595=((1.0)*sj15);
IkReal x5596=((((-1.0)*r20*sj16*x5595))+((cj15*r22))+(((-1.0)*r21*sj15*x5594)));
j14eval[0]=x5596;
j14eval[1]=((IKabs(((((-1.0)*cj15*r11*x5594))+(((-1.0)*r12*x5595))+(((-1.0)*(1.0)*cj15*r10*sj16)))))+(IKabs((((r11*sj16))+(((-1.0)*r10*x5594))))));
j14eval[2]=IKsign(x5596);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5597=r11*r11;
IkReal x5598=((1.0)*x5597);
IkReal x5599=r12*r12;
IkReal x5600=(r11*sj16);
IkReal x5601=((2.0)*cj16*r10*x5600);
IkReal x5602=cj15*cj15;
IkReal x5603=cj16*cj16;
IkReal x5604=((2.0)*r12*sj15);
IkReal x5605=(cj15*cj16*r11);
IkReal x5606=(cj15*r10*sj16);
IkReal x5607=r10*r10;
IkReal x5608=((1.0)*x5607);
IkReal x5609=(x5602*x5603);
IkReal x5610=((((-1.0)*x5598*x5609))+x5601+(((-1.0)*x5604*x5606))+(((-1.0)*x5599))+(((-1.0)*x5601*x5602))+(((-1.0)*x5604*x5605))+((x5597*x5603))+(((-1.0)*x5602*x5608))+(((-1.0)*x5598))+((x5607*x5609))+(((-1.0)*x5603*x5608))+((x5599*x5602)));
j14eval[0]=x5610;
j14eval[1]=((IKabs((x5606+x5605+((r12*sj15)))))+(IKabs((((cj16*r10))+(((-1.0)*x5600))))));
j14eval[2]=IKsign(x5610);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5611=(r11*sj16);
IkReal x5612=(cj15*cj16*r11);
IkReal x5613=(cj15*r10*sj16);
IkReal x5614=r11*r11;
IkReal x5615=((1.0)*x5614);
IkReal x5616=r12*r12;
IkReal x5617=((2.0)*cj16*r10*x5611);
IkReal x5618=cj15*cj15;
IkReal x5619=cj16*cj16;
IkReal x5620=((2.0)*r12*sj15);
IkReal x5621=r10*r10;
IkReal x5622=((1.0)*x5621);
IkReal x5623=(x5618*x5619);
CheckValue<IkReal> x5624=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5613*x5620))+(((-1.0)*x5618*x5622))+(((-1.0)*x5619*x5622))+x5617+(((-1.0)*x5615))+(((-1.0)*x5616))+(((-1.0)*x5612*x5620))+(((-1.0)*x5617*x5618))+((x5621*x5623))+(((-1.0)*x5615*x5623))+((x5616*x5618))+((x5614*x5619)))),-1);
if(!x5624.valid){
continue;
}
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x5611)))),IkReal((((r12*sj15))+x5612+x5613)),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5624.value)))+(x5625.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5626=IKcos(j14);
IkReal x5627=(cj16*x5626);
IkReal x5628=((1.0)*sj16*x5626);
IkReal x5629=(r22*sj15);
IkReal x5630=IKsin(j14);
IkReal x5631=((1.0)*x5630);
IkReal x5632=(cj15*r21);
IkReal x5633=((1.0)*cj16*x5630);
IkReal x5634=(cj15*r20);
IkReal x5635=((1.0)*sj16*x5630);
IkReal x5636=(r12*sj15);
IkReal x5637=(cj15*r11);
IkReal x5638=(cj15*r10);
IkReal x5639=(sj16*x5630);
IkReal x5640=((1.0)*x5626);
IkReal x5641=((1.0)*cj16*x5626);
IkReal x5642=(r02*sj15);
IkReal x5643=(cj15*r01);
IkReal x5644=(cj15*r00);
evalcond[0]=(((r20*x5627))+(((-1.0)*x5629*x5631))+(((-1.0)*r21*x5628))+(((-1.0)*x5634*x5635))+(((-1.0)*x5632*x5633)));
evalcond[1]=((((-1.0)*x5631*x5636))+(((-1.0)*x5635*x5638))+(((-1.0)*r11*x5628))+((r10*x5627))+(((-1.0)*x5633*x5637)));
evalcond[2]=(((r21*x5639))+(((-1.0)*x5632*x5641))+(((-1.0)*r20*x5633))+(((-1.0)*x5629*x5640))+(((-1.0)*x5628*x5634)));
evalcond[3]=(((r01*x5639))+(((-1.0)*x5628*x5644))+(((-1.0)*x5641*x5643))+(((-1.0)*x5640*x5642))+(((-1.0)*r00*x5633)));
evalcond[4]=((1.0)+((r00*x5627))+(((-1.0)*x5635*x5644))+(((-1.0)*r01*x5628))+(((-1.0)*x5633*x5643))+(((-1.0)*x5631*x5642)));
evalcond[5]=((-1.0)+((r11*x5639))+(((-1.0)*x5636*x5640))+(((-1.0)*x5628*x5638))+(((-1.0)*r10*x5633))+(((-1.0)*x5637*x5641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5645=((1.0)*cj16);
IkReal x5646=((1.0)*sj15);
CheckValue<IkReal> x5647 = IKatan2WithCheck(IkReal((((r11*sj16))+(((-1.0)*r10*x5645)))),IkReal(((((-1.0)*r12*x5646))+(((-1.0)*cj15*r11*x5645))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5647.valid){
continue;
}
CheckValue<IkReal> x5648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj15*x5645))+((cj15*r22))+(((-1.0)*r20*sj16*x5646)))),-1);
if(!x5648.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5647.value)+(((1.5707963267949)*(x5648.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5649=IKcos(j14);
IkReal x5650=(cj16*x5649);
IkReal x5651=((1.0)*sj16*x5649);
IkReal x5652=(r22*sj15);
IkReal x5653=IKsin(j14);
IkReal x5654=((1.0)*x5653);
IkReal x5655=(cj15*r21);
IkReal x5656=((1.0)*cj16*x5653);
IkReal x5657=(cj15*r20);
IkReal x5658=((1.0)*sj16*x5653);
IkReal x5659=(r12*sj15);
IkReal x5660=(cj15*r11);
IkReal x5661=(cj15*r10);
IkReal x5662=(sj16*x5653);
IkReal x5663=((1.0)*x5649);
IkReal x5664=((1.0)*cj16*x5649);
IkReal x5665=(r02*sj15);
IkReal x5666=(cj15*r01);
IkReal x5667=(cj15*r00);
evalcond[0]=(((r20*x5650))+(((-1.0)*x5657*x5658))+(((-1.0)*r21*x5651))+(((-1.0)*x5655*x5656))+(((-1.0)*x5652*x5654)));
evalcond[1]=((((-1.0)*x5656*x5660))+(((-1.0)*x5654*x5659))+(((-1.0)*x5658*x5661))+((r10*x5650))+(((-1.0)*r11*x5651)));
evalcond[2]=((((-1.0)*x5655*x5664))+(((-1.0)*x5652*x5663))+((r21*x5662))+(((-1.0)*x5651*x5657))+(((-1.0)*r20*x5656)));
evalcond[3]=((((-1.0)*r00*x5656))+(((-1.0)*x5651*x5667))+(((-1.0)*x5664*x5666))+((r01*x5662))+(((-1.0)*x5663*x5665)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5651))+(((-1.0)*x5654*x5665))+((r00*x5650))+(((-1.0)*x5658*x5667))+(((-1.0)*x5656*x5666)));
evalcond[5]=((-1.0)+(((-1.0)*x5651*x5661))+(((-1.0)*x5660*x5664))+((r11*x5662))+(((-1.0)*r10*x5656))+(((-1.0)*x5659*x5663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5668=((1.0)*cj15);
CheckValue<IkReal> x5669=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x5668)))),-1);
if(!x5669.valid){
continue;
}
CheckValue<IkReal> x5670 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*r20*sj16*x5668))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*cj16*r21*x5668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5670.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5669.value)))+(x5670.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5671=IKcos(j14);
IkReal x5672=(cj16*x5671);
IkReal x5673=((1.0)*sj16*x5671);
IkReal x5674=(r22*sj15);
IkReal x5675=IKsin(j14);
IkReal x5676=((1.0)*x5675);
IkReal x5677=(cj15*r21);
IkReal x5678=((1.0)*cj16*x5675);
IkReal x5679=(cj15*r20);
IkReal x5680=((1.0)*sj16*x5675);
IkReal x5681=(r12*sj15);
IkReal x5682=(cj15*r11);
IkReal x5683=(cj15*r10);
IkReal x5684=(sj16*x5675);
IkReal x5685=((1.0)*x5671);
IkReal x5686=((1.0)*cj16*x5671);
IkReal x5687=(r02*sj15);
IkReal x5688=(cj15*r01);
IkReal x5689=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x5673))+(((-1.0)*x5679*x5680))+(((-1.0)*x5674*x5676))+(((-1.0)*x5677*x5678))+((r20*x5672)));
evalcond[1]=((((-1.0)*x5676*x5681))+(((-1.0)*r11*x5673))+((r10*x5672))+(((-1.0)*x5680*x5683))+(((-1.0)*x5678*x5682)));
evalcond[2]=((((-1.0)*x5673*x5679))+(((-1.0)*x5677*x5686))+((r21*x5684))+(((-1.0)*x5674*x5685))+(((-1.0)*r20*x5678)));
evalcond[3]=((((-1.0)*x5685*x5687))+(((-1.0)*x5673*x5689))+(((-1.0)*x5686*x5688))+(((-1.0)*r00*x5678))+((r01*x5684)));
evalcond[4]=((1.0)+(((-1.0)*x5680*x5689))+((r00*x5672))+(((-1.0)*x5678*x5688))+(((-1.0)*r01*x5673))+(((-1.0)*x5676*x5687)));
evalcond[5]=((-1.0)+((r11*x5684))+(((-1.0)*x5673*x5683))+(((-1.0)*x5682*x5686))+(((-1.0)*r10*x5678))+(((-1.0)*x5681*x5685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5690=(r21*sj16);
IkReal x5691=(cj16*r20);
IkReal x5692=(cj16*r21);
IkReal x5693=((1.0)*cj10*cj15);
IkReal x5694=(r20*sj16);
IkReal x5695=(r01*r21);
IkReal x5696=((1.0)*x5695);
IkReal x5697=(cj16*r00*x5690);
IkReal x5698=(r01*sj16*x5691);
IkReal x5699=cj15*cj15;
IkReal x5700=cj16*cj16;
IkReal x5701=((1.0)*r00*r20);
IkReal x5702=((1.0)*cj15*r22*sj15);
IkReal x5703=((1.0)*cj15*r02*sj15);
IkReal x5704=(x5699*x5700);
IkReal x5705=((1.0)*x5699);
CheckValue<IkReal> x5706 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x5691))+((cj10*x5690)))),IkReal(((((-1.0)*cj10*r22*sj15))+(((-1.0)*x5693*x5694))+(((-1.0)*x5692*x5693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5706.valid){
continue;
}
CheckValue<IkReal> x5707=IKPowWithIntegerCheck(IKsign((((x5695*x5700))+(((-1.0)*x5696))+(((-1.0)*x5698*x5705))+(((-1.0)*x5694*x5703))+(((-1.0)*x5692*x5703))+(((-1.0)*r00*sj16*x5702))+(((-1.0)*cj16*r01*x5702))+(((-1.0)*x5700*x5701))+((r02*r22*x5699))+x5698+x5697+((r00*r20*x5704))+(((-1.0)*x5699*x5701))+(((-1.0)*x5696*x5704))+(((-1.0)*r02*r22))+(((-1.0)*x5697*x5705)))),-1);
if(!x5707.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5706.value)+(((1.5707963267949)*(x5707.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5708=IKcos(j14);
IkReal x5709=(cj16*x5708);
IkReal x5710=((1.0)*sj16*x5708);
IkReal x5711=(r22*sj15);
IkReal x5712=IKsin(j14);
IkReal x5713=((1.0)*x5712);
IkReal x5714=(cj15*r21);
IkReal x5715=((1.0)*cj16*x5712);
IkReal x5716=(cj15*r20);
IkReal x5717=((1.0)*sj16*x5712);
IkReal x5718=(sj16*x5712);
IkReal x5719=((1.0)*x5708);
IkReal x5720=((1.0)*cj16*x5708);
IkReal x5721=(r12*sj15);
IkReal x5722=(cj15*r11);
IkReal x5723=(cj15*r10);
IkReal x5724=(r02*sj15);
IkReal x5725=(cj15*r01);
IkReal x5726=(cj15*r00);
evalcond[0]=((((-1.0)*x5711*x5713))+(((-1.0)*x5714*x5715))+(((-1.0)*x5716*x5717))+((r20*x5709))+(((-1.0)*r21*x5710)));
evalcond[1]=((((-1.0)*x5714*x5720))+(((-1.0)*r20*x5715))+((r21*x5718))+(((-1.0)*x5711*x5719))+(((-1.0)*x5710*x5716)));
evalcond[2]=((((-1.0)*x5715*x5722))+(((-1.0)*x5713*x5721))+(((-1.0)*x5717*x5723))+cj10+((r10*x5709))+(((-1.0)*r11*x5710)));
evalcond[3]=((((-1.0)*x5720*x5725))+((r01*x5718))+(((-1.0)*x5719*x5724))+cj10+(((-1.0)*x5710*x5726))+(((-1.0)*r00*x5715)));
evalcond[4]=((((-1.0)*x5719*x5721))+(((-1.0)*x5720*x5722))+sj10+((r11*x5718))+(((-1.0)*x5710*x5723))+(((-1.0)*r10*x5715)));
evalcond[5]=(((r00*x5709))+(((-1.0)*x5715*x5725))+(((-1.0)*x5717*x5726))+(((-1.0)*x5713*x5724))+(((-1.0)*(1.0)*sj10))+(((-1.0)*r01*x5710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5727=(cj10*r21);
IkReal x5728=(cj15*cj16);
IkReal x5729=(cj10*r20);
IkReal x5730=(cj15*sj16);
IkReal x5731=(r12*r22);
IkReal x5732=cj15*cj15;
IkReal x5733=(r10*r20);
IkReal x5734=(x5732*x5733);
IkReal x5735=cj16*cj16;
IkReal x5736=(r10*r21);
IkReal x5737=((1.0)*cj16*sj16);
IkReal x5738=(r11*r20);
IkReal x5739=(r12*sj15);
IkReal x5740=(r11*r21*x5735);
IkReal x5741=(cj16*sj16*x5732);
CheckValue<IkReal> x5742 = IKatan2WithCheck(IkReal((((cj10*((r22*sj15))))+((x5729*x5730))+((x5727*x5728)))),IkReal((((sj16*x5727))+(((-1.0)*cj16*x5729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5742.valid){
continue;
}
CheckValue<IkReal> x5743=IKPowWithIntegerCheck(IKsign((((x5736*x5741))+((r11*r22*sj15*x5728))+((cj15*r20*sj16*x5739))+(((-1.0)*x5731*x5732))+((x5732*x5740))+((x5738*x5741))+((x5733*x5735))+((cj15*cj16*r21*x5739))+(((-1.0)*x5740))+(((-1.0)*x5737*x5738))+(((-1.0)*x5736*x5737))+x5731+x5734+((r11*r21))+((r10*r22*sj15*x5730))+(((-1.0)*x5734*x5735)))),-1);
if(!x5743.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5742.value)+(((1.5707963267949)*(x5743.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5744=IKcos(j14);
IkReal x5745=(cj16*x5744);
IkReal x5746=((1.0)*sj16*x5744);
IkReal x5747=(r22*sj15);
IkReal x5748=IKsin(j14);
IkReal x5749=((1.0)*x5748);
IkReal x5750=(cj15*r21);
IkReal x5751=((1.0)*cj16*x5748);
IkReal x5752=(cj15*r20);
IkReal x5753=((1.0)*sj16*x5748);
IkReal x5754=(sj16*x5748);
IkReal x5755=((1.0)*x5744);
IkReal x5756=((1.0)*cj16*x5744);
IkReal x5757=(r12*sj15);
IkReal x5758=(cj15*r11);
IkReal x5759=(cj15*r10);
IkReal x5760=(r02*sj15);
IkReal x5761=(cj15*r01);
IkReal x5762=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x5746))+(((-1.0)*x5752*x5753))+(((-1.0)*x5747*x5749))+((r20*x5745))+(((-1.0)*x5750*x5751)));
evalcond[1]=((((-1.0)*x5747*x5755))+(((-1.0)*r20*x5751))+(((-1.0)*x5746*x5752))+(((-1.0)*x5750*x5756))+((r21*x5754)));
evalcond[2]=((((-1.0)*r11*x5746))+(((-1.0)*x5751*x5758))+cj10+(((-1.0)*x5753*x5759))+((r10*x5745))+(((-1.0)*x5749*x5757)));
evalcond[3]=((((-1.0)*x5746*x5762))+(((-1.0)*x5755*x5760))+(((-1.0)*r00*x5751))+cj10+(((-1.0)*x5756*x5761))+((r01*x5754)));
evalcond[4]=((((-1.0)*x5746*x5759))+(((-1.0)*x5756*x5758))+(((-1.0)*r10*x5751))+(((-1.0)*x5755*x5757))+sj10+((r11*x5754)));
evalcond[5]=((((-1.0)*r01*x5746))+(((-1.0)*x5751*x5761))+(((-1.0)*x5753*x5762))+(((-1.0)*(1.0)*sj10))+((r00*x5745))+(((-1.0)*x5749*x5760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5763=((1.0)*sj15);
IkReal x5764=(cj10*r21);
IkReal x5765=((1.0)*cj10*r20);
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*x5765))+((sj16*x5764)))),IkReal(((((-1.0)*cj15*cj16*x5764))+(((-1.0)*cj15*sj16*x5765))+(((-1.0)*cj10*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
CheckValue<IkReal> x5767=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x5763))+((cj15*r02))+(((-1.0)*cj16*r01*x5763)))),-1);
if(!x5767.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5766.value)+(((1.5707963267949)*(x5767.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5768=IKcos(j14);
IkReal x5769=(cj16*x5768);
IkReal x5770=((1.0)*sj16*x5768);
IkReal x5771=(r22*sj15);
IkReal x5772=IKsin(j14);
IkReal x5773=((1.0)*x5772);
IkReal x5774=(cj15*r21);
IkReal x5775=((1.0)*cj16*x5772);
IkReal x5776=(cj15*r20);
IkReal x5777=((1.0)*sj16*x5772);
IkReal x5778=(sj16*x5772);
IkReal x5779=((1.0)*x5768);
IkReal x5780=((1.0)*cj16*x5768);
IkReal x5781=(r12*sj15);
IkReal x5782=(cj15*r11);
IkReal x5783=(cj15*r10);
IkReal x5784=(r02*sj15);
IkReal x5785=(cj15*r01);
IkReal x5786=(cj15*r00);
evalcond[0]=((((-1.0)*x5774*x5775))+(((-1.0)*x5771*x5773))+(((-1.0)*x5776*x5777))+((r20*x5769))+(((-1.0)*r21*x5770)));
evalcond[1]=((((-1.0)*x5771*x5779))+(((-1.0)*r20*x5775))+(((-1.0)*x5770*x5776))+((r21*x5778))+(((-1.0)*x5774*x5780)));
evalcond[2]=((((-1.0)*x5773*x5781))+cj10+(((-1.0)*x5775*x5782))+(((-1.0)*r11*x5770))+(((-1.0)*x5777*x5783))+((r10*x5769)));
evalcond[3]=(cj10+(((-1.0)*x5779*x5784))+(((-1.0)*x5770*x5786))+((r01*x5778))+(((-1.0)*x5780*x5785))+(((-1.0)*r00*x5775)));
evalcond[4]=((((-1.0)*x5779*x5781))+sj10+(((-1.0)*r10*x5775))+(((-1.0)*x5780*x5782))+((r11*x5778))+(((-1.0)*x5770*x5783)));
evalcond[5]=((((-1.0)*x5773*x5784))+(((-1.0)*x5775*x5785))+((r00*x5769))+(((-1.0)*r01*x5770))+(((-1.0)*(1.0)*sj10))+(((-1.0)*x5777*x5786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5787=((1.26697583102024)*cj15);
IkReal x5788=((0.0338501117053686)*sj15);
IkReal x5789=((0.0338501117053686)*cj15*cj16);
IkReal x5790=((0.0338501117053686)*cj15*sj16);
IkReal x5791=((1.26697583102024)*cj16*sj15);
IkReal x5792=((1.26697583102024)*sj15*sj16);
if( IKabs((((r11*x5789))+((r10*x5790))+(((-1.0)*(3.38501117053686)*py))+((r12*x5788))+((r12*x5787))+(((-1.0)*r11*x5791))+(((-1.0)*r10*x5792)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5791))+(((-1.0)*r00*x5792))+(((-1.0)*(3.38501117053686)*px))+((r01*x5789))+((r02*x5787))+((r02*x5788))+((r00*x5790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x5789))+((r10*x5790))+(((-1.0)*(3.38501117053686)*py))+((r12*x5788))+((r12*x5787))+(((-1.0)*r11*x5791))+(((-1.0)*r10*x5792))))+IKsqr(((((-1.0)*r01*x5791))+(((-1.0)*r00*x5792))+(((-1.0)*(3.38501117053686)*px))+((r01*x5789))+((r02*x5787))+((r02*x5788))+((r00*x5790))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r11*x5789))+((r10*x5790))+(((-1.0)*(3.38501117053686)*py))+((r12*x5788))+((r12*x5787))+(((-1.0)*r11*x5791))+(((-1.0)*r10*x5792))), ((((-1.0)*r01*x5791))+(((-1.0)*r00*x5792))+(((-1.0)*(3.38501117053686)*px))+((r01*x5789))+((r02*x5787))+((r02*x5788))+((r00*x5790))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5793=((0.37429)*cj15);
IkReal x5794=((0.01)*sj15);
IkReal x5795=((0.01)*cj15*cj16);
IkReal x5796=((0.01)*cj15*sj16);
IkReal x5797=((0.37429)*cj16*sj15);
IkReal x5798=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+((r00*x5796))+(((-1.0)*r00*x5798))+(((-1.0)*(0.29542)*(IKcos(j10))))+((r02*x5794))+(((-1.0)*r01*x5797))+((r02*x5793))+((r01*x5795)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x5797))+((r12*x5793))+((r11*x5795))+(((-1.0)*(0.29542)*(IKsin(j10))))+((r12*x5794))+((r10*x5796))+(((-1.0)*r10*x5798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5799=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x5800=(r21*sj10);
IkReal x5801=(r20*sj10);
j14eval[0]=x5799;
j14eval[1]=((IKabs((((cj15*sj16*x5801))+((r22*sj10*sj15))+((cj15*cj16*x5800)))))+(IKabs((((sj16*x5800))+(((-1.0)*cj16*x5801))))));
j14eval[2]=IKsign(x5799);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5802=(r02*r22);
IkReal x5803=cj15*cj15;
IkReal x5804=(r00*r20);
IkReal x5805=(x5803*x5804);
IkReal x5806=cj16*cj16;
IkReal x5807=(r00*r21);
IkReal x5808=((1.0)*cj16*sj16);
IkReal x5809=(r01*r20);
IkReal x5810=(cj15*cj16);
IkReal x5811=(r02*sj15);
IkReal x5812=(cj15*sj16);
IkReal x5813=(r01*r21*x5806);
IkReal x5814=(cj16*sj16*x5803);
IkReal x5815=((((-1.0)*x5813))+(((-1.0)*x5805*x5806))+((cj15*cj16*r21*x5811))+((cj15*r20*sj16*x5811))+((x5803*x5813))+(((-1.0)*x5808*x5809))+((r00*r22*sj15*x5812))+((x5804*x5806))+((r01*r21))+((x5809*x5814))+(((-1.0)*x5802*x5803))+((x5807*x5814))+((r01*r22*sj15*x5810))+x5802+x5805+(((-1.0)*x5807*x5808)));
IkReal x5816=(r21*sj10);
IkReal x5817=(r20*sj10);
j14eval[0]=x5815;
j14eval[1]=IKsign(x5815);
j14eval[2]=((IKabs((((x5810*x5816))+((sj10*((r22*sj15))))+((x5812*x5817)))))+(IKabs(((((-1.0)*cj16*x5817))+((sj16*x5816))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5818=(r01*r21);
IkReal x5819=((1.0)*x5818);
IkReal x5820=(r02*r22);
IkReal x5821=(cj16*sj16);
IkReal x5822=(r00*r21);
IkReal x5823=(r01*r20);
IkReal x5824=cj15*cj15;
IkReal x5825=cj16*cj16;
IkReal x5826=((1.0)*r00*r20);
IkReal x5827=((1.0)*cj15*sj16);
IkReal x5828=(x5824*x5825);
IkReal x5829=((1.0)*cj16*sj16*x5824);
IkReal x5830=((((-1.0)*cj15*cj16*r02*r21*sj15))+(((-1.0)*r02*r20*sj15*x5827))+((x5820*x5824))+(((-1.0)*x5819*x5828))+(((-1.0)*r00*r22*sj15*x5827))+(((-1.0)*x5823*x5829))+((x5821*x5823))+(((-1.0)*x5820))+((r00*r20*x5828))+(((-1.0)*x5822*x5829))+(((-1.0)*x5819))+(((-1.0)*cj15*cj16*r01*r22*sj15))+(((-1.0)*x5825*x5826))+((x5821*x5822))+((x5818*x5825))+(((-1.0)*x5824*x5826)));
IkReal x5831=(cj10*r21);
IkReal x5832=(cj10*r20);
j14eval[0]=x5830;
j14eval[1]=IKsign(x5830);
j14eval[2]=((IKabs(((((-1.0)*cj16*x5832))+((sj16*x5831)))))+(IKabs((((cj10*((r22*sj15))))+((cj15*cj16*x5831))+((cj15*sj16*x5832))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5833=((1.0)*cj15);
IkReal x5834=((((-1.0)*r12*x5833))+((cj16*r11*sj15))+((r10*sj15*sj16)));
j14eval[0]=x5834;
j14eval[1]=((IKabs(((((-1.0)*cj16*r21*x5833))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*r20*sj16*x5833)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x5834);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5835=((1.0)*cj16);
IkReal x5836=((1.0)*sj15);
IkReal x5837=((((-1.0)*r21*sj15*x5835))+(((-1.0)*r20*sj16*x5836))+((cj15*r22)));
j14eval[0]=x5837;
j14eval[1]=((IKabs((((r11*sj16))+(((-1.0)*r10*x5835)))))+(IKabs(((((-1.0)*cj15*r11*x5835))+(((-1.0)*r12*x5836))+(((-1.0)*(1.0)*cj15*r10*sj16))))));
j14eval[2]=IKsign(x5837);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5838=r11*r11;
IkReal x5839=r12*r12;
IkReal x5840=(r11*sj16);
IkReal x5841=((2.0)*cj16*r10*x5840);
IkReal x5842=cj15*cj15;
IkReal x5843=r10*r10;
IkReal x5844=(x5842*x5843);
IkReal x5845=cj16*cj16;
IkReal x5846=((2.0)*r12*sj15);
IkReal x5847=(cj15*cj16*r11);
IkReal x5848=(cj15*r10*sj16);
IkReal x5849=(x5838*x5845);
IkReal x5850=(x5844+(((-1.0)*x5849))+(((-1.0)*x5844*x5845))+(((-1.0)*x5841))+((x5846*x5847))+((x5841*x5842))+((x5846*x5848))+((x5843*x5845))+((x5842*x5849))+(((-1.0)*x5839*x5842))+x5839+x5838);
j14eval[0]=x5850;
j14eval[1]=IKsign(x5850);
j14eval[2]=((IKabs((x5848+x5847+((r12*sj15)))))+(IKabs(((((-1.0)*x5840))+((cj16*r10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5851=(r11*sj16);
IkReal x5852=(cj15*cj16*r11);
IkReal x5853=(cj15*r10*sj16);
IkReal x5854=r11*r11;
IkReal x5855=r12*r12;
IkReal x5856=((2.0)*cj16*r10*x5851);
IkReal x5857=cj15*cj15;
IkReal x5858=r10*r10;
IkReal x5859=(x5857*x5858);
IkReal x5860=cj16*cj16;
IkReal x5861=((2.0)*r12*sj15);
IkReal x5862=(x5854*x5860);
CheckValue<IkReal> x5863=IKPowWithIntegerCheck(IKsign((((x5858*x5860))+(((-1.0)*x5856))+(((-1.0)*x5855*x5857))+((x5856*x5857))+(((-1.0)*x5862))+((x5853*x5861))+((x5852*x5861))+((x5857*x5862))+x5859+x5855+x5854+(((-1.0)*x5859*x5860)))),-1);
if(!x5863.valid){
continue;
}
CheckValue<IkReal> x5864 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x5851)))),IkReal((((r12*sj15))+x5852+x5853)),IKFAST_ATAN2_MAGTHRESH);
if(!x5864.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5863.value)))+(x5864.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5865=IKcos(j14);
IkReal x5866=(cj16*x5865);
IkReal x5867=((1.0)*sj16*x5865);
IkReal x5868=(r22*sj15);
IkReal x5869=IKsin(j14);
IkReal x5870=((1.0)*x5869);
IkReal x5871=(cj15*r21);
IkReal x5872=((1.0)*cj16*x5869);
IkReal x5873=(cj15*r20);
IkReal x5874=((1.0)*sj16*x5869);
IkReal x5875=(r12*sj15);
IkReal x5876=(cj15*r11);
IkReal x5877=(cj15*r10);
IkReal x5878=(sj16*x5869);
IkReal x5879=((1.0)*x5865);
IkReal x5880=((1.0)*cj16*x5865);
IkReal x5881=(r02*sj15);
IkReal x5882=(cj15*r01);
IkReal x5883=(cj15*r00);
evalcond[0]=((((-1.0)*x5873*x5874))+(((-1.0)*x5871*x5872))+((r20*x5866))+(((-1.0)*x5868*x5870))+(((-1.0)*r21*x5867)));
evalcond[1]=((((-1.0)*x5872*x5876))+(((-1.0)*x5874*x5877))+(((-1.0)*x5870*x5875))+((r10*x5866))+(((-1.0)*r11*x5867)));
evalcond[2]=((((-1.0)*r20*x5872))+(((-1.0)*x5868*x5879))+(((-1.0)*x5871*x5880))+((r21*x5878))+(((-1.0)*x5867*x5873)));
evalcond[3]=((((-1.0)*x5867*x5883))+(((-1.0)*x5880*x5882))+(((-1.0)*r00*x5872))+(((-1.0)*x5879*x5881))+((r01*x5878)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5867))+(((-1.0)*x5870*x5881))+(((-1.0)*x5872*x5882))+(((-1.0)*x5874*x5883))+((r00*x5866)));
evalcond[5]=((1.0)+(((-1.0)*x5875*x5879))+((r11*x5878))+(((-1.0)*r10*x5872))+(((-1.0)*x5867*x5877))+(((-1.0)*x5876*x5880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5884=((1.0)*cj16);
IkReal x5885=((1.0)*sj15);
CheckValue<IkReal> x5886 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5884))+((r11*sj16)))),IkReal(((((-1.0)*cj15*r11*x5884))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*r12*x5885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5886.valid){
continue;
}
CheckValue<IkReal> x5887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x5885))+(((-1.0)*r21*sj15*x5884))+((cj15*r22)))),-1);
if(!x5887.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5886.value)+(((1.5707963267949)*(x5887.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5888=IKcos(j14);
IkReal x5889=(cj16*x5888);
IkReal x5890=((1.0)*sj16*x5888);
IkReal x5891=(r22*sj15);
IkReal x5892=IKsin(j14);
IkReal x5893=((1.0)*x5892);
IkReal x5894=(cj15*r21);
IkReal x5895=((1.0)*cj16*x5892);
IkReal x5896=(cj15*r20);
IkReal x5897=((1.0)*sj16*x5892);
IkReal x5898=(r12*sj15);
IkReal x5899=(cj15*r11);
IkReal x5900=(cj15*r10);
IkReal x5901=(sj16*x5892);
IkReal x5902=((1.0)*x5888);
IkReal x5903=((1.0)*cj16*x5888);
IkReal x5904=(r02*sj15);
IkReal x5905=(cj15*r01);
IkReal x5906=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x5890))+(((-1.0)*x5891*x5893))+(((-1.0)*x5896*x5897))+((r20*x5889))+(((-1.0)*x5894*x5895)));
evalcond[1]=((((-1.0)*r11*x5890))+((r10*x5889))+(((-1.0)*x5895*x5899))+(((-1.0)*x5897*x5900))+(((-1.0)*x5893*x5898)));
evalcond[2]=((((-1.0)*x5894*x5903))+((r21*x5901))+(((-1.0)*x5891*x5902))+(((-1.0)*x5890*x5896))+(((-1.0)*r20*x5895)));
evalcond[3]=((((-1.0)*x5890*x5906))+(((-1.0)*x5903*x5905))+(((-1.0)*x5902*x5904))+((r01*x5901))+(((-1.0)*r00*x5895)));
evalcond[4]=((1.0)+(((-1.0)*x5897*x5906))+(((-1.0)*r01*x5890))+(((-1.0)*x5893*x5904))+(((-1.0)*x5895*x5905))+((r00*x5889)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5895))+(((-1.0)*x5899*x5903))+((r11*x5901))+(((-1.0)*x5890*x5900))+(((-1.0)*x5898*x5902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5907=((1.0)*cj15);
CheckValue<IkReal> x5908=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x5907)))),-1);
if(!x5908.valid){
continue;
}
CheckValue<IkReal> x5909 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*r20*sj16*x5907))+(((-1.0)*cj16*r21*x5907))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5909.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5908.value)))+(x5909.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5910=IKcos(j14);
IkReal x5911=(cj16*x5910);
IkReal x5912=((1.0)*sj16*x5910);
IkReal x5913=(r22*sj15);
IkReal x5914=IKsin(j14);
IkReal x5915=((1.0)*x5914);
IkReal x5916=(cj15*r21);
IkReal x5917=((1.0)*cj16*x5914);
IkReal x5918=(cj15*r20);
IkReal x5919=((1.0)*sj16*x5914);
IkReal x5920=(r12*sj15);
IkReal x5921=(cj15*r11);
IkReal x5922=(cj15*r10);
IkReal x5923=(sj16*x5914);
IkReal x5924=((1.0)*x5910);
IkReal x5925=((1.0)*cj16*x5910);
IkReal x5926=(r02*sj15);
IkReal x5927=(cj15*r01);
IkReal x5928=(cj15*r00);
evalcond[0]=((((-1.0)*x5918*x5919))+(((-1.0)*r21*x5912))+(((-1.0)*x5916*x5917))+(((-1.0)*x5913*x5915))+((r20*x5911)));
evalcond[1]=(((r10*x5911))+(((-1.0)*x5917*x5921))+(((-1.0)*r11*x5912))+(((-1.0)*x5915*x5920))+(((-1.0)*x5919*x5922)));
evalcond[2]=(((r21*x5923))+(((-1.0)*x5912*x5918))+(((-1.0)*x5916*x5925))+(((-1.0)*x5913*x5924))+(((-1.0)*r20*x5917)));
evalcond[3]=((((-1.0)*r00*x5917))+(((-1.0)*x5925*x5927))+((r01*x5923))+(((-1.0)*x5912*x5928))+(((-1.0)*x5924*x5926)));
evalcond[4]=((1.0)+((r00*x5911))+(((-1.0)*x5919*x5928))+(((-1.0)*x5917*x5927))+(((-1.0)*r01*x5912))+(((-1.0)*x5915*x5926)));
evalcond[5]=((1.0)+(((-1.0)*x5912*x5922))+((r11*x5923))+(((-1.0)*x5920*x5924))+(((-1.0)*x5921*x5925))+(((-1.0)*r10*x5917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5929=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x5929;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x5929);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5930=((1.0)*sj16);
IkReal x5931=((((-1.0)*(1.0)*cj16*r21*sj15))+((cj15*r22))+(((-1.0)*r20*sj15*x5930)));
j14eval[0]=x5931;
j14eval[1]=((IKabs(((((-1.0)*r11*x5930))+((cj16*r10)))))+(IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15))))));
j14eval[2]=IKsign(x5931);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5932=r11*r11;
IkReal x5933=((1.0)*x5932);
IkReal x5934=r12*r12;
IkReal x5935=(r11*sj16);
IkReal x5936=((2.0)*cj16*r10*x5935);
IkReal x5937=cj15*cj15;
IkReal x5938=cj16*cj16;
IkReal x5939=((2.0)*r12*sj15);
IkReal x5940=(cj15*cj16*r11);
IkReal x5941=(cj15*r10*sj16);
IkReal x5942=r10*r10;
IkReal x5943=((1.0)*x5942);
IkReal x5944=(x5937*x5938);
IkReal x5945=((((-1.0)*x5933*x5944))+((x5934*x5937))+(((-1.0)*x5934))+(((-1.0)*x5938*x5943))+(((-1.0)*x5936*x5937))+((x5932*x5938))+((x5942*x5944))+x5936+(((-1.0)*x5939*x5941))+(((-1.0)*x5937*x5943))+(((-1.0)*x5939*x5940))+(((-1.0)*x5933)));
j14eval[0]=x5945;
j14eval[1]=((IKabs(((((-1.0)*x5935))+((cj16*r10)))))+(IKabs((((r12*sj15))+x5940+x5941))));
j14eval[2]=IKsign(x5945);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5946=(r11*sj16);
IkReal x5947=(cj15*cj16*r11);
IkReal x5948=(cj15*r10*sj16);
IkReal x5949=r11*r11;
IkReal x5950=((1.0)*x5949);
IkReal x5951=r12*r12;
IkReal x5952=((2.0)*cj16*r10*x5946);
IkReal x5953=cj15*cj15;
IkReal x5954=cj16*cj16;
IkReal x5955=((2.0)*r12*sj15);
IkReal x5956=r10*r10;
IkReal x5957=((1.0)*x5956);
IkReal x5958=(x5953*x5954);
CheckValue<IkReal> x5959 = IKatan2WithCheck(IkReal(((((-1.0)*x5946))+((cj16*r10)))),IkReal((((r12*sj15))+x5948+x5947)),IKFAST_ATAN2_MAGTHRESH);
if(!x5959.valid){
continue;
}
CheckValue<IkReal> x5960=IKPowWithIntegerCheck(IKsign((((x5949*x5954))+(((-1.0)*x5951))+(((-1.0)*x5954*x5957))+(((-1.0)*x5952*x5953))+(((-1.0)*x5947*x5955))+(((-1.0)*x5948*x5955))+((x5951*x5953))+(((-1.0)*x5950*x5958))+(((-1.0)*x5953*x5957))+x5952+(((-1.0)*x5950))+((x5956*x5958)))),-1);
if(!x5960.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5959.value)+(((1.5707963267949)*(x5960.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5961=IKcos(j14);
IkReal x5962=(cj16*x5961);
IkReal x5963=((1.0)*sj16*x5961);
IkReal x5964=(r22*sj15);
IkReal x5965=IKsin(j14);
IkReal x5966=((1.0)*x5965);
IkReal x5967=(cj15*r21);
IkReal x5968=((1.0)*cj16*x5965);
IkReal x5969=(cj15*r20);
IkReal x5970=((1.0)*sj16*x5965);
IkReal x5971=(r12*sj15);
IkReal x5972=(cj15*r11);
IkReal x5973=(cj15*r10);
IkReal x5974=(sj16*x5965);
IkReal x5975=((1.0)*x5961);
IkReal x5976=((1.0)*cj16*x5961);
IkReal x5977=(r02*sj15);
IkReal x5978=(cj15*r01);
IkReal x5979=(cj15*r00);
evalcond[0]=((((-1.0)*x5967*x5968))+((r20*x5962))+(((-1.0)*x5969*x5970))+(((-1.0)*r21*x5963))+(((-1.0)*x5964*x5966)));
evalcond[1]=((((-1.0)*x5968*x5972))+(((-1.0)*x5966*x5971))+(((-1.0)*r11*x5963))+(((-1.0)*x5970*x5973))+((r10*x5962)));
evalcond[2]=(((r21*x5974))+(((-1.0)*x5967*x5976))+(((-1.0)*x5964*x5975))+(((-1.0)*x5963*x5969))+(((-1.0)*r20*x5968)));
evalcond[3]=((((-1.0)*x5976*x5978))+((r01*x5974))+(((-1.0)*r00*x5968))+(((-1.0)*x5963*x5979))+(((-1.0)*x5975*x5977)));
evalcond[4]=((-1.0)+((r00*x5962))+(((-1.0)*x5968*x5978))+(((-1.0)*r01*x5963))+(((-1.0)*x5966*x5977))+(((-1.0)*x5970*x5979)));
evalcond[5]=((-1.0)+((r11*x5974))+(((-1.0)*r10*x5968))+(((-1.0)*x5971*x5975))+(((-1.0)*x5972*x5976))+(((-1.0)*x5963*x5973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5980=((1.0)*sj16);
CheckValue<IkReal> x5981 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x5980)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5981.valid){
continue;
}
CheckValue<IkReal> x5982=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+((cj15*r22))+(((-1.0)*r20*sj15*x5980)))),-1);
if(!x5982.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5981.value)+(((1.5707963267949)*(x5982.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5983=IKcos(j14);
IkReal x5984=(cj16*x5983);
IkReal x5985=((1.0)*sj16*x5983);
IkReal x5986=(r22*sj15);
IkReal x5987=IKsin(j14);
IkReal x5988=((1.0)*x5987);
IkReal x5989=(cj15*r21);
IkReal x5990=((1.0)*cj16*x5987);
IkReal x5991=(cj15*r20);
IkReal x5992=((1.0)*sj16*x5987);
IkReal x5993=(r12*sj15);
IkReal x5994=(cj15*r11);
IkReal x5995=(cj15*r10);
IkReal x5996=(sj16*x5987);
IkReal x5997=((1.0)*x5983);
IkReal x5998=((1.0)*cj16*x5983);
IkReal x5999=(r02*sj15);
IkReal x6000=(cj15*r01);
IkReal x6001=(cj15*r00);
evalcond[0]=((((-1.0)*x5991*x5992))+((r20*x5984))+(((-1.0)*x5989*x5990))+(((-1.0)*r21*x5985))+(((-1.0)*x5986*x5988)));
evalcond[1]=((((-1.0)*x5988*x5993))+(((-1.0)*r11*x5985))+(((-1.0)*x5990*x5994))+((r10*x5984))+(((-1.0)*x5992*x5995)));
evalcond[2]=((((-1.0)*x5986*x5997))+((r21*x5996))+(((-1.0)*x5989*x5998))+(((-1.0)*r20*x5990))+(((-1.0)*x5985*x5991)));
evalcond[3]=(((r01*x5996))+(((-1.0)*x5985*x6001))+(((-1.0)*x5997*x5999))+(((-1.0)*r00*x5990))+(((-1.0)*x5998*x6000)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5985))+((r00*x5984))+(((-1.0)*x5992*x6001))+(((-1.0)*x5988*x5999))+(((-1.0)*x5990*x6000)));
evalcond[5]=((-1.0)+(((-1.0)*x5985*x5995))+(((-1.0)*x5994*x5998))+(((-1.0)*r10*x5990))+((r11*x5996))+(((-1.0)*x5993*x5997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6002 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6002.valid){
continue;
}
CheckValue<IkReal> x6003=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x6003.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6002.value)+(((1.5707963267949)*(x6003.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6004=IKcos(j14);
IkReal x6005=(cj16*x6004);
IkReal x6006=((1.0)*sj16*x6004);
IkReal x6007=(r22*sj15);
IkReal x6008=IKsin(j14);
IkReal x6009=((1.0)*x6008);
IkReal x6010=(cj15*r21);
IkReal x6011=((1.0)*cj16*x6008);
IkReal x6012=(cj15*r20);
IkReal x6013=((1.0)*sj16*x6008);
IkReal x6014=(r12*sj15);
IkReal x6015=(cj15*r11);
IkReal x6016=(cj15*r10);
IkReal x6017=(sj16*x6008);
IkReal x6018=((1.0)*x6004);
IkReal x6019=((1.0)*cj16*x6004);
IkReal x6020=(r02*sj15);
IkReal x6021=(cj15*r01);
IkReal x6022=(cj15*r00);
evalcond[0]=((((-1.0)*x6012*x6013))+(((-1.0)*x6010*x6011))+(((-1.0)*r21*x6006))+((r20*x6005))+(((-1.0)*x6007*x6009)));
evalcond[1]=(((r10*x6005))+(((-1.0)*r11*x6006))+(((-1.0)*x6009*x6014))+(((-1.0)*x6013*x6016))+(((-1.0)*x6011*x6015)));
evalcond[2]=((((-1.0)*r20*x6011))+(((-1.0)*x6006*x6012))+((r21*x6017))+(((-1.0)*x6010*x6019))+(((-1.0)*x6007*x6018)));
evalcond[3]=((((-1.0)*x6019*x6021))+(((-1.0)*x6018*x6020))+(((-1.0)*x6006*x6022))+((r01*x6017))+(((-1.0)*r00*x6011)));
evalcond[4]=((-1.0)+((r00*x6005))+(((-1.0)*x6013*x6022))+(((-1.0)*r01*x6006))+(((-1.0)*x6011*x6021))+(((-1.0)*x6009*x6020)));
evalcond[5]=((-1.0)+(((-1.0)*x6015*x6019))+(((-1.0)*x6014*x6018))+((r11*x6017))+(((-1.0)*r10*x6011))+(((-1.0)*x6006*x6016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6023=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x6023;
j14eval[1]=IKsign(x6023);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6024=((1.0)*sj16);
IkReal x6025=((((-1.0)*r00*sj15*x6024))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
j14eval[0]=x6025;
j14eval[1]=IKsign(x6025);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs(((((-1.0)*r21*x6024))+((cj16*r20))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6026=r01*r01;
IkReal x6027=r02*r02;
IkReal x6028=(r01*sj16);
IkReal x6029=((2.0)*cj16*r00*x6028);
IkReal x6030=cj15*cj15;
IkReal x6031=r00*r00;
IkReal x6032=(x6030*x6031);
IkReal x6033=cj16*cj16;
IkReal x6034=((2.0)*r02*sj15);
IkReal x6035=(cj15*cj16*r01);
IkReal x6036=(cj15*r00*sj16);
IkReal x6037=(x6026*x6033);
IkReal x6038=(((x6034*x6035))+((x6029*x6030))+((x6034*x6036))+x6032+(((-1.0)*x6029))+(((-1.0)*x6027*x6030))+(((-1.0)*x6037))+((x6031*x6033))+(((-1.0)*x6032*x6033))+x6027+x6026+((x6030*x6037)));
j14eval[0]=x6038;
j14eval[1]=((IKabs((((r02*sj15))+x6036+x6035)))+(IKabs(((((-1.0)*x6028))+((cj16*r00))))));
j14eval[2]=IKsign(x6038);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6039=(r01*sj16);
IkReal x6040=(cj15*cj16*r01);
IkReal x6041=(cj15*r00*sj16);
IkReal x6042=r01*r01;
IkReal x6043=r02*r02;
IkReal x6044=((2.0)*cj16*r00*x6039);
IkReal x6045=cj15*cj15;
IkReal x6046=r00*r00;
IkReal x6047=(x6045*x6046);
IkReal x6048=cj16*cj16;
IkReal x6049=((2.0)*r02*sj15);
IkReal x6050=(x6042*x6048);
CheckValue<IkReal> x6051 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*x6039)))),IkReal((((r02*sj15))+x6040+x6041)),IKFAST_ATAN2_MAGTHRESH);
if(!x6051.valid){
continue;
}
CheckValue<IkReal> x6052=IKPowWithIntegerCheck(IKsign((((x6046*x6048))+((x6040*x6049))+(((-1.0)*x6050))+(((-1.0)*x6044))+((x6041*x6049))+((x6045*x6050))+(((-1.0)*x6043*x6045))+((x6044*x6045))+x6042+x6043+x6047+(((-1.0)*x6047*x6048)))),-1);
if(!x6052.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6051.value)+(((1.5707963267949)*(x6052.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6053=IKcos(j14);
IkReal x6054=(cj16*x6053);
IkReal x6055=((1.0)*sj16*x6053);
IkReal x6056=(r22*sj15);
IkReal x6057=IKsin(j14);
IkReal x6058=((1.0)*x6057);
IkReal x6059=(cj15*r21);
IkReal x6060=((1.0)*cj16*x6057);
IkReal x6061=(cj15*r20);
IkReal x6062=((1.0)*sj16*x6057);
IkReal x6063=(r02*sj15);
IkReal x6064=(cj15*r01);
IkReal x6065=(cj15*r00);
IkReal x6066=(sj16*x6057);
IkReal x6067=((1.0)*x6053);
IkReal x6068=((1.0)*cj16*x6053);
IkReal x6069=(r12*sj15);
IkReal x6070=(cj15*r11);
IkReal x6071=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x6055))+((r20*x6054))+(((-1.0)*x6059*x6060))+(((-1.0)*x6061*x6062))+(((-1.0)*x6056*x6058)));
evalcond[1]=((((-1.0)*x6058*x6063))+((r00*x6054))+(((-1.0)*r01*x6055))+(((-1.0)*x6060*x6064))+(((-1.0)*x6062*x6065)));
evalcond[2]=((((-1.0)*x6055*x6061))+(((-1.0)*x6059*x6068))+((r21*x6066))+(((-1.0)*x6056*x6067))+(((-1.0)*r20*x6060)));
evalcond[3]=((((-1.0)*x6055*x6071))+(((-1.0)*x6067*x6069))+((r11*x6066))+(((-1.0)*x6068*x6070))+(((-1.0)*r10*x6060)));
evalcond[4]=((-1.0)+(((-1.0)*x6060*x6070))+(((-1.0)*x6058*x6069))+(((-1.0)*r11*x6055))+((r10*x6054))+(((-1.0)*x6062*x6071)));
evalcond[5]=((1.0)+(((-1.0)*x6063*x6067))+(((-1.0)*r00*x6060))+(((-1.0)*x6055*x6065))+((r01*x6066))+(((-1.0)*x6064*x6068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6072=((1.0)*sj16);
CheckValue<IkReal> x6073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15*x6072))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x6073.valid){
continue;
}
CheckValue<IkReal> x6074 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*r21*x6072)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6074.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6073.value)))+(x6074.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6075=IKcos(j14);
IkReal x6076=(cj16*x6075);
IkReal x6077=((1.0)*sj16*x6075);
IkReal x6078=(r22*sj15);
IkReal x6079=IKsin(j14);
IkReal x6080=((1.0)*x6079);
IkReal x6081=(cj15*r21);
IkReal x6082=((1.0)*cj16*x6079);
IkReal x6083=(cj15*r20);
IkReal x6084=((1.0)*sj16*x6079);
IkReal x6085=(r02*sj15);
IkReal x6086=(cj15*r01);
IkReal x6087=(cj15*r00);
IkReal x6088=(sj16*x6079);
IkReal x6089=((1.0)*x6075);
IkReal x6090=((1.0)*cj16*x6075);
IkReal x6091=(r12*sj15);
IkReal x6092=(cj15*r11);
IkReal x6093=(cj15*r10);
evalcond[0]=(((r20*x6076))+(((-1.0)*x6078*x6080))+(((-1.0)*x6081*x6082))+(((-1.0)*r21*x6077))+(((-1.0)*x6083*x6084)));
evalcond[1]=((((-1.0)*x6080*x6085))+((r00*x6076))+(((-1.0)*r01*x6077))+(((-1.0)*x6084*x6087))+(((-1.0)*x6082*x6086)));
evalcond[2]=((((-1.0)*x6077*x6083))+(((-1.0)*x6081*x6090))+((r21*x6088))+(((-1.0)*x6078*x6089))+(((-1.0)*r20*x6082)));
evalcond[3]=((((-1.0)*x6077*x6093))+((r11*x6088))+(((-1.0)*x6089*x6091))+(((-1.0)*r10*x6082))+(((-1.0)*x6090*x6092)));
evalcond[4]=((-1.0)+(((-1.0)*x6082*x6092))+((r10*x6076))+(((-1.0)*x6080*x6091))+(((-1.0)*x6084*x6093))+(((-1.0)*r11*x6077)));
evalcond[5]=((1.0)+(((-1.0)*r00*x6082))+(((-1.0)*x6077*x6087))+(((-1.0)*x6085*x6089))+((r01*x6088))+(((-1.0)*x6086*x6090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6094 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6094.valid){
continue;
}
CheckValue<IkReal> x6095=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x6095.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6094.value)+(((1.5707963267949)*(x6095.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6096=IKcos(j14);
IkReal x6097=(cj16*x6096);
IkReal x6098=((1.0)*sj16*x6096);
IkReal x6099=(r22*sj15);
IkReal x6100=IKsin(j14);
IkReal x6101=((1.0)*x6100);
IkReal x6102=(cj15*r21);
IkReal x6103=((1.0)*cj16*x6100);
IkReal x6104=(cj15*r20);
IkReal x6105=((1.0)*sj16*x6100);
IkReal x6106=(r02*sj15);
IkReal x6107=(cj15*r01);
IkReal x6108=(cj15*r00);
IkReal x6109=(sj16*x6100);
IkReal x6110=((1.0)*x6096);
IkReal x6111=((1.0)*cj16*x6096);
IkReal x6112=(r12*sj15);
IkReal x6113=(cj15*r11);
IkReal x6114=(cj15*r10);
evalcond[0]=((((-1.0)*x6102*x6103))+((r20*x6097))+(((-1.0)*r21*x6098))+(((-1.0)*x6099*x6101))+(((-1.0)*x6104*x6105)));
evalcond[1]=((((-1.0)*x6105*x6108))+((r00*x6097))+(((-1.0)*r01*x6098))+(((-1.0)*x6103*x6107))+(((-1.0)*x6101*x6106)));
evalcond[2]=((((-1.0)*x6098*x6104))+(((-1.0)*r20*x6103))+(((-1.0)*x6099*x6110))+((r21*x6109))+(((-1.0)*x6102*x6111)));
evalcond[3]=((((-1.0)*x6111*x6113))+(((-1.0)*x6098*x6114))+((r11*x6109))+(((-1.0)*r10*x6103))+(((-1.0)*x6110*x6112)));
evalcond[4]=((-1.0)+(((-1.0)*x6105*x6114))+(((-1.0)*x6101*x6112))+(((-1.0)*x6103*x6113))+(((-1.0)*r11*x6098))+((r10*x6097)));
evalcond[5]=((1.0)+(((-1.0)*x6107*x6111))+(((-1.0)*r00*x6103))+((r01*x6109))+(((-1.0)*x6106*x6110))+(((-1.0)*x6098*x6108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6115=((1.0)*cj15);
IkReal x6116=((((-1.0)*r22*x6115))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x6116;
j14eval[1]=IKsign(x6116);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*r00*sj16*x6115))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x6115))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6117=((1.0)*cj16);
IkReal x6118=((1.0)*sj15);
IkReal x6119=((((-1.0)*r00*sj16*x6118))+((cj15*r02))+(((-1.0)*r01*sj15*x6117)));
j14eval[0]=x6119;
j14eval[1]=((IKabs((((r21*sj16))+(((-1.0)*r20*x6117)))))+(IKabs(((((-1.0)*cj15*r21*x6117))+(((-1.0)*r22*x6118))+(((-1.0)*(1.0)*cj15*r20*sj16))))));
j14eval[2]=IKsign(x6119);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6120=r01*r01;
IkReal x6121=((1.0)*x6120);
IkReal x6122=r02*r02;
IkReal x6123=(r01*sj16);
IkReal x6124=((2.0)*cj16*r00*x6123);
IkReal x6125=cj15*cj15;
IkReal x6126=cj16*cj16;
IkReal x6127=((2.0)*r02*sj15);
IkReal x6128=(cj15*cj16*r01);
IkReal x6129=(cj15*r00*sj16);
IkReal x6130=r00*r00;
IkReal x6131=((1.0)*x6130);
IkReal x6132=(x6125*x6126);
IkReal x6133=((((-1.0)*x6122))+((x6122*x6125))+x6124+(((-1.0)*x6124*x6125))+(((-1.0)*x6121*x6132))+(((-1.0)*x6126*x6131))+((x6130*x6132))+(((-1.0)*x6125*x6131))+(((-1.0)*x6127*x6129))+(((-1.0)*x6127*x6128))+(((-1.0)*x6121))+((x6120*x6126)));
j14eval[0]=x6133;
j14eval[1]=IKsign(x6133);
j14eval[2]=((IKabs((x6129+x6128+((r02*sj15)))))+(IKabs(((((-1.0)*x6123))+((cj16*r00))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6134=(r01*sj16);
IkReal x6135=(cj15*cj16*r01);
IkReal x6136=(cj15*r00*sj16);
IkReal x6137=r01*r01;
IkReal x6138=((1.0)*x6137);
IkReal x6139=r02*r02;
IkReal x6140=((2.0)*cj16*r00*x6134);
IkReal x6141=cj15*cj15;
IkReal x6142=cj16*cj16;
IkReal x6143=((2.0)*r02*sj15);
IkReal x6144=r00*r00;
IkReal x6145=((1.0)*x6144);
IkReal x6146=(x6141*x6142);
CheckValue<IkReal> x6147=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6139))+(((-1.0)*x6142*x6145))+(((-1.0)*x6136*x6143))+(((-1.0)*x6138))+((x6144*x6146))+x6140+(((-1.0)*x6141*x6145))+((x6139*x6141))+((x6137*x6142))+(((-1.0)*x6140*x6141))+(((-1.0)*x6135*x6143))+(((-1.0)*x6138*x6146)))),-1);
if(!x6147.valid){
continue;
}
CheckValue<IkReal> x6148 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*x6134)))),IkReal((x6136+x6135+((r02*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6148.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6147.value)))+(x6148.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6149=IKcos(j14);
IkReal x6150=(cj16*x6149);
IkReal x6151=((1.0)*sj16*x6149);
IkReal x6152=(r22*sj15);
IkReal x6153=IKsin(j14);
IkReal x6154=((1.0)*x6153);
IkReal x6155=(cj15*r21);
IkReal x6156=((1.0)*cj16*x6153);
IkReal x6157=(cj15*r20);
IkReal x6158=((1.0)*sj16*x6153);
IkReal x6159=(r02*sj15);
IkReal x6160=(cj15*r01);
IkReal x6161=(cj15*r00);
IkReal x6162=(sj16*x6153);
IkReal x6163=((1.0)*x6149);
IkReal x6164=((1.0)*cj16*x6149);
IkReal x6165=(r12*sj15);
IkReal x6166=(cj15*r11);
IkReal x6167=(cj15*r10);
evalcond[0]=(((r20*x6150))+(((-1.0)*x6155*x6156))+(((-1.0)*r21*x6151))+(((-1.0)*x6152*x6154))+(((-1.0)*x6157*x6158)));
evalcond[1]=((((-1.0)*x6156*x6160))+(((-1.0)*r01*x6151))+(((-1.0)*x6154*x6159))+((r00*x6150))+(((-1.0)*x6158*x6161)));
evalcond[2]=((((-1.0)*x6151*x6157))+(((-1.0)*x6155*x6164))+(((-1.0)*r20*x6156))+((r21*x6162))+(((-1.0)*x6152*x6163)));
evalcond[3]=((((-1.0)*x6151*x6167))+(((-1.0)*x6163*x6165))+(((-1.0)*x6164*x6166))+((r11*x6162))+(((-1.0)*r10*x6156)));
evalcond[4]=((1.0)+(((-1.0)*x6154*x6165))+(((-1.0)*x6158*x6167))+((r10*x6150))+(((-1.0)*r11*x6151))+(((-1.0)*x6156*x6166)));
evalcond[5]=((-1.0)+((r01*x6162))+(((-1.0)*x6151*x6161))+(((-1.0)*x6159*x6163))+(((-1.0)*x6160*x6164))+(((-1.0)*r00*x6156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6168=((1.0)*cj16);
IkReal x6169=((1.0)*sj15);
CheckValue<IkReal> x6170=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*r01*sj15*x6168))+(((-1.0)*r00*sj16*x6169)))),-1);
if(!x6170.valid){
continue;
}
CheckValue<IkReal> x6171 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x6168))+((r21*sj16)))),IkReal(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x6169))+(((-1.0)*cj15*r21*x6168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6171.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6170.value)))+(x6171.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6172=IKcos(j14);
IkReal x6173=(cj16*x6172);
IkReal x6174=((1.0)*sj16*x6172);
IkReal x6175=(r22*sj15);
IkReal x6176=IKsin(j14);
IkReal x6177=((1.0)*x6176);
IkReal x6178=(cj15*r21);
IkReal x6179=((1.0)*cj16*x6176);
IkReal x6180=(cj15*r20);
IkReal x6181=((1.0)*sj16*x6176);
IkReal x6182=(r02*sj15);
IkReal x6183=(cj15*r01);
IkReal x6184=(cj15*r00);
IkReal x6185=(sj16*x6176);
IkReal x6186=((1.0)*x6172);
IkReal x6187=((1.0)*cj16*x6172);
IkReal x6188=(r12*sj15);
IkReal x6189=(cj15*r11);
IkReal x6190=(cj15*r10);
evalcond[0]=((((-1.0)*x6180*x6181))+((r20*x6173))+(((-1.0)*x6178*x6179))+(((-1.0)*r21*x6174))+(((-1.0)*x6175*x6177)));
evalcond[1]=((((-1.0)*x6179*x6183))+((r00*x6173))+(((-1.0)*x6177*x6182))+(((-1.0)*x6181*x6184))+(((-1.0)*r01*x6174)));
evalcond[2]=((((-1.0)*x6178*x6187))+(((-1.0)*r20*x6179))+((r21*x6185))+(((-1.0)*x6175*x6186))+(((-1.0)*x6174*x6180)));
evalcond[3]=(((r11*x6185))+(((-1.0)*x6174*x6190))+(((-1.0)*x6186*x6188))+(((-1.0)*r10*x6179))+(((-1.0)*x6187*x6189)));
evalcond[4]=((1.0)+(((-1.0)*r11*x6174))+(((-1.0)*x6179*x6189))+((r10*x6173))+(((-1.0)*x6181*x6190))+(((-1.0)*x6177*x6188)));
evalcond[5]=((-1.0)+(((-1.0)*x6182*x6186))+(((-1.0)*r00*x6179))+(((-1.0)*x6174*x6184))+((r01*x6185))+(((-1.0)*x6183*x6187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6191=((1.0)*cj15);
CheckValue<IkReal> x6192 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x6191))+(((-1.0)*r00*sj16*x6191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
CheckValue<IkReal> x6193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x6191))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x6193.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6192.value)+(((1.5707963267949)*(x6193.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6194=IKcos(j14);
IkReal x6195=(cj16*x6194);
IkReal x6196=((1.0)*sj16*x6194);
IkReal x6197=(r22*sj15);
IkReal x6198=IKsin(j14);
IkReal x6199=((1.0)*x6198);
IkReal x6200=(cj15*r21);
IkReal x6201=((1.0)*cj16*x6198);
IkReal x6202=(cj15*r20);
IkReal x6203=((1.0)*sj16*x6198);
IkReal x6204=(r02*sj15);
IkReal x6205=(cj15*r01);
IkReal x6206=(cj15*r00);
IkReal x6207=(sj16*x6198);
IkReal x6208=((1.0)*x6194);
IkReal x6209=((1.0)*cj16*x6194);
IkReal x6210=(r12*sj15);
IkReal x6211=(cj15*r11);
IkReal x6212=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x6196))+((r20*x6195))+(((-1.0)*x6200*x6201))+(((-1.0)*x6197*x6199))+(((-1.0)*x6202*x6203)));
evalcond[1]=(((r00*x6195))+(((-1.0)*x6203*x6206))+(((-1.0)*x6201*x6205))+(((-1.0)*x6199*x6204))+(((-1.0)*r01*x6196)));
evalcond[2]=(((r21*x6207))+(((-1.0)*x6196*x6202))+(((-1.0)*r20*x6201))+(((-1.0)*x6197*x6208))+(((-1.0)*x6200*x6209)));
evalcond[3]=((((-1.0)*r10*x6201))+((r11*x6207))+(((-1.0)*x6196*x6212))+(((-1.0)*x6208*x6210))+(((-1.0)*x6209*x6211)));
evalcond[4]=((1.0)+(((-1.0)*x6201*x6211))+(((-1.0)*r11*x6196))+((r10*x6195))+(((-1.0)*x6199*x6210))+(((-1.0)*x6203*x6212)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x6201))+((r01*x6207))+(((-1.0)*x6204*x6208))+(((-1.0)*x6196*x6206))+(((-1.0)*x6205*x6209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6213=(r21*sj16);
IkReal x6214=(cj16*r20);
IkReal x6215=(cj16*r21);
IkReal x6216=((1.0)*cj10*cj15);
IkReal x6217=(r20*sj16);
IkReal x6218=(r01*r21);
IkReal x6219=((1.0)*x6218);
IkReal x6220=(cj16*r00*x6213);
IkReal x6221=(r01*sj16*x6214);
IkReal x6222=cj15*cj15;
IkReal x6223=cj16*cj16;
IkReal x6224=((1.0)*r00*r20);
IkReal x6225=((1.0)*cj15*r22*sj15);
IkReal x6226=((1.0)*cj15*r02*sj15);
IkReal x6227=(x6222*x6223);
IkReal x6228=((1.0)*x6222);
CheckValue<IkReal> x6229 = IKatan2WithCheck(IkReal((((cj10*x6213))+(((-1.0)*cj10*x6214)))),IkReal(((((-1.0)*cj10*r22*sj15))+(((-1.0)*x6216*x6217))+(((-1.0)*x6215*x6216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6229.valid){
continue;
}
CheckValue<IkReal> x6230=IKPowWithIntegerCheck(IKsign((((r02*r22*x6222))+x6220+x6221+(((-1.0)*x6221*x6228))+(((-1.0)*x6217*x6226))+(((-1.0)*x6222*x6224))+(((-1.0)*x6223*x6224))+(((-1.0)*x6215*x6226))+(((-1.0)*x6219))+(((-1.0)*cj16*r01*x6225))+((x6218*x6223))+((r00*r20*x6227))+(((-1.0)*x6220*x6228))+(((-1.0)*x6219*x6227))+(((-1.0)*r02*r22))+(((-1.0)*r00*sj16*x6225)))),-1);
if(!x6230.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6229.value)+(((1.5707963267949)*(x6230.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6231=IKcos(j14);
IkReal x6232=(cj16*x6231);
IkReal x6233=((1.0)*sj16*x6231);
IkReal x6234=(r22*sj15);
IkReal x6235=IKsin(j14);
IkReal x6236=((1.0)*x6235);
IkReal x6237=(cj15*r21);
IkReal x6238=((1.0)*cj16*x6235);
IkReal x6239=(cj15*r20);
IkReal x6240=((1.0)*sj16*x6235);
IkReal x6241=(sj16*x6235);
IkReal x6242=((1.0)*x6231);
IkReal x6243=((1.0)*cj16*x6231);
IkReal x6244=(r02*sj15);
IkReal x6245=(cj15*r01);
IkReal x6246=(cj15*r00);
IkReal x6247=(r12*sj15);
IkReal x6248=(cj15*r11);
IkReal x6249=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x6233))+(((-1.0)*x6239*x6240))+(((-1.0)*x6237*x6238))+((r20*x6232))+(((-1.0)*x6234*x6236)));
evalcond[1]=(((r21*x6241))+(((-1.0)*r20*x6238))+(((-1.0)*x6237*x6243))+(((-1.0)*x6233*x6239))+(((-1.0)*x6234*x6242)));
evalcond[2]=(((r00*x6232))+(((-1.0)*r01*x6233))+(((-1.0)*x6238*x6245))+(((-1.0)*x6240*x6246))+sj10+(((-1.0)*x6236*x6244)));
evalcond[3]=((((-1.0)*x6243*x6245))+(((-1.0)*r00*x6238))+cj10+((r01*x6241))+(((-1.0)*x6242*x6244))+(((-1.0)*x6233*x6246)));
evalcond[4]=((((-1.0)*x6233*x6249))+(((-1.0)*x6242*x6247))+sj10+((r11*x6241))+(((-1.0)*x6243*x6248))+(((-1.0)*r10*x6238)));
evalcond[5]=((((-1.0)*x6240*x6249))+(((-1.0)*x6238*x6248))+((r10*x6232))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x6236*x6247))+(((-1.0)*r11*x6233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6250=(cj15*cj16);
IkReal x6251=(r21*sj10);
IkReal x6252=(cj15*sj16);
IkReal x6253=(r20*sj10);
IkReal x6254=(r02*r22);
IkReal x6255=cj15*cj15;
IkReal x6256=(r00*r20);
IkReal x6257=(x6255*x6256);
IkReal x6258=cj16*cj16;
IkReal x6259=(r00*r21);
IkReal x6260=((1.0)*cj16*sj16);
IkReal x6261=(r01*r20);
IkReal x6262=(r02*sj15);
IkReal x6263=(r01*r21*x6258);
IkReal x6264=(cj16*sj16*x6255);
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal((((x6252*x6253))+((sj10*((r22*sj15))))+((x6250*x6251)))),IkReal(((((-1.0)*cj16*x6253))+((sj16*x6251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
CheckValue<IkReal> x6266=IKPowWithIntegerCheck(IKsign((((x6255*x6263))+((x6259*x6264))+((cj15*r20*sj16*x6262))+(((-1.0)*x6259*x6260))+((x6256*x6258))+((r01*r22*sj15*x6250))+(((-1.0)*x6254*x6255))+((r01*r21))+(((-1.0)*x6257*x6258))+(((-1.0)*x6260*x6261))+(((-1.0)*x6263))+((x6261*x6264))+((r00*r22*sj15*x6252))+x6254+x6257+((cj15*cj16*r21*x6262)))),-1);
if(!x6266.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6265.value)+(((1.5707963267949)*(x6266.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6267=IKcos(j14);
IkReal x6268=(cj16*x6267);
IkReal x6269=((1.0)*sj16*x6267);
IkReal x6270=(r22*sj15);
IkReal x6271=IKsin(j14);
IkReal x6272=((1.0)*x6271);
IkReal x6273=(cj15*r21);
IkReal x6274=((1.0)*cj16*x6271);
IkReal x6275=(cj15*r20);
IkReal x6276=((1.0)*sj16*x6271);
IkReal x6277=(sj16*x6271);
IkReal x6278=((1.0)*x6267);
IkReal x6279=((1.0)*cj16*x6267);
IkReal x6280=(r02*sj15);
IkReal x6281=(cj15*r01);
IkReal x6282=(cj15*r00);
IkReal x6283=(r12*sj15);
IkReal x6284=(cj15*r11);
IkReal x6285=(cj15*r10);
evalcond[0]=(((r20*x6268))+(((-1.0)*x6275*x6276))+(((-1.0)*x6270*x6272))+(((-1.0)*r21*x6269))+(((-1.0)*x6273*x6274)));
evalcond[1]=((((-1.0)*x6269*x6275))+(((-1.0)*r20*x6274))+(((-1.0)*x6273*x6279))+((r21*x6277))+(((-1.0)*x6270*x6278)));
evalcond[2]=((((-1.0)*x6272*x6280))+(((-1.0)*r01*x6269))+((r00*x6268))+sj10+(((-1.0)*x6276*x6282))+(((-1.0)*x6274*x6281)));
evalcond[3]=((((-1.0)*x6278*x6280))+(((-1.0)*x6269*x6282))+((r01*x6277))+cj10+(((-1.0)*x6279*x6281))+(((-1.0)*r00*x6274)));
evalcond[4]=((((-1.0)*r10*x6274))+(((-1.0)*x6279*x6284))+sj10+((r11*x6277))+(((-1.0)*x6269*x6285))+(((-1.0)*x6278*x6283)));
evalcond[5]=((((-1.0)*x6272*x6283))+((r10*x6268))+(((-1.0)*x6276*x6285))+(((-1.0)*r11*x6269))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x6274*x6284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6286=((1.0)*cj15);
IkReal x6287=(r21*sj10);
IkReal x6288=((1.0)*sj10);
CheckValue<IkReal> x6289 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*r20*x6288))+((sj16*x6287)))),IkReal(((((-1.0)*cj15*cj16*x6287))+(((-1.0)*r20*sj10*sj16*x6286))+(((-1.0)*r22*sj15*x6288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6289.valid){
continue;
}
CheckValue<IkReal> x6290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x6286))+((cj16*r11*sj15))+((r10*sj15*sj16)))),-1);
if(!x6290.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6289.value)+(((1.5707963267949)*(x6290.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6291=IKcos(j14);
IkReal x6292=(cj16*x6291);
IkReal x6293=((1.0)*sj16*x6291);
IkReal x6294=(r22*sj15);
IkReal x6295=IKsin(j14);
IkReal x6296=((1.0)*x6295);
IkReal x6297=(cj15*r21);
IkReal x6298=((1.0)*cj16*x6295);
IkReal x6299=(cj15*r20);
IkReal x6300=((1.0)*sj16*x6295);
IkReal x6301=(sj16*x6295);
IkReal x6302=((1.0)*x6291);
IkReal x6303=((1.0)*cj16*x6291);
IkReal x6304=(r02*sj15);
IkReal x6305=(cj15*r01);
IkReal x6306=(cj15*r00);
IkReal x6307=(r12*sj15);
IkReal x6308=(cj15*r11);
IkReal x6309=(cj15*r10);
evalcond[0]=((((-1.0)*x6297*x6298))+(((-1.0)*x6294*x6296))+((r20*x6292))+(((-1.0)*x6299*x6300))+(((-1.0)*r21*x6293)));
evalcond[1]=((((-1.0)*x6297*x6303))+(((-1.0)*x6294*x6302))+((r21*x6301))+(((-1.0)*x6293*x6299))+(((-1.0)*r20*x6298)));
evalcond[2]=((((-1.0)*x6300*x6306))+((r00*x6292))+(((-1.0)*r01*x6293))+sj10+(((-1.0)*x6296*x6304))+(((-1.0)*x6298*x6305)));
evalcond[3]=(cj10+(((-1.0)*x6303*x6305))+(((-1.0)*r00*x6298))+((r01*x6301))+(((-1.0)*x6293*x6306))+(((-1.0)*x6302*x6304)));
evalcond[4]=((((-1.0)*x6302*x6307))+sj10+(((-1.0)*x6293*x6309))+(((-1.0)*r10*x6298))+(((-1.0)*x6303*x6308))+((r11*x6301)));
evalcond[5]=((((-1.0)*x6300*x6309))+((r10*x6292))+(((-1.0)*(1.0)*cj10))+(((-1.0)*r11*x6293))+(((-1.0)*x6296*x6307))+(((-1.0)*x6298*x6308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6310=((1.0)*cj15);
IkReal x6311=(cj16*sj15);
IkReal x6312=(sj15*sj16);
if( IKabs(((((-1.0)*r12*x6310))+((r11*x6311))+((r10*x6312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x6311))+(((-1.0)*r02*x6310))+((r00*x6312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x6310))+((r11*x6311))+((r10*x6312))))+IKsqr((((r01*x6311))+(((-1.0)*r02*x6310))+((r00*x6312))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r12*x6310))+((r11*x6311))+((r10*x6312))), (((r01*x6311))+(((-1.0)*r02*x6310))+((r00*x6312))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6313=((1.0)*cj15);
IkReal x6314=(cj16*sj15);
IkReal x6315=(sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*(IKsin(j10))))+((r10*x6315))+((r11*x6314))+(((-1.0)*r12*x6313)));
evalcond[1]=((((-1.0)*(1.0)*(IKcos(j10))))+((r00*x6315))+((r01*x6314))+(((-1.0)*r02*x6313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6316=((1.0)*sj15);
IkReal x6317=((((-1.0)*r10*sj16*x6316))+((cj15*r12))+(((-1.0)*cj16*r11*x6316)));
IkReal x6318=((1.0)*r01);
j14eval[0]=x6317;
j14eval[1]=((IKabs(((((-1.0)*r02*x6316))+(((-1.0)*(1.0)*cj15*r00*sj16))+(((-1.0)*cj15*cj16*x6318)))))+(IKabs(((((-1.0)*sj16*x6318))+((cj16*r00))))));
j14eval[2]=IKsign(x6317);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6319=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x6320=(r21*sj10);
IkReal x6321=(r20*sj10);
j14eval[0]=x6319;
j14eval[1]=((IKabs((((r22*sj10*sj15))+((cj15*sj16*x6321))+((cj15*cj16*x6320)))))+(IKabs(((((-1.0)*cj16*x6321))+((sj16*x6320))))));
j14eval[2]=IKsign(x6319);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6322=r21*r21;
IkReal x6323=((1.0)*x6322);
IkReal x6324=r22*r22;
IkReal x6325=(r21*sj16);
IkReal x6326=((2.0)*cj16*r20*x6325);
IkReal x6327=cj15*cj15;
IkReal x6328=cj16*cj16;
IkReal x6329=((2.0)*r22*sj15);
IkReal x6330=(cj15*cj16*r21);
IkReal x6331=(cj15*r20*sj16);
IkReal x6332=r20*r20;
IkReal x6333=((1.0)*x6332);
IkReal x6334=(x6327*x6328);
IkReal x6335=(x6326+((x6332*x6334))+(((-1.0)*x6328*x6333))+(((-1.0)*x6329*x6331))+(((-1.0)*x6329*x6330))+((x6324*x6327))+(((-1.0)*x6323))+(((-1.0)*x6323*x6334))+(((-1.0)*x6324))+(((-1.0)*x6327*x6333))+(((-1.0)*x6326*x6327))+((x6322*x6328)));
j14eval[0]=x6335;
j14eval[1]=IKsign(x6335);
j14eval[2]=((IKabs((((r22*sj15))+x6331+x6330)))+(IKabs((((cj16*r20))+(((-1.0)*x6325))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6336=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x6336;
j14eval[1]=IKsign(x6336);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6337=((1.0)*sj16);
IkReal x6338=((((-1.0)*r00*sj15*x6337))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
j14eval[0]=x6338;
j14eval[1]=IKsign(x6338);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*r21*x6337))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6339=r21*r21;
IkReal x6340=((1.0)*x6339);
IkReal x6341=r22*r22;
IkReal x6342=(r21*sj16);
IkReal x6343=((2.0)*cj16*r20*x6342);
IkReal x6344=cj15*cj15;
IkReal x6345=cj16*cj16;
IkReal x6346=((2.0)*r22*sj15);
IkReal x6347=(cj15*cj16*r21);
IkReal x6348=(cj15*r20*sj16);
IkReal x6349=r20*r20;
IkReal x6350=((1.0)*x6349);
IkReal x6351=(x6344*x6345);
IkReal x6352=((((-1.0)*x6345*x6350))+((x6341*x6344))+(((-1.0)*x6340*x6351))+(((-1.0)*x6346*x6348))+(((-1.0)*x6341))+x6343+(((-1.0)*x6346*x6347))+((x6339*x6345))+((x6349*x6351))+(((-1.0)*x6343*x6344))+(((-1.0)*x6344*x6350))+(((-1.0)*x6340)));
j14eval[0]=x6352;
j14eval[1]=IKsign(x6352);
j14eval[2]=((IKabs(((((-1.0)*x6342))+((cj16*r20)))))+(IKabs((((r22*sj15))+x6348+x6347))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6353=(r21*sj16);
IkReal x6354=(cj15*cj16*r21);
IkReal x6355=(cj15*r20*sj16);
IkReal x6356=r21*r21;
IkReal x6357=((1.0)*x6356);
IkReal x6358=r22*r22;
IkReal x6359=((2.0)*cj16*r20*x6353);
IkReal x6360=cj15*cj15;
IkReal x6361=cj16*cj16;
IkReal x6362=((2.0)*r22*sj15);
IkReal x6363=r20*r20;
IkReal x6364=((1.0)*x6363);
IkReal x6365=(x6360*x6361);
CheckValue<IkReal> x6366=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6359*x6360))+(((-1.0)*x6357*x6365))+((x6358*x6360))+((x6356*x6361))+(((-1.0)*x6354*x6362))+((x6363*x6365))+(((-1.0)*x6358))+(((-1.0)*x6361*x6364))+(((-1.0)*x6357))+x6359+(((-1.0)*x6360*x6364))+(((-1.0)*x6355*x6362)))),-1);
if(!x6366.valid){
continue;
}
CheckValue<IkReal> x6367 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*x6353)))),IkReal((((r22*sj15))+x6355+x6354)),IKFAST_ATAN2_MAGTHRESH);
if(!x6367.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6366.value)))+(x6367.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6368=IKcos(j14);
IkReal x6369=(cj16*x6368);
IkReal x6370=((1.0)*sj16*x6368);
IkReal x6371=(r22*sj15);
IkReal x6372=IKsin(j14);
IkReal x6373=((1.0)*x6372);
IkReal x6374=(cj15*r21);
IkReal x6375=((1.0)*cj16*x6372);
IkReal x6376=(cj15*r20);
IkReal x6377=((1.0)*sj16*x6372);
IkReal x6378=(r02*sj15);
IkReal x6379=(cj15*r01);
IkReal x6380=(cj15*r00);
IkReal x6381=(sj16*x6372);
IkReal x6382=((1.0)*x6368);
IkReal x6383=((1.0)*cj16*x6368);
IkReal x6384=(r12*sj15);
IkReal x6385=(cj15*r11);
IkReal x6386=(cj15*r10);
evalcond[0]=((((-1.0)*x6371*x6373))+(((-1.0)*r21*x6370))+((r20*x6369))+(((-1.0)*x6374*x6375))+(((-1.0)*x6376*x6377)));
evalcond[1]=((((-1.0)*x6373*x6378))+(((-1.0)*r01*x6370))+(((-1.0)*x6375*x6379))+(((-1.0)*x6377*x6380))+((r00*x6369)));
evalcond[2]=((((-1.0)*x6378*x6382))+(((-1.0)*x6379*x6383))+((r01*x6381))+(((-1.0)*x6370*x6380))+(((-1.0)*r00*x6375)));
evalcond[3]=((((-1.0)*x6370*x6386))+(((-1.0)*x6383*x6385))+(((-1.0)*r10*x6375))+((r11*x6381))+(((-1.0)*x6382*x6384)));
evalcond[4]=((-1.0)+(((-1.0)*x6377*x6386))+((r10*x6369))+(((-1.0)*r11*x6370))+(((-1.0)*x6375*x6385))+(((-1.0)*x6373*x6384)));
evalcond[5]=((-1.0)+(((-1.0)*x6371*x6382))+(((-1.0)*x6370*x6376))+((r21*x6381))+(((-1.0)*r20*x6375))+(((-1.0)*x6374*x6383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6387=((1.0)*sj16);
CheckValue<IkReal> x6388 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6387))+((cj16*r20)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6388.valid){
continue;
}
CheckValue<IkReal> x6389=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15))+(((-1.0)*r00*sj15*x6387)))),-1);
if(!x6389.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6388.value)+(((1.5707963267949)*(x6389.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6390=IKcos(j14);
IkReal x6391=(cj16*x6390);
IkReal x6392=((1.0)*sj16*x6390);
IkReal x6393=(r22*sj15);
IkReal x6394=IKsin(j14);
IkReal x6395=((1.0)*x6394);
IkReal x6396=(cj15*r21);
IkReal x6397=((1.0)*cj16*x6394);
IkReal x6398=(cj15*r20);
IkReal x6399=((1.0)*sj16*x6394);
IkReal x6400=(r02*sj15);
IkReal x6401=(cj15*r01);
IkReal x6402=(cj15*r00);
IkReal x6403=(sj16*x6394);
IkReal x6404=((1.0)*x6390);
IkReal x6405=((1.0)*cj16*x6390);
IkReal x6406=(r12*sj15);
IkReal x6407=(cj15*r11);
IkReal x6408=(cj15*r10);
evalcond[0]=((((-1.0)*x6393*x6395))+(((-1.0)*r21*x6392))+(((-1.0)*x6396*x6397))+((r20*x6391))+(((-1.0)*x6398*x6399)));
evalcond[1]=((((-1.0)*x6395*x6400))+(((-1.0)*x6399*x6402))+(((-1.0)*x6397*x6401))+(((-1.0)*r01*x6392))+((r00*x6391)));
evalcond[2]=((((-1.0)*x6400*x6404))+(((-1.0)*r00*x6397))+(((-1.0)*x6401*x6405))+((r01*x6403))+(((-1.0)*x6392*x6402)));
evalcond[3]=((((-1.0)*x6405*x6407))+((r11*x6403))+(((-1.0)*x6404*x6406))+(((-1.0)*r10*x6397))+(((-1.0)*x6392*x6408)));
evalcond[4]=((-1.0)+((r10*x6391))+(((-1.0)*x6397*x6407))+(((-1.0)*x6399*x6408))+(((-1.0)*r11*x6392))+(((-1.0)*x6395*x6406)));
evalcond[5]=((-1.0)+(((-1.0)*x6396*x6405))+((r21*x6403))+(((-1.0)*x6392*x6398))+(((-1.0)*x6393*x6404))+(((-1.0)*r20*x6397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
CheckValue<IkReal> x6410=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x6410.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6409.value)+(((1.5707963267949)*(x6410.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6411=IKcos(j14);
IkReal x6412=(cj16*x6411);
IkReal x6413=((1.0)*sj16*x6411);
IkReal x6414=(r22*sj15);
IkReal x6415=IKsin(j14);
IkReal x6416=((1.0)*x6415);
IkReal x6417=(cj15*r21);
IkReal x6418=((1.0)*cj16*x6415);
IkReal x6419=(cj15*r20);
IkReal x6420=((1.0)*sj16*x6415);
IkReal x6421=(r02*sj15);
IkReal x6422=(cj15*r01);
IkReal x6423=(cj15*r00);
IkReal x6424=(sj16*x6415);
IkReal x6425=((1.0)*x6411);
IkReal x6426=((1.0)*cj16*x6411);
IkReal x6427=(r12*sj15);
IkReal x6428=(cj15*r11);
IkReal x6429=(cj15*r10);
evalcond[0]=((((-1.0)*x6414*x6416))+(((-1.0)*r21*x6413))+(((-1.0)*x6419*x6420))+((r20*x6412))+(((-1.0)*x6417*x6418)));
evalcond[1]=((((-1.0)*r01*x6413))+(((-1.0)*x6418*x6422))+((r00*x6412))+(((-1.0)*x6420*x6423))+(((-1.0)*x6416*x6421)));
evalcond[2]=((((-1.0)*x6421*x6425))+(((-1.0)*x6422*x6426))+((r01*x6424))+(((-1.0)*r00*x6418))+(((-1.0)*x6413*x6423)));
evalcond[3]=(((r11*x6424))+(((-1.0)*r10*x6418))+(((-1.0)*x6426*x6428))+(((-1.0)*x6413*x6429))+(((-1.0)*x6425*x6427)));
evalcond[4]=((-1.0)+(((-1.0)*x6416*x6427))+((r10*x6412))+(((-1.0)*x6420*x6429))+(((-1.0)*r11*x6413))+(((-1.0)*x6418*x6428)));
evalcond[5]=((-1.0)+((r21*x6424))+(((-1.0)*x6414*x6425))+(((-1.0)*r20*x6418))+(((-1.0)*x6417*x6426))+(((-1.0)*x6413*x6419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6430=((1.0)*cj15);
IkReal x6431=((((-1.0)*r22*x6430))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x6431;
j14eval[1]=IKsign(x6431);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*r00*sj16*x6430))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x6430))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6432=((1.0)*cj16);
IkReal x6433=((1.0)*sj15);
IkReal x6434=((((-1.0)*r00*sj16*x6433))+(((-1.0)*r01*sj15*x6432))+((cj15*r02)));
j14eval[0]=x6434;
j14eval[1]=((IKabs(((((-1.0)*r22*x6433))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*cj15*r21*x6432)))))+(IKabs((((r21*sj16))+(((-1.0)*r20*x6432))))));
j14eval[2]=IKsign(x6434);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6435=r21*r21;
IkReal x6436=((1.0)*x6435);
IkReal x6437=r22*r22;
IkReal x6438=(r21*sj16);
IkReal x6439=((2.0)*cj16*r20*x6438);
IkReal x6440=cj15*cj15;
IkReal x6441=cj16*cj16;
IkReal x6442=((2.0)*r22*sj15);
IkReal x6443=(cj15*cj16*r21);
IkReal x6444=(cj15*r20*sj16);
IkReal x6445=r20*r20;
IkReal x6446=((1.0)*x6445);
IkReal x6447=(x6440*x6441);
IkReal x6448=((((-1.0)*x6442*x6444))+((x6437*x6440))+x6439+(((-1.0)*x6439*x6440))+((x6435*x6441))+(((-1.0)*x6441*x6446))+(((-1.0)*x6442*x6443))+(((-1.0)*x6440*x6446))+((x6445*x6447))+(((-1.0)*x6436))+(((-1.0)*x6436*x6447))+(((-1.0)*x6437)));
j14eval[0]=x6448;
j14eval[1]=IKsign(x6448);
j14eval[2]=((IKabs(((((-1.0)*x6438))+((cj16*r20)))))+(IKabs((((r22*sj15))+x6444+x6443))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6449=(r21*sj16);
IkReal x6450=(cj15*cj16*r21);
IkReal x6451=(cj15*r20*sj16);
IkReal x6452=r21*r21;
IkReal x6453=((1.0)*x6452);
IkReal x6454=r22*r22;
IkReal x6455=((2.0)*cj16*r20*x6449);
IkReal x6456=cj15*cj15;
IkReal x6457=cj16*cj16;
IkReal x6458=((2.0)*r22*sj15);
IkReal x6459=r20*r20;
IkReal x6460=((1.0)*x6459);
IkReal x6461=(x6456*x6457);
CheckValue<IkReal> x6462 = IKatan2WithCheck(IkReal(((((-1.0)*x6449))+((cj16*r20)))),IkReal((x6451+x6450+((r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6462.valid){
continue;
}
CheckValue<IkReal> x6463=IKPowWithIntegerCheck(IKsign((x6455+(((-1.0)*x6451*x6458))+(((-1.0)*x6454))+((x6454*x6456))+(((-1.0)*x6453))+(((-1.0)*x6450*x6458))+((x6459*x6461))+(((-1.0)*x6456*x6460))+(((-1.0)*x6455*x6456))+(((-1.0)*x6457*x6460))+((x6452*x6457))+(((-1.0)*x6453*x6461)))),-1);
if(!x6463.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6462.value)+(((1.5707963267949)*(x6463.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6464=IKcos(j14);
IkReal x6465=(cj16*x6464);
IkReal x6466=((1.0)*sj16*x6464);
IkReal x6467=(r22*sj15);
IkReal x6468=IKsin(j14);
IkReal x6469=((1.0)*x6468);
IkReal x6470=(cj15*r21);
IkReal x6471=((1.0)*cj16*x6468);
IkReal x6472=(cj15*r20);
IkReal x6473=((1.0)*sj16*x6468);
IkReal x6474=(r02*sj15);
IkReal x6475=(cj15*r01);
IkReal x6476=(cj15*r00);
IkReal x6477=(sj16*x6468);
IkReal x6478=((1.0)*x6464);
IkReal x6479=((1.0)*cj16*x6464);
IkReal x6480=(r12*sj15);
IkReal x6481=(cj15*r11);
IkReal x6482=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x6466))+((r20*x6465))+(((-1.0)*x6472*x6473))+(((-1.0)*x6470*x6471))+(((-1.0)*x6467*x6469)));
evalcond[1]=((((-1.0)*x6469*x6474))+((r00*x6465))+(((-1.0)*x6471*x6475))+(((-1.0)*x6473*x6476))+(((-1.0)*r01*x6466)));
evalcond[2]=(((r01*x6477))+(((-1.0)*x6466*x6476))+(((-1.0)*x6475*x6479))+(((-1.0)*r00*x6471))+(((-1.0)*x6474*x6478)));
evalcond[3]=((((-1.0)*x6478*x6480))+((r11*x6477))+(((-1.0)*r10*x6471))+(((-1.0)*x6466*x6482))+(((-1.0)*x6479*x6481)));
evalcond[4]=((1.0)+(((-1.0)*r11*x6466))+(((-1.0)*x6471*x6481))+((r10*x6465))+(((-1.0)*x6473*x6482))+(((-1.0)*x6469*x6480)));
evalcond[5]=((-1.0)+(((-1.0)*r20*x6471))+(((-1.0)*x6466*x6472))+(((-1.0)*x6470*x6479))+(((-1.0)*x6467*x6478))+((r21*x6477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6483=((1.0)*cj16);
IkReal x6484=((1.0)*sj15);
CheckValue<IkReal> x6485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x6484))+(((-1.0)*r01*sj15*x6483))+((cj15*r02)))),-1);
if(!x6485.valid){
continue;
}
CheckValue<IkReal> x6486 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*r20*x6483)))),IkReal(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x6484))+(((-1.0)*cj15*r21*x6483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6486.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6485.value)))+(x6486.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6487=IKcos(j14);
IkReal x6488=(cj16*x6487);
IkReal x6489=((1.0)*sj16*x6487);
IkReal x6490=(r22*sj15);
IkReal x6491=IKsin(j14);
IkReal x6492=((1.0)*x6491);
IkReal x6493=(cj15*r21);
IkReal x6494=((1.0)*cj16*x6491);
IkReal x6495=(cj15*r20);
IkReal x6496=((1.0)*sj16*x6491);
IkReal x6497=(r02*sj15);
IkReal x6498=(cj15*r01);
IkReal x6499=(cj15*r00);
IkReal x6500=(sj16*x6491);
IkReal x6501=((1.0)*x6487);
IkReal x6502=((1.0)*cj16*x6487);
IkReal x6503=(r12*sj15);
IkReal x6504=(cj15*r11);
IkReal x6505=(cj15*r10);
evalcond[0]=((((-1.0)*x6490*x6492))+(((-1.0)*r21*x6489))+(((-1.0)*x6495*x6496))+((r20*x6488))+(((-1.0)*x6493*x6494)));
evalcond[1]=((((-1.0)*x6492*x6497))+(((-1.0)*x6496*x6499))+(((-1.0)*x6494*x6498))+((r00*x6488))+(((-1.0)*r01*x6489)));
evalcond[2]=(((r01*x6500))+(((-1.0)*x6489*x6499))+(((-1.0)*x6498*x6502))+(((-1.0)*x6497*x6501))+(((-1.0)*r00*x6494)));
evalcond[3]=(((r11*x6500))+(((-1.0)*x6502*x6504))+(((-1.0)*r10*x6494))+(((-1.0)*x6501*x6503))+(((-1.0)*x6489*x6505)));
evalcond[4]=((1.0)+(((-1.0)*x6492*x6503))+((r10*x6488))+(((-1.0)*r11*x6489))+(((-1.0)*x6494*x6504))+(((-1.0)*x6496*x6505)));
evalcond[5]=((-1.0)+(((-1.0)*r20*x6494))+((r21*x6500))+(((-1.0)*x6489*x6495))+(((-1.0)*x6493*x6502))+(((-1.0)*x6490*x6501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6506=((1.0)*cj15);
CheckValue<IkReal> x6507 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*(1.0)*r02*sj15))+(((-1.0)*r00*sj16*x6506))+(((-1.0)*cj16*r01*x6506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6507.valid){
continue;
}
CheckValue<IkReal> x6508=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+(((-1.0)*r22*x6506))+((cj16*r21*sj15)))),-1);
if(!x6508.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6507.value)+(((1.5707963267949)*(x6508.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6509=IKcos(j14);
IkReal x6510=(cj16*x6509);
IkReal x6511=((1.0)*sj16*x6509);
IkReal x6512=(r22*sj15);
IkReal x6513=IKsin(j14);
IkReal x6514=((1.0)*x6513);
IkReal x6515=(cj15*r21);
IkReal x6516=((1.0)*cj16*x6513);
IkReal x6517=(cj15*r20);
IkReal x6518=((1.0)*sj16*x6513);
IkReal x6519=(r02*sj15);
IkReal x6520=(cj15*r01);
IkReal x6521=(cj15*r00);
IkReal x6522=(sj16*x6513);
IkReal x6523=((1.0)*x6509);
IkReal x6524=((1.0)*cj16*x6509);
IkReal x6525=(r12*sj15);
IkReal x6526=(cj15*r11);
IkReal x6527=(cj15*r10);
evalcond[0]=((((-1.0)*x6515*x6516))+((r20*x6510))+(((-1.0)*x6517*x6518))+(((-1.0)*r21*x6511))+(((-1.0)*x6512*x6514)));
evalcond[1]=((((-1.0)*x6516*x6520))+(((-1.0)*x6514*x6519))+(((-1.0)*r01*x6511))+((r00*x6510))+(((-1.0)*x6518*x6521)));
evalcond[2]=((((-1.0)*x6511*x6521))+(((-1.0)*x6520*x6524))+(((-1.0)*r00*x6516))+((r01*x6522))+(((-1.0)*x6519*x6523)));
evalcond[3]=((((-1.0)*x6511*x6527))+((r11*x6522))+(((-1.0)*r10*x6516))+(((-1.0)*x6524*x6526))+(((-1.0)*x6523*x6525)));
evalcond[4]=((1.0)+(((-1.0)*x6514*x6525))+(((-1.0)*x6518*x6527))+(((-1.0)*x6516*x6526))+((r10*x6510))+(((-1.0)*r11*x6511)));
evalcond[5]=((-1.0)+((r21*x6522))+(((-1.0)*x6515*x6524))+(((-1.0)*x6512*x6523))+(((-1.0)*x6511*x6517))+(((-1.0)*r20*x6516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6528=(r21*sj16);
IkReal x6529=(cj15*cj16*r21);
IkReal x6530=(cj15*r20*sj16);
IkReal x6531=r21*r21;
IkReal x6532=((1.0)*x6531);
IkReal x6533=r22*r22;
IkReal x6534=((2.0)*cj16*r20*x6528);
IkReal x6535=cj15*cj15;
IkReal x6536=cj16*cj16;
IkReal x6537=((2.0)*r22*sj15);
IkReal x6538=r20*r20;
IkReal x6539=((1.0)*x6538);
IkReal x6540=(x6535*x6536);
CheckValue<IkReal> x6541 = IKatan2WithCheck(IkReal(((((-1.0)*x6528))+((cj16*r20)))),IkReal((((r22*sj15))+x6530+x6529)),IKFAST_ATAN2_MAGTHRESH);
if(!x6541.valid){
continue;
}
CheckValue<IkReal> x6542=IKPowWithIntegerCheck(IKsign((((x6538*x6540))+(((-1.0)*x6534*x6535))+(((-1.0)*x6536*x6539))+(((-1.0)*x6530*x6537))+x6534+(((-1.0)*x6529*x6537))+((x6533*x6535))+(((-1.0)*x6532))+((x6531*x6536))+(((-1.0)*x6535*x6539))+(((-1.0)*x6532*x6540))+(((-1.0)*x6533)))),-1);
if(!x6542.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6541.value)+(((1.5707963267949)*(x6542.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6543=IKcos(j14);
IkReal x6544=(cj16*x6543);
IkReal x6545=((1.0)*sj16*x6543);
IkReal x6546=(r22*sj15);
IkReal x6547=IKsin(j14);
IkReal x6548=((1.0)*x6547);
IkReal x6549=(cj15*r21);
IkReal x6550=((1.0)*cj16*x6547);
IkReal x6551=(cj15*r20);
IkReal x6552=((1.0)*sj16*x6547);
IkReal x6553=(sj16*x6547);
IkReal x6554=(r02*sj15);
IkReal x6555=((1.0)*x6543);
IkReal x6556=(cj15*r01);
IkReal x6557=((1.0)*cj16*x6543);
IkReal x6558=(cj15*r00);
IkReal x6559=(r12*sj15);
IkReal x6560=(cj15*r11);
IkReal x6561=(cj15*r10);
evalcond[0]=((((-1.0)*x6551*x6552))+((r20*x6544))+(((-1.0)*x6549*x6550))+(((-1.0)*x6546*x6548))+(((-1.0)*r21*x6545)));
evalcond[1]=((((-1.0)*x6545*x6558))+(((-1.0)*r00*x6550))+(((-1.0)*x6554*x6555))+(((-1.0)*x6556*x6557))+((r01*x6553)));
evalcond[2]=(((r11*x6553))+(((-1.0)*r10*x6550))+(((-1.0)*x6557*x6560))+(((-1.0)*x6555*x6559))+(((-1.0)*x6545*x6561)));
evalcond[3]=((((-1.0)*x6548*x6554))+(((-1.0)*x6552*x6558))+((r00*x6544))+sj10+(((-1.0)*r01*x6545))+(((-1.0)*x6550*x6556)));
evalcond[4]=((-1.0)+(((-1.0)*x6545*x6551))+((r21*x6553))+(((-1.0)*x6546*x6555))+(((-1.0)*x6549*x6557))+(((-1.0)*r20*x6550)));
evalcond[5]=(((r10*x6544))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x6548*x6559))+(((-1.0)*x6550*x6560))+(((-1.0)*r11*x6545))+(((-1.0)*x6552*x6561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6562=((1.0)*cj15);
IkReal x6563=(r21*sj10);
IkReal x6564=((1.0)*sj10);
CheckValue<IkReal> x6565=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x6562)))),-1);
if(!x6565.valid){
continue;
}
CheckValue<IkReal> x6566 = IKatan2WithCheck(IkReal((((sj16*x6563))+(((-1.0)*cj16*r20*x6564)))),IkReal(((((-1.0)*r22*sj15*x6564))+(((-1.0)*cj15*cj16*x6563))+(((-1.0)*r20*sj10*sj16*x6562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6566.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6565.value)))+(x6566.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6567=IKcos(j14);
IkReal x6568=(cj16*x6567);
IkReal x6569=((1.0)*sj16*x6567);
IkReal x6570=(r22*sj15);
IkReal x6571=IKsin(j14);
IkReal x6572=((1.0)*x6571);
IkReal x6573=(cj15*r21);
IkReal x6574=((1.0)*cj16*x6571);
IkReal x6575=(cj15*r20);
IkReal x6576=((1.0)*sj16*x6571);
IkReal x6577=(sj16*x6571);
IkReal x6578=(r02*sj15);
IkReal x6579=((1.0)*x6567);
IkReal x6580=(cj15*r01);
IkReal x6581=((1.0)*cj16*x6567);
IkReal x6582=(cj15*r00);
IkReal x6583=(r12*sj15);
IkReal x6584=(cj15*r11);
IkReal x6585=(cj15*r10);
evalcond[0]=((((-1.0)*x6573*x6574))+((r20*x6568))+(((-1.0)*x6575*x6576))+(((-1.0)*x6570*x6572))+(((-1.0)*r21*x6569)));
evalcond[1]=((((-1.0)*r00*x6574))+((r01*x6577))+(((-1.0)*x6569*x6582))+(((-1.0)*x6578*x6579))+(((-1.0)*x6580*x6581)));
evalcond[2]=((((-1.0)*x6579*x6583))+(((-1.0)*x6581*x6584))+((r11*x6577))+(((-1.0)*r10*x6574))+(((-1.0)*x6569*x6585)));
evalcond[3]=((((-1.0)*x6576*x6582))+(((-1.0)*x6572*x6578))+sj10+((r00*x6568))+(((-1.0)*x6574*x6580))+(((-1.0)*r01*x6569)));
evalcond[4]=((-1.0)+(((-1.0)*x6569*x6575))+(((-1.0)*r20*x6574))+(((-1.0)*x6570*x6579))+(((-1.0)*x6573*x6581))+((r21*x6577)));
evalcond[5]=((((-1.0)*r11*x6569))+(((-1.0)*x6576*x6585))+(((-1.0)*x6572*x6583))+(((-1.0)*(1.0)*cj10))+((r10*x6568))+(((-1.0)*x6574*x6584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6586=((1.0)*sj15);
IkReal x6587=((1.0)*r01);
CheckValue<IkReal> x6588 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*cj16*x6587))+(((-1.0)*r02*x6586))+(((-1.0)*(1.0)*cj15*r00*sj16)))),IkReal((((cj16*r00))+(((-1.0)*sj16*x6587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6588.valid){
continue;
}
CheckValue<IkReal> x6589=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj16*x6586))+((cj15*r12))+(((-1.0)*cj16*r11*x6586)))),-1);
if(!x6589.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6588.value)+(((1.5707963267949)*(x6589.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6590=IKcos(j14);
IkReal x6591=(cj16*x6590);
IkReal x6592=((1.0)*sj16*x6590);
IkReal x6593=(r22*sj15);
IkReal x6594=IKsin(j14);
IkReal x6595=((1.0)*x6594);
IkReal x6596=(cj15*r21);
IkReal x6597=((1.0)*cj16*x6594);
IkReal x6598=(cj15*r20);
IkReal x6599=((1.0)*sj16*x6594);
IkReal x6600=(sj16*x6594);
IkReal x6601=(r02*sj15);
IkReal x6602=((1.0)*x6590);
IkReal x6603=(cj15*r01);
IkReal x6604=((1.0)*cj16*x6590);
IkReal x6605=(cj15*r00);
IkReal x6606=(r12*sj15);
IkReal x6607=(cj15*r11);
IkReal x6608=(cj15*r10);
evalcond[0]=((((-1.0)*x6593*x6595))+(((-1.0)*x6598*x6599))+((r20*x6591))+(((-1.0)*x6596*x6597))+(((-1.0)*r21*x6592)));
evalcond[1]=((((-1.0)*x6603*x6604))+((r01*x6600))+(((-1.0)*r00*x6597))+(((-1.0)*x6601*x6602))+(((-1.0)*x6592*x6605)));
evalcond[2]=(((r11*x6600))+(((-1.0)*r10*x6597))+(((-1.0)*x6592*x6608))+(((-1.0)*x6602*x6606))+(((-1.0)*x6604*x6607)));
evalcond[3]=(((r00*x6591))+(((-1.0)*x6595*x6601))+(((-1.0)*x6597*x6603))+sj10+(((-1.0)*r01*x6592))+(((-1.0)*x6599*x6605)));
evalcond[4]=((-1.0)+(((-1.0)*x6596*x6604))+(((-1.0)*r20*x6597))+((r21*x6600))+(((-1.0)*x6593*x6602))+(((-1.0)*x6592*x6598)));
evalcond[5]=((((-1.0)*x6597*x6607))+(((-1.0)*x6599*x6608))+((r10*x6591))+(((-1.0)*r11*x6592))+(((-1.0)*x6595*x6606))+(((-1.0)*(1.0)*cj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6609=(cj12*sj11);
IkReal x6610=((69.0)*x6609);
IkReal x6611=((364.42)*cj11);
IkReal x6612=(cj15*r12);
IkReal x6613=((69.0)*x6612);
IkReal x6614=((1000.0)*px);
IkReal x6615=((374.29)*cj15);
IkReal x6616=(r02*sj12);
IkReal x6617=((69.0)*sj15);
IkReal x6618=(cj16*r11);
IkReal x6619=(x6617*x6618);
IkReal x6620=((10.0)*sj15);
IkReal x6621=(r10*sj16);
IkReal x6622=(x6617*x6621);
IkReal x6623=((364.42)*cj11*sj15);
IkReal x6624=(cj16*r01);
IkReal x6625=((10.0)*cj15*sj12);
IkReal x6626=(r00*sj16);
IkReal x6627=((374.29)*sj12*sj15);
IkReal x6628=((69.0)*cj12*sj11*sj15);
IkReal x6629=(cj12*r02*sj11);
IkReal x6630=((10.0)*cj12*cj15*sj11);
IkReal x6631=((374.29)*cj12*sj11*sj15);
CheckValue<IkReal> x6632 = IKatan2WithCheck(IkReal(((((-1.0)*x6613))+((sj12*x6614))+(((-1.0)*x6621*x6628))+((x6610*x6612))+x6619+(((-1.0)*x6611*x6612))+x6622+(((-1.0)*x6625*x6626))+(((-1.0)*x6616*x6620))+((x6621*x6623))+(((-1.0)*x6618*x6628))+((x6624*x6627))+((x6618*x6623))+((x6626*x6627))+(((-1.0)*x6624*x6625))+(((-1.0)*x6615*x6616)))),IkReal(((((-1.0)*x6626*x6630))+(((-1.0)*x6624*x6630))+((sj12*x6619))+((x6624*x6631))+((sj12*x6622))+(((-1.0)*x6615*x6629))+((x6626*x6631))+(((-1.0)*sj12*x6613))+(((-1.0)*x6620*x6629))+((x6609*x6614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6632.valid){
continue;
}
CheckValue<IkReal> x6633=IKPowWithIntegerCheck(IKsign(((-69.0)+(((69.0)*(cj11*cj11)*(cj12*cj12)))+x6610+((x6609*x6611)))),-1);
if(!x6633.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x6632.value)+(((1.5707963267949)*(x6633.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x6634=(cj15*r12);
IkReal x6635=IKcos(j10);
IkReal x6636=(sj12*x6635);
IkReal x6637=(cj16*sj15);
IkReal x6638=(r11*x6637);
IkReal x6639=(sj15*sj16);
IkReal x6640=(r10*x6639);
IkReal x6641=(cj12*sj11);
IkReal x6642=IKsin(j10);
IkReal x6643=((1.0)*x6642);
IkReal x6644=(cj15*r02);
IkReal x6645=(r01*x6637);
IkReal x6646=(r00*x6639);
IkReal x6647=((0.01)*sj15);
IkReal x6648=((0.069)*x6635);
IkReal x6649=((0.36442)*cj11);
IkReal x6650=((0.069)*x6642);
IkReal x6651=((0.01)*cj15*cj16);
IkReal x6652=((0.01)*cj15*sj16);
evalcond[0]=(x6636+x6638+(((-1.0)*x6634))+x6640+(((-1.0)*x6641*x6643)));
evalcond[1]=((((-1.0)*x6644))+(((-1.0)*sj12*x6643))+(((-1.0)*x6635*x6641))+x6645+x6646);
evalcond[2]=((((-1.0)*(1.0)*px))+((x6635*x6649))+(((-0.37429)*x6645))+(((0.37429)*x6644))+(((-1.0)*sj12*x6650))+((r02*x6647))+((r01*x6651))+(((-1.0)*x6641*x6648))+x6648+(((-0.37429)*x6646))+((r00*x6652)));
evalcond[3]=((((0.069)*x6636))+(((-1.0)*(1.0)*py))+(((-0.37429)*x6638))+(((0.37429)*x6634))+((r11*x6651))+x6650+(((-1.0)*x6641*x6650))+((r12*x6647))+((r10*x6652))+((x6642*x6649))+(((-0.37429)*x6640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x6653=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x6653;
j14eval[1]=IKsign(x6653);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x6654=((1.0)*sj15);
IkReal x6655=((((-1.0)*cj16*r01*x6654))+(((-1.0)*r00*sj16*x6654))+((cj15*r02)));
j14eval[0]=x6655;
j14eval[1]=IKsign(x6655);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x6656=r21*r21;
IkReal x6657=r22*r22;
IkReal x6658=(cj16*r20);
IkReal x6659=((2.0)*r21*sj16*x6658);
IkReal x6660=cj15*cj15;
IkReal x6661=r20*r20;
IkReal x6662=(x6660*x6661);
IkReal x6663=cj16*cj16;
IkReal x6664=((2.0)*r22*sj15);
IkReal x6665=(cj15*cj16*r21);
IkReal x6666=(cj15*r20*sj16);
IkReal x6667=(x6656*x6663);
IkReal x6668=(((x6661*x6663))+((x6660*x6667))+(((-1.0)*x6667))+x6657+x6656+x6662+((x6659*x6660))+((x6664*x6666))+(((-1.0)*x6662*x6663))+((x6664*x6665))+(((-1.0)*x6659))+(((-1.0)*x6657*x6660)));
IkReal x6669=(r22*sj15);
IkReal x6670=(cj11*sj12);
IkReal x6671=(r21*sj16);
IkReal x6672=(cj16*sj11);
j14eval[0]=x6668;
j14eval[1]=IKsign(x6668);
j14eval[2]=((IKabs((((x6669*x6670))+((x6666*x6670))+((r20*x6672))+(((-1.0)*sj11*x6671))+((x6665*x6670)))))+(IKabs((((sj11*x6669))+(((-1.0)*cj11*sj12*x6658))+((sj11*x6666))+((x6670*x6671))+((cj15*r21*x6672))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6673=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x6674=(cj16*sj10);
IkReal x6675=(sj10*sj16);
j14eval[0]=x6673;
j14eval[1]=((IKabs((((r20*x6674))+(((-1.0)*r21*x6675)))))+(IKabs((((r22*sj10*sj15))+((cj15*r20*x6675))+((cj15*r21*x6674))))));
j14eval[2]=IKsign(x6673);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6676=((1.0)*cj16);
IkReal x6677=((((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02))+(((-1.0)*r01*sj15*x6676)));
IkReal x6678=(cj10*r21);
IkReal x6679=(cj10*r20);
j14eval[0]=x6677;
j14eval[1]=((IKabs((((cj10*r22*sj15))+((cj15*sj16*x6679))+((cj15*cj16*x6678)))))+(IKabs(((((-1.0)*x6676*x6679))+((sj16*x6678))))));
j14eval[2]=IKsign(x6677);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6680=(r12*r22);
IkReal x6681=cj15*cj15;
IkReal x6682=(r10*r20);
IkReal x6683=(x6681*x6682);
IkReal x6684=cj16*cj16;
IkReal x6685=(r10*r21);
IkReal x6686=((1.0)*cj16*sj16);
IkReal x6687=(r11*r20);
IkReal x6688=(cj15*cj16);
IkReal x6689=(r12*sj15);
IkReal x6690=(cj15*sj16);
IkReal x6691=(r11*r21*x6684);
IkReal x6692=(cj16*sj16*x6681);
IkReal x6693=(((x6687*x6692))+((r11*r22*sj15*x6688))+((x6681*x6691))+((cj15*cj16*r21*x6689))+((r10*r22*sj15*x6690))+(((-1.0)*x6683*x6684))+(((-1.0)*x6685*x6686))+(((-1.0)*x6686*x6687))+((cj15*r20*sj16*x6689))+((x6685*x6692))+x6680+x6683+((x6682*x6684))+(((-1.0)*x6691))+((r11*r21))+(((-1.0)*x6680*x6681)));
IkReal x6694=(cj10*r21);
IkReal x6695=(cj10*r20);
j14eval[0]=x6693;
j14eval[1]=IKsign(x6693);
j14eval[2]=((IKabs((((sj16*x6694))+(((-1.0)*cj16*x6695)))))+(IKabs((((x6688*x6694))+((cj10*((r22*sj15))))+((x6690*x6695))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x6696=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x6696;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x6696);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x6697=((1.0)*sj16);
IkReal x6698=((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x6697))+((cj15*r22)));
j14eval[0]=x6698;
j14eval[1]=((IKabs(((((-1.0)*r11*x6697))+((cj16*r10)))))+(IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15))))));
j14eval[2]=IKsign(x6698);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x6699=r11*r11;
IkReal x6700=((1.0)*x6699);
IkReal x6701=r12*r12;
IkReal x6702=(r11*sj16);
IkReal x6703=((2.0)*cj16*r10*x6702);
IkReal x6704=cj15*cj15;
IkReal x6705=cj16*cj16;
IkReal x6706=((2.0)*r12*sj15);
IkReal x6707=(cj15*cj16*r11);
IkReal x6708=(cj15*r10*sj16);
IkReal x6709=r10*r10;
IkReal x6710=((1.0)*x6709);
IkReal x6711=(x6704*x6705);
IkReal x6712=((((-1.0)*x6703*x6704))+((x6699*x6705))+(((-1.0)*x6701))+(((-1.0)*x6704*x6710))+(((-1.0)*x6706*x6707))+(((-1.0)*x6706*x6708))+(((-1.0)*x6700))+(((-1.0)*x6700*x6711))+((x6709*x6711))+((x6701*x6704))+(((-1.0)*x6705*x6710))+x6703);
j14eval[0]=x6712;
j14eval[1]=((IKabs(((((-1.0)*x6702))+((cj16*r10)))))+(IKabs((((r12*sj15))+x6708+x6707))));
j14eval[2]=IKsign(x6712);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6713=(r11*sj16);
IkReal x6714=(cj15*cj16*r11);
IkReal x6715=(cj15*r10*sj16);
IkReal x6716=r11*r11;
IkReal x6717=((1.0)*x6716);
IkReal x6718=r12*r12;
IkReal x6719=((2.0)*cj16*r10*x6713);
IkReal x6720=cj15*cj15;
IkReal x6721=cj16*cj16;
IkReal x6722=((2.0)*r12*sj15);
IkReal x6723=r10*r10;
IkReal x6724=((1.0)*x6723);
IkReal x6725=(x6720*x6721);
CheckValue<IkReal> x6726 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x6713)))),IkReal((((r12*sj15))+x6714+x6715)),IKFAST_ATAN2_MAGTHRESH);
if(!x6726.valid){
continue;
}
CheckValue<IkReal> x6727=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6717*x6725))+((x6716*x6721))+(((-1.0)*x6719*x6720))+(((-1.0)*x6718))+(((-1.0)*x6717))+(((-1.0)*x6720*x6724))+x6719+(((-1.0)*x6715*x6722))+((x6723*x6725))+(((-1.0)*x6721*x6724))+((x6718*x6720))+(((-1.0)*x6714*x6722)))),-1);
if(!x6727.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6726.value)+(((1.5707963267949)*(x6727.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6728=IKcos(j14);
IkReal x6729=(cj16*x6728);
IkReal x6730=((1.0)*sj16*x6728);
IkReal x6731=(r22*sj15);
IkReal x6732=IKsin(j14);
IkReal x6733=((1.0)*x6732);
IkReal x6734=(cj15*r21);
IkReal x6735=((1.0)*cj16*x6732);
IkReal x6736=(cj15*r20);
IkReal x6737=((1.0)*sj16*x6732);
IkReal x6738=(r12*sj15);
IkReal x6739=(cj15*r11);
IkReal x6740=(cj15*r10);
IkReal x6741=(sj16*x6732);
IkReal x6742=((1.0)*x6728);
IkReal x6743=((1.0)*cj16*x6728);
IkReal x6744=(r02*sj15);
IkReal x6745=(cj15*r01);
IkReal x6746=(cj15*r00);
evalcond[0]=((((-1.0)*x6731*x6733))+(((-1.0)*x6736*x6737))+(((-1.0)*r21*x6730))+((r20*x6729))+(((-1.0)*x6734*x6735)));
evalcond[1]=((((-1.0)*x6733*x6738))+((r10*x6729))+(((-1.0)*x6737*x6740))+(((-1.0)*x6735*x6739))+(((-1.0)*r11*x6730)));
evalcond[2]=((((-1.0)*x6730*x6736))+(((-1.0)*r20*x6735))+(((-1.0)*x6731*x6742))+((r21*x6741))+(((-1.0)*x6734*x6743)));
evalcond[3]=((((-1.0)*x6742*x6744))+(((-1.0)*x6743*x6745))+(((-1.0)*r00*x6735))+((r01*x6741))+(((-1.0)*x6730*x6746)));
evalcond[4]=((-1.0)+(((-1.0)*x6735*x6745))+((r00*x6729))+(((-1.0)*x6733*x6744))+(((-1.0)*r01*x6730))+(((-1.0)*x6737*x6746)));
evalcond[5]=((-1.0)+(((-1.0)*x6730*x6740))+(((-1.0)*x6739*x6743))+(((-1.0)*r10*x6735))+(((-1.0)*x6738*x6742))+((r11*x6741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6747=((1.0)*sj16);
CheckValue<IkReal> x6748 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x6747)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6748.valid){
continue;
}
CheckValue<IkReal> x6749=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x6747))+((cj15*r22)))),-1);
if(!x6749.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6748.value)+(((1.5707963267949)*(x6749.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6750=IKcos(j14);
IkReal x6751=(cj16*x6750);
IkReal x6752=((1.0)*sj16*x6750);
IkReal x6753=(r22*sj15);
IkReal x6754=IKsin(j14);
IkReal x6755=((1.0)*x6754);
IkReal x6756=(cj15*r21);
IkReal x6757=((1.0)*cj16*x6754);
IkReal x6758=(cj15*r20);
IkReal x6759=((1.0)*sj16*x6754);
IkReal x6760=(r12*sj15);
IkReal x6761=(cj15*r11);
IkReal x6762=(cj15*r10);
IkReal x6763=(sj16*x6754);
IkReal x6764=((1.0)*x6750);
IkReal x6765=((1.0)*cj16*x6750);
IkReal x6766=(r02*sj15);
IkReal x6767=(cj15*r01);
IkReal x6768=(cj15*r00);
evalcond[0]=(((r20*x6751))+(((-1.0)*x6756*x6757))+(((-1.0)*x6753*x6755))+(((-1.0)*r21*x6752))+(((-1.0)*x6758*x6759)));
evalcond[1]=((((-1.0)*x6757*x6761))+((r10*x6751))+(((-1.0)*x6759*x6762))+(((-1.0)*r11*x6752))+(((-1.0)*x6755*x6760)));
evalcond[2]=((((-1.0)*r20*x6757))+(((-1.0)*x6753*x6764))+(((-1.0)*x6756*x6765))+((r21*x6763))+(((-1.0)*x6752*x6758)));
evalcond[3]=((((-1.0)*x6765*x6767))+((r01*x6763))+(((-1.0)*r00*x6757))+(((-1.0)*x6764*x6766))+(((-1.0)*x6752*x6768)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x6752))+((r00*x6751))+(((-1.0)*x6759*x6768))+(((-1.0)*x6757*x6767))+(((-1.0)*x6755*x6766)));
evalcond[5]=((-1.0)+((r11*x6763))+(((-1.0)*x6760*x6764))+(((-1.0)*x6761*x6765))+(((-1.0)*r10*x6757))+(((-1.0)*x6752*x6762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6769 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6769.valid){
continue;
}
CheckValue<IkReal> x6770=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x6770.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6769.value)+(((1.5707963267949)*(x6770.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6771=IKcos(j14);
IkReal x6772=(cj16*x6771);
IkReal x6773=((1.0)*sj16*x6771);
IkReal x6774=(r22*sj15);
IkReal x6775=IKsin(j14);
IkReal x6776=((1.0)*x6775);
IkReal x6777=(cj15*r21);
IkReal x6778=((1.0)*cj16*x6775);
IkReal x6779=(cj15*r20);
IkReal x6780=((1.0)*sj16*x6775);
IkReal x6781=(r12*sj15);
IkReal x6782=(cj15*r11);
IkReal x6783=(cj15*r10);
IkReal x6784=(sj16*x6775);
IkReal x6785=((1.0)*x6771);
IkReal x6786=((1.0)*cj16*x6771);
IkReal x6787=(r02*sj15);
IkReal x6788=(cj15*r01);
IkReal x6789=(cj15*r00);
evalcond[0]=((((-1.0)*x6779*x6780))+(((-1.0)*x6774*x6776))+(((-1.0)*r21*x6773))+(((-1.0)*x6777*x6778))+((r20*x6772)));
evalcond[1]=((((-1.0)*x6778*x6782))+(((-1.0)*x6776*x6781))+(((-1.0)*x6780*x6783))+(((-1.0)*r11*x6773))+((r10*x6772)));
evalcond[2]=((((-1.0)*x6777*x6786))+(((-1.0)*r20*x6778))+((r21*x6784))+(((-1.0)*x6773*x6779))+(((-1.0)*x6774*x6785)));
evalcond[3]=(((r01*x6784))+(((-1.0)*x6786*x6788))+(((-1.0)*x6785*x6787))+(((-1.0)*r00*x6778))+(((-1.0)*x6773*x6789)));
evalcond[4]=((-1.0)+(((-1.0)*x6780*x6789))+(((-1.0)*x6778*x6788))+((r00*x6772))+(((-1.0)*r01*x6773))+(((-1.0)*x6776*x6787)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x6778))+(((-1.0)*x6781*x6785))+((r11*x6784))+(((-1.0)*x6782*x6786))+(((-1.0)*x6773*x6783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x6790=((1.0)*cj15);
IkReal x6791=((((-1.0)*r12*x6790))+((cj16*r11*sj15))+((r10*sj15*sj16)));
j14eval[0]=x6791;
j14eval[1]=((IKabs(((((-1.0)*cj16*r21*x6790))+(((-1.0)*r20*sj16*x6790))+(((-1.0)*(1.0)*r22*sj15)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x6791);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x6792=((1.0)*cj16);
IkReal x6793=((1.0)*sj15);
IkReal x6794=((((-1.0)*r21*sj15*x6792))+(((-1.0)*r20*sj16*x6793))+((cj15*r22)));
j14eval[0]=x6794;
j14eval[1]=((IKabs(((((-1.0)*r10*x6792))+((r11*sj16)))))+(IKabs(((((-1.0)*r12*x6793))+(((-1.0)*cj15*r11*x6792))+(((-1.0)*(1.0)*cj15*r10*sj16))))));
j14eval[2]=IKsign(x6794);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x6795=r11*r11;
IkReal x6796=r12*r12;
IkReal x6797=(r11*sj16);
IkReal x6798=((2.0)*cj16*r10*x6797);
IkReal x6799=cj15*cj15;
IkReal x6800=r10*r10;
IkReal x6801=(x6799*x6800);
IkReal x6802=cj16*cj16;
IkReal x6803=((2.0)*r12*sj15);
IkReal x6804=(cj15*cj16*r11);
IkReal x6805=(cj15*r10*sj16);
IkReal x6806=(x6795*x6802);
IkReal x6807=((((-1.0)*x6798))+x6801+((x6798*x6799))+x6796+x6795+((x6800*x6802))+(((-1.0)*x6796*x6799))+((x6803*x6805))+((x6803*x6804))+((x6799*x6806))+(((-1.0)*x6806))+(((-1.0)*x6801*x6802)));
j14eval[0]=x6807;
j14eval[1]=IKsign(x6807);
j14eval[2]=((IKabs((x6804+x6805+((r12*sj15)))))+(IKabs((((cj16*r10))+(((-1.0)*x6797))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6808=(r11*sj16);
IkReal x6809=(cj15*cj16*r11);
IkReal x6810=(cj15*r10*sj16);
IkReal x6811=r11*r11;
IkReal x6812=r12*r12;
IkReal x6813=((2.0)*cj16*r10*x6808);
IkReal x6814=cj15*cj15;
IkReal x6815=r10*r10;
IkReal x6816=(x6814*x6815);
IkReal x6817=cj16*cj16;
IkReal x6818=((2.0)*r12*sj15);
IkReal x6819=(x6811*x6817);
CheckValue<IkReal> x6820 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x6808)))),IkReal((x6809+((r12*sj15))+x6810)),IKFAST_ATAN2_MAGTHRESH);
if(!x6820.valid){
continue;
}
CheckValue<IkReal> x6821=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6816*x6817))+((x6814*x6819))+(((-1.0)*x6819))+(((-1.0)*x6813))+x6812+x6816+x6811+((x6810*x6818))+((x6809*x6818))+((x6813*x6814))+(((-1.0)*x6812*x6814))+((x6815*x6817)))),-1);
if(!x6821.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6820.value)+(((1.5707963267949)*(x6821.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6822=IKcos(j14);
IkReal x6823=(cj16*x6822);
IkReal x6824=((1.0)*sj16*x6822);
IkReal x6825=(r22*sj15);
IkReal x6826=IKsin(j14);
IkReal x6827=((1.0)*x6826);
IkReal x6828=(cj15*r21);
IkReal x6829=((1.0)*cj16*x6826);
IkReal x6830=(cj15*r20);
IkReal x6831=((1.0)*sj16*x6826);
IkReal x6832=(r12*sj15);
IkReal x6833=(cj15*r11);
IkReal x6834=(cj15*r10);
IkReal x6835=(sj16*x6826);
IkReal x6836=((1.0)*x6822);
IkReal x6837=((1.0)*cj16*x6822);
IkReal x6838=(r02*sj15);
IkReal x6839=(cj15*r01);
IkReal x6840=(cj15*r00);
evalcond[0]=(((r20*x6823))+(((-1.0)*r21*x6824))+(((-1.0)*x6825*x6827))+(((-1.0)*x6828*x6829))+(((-1.0)*x6830*x6831)));
evalcond[1]=(((r10*x6823))+(((-1.0)*x6829*x6833))+(((-1.0)*x6831*x6834))+(((-1.0)*x6827*x6832))+(((-1.0)*r11*x6824)));
evalcond[2]=((((-1.0)*x6824*x6830))+(((-1.0)*x6828*x6837))+(((-1.0)*r20*x6829))+(((-1.0)*x6825*x6836))+((r21*x6835)));
evalcond[3]=((((-1.0)*r00*x6829))+(((-1.0)*x6824*x6840))+(((-1.0)*x6837*x6839))+(((-1.0)*x6836*x6838))+((r01*x6835)));
evalcond[4]=((1.0)+(((-1.0)*x6829*x6839))+(((-1.0)*x6831*x6840))+(((-1.0)*x6827*x6838))+((r00*x6823))+(((-1.0)*r01*x6824)));
evalcond[5]=((1.0)+((r11*x6835))+(((-1.0)*r10*x6829))+(((-1.0)*x6824*x6834))+(((-1.0)*x6833*x6837))+(((-1.0)*x6832*x6836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6841=((1.0)*cj16);
IkReal x6842=((1.0)*sj15);
CheckValue<IkReal> x6843 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6841))+((r11*sj16)))),IkReal(((((-1.0)*cj15*r11*x6841))+(((-1.0)*r12*x6842))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6843.valid){
continue;
}
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x6842))+((cj15*r22))+(((-1.0)*r21*sj15*x6841)))),-1);
if(!x6844.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6843.value)+(((1.5707963267949)*(x6844.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6845=IKcos(j14);
IkReal x6846=(cj16*x6845);
IkReal x6847=((1.0)*sj16*x6845);
IkReal x6848=(r22*sj15);
IkReal x6849=IKsin(j14);
IkReal x6850=((1.0)*x6849);
IkReal x6851=(cj15*r21);
IkReal x6852=((1.0)*cj16*x6849);
IkReal x6853=(cj15*r20);
IkReal x6854=((1.0)*sj16*x6849);
IkReal x6855=(r12*sj15);
IkReal x6856=(cj15*r11);
IkReal x6857=(cj15*r10);
IkReal x6858=(sj16*x6849);
IkReal x6859=((1.0)*x6845);
IkReal x6860=((1.0)*cj16*x6845);
IkReal x6861=(r02*sj15);
IkReal x6862=(cj15*r01);
IkReal x6863=(cj15*r00);
evalcond[0]=(((r20*x6846))+(((-1.0)*x6853*x6854))+(((-1.0)*x6851*x6852))+(((-1.0)*x6848*x6850))+(((-1.0)*r21*x6847)));
evalcond[1]=((((-1.0)*x6850*x6855))+(((-1.0)*x6854*x6857))+((r10*x6846))+(((-1.0)*x6852*x6856))+(((-1.0)*r11*x6847)));
evalcond[2]=((((-1.0)*x6847*x6853))+(((-1.0)*x6851*x6860))+(((-1.0)*x6848*x6859))+((r21*x6858))+(((-1.0)*r20*x6852)));
evalcond[3]=((((-1.0)*x6847*x6863))+((r01*x6858))+(((-1.0)*x6860*x6862))+(((-1.0)*x6859*x6861))+(((-1.0)*r00*x6852)));
evalcond[4]=((1.0)+(((-1.0)*x6854*x6863))+(((-1.0)*x6850*x6861))+(((-1.0)*x6852*x6862))+((r00*x6846))+(((-1.0)*r01*x6847)));
evalcond[5]=((1.0)+(((-1.0)*x6856*x6860))+(((-1.0)*r10*x6852))+(((-1.0)*x6847*x6857))+(((-1.0)*x6855*x6859))+((r11*x6858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6864=((1.0)*cj15);
CheckValue<IkReal> x6865 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*r20*sj16*x6864))+(((-1.0)*cj16*r21*x6864))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6865.valid){
continue;
}
CheckValue<IkReal> x6866=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x6864)))),-1);
if(!x6866.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6865.value)+(((1.5707963267949)*(x6866.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6867=IKcos(j14);
IkReal x6868=(cj16*x6867);
IkReal x6869=((1.0)*sj16*x6867);
IkReal x6870=(r22*sj15);
IkReal x6871=IKsin(j14);
IkReal x6872=((1.0)*x6871);
IkReal x6873=(cj15*r21);
IkReal x6874=((1.0)*cj16*x6871);
IkReal x6875=(cj15*r20);
IkReal x6876=((1.0)*sj16*x6871);
IkReal x6877=(r12*sj15);
IkReal x6878=(cj15*r11);
IkReal x6879=(cj15*r10);
IkReal x6880=(sj16*x6871);
IkReal x6881=((1.0)*x6867);
IkReal x6882=((1.0)*cj16*x6867);
IkReal x6883=(r02*sj15);
IkReal x6884=(cj15*r01);
IkReal x6885=(cj15*r00);
evalcond[0]=((((-1.0)*x6870*x6872))+((r20*x6868))+(((-1.0)*r21*x6869))+(((-1.0)*x6875*x6876))+(((-1.0)*x6873*x6874)));
evalcond[1]=((((-1.0)*x6874*x6878))+(((-1.0)*r11*x6869))+(((-1.0)*x6876*x6879))+(((-1.0)*x6872*x6877))+((r10*x6868)));
evalcond[2]=((((-1.0)*x6870*x6881))+(((-1.0)*x6873*x6882))+(((-1.0)*r20*x6874))+((r21*x6880))+(((-1.0)*x6869*x6875)));
evalcond[3]=(((r01*x6880))+(((-1.0)*x6869*x6885))+(((-1.0)*x6882*x6884))+(((-1.0)*r00*x6874))+(((-1.0)*x6881*x6883)));
evalcond[4]=((1.0)+(((-1.0)*x6872*x6883))+(((-1.0)*x6876*x6885))+((r00*x6868))+(((-1.0)*r01*x6869))+(((-1.0)*x6874*x6884)));
evalcond[5]=((1.0)+(((-1.0)*x6878*x6882))+(((-1.0)*x6877*x6881))+(((-1.0)*x6869*x6879))+((r11*x6880))+(((-1.0)*r10*x6874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6886=((1.0)*cj15);
IkReal x6887=(((r20*sj15*sj16))+((cj16*r21*sj15))+(((-1.0)*r22*x6886)));
j14eval[0]=x6887;
j14eval[1]=IKsign(x6887);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*r00*sj16*x6886))+(((-1.0)*cj16*r01*x6886))+(((-1.0)*(1.0)*r02*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6888=((1.0)*cj16);
IkReal x6889=((1.0)*sj15);
IkReal x6890=(((cj15*r02))+(((-1.0)*r01*sj15*x6888))+(((-1.0)*r00*sj16*x6889)));
j14eval[0]=x6890;
j14eval[1]=((IKabs(((((-1.0)*cj15*r21*x6888))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x6889)))))+(IKabs((((r21*sj16))+(((-1.0)*r20*x6888))))));
j14eval[2]=IKsign(x6890);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6891=r01*r01;
IkReal x6892=((1.0)*x6891);
IkReal x6893=r02*r02;
IkReal x6894=(r01*sj16);
IkReal x6895=((2.0)*cj16*r00*x6894);
IkReal x6896=cj15*cj15;
IkReal x6897=cj16*cj16;
IkReal x6898=((2.0)*r02*sj15);
IkReal x6899=(cj15*cj16*r01);
IkReal x6900=(cj15*r00*sj16);
IkReal x6901=r00*r00;
IkReal x6902=((1.0)*x6901);
IkReal x6903=(x6896*x6897);
IkReal x6904=((((-1.0)*x6898*x6899))+(((-1.0)*x6892))+((x6901*x6903))+(((-1.0)*x6892*x6903))+(((-1.0)*x6893))+(((-1.0)*x6898*x6900))+x6895+((x6891*x6897))+(((-1.0)*x6897*x6902))+(((-1.0)*x6896*x6902))+((x6893*x6896))+(((-1.0)*x6895*x6896)));
j14eval[0]=x6904;
j14eval[1]=IKsign(x6904);
j14eval[2]=((IKabs((((r02*sj15))+x6899+x6900)))+(IKabs(((((-1.0)*x6894))+((cj16*r00))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6905=(r01*sj16);
IkReal x6906=(cj15*cj16*r01);
IkReal x6907=(cj15*r00*sj16);
IkReal x6908=r01*r01;
IkReal x6909=((1.0)*x6908);
IkReal x6910=r02*r02;
IkReal x6911=((2.0)*cj16*r00*x6905);
IkReal x6912=cj15*cj15;
IkReal x6913=cj16*cj16;
IkReal x6914=((2.0)*r02*sj15);
IkReal x6915=r00*r00;
IkReal x6916=((1.0)*x6915);
IkReal x6917=(x6912*x6913);
CheckValue<IkReal> x6918 = IKatan2WithCheck(IkReal(((((-1.0)*x6905))+((cj16*r00)))),IkReal((((r02*sj15))+x6906+x6907)),IKFAST_ATAN2_MAGTHRESH);
if(!x6918.valid){
continue;
}
CheckValue<IkReal> x6919=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6911*x6912))+((x6915*x6917))+((x6908*x6913))+(((-1.0)*x6906*x6914))+((x6910*x6912))+(((-1.0)*x6909))+(((-1.0)*x6907*x6914))+x6911+(((-1.0)*x6913*x6916))+(((-1.0)*x6909*x6917))+(((-1.0)*x6912*x6916))+(((-1.0)*x6910)))),-1);
if(!x6919.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6918.value)+(((1.5707963267949)*(x6919.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6920=IKcos(j14);
IkReal x6921=(cj16*x6920);
IkReal x6922=((1.0)*sj16*x6920);
IkReal x6923=(r22*sj15);
IkReal x6924=IKsin(j14);
IkReal x6925=((1.0)*x6924);
IkReal x6926=(cj15*r21);
IkReal x6927=((1.0)*cj16*x6924);
IkReal x6928=(cj15*r20);
IkReal x6929=((1.0)*sj16*x6924);
IkReal x6930=(r02*sj15);
IkReal x6931=(cj15*r01);
IkReal x6932=(cj15*r00);
IkReal x6933=(sj16*x6924);
IkReal x6934=((1.0)*x6920);
IkReal x6935=((1.0)*cj16*x6920);
IkReal x6936=(r12*sj15);
IkReal x6937=(cj15*r11);
IkReal x6938=(cj15*r10);
evalcond[0]=(((r20*x6921))+(((-1.0)*r21*x6922))+(((-1.0)*x6926*x6927))+(((-1.0)*x6923*x6925))+(((-1.0)*x6928*x6929)));
evalcond[1]=((((-1.0)*r01*x6922))+(((-1.0)*x6927*x6931))+((r00*x6921))+(((-1.0)*x6925*x6930))+(((-1.0)*x6929*x6932)));
evalcond[2]=((((-1.0)*x6923*x6934))+(((-1.0)*r20*x6927))+((r21*x6933))+(((-1.0)*x6922*x6928))+(((-1.0)*x6926*x6935)));
evalcond[3]=(((r11*x6933))+(((-1.0)*x6922*x6938))+(((-1.0)*x6935*x6937))+(((-1.0)*r10*x6927))+(((-1.0)*x6934*x6936)));
evalcond[4]=((1.0)+(((-1.0)*x6927*x6937))+(((-1.0)*r11*x6922))+(((-1.0)*x6925*x6936))+(((-1.0)*x6929*x6938))+((r10*x6921)));
evalcond[5]=((-1.0)+(((-1.0)*x6922*x6932))+(((-1.0)*x6931*x6935))+(((-1.0)*r00*x6927))+((r01*x6933))+(((-1.0)*x6930*x6934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6939=((1.0)*cj16);
IkReal x6940=((1.0)*sj15);
CheckValue<IkReal> x6941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj15*x6939))+(((-1.0)*r00*sj16*x6940))+((cj15*r02)))),-1);
if(!x6941.valid){
continue;
}
CheckValue<IkReal> x6942 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*r20*x6939)))),IkReal(((((-1.0)*cj15*r21*x6939))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x6940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6942.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6941.value)))+(x6942.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6943=IKcos(j14);
IkReal x6944=(cj16*x6943);
IkReal x6945=((1.0)*sj16*x6943);
IkReal x6946=(r22*sj15);
IkReal x6947=IKsin(j14);
IkReal x6948=((1.0)*x6947);
IkReal x6949=(cj15*r21);
IkReal x6950=((1.0)*cj16*x6947);
IkReal x6951=(cj15*r20);
IkReal x6952=((1.0)*sj16*x6947);
IkReal x6953=(r02*sj15);
IkReal x6954=(cj15*r01);
IkReal x6955=(cj15*r00);
IkReal x6956=(sj16*x6947);
IkReal x6957=((1.0)*x6943);
IkReal x6958=((1.0)*cj16*x6943);
IkReal x6959=(r12*sj15);
IkReal x6960=(cj15*r11);
IkReal x6961=(cj15*r10);
evalcond[0]=((((-1.0)*x6951*x6952))+(((-1.0)*x6946*x6948))+((r20*x6944))+(((-1.0)*x6949*x6950))+(((-1.0)*r21*x6945)));
evalcond[1]=((((-1.0)*x6950*x6954))+((r00*x6944))+(((-1.0)*x6952*x6955))+(((-1.0)*r01*x6945))+(((-1.0)*x6948*x6953)));
evalcond[2]=((((-1.0)*x6949*x6958))+(((-1.0)*r20*x6950))+((r21*x6956))+(((-1.0)*x6946*x6957))+(((-1.0)*x6945*x6951)));
evalcond[3]=((((-1.0)*x6958*x6960))+(((-1.0)*x6945*x6961))+(((-1.0)*x6957*x6959))+((r11*x6956))+(((-1.0)*r10*x6950)));
evalcond[4]=((1.0)+(((-1.0)*x6950*x6960))+(((-1.0)*x6948*x6959))+(((-1.0)*x6952*x6961))+(((-1.0)*r11*x6945))+((r10*x6944)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x6950))+(((-1.0)*x6945*x6955))+((r01*x6956))+(((-1.0)*x6953*x6957))+(((-1.0)*x6954*x6958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6962=((1.0)*cj15);
CheckValue<IkReal> x6963 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*r00*sj16*x6962))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x6962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6963.valid){
continue;
}
CheckValue<IkReal> x6964=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+(((-1.0)*r22*x6962))+((cj16*r21*sj15)))),-1);
if(!x6964.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6963.value)+(((1.5707963267949)*(x6964.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6965=IKcos(j14);
IkReal x6966=(cj16*x6965);
IkReal x6967=((1.0)*sj16*x6965);
IkReal x6968=(r22*sj15);
IkReal x6969=IKsin(j14);
IkReal x6970=((1.0)*x6969);
IkReal x6971=(cj15*r21);
IkReal x6972=((1.0)*cj16*x6969);
IkReal x6973=(cj15*r20);
IkReal x6974=((1.0)*sj16*x6969);
IkReal x6975=(r02*sj15);
IkReal x6976=(cj15*r01);
IkReal x6977=(cj15*r00);
IkReal x6978=(sj16*x6969);
IkReal x6979=((1.0)*x6965);
IkReal x6980=((1.0)*cj16*x6965);
IkReal x6981=(r12*sj15);
IkReal x6982=(cj15*r11);
IkReal x6983=(cj15*r10);
evalcond[0]=((((-1.0)*x6973*x6974))+((r20*x6966))+(((-1.0)*x6968*x6970))+(((-1.0)*r21*x6967))+(((-1.0)*x6971*x6972)));
evalcond[1]=((((-1.0)*x6972*x6976))+(((-1.0)*x6970*x6975))+((r00*x6966))+(((-1.0)*r01*x6967))+(((-1.0)*x6974*x6977)));
evalcond[2]=(((r21*x6978))+(((-1.0)*x6971*x6980))+(((-1.0)*x6968*x6979))+(((-1.0)*r20*x6972))+(((-1.0)*x6967*x6973)));
evalcond[3]=(((r11*x6978))+(((-1.0)*r10*x6972))+(((-1.0)*x6967*x6983))+(((-1.0)*x6979*x6981))+(((-1.0)*x6980*x6982)));
evalcond[4]=((1.0)+((r10*x6966))+(((-1.0)*r11*x6967))+(((-1.0)*x6974*x6983))+(((-1.0)*x6972*x6982))+(((-1.0)*x6970*x6981)));
evalcond[5]=((-1.0)+(((-1.0)*x6975*x6979))+(((-1.0)*x6976*x6980))+((r01*x6978))+(((-1.0)*x6967*x6977))+(((-1.0)*r00*x6972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6984=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x6984;
j14eval[1]=IKsign(x6984);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6985=((1.0)*sj16);
IkReal x6986=((((-1.0)*r00*sj15*x6985))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
j14eval[0]=x6986;
j14eval[1]=IKsign(x6986);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*r21*x6985))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6987=r01*r01;
IkReal x6988=r02*r02;
IkReal x6989=(r01*sj16);
IkReal x6990=((2.0)*cj16*r00*x6989);
IkReal x6991=cj15*cj15;
IkReal x6992=r00*r00;
IkReal x6993=(x6991*x6992);
IkReal x6994=cj16*cj16;
IkReal x6995=((2.0)*r02*sj15);
IkReal x6996=(cj15*cj16*r01);
IkReal x6997=(cj15*r00*sj16);
IkReal x6998=(x6987*x6994);
IkReal x6999=(((x6995*x6996))+(((-1.0)*x6998))+x6988+x6987+((x6990*x6991))+(((-1.0)*x6988*x6991))+(((-1.0)*x6993*x6994))+((x6992*x6994))+((x6995*x6997))+x6993+((x6991*x6998))+(((-1.0)*x6990)));
j14eval[0]=x6999;
j14eval[1]=((IKabs(((((-1.0)*x6989))+((cj16*r00)))))+(IKabs((((r02*sj15))+x6997+x6996))));
j14eval[2]=IKsign(x6999);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7000=(r01*sj16);
IkReal x7001=(cj15*cj16*r01);
IkReal x7002=(cj15*r00*sj16);
IkReal x7003=r01*r01;
IkReal x7004=r02*r02;
IkReal x7005=((2.0)*cj16*r00*x7000);
IkReal x7006=cj15*cj15;
IkReal x7007=r00*r00;
IkReal x7008=(x7006*x7007);
IkReal x7009=cj16*cj16;
IkReal x7010=((2.0)*r02*sj15);
IkReal x7011=(x7003*x7009);
CheckValue<IkReal> x7012=IKPowWithIntegerCheck(IKsign((((x7006*x7011))+((x7005*x7006))+(((-1.0)*x7008*x7009))+((x7007*x7009))+((x7002*x7010))+(((-1.0)*x7011))+(((-1.0)*x7005))+(((-1.0)*x7004*x7006))+x7003+x7004+x7008+((x7001*x7010)))),-1);
if(!x7012.valid){
continue;
}
CheckValue<IkReal> x7013 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*x7000)))),IkReal((((r02*sj15))+x7001+x7002)),IKFAST_ATAN2_MAGTHRESH);
if(!x7013.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7012.value)))+(x7013.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7014=IKcos(j14);
IkReal x7015=(cj16*x7014);
IkReal x7016=((1.0)*sj16*x7014);
IkReal x7017=(r22*sj15);
IkReal x7018=IKsin(j14);
IkReal x7019=((1.0)*x7018);
IkReal x7020=(cj15*r21);
IkReal x7021=((1.0)*cj16*x7018);
IkReal x7022=(cj15*r20);
IkReal x7023=((1.0)*sj16*x7018);
IkReal x7024=(r02*sj15);
IkReal x7025=(cj15*r01);
IkReal x7026=(cj15*r00);
IkReal x7027=(sj16*x7018);
IkReal x7028=((1.0)*x7014);
IkReal x7029=((1.0)*cj16*x7014);
IkReal x7030=(r12*sj15);
IkReal x7031=(cj15*r11);
IkReal x7032=(cj15*r10);
evalcond[0]=(((r20*x7015))+(((-1.0)*x7017*x7019))+(((-1.0)*x7022*x7023))+(((-1.0)*r21*x7016))+(((-1.0)*x7020*x7021)));
evalcond[1]=((((-1.0)*r01*x7016))+(((-1.0)*x7019*x7024))+(((-1.0)*x7021*x7025))+(((-1.0)*x7023*x7026))+((r00*x7015)));
evalcond[2]=((((-1.0)*x7017*x7028))+((r21*x7027))+(((-1.0)*r20*x7021))+(((-1.0)*x7020*x7029))+(((-1.0)*x7016*x7022)));
evalcond[3]=((((-1.0)*x7029*x7031))+((r11*x7027))+(((-1.0)*r10*x7021))+(((-1.0)*x7028*x7030))+(((-1.0)*x7016*x7032)));
evalcond[4]=((-1.0)+(((-1.0)*x7023*x7032))+(((-1.0)*x7019*x7030))+(((-1.0)*x7021*x7031))+(((-1.0)*r11*x7016))+((r10*x7015)));
evalcond[5]=((1.0)+(((-1.0)*r00*x7021))+(((-1.0)*x7016*x7026))+(((-1.0)*x7024*x7028))+((r01*x7027))+(((-1.0)*x7025*x7029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7033=((1.0)*sj16);
CheckValue<IkReal> x7034=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15))+(((-1.0)*r00*sj15*x7033)))),-1);
if(!x7034.valid){
continue;
}
CheckValue<IkReal> x7035 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*r21*x7033)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7035.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7034.value)))+(x7035.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7036=IKcos(j14);
IkReal x7037=(cj16*x7036);
IkReal x7038=((1.0)*sj16*x7036);
IkReal x7039=(r22*sj15);
IkReal x7040=IKsin(j14);
IkReal x7041=((1.0)*x7040);
IkReal x7042=(cj15*r21);
IkReal x7043=((1.0)*cj16*x7040);
IkReal x7044=(cj15*r20);
IkReal x7045=((1.0)*sj16*x7040);
IkReal x7046=(r02*sj15);
IkReal x7047=(cj15*r01);
IkReal x7048=(cj15*r00);
IkReal x7049=(sj16*x7040);
IkReal x7050=((1.0)*x7036);
IkReal x7051=((1.0)*cj16*x7036);
IkReal x7052=(r12*sj15);
IkReal x7053=(cj15*r11);
IkReal x7054=(cj15*r10);
evalcond[0]=((((-1.0)*x7042*x7043))+(((-1.0)*x7044*x7045))+(((-1.0)*r21*x7038))+(((-1.0)*x7039*x7041))+((r20*x7037)));
evalcond[1]=((((-1.0)*x7045*x7048))+(((-1.0)*x7043*x7047))+(((-1.0)*x7041*x7046))+(((-1.0)*r01*x7038))+((r00*x7037)));
evalcond[2]=(((r21*x7049))+(((-1.0)*x7039*x7050))+(((-1.0)*x7038*x7044))+(((-1.0)*r20*x7043))+(((-1.0)*x7042*x7051)));
evalcond[3]=((((-1.0)*x7050*x7052))+(((-1.0)*x7051*x7053))+(((-1.0)*x7038*x7054))+(((-1.0)*r10*x7043))+((r11*x7049)));
evalcond[4]=((-1.0)+(((-1.0)*x7045*x7054))+((r10*x7037))+(((-1.0)*r11*x7038))+(((-1.0)*x7043*x7053))+(((-1.0)*x7041*x7052)));
evalcond[5]=((1.0)+(((-1.0)*r00*x7043))+(((-1.0)*x7047*x7051))+(((-1.0)*x7038*x7048))+((r01*x7049))+(((-1.0)*x7046*x7050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7055 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7055.valid){
continue;
}
CheckValue<IkReal> x7056=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x7056.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7055.value)+(((1.5707963267949)*(x7056.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7057=IKcos(j14);
IkReal x7058=(cj16*x7057);
IkReal x7059=((1.0)*sj16*x7057);
IkReal x7060=(r22*sj15);
IkReal x7061=IKsin(j14);
IkReal x7062=((1.0)*x7061);
IkReal x7063=(cj15*r21);
IkReal x7064=((1.0)*cj16*x7061);
IkReal x7065=(cj15*r20);
IkReal x7066=((1.0)*sj16*x7061);
IkReal x7067=(r02*sj15);
IkReal x7068=(cj15*r01);
IkReal x7069=(cj15*r00);
IkReal x7070=(sj16*x7061);
IkReal x7071=((1.0)*x7057);
IkReal x7072=((1.0)*cj16*x7057);
IkReal x7073=(r12*sj15);
IkReal x7074=(cj15*r11);
IkReal x7075=(cj15*r10);
evalcond[0]=((((-1.0)*x7063*x7064))+(((-1.0)*x7065*x7066))+(((-1.0)*x7060*x7062))+((r20*x7058))+(((-1.0)*r21*x7059)));
evalcond[1]=(((r00*x7058))+(((-1.0)*x7064*x7068))+(((-1.0)*x7062*x7067))+(((-1.0)*x7066*x7069))+(((-1.0)*r01*x7059)));
evalcond[2]=(((r21*x7070))+(((-1.0)*x7059*x7065))+(((-1.0)*x7063*x7072))+(((-1.0)*r20*x7064))+(((-1.0)*x7060*x7071)));
evalcond[3]=((((-1.0)*r10*x7064))+((r11*x7070))+(((-1.0)*x7071*x7073))+(((-1.0)*x7072*x7074))+(((-1.0)*x7059*x7075)));
evalcond[4]=((-1.0)+(((-1.0)*x7062*x7073))+(((-1.0)*x7064*x7074))+(((-1.0)*x7066*x7075))+((r10*x7058))+(((-1.0)*r11*x7059)));
evalcond[5]=((1.0)+(((-1.0)*x7059*x7069))+(((-1.0)*x7067*x7071))+(((-1.0)*x7068*x7072))+((r01*x7070))+(((-1.0)*r00*x7064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7076=(cj10*r21);
IkReal x7077=(cj15*cj16);
IkReal x7078=(cj10*r20);
IkReal x7079=(cj15*sj16);
IkReal x7080=(r12*r22);
IkReal x7081=cj15*cj15;
IkReal x7082=(r10*r20);
IkReal x7083=(x7081*x7082);
IkReal x7084=cj16*cj16;
IkReal x7085=(r10*r21);
IkReal x7086=((1.0)*cj16*sj16);
IkReal x7087=(r11*r20);
IkReal x7088=(r12*sj15);
IkReal x7089=(r11*r21*x7084);
IkReal x7090=(cj16*sj16*x7081);
CheckValue<IkReal> x7091 = IKatan2WithCheck(IkReal((((cj10*((r22*sj15))))+((x7078*x7079))+((x7076*x7077)))),IkReal(((((-1.0)*cj16*x7078))+((sj16*x7076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7091.valid){
continue;
}
CheckValue<IkReal> x7092=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7083*x7084))+((x7081*x7089))+(((-1.0)*x7085*x7086))+((x7087*x7090))+(((-1.0)*x7086*x7087))+(((-1.0)*x7089))+x7080+x7083+((x7082*x7084))+(((-1.0)*x7080*x7081))+((x7085*x7090))+((cj15*r20*sj16*x7088))+((r10*r22*sj15*x7079))+((r11*r22*sj15*x7077))+((cj15*cj16*r21*x7088))+((r11*r21)))),-1);
if(!x7092.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7091.value)+(((1.5707963267949)*(x7092.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7093=IKcos(j14);
IkReal x7094=(cj16*x7093);
IkReal x7095=((1.0)*sj16*x7093);
IkReal x7096=(r22*sj15);
IkReal x7097=IKsin(j14);
IkReal x7098=((1.0)*x7097);
IkReal x7099=(cj15*r21);
IkReal x7100=((1.0)*cj16*x7097);
IkReal x7101=(cj15*r20);
IkReal x7102=((1.0)*sj16*x7097);
IkReal x7103=(sj16*x7097);
IkReal x7104=((1.0)*x7093);
IkReal x7105=((1.0)*cj16*x7093);
IkReal x7106=(r12*sj15);
IkReal x7107=(cj15*r11);
IkReal x7108=(cj15*r10);
IkReal x7109=((-1.0)*(((1.0)*sj10)));
IkReal x7110=(r02*sj15);
IkReal x7111=(cj15*r01);
IkReal x7112=(cj15*r00);
evalcond[0]=((((-1.0)*x7101*x7102))+(((-1.0)*r21*x7095))+((r20*x7094))+(((-1.0)*x7096*x7098))+(((-1.0)*x7099*x7100)));
evalcond[1]=((((-1.0)*x7099*x7105))+(((-1.0)*x7096*x7104))+((r21*x7103))+(((-1.0)*r20*x7100))+(((-1.0)*x7095*x7101)));
evalcond[2]=((((-1.0)*x7102*x7108))+(((-1.0)*x7100*x7107))+(((-1.0)*r11*x7095))+(((-1.0)*x7098*x7106))+cj10+((r10*x7094)));
evalcond[3]=((((-1.0)*x7102*x7112))+(((-1.0)*x7100*x7111))+((r00*x7094))+x7109+(((-1.0)*r01*x7095))+(((-1.0)*x7098*x7110)));
evalcond[4]=((((-1.0)*r00*x7100))+(((-1.0)*x7105*x7111))+((r01*x7103))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x7104*x7110))+(((-1.0)*x7095*x7112)));
evalcond[5]=((((-1.0)*x7095*x7108))+((r11*x7103))+(((-1.0)*r10*x7100))+x7109+(((-1.0)*x7104*x7106))+(((-1.0)*x7105*x7107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7113=((1.0)*sj15);
IkReal x7114=(cj10*r21);
IkReal x7115=((1.0)*cj10*r20);
CheckValue<IkReal> x7116 = IKatan2WithCheck(IkReal((((sj16*x7114))+(((-1.0)*cj16*x7115)))),IkReal(((((-1.0)*cj15*cj16*x7114))+(((-1.0)*cj10*r22*sj15))+(((-1.0)*cj15*sj16*x7115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7116.valid){
continue;
}
CheckValue<IkReal> x7117=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*r00*sj16*x7113))+(((-1.0)*cj16*r01*x7113)))),-1);
if(!x7117.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7116.value)+(((1.5707963267949)*(x7117.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7118=IKcos(j14);
IkReal x7119=(cj16*x7118);
IkReal x7120=((1.0)*sj16*x7118);
IkReal x7121=(r22*sj15);
IkReal x7122=IKsin(j14);
IkReal x7123=((1.0)*x7122);
IkReal x7124=(cj15*r21);
IkReal x7125=((1.0)*cj16*x7122);
IkReal x7126=(cj15*r20);
IkReal x7127=((1.0)*sj16*x7122);
IkReal x7128=(sj16*x7122);
IkReal x7129=((1.0)*x7118);
IkReal x7130=((1.0)*cj16*x7118);
IkReal x7131=(r12*sj15);
IkReal x7132=(cj15*r11);
IkReal x7133=(cj15*r10);
IkReal x7134=((-1.0)*(((1.0)*sj10)));
IkReal x7135=(r02*sj15);
IkReal x7136=(cj15*r01);
IkReal x7137=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x7120))+(((-1.0)*x7121*x7123))+(((-1.0)*x7126*x7127))+((r20*x7119))+(((-1.0)*x7124*x7125)));
evalcond[1]=((((-1.0)*x7121*x7129))+(((-1.0)*x7120*x7126))+(((-1.0)*x7124*x7130))+((r21*x7128))+(((-1.0)*r20*x7125)));
evalcond[2]=((((-1.0)*x7123*x7131))+(((-1.0)*r11*x7120))+cj10+(((-1.0)*x7127*x7133))+((r10*x7119))+(((-1.0)*x7125*x7132)));
evalcond[3]=((((-1.0)*r01*x7120))+(((-1.0)*x7127*x7137))+((r00*x7119))+(((-1.0)*x7125*x7136))+(((-1.0)*x7123*x7135))+x7134);
evalcond[4]=(((r01*x7128))+(((-1.0)*x7130*x7136))+(((-1.0)*x7129*x7135))+(((-1.0)*(1.0)*cj10))+(((-1.0)*r00*x7125))+(((-1.0)*x7120*x7137)));
evalcond[5]=((((-1.0)*x7120*x7133))+(((-1.0)*x7129*x7131))+((r11*x7128))+(((-1.0)*r10*x7125))+(((-1.0)*x7130*x7132))+x7134);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7138=(cj16*sj10);
IkReal x7139=(sj10*sj16);
CheckValue<IkReal> x7140 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x7139))+((r20*x7138)))),IkReal((((r22*sj10*sj15))+((cj15*r20*x7139))+((cj15*r21*x7138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7140.valid){
continue;
}
CheckValue<IkReal> x7141=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x7141.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7140.value)+(((1.5707963267949)*(x7141.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7142=IKcos(j14);
IkReal x7143=(cj16*x7142);
IkReal x7144=((1.0)*sj16*x7142);
IkReal x7145=(r22*sj15);
IkReal x7146=IKsin(j14);
IkReal x7147=((1.0)*x7146);
IkReal x7148=(cj15*r21);
IkReal x7149=((1.0)*cj16*x7146);
IkReal x7150=(cj15*r20);
IkReal x7151=((1.0)*sj16*x7146);
IkReal x7152=(sj16*x7146);
IkReal x7153=((1.0)*x7142);
IkReal x7154=((1.0)*cj16*x7142);
IkReal x7155=(r12*sj15);
IkReal x7156=(cj15*r11);
IkReal x7157=(cj15*r10);
IkReal x7158=((-1.0)*(((1.0)*sj10)));
IkReal x7159=(r02*sj15);
IkReal x7160=(cj15*r01);
IkReal x7161=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x7144))+((r20*x7143))+(((-1.0)*x7148*x7149))+(((-1.0)*x7145*x7147))+(((-1.0)*x7150*x7151)));
evalcond[1]=((((-1.0)*x7145*x7153))+(((-1.0)*r20*x7149))+(((-1.0)*x7144*x7150))+((r21*x7152))+(((-1.0)*x7148*x7154)));
evalcond[2]=(((r10*x7143))+(((-1.0)*x7149*x7156))+cj10+(((-1.0)*x7147*x7155))+(((-1.0)*x7151*x7157))+(((-1.0)*r11*x7144)));
evalcond[3]=((((-1.0)*x7147*x7159))+(((-1.0)*x7149*x7160))+(((-1.0)*r01*x7144))+((r00*x7143))+x7158+(((-1.0)*x7151*x7161)));
evalcond[4]=((((-1.0)*x7153*x7159))+((r01*x7152))+(((-1.0)*x7144*x7161))+(((-1.0)*x7154*x7160))+(((-1.0)*r00*x7149))+(((-1.0)*(1.0)*cj10)));
evalcond[5]=((((-1.0)*x7154*x7156))+((r11*x7152))+(((-1.0)*x7144*x7157))+(((-1.0)*x7153*x7155))+(((-1.0)*r10*x7149))+x7158);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7162=((1.0)*sj16);
IkReal x7163=((((-1.0)*r00*sj15*x7162))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
IkReal x7164=(cj10*cj16);
j14eval[0]=x7163;
j14eval[1]=IKsign(x7163);
j14eval[2]=((IKabs((((r20*x7164))+(((-1.0)*cj10*r21*x7162)))))+(IKabs((((cj10*r22*sj15))+((cj15*r21*x7164))+((cj10*cj15*r20*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7165=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x7166=(r21*sj10);
IkReal x7167=(r20*sj10);
j14eval[0]=x7165;
j14eval[1]=((IKabs((((r22*sj10*sj15))+((cj15*sj16*x7167))+((cj15*cj16*x7166)))))+(IKabs((((sj16*x7166))+(((-1.0)*cj16*x7167))))));
j14eval[2]=IKsign(x7165);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7168=(r02*r22);
IkReal x7169=cj15*cj15;
IkReal x7170=(r00*r20);
IkReal x7171=(x7169*x7170);
IkReal x7172=cj16*cj16;
IkReal x7173=(r00*r21);
IkReal x7174=((1.0)*cj16*sj16);
IkReal x7175=(r01*r20);
IkReal x7176=(cj15*cj16);
IkReal x7177=(r02*sj15);
IkReal x7178=(cj15*sj16);
IkReal x7179=(r01*r21*x7172);
IkReal x7180=(cj16*sj16*x7169);
IkReal x7181=(x7168+((x7170*x7172))+((x7169*x7179))+((r01*r22*sj15*x7176))+(((-1.0)*x7174*x7175))+(((-1.0)*x7179))+((cj15*r20*sj16*x7177))+((r00*r22*sj15*x7178))+(((-1.0)*x7173*x7174))+((r01*r21))+((x7175*x7180))+(((-1.0)*x7171*x7172))+((cj15*cj16*r21*x7177))+(((-1.0)*x7168*x7169))+((x7173*x7180))+x7171);
IkReal x7182=(r21*sj10);
IkReal x7183=(r20*sj10);
j14eval[0]=x7181;
j14eval[1]=IKsign(x7181);
j14eval[2]=((IKabs((((x7176*x7182))+((sj10*((r22*sj15))))+((x7178*x7183)))))+(IKabs((((sj16*x7182))+(((-1.0)*cj16*x7183))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x7184=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x7184;
j14eval[1]=IKsign(x7184);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x7185=((1.0)*sj16);
IkReal x7186=((((-1.0)*r00*sj15*x7185))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
j14eval[0]=x7186;
j14eval[1]=IKsign(x7186);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs(((((-1.0)*r21*x7185))+((cj16*r20))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x7187=r01*r01;
IkReal x7188=((1.0)*x7187);
IkReal x7189=r02*r02;
IkReal x7190=(r01*sj16);
IkReal x7191=((2.0)*cj16*r00*x7190);
IkReal x7192=cj15*cj15;
IkReal x7193=cj16*cj16;
IkReal x7194=((2.0)*r02*sj15);
IkReal x7195=(cj15*cj16*r01);
IkReal x7196=(cj15*r00*sj16);
IkReal x7197=r00*r00;
IkReal x7198=((1.0)*x7197);
IkReal x7199=(x7192*x7193);
IkReal x7200=((((-1.0)*x7193*x7198))+x7191+(((-1.0)*x7188*x7199))+((x7189*x7192))+((x7187*x7193))+(((-1.0)*x7192*x7198))+(((-1.0)*x7189))+(((-1.0)*x7188))+((x7197*x7199))+(((-1.0)*x7194*x7195))+(((-1.0)*x7191*x7192))+(((-1.0)*x7194*x7196)));
j14eval[0]=x7200;
j14eval[1]=IKsign(x7200);
j14eval[2]=((IKabs(((((-1.0)*x7190))+((cj16*r00)))))+(IKabs((x7195+x7196+((r02*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7201=(r01*sj16);
IkReal x7202=(cj15*cj16*r01);
IkReal x7203=(cj15*r00*sj16);
IkReal x7204=r01*r01;
IkReal x7205=((1.0)*x7204);
IkReal x7206=r02*r02;
IkReal x7207=((2.0)*cj16*r00*x7201);
IkReal x7208=cj15*cj15;
IkReal x7209=cj16*cj16;
IkReal x7210=((2.0)*r02*sj15);
IkReal x7211=r00*r00;
IkReal x7212=((1.0)*x7211);
IkReal x7213=(x7208*x7209);
CheckValue<IkReal> x7214=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7209*x7212))+((x7206*x7208))+((x7204*x7209))+(((-1.0)*x7208*x7212))+(((-1.0)*x7207*x7208))+(((-1.0)*x7205*x7213))+(((-1.0)*x7205))+((x7211*x7213))+(((-1.0)*x7203*x7210))+(((-1.0)*x7206))+x7207+(((-1.0)*x7202*x7210)))),-1);
if(!x7214.valid){
continue;
}
CheckValue<IkReal> x7215 = IKatan2WithCheck(IkReal(((((-1.0)*x7201))+((cj16*r00)))),IkReal((((r02*sj15))+x7202+x7203)),IKFAST_ATAN2_MAGTHRESH);
if(!x7215.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7214.value)))+(x7215.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7216=IKcos(j14);
IkReal x7217=(cj16*x7216);
IkReal x7218=((1.0)*sj16*x7216);
IkReal x7219=(r22*sj15);
IkReal x7220=IKsin(j14);
IkReal x7221=((1.0)*x7220);
IkReal x7222=(cj15*r21);
IkReal x7223=((1.0)*cj16*x7220);
IkReal x7224=(cj15*r20);
IkReal x7225=((1.0)*sj16*x7220);
IkReal x7226=(r02*sj15);
IkReal x7227=(cj15*r01);
IkReal x7228=(cj15*r00);
IkReal x7229=(sj16*x7220);
IkReal x7230=((1.0)*x7216);
IkReal x7231=((1.0)*cj16*x7216);
IkReal x7232=(r12*sj15);
IkReal x7233=(cj15*r11);
IkReal x7234=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x7218))+((r20*x7217))+(((-1.0)*x7222*x7223))+(((-1.0)*x7224*x7225))+(((-1.0)*x7219*x7221)));
evalcond[1]=((((-1.0)*r01*x7218))+(((-1.0)*x7225*x7228))+((r00*x7217))+(((-1.0)*x7223*x7227))+(((-1.0)*x7221*x7226)));
evalcond[2]=((((-1.0)*x7219*x7230))+(((-1.0)*x7218*x7224))+(((-1.0)*x7222*x7231))+((r21*x7229))+(((-1.0)*r20*x7223)));
evalcond[3]=((((-1.0)*x7218*x7234))+((r11*x7229))+(((-1.0)*x7231*x7233))+(((-1.0)*r10*x7223))+(((-1.0)*x7230*x7232)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x7218))+(((-1.0)*x7225*x7234))+(((-1.0)*x7223*x7233))+((r10*x7217))+(((-1.0)*x7221*x7232)));
evalcond[5]=((-1.0)+(((-1.0)*x7227*x7231))+((r01*x7229))+(((-1.0)*x7226*x7230))+(((-1.0)*r00*x7223))+(((-1.0)*x7218*x7228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7235=((1.0)*sj16);
CheckValue<IkReal> x7236 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x7235))+((cj16*r20)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7236.valid){
continue;
}
CheckValue<IkReal> x7237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15*x7235))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x7237.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7236.value)+(((1.5707963267949)*(x7237.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7238=IKcos(j14);
IkReal x7239=(cj16*x7238);
IkReal x7240=((1.0)*sj16*x7238);
IkReal x7241=(r22*sj15);
IkReal x7242=IKsin(j14);
IkReal x7243=((1.0)*x7242);
IkReal x7244=(cj15*r21);
IkReal x7245=((1.0)*cj16*x7242);
IkReal x7246=(cj15*r20);
IkReal x7247=((1.0)*sj16*x7242);
IkReal x7248=(r02*sj15);
IkReal x7249=(cj15*r01);
IkReal x7250=(cj15*r00);
IkReal x7251=(sj16*x7242);
IkReal x7252=((1.0)*x7238);
IkReal x7253=((1.0)*cj16*x7238);
IkReal x7254=(r12*sj15);
IkReal x7255=(cj15*r11);
IkReal x7256=(cj15*r10);
evalcond[0]=((((-1.0)*x7241*x7243))+(((-1.0)*x7246*x7247))+(((-1.0)*r21*x7240))+((r20*x7239))+(((-1.0)*x7244*x7245)));
evalcond[1]=((((-1.0)*x7245*x7249))+(((-1.0)*r01*x7240))+(((-1.0)*x7243*x7248))+((r00*x7239))+(((-1.0)*x7247*x7250)));
evalcond[2]=(((r21*x7251))+(((-1.0)*x7244*x7253))+(((-1.0)*x7240*x7246))+(((-1.0)*r20*x7245))+(((-1.0)*x7241*x7252)));
evalcond[3]=((((-1.0)*x7240*x7256))+(((-1.0)*r10*x7245))+((r11*x7251))+(((-1.0)*x7253*x7255))+(((-1.0)*x7252*x7254)));
evalcond[4]=((-1.0)+((r10*x7239))+(((-1.0)*r11*x7240))+(((-1.0)*x7243*x7254))+(((-1.0)*x7245*x7255))+(((-1.0)*x7247*x7256)));
evalcond[5]=((-1.0)+(((-1.0)*x7249*x7253))+(((-1.0)*x7248*x7252))+(((-1.0)*x7240*x7250))+((r01*x7251))+(((-1.0)*r00*x7245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7257 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7257.valid){
continue;
}
CheckValue<IkReal> x7258=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x7258.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7257.value)+(((1.5707963267949)*(x7258.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7259=IKcos(j14);
IkReal x7260=(cj16*x7259);
IkReal x7261=((1.0)*sj16*x7259);
IkReal x7262=(r22*sj15);
IkReal x7263=IKsin(j14);
IkReal x7264=((1.0)*x7263);
IkReal x7265=(cj15*r21);
IkReal x7266=((1.0)*cj16*x7263);
IkReal x7267=(cj15*r20);
IkReal x7268=((1.0)*sj16*x7263);
IkReal x7269=(r02*sj15);
IkReal x7270=(cj15*r01);
IkReal x7271=(cj15*r00);
IkReal x7272=(sj16*x7263);
IkReal x7273=((1.0)*x7259);
IkReal x7274=((1.0)*cj16*x7259);
IkReal x7275=(r12*sj15);
IkReal x7276=(cj15*r11);
IkReal x7277=(cj15*r10);
evalcond[0]=((((-1.0)*x7262*x7264))+((r20*x7260))+(((-1.0)*r21*x7261))+(((-1.0)*x7265*x7266))+(((-1.0)*x7267*x7268)));
evalcond[1]=((((-1.0)*r01*x7261))+(((-1.0)*x7264*x7269))+(((-1.0)*x7266*x7270))+(((-1.0)*x7268*x7271))+((r00*x7260)));
evalcond[2]=((((-1.0)*x7262*x7273))+((r21*x7272))+(((-1.0)*r20*x7266))+(((-1.0)*x7261*x7267))+(((-1.0)*x7265*x7274)));
evalcond[3]=((((-1.0)*x7274*x7276))+((r11*x7272))+(((-1.0)*x7261*x7277))+(((-1.0)*r10*x7266))+(((-1.0)*x7273*x7275)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x7261))+(((-1.0)*x7266*x7276))+((r10*x7260))+(((-1.0)*x7264*x7275))+(((-1.0)*x7268*x7277)));
evalcond[5]=((-1.0)+((r01*x7272))+(((-1.0)*r00*x7266))+(((-1.0)*x7270*x7274))+(((-1.0)*x7269*x7273))+(((-1.0)*x7261*x7271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7278=((1.0)*cj15);
IkReal x7279=(((r20*sj15*sj16))+((cj16*r21*sj15))+(((-1.0)*r22*x7278)));
j14eval[0]=x7279;
j14eval[1]=IKsign(x7279);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x7278))+(((-1.0)*r00*sj16*x7278))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7280=((1.0)*cj16);
IkReal x7281=((1.0)*sj15);
IkReal x7282=((((-1.0)*r00*sj16*x7281))+(((-1.0)*r01*sj15*x7280))+((cj15*r02)));
j14eval[0]=x7282;
j14eval[1]=((IKabs(((((-1.0)*r22*x7281))+(((-1.0)*cj15*r21*x7280))+(((-1.0)*(1.0)*cj15*r20*sj16)))))+(IKabs((((r21*sj16))+(((-1.0)*r20*x7280))))));
j14eval[2]=IKsign(x7282);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7283=r01*r01;
IkReal x7284=r02*r02;
IkReal x7285=(r01*sj16);
IkReal x7286=((2.0)*cj16*r00*x7285);
IkReal x7287=cj15*cj15;
IkReal x7288=r00*r00;
IkReal x7289=(x7287*x7288);
IkReal x7290=cj16*cj16;
IkReal x7291=((2.0)*r02*sj15);
IkReal x7292=(cj15*cj16*r01);
IkReal x7293=(cj15*r00*sj16);
IkReal x7294=(x7283*x7290);
IkReal x7295=(((x7291*x7293))+x7289+x7284+x7283+((x7287*x7294))+((x7286*x7287))+(((-1.0)*x7286))+(((-1.0)*x7294))+(((-1.0)*x7284*x7287))+(((-1.0)*x7289*x7290))+((x7288*x7290))+((x7291*x7292)));
j14eval[0]=x7295;
j14eval[1]=((IKabs(((((-1.0)*x7285))+((cj16*r00)))))+(IKabs((((r02*sj15))+x7293+x7292))));
j14eval[2]=IKsign(x7295);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7296=(r01*sj16);
IkReal x7297=(cj15*cj16*r01);
IkReal x7298=(cj15*r00*sj16);
IkReal x7299=r01*r01;
IkReal x7300=r02*r02;
IkReal x7301=((2.0)*cj16*r00*x7296);
IkReal x7302=cj15*cj15;
IkReal x7303=r00*r00;
IkReal x7304=(x7302*x7303);
IkReal x7305=cj16*cj16;
IkReal x7306=((2.0)*r02*sj15);
IkReal x7307=(x7299*x7305);
CheckValue<IkReal> x7308 = IKatan2WithCheck(IkReal(((((-1.0)*x7296))+((cj16*r00)))),IkReal((((r02*sj15))+x7297+x7298)),IKFAST_ATAN2_MAGTHRESH);
if(!x7308.valid){
continue;
}
CheckValue<IkReal> x7309=IKPowWithIntegerCheck(IKsign((((x7298*x7306))+(((-1.0)*x7304*x7305))+x7300+x7304+((x7302*x7307))+(((-1.0)*x7307))+((x7303*x7305))+((x7297*x7306))+(((-1.0)*x7301))+x7299+(((-1.0)*x7300*x7302))+((x7301*x7302)))),-1);
if(!x7309.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7308.value)+(((1.5707963267949)*(x7309.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7310=IKcos(j14);
IkReal x7311=(cj16*x7310);
IkReal x7312=((1.0)*sj16*x7310);
IkReal x7313=(r22*sj15);
IkReal x7314=IKsin(j14);
IkReal x7315=((1.0)*x7314);
IkReal x7316=(cj15*r21);
IkReal x7317=((1.0)*cj16*x7314);
IkReal x7318=(cj15*r20);
IkReal x7319=((1.0)*sj16*x7314);
IkReal x7320=(r02*sj15);
IkReal x7321=(cj15*r01);
IkReal x7322=(cj15*r00);
IkReal x7323=(sj16*x7314);
IkReal x7324=((1.0)*x7310);
IkReal x7325=((1.0)*cj16*x7310);
IkReal x7326=(r12*sj15);
IkReal x7327=(cj15*r11);
IkReal x7328=(cj15*r10);
evalcond[0]=((((-1.0)*x7313*x7315))+((r20*x7311))+(((-1.0)*x7316*x7317))+(((-1.0)*x7318*x7319))+(((-1.0)*r21*x7312)));
evalcond[1]=((((-1.0)*x7315*x7320))+((r00*x7311))+(((-1.0)*r01*x7312))+(((-1.0)*x7317*x7321))+(((-1.0)*x7319*x7322)));
evalcond[2]=((((-1.0)*x7312*x7318))+((r21*x7323))+(((-1.0)*x7313*x7324))+(((-1.0)*x7316*x7325))+(((-1.0)*r20*x7317)));
evalcond[3]=((((-1.0)*r10*x7317))+(((-1.0)*x7325*x7327))+(((-1.0)*x7324*x7326))+(((-1.0)*x7312*x7328))+((r11*x7323)));
evalcond[4]=((1.0)+(((-1.0)*x7319*x7328))+(((-1.0)*x7315*x7326))+(((-1.0)*x7317*x7327))+((r10*x7311))+(((-1.0)*r11*x7312)));
evalcond[5]=((1.0)+(((-1.0)*x7312*x7322))+(((-1.0)*x7321*x7325))+((r01*x7323))+(((-1.0)*x7320*x7324))+(((-1.0)*r00*x7317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7329=((1.0)*cj16);
IkReal x7330=((1.0)*sj15);
CheckValue<IkReal> x7331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj15*x7329))+((cj15*r02))+(((-1.0)*r00*sj16*x7330)))),-1);
if(!x7331.valid){
continue;
}
CheckValue<IkReal> x7332 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x7329))+((r21*sj16)))),IkReal(((((-1.0)*cj15*r21*x7329))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x7330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7332.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7331.value)))+(x7332.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7333=IKcos(j14);
IkReal x7334=(cj16*x7333);
IkReal x7335=((1.0)*sj16*x7333);
IkReal x7336=(r22*sj15);
IkReal x7337=IKsin(j14);
IkReal x7338=((1.0)*x7337);
IkReal x7339=(cj15*r21);
IkReal x7340=((1.0)*cj16*x7337);
IkReal x7341=(cj15*r20);
IkReal x7342=((1.0)*sj16*x7337);
IkReal x7343=(r02*sj15);
IkReal x7344=(cj15*r01);
IkReal x7345=(cj15*r00);
IkReal x7346=(sj16*x7337);
IkReal x7347=((1.0)*x7333);
IkReal x7348=((1.0)*cj16*x7333);
IkReal x7349=(r12*sj15);
IkReal x7350=(cj15*r11);
IkReal x7351=(cj15*r10);
evalcond[0]=((((-1.0)*x7336*x7338))+(((-1.0)*x7341*x7342))+(((-1.0)*r21*x7335))+(((-1.0)*x7339*x7340))+((r20*x7334)));
evalcond[1]=((((-1.0)*x7342*x7345))+(((-1.0)*x7340*x7344))+((r00*x7334))+(((-1.0)*x7338*x7343))+(((-1.0)*r01*x7335)));
evalcond[2]=((((-1.0)*x7339*x7348))+(((-1.0)*r20*x7340))+(((-1.0)*x7336*x7347))+((r21*x7346))+(((-1.0)*x7335*x7341)));
evalcond[3]=((((-1.0)*x7335*x7351))+((r11*x7346))+(((-1.0)*x7348*x7350))+(((-1.0)*x7347*x7349))+(((-1.0)*r10*x7340)));
evalcond[4]=((1.0)+(((-1.0)*x7340*x7350))+(((-1.0)*x7342*x7351))+(((-1.0)*x7338*x7349))+(((-1.0)*r11*x7335))+((r10*x7334)));
evalcond[5]=((1.0)+(((-1.0)*x7344*x7348))+(((-1.0)*x7335*x7345))+(((-1.0)*r00*x7340))+((r01*x7346))+(((-1.0)*x7343*x7347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7352=((1.0)*cj15);
CheckValue<IkReal> x7353=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+((cj16*r21*sj15))+(((-1.0)*r22*x7352)))),-1);
if(!x7353.valid){
continue;
}
CheckValue<IkReal> x7354 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*r00*sj16*x7352))+(((-1.0)*cj16*r01*x7352))+(((-1.0)*(1.0)*r02*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7354.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7353.value)))+(x7354.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7355=IKcos(j14);
IkReal x7356=(cj16*x7355);
IkReal x7357=((1.0)*sj16*x7355);
IkReal x7358=(r22*sj15);
IkReal x7359=IKsin(j14);
IkReal x7360=((1.0)*x7359);
IkReal x7361=(cj15*r21);
IkReal x7362=((1.0)*cj16*x7359);
IkReal x7363=(cj15*r20);
IkReal x7364=((1.0)*sj16*x7359);
IkReal x7365=(r02*sj15);
IkReal x7366=(cj15*r01);
IkReal x7367=(cj15*r00);
IkReal x7368=(sj16*x7359);
IkReal x7369=((1.0)*x7355);
IkReal x7370=((1.0)*cj16*x7355);
IkReal x7371=(r12*sj15);
IkReal x7372=(cj15*r11);
IkReal x7373=(cj15*r10);
evalcond[0]=((((-1.0)*x7358*x7360))+(((-1.0)*x7361*x7362))+(((-1.0)*r21*x7357))+((r20*x7356))+(((-1.0)*x7363*x7364)));
evalcond[1]=((((-1.0)*x7364*x7367))+((r00*x7356))+(((-1.0)*x7362*x7366))+(((-1.0)*x7360*x7365))+(((-1.0)*r01*x7357)));
evalcond[2]=((((-1.0)*x7357*x7363))+((r21*x7368))+(((-1.0)*x7358*x7369))+(((-1.0)*x7361*x7370))+(((-1.0)*r20*x7362)));
evalcond[3]=((((-1.0)*x7369*x7371))+(((-1.0)*x7370*x7372))+((r11*x7368))+(((-1.0)*r10*x7362))+(((-1.0)*x7357*x7373)));
evalcond[4]=((1.0)+(((-1.0)*x7360*x7371))+(((-1.0)*r11*x7357))+(((-1.0)*x7364*x7373))+((r10*x7356))+(((-1.0)*x7362*x7372)));
evalcond[5]=((1.0)+((r01*x7368))+(((-1.0)*x7357*x7367))+(((-1.0)*x7366*x7370))+(((-1.0)*x7365*x7369))+(((-1.0)*r00*x7362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7374=((1.0)*cj15);
IkReal x7375=((((-1.0)*r12*x7374))+((cj16*r11*sj15))+((r10*sj15*sj16)));
j14eval[0]=x7375;
j14eval[1]=((IKabs(((((-1.0)*cj16*r21*x7374))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*r20*sj16*x7374)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x7375);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7376=((1.0)*cj16);
IkReal x7377=((1.0)*sj15);
IkReal x7378=((((-1.0)*r21*sj15*x7376))+((cj15*r22))+(((-1.0)*r20*sj16*x7377)));
j14eval[0]=x7378;
j14eval[1]=((IKabs(((((-1.0)*r12*x7377))+(((-1.0)*cj15*r11*x7376))+(((-1.0)*(1.0)*cj15*r10*sj16)))))+(IKabs(((((-1.0)*r10*x7376))+((r11*sj16))))));
j14eval[2]=IKsign(x7378);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7379=r11*r11;
IkReal x7380=((1.0)*x7379);
IkReal x7381=r12*r12;
IkReal x7382=(r11*sj16);
IkReal x7383=((2.0)*cj16*r10*x7382);
IkReal x7384=cj15*cj15;
IkReal x7385=cj16*cj16;
IkReal x7386=((2.0)*r12*sj15);
IkReal x7387=(cj15*cj16*r11);
IkReal x7388=(cj15*r10*sj16);
IkReal x7389=r10*r10;
IkReal x7390=((1.0)*x7389);
IkReal x7391=(x7384*x7385);
IkReal x7392=((((-1.0)*x7383*x7384))+(((-1.0)*x7381))+((x7379*x7385))+(((-1.0)*x7385*x7390))+((x7389*x7391))+((x7381*x7384))+(((-1.0)*x7384*x7390))+(((-1.0)*x7386*x7387))+x7383+(((-1.0)*x7380*x7391))+(((-1.0)*x7380))+(((-1.0)*x7386*x7388)));
j14eval[0]=x7392;
j14eval[1]=((IKabs((((cj16*r10))+(((-1.0)*x7382)))))+(IKabs((((r12*sj15))+x7387+x7388))));
j14eval[2]=IKsign(x7392);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7393=(r11*sj16);
IkReal x7394=(cj15*cj16*r11);
IkReal x7395=(cj15*r10*sj16);
IkReal x7396=r11*r11;
IkReal x7397=((1.0)*x7396);
IkReal x7398=r12*r12;
IkReal x7399=((2.0)*cj16*r10*x7393);
IkReal x7400=cj15*cj15;
IkReal x7401=cj16*cj16;
IkReal x7402=((2.0)*r12*sj15);
IkReal x7403=r10*r10;
IkReal x7404=((1.0)*x7403);
IkReal x7405=(x7400*x7401);
CheckValue<IkReal> x7406 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x7393)))),IkReal((x7395+x7394+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7406.valid){
continue;
}
CheckValue<IkReal> x7407=IKPowWithIntegerCheck(IKsign((x7399+(((-1.0)*x7399*x7400))+(((-1.0)*x7400*x7404))+(((-1.0)*x7397))+((x7398*x7400))+(((-1.0)*x7401*x7404))+((x7403*x7405))+(((-1.0)*x7394*x7402))+(((-1.0)*x7397*x7405))+(((-1.0)*x7395*x7402))+((x7396*x7401))+(((-1.0)*x7398)))),-1);
if(!x7407.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7406.value)+(((1.5707963267949)*(x7407.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7408=IKcos(j14);
IkReal x7409=(cj16*x7408);
IkReal x7410=((1.0)*sj16*x7408);
IkReal x7411=(r22*sj15);
IkReal x7412=IKsin(j14);
IkReal x7413=((1.0)*x7412);
IkReal x7414=(cj15*r21);
IkReal x7415=((1.0)*cj16*x7412);
IkReal x7416=(cj15*r20);
IkReal x7417=((1.0)*sj16*x7412);
IkReal x7418=(r12*sj15);
IkReal x7419=(cj15*r11);
IkReal x7420=(cj15*r10);
IkReal x7421=(sj16*x7412);
IkReal x7422=((1.0)*x7408);
IkReal x7423=((1.0)*cj16*x7408);
IkReal x7424=(r02*sj15);
IkReal x7425=(cj15*r01);
IkReal x7426=(cj15*r00);
evalcond[0]=(((r20*x7409))+(((-1.0)*r21*x7410))+(((-1.0)*x7411*x7413))+(((-1.0)*x7414*x7415))+(((-1.0)*x7416*x7417)));
evalcond[1]=((((-1.0)*x7413*x7418))+(((-1.0)*x7415*x7419))+((r10*x7409))+(((-1.0)*r11*x7410))+(((-1.0)*x7417*x7420)));
evalcond[2]=((((-1.0)*r20*x7415))+(((-1.0)*x7414*x7423))+(((-1.0)*x7411*x7422))+(((-1.0)*x7410*x7416))+((r21*x7421)));
evalcond[3]=((((-1.0)*r00*x7415))+(((-1.0)*x7410*x7426))+((r01*x7421))+(((-1.0)*x7422*x7424))+(((-1.0)*x7423*x7425)));
evalcond[4]=((1.0)+(((-1.0)*x7415*x7425))+((r00*x7409))+(((-1.0)*x7413*x7424))+(((-1.0)*r01*x7410))+(((-1.0)*x7417*x7426)));
evalcond[5]=((-1.0)+((r11*x7421))+(((-1.0)*x7418*x7422))+(((-1.0)*x7410*x7420))+(((-1.0)*r10*x7415))+(((-1.0)*x7419*x7423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7427=((1.0)*cj16);
IkReal x7428=((1.0)*sj15);
CheckValue<IkReal> x7429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x7428))+((cj15*r22))+(((-1.0)*r21*sj15*x7427)))),-1);
if(!x7429.valid){
continue;
}
CheckValue<IkReal> x7430 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x7427))+((r11*sj16)))),IkReal(((((-1.0)*cj15*r11*x7427))+(((-1.0)*r12*x7428))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7430.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7429.value)))+(x7430.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7431=IKcos(j14);
IkReal x7432=(cj16*x7431);
IkReal x7433=((1.0)*sj16*x7431);
IkReal x7434=(r22*sj15);
IkReal x7435=IKsin(j14);
IkReal x7436=((1.0)*x7435);
IkReal x7437=(cj15*r21);
IkReal x7438=((1.0)*cj16*x7435);
IkReal x7439=(cj15*r20);
IkReal x7440=((1.0)*sj16*x7435);
IkReal x7441=(r12*sj15);
IkReal x7442=(cj15*r11);
IkReal x7443=(cj15*r10);
IkReal x7444=(sj16*x7435);
IkReal x7445=((1.0)*x7431);
IkReal x7446=((1.0)*cj16*x7431);
IkReal x7447=(r02*sj15);
IkReal x7448=(cj15*r01);
IkReal x7449=(cj15*r00);
evalcond[0]=(((r20*x7432))+(((-1.0)*r21*x7433))+(((-1.0)*x7437*x7438))+(((-1.0)*x7439*x7440))+(((-1.0)*x7434*x7436)));
evalcond[1]=((((-1.0)*x7438*x7442))+((r10*x7432))+(((-1.0)*x7440*x7443))+(((-1.0)*r11*x7433))+(((-1.0)*x7436*x7441)));
evalcond[2]=((((-1.0)*x7433*x7439))+((r21*x7444))+(((-1.0)*x7437*x7446))+(((-1.0)*x7434*x7445))+(((-1.0)*r20*x7438)));
evalcond[3]=((((-1.0)*x7446*x7448))+(((-1.0)*x7433*x7449))+(((-1.0)*r00*x7438))+((r01*x7444))+(((-1.0)*x7445*x7447)));
evalcond[4]=((1.0)+((r00*x7432))+(((-1.0)*x7438*x7448))+(((-1.0)*x7440*x7449))+(((-1.0)*x7436*x7447))+(((-1.0)*r01*x7433)));
evalcond[5]=((-1.0)+((r11*x7444))+(((-1.0)*r10*x7438))+(((-1.0)*x7441*x7445))+(((-1.0)*x7442*x7446))+(((-1.0)*x7433*x7443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7450=((1.0)*cj15);
CheckValue<IkReal> x7451 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*cj16*r21*x7450))+(((-1.0)*r20*sj16*x7450))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7451.valid){
continue;
}
CheckValue<IkReal> x7452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x7450))+((cj16*r11*sj15))+((r10*sj15*sj16)))),-1);
if(!x7452.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7451.value)+(((1.5707963267949)*(x7452.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7453=IKcos(j14);
IkReal x7454=(cj16*x7453);
IkReal x7455=((1.0)*sj16*x7453);
IkReal x7456=(r22*sj15);
IkReal x7457=IKsin(j14);
IkReal x7458=((1.0)*x7457);
IkReal x7459=(cj15*r21);
IkReal x7460=((1.0)*cj16*x7457);
IkReal x7461=(cj15*r20);
IkReal x7462=((1.0)*sj16*x7457);
IkReal x7463=(r12*sj15);
IkReal x7464=(cj15*r11);
IkReal x7465=(cj15*r10);
IkReal x7466=(sj16*x7457);
IkReal x7467=((1.0)*x7453);
IkReal x7468=((1.0)*cj16*x7453);
IkReal x7469=(r02*sj15);
IkReal x7470=(cj15*r01);
IkReal x7471=(cj15*r00);
evalcond[0]=((((-1.0)*x7461*x7462))+(((-1.0)*x7456*x7458))+(((-1.0)*x7459*x7460))+(((-1.0)*r21*x7455))+((r20*x7454)));
evalcond[1]=((((-1.0)*x7460*x7464))+(((-1.0)*r11*x7455))+(((-1.0)*x7458*x7463))+((r10*x7454))+(((-1.0)*x7462*x7465)));
evalcond[2]=((((-1.0)*x7456*x7467))+((r21*x7466))+(((-1.0)*x7459*x7468))+(((-1.0)*x7455*x7461))+(((-1.0)*r20*x7460)));
evalcond[3]=((((-1.0)*x7467*x7469))+(((-1.0)*x7455*x7471))+(((-1.0)*x7468*x7470))+(((-1.0)*r00*x7460))+((r01*x7466)));
evalcond[4]=((1.0)+(((-1.0)*r01*x7455))+(((-1.0)*x7462*x7471))+((r00*x7454))+(((-1.0)*x7458*x7469))+(((-1.0)*x7460*x7470)));
evalcond[5]=((-1.0)+(((-1.0)*x7455*x7465))+((r11*x7466))+(((-1.0)*r10*x7460))+(((-1.0)*x7463*x7467))+(((-1.0)*x7464*x7468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7472=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x7472;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x7472);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7473=((1.0)*sj16);
IkReal x7474=((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x7473))+((cj15*r22)));
j14eval[0]=x7474;
j14eval[1]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs((((cj16*r10))+(((-1.0)*r11*x7473))))));
j14eval[2]=IKsign(x7474);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7475=r11*r11;
IkReal x7476=r12*r12;
IkReal x7477=(r11*sj16);
IkReal x7478=((2.0)*cj16*r10*x7477);
IkReal x7479=cj15*cj15;
IkReal x7480=r10*r10;
IkReal x7481=(x7479*x7480);
IkReal x7482=cj16*cj16;
IkReal x7483=((2.0)*r12*sj15);
IkReal x7484=(cj15*cj16*r11);
IkReal x7485=(cj15*r10*sj16);
IkReal x7486=(x7475*x7482);
IkReal x7487=((((-1.0)*x7478))+x7481+(((-1.0)*x7476*x7479))+((x7479*x7486))+((x7483*x7484))+(((-1.0)*x7481*x7482))+((x7478*x7479))+(((-1.0)*x7486))+((x7483*x7485))+((x7480*x7482))+x7475+x7476);
j14eval[0]=x7487;
j14eval[1]=IKsign(x7487);
j14eval[2]=((IKabs(((((-1.0)*x7477))+((cj16*r10)))))+(IKabs((((r12*sj15))+x7484+x7485))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7488=(r11*sj16);
IkReal x7489=(cj15*cj16*r11);
IkReal x7490=(cj15*r10*sj16);
IkReal x7491=r11*r11;
IkReal x7492=r12*r12;
IkReal x7493=((2.0)*cj16*r10*x7488);
IkReal x7494=cj15*cj15;
IkReal x7495=r10*r10;
IkReal x7496=(x7494*x7495);
IkReal x7497=cj16*cj16;
IkReal x7498=((2.0)*r12*sj15);
IkReal x7499=(x7491*x7497);
CheckValue<IkReal> x7500=IKPowWithIntegerCheck(IKsign((((x7494*x7499))+(((-1.0)*x7496*x7497))+((x7493*x7494))+((x7495*x7497))+(((-1.0)*x7493))+(((-1.0)*x7499))+(((-1.0)*x7492*x7494))+x7496+x7491+x7492+((x7490*x7498))+((x7489*x7498)))),-1);
if(!x7500.valid){
continue;
}
CheckValue<IkReal> x7501 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x7488)))),IkReal((((r12*sj15))+x7489+x7490)),IKFAST_ATAN2_MAGTHRESH);
if(!x7501.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7500.value)))+(x7501.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7502=IKcos(j14);
IkReal x7503=(cj16*x7502);
IkReal x7504=((1.0)*sj16*x7502);
IkReal x7505=(r22*sj15);
IkReal x7506=IKsin(j14);
IkReal x7507=((1.0)*x7506);
IkReal x7508=(cj15*r21);
IkReal x7509=((1.0)*cj16*x7506);
IkReal x7510=(cj15*r20);
IkReal x7511=((1.0)*sj16*x7506);
IkReal x7512=(r12*sj15);
IkReal x7513=(cj15*r11);
IkReal x7514=(cj15*r10);
IkReal x7515=(sj16*x7506);
IkReal x7516=((1.0)*x7502);
IkReal x7517=((1.0)*cj16*x7502);
IkReal x7518=(r02*sj15);
IkReal x7519=(cj15*r01);
IkReal x7520=(cj15*r00);
evalcond[0]=((((-1.0)*x7505*x7507))+(((-1.0)*x7510*x7511))+((r20*x7503))+(((-1.0)*x7508*x7509))+(((-1.0)*r21*x7504)));
evalcond[1]=((((-1.0)*x7507*x7512))+((r10*x7503))+(((-1.0)*r11*x7504))+(((-1.0)*x7511*x7514))+(((-1.0)*x7509*x7513)));
evalcond[2]=((((-1.0)*x7505*x7516))+(((-1.0)*r20*x7509))+(((-1.0)*x7504*x7510))+((r21*x7515))+(((-1.0)*x7508*x7517)));
evalcond[3]=((((-1.0)*x7517*x7519))+((r01*x7515))+(((-1.0)*r00*x7509))+(((-1.0)*x7504*x7520))+(((-1.0)*x7516*x7518)));
evalcond[4]=((-1.0)+((r00*x7503))+(((-1.0)*x7509*x7519))+(((-1.0)*x7507*x7518))+(((-1.0)*x7511*x7520))+(((-1.0)*r01*x7504)));
evalcond[5]=((1.0)+(((-1.0)*x7513*x7517))+(((-1.0)*r10*x7509))+(((-1.0)*x7504*x7514))+(((-1.0)*x7512*x7516))+((r11*x7515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7521=((1.0)*sj16);
CheckValue<IkReal> x7522 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x7521)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7522.valid){
continue;
}
CheckValue<IkReal> x7523=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x7521))+((cj15*r22)))),-1);
if(!x7523.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7522.value)+(((1.5707963267949)*(x7523.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7524=IKcos(j14);
IkReal x7525=(cj16*x7524);
IkReal x7526=((1.0)*sj16*x7524);
IkReal x7527=(r22*sj15);
IkReal x7528=IKsin(j14);
IkReal x7529=((1.0)*x7528);
IkReal x7530=(cj15*r21);
IkReal x7531=((1.0)*cj16*x7528);
IkReal x7532=(cj15*r20);
IkReal x7533=((1.0)*sj16*x7528);
IkReal x7534=(r12*sj15);
IkReal x7535=(cj15*r11);
IkReal x7536=(cj15*r10);
IkReal x7537=(sj16*x7528);
IkReal x7538=((1.0)*x7524);
IkReal x7539=((1.0)*cj16*x7524);
IkReal x7540=(r02*sj15);
IkReal x7541=(cj15*r01);
IkReal x7542=(cj15*r00);
evalcond[0]=((((-1.0)*x7532*x7533))+(((-1.0)*x7530*x7531))+(((-1.0)*x7527*x7529))+(((-1.0)*r21*x7526))+((r20*x7525)));
evalcond[1]=((((-1.0)*x7529*x7534))+((r10*x7525))+(((-1.0)*x7531*x7535))+(((-1.0)*r11*x7526))+(((-1.0)*x7533*x7536)));
evalcond[2]=((((-1.0)*x7526*x7532))+(((-1.0)*x7530*x7539))+(((-1.0)*r20*x7531))+(((-1.0)*x7527*x7538))+((r21*x7537)));
evalcond[3]=((((-1.0)*x7538*x7540))+((r01*x7537))+(((-1.0)*x7539*x7541))+(((-1.0)*x7526*x7542))+(((-1.0)*r00*x7531)));
evalcond[4]=((-1.0)+(((-1.0)*x7531*x7541))+(((-1.0)*x7533*x7542))+(((-1.0)*r01*x7526))+(((-1.0)*x7529*x7540))+((r00*x7525)));
evalcond[5]=((1.0)+(((-1.0)*x7526*x7536))+(((-1.0)*r10*x7531))+(((-1.0)*x7535*x7539))+(((-1.0)*x7534*x7538))+((r11*x7537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7543 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7543.valid){
continue;
}
CheckValue<IkReal> x7544=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x7544.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7543.value)+(((1.5707963267949)*(x7544.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7545=IKcos(j14);
IkReal x7546=(cj16*x7545);
IkReal x7547=((1.0)*sj16*x7545);
IkReal x7548=(r22*sj15);
IkReal x7549=IKsin(j14);
IkReal x7550=((1.0)*x7549);
IkReal x7551=(cj15*r21);
IkReal x7552=((1.0)*cj16*x7549);
IkReal x7553=(cj15*r20);
IkReal x7554=((1.0)*sj16*x7549);
IkReal x7555=(r12*sj15);
IkReal x7556=(cj15*r11);
IkReal x7557=(cj15*r10);
IkReal x7558=(sj16*x7549);
IkReal x7559=((1.0)*x7545);
IkReal x7560=((1.0)*cj16*x7545);
IkReal x7561=(r02*sj15);
IkReal x7562=(cj15*r01);
IkReal x7563=(cj15*r00);
evalcond[0]=((((-1.0)*x7553*x7554))+(((-1.0)*x7551*x7552))+(((-1.0)*x7548*x7550))+(((-1.0)*r21*x7547))+((r20*x7546)));
evalcond[1]=((((-1.0)*x7552*x7556))+(((-1.0)*x7550*x7555))+(((-1.0)*r11*x7547))+((r10*x7546))+(((-1.0)*x7554*x7557)));
evalcond[2]=((((-1.0)*x7547*x7553))+((r21*x7558))+(((-1.0)*x7548*x7559))+(((-1.0)*x7551*x7560))+(((-1.0)*r20*x7552)));
evalcond[3]=((((-1.0)*x7547*x7563))+(((-1.0)*r00*x7552))+(((-1.0)*x7559*x7561))+((r01*x7558))+(((-1.0)*x7560*x7562)));
evalcond[4]=((-1.0)+(((-1.0)*x7554*x7563))+(((-1.0)*r01*x7547))+((r00*x7546))+(((-1.0)*x7552*x7562))+(((-1.0)*x7550*x7561)));
evalcond[5]=((1.0)+(((-1.0)*x7547*x7557))+(((-1.0)*x7556*x7560))+(((-1.0)*x7555*x7559))+(((-1.0)*r10*x7552))+((r11*x7558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7564=(cj15*cj16);
IkReal x7565=(r21*sj10);
IkReal x7566=(cj15*sj16);
IkReal x7567=(r20*sj10);
IkReal x7568=(r02*r22);
IkReal x7569=cj15*cj15;
IkReal x7570=(r00*r20);
IkReal x7571=(x7569*x7570);
IkReal x7572=cj16*cj16;
IkReal x7573=(r00*r21);
IkReal x7574=((1.0)*cj16*sj16);
IkReal x7575=(r01*r20);
IkReal x7576=(r02*sj15);
IkReal x7577=(r01*r21*x7572);
IkReal x7578=(cj16*sj16*x7569);
CheckValue<IkReal> x7579 = IKatan2WithCheck(IkReal((((x7566*x7567))+((x7564*x7565))+((sj10*((r22*sj15)))))),IkReal((((sj16*x7565))+(((-1.0)*cj16*x7567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7579.valid){
continue;
}
CheckValue<IkReal> x7580=IKPowWithIntegerCheck(IKsign((x7568+((x7575*x7578))+(((-1.0)*x7571*x7572))+((x7569*x7577))+((r01*r22*sj15*x7564))+(((-1.0)*x7568*x7569))+((cj15*r20*sj16*x7576))+((x7573*x7578))+(((-1.0)*x7577))+x7571+(((-1.0)*x7574*x7575))+((x7570*x7572))+((r01*r21))+((r00*r22*sj15*x7566))+(((-1.0)*x7573*x7574))+((cj15*cj16*r21*x7576)))),-1);
if(!x7580.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7579.value)+(((1.5707963267949)*(x7580.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7581=IKcos(j14);
IkReal x7582=(cj16*x7581);
IkReal x7583=((1.0)*sj16*x7581);
IkReal x7584=(r22*sj15);
IkReal x7585=IKsin(j14);
IkReal x7586=((1.0)*x7585);
IkReal x7587=(cj15*r21);
IkReal x7588=((1.0)*cj16*x7585);
IkReal x7589=(cj15*r20);
IkReal x7590=((1.0)*sj16*x7585);
IkReal x7591=(sj16*x7585);
IkReal x7592=((1.0)*x7581);
IkReal x7593=((1.0)*cj16*x7581);
IkReal x7594=(r02*sj15);
IkReal x7595=(cj15*r01);
IkReal x7596=(cj15*r00);
IkReal x7597=((-1.0)*(((1.0)*cj10)));
IkReal x7598=(r12*sj15);
IkReal x7599=(cj15*r11);
IkReal x7600=(cj15*r10);
evalcond[0]=((((-1.0)*x7589*x7590))+(((-1.0)*r21*x7583))+(((-1.0)*x7584*x7586))+((r20*x7582))+(((-1.0)*x7587*x7588)));
evalcond[1]=((((-1.0)*x7587*x7593))+((r21*x7591))+(((-1.0)*x7584*x7592))+(((-1.0)*r20*x7588))+(((-1.0)*x7583*x7589)));
evalcond[2]=((((-1.0)*x7586*x7594))+(((-1.0)*x7588*x7595))+sj10+((r00*x7582))+(((-1.0)*r01*x7583))+(((-1.0)*x7590*x7596)));
evalcond[3]=((((-1.0)*x7590*x7600))+(((-1.0)*x7586*x7598))+(((-1.0)*r11*x7583))+(((-1.0)*x7588*x7599))+x7597+((r10*x7582)));
evalcond[4]=((((-1.0)*x7592*x7594))+x7597+(((-1.0)*x7593*x7595))+((r01*x7591))+(((-1.0)*r00*x7588))+(((-1.0)*x7583*x7596)));
evalcond[5]=((((-1.0)*x7592*x7598))+(((-1.0)*x7583*x7600))+((r11*x7591))+(((-1.0)*x7593*x7599))+(((-1.0)*r10*x7588))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7601=((1.0)*cj15);
IkReal x7602=(r21*sj10);
IkReal x7603=((1.0)*sj10);
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal((((sj16*x7602))+(((-1.0)*cj16*r20*x7603)))),IkReal(((((-1.0)*r20*sj10*sj16*x7601))+(((-1.0)*r22*sj15*x7603))+(((-1.0)*cj15*cj16*x7602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
CheckValue<IkReal> x7605=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x7601))+((cj16*r11*sj15))+((r10*sj15*sj16)))),-1);
if(!x7605.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7604.value)+(((1.5707963267949)*(x7605.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7606=IKcos(j14);
IkReal x7607=(cj16*x7606);
IkReal x7608=((1.0)*sj16*x7606);
IkReal x7609=(r22*sj15);
IkReal x7610=IKsin(j14);
IkReal x7611=((1.0)*x7610);
IkReal x7612=(cj15*r21);
IkReal x7613=((1.0)*cj16*x7610);
IkReal x7614=(cj15*r20);
IkReal x7615=((1.0)*sj16*x7610);
IkReal x7616=(sj16*x7610);
IkReal x7617=((1.0)*x7606);
IkReal x7618=((1.0)*cj16*x7606);
IkReal x7619=(r02*sj15);
IkReal x7620=(cj15*r01);
IkReal x7621=(cj15*r00);
IkReal x7622=((-1.0)*(((1.0)*cj10)));
IkReal x7623=(r12*sj15);
IkReal x7624=(cj15*r11);
IkReal x7625=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x7608))+(((-1.0)*x7609*x7611))+((r20*x7607))+(((-1.0)*x7614*x7615))+(((-1.0)*x7612*x7613)));
evalcond[1]=((((-1.0)*x7609*x7617))+((r21*x7616))+(((-1.0)*x7612*x7618))+(((-1.0)*r20*x7613))+(((-1.0)*x7608*x7614)));
evalcond[2]=((((-1.0)*x7611*x7619))+sj10+(((-1.0)*x7613*x7620))+(((-1.0)*r01*x7608))+(((-1.0)*x7615*x7621))+((r00*x7607)));
evalcond[3]=((((-1.0)*x7611*x7623))+(((-1.0)*x7613*x7624))+(((-1.0)*x7615*x7625))+(((-1.0)*r11*x7608))+((r10*x7607))+x7622);
evalcond[4]=((((-1.0)*x7617*x7619))+(((-1.0)*x7608*x7621))+(((-1.0)*x7618*x7620))+(((-1.0)*r00*x7613))+((r01*x7616))+x7622);
evalcond[5]=((((-1.0)*x7618*x7624))+((r11*x7616))+(((-1.0)*x7617*x7623))+(((-1.0)*x7608*x7625))+(((-1.0)*r10*x7613))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7626=((1.0)*sj16);
IkReal x7627=(cj10*cj16);
CheckValue<IkReal> x7628=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15*x7626))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x7628.valid){
continue;
}
CheckValue<IkReal> x7629 = IKatan2WithCheck(IkReal((((r20*x7627))+(((-1.0)*cj10*r21*x7626)))),IkReal((((cj10*r22*sj15))+((cj15*r21*x7627))+((cj10*cj15*r20*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7629.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7628.value)))+(x7629.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7630=IKcos(j14);
IkReal x7631=(cj16*x7630);
IkReal x7632=((1.0)*sj16*x7630);
IkReal x7633=(r22*sj15);
IkReal x7634=IKsin(j14);
IkReal x7635=((1.0)*x7634);
IkReal x7636=(cj15*r21);
IkReal x7637=((1.0)*cj16*x7634);
IkReal x7638=(cj15*r20);
IkReal x7639=((1.0)*sj16*x7634);
IkReal x7640=(sj16*x7634);
IkReal x7641=((1.0)*x7630);
IkReal x7642=((1.0)*cj16*x7630);
IkReal x7643=(r02*sj15);
IkReal x7644=(cj15*r01);
IkReal x7645=(cj15*r00);
IkReal x7646=((-1.0)*(((1.0)*cj10)));
IkReal x7647=(r12*sj15);
IkReal x7648=(cj15*r11);
IkReal x7649=(cj15*r10);
evalcond[0]=(((r20*x7631))+(((-1.0)*x7638*x7639))+(((-1.0)*x7636*x7637))+(((-1.0)*x7633*x7635))+(((-1.0)*r21*x7632)));
evalcond[1]=((((-1.0)*x7633*x7641))+(((-1.0)*x7632*x7638))+((r21*x7640))+(((-1.0)*x7636*x7642))+(((-1.0)*r20*x7637)));
evalcond[2]=((((-1.0)*x7637*x7644))+(((-1.0)*x7635*x7643))+((r00*x7631))+(((-1.0)*x7639*x7645))+sj10+(((-1.0)*r01*x7632)));
evalcond[3]=((((-1.0)*x7637*x7648))+((r10*x7631))+x7646+(((-1.0)*r11*x7632))+(((-1.0)*x7635*x7647))+(((-1.0)*x7639*x7649)));
evalcond[4]=(x7646+((r01*x7640))+(((-1.0)*r00*x7637))+(((-1.0)*x7642*x7644))+(((-1.0)*x7632*x7645))+(((-1.0)*x7641*x7643)));
evalcond[5]=(((r11*x7640))+(((-1.0)*x7641*x7647))+(((-1.0)*x7642*x7648))+(((-1.0)*r10*x7637))+(((-1.0)*(1.0)*sj10))+(((-1.0)*x7632*x7649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x7650=((1.0)*cj16);
IkReal x7651=((((-1.0)*r01*sj15*x7650))+(((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02)));
IkReal x7652=(cj10*r21);
IkReal x7653=(cj10*r20);
j14eval[0]=x7651;
j14eval[1]=((IKabs(((((-1.0)*x7650*x7653))+((sj16*x7652)))))+(IKabs((((cj15*sj16*x7653))+((cj15*cj16*x7652))+((cj10*r22*sj15))))));
j14eval[2]=IKsign(x7651);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x7654=(r12*r22);
IkReal x7655=cj15*cj15;
IkReal x7656=(r10*r20);
IkReal x7657=(x7655*x7656);
IkReal x7658=cj16*cj16;
IkReal x7659=(r10*r21);
IkReal x7660=((1.0)*cj16*sj16);
IkReal x7661=(r11*r20);
IkReal x7662=(cj15*cj16);
IkReal x7663=(r12*sj15);
IkReal x7664=(cj15*sj16);
IkReal x7665=(r11*r21*x7658);
IkReal x7666=(cj16*sj16*x7655);
IkReal x7667=((((-1.0)*x7660*x7661))+((cj15*cj16*r21*x7663))+((x7655*x7665))+((r11*r22*sj15*x7662))+((cj15*r20*sj16*x7663))+(((-1.0)*x7659*x7660))+x7657+x7654+(((-1.0)*x7665))+((x7661*x7666))+((x7659*x7666))+(((-1.0)*x7657*x7658))+(((-1.0)*x7654*x7655))+((r10*r22*sj15*x7664))+((r11*r21))+((x7656*x7658)));
IkReal x7668=(cj10*r21);
IkReal x7669=(cj10*r20);
j14eval[0]=x7667;
j14eval[1]=IKsign(x7667);
j14eval[2]=((IKabs(((((-1.0)*cj16*x7669))+((sj16*x7668)))))+(IKabs((((x7664*x7669))+((x7662*x7668))+((cj10*((r22*sj15))))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x7670=(r01*r21);
IkReal x7671=((1.0)*x7670);
IkReal x7672=(r02*r22);
IkReal x7673=(cj16*sj16);
IkReal x7674=(r00*r21);
IkReal x7675=(r01*r20);
IkReal x7676=cj15*cj15;
IkReal x7677=cj16*cj16;
IkReal x7678=((1.0)*r00*r20);
IkReal x7679=((1.0)*cj15*sj16);
IkReal x7680=(x7676*x7677);
IkReal x7681=((1.0)*cj16*sj16*x7676);
IkReal x7682=((((-1.0)*cj15*cj16*r02*r21*sj15))+(((-1.0)*r02*r20*sj15*x7679))+(((-1.0)*x7674*x7681))+((x7673*x7675))+((x7673*x7674))+(((-1.0)*x7677*x7678))+(((-1.0)*r00*r22*sj15*x7679))+(((-1.0)*x7672))+(((-1.0)*x7671))+(((-1.0)*x7676*x7678))+(((-1.0)*cj15*cj16*r01*r22*sj15))+((r00*r20*x7680))+((x7670*x7677))+(((-1.0)*x7675*x7681))+((x7672*x7676))+(((-1.0)*x7671*x7680)));
IkReal x7683=(cj10*r21);
IkReal x7684=(cj10*r20);
j14eval[0]=x7682;
j14eval[1]=IKsign(x7682);
j14eval[2]=((IKabs((((cj15*cj16*x7683))+((cj10*((r22*sj15))))+((cj15*sj16*x7684)))))+(IKabs((((sj16*x7683))+(((-1.0)*cj16*x7684))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7685=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x7685;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x7685);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7686=((1.0)*sj16);
IkReal x7687=((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x7686))+((cj15*r22)));
j14eval[0]=x7687;
j14eval[1]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs(((((-1.0)*r11*x7686))+((cj16*r10))))));
j14eval[2]=IKsign(x7687);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7688=r11*r11;
IkReal x7689=r12*r12;
IkReal x7690=(r11*sj16);
IkReal x7691=((2.0)*cj16*r10*x7690);
IkReal x7692=cj15*cj15;
IkReal x7693=r10*r10;
IkReal x7694=(x7692*x7693);
IkReal x7695=cj16*cj16;
IkReal x7696=((2.0)*r12*sj15);
IkReal x7697=(cj15*cj16*r11);
IkReal x7698=(cj15*r10*sj16);
IkReal x7699=(x7688*x7695);
IkReal x7700=((((-1.0)*x7689*x7692))+(((-1.0)*x7699))+((x7696*x7698))+((x7693*x7695))+(((-1.0)*x7694*x7695))+(((-1.0)*x7691))+x7689+x7688+((x7691*x7692))+((x7696*x7697))+((x7692*x7699))+x7694);
j14eval[0]=x7700;
j14eval[1]=IKsign(x7700);
j14eval[2]=((IKabs((((r12*sj15))+x7698+x7697)))+(IKabs(((((-1.0)*x7690))+((cj16*r10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7701=(r11*sj16);
IkReal x7702=(cj15*cj16*r11);
IkReal x7703=(cj15*r10*sj16);
IkReal x7704=r11*r11;
IkReal x7705=r12*r12;
IkReal x7706=((2.0)*cj16*r10*x7701);
IkReal x7707=cj15*cj15;
IkReal x7708=r10*r10;
IkReal x7709=(x7707*x7708);
IkReal x7710=cj16*cj16;
IkReal x7711=((2.0)*r12*sj15);
IkReal x7712=(x7704*x7710);
CheckValue<IkReal> x7713=IKPowWithIntegerCheck(IKsign((((x7706*x7707))+((x7703*x7711))+(((-1.0)*x7709*x7710))+(((-1.0)*x7712))+((x7707*x7712))+(((-1.0)*x7706))+((x7702*x7711))+((x7708*x7710))+(((-1.0)*x7705*x7707))+x7709+x7704+x7705)),-1);
if(!x7713.valid){
continue;
}
CheckValue<IkReal> x7714 = IKatan2WithCheck(IkReal(((((-1.0)*x7701))+((cj16*r10)))),IkReal((((r12*sj15))+x7702+x7703)),IKFAST_ATAN2_MAGTHRESH);
if(!x7714.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7713.value)))+(x7714.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7715=IKcos(j14);
IkReal x7716=(cj16*x7715);
IkReal x7717=((1.0)*sj16*x7715);
IkReal x7718=(r22*sj15);
IkReal x7719=IKsin(j14);
IkReal x7720=((1.0)*x7719);
IkReal x7721=(cj15*r21);
IkReal x7722=((1.0)*cj16*x7719);
IkReal x7723=(cj15*r20);
IkReal x7724=((1.0)*sj16*x7719);
IkReal x7725=(r12*sj15);
IkReal x7726=(cj15*r11);
IkReal x7727=(cj15*r10);
IkReal x7728=(sj16*x7719);
IkReal x7729=((1.0)*x7715);
IkReal x7730=((1.0)*cj16*x7715);
IkReal x7731=(r02*sj15);
IkReal x7732=(cj15*r01);
IkReal x7733=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x7717))+(((-1.0)*x7723*x7724))+(((-1.0)*x7721*x7722))+((r20*x7716))+(((-1.0)*x7718*x7720)));
evalcond[1]=((((-1.0)*x7720*x7725))+(((-1.0)*r11*x7717))+((r10*x7716))+(((-1.0)*x7722*x7726))+(((-1.0)*x7724*x7727)));
evalcond[2]=((((-1.0)*r20*x7722))+(((-1.0)*x7718*x7729))+(((-1.0)*x7717*x7723))+((r21*x7728))+(((-1.0)*x7721*x7730)));
evalcond[3]=((((-1.0)*x7717*x7733))+(((-1.0)*r00*x7722))+((r01*x7728))+(((-1.0)*x7729*x7731))+(((-1.0)*x7730*x7732)));
evalcond[4]=((-1.0)+(((-1.0)*x7722*x7732))+((r00*x7716))+(((-1.0)*x7724*x7733))+(((-1.0)*r01*x7717))+(((-1.0)*x7720*x7731)));
evalcond[5]=((1.0)+(((-1.0)*x7717*x7727))+(((-1.0)*x7726*x7730))+((r11*x7728))+(((-1.0)*x7725*x7729))+(((-1.0)*r10*x7722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7734=((1.0)*sj16);
CheckValue<IkReal> x7735=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x7734))+((cj15*r22)))),-1);
if(!x7735.valid){
continue;
}
CheckValue<IkReal> x7736 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7734))+((cj16*r10)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7736.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7735.value)))+(x7736.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7737=IKcos(j14);
IkReal x7738=(cj16*x7737);
IkReal x7739=((1.0)*sj16*x7737);
IkReal x7740=(r22*sj15);
IkReal x7741=IKsin(j14);
IkReal x7742=((1.0)*x7741);
IkReal x7743=(cj15*r21);
IkReal x7744=((1.0)*cj16*x7741);
IkReal x7745=(cj15*r20);
IkReal x7746=((1.0)*sj16*x7741);
IkReal x7747=(r12*sj15);
IkReal x7748=(cj15*r11);
IkReal x7749=(cj15*r10);
IkReal x7750=(sj16*x7741);
IkReal x7751=((1.0)*x7737);
IkReal x7752=((1.0)*cj16*x7737);
IkReal x7753=(r02*sj15);
IkReal x7754=(cj15*r01);
IkReal x7755=(cj15*r00);
evalcond[0]=(((r20*x7738))+(((-1.0)*r21*x7739))+(((-1.0)*x7745*x7746))+(((-1.0)*x7740*x7742))+(((-1.0)*x7743*x7744)));
evalcond[1]=(((r10*x7738))+(((-1.0)*r11*x7739))+(((-1.0)*x7746*x7749))+(((-1.0)*x7742*x7747))+(((-1.0)*x7744*x7748)));
evalcond[2]=((((-1.0)*x7740*x7751))+(((-1.0)*r20*x7744))+(((-1.0)*x7739*x7745))+((r21*x7750))+(((-1.0)*x7743*x7752)));
evalcond[3]=((((-1.0)*x7752*x7754))+(((-1.0)*x7751*x7753))+(((-1.0)*r00*x7744))+((r01*x7750))+(((-1.0)*x7739*x7755)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x7739))+(((-1.0)*x7742*x7753))+(((-1.0)*x7744*x7754))+((r00*x7738))+(((-1.0)*x7746*x7755)));
evalcond[5]=((1.0)+(((-1.0)*r10*x7744))+(((-1.0)*x7748*x7752))+(((-1.0)*x7739*x7749))+(((-1.0)*x7747*x7751))+((r11*x7750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7756 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7756.valid){
continue;
}
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x7757.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7756.value)+(((1.5707963267949)*(x7757.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7758=IKcos(j14);
IkReal x7759=(cj16*x7758);
IkReal x7760=((1.0)*sj16*x7758);
IkReal x7761=(r22*sj15);
IkReal x7762=IKsin(j14);
IkReal x7763=((1.0)*x7762);
IkReal x7764=(cj15*r21);
IkReal x7765=((1.0)*cj16*x7762);
IkReal x7766=(cj15*r20);
IkReal x7767=((1.0)*sj16*x7762);
IkReal x7768=(r12*sj15);
IkReal x7769=(cj15*r11);
IkReal x7770=(cj15*r10);
IkReal x7771=(sj16*x7762);
IkReal x7772=((1.0)*x7758);
IkReal x7773=((1.0)*cj16*x7758);
IkReal x7774=(r02*sj15);
IkReal x7775=(cj15*r01);
IkReal x7776=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x7760))+(((-1.0)*x7766*x7767))+((r20*x7759))+(((-1.0)*x7761*x7763))+(((-1.0)*x7764*x7765)));
evalcond[1]=(((r10*x7759))+(((-1.0)*x7765*x7769))+(((-1.0)*r11*x7760))+(((-1.0)*x7763*x7768))+(((-1.0)*x7767*x7770)));
evalcond[2]=((((-1.0)*r20*x7765))+((r21*x7771))+(((-1.0)*x7761*x7772))+(((-1.0)*x7764*x7773))+(((-1.0)*x7760*x7766)));
evalcond[3]=((((-1.0)*r00*x7765))+((r01*x7771))+(((-1.0)*x7772*x7774))+(((-1.0)*x7760*x7776))+(((-1.0)*x7773*x7775)));
evalcond[4]=((-1.0)+(((-1.0)*x7765*x7775))+(((-1.0)*x7767*x7776))+(((-1.0)*r01*x7760))+(((-1.0)*x7763*x7774))+((r00*x7759)));
evalcond[5]=((1.0)+((r11*x7771))+(((-1.0)*r10*x7765))+(((-1.0)*x7769*x7773))+(((-1.0)*x7768*x7772))+(((-1.0)*x7760*x7770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7777=((1.0)*cj15);
IkReal x7778=(((cj16*r11*sj15))+(((-1.0)*r12*x7777))+((r10*sj15*sj16)));
j14eval[0]=x7778;
j14eval[1]=((IKabs(((((-1.0)*r20*sj16*x7777))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*cj16*r21*x7777)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x7778);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7779=((1.0)*cj16);
IkReal x7780=((1.0)*sj15);
IkReal x7781=((((-1.0)*r20*sj16*x7780))+(((-1.0)*r21*sj15*x7779))+((cj15*r22)));
j14eval[0]=x7781;
j14eval[1]=((IKabs((((r11*sj16))+(((-1.0)*r10*x7779)))))+(IKabs(((((-1.0)*cj15*r11*x7779))+(((-1.0)*r12*x7780))+(((-1.0)*(1.0)*cj15*r10*sj16))))));
j14eval[2]=IKsign(x7781);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7782=r11*r11;
IkReal x7783=((1.0)*x7782);
IkReal x7784=r12*r12;
IkReal x7785=(r11*sj16);
IkReal x7786=((2.0)*cj16*r10*x7785);
IkReal x7787=cj15*cj15;
IkReal x7788=cj16*cj16;
IkReal x7789=((2.0)*r12*sj15);
IkReal x7790=(cj15*cj16*r11);
IkReal x7791=(cj15*r10*sj16);
IkReal x7792=r10*r10;
IkReal x7793=((1.0)*x7792);
IkReal x7794=(x7787*x7788);
IkReal x7795=((((-1.0)*x7783))+(((-1.0)*x7786*x7787))+(((-1.0)*x7783*x7794))+x7786+(((-1.0)*x7789*x7790))+((x7784*x7787))+((x7782*x7788))+(((-1.0)*x7787*x7793))+(((-1.0)*x7788*x7793))+(((-1.0)*x7789*x7791))+((x7792*x7794))+(((-1.0)*x7784)));
j14eval[0]=x7795;
j14eval[1]=((IKabs((((cj16*r10))+(((-1.0)*x7785)))))+(IKabs((((r12*sj15))+x7790+x7791))));
j14eval[2]=IKsign(x7795);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7796=(r11*sj16);
IkReal x7797=(cj15*cj16*r11);
IkReal x7798=(cj15*r10*sj16);
IkReal x7799=r11*r11;
IkReal x7800=((1.0)*x7799);
IkReal x7801=r12*r12;
IkReal x7802=((2.0)*cj16*r10*x7796);
IkReal x7803=cj15*cj15;
IkReal x7804=cj16*cj16;
IkReal x7805=((2.0)*r12*sj15);
IkReal x7806=r10*r10;
IkReal x7807=((1.0)*x7806);
IkReal x7808=(x7803*x7804);
CheckValue<IkReal> x7809=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7802*x7803))+(((-1.0)*x7797*x7805))+(((-1.0)*x7798*x7805))+(((-1.0)*x7800))+(((-1.0)*x7803*x7807))+(((-1.0)*x7800*x7808))+((x7806*x7808))+((x7799*x7804))+(((-1.0)*x7801))+((x7801*x7803))+(((-1.0)*x7804*x7807))+x7802)),-1);
if(!x7809.valid){
continue;
}
CheckValue<IkReal> x7810 = IKatan2WithCheck(IkReal(((((-1.0)*x7796))+((cj16*r10)))),IkReal((((r12*sj15))+x7798+x7797)),IKFAST_ATAN2_MAGTHRESH);
if(!x7810.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7809.value)))+(x7810.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7811=IKcos(j14);
IkReal x7812=(cj16*x7811);
IkReal x7813=((1.0)*sj16*x7811);
IkReal x7814=(r22*sj15);
IkReal x7815=IKsin(j14);
IkReal x7816=((1.0)*x7815);
IkReal x7817=(cj15*r21);
IkReal x7818=((1.0)*cj16*x7815);
IkReal x7819=(cj15*r20);
IkReal x7820=((1.0)*sj16*x7815);
IkReal x7821=(r12*sj15);
IkReal x7822=(cj15*r11);
IkReal x7823=(cj15*r10);
IkReal x7824=(sj16*x7815);
IkReal x7825=((1.0)*x7811);
IkReal x7826=((1.0)*cj16*x7811);
IkReal x7827=(r02*sj15);
IkReal x7828=(cj15*r01);
IkReal x7829=(cj15*r00);
evalcond[0]=((((-1.0)*x7817*x7818))+((r20*x7812))+(((-1.0)*r21*x7813))+(((-1.0)*x7819*x7820))+(((-1.0)*x7814*x7816)));
evalcond[1]=((((-1.0)*x7818*x7822))+(((-1.0)*x7820*x7823))+(((-1.0)*r11*x7813))+(((-1.0)*x7816*x7821))+((r10*x7812)));
evalcond[2]=(((r21*x7824))+(((-1.0)*x7817*x7826))+(((-1.0)*r20*x7818))+(((-1.0)*x7814*x7825))+(((-1.0)*x7813*x7819)));
evalcond[3]=(((r01*x7824))+(((-1.0)*x7826*x7828))+(((-1.0)*x7825*x7827))+(((-1.0)*x7813*x7829))+(((-1.0)*r00*x7818)));
evalcond[4]=((1.0)+((r00*x7812))+(((-1.0)*x7820*x7829))+(((-1.0)*r01*x7813))+(((-1.0)*x7816*x7827))+(((-1.0)*x7818*x7828)));
evalcond[5]=((-1.0)+((r11*x7824))+(((-1.0)*x7822*x7826))+(((-1.0)*r10*x7818))+(((-1.0)*x7813*x7823))+(((-1.0)*x7821*x7825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7830=((1.0)*cj16);
IkReal x7831=((1.0)*sj15);
CheckValue<IkReal> x7832 = IKatan2WithCheck(IkReal((((r11*sj16))+(((-1.0)*r10*x7830)))),IkReal(((((-1.0)*cj15*r11*x7830))+(((-1.0)*r12*x7831))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7832.valid){
continue;
}
CheckValue<IkReal> x7833=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x7831))+(((-1.0)*r21*sj15*x7830))+((cj15*r22)))),-1);
if(!x7833.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7832.value)+(((1.5707963267949)*(x7833.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7834=IKcos(j14);
IkReal x7835=(cj16*x7834);
IkReal x7836=((1.0)*sj16*x7834);
IkReal x7837=(r22*sj15);
IkReal x7838=IKsin(j14);
IkReal x7839=((1.0)*x7838);
IkReal x7840=(cj15*r21);
IkReal x7841=((1.0)*cj16*x7838);
IkReal x7842=(cj15*r20);
IkReal x7843=((1.0)*sj16*x7838);
IkReal x7844=(r12*sj15);
IkReal x7845=(cj15*r11);
IkReal x7846=(cj15*r10);
IkReal x7847=(sj16*x7838);
IkReal x7848=((1.0)*x7834);
IkReal x7849=((1.0)*cj16*x7834);
IkReal x7850=(r02*sj15);
IkReal x7851=(cj15*r01);
IkReal x7852=(cj15*r00);
evalcond[0]=((((-1.0)*x7840*x7841))+(((-1.0)*r21*x7836))+((r20*x7835))+(((-1.0)*x7842*x7843))+(((-1.0)*x7837*x7839)));
evalcond[1]=((((-1.0)*x7839*x7844))+(((-1.0)*x7843*x7846))+((r10*x7835))+(((-1.0)*x7841*x7845))+(((-1.0)*r11*x7836)));
evalcond[2]=((((-1.0)*x7837*x7848))+(((-1.0)*x7836*x7842))+(((-1.0)*r20*x7841))+(((-1.0)*x7840*x7849))+((r21*x7847)));
evalcond[3]=((((-1.0)*r00*x7841))+(((-1.0)*x7849*x7851))+(((-1.0)*x7848*x7850))+((r01*x7847))+(((-1.0)*x7836*x7852)));
evalcond[4]=((1.0)+(((-1.0)*x7839*x7850))+(((-1.0)*x7843*x7852))+(((-1.0)*x7841*x7851))+(((-1.0)*r01*x7836))+((r00*x7835)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x7841))+((r11*x7847))+(((-1.0)*x7844*x7848))+(((-1.0)*x7845*x7849))+(((-1.0)*x7836*x7846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7853=((1.0)*cj15);
CheckValue<IkReal> x7854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x7853))+((cj16*r11*sj15))+((r10*sj15*sj16)))),-1);
if(!x7854.valid){
continue;
}
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*cj16*r21*x7853))+(((-1.0)*r20*sj16*x7853))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7854.value)))+(x7855.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7856=IKcos(j14);
IkReal x7857=(cj16*x7856);
IkReal x7858=((1.0)*sj16*x7856);
IkReal x7859=(r22*sj15);
IkReal x7860=IKsin(j14);
IkReal x7861=((1.0)*x7860);
IkReal x7862=(cj15*r21);
IkReal x7863=((1.0)*cj16*x7860);
IkReal x7864=(cj15*r20);
IkReal x7865=((1.0)*sj16*x7860);
IkReal x7866=(r12*sj15);
IkReal x7867=(cj15*r11);
IkReal x7868=(cj15*r10);
IkReal x7869=(sj16*x7860);
IkReal x7870=((1.0)*x7856);
IkReal x7871=((1.0)*cj16*x7856);
IkReal x7872=(r02*sj15);
IkReal x7873=(cj15*r01);
IkReal x7874=(cj15*r00);
evalcond[0]=((((-1.0)*x7859*x7861))+(((-1.0)*x7862*x7863))+(((-1.0)*r21*x7858))+((r20*x7857))+(((-1.0)*x7864*x7865)));
evalcond[1]=(((r10*x7857))+(((-1.0)*r11*x7858))+(((-1.0)*x7865*x7868))+(((-1.0)*x7861*x7866))+(((-1.0)*x7863*x7867)));
evalcond[2]=(((r21*x7869))+(((-1.0)*x7862*x7871))+(((-1.0)*x7858*x7864))+(((-1.0)*x7859*x7870))+(((-1.0)*r20*x7863)));
evalcond[3]=((((-1.0)*x7871*x7873))+(((-1.0)*r00*x7863))+(((-1.0)*x7858*x7874))+(((-1.0)*x7870*x7872))+((r01*x7869)));
evalcond[4]=((1.0)+(((-1.0)*r01*x7858))+((r00*x7857))+(((-1.0)*x7865*x7874))+(((-1.0)*x7863*x7873))+(((-1.0)*x7861*x7872)));
evalcond[5]=((-1.0)+(((-1.0)*x7867*x7871))+(((-1.0)*r10*x7863))+(((-1.0)*x7858*x7868))+((r11*x7869))+(((-1.0)*x7866*x7870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7875=(r21*sj16);
IkReal x7876=(cj16*r20);
IkReal x7877=(cj16*r21);
IkReal x7878=((1.0)*cj10*cj15);
IkReal x7879=(r20*sj16);
IkReal x7880=(r01*r21);
IkReal x7881=((1.0)*x7880);
IkReal x7882=(cj16*r00*x7875);
IkReal x7883=(r01*sj16*x7876);
IkReal x7884=cj15*cj15;
IkReal x7885=cj16*cj16;
IkReal x7886=((1.0)*r00*r20);
IkReal x7887=((1.0)*cj15*r22*sj15);
IkReal x7888=((1.0)*cj15*r02*sj15);
IkReal x7889=(x7884*x7885);
IkReal x7890=((1.0)*x7884);
CheckValue<IkReal> x7891=IKPowWithIntegerCheck(IKsign((((x7880*x7885))+(((-1.0)*x7877*x7888))+x7883+x7882+((r02*r22*x7884))+(((-1.0)*x7881*x7889))+(((-1.0)*x7882*x7890))+(((-1.0)*x7883*x7890))+(((-1.0)*r00*sj16*x7887))+(((-1.0)*x7884*x7886))+((r00*r20*x7889))+(((-1.0)*x7879*x7888))+(((-1.0)*cj16*r01*x7887))+(((-1.0)*r02*r22))+(((-1.0)*x7885*x7886))+(((-1.0)*x7881)))),-1);
if(!x7891.valid){
continue;
}
CheckValue<IkReal> x7892 = IKatan2WithCheck(IkReal((((cj10*x7875))+(((-1.0)*cj10*x7876)))),IkReal(((((-1.0)*x7878*x7879))+(((-1.0)*cj10*r22*sj15))+(((-1.0)*x7877*x7878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7892.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7891.value)))+(x7892.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7893=IKcos(j14);
IkReal x7894=(cj16*x7893);
IkReal x7895=((1.0)*sj16*x7893);
IkReal x7896=(r22*sj15);
IkReal x7897=IKsin(j14);
IkReal x7898=((1.0)*x7897);
IkReal x7899=(cj15*r21);
IkReal x7900=((1.0)*cj16*x7897);
IkReal x7901=(cj15*r20);
IkReal x7902=((1.0)*sj16*x7897);
IkReal x7903=(sj16*x7897);
IkReal x7904=((1.0)*x7893);
IkReal x7905=((1.0)*cj16*x7893);
IkReal x7906=(r12*sj15);
IkReal x7907=(cj15*r11);
IkReal x7908=(cj15*r10);
IkReal x7909=(r02*sj15);
IkReal x7910=(cj15*r01);
IkReal x7911=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x7895))+(((-1.0)*x7899*x7900))+((r20*x7894))+(((-1.0)*x7901*x7902))+(((-1.0)*x7896*x7898)));
evalcond[1]=((((-1.0)*x7896*x7904))+(((-1.0)*x7899*x7905))+(((-1.0)*x7895*x7901))+((r21*x7903))+(((-1.0)*r20*x7900)));
evalcond[2]=(((r10*x7894))+(((-1.0)*x7900*x7907))+cj10+(((-1.0)*x7898*x7906))+(((-1.0)*x7902*x7908))+(((-1.0)*r11*x7895)));
evalcond[3]=((((-1.0)*x7895*x7911))+(((-1.0)*r00*x7900))+((r01*x7903))+(((-1.0)*x7904*x7909))+(((-1.0)*x7905*x7910))+cj10);
evalcond[4]=((((-1.0)*x7905*x7907))+(((-1.0)*x7904*x7906))+(((-1.0)*r10*x7900))+sj10+(((-1.0)*x7895*x7908))+((r11*x7903)));
evalcond[5]=(((r00*x7894))+(((-1.0)*x7902*x7911))+(((-1.0)*x7900*x7910))+(((-1.0)*(1.0)*sj10))+(((-1.0)*x7898*x7909))+(((-1.0)*r01*x7895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7912=(cj10*r21);
IkReal x7913=(cj15*cj16);
IkReal x7914=(cj10*r20);
IkReal x7915=(cj15*sj16);
IkReal x7916=(r12*r22);
IkReal x7917=cj15*cj15;
IkReal x7918=(r10*r20);
IkReal x7919=(x7917*x7918);
IkReal x7920=cj16*cj16;
IkReal x7921=(r10*r21);
IkReal x7922=((1.0)*cj16*sj16);
IkReal x7923=(r11*r20);
IkReal x7924=(r12*sj15);
IkReal x7925=(r11*r21*x7920);
IkReal x7926=(cj16*sj16*x7917);
CheckValue<IkReal> x7927 = IKatan2WithCheck(IkReal((((x7914*x7915))+((cj10*((r22*sj15))))+((x7912*x7913)))),IkReal(((((-1.0)*cj16*x7914))+((sj16*x7912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7927.valid){
continue;
}
CheckValue<IkReal> x7928=IKPowWithIntegerCheck(IKsign((((cj15*cj16*r21*x7924))+(((-1.0)*x7919*x7920))+((cj15*r20*sj16*x7924))+(((-1.0)*x7916*x7917))+((x7921*x7926))+((x7918*x7920))+(((-1.0)*x7922*x7923))+((r11*r22*sj15*x7913))+x7916+x7919+(((-1.0)*x7925))+((r11*r21))+(((-1.0)*x7921*x7922))+((x7923*x7926))+((x7917*x7925))+((r10*r22*sj15*x7915)))),-1);
if(!x7928.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7927.value)+(((1.5707963267949)*(x7928.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7929=IKcos(j14);
IkReal x7930=(cj16*x7929);
IkReal x7931=((1.0)*sj16*x7929);
IkReal x7932=(r22*sj15);
IkReal x7933=IKsin(j14);
IkReal x7934=((1.0)*x7933);
IkReal x7935=(cj15*r21);
IkReal x7936=((1.0)*cj16*x7933);
IkReal x7937=(cj15*r20);
IkReal x7938=((1.0)*sj16*x7933);
IkReal x7939=(sj16*x7933);
IkReal x7940=((1.0)*x7929);
IkReal x7941=((1.0)*cj16*x7929);
IkReal x7942=(r12*sj15);
IkReal x7943=(cj15*r11);
IkReal x7944=(cj15*r10);
IkReal x7945=(r02*sj15);
IkReal x7946=(cj15*r01);
IkReal x7947=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x7931))+(((-1.0)*x7935*x7936))+(((-1.0)*x7932*x7934))+((r20*x7930))+(((-1.0)*x7937*x7938)));
evalcond[1]=((((-1.0)*x7932*x7940))+(((-1.0)*r20*x7936))+(((-1.0)*x7931*x7937))+((r21*x7939))+(((-1.0)*x7935*x7941)));
evalcond[2]=((((-1.0)*r11*x7931))+cj10+(((-1.0)*x7938*x7944))+((r10*x7930))+(((-1.0)*x7936*x7943))+(((-1.0)*x7934*x7942)));
evalcond[3]=((((-1.0)*x7940*x7945))+((r01*x7939))+(((-1.0)*x7941*x7946))+cj10+(((-1.0)*r00*x7936))+(((-1.0)*x7931*x7947)));
evalcond[4]=((((-1.0)*r10*x7936))+(((-1.0)*x7941*x7943))+(((-1.0)*x7940*x7942))+((r11*x7939))+sj10+(((-1.0)*x7931*x7944)));
evalcond[5]=((((-1.0)*r01*x7931))+((r00*x7930))+(((-1.0)*x7938*x7947))+(((-1.0)*x7934*x7945))+(((-1.0)*(1.0)*sj10))+(((-1.0)*x7936*x7946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7948=((1.0)*sj15);
IkReal x7949=(cj10*r21);
IkReal x7950=((1.0)*cj10*r20);
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal((((sj16*x7949))+(((-1.0)*cj16*x7950)))),IkReal(((((-1.0)*cj10*r22*sj15))+(((-1.0)*cj15*cj16*x7949))+(((-1.0)*cj15*sj16*x7950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
CheckValue<IkReal> x7952=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x7948))+((cj15*r02))+(((-1.0)*r00*sj16*x7948)))),-1);
if(!x7952.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7951.value)+(((1.5707963267949)*(x7952.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7953=IKcos(j14);
IkReal x7954=(cj16*x7953);
IkReal x7955=((1.0)*sj16*x7953);
IkReal x7956=(r22*sj15);
IkReal x7957=IKsin(j14);
IkReal x7958=((1.0)*x7957);
IkReal x7959=(cj15*r21);
IkReal x7960=((1.0)*cj16*x7957);
IkReal x7961=(cj15*r20);
IkReal x7962=((1.0)*sj16*x7957);
IkReal x7963=(sj16*x7957);
IkReal x7964=((1.0)*x7953);
IkReal x7965=((1.0)*cj16*x7953);
IkReal x7966=(r12*sj15);
IkReal x7967=(cj15*r11);
IkReal x7968=(cj15*r10);
IkReal x7969=(r02*sj15);
IkReal x7970=(cj15*r01);
IkReal x7971=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x7955))+(((-1.0)*x7956*x7958))+(((-1.0)*x7959*x7960))+(((-1.0)*x7961*x7962))+((r20*x7954)));
evalcond[1]=((((-1.0)*r20*x7960))+(((-1.0)*x7959*x7965))+((r21*x7963))+(((-1.0)*x7955*x7961))+(((-1.0)*x7956*x7964)));
evalcond[2]=(((r10*x7954))+(((-1.0)*x7962*x7968))+(((-1.0)*x7958*x7966))+cj10+(((-1.0)*x7960*x7967))+(((-1.0)*r11*x7955)));
evalcond[3]=((((-1.0)*x7955*x7971))+cj10+(((-1.0)*x7964*x7969))+(((-1.0)*x7965*x7970))+((r01*x7963))+(((-1.0)*r00*x7960)));
evalcond[4]=((((-1.0)*r10*x7960))+sj10+(((-1.0)*x7964*x7966))+(((-1.0)*x7955*x7968))+((r11*x7963))+(((-1.0)*x7965*x7967)));
evalcond[5]=((((-1.0)*x7960*x7970))+(((-1.0)*r01*x7955))+(((-1.0)*x7962*x7971))+(((-1.0)*x7958*x7969))+(((-1.0)*(1.0)*sj10))+((r00*x7954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7972=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x7973=(r21*sj10);
IkReal x7974=(r20*sj10);
j14eval[0]=x7972;
j14eval[1]=((IKabs((((r22*sj10*sj15))+((cj15*sj16*x7974))+((cj15*cj16*x7973)))))+(IKabs((((sj16*x7973))+(((-1.0)*cj16*x7974))))));
j14eval[2]=IKsign(x7972);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7975=(r02*r22);
IkReal x7976=cj15*cj15;
IkReal x7977=(r00*r20);
IkReal x7978=(x7976*x7977);
IkReal x7979=cj16*cj16;
IkReal x7980=(r00*r21);
IkReal x7981=((1.0)*cj16*sj16);
IkReal x7982=(r01*r20);
IkReal x7983=(cj15*cj16);
IkReal x7984=(r02*sj15);
IkReal x7985=(cj15*sj16);
IkReal x7986=(r01*r21*x7979);
IkReal x7987=(cj16*sj16*x7976);
IkReal x7988=(((x7982*x7987))+((x7977*x7979))+(((-1.0)*x7980*x7981))+((x7976*x7986))+(((-1.0)*x7975*x7976))+(((-1.0)*x7986))+((r01*r22*sj15*x7983))+((cj15*cj16*r21*x7984))+(((-1.0)*x7978*x7979))+(((-1.0)*x7981*x7982))+((r01*r21))+((r00*r22*sj15*x7985))+((cj15*r20*sj16*x7984))+x7978+x7975+((x7980*x7987)));
IkReal x7989=(r21*sj10);
IkReal x7990=(r20*sj10);
j14eval[0]=x7988;
j14eval[1]=IKsign(x7988);
j14eval[2]=((IKabs((((x7983*x7989))+((sj10*((r22*sj15))))+((x7985*x7990)))))+(IKabs(((((-1.0)*cj16*x7990))+((sj16*x7989))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7991=(r01*r21);
IkReal x7992=((1.0)*x7991);
IkReal x7993=(r02*r22);
IkReal x7994=(cj16*sj16);
IkReal x7995=(r00*r21);
IkReal x7996=(r01*r20);
IkReal x7997=cj15*cj15;
IkReal x7998=cj16*cj16;
IkReal x7999=((1.0)*r00*r20);
IkReal x8000=((1.0)*cj15*sj16);
IkReal x8001=(x7997*x7998);
IkReal x8002=((1.0)*cj16*sj16*x7997);
IkReal x8003=((((-1.0)*x7997*x7999))+(((-1.0)*cj15*cj16*r02*r21*sj15))+(((-1.0)*x7998*x7999))+((x7994*x7995))+(((-1.0)*x7995*x8002))+(((-1.0)*x7996*x8002))+(((-1.0)*r02*r20*sj15*x8000))+(((-1.0)*x7993))+(((-1.0)*x7992*x8001))+(((-1.0)*r00*r22*sj15*x8000))+((x7994*x7996))+((x7991*x7998))+(((-1.0)*cj15*cj16*r01*r22*sj15))+((x7993*x7997))+((r00*r20*x8001))+(((-1.0)*x7992)));
IkReal x8004=(cj10*r21);
IkReal x8005=(cj10*r20);
j14eval[0]=x8003;
j14eval[1]=IKsign(x8003);
j14eval[2]=((IKabs((((cj10*((r22*sj15))))+((cj15*sj16*x8005))+((cj15*cj16*x8004)))))+(IKabs((((sj16*x8004))+(((-1.0)*cj16*x8005))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x8006=((1.0)*cj15);
IkReal x8007=((((-1.0)*r12*x8006))+((cj16*r11*sj15))+((r10*sj15*sj16)));
j14eval[0]=x8007;
j14eval[1]=((IKabs(((((-1.0)*r20*sj16*x8006))+(((-1.0)*cj16*r21*x8006))+(((-1.0)*(1.0)*r22*sj15)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x8007);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x8008=((1.0)*cj16);
IkReal x8009=((1.0)*sj15);
IkReal x8010=((((-1.0)*r20*sj16*x8009))+((cj15*r22))+(((-1.0)*r21*sj15*x8008)));
j14eval[0]=x8010;
j14eval[1]=((IKabs(((((-1.0)*r12*x8009))+(((-1.0)*cj15*r11*x8008))+(((-1.0)*(1.0)*cj15*r10*sj16)))))+(IKabs((((r11*sj16))+(((-1.0)*r10*x8008))))));
j14eval[2]=IKsign(x8010);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x8011=r11*r11;
IkReal x8012=r12*r12;
IkReal x8013=(r11*sj16);
IkReal x8014=((2.0)*cj16*r10*x8013);
IkReal x8015=cj15*cj15;
IkReal x8016=r10*r10;
IkReal x8017=(x8015*x8016);
IkReal x8018=cj16*cj16;
IkReal x8019=((2.0)*r12*sj15);
IkReal x8020=(cj15*cj16*r11);
IkReal x8021=(cj15*r10*sj16);
IkReal x8022=(x8011*x8018);
IkReal x8023=(((x8015*x8022))+(((-1.0)*x8014))+((x8014*x8015))+(((-1.0)*x8012*x8015))+x8017+x8011+x8012+((x8019*x8021))+(((-1.0)*x8017*x8018))+((x8016*x8018))+((x8019*x8020))+(((-1.0)*x8022)));
j14eval[0]=x8023;
j14eval[1]=IKsign(x8023);
j14eval[2]=((IKabs((((r12*sj15))+x8020+x8021)))+(IKabs((((cj16*r10))+(((-1.0)*x8013))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8024=(r11*sj16);
IkReal x8025=(cj15*cj16*r11);
IkReal x8026=(cj15*r10*sj16);
IkReal x8027=r11*r11;
IkReal x8028=r12*r12;
IkReal x8029=((2.0)*cj16*r10*x8024);
IkReal x8030=cj15*cj15;
IkReal x8031=r10*r10;
IkReal x8032=(x8030*x8031);
IkReal x8033=cj16*cj16;
IkReal x8034=((2.0)*r12*sj15);
IkReal x8035=(x8027*x8033);
CheckValue<IkReal> x8036 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x8024)))),IkReal((((r12*sj15))+x8025+x8026)),IKFAST_ATAN2_MAGTHRESH);
if(!x8036.valid){
continue;
}
CheckValue<IkReal> x8037=IKPowWithIntegerCheck(IKsign((x8032+((x8029*x8030))+x8027+x8028+((x8026*x8034))+(((-1.0)*x8032*x8033))+(((-1.0)*x8035))+((x8031*x8033))+((x8025*x8034))+(((-1.0)*x8029))+(((-1.0)*x8028*x8030))+((x8030*x8035)))),-1);
if(!x8037.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8036.value)+(((1.5707963267949)*(x8037.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8038=IKcos(j14);
IkReal x8039=(cj16*x8038);
IkReal x8040=((1.0)*sj16*x8038);
IkReal x8041=(r22*sj15);
IkReal x8042=IKsin(j14);
IkReal x8043=((1.0)*x8042);
IkReal x8044=(cj15*r21);
IkReal x8045=((1.0)*cj16*x8042);
IkReal x8046=(cj15*r20);
IkReal x8047=((1.0)*sj16*x8042);
IkReal x8048=(r12*sj15);
IkReal x8049=(cj15*r11);
IkReal x8050=(cj15*r10);
IkReal x8051=(sj16*x8042);
IkReal x8052=((1.0)*x8038);
IkReal x8053=((1.0)*cj16*x8038);
IkReal x8054=(r02*sj15);
IkReal x8055=(cj15*r01);
IkReal x8056=(cj15*r00);
evalcond[0]=((((-1.0)*x8044*x8045))+(((-1.0)*r21*x8040))+((r20*x8039))+(((-1.0)*x8046*x8047))+(((-1.0)*x8041*x8043)));
evalcond[1]=(((r10*x8039))+(((-1.0)*x8045*x8049))+(((-1.0)*r11*x8040))+(((-1.0)*x8043*x8048))+(((-1.0)*x8047*x8050)));
evalcond[2]=(((r21*x8051))+(((-1.0)*x8040*x8046))+(((-1.0)*x8044*x8053))+(((-1.0)*r20*x8045))+(((-1.0)*x8041*x8052)));
evalcond[3]=((((-1.0)*r00*x8045))+(((-1.0)*x8053*x8055))+((r01*x8051))+(((-1.0)*x8052*x8054))+(((-1.0)*x8040*x8056)));
evalcond[4]=((1.0)+(((-1.0)*x8043*x8054))+(((-1.0)*x8045*x8055))+((r00*x8039))+(((-1.0)*r01*x8040))+(((-1.0)*x8047*x8056)));
evalcond[5]=((1.0)+(((-1.0)*x8040*x8050))+(((-1.0)*x8048*x8052))+((r11*x8051))+(((-1.0)*r10*x8045))+(((-1.0)*x8049*x8053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8057=((1.0)*cj16);
IkReal x8058=((1.0)*sj15);
CheckValue<IkReal> x8059 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x8057))+((r11*sj16)))),IkReal(((((-1.0)*r12*x8058))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*cj15*r11*x8057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8059.valid){
continue;
}
CheckValue<IkReal> x8060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x8058))+((cj15*r22))+(((-1.0)*r21*sj15*x8057)))),-1);
if(!x8060.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8059.value)+(((1.5707963267949)*(x8060.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8061=IKcos(j14);
IkReal x8062=(cj16*x8061);
IkReal x8063=((1.0)*sj16*x8061);
IkReal x8064=(r22*sj15);
IkReal x8065=IKsin(j14);
IkReal x8066=((1.0)*x8065);
IkReal x8067=(cj15*r21);
IkReal x8068=((1.0)*cj16*x8065);
IkReal x8069=(cj15*r20);
IkReal x8070=((1.0)*sj16*x8065);
IkReal x8071=(r12*sj15);
IkReal x8072=(cj15*r11);
IkReal x8073=(cj15*r10);
IkReal x8074=(sj16*x8065);
IkReal x8075=((1.0)*x8061);
IkReal x8076=((1.0)*cj16*x8061);
IkReal x8077=(r02*sj15);
IkReal x8078=(cj15*r01);
IkReal x8079=(cj15*r00);
evalcond[0]=((((-1.0)*x8069*x8070))+((r20*x8062))+(((-1.0)*x8064*x8066))+(((-1.0)*r21*x8063))+(((-1.0)*x8067*x8068)));
evalcond[1]=(((r10*x8062))+(((-1.0)*x8066*x8071))+(((-1.0)*x8068*x8072))+(((-1.0)*r11*x8063))+(((-1.0)*x8070*x8073)));
evalcond[2]=((((-1.0)*x8063*x8069))+((r21*x8074))+(((-1.0)*r20*x8068))+(((-1.0)*x8064*x8075))+(((-1.0)*x8067*x8076)));
evalcond[3]=((((-1.0)*r00*x8068))+(((-1.0)*x8076*x8078))+(((-1.0)*x8075*x8077))+(((-1.0)*x8063*x8079))+((r01*x8074)));
evalcond[4]=((1.0)+(((-1.0)*x8066*x8077))+(((-1.0)*r01*x8063))+((r00*x8062))+(((-1.0)*x8068*x8078))+(((-1.0)*x8070*x8079)));
evalcond[5]=((1.0)+(((-1.0)*r10*x8068))+(((-1.0)*x8071*x8075))+(((-1.0)*x8072*x8076))+(((-1.0)*x8063*x8073))+((r11*x8074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8080=((1.0)*cj15);
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*cj16*r21*x8080))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*r20*sj16*x8080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
CheckValue<IkReal> x8082=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x8080)))),-1);
if(!x8082.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8081.value)+(((1.5707963267949)*(x8082.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8083=IKcos(j14);
IkReal x8084=(cj16*x8083);
IkReal x8085=((1.0)*sj16*x8083);
IkReal x8086=(r22*sj15);
IkReal x8087=IKsin(j14);
IkReal x8088=((1.0)*x8087);
IkReal x8089=(cj15*r21);
IkReal x8090=((1.0)*cj16*x8087);
IkReal x8091=(cj15*r20);
IkReal x8092=((1.0)*sj16*x8087);
IkReal x8093=(r12*sj15);
IkReal x8094=(cj15*r11);
IkReal x8095=(cj15*r10);
IkReal x8096=(sj16*x8087);
IkReal x8097=((1.0)*x8083);
IkReal x8098=((1.0)*cj16*x8083);
IkReal x8099=(r02*sj15);
IkReal x8100=(cj15*r01);
IkReal x8101=(cj15*r00);
evalcond[0]=((((-1.0)*x8091*x8092))+((r20*x8084))+(((-1.0)*r21*x8085))+(((-1.0)*x8086*x8088))+(((-1.0)*x8089*x8090)));
evalcond[1]=(((r10*x8084))+(((-1.0)*x8092*x8095))+(((-1.0)*x8090*x8094))+(((-1.0)*x8088*x8093))+(((-1.0)*r11*x8085)));
evalcond[2]=((((-1.0)*x8085*x8091))+(((-1.0)*x8089*x8098))+(((-1.0)*x8086*x8097))+(((-1.0)*r20*x8090))+((r21*x8096)));
evalcond[3]=((((-1.0)*r00*x8090))+((r01*x8096))+(((-1.0)*x8097*x8099))+(((-1.0)*x8085*x8101))+(((-1.0)*x8098*x8100)));
evalcond[4]=((1.0)+(((-1.0)*x8088*x8099))+(((-1.0)*x8092*x8101))+(((-1.0)*x8090*x8100))+(((-1.0)*r01*x8085))+((r00*x8084)));
evalcond[5]=((1.0)+(((-1.0)*x8093*x8097))+(((-1.0)*r10*x8090))+((r11*x8096))+(((-1.0)*x8094*x8098))+(((-1.0)*x8085*x8095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x8102=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x8102;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x8102);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x8103=((1.0)*sj16);
IkReal x8104=((((-1.0)*(1.0)*cj16*r21*sj15))+((cj15*r22))+(((-1.0)*r20*sj15*x8103)));
j14eval[0]=x8104;
j14eval[1]=((IKabs(((((-1.0)*r11*x8103))+((cj16*r10)))))+(IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15))))));
j14eval[2]=IKsign(x8104);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x8105=r11*r11;
IkReal x8106=((1.0)*x8105);
IkReal x8107=r12*r12;
IkReal x8108=(r11*sj16);
IkReal x8109=((2.0)*cj16*r10*x8108);
IkReal x8110=cj15*cj15;
IkReal x8111=cj16*cj16;
IkReal x8112=((2.0)*r12*sj15);
IkReal x8113=(cj15*cj16*r11);
IkReal x8114=(cj15*r10*sj16);
IkReal x8115=r10*r10;
IkReal x8116=((1.0)*x8115);
IkReal x8117=(x8110*x8111);
IkReal x8118=(((x8107*x8110))+(((-1.0)*x8110*x8116))+((x8105*x8111))+(((-1.0)*x8109*x8110))+(((-1.0)*x8106*x8117))+(((-1.0)*x8112*x8114))+(((-1.0)*x8107))+(((-1.0)*x8111*x8116))+(((-1.0)*x8106))+((x8115*x8117))+x8109+(((-1.0)*x8112*x8113)));
j14eval[0]=x8118;
j14eval[1]=((IKabs((((r12*sj15))+x8113+x8114)))+(IKabs((((cj16*r10))+(((-1.0)*x8108))))));
j14eval[2]=IKsign(x8118);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8119=(r11*sj16);
IkReal x8120=(cj15*cj16*r11);
IkReal x8121=(cj15*r10*sj16);
IkReal x8122=r11*r11;
IkReal x8123=((1.0)*x8122);
IkReal x8124=r12*r12;
IkReal x8125=((2.0)*cj16*r10*x8119);
IkReal x8126=cj15*cj15;
IkReal x8127=cj16*cj16;
IkReal x8128=((2.0)*r12*sj15);
IkReal x8129=r10*r10;
IkReal x8130=((1.0)*x8129);
IkReal x8131=(x8126*x8127);
CheckValue<IkReal> x8132=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8123*x8131))+(((-1.0)*x8120*x8128))+((x8129*x8131))+(((-1.0)*x8124))+(((-1.0)*x8123))+x8125+(((-1.0)*x8126*x8130))+(((-1.0)*x8125*x8126))+(((-1.0)*x8127*x8130))+((x8122*x8127))+(((-1.0)*x8121*x8128))+((x8124*x8126)))),-1);
if(!x8132.valid){
continue;
}
CheckValue<IkReal> x8133 = IKatan2WithCheck(IkReal(((((-1.0)*x8119))+((cj16*r10)))),IkReal((((r12*sj15))+x8121+x8120)),IKFAST_ATAN2_MAGTHRESH);
if(!x8133.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8132.value)))+(x8133.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8134=IKcos(j14);
IkReal x8135=(cj16*x8134);
IkReal x8136=((1.0)*sj16*x8134);
IkReal x8137=(r22*sj15);
IkReal x8138=IKsin(j14);
IkReal x8139=((1.0)*x8138);
IkReal x8140=(cj15*r21);
IkReal x8141=((1.0)*cj16*x8138);
IkReal x8142=(cj15*r20);
IkReal x8143=((1.0)*sj16*x8138);
IkReal x8144=(r12*sj15);
IkReal x8145=(cj15*r11);
IkReal x8146=(cj15*r10);
IkReal x8147=(sj16*x8138);
IkReal x8148=((1.0)*x8134);
IkReal x8149=((1.0)*cj16*x8134);
IkReal x8150=(r02*sj15);
IkReal x8151=(cj15*r01);
IkReal x8152=(cj15*r00);
evalcond[0]=((((-1.0)*x8142*x8143))+(((-1.0)*x8140*x8141))+(((-1.0)*x8137*x8139))+(((-1.0)*r21*x8136))+((r20*x8135)));
evalcond[1]=((((-1.0)*x8139*x8144))+((r10*x8135))+(((-1.0)*x8141*x8145))+(((-1.0)*x8143*x8146))+(((-1.0)*r11*x8136)));
evalcond[2]=((((-1.0)*x8137*x8148))+(((-1.0)*x8140*x8149))+(((-1.0)*x8136*x8142))+((r21*x8147))+(((-1.0)*r20*x8141)));
evalcond[3]=((((-1.0)*x8136*x8152))+(((-1.0)*x8148*x8150))+((r01*x8147))+(((-1.0)*r00*x8141))+(((-1.0)*x8149*x8151)));
evalcond[4]=((-1.0)+(((-1.0)*x8141*x8151))+(((-1.0)*x8139*x8150))+(((-1.0)*x8143*x8152))+(((-1.0)*r01*x8136))+((r00*x8135)));
evalcond[5]=((-1.0)+(((-1.0)*x8145*x8149))+(((-1.0)*r10*x8141))+((r11*x8147))+(((-1.0)*x8144*x8148))+(((-1.0)*x8136*x8146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8153=((1.0)*sj16);
CheckValue<IkReal> x8154=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x8153))+((cj15*r22)))),-1);
if(!x8154.valid){
continue;
}
CheckValue<IkReal> x8155 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x8153)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8155.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8154.value)))+(x8155.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8156=IKcos(j14);
IkReal x8157=(cj16*x8156);
IkReal x8158=((1.0)*sj16*x8156);
IkReal x8159=(r22*sj15);
IkReal x8160=IKsin(j14);
IkReal x8161=((1.0)*x8160);
IkReal x8162=(cj15*r21);
IkReal x8163=((1.0)*cj16*x8160);
IkReal x8164=(cj15*r20);
IkReal x8165=((1.0)*sj16*x8160);
IkReal x8166=(r12*sj15);
IkReal x8167=(cj15*r11);
IkReal x8168=(cj15*r10);
IkReal x8169=(sj16*x8160);
IkReal x8170=((1.0)*x8156);
IkReal x8171=((1.0)*cj16*x8156);
IkReal x8172=(r02*sj15);
IkReal x8173=(cj15*r01);
IkReal x8174=(cj15*r00);
evalcond[0]=((((-1.0)*x8162*x8163))+(((-1.0)*x8159*x8161))+((r20*x8157))+(((-1.0)*r21*x8158))+(((-1.0)*x8164*x8165)));
evalcond[1]=((((-1.0)*x8165*x8168))+((r10*x8157))+(((-1.0)*x8161*x8166))+(((-1.0)*x8163*x8167))+(((-1.0)*r11*x8158)));
evalcond[2]=((((-1.0)*r20*x8163))+(((-1.0)*x8159*x8170))+((r21*x8169))+(((-1.0)*x8158*x8164))+(((-1.0)*x8162*x8171)));
evalcond[3]=(((r01*x8169))+(((-1.0)*x8170*x8172))+(((-1.0)*r00*x8163))+(((-1.0)*x8158*x8174))+(((-1.0)*x8171*x8173)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x8158))+((r00*x8157))+(((-1.0)*x8163*x8173))+(((-1.0)*x8165*x8174))+(((-1.0)*x8161*x8172)));
evalcond[5]=((-1.0)+(((-1.0)*x8158*x8168))+(((-1.0)*x8167*x8171))+(((-1.0)*x8166*x8170))+(((-1.0)*r10*x8163))+((r11*x8169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8175 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8175.valid){
continue;
}
CheckValue<IkReal> x8176=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x8176.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8175.value)+(((1.5707963267949)*(x8176.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8177=IKcos(j14);
IkReal x8178=(cj16*x8177);
IkReal x8179=((1.0)*sj16*x8177);
IkReal x8180=(r22*sj15);
IkReal x8181=IKsin(j14);
IkReal x8182=((1.0)*x8181);
IkReal x8183=(cj15*r21);
IkReal x8184=((1.0)*cj16*x8181);
IkReal x8185=(cj15*r20);
IkReal x8186=((1.0)*sj16*x8181);
IkReal x8187=(r12*sj15);
IkReal x8188=(cj15*r11);
IkReal x8189=(cj15*r10);
IkReal x8190=(sj16*x8181);
IkReal x8191=((1.0)*x8177);
IkReal x8192=((1.0)*cj16*x8177);
IkReal x8193=(r02*sj15);
IkReal x8194=(cj15*r01);
IkReal x8195=(cj15*r00);
evalcond[0]=(((r20*x8178))+(((-1.0)*r21*x8179))+(((-1.0)*x8183*x8184))+(((-1.0)*x8180*x8182))+(((-1.0)*x8185*x8186)));
evalcond[1]=((((-1.0)*x8184*x8188))+(((-1.0)*x8182*x8187))+(((-1.0)*r11*x8179))+(((-1.0)*x8186*x8189))+((r10*x8178)));
evalcond[2]=((((-1.0)*x8180*x8191))+(((-1.0)*x8179*x8185))+(((-1.0)*x8183*x8192))+((r21*x8190))+(((-1.0)*r20*x8184)));
evalcond[3]=((((-1.0)*x8179*x8195))+(((-1.0)*r00*x8184))+(((-1.0)*x8191*x8193))+(((-1.0)*x8192*x8194))+((r01*x8190)));
evalcond[4]=((-1.0)+(((-1.0)*x8186*x8195))+(((-1.0)*x8184*x8194))+(((-1.0)*x8182*x8193))+((r00*x8178))+(((-1.0)*r01*x8179)));
evalcond[5]=((-1.0)+(((-1.0)*x8179*x8189))+(((-1.0)*x8187*x8191))+(((-1.0)*r10*x8184))+(((-1.0)*x8188*x8192))+((r11*x8190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x8196=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x8196;
j14eval[1]=IKsign(x8196);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x8197=((1.0)*sj16);
IkReal x8198=(((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15))+(((-1.0)*r00*sj15*x8197)));
j14eval[0]=x8198;
j14eval[1]=IKsign(x8198);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs(((((-1.0)*r21*x8197))+((cj16*r20))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x8199=r01*r01;
IkReal x8200=r02*r02;
IkReal x8201=(r01*sj16);
IkReal x8202=((2.0)*cj16*r00*x8201);
IkReal x8203=cj15*cj15;
IkReal x8204=r00*r00;
IkReal x8205=(x8203*x8204);
IkReal x8206=cj16*cj16;
IkReal x8207=((2.0)*r02*sj15);
IkReal x8208=(cj15*cj16*r01);
IkReal x8209=(cj15*r00*sj16);
IkReal x8210=(x8199*x8206);
IkReal x8211=(x8200+x8205+x8199+((x8207*x8208))+(((-1.0)*x8205*x8206))+((x8203*x8210))+(((-1.0)*x8202))+(((-1.0)*x8210))+((x8204*x8206))+((x8202*x8203))+(((-1.0)*x8200*x8203))+((x8207*x8209)));
j14eval[0]=x8211;
j14eval[1]=((IKabs((x8208+x8209+((r02*sj15)))))+(IKabs((((cj16*r00))+(((-1.0)*x8201))))));
j14eval[2]=IKsign(x8211);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8212=(r01*sj16);
IkReal x8213=(cj15*cj16*r01);
IkReal x8214=(cj15*r00*sj16);
IkReal x8215=r01*r01;
IkReal x8216=r02*r02;
IkReal x8217=((2.0)*cj16*r00*x8212);
IkReal x8218=cj15*cj15;
IkReal x8219=r00*r00;
IkReal x8220=(x8218*x8219);
IkReal x8221=cj16*cj16;
IkReal x8222=((2.0)*r02*sj15);
IkReal x8223=(x8215*x8221);
CheckValue<IkReal> x8224 = IKatan2WithCheck(IkReal(((((-1.0)*x8212))+((cj16*r00)))),IkReal((x8214+x8213+((r02*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8224.valid){
continue;
}
CheckValue<IkReal> x8225=IKPowWithIntegerCheck(IKsign((((x8219*x8221))+x8216+x8215+x8220+((x8213*x8222))+((x8214*x8222))+(((-1.0)*x8220*x8221))+(((-1.0)*x8216*x8218))+((x8218*x8223))+(((-1.0)*x8223))+(((-1.0)*x8217))+((x8217*x8218)))),-1);
if(!x8225.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8224.value)+(((1.5707963267949)*(x8225.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8226=IKcos(j14);
IkReal x8227=(cj16*x8226);
IkReal x8228=((1.0)*sj16*x8226);
IkReal x8229=(r22*sj15);
IkReal x8230=IKsin(j14);
IkReal x8231=((1.0)*x8230);
IkReal x8232=(cj15*r21);
IkReal x8233=((1.0)*cj16*x8230);
IkReal x8234=(cj15*r20);
IkReal x8235=((1.0)*sj16*x8230);
IkReal x8236=(r02*sj15);
IkReal x8237=(cj15*r01);
IkReal x8238=(cj15*r00);
IkReal x8239=(sj16*x8230);
IkReal x8240=((1.0)*x8226);
IkReal x8241=((1.0)*cj16*x8226);
IkReal x8242=(r12*sj15);
IkReal x8243=(cj15*r11);
IkReal x8244=(cj15*r10);
evalcond[0]=(((r20*x8227))+(((-1.0)*x8234*x8235))+(((-1.0)*x8229*x8231))+(((-1.0)*x8232*x8233))+(((-1.0)*r21*x8228)));
evalcond[1]=((((-1.0)*x8233*x8237))+(((-1.0)*r01*x8228))+((r00*x8227))+(((-1.0)*x8231*x8236))+(((-1.0)*x8235*x8238)));
evalcond[2]=((((-1.0)*x8228*x8234))+(((-1.0)*x8229*x8240))+(((-1.0)*r20*x8233))+(((-1.0)*x8232*x8241))+((r21*x8239)));
evalcond[3]=((((-1.0)*x8241*x8243))+(((-1.0)*x8228*x8244))+(((-1.0)*x8240*x8242))+(((-1.0)*r10*x8233))+((r11*x8239)));
evalcond[4]=((-1.0)+((r10*x8227))+(((-1.0)*x8233*x8243))+(((-1.0)*x8231*x8242))+(((-1.0)*x8235*x8244))+(((-1.0)*r11*x8228)));
evalcond[5]=((1.0)+(((-1.0)*x8228*x8238))+(((-1.0)*r00*x8233))+(((-1.0)*x8236*x8240))+((r01*x8239))+(((-1.0)*x8237*x8241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8245=((1.0)*sj16);
CheckValue<IkReal> x8246=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15*x8245))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x8246.valid){
continue;
}
CheckValue<IkReal> x8247 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8245))+((cj16*r20)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8247.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8246.value)))+(x8247.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8248=IKcos(j14);
IkReal x8249=(cj16*x8248);
IkReal x8250=((1.0)*sj16*x8248);
IkReal x8251=(r22*sj15);
IkReal x8252=IKsin(j14);
IkReal x8253=((1.0)*x8252);
IkReal x8254=(cj15*r21);
IkReal x8255=((1.0)*cj16*x8252);
IkReal x8256=(cj15*r20);
IkReal x8257=((1.0)*sj16*x8252);
IkReal x8258=(r02*sj15);
IkReal x8259=(cj15*r01);
IkReal x8260=(cj15*r00);
IkReal x8261=(sj16*x8252);
IkReal x8262=((1.0)*x8248);
IkReal x8263=((1.0)*cj16*x8248);
IkReal x8264=(r12*sj15);
IkReal x8265=(cj15*r11);
IkReal x8266=(cj15*r10);
evalcond[0]=((((-1.0)*x8251*x8253))+(((-1.0)*x8256*x8257))+(((-1.0)*r21*x8250))+((r20*x8249))+(((-1.0)*x8254*x8255)));
evalcond[1]=(((r00*x8249))+(((-1.0)*r01*x8250))+(((-1.0)*x8255*x8259))+(((-1.0)*x8253*x8258))+(((-1.0)*x8257*x8260)));
evalcond[2]=((((-1.0)*x8251*x8262))+(((-1.0)*x8250*x8256))+(((-1.0)*r20*x8255))+((r21*x8261))+(((-1.0)*x8254*x8263)));
evalcond[3]=((((-1.0)*r10*x8255))+(((-1.0)*x8250*x8266))+(((-1.0)*x8262*x8264))+((r11*x8261))+(((-1.0)*x8263*x8265)));
evalcond[4]=((-1.0)+((r10*x8249))+(((-1.0)*x8253*x8264))+(((-1.0)*x8255*x8265))+(((-1.0)*x8257*x8266))+(((-1.0)*r11*x8250)));
evalcond[5]=((1.0)+(((-1.0)*x8250*x8260))+(((-1.0)*x8258*x8262))+((r01*x8261))+(((-1.0)*r00*x8255))+(((-1.0)*x8259*x8263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8267 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8267.valid){
continue;
}
CheckValue<IkReal> x8268=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x8268.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8267.value)+(((1.5707963267949)*(x8268.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8269=IKcos(j14);
IkReal x8270=(cj16*x8269);
IkReal x8271=((1.0)*sj16*x8269);
IkReal x8272=(r22*sj15);
IkReal x8273=IKsin(j14);
IkReal x8274=((1.0)*x8273);
IkReal x8275=(cj15*r21);
IkReal x8276=((1.0)*cj16*x8273);
IkReal x8277=(cj15*r20);
IkReal x8278=((1.0)*sj16*x8273);
IkReal x8279=(r02*sj15);
IkReal x8280=(cj15*r01);
IkReal x8281=(cj15*r00);
IkReal x8282=(sj16*x8273);
IkReal x8283=((1.0)*x8269);
IkReal x8284=((1.0)*cj16*x8269);
IkReal x8285=(r12*sj15);
IkReal x8286=(cj15*r11);
IkReal x8287=(cj15*r10);
evalcond[0]=((((-1.0)*x8277*x8278))+(((-1.0)*r21*x8271))+(((-1.0)*x8275*x8276))+(((-1.0)*x8272*x8274))+((r20*x8270)));
evalcond[1]=((((-1.0)*x8274*x8279))+((r00*x8270))+(((-1.0)*x8278*x8281))+(((-1.0)*r01*x8271))+(((-1.0)*x8276*x8280)));
evalcond[2]=(((r21*x8282))+(((-1.0)*x8275*x8284))+(((-1.0)*x8272*x8283))+(((-1.0)*x8271*x8277))+(((-1.0)*r20*x8276)));
evalcond[3]=((((-1.0)*x8284*x8286))+((r11*x8282))+(((-1.0)*r10*x8276))+(((-1.0)*x8271*x8287))+(((-1.0)*x8283*x8285)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x8271))+(((-1.0)*x8278*x8287))+(((-1.0)*x8276*x8286))+(((-1.0)*x8274*x8285))+((r10*x8270)));
evalcond[5]=((1.0)+(((-1.0)*x8280*x8284))+(((-1.0)*r00*x8276))+(((-1.0)*x8279*x8283))+(((-1.0)*x8271*x8281))+((r01*x8282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8288=((1.0)*cj15);
IkReal x8289=(((r20*sj15*sj16))+(((-1.0)*r22*x8288))+((cj16*r21*sj15)));
j14eval[0]=x8289;
j14eval[1]=IKsign(x8289);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*(1.0)*r02*sj15))+(((-1.0)*r00*sj16*x8288))+(((-1.0)*cj16*r01*x8288))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8290=((1.0)*cj16);
IkReal x8291=((1.0)*sj15);
IkReal x8292=((((-1.0)*r00*sj16*x8291))+(((-1.0)*r01*sj15*x8290))+((cj15*r02)));
j14eval[0]=x8292;
j14eval[1]=((IKabs((((r21*sj16))+(((-1.0)*r20*x8290)))))+(IKabs(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x8291))+(((-1.0)*cj15*r21*x8290))))));
j14eval[2]=IKsign(x8292);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8293=r01*r01;
IkReal x8294=((1.0)*x8293);
IkReal x8295=r02*r02;
IkReal x8296=(r01*sj16);
IkReal x8297=((2.0)*cj16*r00*x8296);
IkReal x8298=cj15*cj15;
IkReal x8299=cj16*cj16;
IkReal x8300=((2.0)*r02*sj15);
IkReal x8301=(cj15*cj16*r01);
IkReal x8302=(cj15*r00*sj16);
IkReal x8303=r00*r00;
IkReal x8304=((1.0)*x8303);
IkReal x8305=(x8298*x8299);
IkReal x8306=((((-1.0)*x8300*x8301))+(((-1.0)*x8294*x8305))+((x8303*x8305))+(((-1.0)*x8299*x8304))+(((-1.0)*x8295))+((x8295*x8298))+(((-1.0)*x8300*x8302))+(((-1.0)*x8298*x8304))+x8297+((x8293*x8299))+(((-1.0)*x8294))+(((-1.0)*x8297*x8298)));
j14eval[0]=x8306;
j14eval[1]=IKsign(x8306);
j14eval[2]=((IKabs((x8302+x8301+((r02*sj15)))))+(IKabs(((((-1.0)*x8296))+((cj16*r00))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8307=(r01*sj16);
IkReal x8308=(cj15*cj16*r01);
IkReal x8309=(cj15*r00*sj16);
IkReal x8310=r01*r01;
IkReal x8311=((1.0)*x8310);
IkReal x8312=r02*r02;
IkReal x8313=((2.0)*cj16*r00*x8307);
IkReal x8314=cj15*cj15;
IkReal x8315=cj16*cj16;
IkReal x8316=((2.0)*r02*sj15);
IkReal x8317=r00*r00;
IkReal x8318=((1.0)*x8317);
IkReal x8319=(x8314*x8315);
CheckValue<IkReal> x8320 = IKatan2WithCheck(IkReal(((((-1.0)*x8307))+((cj16*r00)))),IkReal((x8309+x8308+((r02*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8320.valid){
continue;
}
CheckValue<IkReal> x8321=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8308*x8316))+(((-1.0)*x8311))+((x8317*x8319))+(((-1.0)*x8313*x8314))+(((-1.0)*x8314*x8318))+(((-1.0)*x8312))+((x8312*x8314))+((x8310*x8315))+(((-1.0)*x8311*x8319))+x8313+(((-1.0)*x8309*x8316))+(((-1.0)*x8315*x8318)))),-1);
if(!x8321.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8320.value)+(((1.5707963267949)*(x8321.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8322=IKcos(j14);
IkReal x8323=(cj16*x8322);
IkReal x8324=((1.0)*sj16*x8322);
IkReal x8325=(r22*sj15);
IkReal x8326=IKsin(j14);
IkReal x8327=((1.0)*x8326);
IkReal x8328=(cj15*r21);
IkReal x8329=((1.0)*cj16*x8326);
IkReal x8330=(cj15*r20);
IkReal x8331=((1.0)*sj16*x8326);
IkReal x8332=(r02*sj15);
IkReal x8333=(cj15*r01);
IkReal x8334=(cj15*r00);
IkReal x8335=(sj16*x8326);
IkReal x8336=((1.0)*x8322);
IkReal x8337=((1.0)*cj16*x8322);
IkReal x8338=(r12*sj15);
IkReal x8339=(cj15*r11);
IkReal x8340=(cj15*r10);
evalcond[0]=(((r20*x8323))+(((-1.0)*x8328*x8329))+(((-1.0)*r21*x8324))+(((-1.0)*x8325*x8327))+(((-1.0)*x8330*x8331)));
evalcond[1]=((((-1.0)*x8329*x8333))+(((-1.0)*x8331*x8334))+(((-1.0)*x8327*x8332))+((r00*x8323))+(((-1.0)*r01*x8324)));
evalcond[2]=((((-1.0)*r20*x8329))+(((-1.0)*x8325*x8336))+(((-1.0)*x8328*x8337))+((r21*x8335))+(((-1.0)*x8324*x8330)));
evalcond[3]=((((-1.0)*x8337*x8339))+(((-1.0)*x8324*x8340))+((r11*x8335))+(((-1.0)*x8336*x8338))+(((-1.0)*r10*x8329)));
evalcond[4]=((1.0)+(((-1.0)*x8329*x8339))+((r10*x8323))+(((-1.0)*r11*x8324))+(((-1.0)*x8331*x8340))+(((-1.0)*x8327*x8338)));
evalcond[5]=((-1.0)+((r01*x8335))+(((-1.0)*x8332*x8336))+(((-1.0)*x8324*x8334))+(((-1.0)*x8333*x8337))+(((-1.0)*r00*x8329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8341=((1.0)*cj16);
IkReal x8342=((1.0)*sj15);
CheckValue<IkReal> x8343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj15*x8341))+((cj15*r02))+(((-1.0)*r00*sj16*x8342)))),-1);
if(!x8343.valid){
continue;
}
CheckValue<IkReal> x8344 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*r20*x8341)))),IkReal(((((-1.0)*cj15*r21*x8341))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x8342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8344.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8343.value)))+(x8344.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8345=IKcos(j14);
IkReal x8346=(cj16*x8345);
IkReal x8347=((1.0)*sj16*x8345);
IkReal x8348=(r22*sj15);
IkReal x8349=IKsin(j14);
IkReal x8350=((1.0)*x8349);
IkReal x8351=(cj15*r21);
IkReal x8352=((1.0)*cj16*x8349);
IkReal x8353=(cj15*r20);
IkReal x8354=((1.0)*sj16*x8349);
IkReal x8355=(r02*sj15);
IkReal x8356=(cj15*r01);
IkReal x8357=(cj15*r00);
IkReal x8358=(sj16*x8349);
IkReal x8359=((1.0)*x8345);
IkReal x8360=((1.0)*cj16*x8345);
IkReal x8361=(r12*sj15);
IkReal x8362=(cj15*r11);
IkReal x8363=(cj15*r10);
evalcond[0]=((((-1.0)*x8353*x8354))+(((-1.0)*x8351*x8352))+(((-1.0)*x8348*x8350))+(((-1.0)*r21*x8347))+((r20*x8346)));
evalcond[1]=((((-1.0)*x8352*x8356))+(((-1.0)*x8350*x8355))+((r00*x8346))+(((-1.0)*r01*x8347))+(((-1.0)*x8354*x8357)));
evalcond[2]=(((r21*x8358))+(((-1.0)*x8347*x8353))+(((-1.0)*r20*x8352))+(((-1.0)*x8351*x8360))+(((-1.0)*x8348*x8359)));
evalcond[3]=((((-1.0)*x8347*x8363))+((r11*x8358))+(((-1.0)*x8360*x8362))+(((-1.0)*x8359*x8361))+(((-1.0)*r10*x8352)));
evalcond[4]=((1.0)+(((-1.0)*x8352*x8362))+(((-1.0)*x8354*x8363))+((r10*x8346))+(((-1.0)*x8350*x8361))+(((-1.0)*r11*x8347)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x8352))+(((-1.0)*x8355*x8359))+(((-1.0)*x8347*x8357))+(((-1.0)*x8356*x8360))+((r01*x8358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8364=((1.0)*cj15);
CheckValue<IkReal> x8365=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+((cj16*r21*sj15))+(((-1.0)*r22*x8364)))),-1);
if(!x8365.valid){
continue;
}
CheckValue<IkReal> x8366 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*(1.0)*r02*sj15))+(((-1.0)*r00*sj16*x8364))+(((-1.0)*cj16*r01*x8364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8366.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8365.value)))+(x8366.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8367=IKcos(j14);
IkReal x8368=(cj16*x8367);
IkReal x8369=((1.0)*sj16*x8367);
IkReal x8370=(r22*sj15);
IkReal x8371=IKsin(j14);
IkReal x8372=((1.0)*x8371);
IkReal x8373=(cj15*r21);
IkReal x8374=((1.0)*cj16*x8371);
IkReal x8375=(cj15*r20);
IkReal x8376=((1.0)*sj16*x8371);
IkReal x8377=(r02*sj15);
IkReal x8378=(cj15*r01);
IkReal x8379=(cj15*r00);
IkReal x8380=(sj16*x8371);
IkReal x8381=((1.0)*x8367);
IkReal x8382=((1.0)*cj16*x8367);
IkReal x8383=(r12*sj15);
IkReal x8384=(cj15*r11);
IkReal x8385=(cj15*r10);
evalcond[0]=(((r20*x8368))+(((-1.0)*x8370*x8372))+(((-1.0)*x8375*x8376))+(((-1.0)*x8373*x8374))+(((-1.0)*r21*x8369)));
evalcond[1]=((((-1.0)*x8376*x8379))+(((-1.0)*x8372*x8377))+((r00*x8368))+(((-1.0)*r01*x8369))+(((-1.0)*x8374*x8378)));
evalcond[2]=((((-1.0)*x8370*x8381))+(((-1.0)*r20*x8374))+((r21*x8380))+(((-1.0)*x8373*x8382))+(((-1.0)*x8369*x8375)));
evalcond[3]=((((-1.0)*r10*x8374))+((r11*x8380))+(((-1.0)*x8369*x8385))+(((-1.0)*x8381*x8383))+(((-1.0)*x8382*x8384)));
evalcond[4]=((1.0)+(((-1.0)*x8376*x8385))+((r10*x8368))+(((-1.0)*r11*x8369))+(((-1.0)*x8372*x8383))+(((-1.0)*x8374*x8384)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x8374))+(((-1.0)*x8378*x8382))+((r01*x8380))+(((-1.0)*x8369*x8379))+(((-1.0)*x8377*x8381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8386=(r21*sj16);
IkReal x8387=(cj16*r20);
IkReal x8388=(cj16*r21);
IkReal x8389=((1.0)*cj10*cj15);
IkReal x8390=(r20*sj16);
IkReal x8391=(r01*r21);
IkReal x8392=((1.0)*x8391);
IkReal x8393=(cj16*r00*x8386);
IkReal x8394=(r01*sj16*x8387);
IkReal x8395=cj15*cj15;
IkReal x8396=cj16*cj16;
IkReal x8397=((1.0)*r00*r20);
IkReal x8398=((1.0)*cj15*r22*sj15);
IkReal x8399=((1.0)*cj15*r02*sj15);
IkReal x8400=(x8395*x8396);
IkReal x8401=((1.0)*x8395);
CheckValue<IkReal> x8402=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8388*x8399))+(((-1.0)*x8392))+(((-1.0)*x8394*x8401))+(((-1.0)*cj16*r01*x8398))+(((-1.0)*x8396*x8397))+((r00*r20*x8400))+(((-1.0)*x8392*x8400))+(((-1.0)*x8395*x8397))+(((-1.0)*r00*sj16*x8398))+x8393+x8394+((r02*r22*x8395))+(((-1.0)*x8390*x8399))+(((-1.0)*r02*r22))+((x8391*x8396))+(((-1.0)*x8393*x8401)))),-1);
if(!x8402.valid){
continue;
}
CheckValue<IkReal> x8403 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x8387))+((cj10*x8386)))),IkReal(((((-1.0)*cj10*r22*sj15))+(((-1.0)*x8389*x8390))+(((-1.0)*x8388*x8389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8403.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8402.value)))+(x8403.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8404=IKcos(j14);
IkReal x8405=(cj16*x8404);
IkReal x8406=((1.0)*sj16*x8404);
IkReal x8407=(r22*sj15);
IkReal x8408=IKsin(j14);
IkReal x8409=((1.0)*x8408);
IkReal x8410=(cj15*r21);
IkReal x8411=((1.0)*cj16*x8408);
IkReal x8412=(cj15*r20);
IkReal x8413=((1.0)*sj16*x8408);
IkReal x8414=(sj16*x8408);
IkReal x8415=((1.0)*x8404);
IkReal x8416=((1.0)*cj16*x8404);
IkReal x8417=(r02*sj15);
IkReal x8418=(cj15*r01);
IkReal x8419=(cj15*r00);
IkReal x8420=(r12*sj15);
IkReal x8421=(cj15*r11);
IkReal x8422=(cj15*r10);
evalcond[0]=((((-1.0)*x8412*x8413))+(((-1.0)*r21*x8406))+((r20*x8405))+(((-1.0)*x8407*x8409))+(((-1.0)*x8410*x8411)));
evalcond[1]=((((-1.0)*x8410*x8416))+(((-1.0)*x8406*x8412))+((r21*x8414))+(((-1.0)*r20*x8411))+(((-1.0)*x8407*x8415)));
evalcond[2]=((((-1.0)*x8409*x8417))+(((-1.0)*x8413*x8419))+sj10+((r00*x8405))+(((-1.0)*x8411*x8418))+(((-1.0)*r01*x8406)));
evalcond[3]=(((r01*x8414))+cj10+(((-1.0)*r00*x8411))+(((-1.0)*x8415*x8417))+(((-1.0)*x8416*x8418))+(((-1.0)*x8406*x8419)));
evalcond[4]=(((r11*x8414))+(((-1.0)*x8406*x8422))+sj10+(((-1.0)*x8416*x8421))+(((-1.0)*r10*x8411))+(((-1.0)*x8415*x8420)));
evalcond[5]=((((-1.0)*x8409*x8420))+(((-1.0)*x8411*x8421))+(((-1.0)*r11*x8406))+(((-1.0)*(1.0)*cj10))+((r10*x8405))+(((-1.0)*x8413*x8422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8423=(cj15*cj16);
IkReal x8424=(r21*sj10);
IkReal x8425=(cj15*sj16);
IkReal x8426=(r20*sj10);
IkReal x8427=(r02*r22);
IkReal x8428=cj15*cj15;
IkReal x8429=(r00*r20);
IkReal x8430=(x8428*x8429);
IkReal x8431=cj16*cj16;
IkReal x8432=(r00*r21);
IkReal x8433=((1.0)*cj16*sj16);
IkReal x8434=(r01*r20);
IkReal x8435=(r02*sj15);
IkReal x8436=(r01*r21*x8431);
IkReal x8437=(cj16*sj16*x8428);
CheckValue<IkReal> x8438=IKPowWithIntegerCheck(IKsign((((cj15*cj16*r21*x8435))+x8430+((r00*r22*sj15*x8425))+(((-1.0)*x8433*x8434))+((x8429*x8431))+(((-1.0)*x8427*x8428))+((x8434*x8437))+(((-1.0)*x8436))+((r01*r22*sj15*x8423))+x8427+((cj15*r20*sj16*x8435))+((r01*r21))+((x8432*x8437))+((x8428*x8436))+(((-1.0)*x8432*x8433))+(((-1.0)*x8430*x8431)))),-1);
if(!x8438.valid){
continue;
}
CheckValue<IkReal> x8439 = IKatan2WithCheck(IkReal((((x8425*x8426))+((x8423*x8424))+((sj10*((r22*sj15)))))),IkReal((((sj16*x8424))+(((-1.0)*cj16*x8426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8439.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8438.value)))+(x8439.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8440=IKcos(j14);
IkReal x8441=(cj16*x8440);
IkReal x8442=((1.0)*sj16*x8440);
IkReal x8443=(r22*sj15);
IkReal x8444=IKsin(j14);
IkReal x8445=((1.0)*x8444);
IkReal x8446=(cj15*r21);
IkReal x8447=((1.0)*cj16*x8444);
IkReal x8448=(cj15*r20);
IkReal x8449=((1.0)*sj16*x8444);
IkReal x8450=(sj16*x8444);
IkReal x8451=((1.0)*x8440);
IkReal x8452=((1.0)*cj16*x8440);
IkReal x8453=(r02*sj15);
IkReal x8454=(cj15*r01);
IkReal x8455=(cj15*r00);
IkReal x8456=(r12*sj15);
IkReal x8457=(cj15*r11);
IkReal x8458=(cj15*r10);
evalcond[0]=((((-1.0)*x8448*x8449))+(((-1.0)*x8443*x8445))+((r20*x8441))+(((-1.0)*r21*x8442))+(((-1.0)*x8446*x8447)));
evalcond[1]=(((r21*x8450))+(((-1.0)*x8443*x8451))+(((-1.0)*r20*x8447))+(((-1.0)*x8446*x8452))+(((-1.0)*x8442*x8448)));
evalcond[2]=((((-1.0)*x8449*x8455))+(((-1.0)*x8445*x8453))+(((-1.0)*r01*x8442))+sj10+((r00*x8441))+(((-1.0)*x8447*x8454)));
evalcond[3]=((((-1.0)*x8452*x8454))+cj10+((r01*x8450))+(((-1.0)*x8442*x8455))+(((-1.0)*x8451*x8453))+(((-1.0)*r00*x8447)));
evalcond[4]=((((-1.0)*x8452*x8457))+(((-1.0)*r10*x8447))+sj10+(((-1.0)*x8442*x8458))+((r11*x8450))+(((-1.0)*x8451*x8456)));
evalcond[5]=((((-1.0)*x8447*x8457))+(((-1.0)*r11*x8442))+((r10*x8441))+(((-1.0)*x8445*x8456))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x8449*x8458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8459=((1.0)*cj15);
IkReal x8460=(r21*sj10);
IkReal x8461=((1.0)*sj10);
CheckValue<IkReal> x8462=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+(((-1.0)*r12*x8459))+((r10*sj15*sj16)))),-1);
if(!x8462.valid){
continue;
}
CheckValue<IkReal> x8463 = IKatan2WithCheck(IkReal((((sj16*x8460))+(((-1.0)*cj16*r20*x8461)))),IkReal(((((-1.0)*r22*sj15*x8461))+(((-1.0)*cj15*cj16*x8460))+(((-1.0)*r20*sj10*sj16*x8459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8463.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8462.value)))+(x8463.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8464=IKcos(j14);
IkReal x8465=(cj16*x8464);
IkReal x8466=((1.0)*sj16*x8464);
IkReal x8467=(r22*sj15);
IkReal x8468=IKsin(j14);
IkReal x8469=((1.0)*x8468);
IkReal x8470=(cj15*r21);
IkReal x8471=((1.0)*cj16*x8468);
IkReal x8472=(cj15*r20);
IkReal x8473=((1.0)*sj16*x8468);
IkReal x8474=(sj16*x8468);
IkReal x8475=((1.0)*x8464);
IkReal x8476=((1.0)*cj16*x8464);
IkReal x8477=(r02*sj15);
IkReal x8478=(cj15*r01);
IkReal x8479=(cj15*r00);
IkReal x8480=(r12*sj15);
IkReal x8481=(cj15*r11);
IkReal x8482=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x8466))+(((-1.0)*x8472*x8473))+(((-1.0)*x8467*x8469))+(((-1.0)*x8470*x8471))+((r20*x8465)));
evalcond[1]=((((-1.0)*x8470*x8476))+(((-1.0)*r20*x8471))+((r21*x8474))+(((-1.0)*x8466*x8472))+(((-1.0)*x8467*x8475)));
evalcond[2]=((((-1.0)*x8469*x8477))+((r00*x8465))+(((-1.0)*r01*x8466))+sj10+(((-1.0)*x8471*x8478))+(((-1.0)*x8473*x8479)));
evalcond[3]=((((-1.0)*x8475*x8477))+((r01*x8474))+cj10+(((-1.0)*x8476*x8478))+(((-1.0)*r00*x8471))+(((-1.0)*x8466*x8479)));
evalcond[4]=((((-1.0)*x8475*x8480))+((r11*x8474))+(((-1.0)*x8476*x8481))+sj10+(((-1.0)*x8466*x8482))+(((-1.0)*r10*x8471)));
evalcond[5]=((((-1.0)*x8471*x8481))+(((-1.0)*x8469*x8480))+(((-1.0)*r11*x8466))+(((-1.0)*x8473*x8482))+((r10*x8465))+(((-1.0)*(1.0)*cj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8483=(cj16*sj11);
IkReal x8484=(r21*sj16);
IkReal x8485=(cj11*sj12);
IkReal x8486=(r22*sj15);
IkReal x8487=(cj15*cj16*r21);
IkReal x8488=(cj15*r20*sj16);
IkReal x8489=(cj16*r20);
IkReal x8490=r21*r21;
IkReal x8491=r22*r22;
IkReal x8492=((2.0)*r21*sj16*x8489);
IkReal x8493=cj15*cj15;
IkReal x8494=r20*r20;
IkReal x8495=(x8493*x8494);
IkReal x8496=cj16*cj16;
IkReal x8497=((2.0)*r22*sj15);
IkReal x8498=(x8490*x8496);
CheckValue<IkReal> x8499=IKPowWithIntegerCheck(IKsign((((x8493*x8498))+(((-1.0)*x8492))+(((-1.0)*x8491*x8493))+((x8492*x8493))+((x8487*x8497))+x8495+x8490+x8491+((x8488*x8497))+(((-1.0)*x8495*x8496))+((x8494*x8496))+(((-1.0)*x8498)))),-1);
if(!x8499.valid){
continue;
}
CheckValue<IkReal> x8500 = IKatan2WithCheck(IkReal(((((-1.0)*sj11*x8484))+((x8485*x8486))+((x8485*x8488))+((x8485*x8487))+((r20*x8483)))),IkReal((((x8484*x8485))+((sj11*x8486))+((sj11*x8488))+((cj15*r21*x8483))+(((-1.0)*cj11*sj12*x8489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8500.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8499.value)))+(x8500.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8501=IKsin(j14);
IkReal x8502=(sj16*x8501);
IkReal x8503=((1.0)*cj16*x8501);
IkReal x8504=(r22*sj15);
IkReal x8505=IKcos(j14);
IkReal x8506=((1.0)*x8505);
IkReal x8507=(cj15*r21);
IkReal x8508=((1.0)*cj16*x8505);
IkReal x8509=(cj15*r20);
IkReal x8510=((1.0)*sj16*x8505);
IkReal x8511=(cj16*x8505);
IkReal x8512=((1.0)*x8501);
IkReal x8513=((1.0)*sj16*x8501);
IkReal x8514=((1.0)*cj11);
IkReal x8515=(r02*sj15);
IkReal x8516=(cj15*r01);
IkReal x8517=(cj15*r00);
IkReal x8518=(r12*sj15);
IkReal x8519=(cj15*r11);
IkReal x8520=(cj15*r10);
IkReal x8521=(sj11*sj12);
evalcond[0]=(((r21*x8502))+(((-1.0)*x8509*x8510))+(((-1.0)*r20*x8503))+sj11+(((-1.0)*x8507*x8508))+(((-1.0)*x8504*x8506)));
evalcond[1]=(((r20*x8511))+(((-1.0)*x8509*x8513))+(((-1.0)*x8504*x8512))+(((-1.0)*x8503*x8507))+((cj11*sj12))+(((-1.0)*r21*x8510)));
evalcond[2]=((((-1.0)*x8510*x8517))+(((-1.0)*x8508*x8516))+(((-1.0)*x8506*x8515))+(((-1.0)*r00*x8503))+(((-1.0)*cj10*x8514))+((r01*x8502)));
evalcond[3]=((((-1.0)*sj10*x8514))+((r11*x8502))+(((-1.0)*x8508*x8519))+(((-1.0)*x8506*x8518))+(((-1.0)*x8510*x8520))+(((-1.0)*r10*x8503)));
evalcond[4]=((((-1.0)*x8513*x8520))+(((-1.0)*x8503*x8519))+((r10*x8511))+((sj10*x8521))+((cj10*cj12))+(((-1.0)*r11*x8510))+(((-1.0)*x8512*x8518)));
evalcond[5]=(((r00*x8511))+(((-1.0)*x8513*x8517))+((cj10*x8521))+(((-1.0)*r01*x8510))+(((-1.0)*x8503*x8516))+(((-1.0)*x8512*x8515))+(((-1.0)*(1.0)*cj12*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8522=((1.0)*sj15);
IkReal x8523=((1.0)*cj15);
IkReal x8524=((1.0)*sj11*sj16);
IkReal x8525=((1.0)*cj11*sj10*sj16);
CheckValue<IkReal> x8526 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*x8525))+(((-1.0)*cj15*r10*x8524))+(((-1.0)*cj11*cj16*r21*sj10*x8523))+(((-1.0)*cj11*r22*sj10*sj15))+(((-1.0)*cj16*r11*sj11*x8523))+(((-1.0)*r12*sj11*x8522)))),IkReal(((((-1.0)*r21*x8525))+((r10*((cj16*sj11))))+(((-1.0)*r11*x8524))+((r20*((cj11*cj16*sj10)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x8526.valid){
continue;
}
CheckValue<IkReal> x8527=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x8522))+((cj15*r02))+(((-1.0)*r00*sj16*x8522)))),-1);
if(!x8527.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8526.value)+(((1.5707963267949)*(x8527.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8528=IKsin(j14);
IkReal x8529=(sj16*x8528);
IkReal x8530=((1.0)*cj16*x8528);
IkReal x8531=(r22*sj15);
IkReal x8532=IKcos(j14);
IkReal x8533=((1.0)*x8532);
IkReal x8534=(cj15*r21);
IkReal x8535=((1.0)*cj16*x8532);
IkReal x8536=(cj15*r20);
IkReal x8537=((1.0)*sj16*x8532);
IkReal x8538=(cj16*x8532);
IkReal x8539=((1.0)*x8528);
IkReal x8540=((1.0)*sj16*x8528);
IkReal x8541=((1.0)*cj11);
IkReal x8542=(r02*sj15);
IkReal x8543=(cj15*r01);
IkReal x8544=(cj15*r00);
IkReal x8545=(r12*sj15);
IkReal x8546=(cj15*r11);
IkReal x8547=(cj15*r10);
IkReal x8548=(sj11*sj12);
evalcond[0]=((((-1.0)*r20*x8530))+(((-1.0)*x8534*x8535))+sj11+((r21*x8529))+(((-1.0)*x8531*x8533))+(((-1.0)*x8536*x8537)));
evalcond[1]=(((r20*x8538))+(((-1.0)*x8530*x8534))+(((-1.0)*x8531*x8539))+(((-1.0)*r21*x8537))+((cj11*sj12))+(((-1.0)*x8536*x8540)));
evalcond[2]=((((-1.0)*cj10*x8541))+(((-1.0)*x8535*x8543))+((r01*x8529))+(((-1.0)*x8533*x8542))+(((-1.0)*r00*x8530))+(((-1.0)*x8537*x8544)));
evalcond[3]=((((-1.0)*x8537*x8547))+(((-1.0)*r10*x8530))+(((-1.0)*x8535*x8546))+(((-1.0)*sj10*x8541))+((r11*x8529))+(((-1.0)*x8533*x8545)));
evalcond[4]=((((-1.0)*x8540*x8547))+((sj10*x8548))+(((-1.0)*x8530*x8546))+((cj10*cj12))+(((-1.0)*r11*x8537))+(((-1.0)*x8539*x8545))+((r10*x8538)));
evalcond[5]=((((-1.0)*x8530*x8543))+((cj10*x8548))+((r00*x8538))+(((-1.0)*x8540*x8544))+(((-1.0)*r01*x8537))+(((-1.0)*(1.0)*cj12*sj10))+(((-1.0)*x8539*x8542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8549=((1.0)*sj11);
IkReal x8550=((1.0)*cj10*cj11);
IkReal x8551=(cj16*sj11);
IkReal x8552=((1.0)*cj15*sj16);
IkReal x8553=(cj10*cj11*cj16);
CheckValue<IkReal> x8554=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x8554.valid){
continue;
}
CheckValue<IkReal> x8555 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj15*x8550))+(((-1.0)*r02*sj15*x8549))+(((-1.0)*r00*sj11*x8552))+(((-1.0)*cj15*r01*x8551))+(((-1.0)*cj10*cj11*r20*x8552))+(((-1.0)*cj15*r21*x8553)))),IkReal(((((-1.0)*r21*sj16*x8550))+((r00*x8551))+((r20*x8553))+(((-1.0)*r01*sj16*x8549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8555.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8554.value)))+(x8555.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8556=IKsin(j14);
IkReal x8557=(sj16*x8556);
IkReal x8558=((1.0)*cj16*x8556);
IkReal x8559=(r22*sj15);
IkReal x8560=IKcos(j14);
IkReal x8561=((1.0)*x8560);
IkReal x8562=(cj15*r21);
IkReal x8563=((1.0)*cj16*x8560);
IkReal x8564=(cj15*r20);
IkReal x8565=((1.0)*sj16*x8560);
IkReal x8566=(cj16*x8560);
IkReal x8567=((1.0)*x8556);
IkReal x8568=((1.0)*sj16*x8556);
IkReal x8569=((1.0)*cj11);
IkReal x8570=(r02*sj15);
IkReal x8571=(cj15*r01);
IkReal x8572=(cj15*r00);
IkReal x8573=(r12*sj15);
IkReal x8574=(cj15*r11);
IkReal x8575=(cj15*r10);
IkReal x8576=(sj11*sj12);
evalcond[0]=((((-1.0)*x8559*x8561))+sj11+(((-1.0)*x8562*x8563))+(((-1.0)*r20*x8558))+(((-1.0)*x8564*x8565))+((r21*x8557)));
evalcond[1]=((((-1.0)*x8559*x8567))+(((-1.0)*x8564*x8568))+(((-1.0)*r21*x8565))+(((-1.0)*x8558*x8562))+((r20*x8566))+((cj11*sj12)));
evalcond[2]=((((-1.0)*x8563*x8571))+((r01*x8557))+(((-1.0)*cj10*x8569))+(((-1.0)*x8561*x8570))+(((-1.0)*x8565*x8572))+(((-1.0)*r00*x8558)));
evalcond[3]=((((-1.0)*x8561*x8573))+(((-1.0)*x8563*x8574))+(((-1.0)*r10*x8558))+((r11*x8557))+(((-1.0)*x8565*x8575))+(((-1.0)*sj10*x8569)));
evalcond[4]=(((sj10*x8576))+(((-1.0)*x8567*x8573))+(((-1.0)*r11*x8565))+(((-1.0)*x8558*x8574))+(((-1.0)*x8568*x8575))+((r10*x8566))+((cj10*cj12)));
evalcond[5]=(((cj10*x8576))+(((-1.0)*x8567*x8570))+(((-1.0)*x8568*x8572))+(((-1.0)*r01*x8565))+(((-1.0)*(1.0)*cj12*sj10))+(((-1.0)*x8558*x8571))+((r00*x8566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8577=(cj16*sj11);
IkReal x8578=(r21*sj16);
IkReal x8579=(cj11*sj12);
IkReal x8580=(r22*sj15);
IkReal x8581=(cj15*cj16*r21);
IkReal x8582=(cj15*r20*sj16);
IkReal x8583=(cj16*r20);
IkReal x8584=r21*r21;
IkReal x8585=r22*r22;
IkReal x8586=((2.0)*r21*sj16*x8583);
IkReal x8587=cj15*cj15;
IkReal x8588=r20*r20;
IkReal x8589=(x8587*x8588);
IkReal x8590=cj16*cj16;
IkReal x8591=((2.0)*r22*sj15);
IkReal x8592=(x8584*x8590);
CheckValue<IkReal> x8593=IKPowWithIntegerCheck(IKsign((x8585+x8584+x8589+(((-1.0)*x8586))+(((-1.0)*x8589*x8590))+((x8581*x8591))+((x8586*x8587))+((x8588*x8590))+(((-1.0)*x8585*x8587))+(((-1.0)*x8592))+((x8587*x8592))+((x8582*x8591)))),-1);
if(!x8593.valid){
continue;
}
CheckValue<IkReal> x8594 = IKatan2WithCheck(IkReal((((x8579*x8580))+((x8579*x8581))+((x8579*x8582))+(((-1.0)*sj11*x8578))+((r20*x8577)))),IkReal(((((-1.0)*cj11*sj12*x8583))+((x8578*x8579))+((cj15*r21*x8577))+((sj11*x8580))+((sj11*x8582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8594.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8593.value)))+(x8594.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x8595=IKsin(j14);
IkReal x8596=(r21*sj16);
IkReal x8597=(cj16*r20);
IkReal x8598=((1.0)*x8595);
IkReal x8599=(r22*sj15);
IkReal x8600=IKcos(j14);
IkReal x8601=((1.0)*x8600);
IkReal x8602=(cj15*cj16*r21);
IkReal x8603=(cj15*r20*sj16);
evalcond[0]=((((-1.0)*x8601*x8602))+((x8595*x8596))+sj11+(((-1.0)*x8599*x8601))+(((-1.0)*x8601*x8603))+(((-1.0)*x8597*x8598)));
evalcond[1]=((((-1.0)*x8598*x8602))+(((-1.0)*x8598*x8599))+((x8597*x8600))+(((-1.0)*x8598*x8603))+((cj11*sj12))+(((-1.0)*x8596*x8601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x8604=((1.0)+(((-1.0)*(1.0)*(cj11*cj11)*(cj12*cj12))));
j10eval[0]=x8604;
j10eval[1]=IKsign(x8604);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j10eval[0]=cj11;
j10eval[1]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j10eval[0]=cj11;
j10eval[1]=cj12;
j10eval[2]=sj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8605=((1.0)*cj12);
IkReal x8606=(cj15*r12);
IkReal x8607=(cj15*r02);
IkReal x8608=(cj12*cj16*sj15);
IkReal x8609=(cj12*sj15*sj16);
IkReal x8610=(sj12*sj15);
IkReal x8611=((1.0)*sj12*sj15);
if( IKabs(((((-1.0)*x8605*x8606))+((r11*x8608))+((cj16*r01*x8610))+((r00*sj16*x8610))+((r10*x8609))+(((-1.0)*sj12*x8607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x8608))+((r00*x8609))+(((-1.0)*cj16*r11*x8611))+(((-1.0)*r10*sj16*x8611))+(((-1.0)*x8605*x8607))+((sj12*x8606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x8605*x8606))+((r11*x8608))+((cj16*r01*x8610))+((r00*sj16*x8610))+((r10*x8609))+(((-1.0)*sj12*x8607))))+IKsqr((((r01*x8608))+((r00*x8609))+(((-1.0)*cj16*r11*x8611))+(((-1.0)*r10*sj16*x8611))+(((-1.0)*x8605*x8607))+((sj12*x8606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x8605*x8606))+((r11*x8608))+((cj16*r01*x8610))+((r00*sj16*x8610))+((r10*x8609))+(((-1.0)*sj12*x8607))), (((r01*x8608))+((r00*x8609))+(((-1.0)*cj16*r11*x8611))+(((-1.0)*r10*sj16*x8611))+(((-1.0)*x8605*x8607))+((sj12*x8606))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8612=IKcos(j10);
IkReal x8613=(sj12*x8612);
IkReal x8614=IKsin(j10);
IkReal x8615=(x8613+(((-1.0)*cj12*x8614)));
IkReal x8616=(cj15*r12);
IkReal x8617=(cj16*sj15);
IkReal x8618=(r11*x8617);
IkReal x8619=(sj15*sj16);
IkReal x8620=(r10*x8619);
IkReal x8621=(cj15*r02);
IkReal x8622=(r01*x8617);
IkReal x8623=(r00*x8619);
IkReal x8624=(cj12*x8612);
IkReal x8625=(sj12*x8614);
IkReal x8626=(cj14*cj16);
IkReal x8627=((1.0)*cj14*sj16);
IkReal x8628=((1.0)*sj14*sj15);
IkReal x8629=((1.0)*cj15*cj16*sj14);
IkReal x8630=((1.0)*cj15*sj14*sj16);
IkReal x8631=((0.01)*sj15);
IkReal x8632=((0.01)*cj15*cj16);
IkReal x8633=((0.01)*cj15*sj16);
IkReal x8634=((0.069)*x8614);
evalcond[0]=(x8618+x8615+x8620+(((-1.0)*x8616)));
evalcond[1]=((((-1.0)*x8621))+(((-1.0)*x8624))+x8623+x8622+(((-1.0)*x8625)));
evalcond[2]=(((r10*x8626))+(((-1.0)*r10*x8630))+(((-1.0)*r11*x8627))+x8624+x8625+(((-1.0)*r11*x8629))+(((-1.0)*r12*x8628)));
evalcond[3]=(x8615+((r00*x8626))+(((-1.0)*r01*x8627))+(((-1.0)*r01*x8629))+(((-1.0)*r02*x8628))+(((-1.0)*r00*x8630)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((-0.37429)*x8623))+(((0.37429)*x8621))+(((0.069)*x8612))+(((-0.37429)*x8622))+((r01*x8632))+((r00*x8633))+(((-0.069)*x8624))+((r02*x8631))+(((-0.069)*x8625)));
evalcond[5]=((((-1.0)*cj12*x8634))+(((-1.0)*(1.0)*py))+((r11*x8632))+(((-0.37429)*x8620))+(((0.069)*x8613))+((r10*x8633))+(((-0.37429)*x8618))+(((0.37429)*x8616))+((r12*x8631))+x8634);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8635=(cj12*cj15);
IkReal x8636=(cj15*sj12);
IkReal x8637=(cj16*r01);
IkReal x8638=(sj12*sj15);
IkReal x8639=(r00*sj16);
IkReal x8640=(cj16*r11);
IkReal x8641=((1.0)*cj12*sj15);
IkReal x8642=(r10*sj16);
IkReal x8643=((1.0)*sj12*sj15);
if( IKabs(((((-1.0)*x8640*x8641))+(((-1.0)*r02*x8636))+((r12*x8635))+(((-1.0)*x8641*x8642))+((x8637*x8638))+((x8638*x8639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x8640*x8643))+((r12*x8636))+(((-1.0)*x8642*x8643))+(((-1.0)*x8637*x8641))+(((-1.0)*x8639*x8641))+((r02*x8635)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x8640*x8641))+(((-1.0)*r02*x8636))+((r12*x8635))+(((-1.0)*x8641*x8642))+((x8637*x8638))+((x8638*x8639))))+IKsqr(((((-1.0)*x8640*x8643))+((r12*x8636))+(((-1.0)*x8642*x8643))+(((-1.0)*x8637*x8641))+(((-1.0)*x8639*x8641))+((r02*x8635))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x8640*x8641))+(((-1.0)*r02*x8636))+((r12*x8635))+(((-1.0)*x8641*x8642))+((x8637*x8638))+((x8638*x8639))), ((((-1.0)*x8640*x8643))+((r12*x8636))+(((-1.0)*x8642*x8643))+(((-1.0)*x8637*x8641))+(((-1.0)*x8639*x8641))+((r02*x8635))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8644=IKsin(j10);
IkReal x8645=(cj12*x8644);
IkReal x8646=(cj15*r12);
IkReal x8647=IKcos(j10);
IkReal x8648=(sj12*x8647);
IkReal x8649=(cj16*sj15);
IkReal x8650=(r11*x8649);
IkReal x8651=(sj15*sj16);
IkReal x8652=(r10*x8651);
IkReal x8653=(cj12*x8647);
IkReal x8654=((((-1.0)*sj12*x8644))+x8653);
IkReal x8655=(cj15*r02);
IkReal x8656=(r01*x8649);
IkReal x8657=(r00*x8651);
IkReal x8658=(cj14*cj16);
IkReal x8659=((1.0)*cj14*sj16);
IkReal x8660=((1.0)*sj14*sj15);
IkReal x8661=((1.0)*cj15*cj16*sj14);
IkReal x8662=((1.0)*cj15*sj14*sj16);
IkReal x8663=((0.01)*sj15);
IkReal x8664=((0.069)*x8644);
IkReal x8665=((0.01)*cj15*cj16);
IkReal x8666=((0.01)*cj15*sj16);
evalcond[0]=(x8648+x8645+x8652+x8650+(((-1.0)*x8646)));
evalcond[1]=((((-1.0)*x8655))+x8654+x8657+x8656);
evalcond[2]=(((r10*x8658))+(((-1.0)*r11*x8659))+(((-1.0)*r11*x8661))+(((-1.0)*r12*x8660))+x8654+(((-1.0)*r10*x8662)));
evalcond[3]=(((r00*x8658))+(((-1.0)*r01*x8659))+(((-1.0)*x8648))+(((-1.0)*r00*x8662))+(((-1.0)*r02*x8660))+(((-1.0)*r01*x8661))+(((-1.0)*x8645)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.069)*x8647))+(((0.069)*x8653))+((r00*x8666))+(((0.37429)*x8655))+((r02*x8663))+((r01*x8665))+(((-0.37429)*x8657))+(((-0.37429)*x8656))+(((-1.0)*sj12*x8664)));
evalcond[5]=((((-0.37429)*x8652))+(((-1.0)*(1.0)*py))+((r10*x8666))+(((-0.37429)*x8650))+(((0.069)*x8645))+(((0.069)*x8648))+((r12*x8663))+((r11*x8665))+x8664+(((0.37429)*x8646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8667=(cj16*sj15);
IkReal x8668=(sj15*sj16);
if( IKabs((((r01*x8667))+((r00*x8668))+(((-1.0)*(1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x8668))+((cj15*r12))+(((-1.0)*r11*x8667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x8667))+((r00*x8668))+(((-1.0)*(1.0)*cj15*r02))))+IKsqr(((((-1.0)*r10*x8668))+((cj15*r12))+(((-1.0)*r11*x8667))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x8667))+((r00*x8668))+(((-1.0)*(1.0)*cj15*r02))), ((((-1.0)*r10*x8668))+((cj15*r12))+(((-1.0)*r11*x8667))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x8669=IKcos(j10);
IkReal x8670=(cj15*r12);
IkReal x8671=(cj16*sj15);
IkReal x8672=(r11*x8671);
IkReal x8673=(sj15*sj16);
IkReal x8674=(r10*x8673);
IkReal x8675=(cj15*r02);
IkReal x8676=(r01*x8671);
IkReal x8677=(r00*x8673);
IkReal x8678=IKsin(j10);
IkReal x8679=((1.0)*x8678);
IkReal x8680=(cj14*cj16);
IkReal x8681=((1.0)*cj14*sj16);
IkReal x8682=((1.0)*sj14*sj15);
IkReal x8683=((1.0)*cj15*cj16*sj14);
IkReal x8684=((1.0)*cj15*sj14*sj16);
IkReal x8685=(sj14*sj16);
IkReal x8686=((1.0)*cj14*sj15);
IkReal x8687=((1.0)*cj16*sj14);
IkReal x8688=((1.0)*cj14*cj15*cj16);
IkReal x8689=((1.0)*cj14*cj15*sj16);
IkReal x8690=((0.01)*sj15);
IkReal x8691=((0.069)*x8678);
IkReal x8692=((0.069)*x8669);
IkReal x8693=((0.36442)*cj11);
IkReal x8694=((0.01)*cj15*cj16);
IkReal x8695=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x8670))+x8669+x8674+x8672);
evalcond[1]=((((-1.0)*x8679))+(((-1.0)*x8675))+x8677+x8676);
evalcond[2]=((((-1.0)*r11*x8681))+((sj11*x8678))+(((-1.0)*r11*x8683))+(((-1.0)*r12*x8682))+((r10*x8680))+(((-1.0)*r10*x8684)));
evalcond[3]=((((-1.0)*r02*x8682))+((r00*x8680))+(((-1.0)*r00*x8684))+(((-1.0)*r01*x8681))+(((-1.0)*r01*x8683))+((sj11*x8669)));
evalcond[4]=((((-1.0)*r01*x8688))+(((-1.0)*r00*x8689))+(((-1.0)*cj11*x8669))+((r01*x8685))+(((-1.0)*r00*x8687))+(((-1.0)*r02*x8686)));
evalcond[5]=(((r11*x8685))+(((-1.0)*r10*x8689))+(((-1.0)*r10*x8687))+(((-1.0)*r11*x8688))+(((-1.0)*cj11*x8679))+(((-1.0)*r12*x8686)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*x8691))+(((-0.37429)*x8676))+(((-0.37429)*x8677))+((x8669*x8693))+(((0.37429)*x8675))+((r01*x8694))+x8692+((r00*x8695))+((r02*x8690)));
evalcond[7]=((((-0.37429)*x8674))+(((-1.0)*(1.0)*py))+((r10*x8695))+(((-0.37429)*x8672))+((r12*x8690))+((x8678*x8693))+x8692+x8691+((r11*x8694))+(((0.37429)*x8670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8696=(cj16*sj15);
IkReal x8697=(sj15*sj16);
if( IKabs(((((-1.0)*r00*x8697))+((cj15*r02))+(((-1.0)*r01*x8696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8697))+((r11*x8696))+(((-1.0)*(1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x8697))+((cj15*r02))+(((-1.0)*r01*x8696))))+IKsqr((((r10*x8697))+((r11*x8696))+(((-1.0)*(1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x8697))+((cj15*r02))+(((-1.0)*r01*x8696))), (((r10*x8697))+((r11*x8696))+(((-1.0)*(1.0)*cj15*r12))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x8698=IKsin(j10);
IkReal x8699=(cj15*r02);
IkReal x8700=(cj16*sj15);
IkReal x8701=(r01*x8700);
IkReal x8702=(sj15*sj16);
IkReal x8703=(r00*x8702);
IkReal x8704=(cj15*r12);
IkReal x8705=(r11*x8700);
IkReal x8706=(r10*x8702);
IkReal x8707=IKcos(j10);
IkReal x8708=((1.0)*x8707);
IkReal x8709=(cj14*cj16);
IkReal x8710=((1.0)*cj14*sj16);
IkReal x8711=((1.0)*sj14*sj15);
IkReal x8712=((1.0)*cj15*cj16*sj14);
IkReal x8713=((1.0)*cj15*sj14*sj16);
IkReal x8714=(sj14*sj16);
IkReal x8715=((1.0)*cj14*sj15);
IkReal x8716=((1.0)*cj16*sj14);
IkReal x8717=((1.0)*cj14*cj15*cj16);
IkReal x8718=((1.0)*cj14*cj15*sj16);
IkReal x8719=(cj11*x8698);
IkReal x8720=((0.01)*sj15);
IkReal x8721=((0.069)*x8698);
IkReal x8722=((0.069)*x8707);
IkReal x8723=((0.01)*cj15*cj16);
IkReal x8724=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x8699))+x8701+x8703+x8698);
evalcond[1]=(x8706+x8705+(((-1.0)*x8708))+(((-1.0)*x8704)));
evalcond[2]=((((-1.0)*r11*x8712))+(((-1.0)*sj11*x8698))+(((-1.0)*r10*x8713))+((r10*x8709))+(((-1.0)*r11*x8710))+(((-1.0)*r12*x8711)));
evalcond[3]=((((-1.0)*sj11*x8708))+(((-1.0)*r01*x8712))+(((-1.0)*r01*x8710))+(((-1.0)*r00*x8713))+((r00*x8709))+(((-1.0)*r02*x8711)));
evalcond[4]=((((-1.0)*r01*x8717))+(((-1.0)*r00*x8718))+(((-1.0)*r00*x8716))+(((-1.0)*r02*x8715))+((r01*x8714))+(((-1.0)*cj11*x8708)));
evalcond[5]=((((-1.0)*r10*x8716))+(((-1.0)*r11*x8717))+((r11*x8714))+(((-1.0)*r12*x8715))+(((-1.0)*x8719))+(((-1.0)*r10*x8718)));
evalcond[6]=((((0.37429)*x8699))+(((-1.0)*(1.0)*px))+x8722+x8721+((r01*x8723))+((r02*x8720))+(((0.36442)*cj11*x8707))+(((-0.37429)*x8703))+((r00*x8724))+(((-0.37429)*x8701)));
evalcond[7]=(((r10*x8724))+(((-1.0)*x8722))+(((-1.0)*(1.0)*py))+(((-0.37429)*x8706))+(((0.36442)*x8719))+x8721+((r12*x8720))+(((-0.37429)*x8705))+((r11*x8723))+(((0.37429)*x8704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
IkReal x8725=(cj16*sj15);
IkReal x8726=(sj15*sj16);
j10eval[0]=sj12;
j10eval[1]=IKsign(sj12);
j10eval[2]=((IKabs(((((-1.0)*r10*x8726))+(((-1.0)*r11*x8725))+((cj15*r12)))))+(IKabs((((r00*x8726))+((r01*x8725))+(((-1.0)*(1.0)*cj15*r02))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j10eval[0]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j10eval[0]=sj12;
j10eval[1]=cj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8727=(cj14*cj16);
IkReal x8728=((1.0)*r01);
IkReal x8729=(cj14*sj16);
IkReal x8730=(sj14*sj15);
IkReal x8731=(cj15*cj16*sj14);
IkReal x8732=(cj15*sj14*sj16);
if( IKabs(((((-1.0)*r02*x8730))+(((-1.0)*x8728*x8729))+(((-1.0)*x8728*x8731))+(((-1.0)*r00*x8732))+((r00*x8727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x8729))+((r10*x8732))+((r11*x8731))+((r12*x8730))+(((-1.0)*r10*x8727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x8730))+(((-1.0)*x8728*x8729))+(((-1.0)*x8728*x8731))+(((-1.0)*r00*x8732))+((r00*x8727))))+IKsqr((((r11*x8729))+((r10*x8732))+((r11*x8731))+((r12*x8730))+(((-1.0)*r10*x8727))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r02*x8730))+(((-1.0)*x8728*x8729))+(((-1.0)*x8728*x8731))+(((-1.0)*r00*x8732))+((r00*x8727))), (((r11*x8729))+((r10*x8732))+((r11*x8731))+((r12*x8730))+(((-1.0)*r10*x8727))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8733=IKcos(j10);
IkReal x8734=(cj14*cj16);
IkReal x8735=((1.0)*cj14*sj16);
IkReal x8736=((1.0)*sj14*sj15);
IkReal x8737=((1.0)*cj15*cj16*sj14);
IkReal x8738=((1.0)*cj15*sj14*sj16);
IkReal x8739=IKsin(j10);
IkReal x8740=((-1.0)*x8739);
IkReal x8741=(sj14*sj16);
IkReal x8742=((1.0)*cj14*sj15);
IkReal x8743=((1.0)*cj16*sj14);
IkReal x8744=((1.0)*cj14*cj15*cj16);
IkReal x8745=((1.0)*cj14*cj15*sj16);
IkReal x8746=((0.37429)*cj15);
IkReal x8747=((0.01)*sj15);
IkReal x8748=((0.01)*cj15*cj16);
IkReal x8749=((0.01)*cj15*sj16);
IkReal x8750=((0.37429)*cj16*sj15);
IkReal x8751=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r10*x8738))+(((-1.0)*r12*x8736))+(((-1.0)*r11*x8737))+(((-1.0)*r11*x8735))+((r10*x8734))+x8733);
evalcond[1]=(((r00*x8734))+x8740+(((-1.0)*r01*x8735))+(((-1.0)*r00*x8738))+(((-1.0)*r01*x8737))+(((-1.0)*r02*x8736)));
evalcond[2]=(((r01*x8741))+(((-1.0)*r00*x8743))+(((-1.0)*x8733))+(((-1.0)*r01*x8744))+(((-1.0)*r02*x8742))+(((-1.0)*r00*x8745)));
evalcond[3]=((((-1.0)*r10*x8743))+((r11*x8741))+x8740+(((-1.0)*r11*x8744))+(((-1.0)*r10*x8745))+(((-1.0)*r12*x8742)));
evalcond[4]=(((r02*x8746))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x8750))+((r00*x8749))+(((-1.0)*r00*x8751))+(((0.43342)*x8733))+((r01*x8748))+((r02*x8747)));
evalcond[5]=(((r10*x8749))+((r12*x8747))+(((-1.0)*(1.0)*py))+((r12*x8746))+((r11*x8748))+(((-1.0)*r11*x8750))+(((0.43342)*x8739))+(((-1.0)*r10*x8751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8752=(cj14*sj16);
IkReal x8753=(sj14*sj15);
IkReal x8754=(cj14*cj16);
IkReal x8755=(cj15*cj16*sj14);
IkReal x8756=(cj15*sj14*sj16);
IkReal x8757=((1.0)*r11);
if( IKabs((((r00*x8756))+((r01*x8755))+(((-1.0)*r00*x8754))+((r01*x8752))+((r02*x8753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x8752*x8757))+(((-1.0)*x8755*x8757))+(((-1.0)*r10*x8756))+((r10*x8754))+(((-1.0)*r12*x8753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x8756))+((r01*x8755))+(((-1.0)*r00*x8754))+((r01*x8752))+((r02*x8753))))+IKsqr(((((-1.0)*x8752*x8757))+(((-1.0)*x8755*x8757))+(((-1.0)*r10*x8756))+((r10*x8754))+(((-1.0)*r12*x8753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r00*x8756))+((r01*x8755))+(((-1.0)*r00*x8754))+((r01*x8752))+((r02*x8753))), ((((-1.0)*x8752*x8757))+(((-1.0)*x8755*x8757))+(((-1.0)*r10*x8756))+((r10*x8754))+(((-1.0)*r12*x8753))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8758=IKsin(j10);
IkReal x8759=(cj14*cj16);
IkReal x8760=((1.0)*cj14*sj16);
IkReal x8761=((1.0)*sj14*sj15);
IkReal x8762=((1.0)*cj15*cj16*sj14);
IkReal x8763=((1.0)*cj15*sj14*sj16);
IkReal x8764=IKcos(j10);
IkReal x8765=((-1.0)*x8764);
IkReal x8766=(sj14*sj16);
IkReal x8767=((1.0)*cj14*sj15);
IkReal x8768=((1.0)*cj16*sj14);
IkReal x8769=((1.0)*cj14*cj15*cj16);
IkReal x8770=((1.0)*cj14*cj15*sj16);
IkReal x8771=((0.37429)*cj15);
IkReal x8772=((0.01)*sj15);
IkReal x8773=((0.01)*cj15*cj16);
IkReal x8774=((0.01)*cj15*sj16);
IkReal x8775=((0.37429)*cj16*sj15);
IkReal x8776=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r01*x8762))+((r00*x8759))+(((-1.0)*r02*x8761))+x8758+(((-1.0)*r01*x8760))+(((-1.0)*r00*x8763)));
evalcond[1]=((((-1.0)*r12*x8761))+x8765+(((-1.0)*r11*x8760))+(((-1.0)*r10*x8763))+((r10*x8759))+(((-1.0)*r11*x8762)));
evalcond[2]=((((-1.0)*r01*x8769))+x8765+(((-1.0)*r00*x8770))+(((-1.0)*r02*x8767))+(((-1.0)*r00*x8768))+((r01*x8766)));
evalcond[3]=((((-1.0)*r10*x8768))+(((-1.0)*x8758))+(((-1.0)*r11*x8769))+((r11*x8766))+(((-1.0)*r12*x8767))+(((-1.0)*r10*x8770)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x8775))+((r01*x8773))+(((-1.0)*r00*x8776))+((r02*x8772))+((r02*x8771))+(((0.43342)*x8764))+((r00*x8774)));
evalcond[5]=((((-1.0)*r10*x8776))+((r12*x8772))+(((-1.0)*(1.0)*py))+((r12*x8771))+((r11*x8773))+((r10*x8774))+(((-1.0)*r11*x8775))+(((0.43342)*x8758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8777=(cj16*sj15);
IkReal x8778=(sj15*sj16);
if( IKabs((((r00*x8778))+((r01*x8777))+(((-1.0)*(1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x8778))+((cj15*r12))+(((-1.0)*r11*x8777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x8778))+((r01*x8777))+(((-1.0)*(1.0)*cj15*r02))))+IKsqr(((((-1.0)*r10*x8778))+((cj15*r12))+(((-1.0)*r11*x8777))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r00*x8778))+((r01*x8777))+(((-1.0)*(1.0)*cj15*r02))), ((((-1.0)*r10*x8778))+((cj15*r12))+(((-1.0)*r11*x8777))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8779=IKcos(j10);
IkReal x8780=(cj15*r12);
IkReal x8781=(cj16*sj15);
IkReal x8782=(r11*x8781);
IkReal x8783=(sj15*sj16);
IkReal x8784=(r10*x8783);
IkReal x8785=(cj15*r02);
IkReal x8786=(r01*x8781);
IkReal x8787=(r00*x8783);
IkReal x8788=IKsin(j10);
IkReal x8789=((-1.0)*x8788);
IkReal x8790=(sj14*sj16);
IkReal x8791=((1.0)*cj14*sj15);
IkReal x8792=((1.0)*cj16*sj14);
IkReal x8793=((1.0)*cj14*cj15*cj16);
IkReal x8794=((1.0)*cj14*cj15*sj16);
IkReal x8795=((0.01)*sj15);
IkReal x8796=((0.01)*cj15*cj16);
IkReal x8797=((0.01)*cj15*sj16);
evalcond[0]=(x8779+(((-1.0)*x8780))+x8784+x8782);
evalcond[1]=((((-1.0)*x8785))+x8787+x8786+x8789);
evalcond[2]=((((-1.0)*r00*x8794))+(((-1.0)*x8779))+(((-1.0)*r00*x8792))+((r01*x8790))+(((-1.0)*r01*x8793))+(((-1.0)*r02*x8791)));
evalcond[3]=((((-1.0)*r10*x8794))+(((-1.0)*r10*x8792))+x8789+(((-1.0)*r12*x8791))+(((-1.0)*r11*x8793))+((r11*x8790)));
evalcond[4]=((((-0.069)*x8788))+(((-1.0)*(1.0)*px))+((r02*x8795))+((r01*x8796))+((r00*x8797))+(((-0.37429)*x8787))+(((-0.37429)*x8786))+(((0.37429)*x8785))+(((0.43342)*x8779)));
evalcond[5]=((((-1.0)*(1.0)*py))+(((-0.37429)*x8782))+(((-0.37429)*x8784))+(((0.069)*x8779))+(((0.37429)*x8780))+((r12*x8795))+((r10*x8797))+(((0.43342)*x8788))+((r11*x8796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8798=(cj16*sj15);
IkReal x8799=(sj15*sj16);
if( IKabs(((((-1.0)*r01*x8798))+(((-1.0)*r00*x8799))+((cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8799))+((r11*x8798))+(((-1.0)*(1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x8798))+(((-1.0)*r00*x8799))+((cj15*r02))))+IKsqr((((r10*x8799))+((r11*x8798))+(((-1.0)*(1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r01*x8798))+(((-1.0)*r00*x8799))+((cj15*r02))), (((r10*x8799))+((r11*x8798))+(((-1.0)*(1.0)*cj15*r12))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8800=IKsin(j10);
IkReal x8801=(cj15*r02);
IkReal x8802=(cj16*sj15);
IkReal x8803=(r01*x8802);
IkReal x8804=(sj15*sj16);
IkReal x8805=(r00*x8804);
IkReal x8806=(cj15*r12);
IkReal x8807=(r11*x8802);
IkReal x8808=(r10*x8804);
IkReal x8809=IKcos(j10);
IkReal x8810=((-1.0)*x8809);
IkReal x8811=(sj14*sj16);
IkReal x8812=((1.0)*cj14*sj15);
IkReal x8813=((1.0)*cj16*sj14);
IkReal x8814=((1.0)*cj14*cj15*cj16);
IkReal x8815=((1.0)*cj14*cj15*sj16);
IkReal x8816=((0.01)*sj15);
IkReal x8817=((0.01)*cj15*cj16);
IkReal x8818=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x8801))+x8803+x8805+x8800);
evalcond[1]=((((-1.0)*x8806))+x8808+x8807+x8810);
evalcond[2]=((((-1.0)*r00*x8813))+(((-1.0)*r00*x8815))+((r01*x8811))+(((-1.0)*r01*x8814))+x8810+(((-1.0)*r02*x8812)));
evalcond[3]=((((-1.0)*r11*x8814))+(((-1.0)*r10*x8813))+(((-1.0)*r10*x8815))+((r11*x8811))+(((-1.0)*x8800))+(((-1.0)*r12*x8812)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.37429)*x8801))+(((0.43342)*x8809))+(((0.069)*x8800))+(((-0.37429)*x8805))+((r02*x8816))+((r01*x8817))+((r00*x8818))+(((-0.37429)*x8803)));
evalcond[5]=((((-1.0)*(1.0)*py))+(((-0.37429)*x8808))+((r11*x8817))+((r10*x8818))+(((-0.069)*x8809))+((r12*x8816))+(((0.37429)*x8806))+(((-0.37429)*x8807))+(((0.43342)*x8800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8819=(cj15*sj14);
CheckValue<IkReal> x8820=IKPowWithIntegerCheck(sj12,-1);
if(!x8820.valid){
continue;
}
CheckValue<IkReal> x8821=IKPowWithIntegerCheck(cj12,-1);
if(!x8821.valid){
continue;
}
if( IKabs(((x8820.value)*((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8821.value)*((((r10*sj16*x8819))+((cj16*r11*x8819))+((r12*sj14*sj15))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8820.value)*((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02))))))+IKsqr(((x8821.value)*((((r10*sj16*x8819))+((cj16*r11*x8819))+((r12*sj14*sj15))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x8820.value)*((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02))))), ((x8821.value)*((((r10*sj16*x8819))+((cj16*r11*x8819))+((r12*sj14*sj15))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x8822=(cj15*r12);
IkReal x8823=IKcos(j10);
IkReal x8824=(sj12*x8823);
IkReal x8825=(cj16*sj15);
IkReal x8826=(r11*x8825);
IkReal x8827=(sj15*sj16);
IkReal x8828=(r10*x8827);
IkReal x8829=(cj15*r02);
IkReal x8830=(r01*x8825);
IkReal x8831=(r00*x8827);
IkReal x8832=IKsin(j10);
IkReal x8833=((1.0)*x8832);
IkReal x8834=(cj14*cj16);
IkReal x8835=((1.0)*cj14*sj16);
IkReal x8836=((1.0)*sj14*sj15);
IkReal x8837=((1.0)*cj15*cj16*sj14);
IkReal x8838=((1.0)*cj15*sj14*sj16);
IkReal x8839=(sj14*sj16);
IkReal x8840=((1.0)*cj14*sj15);
IkReal x8841=((1.0)*cj16*sj14);
IkReal x8842=((1.0)*cj14*cj15*cj16);
IkReal x8843=((1.0)*cj14*cj15*sj16);
IkReal x8844=((0.01)*sj15);
IkReal x8845=((0.01)*cj15*cj16);
IkReal x8846=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x8822))+x8824+x8826+x8828);
evalcond[1]=((((-1.0)*sj12*x8833))+x8830+x8831+(((-1.0)*x8829)));
evalcond[2]=(((r10*x8834))+(((-1.0)*r10*x8838))+(((-1.0)*r11*x8835))+(((-1.0)*r12*x8836))+((cj12*x8823))+(((-1.0)*r11*x8837)));
evalcond[3]=((((-1.0)*r02*x8840))+(((-1.0)*r01*x8842))+(((-1.0)*r00*x8843))+(((-1.0)*r00*x8841))+((r01*x8839))+(((-1.0)*x8823)));
evalcond[4]=((((-1.0)*r12*x8840))+(((-1.0)*x8833))+(((-1.0)*r10*x8841))+(((-1.0)*r11*x8842))+(((-1.0)*r10*x8843))+((r11*x8839)));
evalcond[5]=(((r00*x8834))+(((-1.0)*cj12*x8833))+(((-1.0)*r00*x8838))+(((-1.0)*r01*x8837))+(((-1.0)*r02*x8836))+(((-1.0)*r01*x8835)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r01*x8845))+((r02*x8844))+(((0.37429)*x8829))+(((0.43342)*x8823))+(((-0.37429)*x8830))+((r00*x8846))+(((-0.37429)*x8831))+(((-0.069)*sj12*x8832)));
evalcond[7]=((((-0.37429)*x8828))+(((0.37429)*x8822))+(((-1.0)*(1.0)*py))+(((0.43342)*x8832))+((r11*x8845))+((r10*x8846))+(((0.069)*x8824))+(((-0.37429)*x8826))+((r12*x8844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8847=((1.0)*sj15);
IkReal x8848=(cj14*cj15);
CheckValue<IkReal> x8849=IKPowWithIntegerCheck(sj12,-1);
if(!x8849.valid){
continue;
}
if( IKabs(((((-1.0)*r10*sj16*x8848))+(((-1.0)*cj16*r11*x8848))+((r11*sj14*sj16))+(((-1.0)*cj14*r12*x8847))+(((-1.0)*cj16*r10*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8849.value)*((((cj15*r12))+(((-1.0)*cj16*r11*x8847))+(((-1.0)*r10*sj16*x8847)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj16*x8848))+(((-1.0)*cj16*r11*x8848))+((r11*sj14*sj16))+(((-1.0)*cj14*r12*x8847))+(((-1.0)*cj16*r10*sj14))))+IKsqr(((x8849.value)*((((cj15*r12))+(((-1.0)*cj16*r11*x8847))+(((-1.0)*r10*sj16*x8847))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*sj16*x8848))+(((-1.0)*cj16*r11*x8848))+((r11*sj14*sj16))+(((-1.0)*cj14*r12*x8847))+(((-1.0)*cj16*r10*sj14))), ((x8849.value)*((((cj15*r12))+(((-1.0)*cj16*r11*x8847))+(((-1.0)*r10*sj16*x8847))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x8850=(cj15*r12);
IkReal x8851=IKcos(j10);
IkReal x8852=(sj12*x8851);
IkReal x8853=(cj16*sj15);
IkReal x8854=(r11*x8853);
IkReal x8855=(sj15*sj16);
IkReal x8856=(r10*x8855);
IkReal x8857=(cj15*r02);
IkReal x8858=(r01*x8853);
IkReal x8859=(r00*x8855);
IkReal x8860=IKsin(j10);
IkReal x8861=((1.0)*x8860);
IkReal x8862=(cj14*cj16);
IkReal x8863=((1.0)*cj14*sj16);
IkReal x8864=((1.0)*sj14*sj15);
IkReal x8865=((1.0)*cj15*cj16*sj14);
IkReal x8866=((1.0)*cj15*sj14*sj16);
IkReal x8867=(sj14*sj16);
IkReal x8868=((1.0)*cj14*sj15);
IkReal x8869=((1.0)*cj16*sj14);
IkReal x8870=((1.0)*cj14*cj15*cj16);
IkReal x8871=((1.0)*cj14*cj15*sj16);
IkReal x8872=((0.01)*sj15);
IkReal x8873=((0.01)*cj15*cj16);
IkReal x8874=((0.01)*cj15*sj16);
evalcond[0]=(x8856+x8854+x8852+(((-1.0)*x8850)));
evalcond[1]=((((-1.0)*sj12*x8861))+(((-1.0)*x8857))+x8859+x8858);
evalcond[2]=((((-1.0)*r12*x8864))+((r10*x8862))+(((-1.0)*r11*x8865))+((cj12*x8851))+(((-1.0)*r11*x8863))+(((-1.0)*r10*x8866)));
evalcond[3]=(((r01*x8867))+(((-1.0)*r02*x8868))+(((-1.0)*r01*x8870))+(((-1.0)*x8851))+(((-1.0)*r00*x8869))+(((-1.0)*r00*x8871)));
evalcond[4]=((((-1.0)*r10*x8871))+((r11*x8867))+(((-1.0)*x8861))+(((-1.0)*r12*x8868))+(((-1.0)*r11*x8870))+(((-1.0)*r10*x8869)));
evalcond[5]=((((-1.0)*r02*x8864))+((r00*x8862))+(((-1.0)*r00*x8866))+(((-1.0)*r01*x8865))+(((-1.0)*r01*x8863))+(((-1.0)*cj12*x8861)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((0.43342)*x8851))+((r02*x8872))+(((-0.069)*sj12*x8860))+(((-0.37429)*x8859))+((r00*x8874))+(((-0.37429)*x8858))+((r01*x8873))+(((0.37429)*x8857)));
evalcond[7]=((((-0.37429)*x8856))+(((0.37429)*x8850))+(((-1.0)*(1.0)*py))+((r11*x8873))+(((-0.37429)*x8854))+((r12*x8872))+(((0.43342)*x8860))+((r10*x8874))+(((0.069)*x8852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8875=(cj16*sj15);
IkReal x8876=(sj15*sj16);
CheckValue<IkReal> x8877=IKPowWithIntegerCheck(IKsign(sj12),-1);
if(!x8877.valid){
continue;
}
CheckValue<IkReal> x8878 = IKatan2WithCheck(IkReal((((r00*x8876))+((r01*x8875))+(((-1.0)*(1.0)*cj15*r02)))),IkReal(((((-1.0)*r11*x8875))+(((-1.0)*r10*x8876))+((cj15*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8878.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8877.value)))+(x8878.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x8879=(cj15*r12);
IkReal x8880=IKcos(j10);
IkReal x8881=(sj12*x8880);
IkReal x8882=(cj16*sj15);
IkReal x8883=(r11*x8882);
IkReal x8884=(sj15*sj16);
IkReal x8885=(r10*x8884);
IkReal x8886=(cj15*r02);
IkReal x8887=(r01*x8882);
IkReal x8888=(r00*x8884);
IkReal x8889=IKsin(j10);
IkReal x8890=((1.0)*x8889);
IkReal x8891=(cj14*cj16);
IkReal x8892=((1.0)*cj14*sj16);
IkReal x8893=((1.0)*sj14*sj15);
IkReal x8894=((1.0)*cj15*cj16*sj14);
IkReal x8895=((1.0)*cj15*sj14*sj16);
IkReal x8896=(sj14*sj16);
IkReal x8897=((1.0)*cj14*sj15);
IkReal x8898=((1.0)*cj16*sj14);
IkReal x8899=((1.0)*cj14*cj15*cj16);
IkReal x8900=((1.0)*cj14*cj15*sj16);
IkReal x8901=((0.01)*sj15);
IkReal x8902=((0.01)*cj15*cj16);
IkReal x8903=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x8879))+x8883+x8881+x8885);
evalcond[1]=((((-1.0)*x8886))+(((-1.0)*sj12*x8890))+x8887+x8888);
evalcond[2]=(((r10*x8891))+(((-1.0)*r11*x8894))+(((-1.0)*r10*x8895))+(((-1.0)*r12*x8893))+(((-1.0)*r11*x8892))+((cj12*x8880)));
evalcond[3]=((((-1.0)*r02*x8897))+(((-1.0)*r00*x8900))+(((-1.0)*x8880))+((r01*x8896))+(((-1.0)*r00*x8898))+(((-1.0)*r01*x8899)));
evalcond[4]=(((r11*x8896))+(((-1.0)*r10*x8900))+(((-1.0)*r11*x8899))+(((-1.0)*r10*x8898))+(((-1.0)*r12*x8897))+(((-1.0)*x8890)));
evalcond[5]=((((-1.0)*r01*x8894))+(((-1.0)*r01*x8892))+(((-1.0)*r00*x8895))+(((-1.0)*cj12*x8890))+((r00*x8891))+(((-1.0)*r02*x8893)));
evalcond[6]=(((r01*x8902))+(((-1.0)*(1.0)*px))+(((-0.37429)*x8888))+(((0.43342)*x8880))+((r00*x8903))+(((-0.069)*sj12*x8889))+(((0.37429)*x8886))+((r02*x8901))+(((-0.37429)*x8887)));
evalcond[7]=((((-0.37429)*x8883))+(((-1.0)*(1.0)*py))+(((0.069)*x8881))+(((0.43342)*x8889))+((r11*x8902))+((r10*x8903))+(((-0.37429)*x8885))+((r12*x8901))+(((0.37429)*x8879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x8904=(cj16*sj15);
IkReal x8905=(sj15*sj16);
j10eval[0]=sj12;
j10eval[1]=IKsign(sj12);
j10eval[2]=((IKabs((((r00*x8905))+((r01*x8904))+(((-1.0)*(1.0)*cj15*r02)))))+(IKabs((((cj15*r12))+(((-1.0)*r11*x8904))+(((-1.0)*r10*x8905))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j10eval[0]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j10eval[0]=cj12;
j10eval[1]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8906=(cj16*sj15);
IkReal x8907=(sj15*sj16);
if( IKabs((((r01*x8906))+((r00*x8907))+(((-1.0)*(1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8906))+((cj15*r12))+(((-1.0)*r10*x8907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x8906))+((r00*x8907))+(((-1.0)*(1.0)*cj15*r02))))+IKsqr(((((-1.0)*r11*x8906))+((cj15*r12))+(((-1.0)*r10*x8907))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x8906))+((r00*x8907))+(((-1.0)*(1.0)*cj15*r02))), ((((-1.0)*r11*x8906))+((cj15*r12))+(((-1.0)*r10*x8907))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8908=IKcos(j10);
IkReal x8909=(cj15*r12);
IkReal x8910=(cj16*sj15);
IkReal x8911=(r11*x8910);
IkReal x8912=(sj15*sj16);
IkReal x8913=(r10*x8912);
IkReal x8914=(cj15*r02);
IkReal x8915=(r01*x8910);
IkReal x8916=(r00*x8912);
IkReal x8917=IKsin(j10);
IkReal x8918=(sj14*sj16);
IkReal x8919=((1.0)*cj14*sj15);
IkReal x8920=((1.0)*cj16*sj14);
IkReal x8921=((1.0)*cj14*cj15*cj16);
IkReal x8922=((1.0)*cj14*cj15*sj16);
IkReal x8923=((0.01)*sj15);
IkReal x8924=((0.01)*cj15*cj16);
IkReal x8925=((0.01)*cj15*sj16);
evalcond[0]=(x8913+x8911+x8908+(((-1.0)*x8909)));
evalcond[1]=((((-1.0)*x8917))+x8915+x8916+(((-1.0)*x8914)));
evalcond[2]=((((-1.0)*r02*x8919))+(((-1.0)*r00*x8922))+(((-1.0)*r01*x8921))+x8908+(((-1.0)*r00*x8920))+((r01*x8918)));
evalcond[3]=(x8917+(((-1.0)*r10*x8920))+(((-1.0)*r11*x8921))+((r11*x8918))+(((-1.0)*r10*x8922))+(((-1.0)*r12*x8919)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((-0.37429)*x8915))+((r00*x8925))+(((-0.29542)*x8908))+(((-0.37429)*x8916))+(((-0.069)*x8917))+((r01*x8924))+((r02*x8923))+(((0.37429)*x8914)));
evalcond[5]=(((r10*x8925))+(((-1.0)*(1.0)*py))+(((-0.37429)*x8911))+(((0.37429)*x8909))+(((-0.29542)*x8917))+(((0.069)*x8908))+((r11*x8924))+(((-0.37429)*x8913))+((r12*x8923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8926=(cj16*sj15);
IkReal x8927=(sj15*sj16);
if( IKabs(((((-1.0)*r01*x8926))+((cj15*r02))+(((-1.0)*r00*x8927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x8926))+((r10*x8927))+(((-1.0)*(1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x8926))+((cj15*r02))+(((-1.0)*r00*x8927))))+IKsqr((((r11*x8926))+((r10*x8927))+(((-1.0)*(1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r01*x8926))+((cj15*r02))+(((-1.0)*r00*x8927))), (((r11*x8926))+((r10*x8927))+(((-1.0)*(1.0)*cj15*r12))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8928=IKsin(j10);
IkReal x8929=(cj15*r02);
IkReal x8930=(cj16*sj15);
IkReal x8931=(r01*x8930);
IkReal x8932=(sj15*sj16);
IkReal x8933=(r00*x8932);
IkReal x8934=(cj15*r12);
IkReal x8935=(r11*x8930);
IkReal x8936=(r10*x8932);
IkReal x8937=IKcos(j10);
IkReal x8938=(sj14*sj16);
IkReal x8939=((1.0)*cj14*sj15);
IkReal x8940=((1.0)*cj16*sj14);
IkReal x8941=((1.0)*cj14*cj15*cj16);
IkReal x8942=((1.0)*cj14*cj15*sj16);
IkReal x8943=((0.01)*sj15);
IkReal x8944=((0.01)*cj15*cj16);
IkReal x8945=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x8929))+x8933+x8931+x8928);
evalcond[1]=(x8936+x8935+(((-1.0)*x8937))+(((-1.0)*x8934)));
evalcond[2]=((((-1.0)*r00*x8942))+(((-1.0)*r00*x8940))+(((-1.0)*r01*x8941))+((r01*x8938))+x8937+(((-1.0)*r02*x8939)));
evalcond[3]=((((-1.0)*r10*x8942))+(((-1.0)*r12*x8939))+(((-1.0)*r11*x8941))+(((-1.0)*r10*x8940))+((r11*x8938))+x8928);
evalcond[4]=((((-1.0)*(1.0)*px))+((r01*x8944))+(((-0.29542)*x8937))+(((0.069)*x8928))+((r02*x8943))+((r00*x8945))+(((-0.37429)*x8933))+(((-0.37429)*x8931))+(((0.37429)*x8929)));
evalcond[5]=((((0.37429)*x8934))+(((-1.0)*(1.0)*py))+(((-0.29542)*x8928))+((r12*x8943))+((r11*x8944))+((r10*x8945))+(((-0.37429)*x8935))+(((-0.37429)*x8936))+(((-0.069)*x8937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8946=(r12*sj15);
IkReal x8947=(cj16*r10);
IkReal x8948=(r11*sj16);
IkReal x8949=(cj14*cj15);
IkReal x8950=(cj16*r11);
IkReal x8951=(r10*sj16);
IkReal x8952=(cj15*sj14);
if( IKabs((((sj14*x8947))+(((-1.0)*sj14*x8948))+((cj14*x8946))+((x8949*x8950))+((x8949*x8951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj14*x8947))+((x8951*x8952))+((sj14*x8946))+((cj14*x8948))+((x8950*x8952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj14*x8947))+(((-1.0)*sj14*x8948))+((cj14*x8946))+((x8949*x8950))+((x8949*x8951))))+IKsqr(((((-1.0)*cj14*x8947))+((x8951*x8952))+((sj14*x8946))+((cj14*x8948))+((x8950*x8952))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((sj14*x8947))+(((-1.0)*sj14*x8948))+((cj14*x8946))+((x8949*x8950))+((x8949*x8951))), ((((-1.0)*cj14*x8947))+((x8951*x8952))+((sj14*x8946))+((cj14*x8948))+((x8950*x8952))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8953=IKcos(j10);
IkReal x8954=(cj14*cj16);
IkReal x8955=((1.0)*cj14*sj16);
IkReal x8956=((1.0)*sj14*sj15);
IkReal x8957=((1.0)*cj15*cj16*sj14);
IkReal x8958=((1.0)*cj15*sj14*sj16);
IkReal x8959=(sj14*sj16);
IkReal x8960=((1.0)*cj14*sj15);
IkReal x8961=((1.0)*cj16*sj14);
IkReal x8962=((1.0)*cj14*cj15*cj16);
IkReal x8963=((1.0)*cj14*cj15*sj16);
IkReal x8964=IKsin(j10);
IkReal x8965=((0.37429)*cj15);
IkReal x8966=((0.01)*sj15);
IkReal x8967=((0.01)*cj15*cj16);
IkReal x8968=((0.01)*cj15*sj16);
IkReal x8969=((0.37429)*cj16*sj15);
IkReal x8970=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r10*x8958))+x8953+(((-1.0)*r11*x8955))+(((-1.0)*r11*x8957))+((r10*x8954))+(((-1.0)*r12*x8956)));
evalcond[1]=(x8953+(((-1.0)*r02*x8960))+(((-1.0)*r00*x8963))+((r01*x8959))+(((-1.0)*r01*x8962))+(((-1.0)*r00*x8961)));
evalcond[2]=((((-1.0)*r10*x8961))+x8964+(((-1.0)*r12*x8960))+(((-1.0)*r11*x8962))+((r11*x8959))+(((-1.0)*r10*x8963)));
evalcond[3]=((((-1.0)*r02*x8956))+(((-1.0)*r00*x8958))+(((-1.0)*x8964))+((r00*x8954))+(((-1.0)*r01*x8955))+(((-1.0)*r01*x8957)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r01*x8967))+(((-1.0)*r01*x8969))+(((-0.29542)*x8953))+(((-1.0)*r00*x8970))+((r02*x8965))+((r02*x8966))+((r00*x8968)));
evalcond[5]=(((r10*x8968))+(((-1.0)*(1.0)*py))+(((-0.29542)*x8964))+((r12*x8966))+((r12*x8965))+(((-1.0)*r10*x8970))+(((-1.0)*r11*x8969))+((r11*x8967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8971=(r01*sj16);
IkReal x8972=(r02*sj15);
IkReal x8973=(cj16*r00);
IkReal x8974=(cj15*sj14);
IkReal x8975=(cj16*r01);
IkReal x8976=(r00*sj16);
IkReal x8977=(cj14*cj15);
if( IKabs((((x8974*x8975))+((sj14*x8972))+((cj14*x8971))+((x8974*x8976))+(((-1.0)*cj14*x8973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*x8972))+((sj14*x8973))+(((-1.0)*sj14*x8971))+((x8975*x8977))+((x8976*x8977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x8974*x8975))+((sj14*x8972))+((cj14*x8971))+((x8974*x8976))+(((-1.0)*cj14*x8973))))+IKsqr((((cj14*x8972))+((sj14*x8973))+(((-1.0)*sj14*x8971))+((x8975*x8977))+((x8976*x8977))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x8974*x8975))+((sj14*x8972))+((cj14*x8971))+((x8974*x8976))+(((-1.0)*cj14*x8973))), (((cj14*x8972))+((sj14*x8973))+(((-1.0)*sj14*x8971))+((x8975*x8977))+((x8976*x8977))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x8978=IKsin(j10);
IkReal x8979=(cj14*cj16);
IkReal x8980=((1.0)*cj14*sj16);
IkReal x8981=((1.0)*sj14*sj15);
IkReal x8982=((1.0)*cj15*cj16*sj14);
IkReal x8983=((1.0)*cj15*sj14*sj16);
IkReal x8984=IKcos(j10);
IkReal x8985=(sj14*sj16);
IkReal x8986=((1.0)*cj14*sj15);
IkReal x8987=((1.0)*cj16*sj14);
IkReal x8988=((1.0)*cj14*cj15*cj16);
IkReal x8989=((1.0)*cj14*cj15*sj16);
IkReal x8990=((0.37429)*cj15);
IkReal x8991=((0.01)*sj15);
IkReal x8992=((0.01)*cj15*cj16);
IkReal x8993=((0.01)*cj15*sj16);
IkReal x8994=((0.37429)*cj16*sj15);
IkReal x8995=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r00*x8983))+(((-1.0)*r02*x8981))+x8978+((r00*x8979))+(((-1.0)*r01*x8982))+(((-1.0)*r01*x8980)));
evalcond[1]=(x8984+(((-1.0)*r00*x8987))+((r01*x8985))+(((-1.0)*r02*x8986))+(((-1.0)*r00*x8989))+(((-1.0)*r01*x8988)));
evalcond[2]=(x8978+((r11*x8985))+(((-1.0)*r11*x8988))+(((-1.0)*r12*x8986))+(((-1.0)*r10*x8989))+(((-1.0)*r10*x8987)));
evalcond[3]=((((-1.0)*x8984))+(((-1.0)*r12*x8981))+((r10*x8979))+(((-1.0)*r11*x8982))+(((-1.0)*r11*x8980))+(((-1.0)*r10*x8983)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r02*x8991))+(((-1.0)*r00*x8995))+(((-1.0)*r01*x8994))+((r02*x8990))+(((-0.29542)*x8984))+((r01*x8992))+((r00*x8993)));
evalcond[5]=(((r12*x8991))+(((-1.0)*(1.0)*py))+((r10*x8993))+((r12*x8990))+(((-1.0)*r10*x8995))+(((-1.0)*r11*x8994))+(((-0.29542)*x8978))+((r11*x8992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8996=((1.0)*sj16);
IkReal x8997=((1.0)*sj15);
IkReal x8998=(cj15*sj14);
CheckValue<IkReal> x8999=IKPowWithIntegerCheck(cj12,-1);
if(!x8999.valid){
continue;
}
CheckValue<IkReal> x9000=IKPowWithIntegerCheck(sj12,-1);
if(!x9000.valid){
continue;
}
if( IKabs(((x8999.value)*(((((-1.0)*cj14*r01*x8996))+(((-1.0)*cj16*r01*x8998))+(((-1.0)*r00*sj16*x8998))+(((-1.0)*r02*sj14*x8997))+((cj14*cj16*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9000.value)*(((((-1.0)*r10*sj15*x8996))+(((-1.0)*cj16*r11*x8997))+((cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8999.value)*(((((-1.0)*cj14*r01*x8996))+(((-1.0)*cj16*r01*x8998))+(((-1.0)*r00*sj16*x8998))+(((-1.0)*r02*sj14*x8997))+((cj14*cj16*r00))))))+IKsqr(((x9000.value)*(((((-1.0)*r10*sj15*x8996))+(((-1.0)*cj16*r11*x8997))+((cj15*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x8999.value)*(((((-1.0)*cj14*r01*x8996))+(((-1.0)*cj16*r01*x8998))+(((-1.0)*r00*sj16*x8998))+(((-1.0)*r02*sj14*x8997))+((cj14*cj16*r00))))), ((x9000.value)*(((((-1.0)*r10*sj15*x8996))+(((-1.0)*cj16*r11*x8997))+((cj15*r12))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9001=(cj15*r12);
IkReal x9002=IKcos(j10);
IkReal x9003=(sj12*x9002);
IkReal x9004=(cj16*sj15);
IkReal x9005=(r11*x9004);
IkReal x9006=(sj15*sj16);
IkReal x9007=(r10*x9006);
IkReal x9008=(cj15*r02);
IkReal x9009=(r01*x9004);
IkReal x9010=(r00*x9006);
IkReal x9011=IKsin(j10);
IkReal x9012=((1.0)*x9011);
IkReal x9013=(sj14*sj16);
IkReal x9014=((1.0)*cj14*sj15);
IkReal x9015=((1.0)*cj16*sj14);
IkReal x9016=((1.0)*cj14*cj15*cj16);
IkReal x9017=((1.0)*cj14*cj15*sj16);
IkReal x9018=(cj14*cj16);
IkReal x9019=((1.0)*cj14*sj16);
IkReal x9020=((1.0)*sj14*sj15);
IkReal x9021=((1.0)*cj15*cj16*sj14);
IkReal x9022=((1.0)*cj15*sj14*sj16);
IkReal x9023=((0.01)*sj15);
IkReal x9024=((0.01)*cj15*cj16);
IkReal x9025=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x9001))+x9003+x9007+x9005);
evalcond[1]=(x9010+(((-1.0)*x9008))+(((-1.0)*sj12*x9012))+x9009);
evalcond[2]=((((-1.0)*r00*x9017))+(((-1.0)*r00*x9015))+(((-1.0)*r02*x9014))+(((-1.0)*r01*x9016))+((r01*x9013))+x9002);
evalcond[3]=((((-1.0)*r11*x9016))+x9011+(((-1.0)*r12*x9014))+((r11*x9013))+(((-1.0)*r10*x9015))+(((-1.0)*r10*x9017)));
evalcond[4]=((((-1.0)*r11*x9019))+((cj12*x9002))+(((-1.0)*r11*x9021))+(((-1.0)*r12*x9020))+(((-1.0)*r10*x9022))+((r10*x9018)));
evalcond[5]=((((-1.0)*r00*x9022))+((r00*x9018))+(((-1.0)*r02*x9020))+(((-1.0)*r01*x9019))+(((-1.0)*cj12*x9012))+(((-1.0)*r01*x9021)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x9009))+(((-0.37429)*x9010))+((r01*x9024))+((r00*x9025))+((r02*x9023))+(((-0.29542)*x9002))+(((-0.069)*sj12*x9011))+(((0.37429)*x9008)));
evalcond[7]=((((-0.37429)*x9007))+(((-1.0)*(1.0)*py))+(((0.069)*x9003))+((r11*x9024))+(((0.37429)*x9001))+(((-0.29542)*x9011))+(((-0.37429)*x9005))+((r10*x9025))+((r12*x9023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9026=(cj16*r01);
IkReal x9027=(r00*sj16);
IkReal x9028=(cj14*cj15);
CheckValue<IkReal> x9029=IKPowWithIntegerCheck(sj12,-1);
if(!x9029.valid){
continue;
}
if( IKabs(((x9029.value)*((((sj15*x9027))+((sj15*x9026))+(((-1.0)*(1.0)*cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x9026*x9028))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((x9027*x9028))+((cj16*r00*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9029.value)*((((sj15*x9027))+((sj15*x9026))+(((-1.0)*(1.0)*cj15*r02))))))+IKsqr((((x9026*x9028))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((x9027*x9028))+((cj16*r00*sj14))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x9029.value)*((((sj15*x9027))+((sj15*x9026))+(((-1.0)*(1.0)*cj15*r02))))), (((x9026*x9028))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((x9027*x9028))+((cj16*r00*sj14))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9030=(cj15*r12);
IkReal x9031=IKcos(j10);
IkReal x9032=(sj12*x9031);
IkReal x9033=(cj16*sj15);
IkReal x9034=(r11*x9033);
IkReal x9035=(sj15*sj16);
IkReal x9036=(r10*x9035);
IkReal x9037=(cj15*r02);
IkReal x9038=(r01*x9033);
IkReal x9039=(r00*x9035);
IkReal x9040=IKsin(j10);
IkReal x9041=((1.0)*x9040);
IkReal x9042=(sj14*sj16);
IkReal x9043=((1.0)*cj14*sj15);
IkReal x9044=((1.0)*cj16*sj14);
IkReal x9045=((1.0)*cj14*cj15*cj16);
IkReal x9046=((1.0)*cj14*cj15*sj16);
IkReal x9047=(cj14*cj16);
IkReal x9048=((1.0)*cj14*sj16);
IkReal x9049=((1.0)*sj14*sj15);
IkReal x9050=((1.0)*cj15*cj16*sj14);
IkReal x9051=((1.0)*cj15*sj14*sj16);
IkReal x9052=((0.01)*sj15);
IkReal x9053=((0.01)*cj15*cj16);
IkReal x9054=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x9030))+x9036+x9034+x9032);
evalcond[1]=((((-1.0)*sj12*x9041))+(((-1.0)*x9037))+x9038+x9039);
evalcond[2]=((((-1.0)*r00*x9044))+(((-1.0)*r01*x9045))+((r01*x9042))+(((-1.0)*r00*x9046))+(((-1.0)*r02*x9043))+x9031);
evalcond[3]=((((-1.0)*r12*x9043))+(((-1.0)*r10*x9044))+x9040+((r11*x9042))+(((-1.0)*r10*x9046))+(((-1.0)*r11*x9045)));
evalcond[4]=((((-1.0)*r10*x9051))+(((-1.0)*r12*x9049))+((r10*x9047))+(((-1.0)*r11*x9048))+(((-1.0)*r11*x9050))+((cj12*x9031)));
evalcond[5]=((((-1.0)*cj12*x9041))+(((-1.0)*r01*x9050))+(((-1.0)*r00*x9051))+(((-1.0)*r02*x9049))+(((-1.0)*r01*x9048))+((r00*x9047)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r02*x9052))+(((0.37429)*x9037))+((r00*x9054))+(((-0.37429)*x9038))+(((-0.37429)*x9039))+(((-0.069)*sj12*x9040))+((r01*x9053))+(((-0.29542)*x9031)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r11*x9053))+(((0.069)*x9032))+(((0.37429)*x9030))+(((-0.37429)*x9034))+(((-0.29542)*x9040))+(((-0.37429)*x9036))+((r10*x9054))+((r12*x9052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9055=(cj16*sj15);
IkReal x9056=(sj15*sj16);
CheckValue<IkReal> x9057=IKPowWithIntegerCheck(IKsign(sj12),-1);
if(!x9057.valid){
continue;
}
CheckValue<IkReal> x9058 = IKatan2WithCheck(IkReal((((r01*x9055))+((r00*x9056))+(((-1.0)*(1.0)*cj15*r02)))),IkReal(((((-1.0)*r11*x9055))+((cj15*r12))+(((-1.0)*r10*x9056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9058.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9057.value)))+(x9058.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9059=(cj15*r12);
IkReal x9060=IKcos(j10);
IkReal x9061=(sj12*x9060);
IkReal x9062=(cj16*sj15);
IkReal x9063=(r11*x9062);
IkReal x9064=(sj15*sj16);
IkReal x9065=(r10*x9064);
IkReal x9066=(cj15*r02);
IkReal x9067=(r01*x9062);
IkReal x9068=(r00*x9064);
IkReal x9069=IKsin(j10);
IkReal x9070=((1.0)*x9069);
IkReal x9071=(sj14*sj16);
IkReal x9072=((1.0)*cj14*sj15);
IkReal x9073=((1.0)*cj16*sj14);
IkReal x9074=((1.0)*cj14*cj15*cj16);
IkReal x9075=((1.0)*cj14*cj15*sj16);
IkReal x9076=(cj14*cj16);
IkReal x9077=((1.0)*cj14*sj16);
IkReal x9078=((1.0)*sj14*sj15);
IkReal x9079=((1.0)*cj15*cj16*sj14);
IkReal x9080=((1.0)*cj15*sj14*sj16);
IkReal x9081=((0.01)*sj15);
IkReal x9082=((0.01)*cj15*cj16);
IkReal x9083=((0.01)*cj15*sj16);
evalcond[0]=(x9065+x9063+x9061+(((-1.0)*x9059)));
evalcond[1]=((((-1.0)*x9066))+x9067+x9068+(((-1.0)*sj12*x9070)));
evalcond[2]=(x9060+(((-1.0)*r02*x9072))+(((-1.0)*r00*x9075))+(((-1.0)*r00*x9073))+((r01*x9071))+(((-1.0)*r01*x9074)));
evalcond[3]=((((-1.0)*r12*x9072))+(((-1.0)*r10*x9075))+x9069+(((-1.0)*r10*x9073))+((r11*x9071))+(((-1.0)*r11*x9074)));
evalcond[4]=(((cj12*x9060))+((r10*x9076))+(((-1.0)*r12*x9078))+(((-1.0)*r11*x9077))+(((-1.0)*r11*x9079))+(((-1.0)*r10*x9080)));
evalcond[5]=(((r00*x9076))+(((-1.0)*r00*x9080))+(((-1.0)*r01*x9077))+(((-1.0)*r02*x9078))+(((-1.0)*r01*x9079))+(((-1.0)*cj12*x9070)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.069)*sj12*x9069))+(((-0.37429)*x9067))+(((-0.29542)*x9060))+(((-0.37429)*x9068))+((r00*x9083))+(((0.37429)*x9066))+((r02*x9081))+((r01*x9082)));
evalcond[7]=(((r12*x9081))+(((0.069)*x9061))+((r10*x9083))+(((-1.0)*(1.0)*py))+(((-0.37429)*x9065))+((r11*x9082))+(((-0.37429)*x9063))+(((-0.29542)*x9069))+(((0.37429)*x9059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x9084=((1.0)*cj15);
IkReal x9085=(cj16*sj15);
IkReal x9086=(sj15*sj16);
j10eval[0]=sj11;
j10eval[1]=((IKabs(((((-1.0)*r12*x9084))+((r11*x9085))+((r10*x9086)))))+(IKabs((((r00*x9086))+(((-1.0)*r02*x9084))+((r01*x9085))))));
j10eval[2]=IKsign(sj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
j10eval[0]=sj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9087=((1.0)*cj15);
IkReal x9088=(cj16*sj15);
IkReal x9089=(sj15*sj16);
if( IKabs(((((-1.0)*r12*x9087))+((r10*x9089))+((r11*x9088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x9088))+((r00*x9089))+(((-1.0)*r02*x9087)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x9087))+((r10*x9089))+((r11*x9088))))+IKsqr((((r01*x9088))+((r00*x9089))+(((-1.0)*r02*x9087))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r12*x9087))+((r10*x9089))+((r11*x9088))), (((r01*x9088))+((r00*x9089))+(((-1.0)*r02*x9087))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x9090=((1.0)*cj15);
IkReal x9091=(cj16*sj15);
IkReal x9092=(sj15*sj16);
IkReal x9093=((-1.0)*(((1.0)*(IKsin(j10)))));
IkReal x9094=IKcos(j10);
IkReal x9095=(cj14*cj16);
IkReal x9096=((1.0)*cj14*sj16);
IkReal x9097=((1.0)*sj14*sj15);
IkReal x9098=((1.0)*cj15*cj16*sj14);
IkReal x9099=((1.0)*cj15*sj14*sj16);
evalcond[0]=(x9093+((r10*x9092))+(((-1.0)*r12*x9090))+((r11*x9091)));
evalcond[1]=((((-1.0)*x9094))+((r01*x9091))+(((-1.0)*r02*x9090))+((r00*x9092)));
evalcond[2]=(x9094+((r10*x9095))+(((-1.0)*r10*x9099))+(((-1.0)*r12*x9097))+(((-1.0)*r11*x9096))+(((-1.0)*r11*x9098)));
evalcond[3]=(x9093+(((-1.0)*r00*x9099))+(((-1.0)*r01*x9098))+(((-1.0)*r01*x9096))+(((-1.0)*r02*x9097))+((r00*x9095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9100=((1.0)*cj16*sj15);
IkReal x9101=((1.0)*sj15*sj16);
if( IKabs(((((-1.0)*r10*x9101))+((cj15*r12))+(((-1.0)*r11*x9100)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x9101))+((cj15*r02))+(((-1.0)*r01*x9100)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x9101))+((cj15*r12))+(((-1.0)*r11*x9100))))+IKsqr(((((-1.0)*r00*x9101))+((cj15*r02))+(((-1.0)*r01*x9100))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x9101))+((cj15*r12))+(((-1.0)*r11*x9100))), ((((-1.0)*r00*x9101))+((cj15*r02))+(((-1.0)*r01*x9100))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9102=IKsin(j10);
IkReal x9103=(cj15*r12);
IkReal x9104=(cj16*sj15);
IkReal x9105=(r11*x9104);
IkReal x9106=(sj15*sj16);
IkReal x9107=(r10*x9106);
IkReal x9108=IKcos(j10);
IkReal x9109=(cj15*r02);
IkReal x9110=(r01*x9104);
IkReal x9111=(r00*x9106);
IkReal x9112=(cj14*cj16);
IkReal x9113=((1.0)*cj14*sj16);
IkReal x9114=((1.0)*sj14*sj15);
IkReal x9115=((1.0)*cj15*cj16*sj14);
IkReal x9116=((1.0)*cj15*sj14*sj16);
IkReal x9117=((0.01)*sj15);
IkReal x9118=((0.01)*cj15*cj16);
IkReal x9119=((0.01)*cj15*sj16);
evalcond[0]=(x9105+x9102+x9107+(((-1.0)*x9103)));
evalcond[1]=(x9110+x9111+(((-1.0)*x9109))+x9108);
evalcond[2]=(((r10*x9112))+(((-1.0)*r11*x9113))+(((-1.0)*r12*x9114))+(((-1.0)*r10*x9116))+x9108+(((-1.0)*r11*x9115)));
evalcond[3]=((((-1.0)*r01*x9113))+(((-1.0)*r01*x9115))+((r00*x9112))+(((-1.0)*r00*x9116))+(((-1.0)*x9102))+(((-1.0)*r02*x9114)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r00*x9119))+((r02*x9117))+(((-0.37429)*x9111))+(((0.138)*x9108))+((r01*x9118))+(((-0.37429)*x9110))+(((0.37429)*x9109)));
evalcond[5]=((((-1.0)*(1.0)*py))+(((0.37429)*x9103))+(((-0.37429)*x9107))+((r11*x9118))+((r12*x9117))+(((-0.37429)*x9105))+((r10*x9119))+(((0.138)*x9102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9120=((1.0)*cj14*cj15);
CheckValue<IkReal> x9121=IKPowWithIntegerCheck(sj11,-1);
if(!x9121.valid){
continue;
}
CheckValue<IkReal> x9122=IKPowWithIntegerCheck(cj11,-1);
if(!x9122.valid){
continue;
}
if( IKabs(((x9121.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9122.value)*((((r01*sj14*sj16))+(((-1.0)*(1.0)*cj16*r00*sj14))+(((-1.0)*r00*sj16*x9120))+(((-1.0)*(1.0)*cj14*r02*sj15))+(((-1.0)*cj16*r01*x9120)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9121.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12))))))+IKsqr(((x9122.value)*((((r01*sj14*sj16))+(((-1.0)*(1.0)*cj16*r00*sj14))+(((-1.0)*r00*sj16*x9120))+(((-1.0)*(1.0)*cj14*r02*sj15))+(((-1.0)*cj16*r01*x9120))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x9121.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12))))), ((x9122.value)*((((r01*sj14*sj16))+(((-1.0)*(1.0)*cj16*r00*sj14))+(((-1.0)*r00*sj16*x9120))+(((-1.0)*(1.0)*cj14*r02*sj15))+(((-1.0)*cj16*r01*x9120))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9123=(cj15*r12);
IkReal x9124=(cj16*sj15);
IkReal x9125=(r11*x9124);
IkReal x9126=(sj15*sj16);
IkReal x9127=(r10*x9126);
IkReal x9128=IKsin(j10);
IkReal x9129=((1.0)*x9128);
IkReal x9130=(cj15*r02);
IkReal x9131=(r01*x9124);
IkReal x9132=(r00*x9126);
IkReal x9133=IKcos(j10);
IkReal x9134=((1.0)*x9133);
IkReal x9135=(cj14*cj16);
IkReal x9136=((1.0)*cj14*sj16);
IkReal x9137=((1.0)*sj14*sj15);
IkReal x9138=((1.0)*cj15*cj16*sj14);
IkReal x9139=((1.0)*cj15*sj14*sj16);
IkReal x9140=(sj14*sj16);
IkReal x9141=((1.0)*cj14*sj15);
IkReal x9142=((1.0)*cj16*sj14);
IkReal x9143=((1.0)*cj14*cj15*cj16);
IkReal x9144=((1.0)*cj14*cj15*sj16);
IkReal x9145=((0.01)*sj15);
IkReal x9146=((0.069)*x9133);
IkReal x9147=((0.36442)*cj11);
IkReal x9148=((0.01)*cj15*cj16);
IkReal x9149=((0.01)*cj15*sj16);
IkReal x9150=((0.069)*x9128);
evalcond[0]=((((-1.0)*x9123))+x9127+x9125+(((-1.0)*sj11*x9129)));
evalcond[1]=(x9132+x9131+(((-1.0)*sj11*x9134))+(((-1.0)*x9130)));
evalcond[2]=(((r10*x9135))+x9133+(((-1.0)*r11*x9138))+(((-1.0)*r11*x9136))+(((-1.0)*r10*x9139))+(((-1.0)*r12*x9137)));
evalcond[3]=((((-1.0)*r00*x9139))+(((-1.0)*x9129))+(((-1.0)*r01*x9138))+((r00*x9135))+(((-1.0)*r02*x9137))+(((-1.0)*r01*x9136)));
evalcond[4]=((((-1.0)*r00*x9142))+(((-1.0)*cj11*x9134))+(((-1.0)*r01*x9143))+(((-1.0)*r00*x9144))+((r01*x9140))+(((-1.0)*r02*x9141)));
evalcond[5]=((((-1.0)*r10*x9142))+(((-1.0)*r10*x9144))+(((-1.0)*cj11*x9129))+(((-1.0)*r11*x9143))+((r11*x9140))+(((-1.0)*r12*x9141)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r00*x9149))+((r02*x9145))+(((-1.0)*sj11*x9146))+(((0.37429)*x9130))+(((-0.37429)*x9132))+(((-0.37429)*x9131))+((x9133*x9147))+((r01*x9148))+x9146);
evalcond[7]=((((0.37429)*x9123))+((r10*x9149))+((x9128*x9147))+(((-1.0)*(1.0)*py))+(((-1.0)*sj11*x9150))+((r11*x9148))+x9150+(((-0.37429)*x9127))+((r12*x9145))+(((-0.37429)*x9125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9151=(cj16*r11);
IkReal x9152=(r10*sj16);
IkReal x9153=(cj15*sj14);
CheckValue<IkReal> x9154=IKPowWithIntegerCheck(sj11,-1);
if(!x9154.valid){
continue;
}
if( IKabs(((x9154.value)*((((sj15*x9152))+((sj15*x9151))+(((-1.0)*(1.0)*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x9151*x9153))+((x9152*x9153))+((r12*sj14*sj15))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9154.value)*((((sj15*x9152))+((sj15*x9151))+(((-1.0)*(1.0)*cj15*r12))))))+IKsqr((((x9151*x9153))+((x9152*x9153))+((r12*sj14*sj15))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x9154.value)*((((sj15*x9152))+((sj15*x9151))+(((-1.0)*(1.0)*cj15*r12))))), (((x9151*x9153))+((x9152*x9153))+((r12*sj14*sj15))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9155=(cj15*r12);
IkReal x9156=(cj16*sj15);
IkReal x9157=(r11*x9156);
IkReal x9158=(sj15*sj16);
IkReal x9159=(r10*x9158);
IkReal x9160=IKsin(j10);
IkReal x9161=((1.0)*x9160);
IkReal x9162=(cj15*r02);
IkReal x9163=(r01*x9156);
IkReal x9164=(r00*x9158);
IkReal x9165=IKcos(j10);
IkReal x9166=((1.0)*x9165);
IkReal x9167=(cj14*cj16);
IkReal x9168=((1.0)*cj14*sj16);
IkReal x9169=((1.0)*sj14*sj15);
IkReal x9170=((1.0)*cj15*cj16*sj14);
IkReal x9171=((1.0)*cj15*sj14*sj16);
IkReal x9172=(sj14*sj16);
IkReal x9173=((1.0)*cj14*sj15);
IkReal x9174=((1.0)*cj16*sj14);
IkReal x9175=((1.0)*cj14*cj15*cj16);
IkReal x9176=((1.0)*cj14*cj15*sj16);
IkReal x9177=((0.01)*sj15);
IkReal x9178=((0.069)*x9165);
IkReal x9179=((0.36442)*cj11);
IkReal x9180=((0.01)*cj15*cj16);
IkReal x9181=((0.01)*cj15*sj16);
IkReal x9182=((0.069)*x9160);
evalcond[0]=((((-1.0)*x9155))+x9159+x9157+(((-1.0)*sj11*x9161)));
evalcond[1]=((((-1.0)*x9162))+(((-1.0)*sj11*x9166))+x9164+x9163);
evalcond[2]=((((-1.0)*r10*x9171))+(((-1.0)*r12*x9169))+((r10*x9167))+(((-1.0)*r11*x9168))+(((-1.0)*r11*x9170))+x9165);
evalcond[3]=((((-1.0)*x9161))+((r00*x9167))+(((-1.0)*r00*x9171))+(((-1.0)*r01*x9168))+(((-1.0)*r01*x9170))+(((-1.0)*r02*x9169)));
evalcond[4]=((((-1.0)*r01*x9175))+(((-1.0)*r02*x9173))+(((-1.0)*cj11*x9166))+(((-1.0)*r00*x9174))+(((-1.0)*r00*x9176))+((r01*x9172)));
evalcond[5]=((((-1.0)*r10*x9174))+(((-1.0)*r11*x9175))+((r11*x9172))+(((-1.0)*cj11*x9161))+(((-1.0)*r10*x9176))+(((-1.0)*r12*x9173)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r01*x9180))+(((-1.0)*sj11*x9178))+((r02*x9177))+((x9165*x9179))+(((-0.37429)*x9163))+(((-0.37429)*x9164))+(((0.37429)*x9162))+x9178+((r00*x9181)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r11*x9180))+((x9160*x9179))+((r12*x9177))+((r10*x9181))+(((-1.0)*sj11*x9182))+(((-0.37429)*x9157))+x9182+(((0.37429)*x9155))+(((-0.37429)*x9159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9183=((1.0)*cj15);
IkReal x9184=(cj16*sj15);
IkReal x9185=(sj15*sj16);
CheckValue<IkReal> x9186 = IKatan2WithCheck(IkReal((((r11*x9184))+((r10*x9185))+(((-1.0)*r12*x9183)))),IkReal((((r01*x9184))+(((-1.0)*r02*x9183))+((r00*x9185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9186.valid){
continue;
}
CheckValue<IkReal> x9187=IKPowWithIntegerCheck(IKsign(sj11),-1);
if(!x9187.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9186.value)+(((1.5707963267949)*(x9187.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9188=(cj15*r12);
IkReal x9189=(cj16*sj15);
IkReal x9190=(r11*x9189);
IkReal x9191=(sj15*sj16);
IkReal x9192=(r10*x9191);
IkReal x9193=IKsin(j10);
IkReal x9194=((1.0)*x9193);
IkReal x9195=(cj15*r02);
IkReal x9196=(r01*x9189);
IkReal x9197=(r00*x9191);
IkReal x9198=IKcos(j10);
IkReal x9199=((1.0)*x9198);
IkReal x9200=(cj14*cj16);
IkReal x9201=((1.0)*cj14*sj16);
IkReal x9202=((1.0)*sj14*sj15);
IkReal x9203=((1.0)*cj15*cj16*sj14);
IkReal x9204=((1.0)*cj15*sj14*sj16);
IkReal x9205=(sj14*sj16);
IkReal x9206=((1.0)*cj14*sj15);
IkReal x9207=((1.0)*cj16*sj14);
IkReal x9208=((1.0)*cj14*cj15*cj16);
IkReal x9209=((1.0)*cj14*cj15*sj16);
IkReal x9210=((0.01)*sj15);
IkReal x9211=((0.069)*x9198);
IkReal x9212=((0.36442)*cj11);
IkReal x9213=((0.01)*cj15*cj16);
IkReal x9214=((0.01)*cj15*sj16);
IkReal x9215=((0.069)*x9193);
evalcond[0]=((((-1.0)*x9188))+(((-1.0)*sj11*x9194))+x9192+x9190);
evalcond[1]=((((-1.0)*x9195))+(((-1.0)*sj11*x9199))+x9197+x9196);
evalcond[2]=((((-1.0)*r11*x9203))+(((-1.0)*r10*x9204))+((r10*x9200))+(((-1.0)*r12*x9202))+x9198+(((-1.0)*r11*x9201)));
evalcond[3]=((((-1.0)*r02*x9202))+(((-1.0)*r00*x9204))+(((-1.0)*r01*x9203))+(((-1.0)*x9194))+((r00*x9200))+(((-1.0)*r01*x9201)));
evalcond[4]=((((-1.0)*r01*x9208))+((r01*x9205))+(((-1.0)*cj11*x9199))+(((-1.0)*r02*x9206))+(((-1.0)*r00*x9209))+(((-1.0)*r00*x9207)));
evalcond[5]=((((-1.0)*cj11*x9194))+(((-1.0)*r12*x9206))+(((-1.0)*r10*x9207))+((r11*x9205))+(((-1.0)*r11*x9208))+(((-1.0)*r10*x9209)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r02*x9210))+(((-0.37429)*x9197))+(((-0.37429)*x9196))+(((0.37429)*x9195))+x9211+((r01*x9213))+(((-1.0)*sj11*x9211))+((r00*x9214))+((x9198*x9212)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r11*x9213))+(((0.37429)*x9188))+((r12*x9210))+((x9193*x9212))+(((-1.0)*sj11*x9215))+(((-0.37429)*x9192))+x9215+(((-0.37429)*x9190))+((r10*x9214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x9216=((1.0)*cj16*sj15);
IkReal x9217=((1.0)*sj15*sj16);
j10eval[0]=sj11;
j10eval[1]=((IKabs((((cj15*r12))+(((-1.0)*r11*x9216))+(((-1.0)*r10*x9217)))))+(IKabs((((cj15*r02))+(((-1.0)*r00*x9217))+(((-1.0)*r01*x9216))))));
j10eval[2]=IKsign(sj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j10eval[0]=sj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9218=((1.0)*cj16*sj15);
IkReal x9219=((1.0)*sj15*sj16);
if( IKabs(((((-1.0)*r11*x9218))+((cj15*r12))+(((-1.0)*r10*x9219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x9218))+(((-1.0)*r00*x9219))+((cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x9218))+((cj15*r12))+(((-1.0)*r10*x9219))))+IKsqr(((((-1.0)*r01*x9218))+(((-1.0)*r00*x9219))+((cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r11*x9218))+((cj15*r12))+(((-1.0)*r10*x9219))), ((((-1.0)*r01*x9218))+(((-1.0)*r00*x9219))+((cj15*r02))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x9220=IKsin(j10);
IkReal x9221=(cj15*r12);
IkReal x9222=(cj16*sj15);
IkReal x9223=(r11*x9222);
IkReal x9224=(sj15*sj16);
IkReal x9225=(r10*x9224);
IkReal x9226=IKcos(j10);
IkReal x9227=(cj15*r02);
IkReal x9228=(r01*x9222);
IkReal x9229=(r00*x9224);
IkReal x9230=(cj14*cj16);
IkReal x9231=((1.0)*cj14*sj16);
IkReal x9232=((1.0)*sj14*sj15);
IkReal x9233=((1.0)*cj15*cj16*sj14);
IkReal x9234=((1.0)*cj15*sj14*sj16);
IkReal x9235=((0.01)*sj15);
IkReal x9236=((0.01)*cj15*cj16);
IkReal x9237=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x9221))+x9225+x9220+x9223);
evalcond[1]=(x9229+x9228+x9226+(((-1.0)*x9227)));
evalcond[2]=((((-1.0)*r00*x9234))+x9220+(((-1.0)*r01*x9231))+(((-1.0)*r01*x9233))+(((-1.0)*r02*x9232))+((r00*x9230)));
evalcond[3]=((((-1.0)*x9226))+(((-1.0)*r11*x9231))+(((-1.0)*r12*x9232))+(((-1.0)*r10*x9234))+((r10*x9230))+(((-1.0)*r11*x9233)));
evalcond[4]=(((r01*x9236))+(((-1.0)*(1.0)*px))+((r00*x9237))+(((0.138)*x9226))+((r02*x9235))+(((0.37429)*x9227))+(((-0.37429)*x9229))+(((-0.37429)*x9228)));
evalcond[5]=(((r10*x9237))+(((-1.0)*(1.0)*py))+((r11*x9236))+((r12*x9235))+(((-0.37429)*x9223))+(((0.138)*x9220))+(((-0.37429)*x9225))+(((0.37429)*x9221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9238=((1.0)*cj15);
IkReal x9239=(cj16*sj15);
IkReal x9240=(sj15*sj16);
if( IKabs((((r10*x9240))+(((-1.0)*r12*x9238))+((r11*x9239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x9240))+(((-1.0)*r02*x9238))+((r01*x9239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x9240))+(((-1.0)*r12*x9238))+((r11*x9239))))+IKsqr((((r00*x9240))+(((-1.0)*r02*x9238))+((r01*x9239))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r10*x9240))+(((-1.0)*r12*x9238))+((r11*x9239))), (((r00*x9240))+(((-1.0)*r02*x9238))+((r01*x9239))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x9241=((1.0)*cj15);
IkReal x9242=(cj16*sj15);
IkReal x9243=(sj15*sj16);
IkReal x9244=IKsin(j10);
IkReal x9245=((-1.0)*(((1.0)*(IKcos(j10)))));
IkReal x9246=(cj14*cj16);
IkReal x9247=((1.0)*cj14*sj16);
IkReal x9248=((1.0)*sj14*sj15);
IkReal x9249=((1.0)*cj15*cj16*sj14);
IkReal x9250=((1.0)*cj15*sj14*sj16);
evalcond[0]=(((r11*x9242))+((r10*x9243))+(((-1.0)*r12*x9241))+(((-1.0)*x9244)));
evalcond[1]=(((r01*x9242))+(((-1.0)*r02*x9241))+((r00*x9243))+x9245);
evalcond[2]=((((-1.0)*r02*x9248))+(((-1.0)*r01*x9249))+((r00*x9246))+x9244+(((-1.0)*r01*x9247))+(((-1.0)*r00*x9250)));
evalcond[3]=((((-1.0)*r12*x9248))+(((-1.0)*r10*x9250))+(((-1.0)*r11*x9247))+(((-1.0)*r11*x9249))+((r10*x9246))+x9245);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9251=((1.0)*sj15);
IkReal x9252=(cj14*cj15);
CheckValue<IkReal> x9253=IKPowWithIntegerCheck(sj11,-1);
if(!x9253.valid){
continue;
}
CheckValue<IkReal> x9254=IKPowWithIntegerCheck(cj11,-1);
if(!x9254.valid){
continue;
}
if( IKabs(((x9253.value)*(((((-1.0)*cj16*r11*x9251))+(((-1.0)*r10*sj16*x9251))+((cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9254.value)*((((r01*sj14*sj16))+(((-1.0)*cj14*r02*x9251))+(((-1.0)*r00*sj16*x9252))+(((-1.0)*cj16*r00*sj14))+(((-1.0)*cj16*r01*x9252)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9253.value)*(((((-1.0)*cj16*r11*x9251))+(((-1.0)*r10*sj16*x9251))+((cj15*r12))))))+IKsqr(((x9254.value)*((((r01*sj14*sj16))+(((-1.0)*cj14*r02*x9251))+(((-1.0)*r00*sj16*x9252))+(((-1.0)*cj16*r00*sj14))+(((-1.0)*cj16*r01*x9252))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x9253.value)*(((((-1.0)*cj16*r11*x9251))+(((-1.0)*r10*sj16*x9251))+((cj15*r12))))), ((x9254.value)*((((r01*sj14*sj16))+(((-1.0)*cj14*r02*x9251))+(((-1.0)*r00*sj16*x9252))+(((-1.0)*cj16*r00*sj14))+(((-1.0)*cj16*r01*x9252))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9255=(cj15*r12);
IkReal x9256=IKsin(j10);
IkReal x9257=(sj11*x9256);
IkReal x9258=(cj16*sj15);
IkReal x9259=(r11*x9258);
IkReal x9260=(sj15*sj16);
IkReal x9261=(r10*x9260);
IkReal x9262=(cj15*r02);
IkReal x9263=IKcos(j10);
IkReal x9264=(sj11*x9263);
IkReal x9265=(r01*x9258);
IkReal x9266=(r00*x9260);
IkReal x9267=(cj14*cj16);
IkReal x9268=((1.0)*cj14*sj16);
IkReal x9269=((1.0)*sj14*sj15);
IkReal x9270=((1.0)*cj15*cj16*sj14);
IkReal x9271=((1.0)*cj15*sj14*sj16);
IkReal x9272=((1.0)*x9263);
IkReal x9273=(sj14*sj16);
IkReal x9274=((1.0)*cj14*sj15);
IkReal x9275=((1.0)*cj16*sj14);
IkReal x9276=((1.0)*cj14*cj15*cj16);
IkReal x9277=((1.0)*cj14*cj15*sj16);
IkReal x9278=(cj11*x9256);
IkReal x9279=((0.01)*sj15);
IkReal x9280=((0.01)*cj15*cj16);
IkReal x9281=((0.01)*cj15*sj16);
evalcond[0]=(x9261+x9257+x9259+(((-1.0)*x9255)));
evalcond[1]=(x9264+x9266+x9265+(((-1.0)*x9262)));
evalcond[2]=((((-1.0)*r00*x9271))+x9256+(((-1.0)*r02*x9269))+((r00*x9267))+(((-1.0)*r01*x9268))+(((-1.0)*r01*x9270)));
evalcond[3]=((((-1.0)*r10*x9271))+(((-1.0)*r11*x9270))+(((-1.0)*x9272))+((r10*x9267))+(((-1.0)*r12*x9269))+(((-1.0)*r11*x9268)));
evalcond[4]=((((-1.0)*cj11*x9272))+(((-1.0)*r02*x9274))+(((-1.0)*r00*x9275))+(((-1.0)*r00*x9277))+((r01*x9273))+(((-1.0)*r01*x9276)));
evalcond[5]=((((-1.0)*r11*x9276))+(((-1.0)*x9278))+(((-1.0)*r10*x9275))+(((-1.0)*r12*x9274))+((r11*x9273))+(((-1.0)*r10*x9277)));
evalcond[6]=((((0.37429)*x9262))+(((-1.0)*(1.0)*px))+(((0.069)*x9263))+(((-0.37429)*x9265))+((r00*x9281))+(((0.36442)*cj11*x9263))+(((-0.37429)*x9266))+(((0.069)*x9264))+((r02*x9279))+((r01*x9280)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r10*x9281))+(((0.37429)*x9255))+(((-0.37429)*x9259))+(((0.36442)*x9278))+((r11*x9280))+(((0.069)*x9257))+((r12*x9279))+(((-0.37429)*x9261))+(((0.069)*x9256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9282=((1.0)*cj16);
IkReal x9283=(cj15*sj14);
IkReal x9284=(r00*sj16);
CheckValue<IkReal> x9285=IKPowWithIntegerCheck(sj11,-1);
if(!x9285.valid){
continue;
}
if( IKabs((((cj16*r01*x9283))+((r02*sj14*sj15))+((x9283*x9284))+((cj14*r01*sj16))+(((-1.0)*cj14*r00*x9282)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9285.value)*(((((-1.0)*r01*sj15*x9282))+(((-1.0)*sj15*x9284))+((cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj16*r01*x9283))+((r02*sj14*sj15))+((x9283*x9284))+((cj14*r01*sj16))+(((-1.0)*cj14*r00*x9282))))+IKsqr(((x9285.value)*(((((-1.0)*r01*sj15*x9282))+(((-1.0)*sj15*x9284))+((cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj16*r01*x9283))+((r02*sj14*sj15))+((x9283*x9284))+((cj14*r01*sj16))+(((-1.0)*cj14*r00*x9282))), ((x9285.value)*(((((-1.0)*r01*sj15*x9282))+(((-1.0)*sj15*x9284))+((cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9286=(cj15*r12);
IkReal x9287=IKsin(j10);
IkReal x9288=(sj11*x9287);
IkReal x9289=(cj16*sj15);
IkReal x9290=(r11*x9289);
IkReal x9291=(sj15*sj16);
IkReal x9292=(r10*x9291);
IkReal x9293=(cj15*r02);
IkReal x9294=IKcos(j10);
IkReal x9295=(sj11*x9294);
IkReal x9296=(r01*x9289);
IkReal x9297=(r00*x9291);
IkReal x9298=(cj14*cj16);
IkReal x9299=((1.0)*cj14*sj16);
IkReal x9300=((1.0)*sj14*sj15);
IkReal x9301=((1.0)*cj15*cj16*sj14);
IkReal x9302=((1.0)*cj15*sj14*sj16);
IkReal x9303=((1.0)*x9294);
IkReal x9304=(sj14*sj16);
IkReal x9305=((1.0)*cj14*sj15);
IkReal x9306=((1.0)*cj16*sj14);
IkReal x9307=((1.0)*cj14*cj15*cj16);
IkReal x9308=((1.0)*cj14*cj15*sj16);
IkReal x9309=(cj11*x9287);
IkReal x9310=((0.01)*sj15);
IkReal x9311=((0.01)*cj15*cj16);
IkReal x9312=((0.01)*cj15*sj16);
evalcond[0]=(x9292+x9290+x9288+(((-1.0)*x9286)));
evalcond[1]=(x9295+x9296+x9297+(((-1.0)*x9293)));
evalcond[2]=(x9287+(((-1.0)*r02*x9300))+(((-1.0)*r00*x9302))+(((-1.0)*r01*x9301))+((r00*x9298))+(((-1.0)*r01*x9299)));
evalcond[3]=((((-1.0)*x9303))+(((-1.0)*r11*x9299))+((r10*x9298))+(((-1.0)*r11*x9301))+(((-1.0)*r10*x9302))+(((-1.0)*r12*x9300)));
evalcond[4]=((((-1.0)*r02*x9305))+(((-1.0)*r00*x9308))+((r01*x9304))+(((-1.0)*cj11*x9303))+(((-1.0)*r01*x9307))+(((-1.0)*r00*x9306)));
evalcond[5]=((((-1.0)*r11*x9307))+(((-1.0)*x9309))+(((-1.0)*r12*x9305))+(((-1.0)*r10*x9306))+(((-1.0)*r10*x9308))+((r11*x9304)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r02*x9310))+(((0.069)*x9294))+(((0.36442)*cj11*x9294))+(((-0.37429)*x9297))+((r01*x9311))+(((0.37429)*x9293))+((r00*x9312))+(((-0.37429)*x9296))+(((0.069)*x9295)));
evalcond[7]=(((r10*x9312))+(((-1.0)*(1.0)*py))+(((0.37429)*x9286))+(((0.36442)*x9309))+(((0.069)*x9287))+(((-0.37429)*x9290))+(((0.069)*x9288))+((r12*x9310))+((r11*x9311))+(((-0.37429)*x9292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9313=((1.0)*cj16*sj15);
IkReal x9314=((1.0)*sj15*sj16);
CheckValue<IkReal> x9315=IKPowWithIntegerCheck(IKsign(sj11),-1);
if(!x9315.valid){
continue;
}
CheckValue<IkReal> x9316 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9314))+(((-1.0)*r11*x9313))+((cj15*r12)))),IkReal(((((-1.0)*r00*x9314))+((cj15*r02))+(((-1.0)*r01*x9313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9316.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9315.value)))+(x9316.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9317=(cj15*r12);
IkReal x9318=IKsin(j10);
IkReal x9319=(sj11*x9318);
IkReal x9320=(cj16*sj15);
IkReal x9321=(r11*x9320);
IkReal x9322=(sj15*sj16);
IkReal x9323=(r10*x9322);
IkReal x9324=(cj15*r02);
IkReal x9325=IKcos(j10);
IkReal x9326=(sj11*x9325);
IkReal x9327=(r01*x9320);
IkReal x9328=(r00*x9322);
IkReal x9329=(cj14*cj16);
IkReal x9330=((1.0)*cj14*sj16);
IkReal x9331=((1.0)*sj14*sj15);
IkReal x9332=((1.0)*cj15*cj16*sj14);
IkReal x9333=((1.0)*cj15*sj14*sj16);
IkReal x9334=((1.0)*x9325);
IkReal x9335=(sj14*sj16);
IkReal x9336=((1.0)*cj14*sj15);
IkReal x9337=((1.0)*cj16*sj14);
IkReal x9338=((1.0)*cj14*cj15*cj16);
IkReal x9339=((1.0)*cj14*cj15*sj16);
IkReal x9340=(cj11*x9318);
IkReal x9341=((0.01)*sj15);
IkReal x9342=((0.01)*cj15*cj16);
IkReal x9343=((0.01)*cj15*sj16);
evalcond[0]=(x9321+x9323+x9319+(((-1.0)*x9317)));
evalcond[1]=(x9327+x9326+x9328+(((-1.0)*x9324)));
evalcond[2]=((((-1.0)*r01*x9332))+(((-1.0)*r00*x9333))+(((-1.0)*r02*x9331))+x9318+(((-1.0)*r01*x9330))+((r00*x9329)));
evalcond[3]=((((-1.0)*r11*x9332))+(((-1.0)*r10*x9333))+((r10*x9329))+(((-1.0)*r11*x9330))+(((-1.0)*x9334))+(((-1.0)*r12*x9331)));
evalcond[4]=((((-1.0)*r01*x9338))+((r01*x9335))+(((-1.0)*r00*x9337))+(((-1.0)*r00*x9339))+(((-1.0)*r02*x9336))+(((-1.0)*cj11*x9334)));
evalcond[5]=((((-1.0)*r11*x9338))+(((-1.0)*r10*x9337))+((r11*x9335))+(((-1.0)*x9340))+(((-1.0)*r12*x9336))+(((-1.0)*r10*x9339)));
evalcond[6]=((((0.37429)*x9324))+(((-1.0)*(1.0)*px))+((r02*x9341))+(((-0.37429)*x9328))+(((0.36442)*cj11*x9325))+((r00*x9343))+(((0.069)*x9325))+(((0.069)*x9326))+(((-0.37429)*x9327))+((r01*x9342)));
evalcond[7]=(((r12*x9341))+(((-0.37429)*x9323))+(((-1.0)*(1.0)*py))+((r10*x9343))+(((0.36442)*x9340))+(((0.37429)*x9317))+(((0.069)*x9319))+(((0.069)*x9318))+((r11*x9342))+(((-0.37429)*x9321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x9352=IKPowWithIntegerCheck(cj11,-1);
if(!x9352.valid){
continue;
}
IkReal x9344=x9352.value;
IkReal x9345=(cj11*sj15);
IkReal x9346=(r01*sj14*sj16);
IkReal x9347=((1.0)*cj14*r02*sj15);
IkReal x9348=((1.0)*cj16*r00*sj14);
IkReal x9349=((1.0)*cj14*cj15);
IkReal x9350=(cj16*r01*x9349);
IkReal x9351=(r00*sj16*x9349);
CheckValue<IkReal> x9353=IKPowWithIntegerCheck(cj12,-1);
if(!x9353.valid){
continue;
}
CheckValue<IkReal> x9354=IKPowWithIntegerCheck(sj11,-1);
if(!x9354.valid){
continue;
}
if( IKabs((x9344*(x9353.value)*(x9354.value)*(((((-1.0)*sj12*x9347))+(((-1.0)*sj12*x9350))+(((-1.0)*sj12*x9348))+(((-1.0)*sj12*x9351))+((r10*sj16*x9345))+((cj16*r11*x9345))+((sj12*x9346))+(((-1.0)*cj11*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9344*(((((-1.0)*x9348))+x9346+(((-1.0)*x9350))+(((-1.0)*x9351))+(((-1.0)*x9347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9344*(x9353.value)*(x9354.value)*(((((-1.0)*sj12*x9347))+(((-1.0)*sj12*x9350))+(((-1.0)*sj12*x9348))+(((-1.0)*sj12*x9351))+((r10*sj16*x9345))+((cj16*r11*x9345))+((sj12*x9346))+(((-1.0)*cj11*cj15*r12))))))+IKsqr((x9344*(((((-1.0)*x9348))+x9346+(((-1.0)*x9350))+(((-1.0)*x9351))+(((-1.0)*x9347))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x9344*(x9353.value)*(x9354.value)*(((((-1.0)*sj12*x9347))+(((-1.0)*sj12*x9350))+(((-1.0)*sj12*x9348))+(((-1.0)*sj12*x9351))+((r10*sj16*x9345))+((cj16*r11*x9345))+((sj12*x9346))+(((-1.0)*cj11*cj15*r12))))), (x9344*(((((-1.0)*x9348))+x9346+(((-1.0)*x9350))+(((-1.0)*x9351))+(((-1.0)*x9347))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9355=(cj15*r12);
IkReal x9356=IKcos(j10);
IkReal x9357=(sj12*x9356);
IkReal x9358=(cj16*sj15);
IkReal x9359=(r11*x9358);
IkReal x9360=(sj15*sj16);
IkReal x9361=(r10*x9360);
IkReal x9362=IKsin(j10);
IkReal x9363=((1.0)*x9362);
IkReal x9364=(cj12*x9363);
IkReal x9365=(cj15*r02);
IkReal x9366=(r01*x9358);
IkReal x9367=(r00*x9360);
IkReal x9368=(cj12*sj11*x9356);
IkReal x9369=(sj14*sj16);
IkReal x9370=(cj11*x9356);
IkReal x9371=((1.0)*cj14*sj15);
IkReal x9372=((1.0)*cj16*sj14);
IkReal x9373=((1.0)*cj14*cj15*cj16);
IkReal x9374=((1.0)*cj14*cj15*sj16);
IkReal x9375=(cj11*x9362);
IkReal x9376=(cj14*cj16);
IkReal x9377=((1.0)*cj14*sj16);
IkReal x9378=((1.0)*sj14*sj15);
IkReal x9379=((1.0)*cj15*cj16*sj14);
IkReal x9380=((1.0)*cj15*sj14*sj16);
IkReal x9381=((0.01)*sj15);
IkReal x9382=((0.069)*x9362);
IkReal x9383=((0.01)*cj15*cj16);
IkReal x9384=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*sj11*x9364))+x9361+x9359+x9357+(((-1.0)*x9355)));
evalcond[1]=((((-1.0)*x9365))+x9366+x9367+(((-1.0)*sj12*x9363))+(((-1.0)*x9368)));
evalcond[2]=(((r01*x9369))+(((-1.0)*r01*x9373))+(((-1.0)*r00*x9374))+(((-1.0)*r00*x9372))+(((-1.0)*r02*x9371))+(((-1.0)*x9370)));
evalcond[3]=((((-1.0)*x9375))+(((-1.0)*r10*x9374))+(((-1.0)*r12*x9371))+(((-1.0)*r10*x9372))+((r11*x9369))+(((-1.0)*r11*x9373)));
evalcond[4]=((((-1.0)*r12*x9378))+((sj11*sj12*x9362))+(((-1.0)*r11*x9379))+(((-1.0)*r11*x9377))+((cj12*x9356))+(((-1.0)*r10*x9380))+((r10*x9376)));
evalcond[5]=((((-1.0)*x9364))+(((-1.0)*r02*x9378))+(((-1.0)*r00*x9380))+(((-1.0)*r01*x9377))+((sj11*x9357))+((r00*x9376))+(((-1.0)*r01*x9379)));
evalcond[6]=(((r00*x9384))+(((0.37429)*x9365))+(((-1.0)*(1.0)*px))+(((-0.37429)*x9366))+(((-0.37429)*x9367))+(((-1.0)*sj12*x9382))+((r02*x9381))+(((0.36442)*x9370))+(((-0.069)*x9368))+((r01*x9383))+(((0.069)*x9356)));
evalcond[7]=(((r12*x9381))+(((-1.0)*cj12*sj11*x9382))+x9382+(((-1.0)*(1.0)*py))+(((0.069)*x9357))+(((0.36442)*x9375))+(((-0.37429)*x9359))+((r11*x9383))+(((0.37429)*x9355))+(((-0.37429)*x9361))+((r10*x9384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x9390=IKPowWithIntegerCheck(cj11,-1);
if(!x9390.valid){
continue;
}
IkReal x9385=x9390.value;
IkReal x9386=((1.0)*r02);
IkReal x9387=(cj11*sj15);
IkReal x9388=(cj12*sj11);
IkReal x9389=(cj14*cj15*r00*sj16);
CheckValue<IkReal> x9391=IKPowWithIntegerCheck(sj12,-1);
if(!x9391.valid){
continue;
}
if( IKabs((x9385*(x9391.value)*((((cj16*r00*sj14*x9388))+((r00*sj16*x9387))+((cj14*cj15*cj16*r01*x9388))+(((-1.0)*r01*sj14*sj16*x9388))+(((-1.0)*cj11*cj15*x9386))+((cj16*r01*x9387))+((x9388*x9389))+((cj14*r02*sj15*x9388)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9385*(((((-1.0)*cj14*sj15*x9386))+((r01*sj14*sj16))+(((-1.0)*x9389))+(((-1.0)*cj14*cj15*cj16*r01))+(((-1.0)*cj16*r00*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9385*(x9391.value)*((((cj16*r00*sj14*x9388))+((r00*sj16*x9387))+((cj14*cj15*cj16*r01*x9388))+(((-1.0)*r01*sj14*sj16*x9388))+(((-1.0)*cj11*cj15*x9386))+((cj16*r01*x9387))+((x9388*x9389))+((cj14*r02*sj15*x9388))))))+IKsqr((x9385*(((((-1.0)*cj14*sj15*x9386))+((r01*sj14*sj16))+(((-1.0)*x9389))+(((-1.0)*cj14*cj15*cj16*r01))+(((-1.0)*cj16*r00*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x9385*(x9391.value)*((((cj16*r00*sj14*x9388))+((r00*sj16*x9387))+((cj14*cj15*cj16*r01*x9388))+(((-1.0)*r01*sj14*sj16*x9388))+(((-1.0)*cj11*cj15*x9386))+((cj16*r01*x9387))+((x9388*x9389))+((cj14*r02*sj15*x9388))))), (x9385*(((((-1.0)*cj14*sj15*x9386))+((r01*sj14*sj16))+(((-1.0)*x9389))+(((-1.0)*cj14*cj15*cj16*r01))+(((-1.0)*cj16*r00*sj14))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9392=(cj15*r12);
IkReal x9393=IKcos(j10);
IkReal x9394=(sj12*x9393);
IkReal x9395=(cj16*sj15);
IkReal x9396=(r11*x9395);
IkReal x9397=(sj15*sj16);
IkReal x9398=(r10*x9397);
IkReal x9399=IKsin(j10);
IkReal x9400=((1.0)*x9399);
IkReal x9401=(cj12*x9400);
IkReal x9402=(cj15*r02);
IkReal x9403=(r01*x9395);
IkReal x9404=(r00*x9397);
IkReal x9405=(cj12*sj11*x9393);
IkReal x9406=(sj14*sj16);
IkReal x9407=(cj11*x9393);
IkReal x9408=((1.0)*cj14*sj15);
IkReal x9409=((1.0)*cj16*sj14);
IkReal x9410=((1.0)*cj14*cj15*cj16);
IkReal x9411=((1.0)*cj14*cj15*sj16);
IkReal x9412=(cj11*x9399);
IkReal x9413=(cj14*cj16);
IkReal x9414=((1.0)*cj14*sj16);
IkReal x9415=((1.0)*sj14*sj15);
IkReal x9416=((1.0)*cj15*cj16*sj14);
IkReal x9417=((1.0)*cj15*sj14*sj16);
IkReal x9418=((0.01)*sj15);
IkReal x9419=((0.069)*x9399);
IkReal x9420=((0.01)*cj15*cj16);
IkReal x9421=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x9392))+x9398+x9396+x9394+(((-1.0)*sj11*x9401)));
evalcond[1]=((((-1.0)*x9405))+(((-1.0)*sj12*x9400))+x9404+x9403+(((-1.0)*x9402)));
evalcond[2]=((((-1.0)*x9407))+(((-1.0)*r00*x9411))+(((-1.0)*r00*x9409))+((r01*x9406))+(((-1.0)*r01*x9410))+(((-1.0)*r02*x9408)));
evalcond[3]=((((-1.0)*r10*x9409))+(((-1.0)*r10*x9411))+(((-1.0)*r11*x9410))+((r11*x9406))+(((-1.0)*x9412))+(((-1.0)*r12*x9408)));
evalcond[4]=((((-1.0)*r10*x9417))+((r10*x9413))+(((-1.0)*r11*x9414))+(((-1.0)*r12*x9415))+(((-1.0)*r11*x9416))+((cj12*x9393))+((sj11*sj12*x9399)));
evalcond[5]=((((-1.0)*r01*x9414))+((sj11*x9394))+(((-1.0)*x9401))+(((-1.0)*r00*x9417))+((r00*x9413))+(((-1.0)*r01*x9416))+(((-1.0)*r02*x9415)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x9403))+(((0.37429)*x9402))+(((-0.069)*x9405))+((r00*x9421))+(((0.36442)*x9407))+(((0.069)*x9393))+((r01*x9420))+((r02*x9418))+(((-0.37429)*x9404))+(((-1.0)*sj12*x9419)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r10*x9421))+(((-1.0)*cj12*sj11*x9419))+(((0.37429)*x9392))+(((-0.37429)*x9398))+(((-0.37429)*x9396))+(((0.069)*x9394))+((r12*x9418))+x9419+(((0.36442)*x9412))+((r11*x9420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9422=((1.0)*r02);
IkReal x9423=(cj15*sj12);
IkReal x9424=(cj16*sj12*sj15);
IkReal x9425=(sj12*sj15*sj16);
IkReal x9426=(cj12*cj15*sj11);
IkReal x9427=(cj12*cj16*sj11*sj15);
IkReal x9428=(cj12*sj11*sj15*sj16);
CheckValue<IkReal> x9429 = IKatan2WithCheck(IkReal(((((-1.0)*x9422*x9423))+((r11*x9427))+((r10*x9428))+((r00*x9425))+(((-1.0)*r12*x9426))+((r01*x9424)))),IkReal((((r00*x9428))+((r01*x9427))+(((-1.0)*r10*x9425))+(((-1.0)*r11*x9424))+((r12*x9423))+(((-1.0)*x9422*x9426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9429.valid){
continue;
}
CheckValue<IkReal> x9430=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(1.0)*(cj11*cj11)*(cj12*cj12))))),-1);
if(!x9430.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9429.value)+(((1.5707963267949)*(x9430.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x9431=(cj15*r12);
IkReal x9432=IKcos(j10);
IkReal x9433=(sj12*x9432);
IkReal x9434=(cj16*sj15);
IkReal x9435=(r11*x9434);
IkReal x9436=(sj15*sj16);
IkReal x9437=(r10*x9436);
IkReal x9438=IKsin(j10);
IkReal x9439=((1.0)*x9438);
IkReal x9440=(cj12*x9439);
IkReal x9441=(cj15*r02);
IkReal x9442=(r01*x9434);
IkReal x9443=(r00*x9436);
IkReal x9444=(cj12*sj11*x9432);
IkReal x9445=(sj14*sj16);
IkReal x9446=(cj11*x9432);
IkReal x9447=((1.0)*cj14*sj15);
IkReal x9448=((1.0)*cj16*sj14);
IkReal x9449=((1.0)*cj14*cj15*cj16);
IkReal x9450=((1.0)*cj14*cj15*sj16);
IkReal x9451=(cj11*x9438);
IkReal x9452=(cj14*cj16);
IkReal x9453=((1.0)*cj14*sj16);
IkReal x9454=((1.0)*sj14*sj15);
IkReal x9455=((1.0)*cj15*cj16*sj14);
IkReal x9456=((1.0)*cj15*sj14*sj16);
IkReal x9457=((0.01)*sj15);
IkReal x9458=((0.069)*x9438);
IkReal x9459=((0.01)*cj15*cj16);
IkReal x9460=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*sj11*x9440))+x9433+x9435+x9437+(((-1.0)*x9431)));
evalcond[1]=((((-1.0)*x9441))+x9443+x9442+(((-1.0)*sj12*x9439))+(((-1.0)*x9444)));
evalcond[2]=((((-1.0)*r00*x9450))+(((-1.0)*r01*x9449))+((r01*x9445))+(((-1.0)*r02*x9447))+(((-1.0)*x9446))+(((-1.0)*r00*x9448)));
evalcond[3]=((((-1.0)*r10*x9450))+(((-1.0)*r12*x9447))+(((-1.0)*x9451))+((r11*x9445))+(((-1.0)*r11*x9449))+(((-1.0)*r10*x9448)));
evalcond[4]=((((-1.0)*r11*x9455))+(((-1.0)*r10*x9456))+((r10*x9452))+((sj11*sj12*x9438))+(((-1.0)*r12*x9454))+(((-1.0)*r11*x9453))+((cj12*x9432)));
evalcond[5]=((((-1.0)*r00*x9456))+((r00*x9452))+((sj11*x9433))+(((-1.0)*x9440))+(((-1.0)*r01*x9455))+(((-1.0)*r02*x9454))+(((-1.0)*r01*x9453)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*sj12*x9458))+(((0.36442)*x9446))+(((0.37429)*x9441))+((r02*x9457))+(((0.069)*x9432))+(((-0.37429)*x9443))+(((-0.37429)*x9442))+((r00*x9460))+((r01*x9459))+(((-0.069)*x9444)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r12*x9457))+((r11*x9459))+(((-0.37429)*x9437))+(((0.36442)*x9451))+(((0.069)*x9433))+(((-1.0)*cj12*sj11*x9458))+(((-0.37429)*x9435))+x9458+((r10*x9460))+(((0.37429)*x9431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x9461=((1.0)*r02);
IkReal x9462=(cj15*sj12);
IkReal x9463=(cj16*sj12*sj15);
IkReal x9464=(sj12*sj15*sj16);
IkReal x9465=(cj12*cj15*sj11);
IkReal x9466=(cj12*cj16*sj11*sj15);
IkReal x9467=(cj12*sj11*sj15*sj16);
CheckValue<IkReal> x9468 = IKatan2WithCheck(IkReal(((((-1.0)*x9461*x9462))+((r11*x9466))+(((-1.0)*r12*x9465))+((r01*x9463))+((r00*x9464))+((r10*x9467)))),IkReal(((((-1.0)*r11*x9463))+((r00*x9467))+((r12*x9462))+(((-1.0)*x9461*x9465))+((r01*x9466))+(((-1.0)*r10*x9464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9468.valid){
continue;
}
CheckValue<IkReal> x9469=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(1.0)*(cj11*cj11)*(cj12*cj12))))),-1);
if(!x9469.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x9468.value)+(((1.5707963267949)*(x9469.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x9470=(cj15*r12);
IkReal x9471=IKcos(j10);
IkReal x9472=(sj12*x9471);
IkReal x9473=(cj16*sj15);
IkReal x9474=(r11*x9473);
IkReal x9475=(sj15*sj16);
IkReal x9476=(r10*x9475);
IkReal x9477=(cj12*sj11);
IkReal x9478=IKsin(j10);
IkReal x9479=((1.0)*x9478);
IkReal x9480=(cj15*r02);
IkReal x9481=(r01*x9473);
IkReal x9482=(r00*x9475);
IkReal x9483=((0.01)*sj15);
IkReal x9484=((0.069)*x9471);
IkReal x9485=((0.36442)*cj11);
IkReal x9486=((0.069)*x9478);
IkReal x9487=((0.01)*cj15*cj16);
IkReal x9488=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x9477*x9479))+(((-1.0)*x9470))+x9474+x9476+x9472);
evalcond[1]=((((-1.0)*sj12*x9479))+(((-1.0)*x9480))+(((-1.0)*x9471*x9477))+x9482+x9481);
evalcond[2]=((((0.37429)*x9480))+(((-1.0)*(1.0)*px))+(((-1.0)*sj12*x9486))+((r00*x9488))+(((-0.37429)*x9482))+((r02*x9483))+((x9471*x9485))+((r01*x9487))+(((-1.0)*x9477*x9484))+x9484+(((-0.37429)*x9481)));
evalcond[3]=(((r10*x9488))+(((-1.0)*(1.0)*py))+((x9478*x9485))+(((0.37429)*x9470))+((r12*x9483))+(((-1.0)*x9477*x9486))+(((-0.37429)*x9476))+(((-0.37429)*x9474))+((r11*x9487))+(((0.069)*x9472))+x9486);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x9489=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x9489;
j14eval[1]=IKsign(x9489);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x9490=((1.0)*sj15);
IkReal x9491=((((-1.0)*cj16*r01*x9490))+(((-1.0)*r00*sj16*x9490))+((cj15*r02)));
j14eval[0]=x9491;
j14eval[1]=IKsign(x9491);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x9492=r21*r21;
IkReal x9493=r22*r22;
IkReal x9494=(cj16*r20);
IkReal x9495=((2.0)*r21*sj16*x9494);
IkReal x9496=cj15*cj15;
IkReal x9497=r20*r20;
IkReal x9498=(x9496*x9497);
IkReal x9499=cj16*cj16;
IkReal x9500=((2.0)*r22*sj15);
IkReal x9501=(cj15*cj16*r21);
IkReal x9502=(cj15*r20*sj16);
IkReal x9503=(x9492*x9499);
IkReal x9504=(((x9496*x9503))+((x9500*x9501))+(((-1.0)*x9503))+(((-1.0)*x9498*x9499))+x9492+x9493+x9498+((x9497*x9499))+((x9500*x9502))+(((-1.0)*x9495))+(((-1.0)*x9493*x9496))+((x9495*x9496)));
IkReal x9505=(r22*sj15);
IkReal x9506=(cj11*sj12);
IkReal x9507=(r21*sj16);
IkReal x9508=(cj16*sj11);
j14eval[0]=x9504;
j14eval[1]=IKsign(x9504);
j14eval[2]=((IKabs(((((-1.0)*cj11*sj12*x9494))+((sj11*x9502))+((x9506*x9507))+((cj15*r21*x9508))+((sj11*x9505)))))+(IKabs((((r20*x9508))+((x9505*x9506))+((x9501*x9506))+(((-1.0)*sj11*x9507))+((x9502*x9506))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x9509=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x9510=(cj16*sj10);
IkReal x9511=(sj10*sj16);
j14eval[0]=x9509;
j14eval[1]=((IKabs((((r20*x9510))+(((-1.0)*r21*x9511)))))+(IKabs((((cj15*r21*x9510))+((r22*sj10*sj15))+((cj15*r20*x9511))))));
j14eval[2]=IKsign(x9509);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x9512=((1.0)*cj16);
IkReal x9513=((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x9512))+((cj15*r02)));
IkReal x9514=(cj10*r21);
IkReal x9515=(cj10*r20);
j14eval[0]=x9513;
j14eval[1]=((IKabs((((cj10*r22*sj15))+((cj15*sj16*x9515))+((cj15*cj16*x9514)))))+(IKabs((((sj16*x9514))+(((-1.0)*x9512*x9515))))));
j14eval[2]=IKsign(x9513);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x9516=(r12*r22);
IkReal x9517=cj15*cj15;
IkReal x9518=(r10*r20);
IkReal x9519=(x9517*x9518);
IkReal x9520=cj16*cj16;
IkReal x9521=(r10*r21);
IkReal x9522=((1.0)*cj16*sj16);
IkReal x9523=(r11*r20);
IkReal x9524=(cj15*cj16);
IkReal x9525=(r12*sj15);
IkReal x9526=(cj15*sj16);
IkReal x9527=(r11*r21*x9520);
IkReal x9528=(cj16*sj16*x9517);
IkReal x9529=((((-1.0)*x9519*x9520))+((r10*r22*sj15*x9526))+(((-1.0)*x9521*x9522))+(((-1.0)*x9522*x9523))+((x9523*x9528))+((x9518*x9520))+(((-1.0)*x9527))+((cj15*r20*sj16*x9525))+x9519+x9516+((r11*r22*sj15*x9524))+((x9521*x9528))+((r11*r21))+(((-1.0)*x9516*x9517))+((x9517*x9527))+((cj15*cj16*r21*x9525)));
IkReal x9530=(cj10*r21);
IkReal x9531=(cj10*r20);
j14eval[0]=x9529;
j14eval[1]=IKsign(x9529);
j14eval[2]=((IKabs((((cj10*((r22*sj15))))+((x9524*x9530))+((x9526*x9531)))))+(IKabs((((sj16*x9530))+(((-1.0)*cj16*x9531))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x9532=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x9532;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x9532);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x9533=((1.0)*sj16);
IkReal x9534=((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x9533))+((cj15*r22)));
j14eval[0]=x9534;
j14eval[1]=((IKabs((((cj16*r10))+(((-1.0)*r11*x9533)))))+(IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15))))));
j14eval[2]=IKsign(x9534);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x9535=r11*r11;
IkReal x9536=((1.0)*x9535);
IkReal x9537=r12*r12;
IkReal x9538=(r11*sj16);
IkReal x9539=((2.0)*cj16*r10*x9538);
IkReal x9540=cj15*cj15;
IkReal x9541=cj16*cj16;
IkReal x9542=((2.0)*r12*sj15);
IkReal x9543=(cj15*cj16*r11);
IkReal x9544=(cj15*r10*sj16);
IkReal x9545=r10*r10;
IkReal x9546=((1.0)*x9545);
IkReal x9547=(x9540*x9541);
IkReal x9548=((((-1.0)*x9539*x9540))+(((-1.0)*x9540*x9546))+(((-1.0)*x9537))+(((-1.0)*x9536))+((x9537*x9540))+((x9545*x9547))+(((-1.0)*x9542*x9543))+((x9535*x9541))+(((-1.0)*x9542*x9544))+(((-1.0)*x9541*x9546))+(((-1.0)*x9536*x9547))+x9539);
j14eval[0]=x9548;
j14eval[1]=((IKabs((x9544+x9543+((r12*sj15)))))+(IKabs((((cj16*r10))+(((-1.0)*x9538))))));
j14eval[2]=IKsign(x9548);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9549=(r11*sj16);
IkReal x9550=(cj15*cj16*r11);
IkReal x9551=(cj15*r10*sj16);
IkReal x9552=r11*r11;
IkReal x9553=((1.0)*x9552);
IkReal x9554=r12*r12;
IkReal x9555=((2.0)*cj16*r10*x9549);
IkReal x9556=cj15*cj15;
IkReal x9557=cj16*cj16;
IkReal x9558=((2.0)*r12*sj15);
IkReal x9559=r10*r10;
IkReal x9560=((1.0)*x9559);
IkReal x9561=(x9556*x9557);
CheckValue<IkReal> x9562 = IKatan2WithCheck(IkReal(((((-1.0)*x9549))+((cj16*r10)))),IkReal((x9550+x9551+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9562.valid){
continue;
}
CheckValue<IkReal> x9563=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9557*x9560))+(((-1.0)*x9553))+x9555+(((-1.0)*x9553*x9561))+(((-1.0)*x9550*x9558))+((x9554*x9556))+((x9559*x9561))+((x9552*x9557))+(((-1.0)*x9556*x9560))+(((-1.0)*x9554))+(((-1.0)*x9551*x9558))+(((-1.0)*x9555*x9556)))),-1);
if(!x9563.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9562.value)+(((1.5707963267949)*(x9563.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9564=IKcos(j14);
IkReal x9565=(cj16*x9564);
IkReal x9566=((1.0)*sj16*x9564);
IkReal x9567=(r22*sj15);
IkReal x9568=IKsin(j14);
IkReal x9569=((1.0)*x9568);
IkReal x9570=(cj15*r21);
IkReal x9571=((1.0)*cj16*x9568);
IkReal x9572=(cj15*r20);
IkReal x9573=((1.0)*sj16*x9568);
IkReal x9574=(r12*sj15);
IkReal x9575=(cj15*r11);
IkReal x9576=(cj15*r10);
IkReal x9577=(sj16*x9568);
IkReal x9578=((1.0)*x9564);
IkReal x9579=((1.0)*cj16*x9564);
IkReal x9580=(r02*sj15);
IkReal x9581=(cj15*r01);
IkReal x9582=(cj15*r00);
evalcond[0]=((((-1.0)*x9572*x9573))+((r20*x9565))+(((-1.0)*x9570*x9571))+(((-1.0)*x9567*x9569))+(((-1.0)*r21*x9566)));
evalcond[1]=((((-1.0)*x9569*x9574))+(((-1.0)*x9571*x9575))+((r10*x9565))+(((-1.0)*x9573*x9576))+(((-1.0)*r11*x9566)));
evalcond[2]=(((r21*x9577))+(((-1.0)*x9566*x9572))+(((-1.0)*x9567*x9578))+(((-1.0)*r20*x9571))+(((-1.0)*x9570*x9579)));
evalcond[3]=(((r01*x9577))+(((-1.0)*r00*x9571))+(((-1.0)*x9579*x9581))+(((-1.0)*x9566*x9582))+(((-1.0)*x9578*x9580)));
evalcond[4]=((-1.0)+(((-1.0)*x9573*x9582))+(((-1.0)*x9571*x9581))+(((-1.0)*r01*x9566))+(((-1.0)*x9569*x9580))+((r00*x9565)));
evalcond[5]=((-1.0)+(((-1.0)*x9575*x9579))+(((-1.0)*r10*x9571))+((r11*x9577))+(((-1.0)*x9574*x9578))+(((-1.0)*x9566*x9576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9583=((1.0)*sj16);
CheckValue<IkReal> x9584=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x9583))+((cj15*r22)))),-1);
if(!x9584.valid){
continue;
}
CheckValue<IkReal> x9585 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x9583)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9585.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9584.value)))+(x9585.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9586=IKcos(j14);
IkReal x9587=(cj16*x9586);
IkReal x9588=((1.0)*sj16*x9586);
IkReal x9589=(r22*sj15);
IkReal x9590=IKsin(j14);
IkReal x9591=((1.0)*x9590);
IkReal x9592=(cj15*r21);
IkReal x9593=((1.0)*cj16*x9590);
IkReal x9594=(cj15*r20);
IkReal x9595=((1.0)*sj16*x9590);
IkReal x9596=(r12*sj15);
IkReal x9597=(cj15*r11);
IkReal x9598=(cj15*r10);
IkReal x9599=(sj16*x9590);
IkReal x9600=((1.0)*x9586);
IkReal x9601=((1.0)*cj16*x9586);
IkReal x9602=(r02*sj15);
IkReal x9603=(cj15*r01);
IkReal x9604=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x9588))+(((-1.0)*x9589*x9591))+(((-1.0)*x9594*x9595))+((r20*x9587))+(((-1.0)*x9592*x9593)));
evalcond[1]=((((-1.0)*x9595*x9598))+(((-1.0)*x9593*x9597))+(((-1.0)*r11*x9588))+(((-1.0)*x9591*x9596))+((r10*x9587)));
evalcond[2]=((((-1.0)*r20*x9593))+(((-1.0)*x9588*x9594))+(((-1.0)*x9592*x9601))+(((-1.0)*x9589*x9600))+((r21*x9599)));
evalcond[3]=((((-1.0)*x9600*x9602))+(((-1.0)*x9588*x9604))+(((-1.0)*x9601*x9603))+((r01*x9599))+(((-1.0)*r00*x9593)));
evalcond[4]=((-1.0)+(((-1.0)*x9591*x9602))+(((-1.0)*x9595*x9604))+((r00*x9587))+(((-1.0)*x9593*x9603))+(((-1.0)*r01*x9588)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x9593))+((r11*x9599))+(((-1.0)*x9596*x9600))+(((-1.0)*x9588*x9598))+(((-1.0)*x9597*x9601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9605 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9605.valid){
continue;
}
CheckValue<IkReal> x9606=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x9606.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9605.value)+(((1.5707963267949)*(x9606.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9607=IKcos(j14);
IkReal x9608=(cj16*x9607);
IkReal x9609=((1.0)*sj16*x9607);
IkReal x9610=(r22*sj15);
IkReal x9611=IKsin(j14);
IkReal x9612=((1.0)*x9611);
IkReal x9613=(cj15*r21);
IkReal x9614=((1.0)*cj16*x9611);
IkReal x9615=(cj15*r20);
IkReal x9616=((1.0)*sj16*x9611);
IkReal x9617=(r12*sj15);
IkReal x9618=(cj15*r11);
IkReal x9619=(cj15*r10);
IkReal x9620=(sj16*x9611);
IkReal x9621=((1.0)*x9607);
IkReal x9622=((1.0)*cj16*x9607);
IkReal x9623=(r02*sj15);
IkReal x9624=(cj15*r01);
IkReal x9625=(cj15*r00);
evalcond[0]=((((-1.0)*x9613*x9614))+((r20*x9608))+(((-1.0)*r21*x9609))+(((-1.0)*x9610*x9612))+(((-1.0)*x9615*x9616)));
evalcond[1]=((((-1.0)*x9614*x9618))+(((-1.0)*x9616*x9619))+(((-1.0)*r11*x9609))+((r10*x9608))+(((-1.0)*x9612*x9617)));
evalcond[2]=((((-1.0)*r20*x9614))+(((-1.0)*x9610*x9621))+(((-1.0)*x9613*x9622))+((r21*x9620))+(((-1.0)*x9609*x9615)));
evalcond[3]=(((r01*x9620))+(((-1.0)*r00*x9614))+(((-1.0)*x9609*x9625))+(((-1.0)*x9622*x9624))+(((-1.0)*x9621*x9623)));
evalcond[4]=((-1.0)+(((-1.0)*x9616*x9625))+((r00*x9608))+(((-1.0)*x9612*x9623))+(((-1.0)*r01*x9609))+(((-1.0)*x9614*x9624)));
evalcond[5]=((-1.0)+((r11*x9620))+(((-1.0)*r10*x9614))+(((-1.0)*x9609*x9619))+(((-1.0)*x9617*x9621))+(((-1.0)*x9618*x9622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x9626=((1.0)*cj15);
IkReal x9627=((((-1.0)*r12*x9626))+((cj16*r11*sj15))+((r10*sj15*sj16)));
j14eval[0]=x9627;
j14eval[1]=((IKabs(((((-1.0)*(1.0)*r22*sj15))+(((-1.0)*r20*sj16*x9626))+(((-1.0)*cj16*r21*x9626)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x9627);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x9628=((1.0)*cj16);
IkReal x9629=((1.0)*sj15);
IkReal x9630=((((-1.0)*r20*sj16*x9629))+((cj15*r22))+(((-1.0)*r21*sj15*x9628)));
j14eval[0]=x9630;
j14eval[1]=((IKabs(((((-1.0)*r10*x9628))+((r11*sj16)))))+(IKabs(((((-1.0)*r12*x9629))+(((-1.0)*cj15*r11*x9628))+(((-1.0)*(1.0)*cj15*r10*sj16))))));
j14eval[2]=IKsign(x9630);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x9631=r11*r11;
IkReal x9632=r12*r12;
IkReal x9633=(r11*sj16);
IkReal x9634=((2.0)*cj16*r10*x9633);
IkReal x9635=cj15*cj15;
IkReal x9636=r10*r10;
IkReal x9637=(x9635*x9636);
IkReal x9638=cj16*cj16;
IkReal x9639=((2.0)*r12*sj15);
IkReal x9640=(cj15*cj16*r11);
IkReal x9641=(cj15*r10*sj16);
IkReal x9642=(x9631*x9638);
IkReal x9643=(((x9639*x9640))+((x9636*x9638))+((x9634*x9635))+((x9635*x9642))+((x9639*x9641))+(((-1.0)*x9632*x9635))+(((-1.0)*x9642))+(((-1.0)*x9634))+(((-1.0)*x9637*x9638))+x9637+x9632+x9631);
j14eval[0]=x9643;
j14eval[1]=IKsign(x9643);
j14eval[2]=((IKabs(((((-1.0)*x9633))+((cj16*r10)))))+(IKabs((((r12*sj15))+x9640+x9641))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9644=(r11*sj16);
IkReal x9645=(cj15*cj16*r11);
IkReal x9646=(cj15*r10*sj16);
IkReal x9647=r11*r11;
IkReal x9648=r12*r12;
IkReal x9649=((2.0)*cj16*r10*x9644);
IkReal x9650=cj15*cj15;
IkReal x9651=r10*r10;
IkReal x9652=(x9650*x9651);
IkReal x9653=cj16*cj16;
IkReal x9654=((2.0)*r12*sj15);
IkReal x9655=(x9647*x9653);
CheckValue<IkReal> x9656 = IKatan2WithCheck(IkReal(((((-1.0)*x9644))+((cj16*r10)))),IkReal((((r12*sj15))+x9645+x9646)),IKFAST_ATAN2_MAGTHRESH);
if(!x9656.valid){
continue;
}
CheckValue<IkReal> x9657=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9649))+((x9650*x9655))+x9652+x9647+x9648+((x9645*x9654))+((x9649*x9650))+((x9646*x9654))+(((-1.0)*x9652*x9653))+((x9651*x9653))+(((-1.0)*x9648*x9650))+(((-1.0)*x9655)))),-1);
if(!x9657.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9656.value)+(((1.5707963267949)*(x9657.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9658=IKcos(j14);
IkReal x9659=(cj16*x9658);
IkReal x9660=((1.0)*sj16*x9658);
IkReal x9661=(r22*sj15);
IkReal x9662=IKsin(j14);
IkReal x9663=((1.0)*x9662);
IkReal x9664=(cj15*r21);
IkReal x9665=((1.0)*cj16*x9662);
IkReal x9666=(cj15*r20);
IkReal x9667=((1.0)*sj16*x9662);
IkReal x9668=(r12*sj15);
IkReal x9669=(cj15*r11);
IkReal x9670=(cj15*r10);
IkReal x9671=(sj16*x9662);
IkReal x9672=((1.0)*x9658);
IkReal x9673=((1.0)*cj16*x9658);
IkReal x9674=(r02*sj15);
IkReal x9675=(cj15*r01);
IkReal x9676=(cj15*r00);
evalcond[0]=((((-1.0)*x9664*x9665))+(((-1.0)*x9666*x9667))+(((-1.0)*x9661*x9663))+(((-1.0)*r21*x9660))+((r20*x9659)));
evalcond[1]=(((r10*x9659))+(((-1.0)*x9667*x9670))+(((-1.0)*x9665*x9669))+(((-1.0)*r11*x9660))+(((-1.0)*x9663*x9668)));
evalcond[2]=((((-1.0)*r20*x9665))+((r21*x9671))+(((-1.0)*x9661*x9672))+(((-1.0)*x9664*x9673))+(((-1.0)*x9660*x9666)));
evalcond[3]=((((-1.0)*x9673*x9675))+(((-1.0)*r00*x9665))+(((-1.0)*x9672*x9674))+(((-1.0)*x9660*x9676))+((r01*x9671)));
evalcond[4]=((1.0)+(((-1.0)*x9667*x9676))+(((-1.0)*x9665*x9675))+((r00*x9659))+(((-1.0)*r01*x9660))+(((-1.0)*x9663*x9674)));
evalcond[5]=((1.0)+(((-1.0)*x9668*x9672))+(((-1.0)*r10*x9665))+((r11*x9671))+(((-1.0)*x9669*x9673))+(((-1.0)*x9660*x9670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9677=((1.0)*cj16);
IkReal x9678=((1.0)*sj15);
CheckValue<IkReal> x9679 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9677))+((r11*sj16)))),IkReal(((((-1.0)*r12*x9678))+(((-1.0)*cj15*r11*x9677))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9679.valid){
continue;
}
CheckValue<IkReal> x9680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x9678))+((cj15*r22))+(((-1.0)*r21*sj15*x9677)))),-1);
if(!x9680.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9679.value)+(((1.5707963267949)*(x9680.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9681=IKcos(j14);
IkReal x9682=(cj16*x9681);
IkReal x9683=((1.0)*sj16*x9681);
IkReal x9684=(r22*sj15);
IkReal x9685=IKsin(j14);
IkReal x9686=((1.0)*x9685);
IkReal x9687=(cj15*r21);
IkReal x9688=((1.0)*cj16*x9685);
IkReal x9689=(cj15*r20);
IkReal x9690=((1.0)*sj16*x9685);
IkReal x9691=(r12*sj15);
IkReal x9692=(cj15*r11);
IkReal x9693=(cj15*r10);
IkReal x9694=(sj16*x9685);
IkReal x9695=((1.0)*x9681);
IkReal x9696=((1.0)*cj16*x9681);
IkReal x9697=(r02*sj15);
IkReal x9698=(cj15*r01);
IkReal x9699=(cj15*r00);
evalcond[0]=((((-1.0)*x9687*x9688))+(((-1.0)*r21*x9683))+((r20*x9682))+(((-1.0)*x9684*x9686))+(((-1.0)*x9689*x9690)));
evalcond[1]=((((-1.0)*r11*x9683))+(((-1.0)*x9688*x9692))+((r10*x9682))+(((-1.0)*x9686*x9691))+(((-1.0)*x9690*x9693)));
evalcond[2]=((((-1.0)*x9687*x9696))+(((-1.0)*x9683*x9689))+(((-1.0)*x9684*x9695))+((r21*x9694))+(((-1.0)*r20*x9688)));
evalcond[3]=((((-1.0)*x9696*x9698))+(((-1.0)*x9695*x9697))+(((-1.0)*r00*x9688))+((r01*x9694))+(((-1.0)*x9683*x9699)));
evalcond[4]=((1.0)+(((-1.0)*x9688*x9698))+((r00*x9682))+(((-1.0)*x9686*x9697))+(((-1.0)*x9690*x9699))+(((-1.0)*r01*x9683)));
evalcond[5]=((1.0)+(((-1.0)*r10*x9688))+(((-1.0)*x9691*x9695))+(((-1.0)*x9692*x9696))+(((-1.0)*x9683*x9693))+((r11*x9694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9700=((1.0)*cj15);
CheckValue<IkReal> x9701 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*cj16*r21*x9700))+(((-1.0)*r20*sj16*x9700))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9701.valid){
continue;
}
CheckValue<IkReal> x9702=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x9700)))),-1);
if(!x9702.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9701.value)+(((1.5707963267949)*(x9702.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9703=IKcos(j14);
IkReal x9704=(cj16*x9703);
IkReal x9705=((1.0)*sj16*x9703);
IkReal x9706=(r22*sj15);
IkReal x9707=IKsin(j14);
IkReal x9708=((1.0)*x9707);
IkReal x9709=(cj15*r21);
IkReal x9710=((1.0)*cj16*x9707);
IkReal x9711=(cj15*r20);
IkReal x9712=((1.0)*sj16*x9707);
IkReal x9713=(r12*sj15);
IkReal x9714=(cj15*r11);
IkReal x9715=(cj15*r10);
IkReal x9716=(sj16*x9707);
IkReal x9717=((1.0)*x9703);
IkReal x9718=((1.0)*cj16*x9703);
IkReal x9719=(r02*sj15);
IkReal x9720=(cj15*r01);
IkReal x9721=(cj15*r00);
evalcond[0]=((((-1.0)*x9711*x9712))+(((-1.0)*r21*x9705))+(((-1.0)*x9706*x9708))+((r20*x9704))+(((-1.0)*x9709*x9710)));
evalcond[1]=((((-1.0)*r11*x9705))+(((-1.0)*x9710*x9714))+((r10*x9704))+(((-1.0)*x9712*x9715))+(((-1.0)*x9708*x9713)));
evalcond[2]=((((-1.0)*r20*x9710))+((r21*x9716))+(((-1.0)*x9706*x9717))+(((-1.0)*x9705*x9711))+(((-1.0)*x9709*x9718)));
evalcond[3]=((((-1.0)*x9717*x9719))+(((-1.0)*x9718*x9720))+((r01*x9716))+(((-1.0)*x9705*x9721))+(((-1.0)*r00*x9710)));
evalcond[4]=((1.0)+(((-1.0)*r01*x9705))+(((-1.0)*x9708*x9719))+(((-1.0)*x9710*x9720))+(((-1.0)*x9712*x9721))+((r00*x9704)));
evalcond[5]=((1.0)+(((-1.0)*r10*x9710))+(((-1.0)*x9714*x9718))+(((-1.0)*x9713*x9717))+((r11*x9716))+(((-1.0)*x9705*x9715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x9722=((1.0)*cj15);
IkReal x9723=(((r20*sj15*sj16))+(((-1.0)*r22*x9722))+((cj16*r21*sj15)));
j14eval[0]=x9723;
j14eval[1]=IKsign(x9723);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*r00*sj16*x9722))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x9722))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x9724=((1.0)*cj16);
IkReal x9725=((1.0)*sj15);
IkReal x9726=((((-1.0)*r01*sj15*x9724))+(((-1.0)*r00*sj16*x9725))+((cj15*r02)));
j14eval[0]=x9726;
j14eval[1]=((IKabs(((((-1.0)*r22*x9725))+(((-1.0)*cj15*r21*x9724))+(((-1.0)*(1.0)*cj15*r20*sj16)))))+(IKabs((((r21*sj16))+(((-1.0)*r20*x9724))))));
j14eval[2]=IKsign(x9726);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x9727=r01*r01;
IkReal x9728=((1.0)*x9727);
IkReal x9729=r02*r02;
IkReal x9730=(r01*sj16);
IkReal x9731=((2.0)*cj16*r00*x9730);
IkReal x9732=cj15*cj15;
IkReal x9733=cj16*cj16;
IkReal x9734=((2.0)*r02*sj15);
IkReal x9735=(cj15*cj16*r01);
IkReal x9736=(cj15*r00*sj16);
IkReal x9737=r00*r00;
IkReal x9738=((1.0)*x9737);
IkReal x9739=(x9732*x9733);
IkReal x9740=((((-1.0)*x9734*x9735))+(((-1.0)*x9733*x9738))+(((-1.0)*x9729))+(((-1.0)*x9734*x9736))+((x9737*x9739))+(((-1.0)*x9728*x9739))+((x9727*x9733))+(((-1.0)*x9732*x9738))+x9731+(((-1.0)*x9731*x9732))+(((-1.0)*x9728))+((x9729*x9732)));
j14eval[0]=x9740;
j14eval[1]=IKsign(x9740);
j14eval[2]=((IKabs((((r02*sj15))+x9736+x9735)))+(IKabs(((((-1.0)*x9730))+((cj16*r00))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9741=(r01*sj16);
IkReal x9742=(cj15*cj16*r01);
IkReal x9743=(cj15*r00*sj16);
IkReal x9744=r01*r01;
IkReal x9745=((1.0)*x9744);
IkReal x9746=r02*r02;
IkReal x9747=((2.0)*cj16*r00*x9741);
IkReal x9748=cj15*cj15;
IkReal x9749=cj16*cj16;
IkReal x9750=((2.0)*r02*sj15);
IkReal x9751=r00*r00;
IkReal x9752=((1.0)*x9751);
IkReal x9753=(x9748*x9749);
CheckValue<IkReal> x9754 = IKatan2WithCheck(IkReal(((((-1.0)*x9741))+((cj16*r00)))),IkReal((x9742+x9743+((r02*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9754.valid){
continue;
}
CheckValue<IkReal> x9755=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9749*x9752))+((x9751*x9753))+x9747+((x9744*x9749))+(((-1.0)*x9745*x9753))+(((-1.0)*x9747*x9748))+(((-1.0)*x9748*x9752))+(((-1.0)*x9742*x9750))+(((-1.0)*x9746))+((x9746*x9748))+(((-1.0)*x9743*x9750))+(((-1.0)*x9745)))),-1);
if(!x9755.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9754.value)+(((1.5707963267949)*(x9755.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9756=IKcos(j14);
IkReal x9757=(cj16*x9756);
IkReal x9758=((1.0)*sj16*x9756);
IkReal x9759=(r22*sj15);
IkReal x9760=IKsin(j14);
IkReal x9761=((1.0)*x9760);
IkReal x9762=(cj15*r21);
IkReal x9763=((1.0)*cj16*x9760);
IkReal x9764=(cj15*r20);
IkReal x9765=((1.0)*sj16*x9760);
IkReal x9766=(r02*sj15);
IkReal x9767=(cj15*r01);
IkReal x9768=(cj15*r00);
IkReal x9769=(sj16*x9760);
IkReal x9770=((1.0)*x9756);
IkReal x9771=((1.0)*cj16*x9756);
IkReal x9772=(r12*sj15);
IkReal x9773=(cj15*r11);
IkReal x9774=(cj15*r10);
evalcond[0]=((((-1.0)*x9764*x9765))+((r20*x9757))+(((-1.0)*r21*x9758))+(((-1.0)*x9759*x9761))+(((-1.0)*x9762*x9763)));
evalcond[1]=((((-1.0)*x9765*x9768))+(((-1.0)*x9761*x9766))+(((-1.0)*r01*x9758))+((r00*x9757))+(((-1.0)*x9763*x9767)));
evalcond[2]=((((-1.0)*x9762*x9771))+(((-1.0)*x9758*x9764))+(((-1.0)*x9759*x9770))+(((-1.0)*r20*x9763))+((r21*x9769)));
evalcond[3]=((((-1.0)*x9770*x9772))+(((-1.0)*x9771*x9773))+((r11*x9769))+(((-1.0)*r10*x9763))+(((-1.0)*x9758*x9774)));
evalcond[4]=((1.0)+(((-1.0)*x9765*x9774))+(((-1.0)*x9763*x9773))+(((-1.0)*r11*x9758))+(((-1.0)*x9761*x9772))+((r10*x9757)));
evalcond[5]=((-1.0)+((r01*x9769))+(((-1.0)*x9766*x9770))+(((-1.0)*x9758*x9768))+(((-1.0)*r00*x9763))+(((-1.0)*x9767*x9771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9775=((1.0)*cj16);
IkReal x9776=((1.0)*sj15);
CheckValue<IkReal> x9777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x9776))+((cj15*r02))+(((-1.0)*r01*sj15*x9775)))),-1);
if(!x9777.valid){
continue;
}
CheckValue<IkReal> x9778 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9775))+((r21*sj16)))),IkReal(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*cj15*r21*x9775))+(((-1.0)*r22*x9776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9778.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9777.value)))+(x9778.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9779=IKcos(j14);
IkReal x9780=(cj16*x9779);
IkReal x9781=((1.0)*sj16*x9779);
IkReal x9782=(r22*sj15);
IkReal x9783=IKsin(j14);
IkReal x9784=((1.0)*x9783);
IkReal x9785=(cj15*r21);
IkReal x9786=((1.0)*cj16*x9783);
IkReal x9787=(cj15*r20);
IkReal x9788=((1.0)*sj16*x9783);
IkReal x9789=(r02*sj15);
IkReal x9790=(cj15*r01);
IkReal x9791=(cj15*r00);
IkReal x9792=(sj16*x9783);
IkReal x9793=((1.0)*x9779);
IkReal x9794=((1.0)*cj16*x9779);
IkReal x9795=(r12*sj15);
IkReal x9796=(cj15*r11);
IkReal x9797=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x9781))+(((-1.0)*x9785*x9786))+((r20*x9780))+(((-1.0)*x9782*x9784))+(((-1.0)*x9787*x9788)));
evalcond[1]=((((-1.0)*x9788*x9791))+(((-1.0)*x9784*x9789))+(((-1.0)*x9786*x9790))+((r00*x9780))+(((-1.0)*r01*x9781)));
evalcond[2]=((((-1.0)*x9782*x9793))+(((-1.0)*r20*x9786))+((r21*x9792))+(((-1.0)*x9781*x9787))+(((-1.0)*x9785*x9794)));
evalcond[3]=((((-1.0)*r10*x9786))+(((-1.0)*x9781*x9797))+(((-1.0)*x9793*x9795))+(((-1.0)*x9794*x9796))+((r11*x9792)));
evalcond[4]=((1.0)+(((-1.0)*r11*x9781))+(((-1.0)*x9786*x9796))+(((-1.0)*x9788*x9797))+(((-1.0)*x9784*x9795))+((r10*x9780)));
evalcond[5]=((-1.0)+(((-1.0)*x9789*x9793))+(((-1.0)*x9781*x9791))+(((-1.0)*x9790*x9794))+((r01*x9792))+(((-1.0)*r00*x9786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9798=((1.0)*cj15);
CheckValue<IkReal> x9799 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*r00*sj16*x9798))+(((-1.0)*cj16*r01*x9798))+(((-1.0)*(1.0)*r02*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9799.valid){
continue;
}
CheckValue<IkReal> x9800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x9798))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x9800.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9799.value)+(((1.5707963267949)*(x9800.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9801=IKcos(j14);
IkReal x9802=(cj16*x9801);
IkReal x9803=((1.0)*sj16*x9801);
IkReal x9804=(r22*sj15);
IkReal x9805=IKsin(j14);
IkReal x9806=((1.0)*x9805);
IkReal x9807=(cj15*r21);
IkReal x9808=((1.0)*cj16*x9805);
IkReal x9809=(cj15*r20);
IkReal x9810=((1.0)*sj16*x9805);
IkReal x9811=(r02*sj15);
IkReal x9812=(cj15*r01);
IkReal x9813=(cj15*r00);
IkReal x9814=(sj16*x9805);
IkReal x9815=((1.0)*x9801);
IkReal x9816=((1.0)*cj16*x9801);
IkReal x9817=(r12*sj15);
IkReal x9818=(cj15*r11);
IkReal x9819=(cj15*r10);
evalcond[0]=(((r20*x9802))+(((-1.0)*x9807*x9808))+(((-1.0)*r21*x9803))+(((-1.0)*x9804*x9806))+(((-1.0)*x9809*x9810)));
evalcond[1]=((((-1.0)*r01*x9803))+(((-1.0)*x9810*x9813))+(((-1.0)*x9806*x9811))+(((-1.0)*x9808*x9812))+((r00*x9802)));
evalcond[2]=((((-1.0)*x9807*x9816))+(((-1.0)*x9804*x9815))+(((-1.0)*x9803*x9809))+(((-1.0)*r20*x9808))+((r21*x9814)));
evalcond[3]=((((-1.0)*x9803*x9819))+(((-1.0)*x9816*x9818))+(((-1.0)*x9815*x9817))+((r11*x9814))+(((-1.0)*r10*x9808)));
evalcond[4]=((1.0)+(((-1.0)*r11*x9803))+(((-1.0)*x9810*x9819))+(((-1.0)*x9806*x9817))+(((-1.0)*x9808*x9818))+((r10*x9802)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x9808))+(((-1.0)*x9803*x9813))+((r01*x9814))+(((-1.0)*x9811*x9815))+(((-1.0)*x9812*x9816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x9820=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x9820;
j14eval[1]=IKsign(x9820);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x9821=((1.0)*sj16);
IkReal x9822=(((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15))+(((-1.0)*r00*sj15*x9821)));
j14eval[0]=x9822;
j14eval[1]=IKsign(x9822);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs(((((-1.0)*r21*x9821))+((cj16*r20))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x9823=r01*r01;
IkReal x9824=r02*r02;
IkReal x9825=(r01*sj16);
IkReal x9826=((2.0)*cj16*r00*x9825);
IkReal x9827=cj15*cj15;
IkReal x9828=r00*r00;
IkReal x9829=(x9827*x9828);
IkReal x9830=cj16*cj16;
IkReal x9831=((2.0)*r02*sj15);
IkReal x9832=(cj15*cj16*r01);
IkReal x9833=(cj15*r00*sj16);
IkReal x9834=(x9823*x9830);
IkReal x9835=((((-1.0)*x9829*x9830))+((x9831*x9832))+x9829+x9824+x9823+(((-1.0)*x9824*x9827))+((x9831*x9833))+((x9826*x9827))+((x9828*x9830))+(((-1.0)*x9826))+(((-1.0)*x9834))+((x9827*x9834)));
j14eval[0]=x9835;
j14eval[1]=((IKabs(((((-1.0)*x9825))+((cj16*r00)))))+(IKabs((((r02*sj15))+x9833+x9832))));
j14eval[2]=IKsign(x9835);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9836=(r01*sj16);
IkReal x9837=(cj15*cj16*r01);
IkReal x9838=(cj15*r00*sj16);
IkReal x9839=r01*r01;
IkReal x9840=r02*r02;
IkReal x9841=((2.0)*cj16*r00*x9836);
IkReal x9842=cj15*cj15;
IkReal x9843=r00*r00;
IkReal x9844=(x9842*x9843);
IkReal x9845=cj16*cj16;
IkReal x9846=((2.0)*r02*sj15);
IkReal x9847=(x9839*x9845);
CheckValue<IkReal> x9848 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*x9836)))),IkReal((((r02*sj15))+x9837+x9838)),IKFAST_ATAN2_MAGTHRESH);
if(!x9848.valid){
continue;
}
CheckValue<IkReal> x9849=IKPowWithIntegerCheck(IKsign((((x9841*x9842))+((x9843*x9845))+(((-1.0)*x9841))+(((-1.0)*x9840*x9842))+x9844+x9840+((x9837*x9846))+(((-1.0)*x9844*x9845))+x9839+((x9838*x9846))+(((-1.0)*x9847))+((x9842*x9847)))),-1);
if(!x9849.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9848.value)+(((1.5707963267949)*(x9849.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9850=IKcos(j14);
IkReal x9851=(cj16*x9850);
IkReal x9852=((1.0)*sj16*x9850);
IkReal x9853=(r22*sj15);
IkReal x9854=IKsin(j14);
IkReal x9855=((1.0)*x9854);
IkReal x9856=(cj15*r21);
IkReal x9857=((1.0)*cj16*x9854);
IkReal x9858=(cj15*r20);
IkReal x9859=((1.0)*sj16*x9854);
IkReal x9860=(r02*sj15);
IkReal x9861=(cj15*r01);
IkReal x9862=(cj15*r00);
IkReal x9863=(sj16*x9854);
IkReal x9864=((1.0)*x9850);
IkReal x9865=((1.0)*cj16*x9850);
IkReal x9866=(r12*sj15);
IkReal x9867=(cj15*r11);
IkReal x9868=(cj15*r10);
evalcond[0]=((((-1.0)*x9856*x9857))+((r20*x9851))+(((-1.0)*x9858*x9859))+(((-1.0)*x9853*x9855))+(((-1.0)*r21*x9852)));
evalcond[1]=((((-1.0)*x9859*x9862))+(((-1.0)*x9857*x9861))+(((-1.0)*r01*x9852))+(((-1.0)*x9855*x9860))+((r00*x9851)));
evalcond[2]=((((-1.0)*x9856*x9865))+(((-1.0)*x9853*x9864))+(((-1.0)*x9852*x9858))+(((-1.0)*r20*x9857))+((r21*x9863)));
evalcond[3]=((((-1.0)*x9864*x9866))+(((-1.0)*x9852*x9868))+(((-1.0)*r10*x9857))+(((-1.0)*x9865*x9867))+((r11*x9863)));
evalcond[4]=((-1.0)+(((-1.0)*x9859*x9868))+(((-1.0)*x9855*x9866))+(((-1.0)*x9857*x9867))+(((-1.0)*r11*x9852))+((r10*x9851)));
evalcond[5]=((1.0)+(((-1.0)*x9861*x9865))+((r01*x9863))+(((-1.0)*r00*x9857))+(((-1.0)*x9852*x9862))+(((-1.0)*x9860*x9864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9869=((1.0)*sj16);
CheckValue<IkReal> x9870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15*x9869))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x9870.valid){
continue;
}
CheckValue<IkReal> x9871 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9869))+((cj16*r20)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9871.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9870.value)))+(x9871.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9872=IKcos(j14);
IkReal x9873=(cj16*x9872);
IkReal x9874=((1.0)*sj16*x9872);
IkReal x9875=(r22*sj15);
IkReal x9876=IKsin(j14);
IkReal x9877=((1.0)*x9876);
IkReal x9878=(cj15*r21);
IkReal x9879=((1.0)*cj16*x9876);
IkReal x9880=(cj15*r20);
IkReal x9881=((1.0)*sj16*x9876);
IkReal x9882=(r02*sj15);
IkReal x9883=(cj15*r01);
IkReal x9884=(cj15*r00);
IkReal x9885=(sj16*x9876);
IkReal x9886=((1.0)*x9872);
IkReal x9887=((1.0)*cj16*x9872);
IkReal x9888=(r12*sj15);
IkReal x9889=(cj15*r11);
IkReal x9890=(cj15*r10);
evalcond[0]=((((-1.0)*x9880*x9881))+(((-1.0)*x9875*x9877))+(((-1.0)*r21*x9874))+((r20*x9873))+(((-1.0)*x9878*x9879)));
evalcond[1]=((((-1.0)*x9881*x9884))+(((-1.0)*r01*x9874))+(((-1.0)*x9877*x9882))+((r00*x9873))+(((-1.0)*x9879*x9883)));
evalcond[2]=((((-1.0)*x9875*x9886))+(((-1.0)*x9878*x9887))+((r21*x9885))+(((-1.0)*x9874*x9880))+(((-1.0)*r20*x9879)));
evalcond[3]=(((r11*x9885))+(((-1.0)*x9886*x9888))+(((-1.0)*x9887*x9889))+(((-1.0)*r10*x9879))+(((-1.0)*x9874*x9890)));
evalcond[4]=((-1.0)+(((-1.0)*x9881*x9890))+(((-1.0)*x9879*x9889))+((r10*x9873))+(((-1.0)*r11*x9874))+(((-1.0)*x9877*x9888)));
evalcond[5]=((1.0)+(((-1.0)*r00*x9879))+(((-1.0)*x9882*x9886))+(((-1.0)*x9874*x9884))+(((-1.0)*x9883*x9887))+((r01*x9885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9891 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9891.valid){
continue;
}
CheckValue<IkReal> x9892=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x9892.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9891.value)+(((1.5707963267949)*(x9892.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9893=IKcos(j14);
IkReal x9894=(cj16*x9893);
IkReal x9895=((1.0)*sj16*x9893);
IkReal x9896=(r22*sj15);
IkReal x9897=IKsin(j14);
IkReal x9898=((1.0)*x9897);
IkReal x9899=(cj15*r21);
IkReal x9900=((1.0)*cj16*x9897);
IkReal x9901=(cj15*r20);
IkReal x9902=((1.0)*sj16*x9897);
IkReal x9903=(r02*sj15);
IkReal x9904=(cj15*r01);
IkReal x9905=(cj15*r00);
IkReal x9906=(sj16*x9897);
IkReal x9907=((1.0)*x9893);
IkReal x9908=((1.0)*cj16*x9893);
IkReal x9909=(r12*sj15);
IkReal x9910=(cj15*r11);
IkReal x9911=(cj15*r10);
evalcond[0]=((((-1.0)*x9901*x9902))+(((-1.0)*x9899*x9900))+(((-1.0)*x9896*x9898))+(((-1.0)*r21*x9895))+((r20*x9894)));
evalcond[1]=((((-1.0)*x9902*x9905))+(((-1.0)*x9900*x9904))+((r00*x9894))+(((-1.0)*x9898*x9903))+(((-1.0)*r01*x9895)));
evalcond[2]=((((-1.0)*x9899*x9908))+(((-1.0)*r20*x9900))+(((-1.0)*x9895*x9901))+((r21*x9906))+(((-1.0)*x9896*x9907)));
evalcond[3]=((((-1.0)*x9908*x9910))+(((-1.0)*x9895*x9911))+(((-1.0)*r10*x9900))+(((-1.0)*x9907*x9909))+((r11*x9906)));
evalcond[4]=((-1.0)+(((-1.0)*x9900*x9910))+((r10*x9894))+(((-1.0)*x9898*x9909))+(((-1.0)*r11*x9895))+(((-1.0)*x9902*x9911)));
evalcond[5]=((1.0)+((r01*x9906))+(((-1.0)*r00*x9900))+(((-1.0)*x9903*x9907))+(((-1.0)*x9904*x9908))+(((-1.0)*x9895*x9905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9912=(cj10*r21);
IkReal x9913=(cj15*cj16);
IkReal x9914=(cj10*r20);
IkReal x9915=(cj15*sj16);
IkReal x9916=(r12*r22);
IkReal x9917=cj15*cj15;
IkReal x9918=(r10*r20);
IkReal x9919=(x9917*x9918);
IkReal x9920=cj16*cj16;
IkReal x9921=(r10*r21);
IkReal x9922=((1.0)*cj16*sj16);
IkReal x9923=(r11*r20);
IkReal x9924=(r12*sj15);
IkReal x9925=(r11*r21*x9920);
IkReal x9926=(cj16*sj16*x9917);
CheckValue<IkReal> x9927=IKPowWithIntegerCheck(IKsign((((r10*r22*sj15*x9915))+(((-1.0)*x9922*x9923))+((x9921*x9926))+(((-1.0)*x9919*x9920))+((r11*r22*sj15*x9913))+((x9917*x9925))+((cj15*r20*sj16*x9924))+(((-1.0)*x9925))+((x9923*x9926))+x9919+x9916+(((-1.0)*x9916*x9917))+((cj15*cj16*r21*x9924))+((x9918*x9920))+((r11*r21))+(((-1.0)*x9921*x9922)))),-1);
if(!x9927.valid){
continue;
}
CheckValue<IkReal> x9928 = IKatan2WithCheck(IkReal((((x9914*x9915))+((cj10*((r22*sj15))))+((x9912*x9913)))),IkReal((((sj16*x9912))+(((-1.0)*cj16*x9914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9928.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9927.value)))+(x9928.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9929=IKcos(j14);
IkReal x9930=(cj16*x9929);
IkReal x9931=((1.0)*sj16*x9929);
IkReal x9932=(r22*sj15);
IkReal x9933=IKsin(j14);
IkReal x9934=((1.0)*x9933);
IkReal x9935=(cj15*r21);
IkReal x9936=((1.0)*cj16*x9933);
IkReal x9937=(cj15*r20);
IkReal x9938=((1.0)*sj16*x9933);
IkReal x9939=(sj16*x9933);
IkReal x9940=((1.0)*x9929);
IkReal x9941=((1.0)*cj16*x9929);
IkReal x9942=(r12*sj15);
IkReal x9943=(cj15*r11);
IkReal x9944=(cj15*r10);
IkReal x9945=((-1.0)*(((1.0)*sj10)));
IkReal x9946=(r02*sj15);
IkReal x9947=(cj15*r01);
IkReal x9948=(cj15*r00);
evalcond[0]=((((-1.0)*x9935*x9936))+((r20*x9930))+(((-1.0)*x9932*x9934))+(((-1.0)*x9937*x9938))+(((-1.0)*r21*x9931)));
evalcond[1]=((((-1.0)*x9931*x9937))+((r21*x9939))+(((-1.0)*x9935*x9941))+(((-1.0)*x9932*x9940))+(((-1.0)*r20*x9936)));
evalcond[2]=((((-1.0)*r11*x9931))+((r10*x9930))+(((-1.0)*x9934*x9942))+(((-1.0)*x9938*x9944))+cj10+(((-1.0)*x9936*x9943)));
evalcond[3]=(((r00*x9930))+(((-1.0)*r01*x9931))+(((-1.0)*x9938*x9948))+x9945+(((-1.0)*x9936*x9947))+(((-1.0)*x9934*x9946)));
evalcond[4]=((((-1.0)*x9931*x9948))+(((-1.0)*(1.0)*cj10))+(((-1.0)*r00*x9936))+(((-1.0)*x9941*x9947))+((r01*x9939))+(((-1.0)*x9940*x9946)));
evalcond[5]=((((-1.0)*x9931*x9944))+(((-1.0)*r10*x9936))+((r11*x9939))+x9945+(((-1.0)*x9940*x9942))+(((-1.0)*x9941*x9943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9949=((1.0)*sj15);
IkReal x9950=(cj10*r21);
IkReal x9951=((1.0)*cj10*r20);
CheckValue<IkReal> x9952=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x9949))+((cj15*r02))+(((-1.0)*r00*sj16*x9949)))),-1);
if(!x9952.valid){
continue;
}
CheckValue<IkReal> x9953 = IKatan2WithCheck(IkReal((((sj16*x9950))+(((-1.0)*cj16*x9951)))),IkReal(((((-1.0)*cj15*sj16*x9951))+(((-1.0)*cj10*r22*sj15))+(((-1.0)*cj15*cj16*x9950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9953.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9952.value)))+(x9953.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9954=IKcos(j14);
IkReal x9955=(cj16*x9954);
IkReal x9956=((1.0)*sj16*x9954);
IkReal x9957=(r22*sj15);
IkReal x9958=IKsin(j14);
IkReal x9959=((1.0)*x9958);
IkReal x9960=(cj15*r21);
IkReal x9961=((1.0)*cj16*x9958);
IkReal x9962=(cj15*r20);
IkReal x9963=((1.0)*sj16*x9958);
IkReal x9964=(sj16*x9958);
IkReal x9965=((1.0)*x9954);
IkReal x9966=((1.0)*cj16*x9954);
IkReal x9967=(r12*sj15);
IkReal x9968=(cj15*r11);
IkReal x9969=(cj15*r10);
IkReal x9970=((-1.0)*(((1.0)*sj10)));
IkReal x9971=(r02*sj15);
IkReal x9972=(cj15*r01);
IkReal x9973=(cj15*r00);
evalcond[0]=((((-1.0)*x9957*x9959))+(((-1.0)*r21*x9956))+((r20*x9955))+(((-1.0)*x9962*x9963))+(((-1.0)*x9960*x9961)));
evalcond[1]=((((-1.0)*x9960*x9966))+((r21*x9964))+(((-1.0)*x9956*x9962))+(((-1.0)*r20*x9961))+(((-1.0)*x9957*x9965)));
evalcond[2]=(((r10*x9955))+cj10+(((-1.0)*x9959*x9967))+(((-1.0)*r11*x9956))+(((-1.0)*x9961*x9968))+(((-1.0)*x9963*x9969)));
evalcond[3]=((((-1.0)*x9961*x9972))+((r00*x9955))+(((-1.0)*r01*x9956))+(((-1.0)*x9959*x9971))+x9970+(((-1.0)*x9963*x9973)));
evalcond[4]=((((-1.0)*r00*x9961))+(((-1.0)*x9965*x9971))+((r01*x9964))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x9966*x9972))+(((-1.0)*x9956*x9973)));
evalcond[5]=((((-1.0)*x9956*x9969))+(((-1.0)*r10*x9961))+(((-1.0)*x9965*x9967))+((r11*x9964))+x9970+(((-1.0)*x9966*x9968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9974=(cj16*sj10);
IkReal x9975=(sj10*sj16);
CheckValue<IkReal> x9976 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9975))+((r20*x9974)))),IkReal((((cj15*r21*x9974))+((r22*sj10*sj15))+((cj15*r20*x9975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9976.valid){
continue;
}
CheckValue<IkReal> x9977=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x9977.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9976.value)+(((1.5707963267949)*(x9977.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9978=IKcos(j14);
IkReal x9979=(cj16*x9978);
IkReal x9980=((1.0)*sj16*x9978);
IkReal x9981=(r22*sj15);
IkReal x9982=IKsin(j14);
IkReal x9983=((1.0)*x9982);
IkReal x9984=(cj15*r21);
IkReal x9985=((1.0)*cj16*x9982);
IkReal x9986=(cj15*r20);
IkReal x9987=((1.0)*sj16*x9982);
IkReal x9988=(sj16*x9982);
IkReal x9989=((1.0)*x9978);
IkReal x9990=((1.0)*cj16*x9978);
IkReal x9991=(r12*sj15);
IkReal x9992=(cj15*r11);
IkReal x9993=(cj15*r10);
IkReal x9994=((-1.0)*(((1.0)*sj10)));
IkReal x9995=(r02*sj15);
IkReal x9996=(cj15*r01);
IkReal x9997=(cj15*r00);
evalcond[0]=(((r20*x9979))+(((-1.0)*r21*x9980))+(((-1.0)*x9981*x9983))+(((-1.0)*x9986*x9987))+(((-1.0)*x9984*x9985)));
evalcond[1]=((((-1.0)*x9984*x9990))+(((-1.0)*x9981*x9989))+(((-1.0)*x9980*x9986))+((r21*x9988))+(((-1.0)*r20*x9985)));
evalcond[2]=((((-1.0)*r11*x9980))+((r10*x9979))+(((-1.0)*x9987*x9993))+cj10+(((-1.0)*x9983*x9991))+(((-1.0)*x9985*x9992)));
evalcond[3]=((((-1.0)*x9987*x9997))+((r00*x9979))+(((-1.0)*x9983*x9995))+(((-1.0)*r01*x9980))+(((-1.0)*x9985*x9996))+x9994);
evalcond[4]=((((-1.0)*x9990*x9996))+((r01*x9988))+(((-1.0)*r00*x9985))+(((-1.0)*x9989*x9995))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x9980*x9997)));
evalcond[5]=((((-1.0)*x9989*x9991))+(((-1.0)*x9980*x9993))+(((-1.0)*r10*x9985))+(((-1.0)*x9990*x9992))+((r11*x9988))+x9994);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x9998=((1.0)*sj16);
IkReal x9999=((((-1.0)*r00*sj15*x9998))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
IkReal x10000=(cj10*cj16);
j14eval[0]=x9999;
j14eval[1]=IKsign(x9999);
j14eval[2]=((IKabs((((cj10*r22*sj15))+((cj15*r21*x10000))+((cj10*cj15*r20*sj16)))))+(IKabs(((((-1.0)*cj10*r21*x9998))+((r20*x10000))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x10001=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x10002=(r21*sj10);
IkReal x10003=(r20*sj10);
j14eval[0]=x10001;
j14eval[1]=((IKabs((((cj15*cj16*x10002))+((r22*sj10*sj15))+((cj15*sj16*x10003)))))+(IKabs((((sj16*x10002))+(((-1.0)*cj16*x10003))))));
j14eval[2]=IKsign(x10001);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x10004=(r02*r22);
IkReal x10005=cj15*cj15;
IkReal x10006=(r00*r20);
IkReal x10007=(x10005*x10006);
IkReal x10008=cj16*cj16;
IkReal x10009=(r00*r21);
IkReal x10010=((1.0)*cj16*sj16);
IkReal x10011=(r01*r20);
IkReal x10012=(cj15*cj16);
IkReal x10013=(r02*sj15);
IkReal x10014=(cj15*sj16);
IkReal x10015=(r01*r21*x10008);
IkReal x10016=(cj16*sj16*x10005);
IkReal x10017=(((x10006*x10008))+((r01*r22*sj15*x10012))+(((-1.0)*x10010*x10011))+(((-1.0)*x10007*x10008))+(((-1.0)*x10004*x10005))+((x10011*x10016))+((cj15*cj16*r21*x10013))+((cj15*r20*sj16*x10013))+((r00*r22*sj15*x10014))+(((-1.0)*x10015))+((r01*r21))+((x10005*x10015))+x10007+x10004+(((-1.0)*x10009*x10010))+((x10009*x10016)));
IkReal x10018=(r21*sj10);
IkReal x10019=(r20*sj10);
j14eval[0]=x10017;
j14eval[1]=IKsign(x10017);
j14eval[2]=((IKabs(((((-1.0)*cj16*x10019))+((sj16*x10018)))))+(IKabs((((x10012*x10018))+((x10014*x10019))+((sj10*((r22*sj15))))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x10020=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x10020;
j14eval[1]=IKsign(x10020);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x10021=((1.0)*sj16);
IkReal x10022=((((-1.0)*r00*sj15*x10021))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
j14eval[0]=x10022;
j14eval[1]=IKsign(x10022);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs(((((-1.0)*r21*x10021))+((cj16*r20))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x10023=r01*r01;
IkReal x10024=((1.0)*x10023);
IkReal x10025=r02*r02;
IkReal x10026=(r01*sj16);
IkReal x10027=((2.0)*cj16*r00*x10026);
IkReal x10028=cj15*cj15;
IkReal x10029=cj16*cj16;
IkReal x10030=((2.0)*r02*sj15);
IkReal x10031=(cj15*cj16*r01);
IkReal x10032=(cj15*r00*sj16);
IkReal x10033=r00*r00;
IkReal x10034=((1.0)*x10033);
IkReal x10035=(x10028*x10029);
IkReal x10036=((((-1.0)*x10028*x10034))+x10027+(((-1.0)*x10024*x10035))+(((-1.0)*x10027*x10028))+(((-1.0)*x10029*x10034))+(((-1.0)*x10030*x10031))+(((-1.0)*x10025))+(((-1.0)*x10030*x10032))+(((-1.0)*x10024))+((x10025*x10028))+((x10033*x10035))+((x10023*x10029)));
j14eval[0]=x10036;
j14eval[1]=IKsign(x10036);
j14eval[2]=((IKabs((((r02*sj15))+x10031+x10032)))+(IKabs(((((-1.0)*x10026))+((cj16*r00))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10037=(r01*sj16);
IkReal x10038=(cj15*cj16*r01);
IkReal x10039=(cj15*r00*sj16);
IkReal x10040=r01*r01;
IkReal x10041=((1.0)*x10040);
IkReal x10042=r02*r02;
IkReal x10043=((2.0)*cj16*r00*x10037);
IkReal x10044=cj15*cj15;
IkReal x10045=cj16*cj16;
IkReal x10046=((2.0)*r02*sj15);
IkReal x10047=r00*r00;
IkReal x10048=((1.0)*x10047);
IkReal x10049=(x10044*x10045);
CheckValue<IkReal> x10050 = IKatan2WithCheck(IkReal(((((-1.0)*x10037))+((cj16*r00)))),IkReal((((r02*sj15))+x10039+x10038)),IKFAST_ATAN2_MAGTHRESH);
if(!x10050.valid){
continue;
}
CheckValue<IkReal> x10051=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10043*x10044))+((x10042*x10044))+(((-1.0)*x10041))+(((-1.0)*x10042))+(((-1.0)*x10039*x10046))+(((-1.0)*x10044*x10048))+(((-1.0)*x10038*x10046))+x10043+((x10047*x10049))+(((-1.0)*x10041*x10049))+(((-1.0)*x10045*x10048))+((x10040*x10045)))),-1);
if(!x10051.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10050.value)+(((1.5707963267949)*(x10051.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10052=IKcos(j14);
IkReal x10053=(cj16*x10052);
IkReal x10054=((1.0)*sj16*x10052);
IkReal x10055=(r22*sj15);
IkReal x10056=IKsin(j14);
IkReal x10057=((1.0)*x10056);
IkReal x10058=(cj15*r21);
IkReal x10059=((1.0)*cj16*x10056);
IkReal x10060=(cj15*r20);
IkReal x10061=((1.0)*sj16*x10056);
IkReal x10062=(r02*sj15);
IkReal x10063=(cj15*r01);
IkReal x10064=(cj15*r00);
IkReal x10065=(sj16*x10056);
IkReal x10066=((1.0)*x10052);
IkReal x10067=((1.0)*cj16*x10052);
IkReal x10068=(r12*sj15);
IkReal x10069=(cj15*r11);
IkReal x10070=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x10054))+(((-1.0)*x10060*x10061))+(((-1.0)*x10055*x10057))+((r20*x10053))+(((-1.0)*x10058*x10059)));
evalcond[1]=((((-1.0)*r01*x10054))+(((-1.0)*x10059*x10063))+((r00*x10053))+(((-1.0)*x10057*x10062))+(((-1.0)*x10061*x10064)));
evalcond[2]=((((-1.0)*x10058*x10067))+(((-1.0)*x10055*x10066))+(((-1.0)*r20*x10059))+(((-1.0)*x10054*x10060))+((r21*x10065)));
evalcond[3]=((((-1.0)*x10066*x10068))+((r11*x10065))+(((-1.0)*x10067*x10069))+(((-1.0)*r10*x10059))+(((-1.0)*x10054*x10070)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x10054))+((r10*x10053))+(((-1.0)*x10061*x10070))+(((-1.0)*x10059*x10069))+(((-1.0)*x10057*x10068)));
evalcond[5]=((-1.0)+((r01*x10065))+(((-1.0)*x10063*x10067))+(((-1.0)*x10062*x10066))+(((-1.0)*r00*x10059))+(((-1.0)*x10054*x10064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10071=((1.0)*sj16);
CheckValue<IkReal> x10072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15*x10071))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x10072.valid){
continue;
}
CheckValue<IkReal> x10073 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10071))+((cj16*r20)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10073.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10072.value)))+(x10073.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10074=IKcos(j14);
IkReal x10075=(cj16*x10074);
IkReal x10076=((1.0)*sj16*x10074);
IkReal x10077=(r22*sj15);
IkReal x10078=IKsin(j14);
IkReal x10079=((1.0)*x10078);
IkReal x10080=(cj15*r21);
IkReal x10081=((1.0)*cj16*x10078);
IkReal x10082=(cj15*r20);
IkReal x10083=((1.0)*sj16*x10078);
IkReal x10084=(r02*sj15);
IkReal x10085=(cj15*r01);
IkReal x10086=(cj15*r00);
IkReal x10087=(sj16*x10078);
IkReal x10088=((1.0)*x10074);
IkReal x10089=((1.0)*cj16*x10074);
IkReal x10090=(r12*sj15);
IkReal x10091=(cj15*r11);
IkReal x10092=(cj15*r10);
evalcond[0]=((((-1.0)*x10082*x10083))+(((-1.0)*x10080*x10081))+((r20*x10075))+(((-1.0)*r21*x10076))+(((-1.0)*x10077*x10079)));
evalcond[1]=((((-1.0)*x10083*x10086))+(((-1.0)*r01*x10076))+(((-1.0)*x10079*x10084))+(((-1.0)*x10081*x10085))+((r00*x10075)));
evalcond[2]=((((-1.0)*x10080*x10089))+((r21*x10087))+(((-1.0)*r20*x10081))+(((-1.0)*x10076*x10082))+(((-1.0)*x10077*x10088)));
evalcond[3]=((((-1.0)*x10089*x10091))+(((-1.0)*r10*x10081))+((r11*x10087))+(((-1.0)*x10076*x10092))+(((-1.0)*x10088*x10090)));
evalcond[4]=((-1.0)+(((-1.0)*x10081*x10091))+(((-1.0)*x10083*x10092))+((r10*x10075))+(((-1.0)*x10079*x10090))+(((-1.0)*r11*x10076)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x10081))+(((-1.0)*x10076*x10086))+(((-1.0)*x10084*x10088))+((r01*x10087))+(((-1.0)*x10085*x10089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10093 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10093.valid){
continue;
}
CheckValue<IkReal> x10094=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x10094.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10093.value)+(((1.5707963267949)*(x10094.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10095=IKcos(j14);
IkReal x10096=(cj16*x10095);
IkReal x10097=((1.0)*sj16*x10095);
IkReal x10098=(r22*sj15);
IkReal x10099=IKsin(j14);
IkReal x10100=((1.0)*x10099);
IkReal x10101=(cj15*r21);
IkReal x10102=((1.0)*cj16*x10099);
IkReal x10103=(cj15*r20);
IkReal x10104=((1.0)*sj16*x10099);
IkReal x10105=(r02*sj15);
IkReal x10106=(cj15*r01);
IkReal x10107=(cj15*r00);
IkReal x10108=(sj16*x10099);
IkReal x10109=((1.0)*x10095);
IkReal x10110=((1.0)*cj16*x10095);
IkReal x10111=(r12*sj15);
IkReal x10112=(cj15*r11);
IkReal x10113=(cj15*r10);
evalcond[0]=((((-1.0)*x10101*x10102))+((r20*x10096))+(((-1.0)*r21*x10097))+(((-1.0)*x10098*x10100))+(((-1.0)*x10103*x10104)));
evalcond[1]=((((-1.0)*x10104*x10107))+((r00*x10096))+(((-1.0)*x10102*x10106))+(((-1.0)*r01*x10097))+(((-1.0)*x10100*x10105)));
evalcond[2]=(((r21*x10108))+(((-1.0)*x10097*x10103))+(((-1.0)*r20*x10102))+(((-1.0)*x10098*x10109))+(((-1.0)*x10101*x10110)));
evalcond[3]=(((r11*x10108))+(((-1.0)*x10109*x10111))+(((-1.0)*x10097*x10113))+(((-1.0)*x10110*x10112))+(((-1.0)*r10*x10102)));
evalcond[4]=((-1.0)+(((-1.0)*x10104*x10113))+(((-1.0)*x10100*x10111))+((r10*x10096))+(((-1.0)*r11*x10097))+(((-1.0)*x10102*x10112)));
evalcond[5]=((-1.0)+(((-1.0)*x10105*x10109))+(((-1.0)*x10097*x10107))+(((-1.0)*r00*x10102))+((r01*x10108))+(((-1.0)*x10106*x10110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x10114=((1.0)*cj15);
IkReal x10115=((((-1.0)*r22*x10114))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x10115;
j14eval[1]=IKsign(x10115);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x10114))+(((-1.0)*r00*sj16*x10114))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x10116=((1.0)*cj16);
IkReal x10117=((1.0)*sj15);
IkReal x10118=((((-1.0)*r01*sj15*x10116))+((cj15*r02))+(((-1.0)*r00*sj16*x10117)));
j14eval[0]=x10118;
j14eval[1]=((IKabs(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*cj15*r21*x10116))+(((-1.0)*r22*x10117)))))+(IKabs((((r21*sj16))+(((-1.0)*r20*x10116))))));
j14eval[2]=IKsign(x10118);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x10119=r01*r01;
IkReal x10120=r02*r02;
IkReal x10121=(r01*sj16);
IkReal x10122=((2.0)*cj16*r00*x10121);
IkReal x10123=cj15*cj15;
IkReal x10124=r00*r00;
IkReal x10125=(x10123*x10124);
IkReal x10126=cj16*cj16;
IkReal x10127=((2.0)*r02*sj15);
IkReal x10128=(cj15*cj16*r01);
IkReal x10129=(cj15*r00*sj16);
IkReal x10130=(x10119*x10126);
IkReal x10131=(((x10124*x10126))+x10125+x10120+(((-1.0)*x10130))+(((-1.0)*x10125*x10126))+((x10127*x10128))+((x10123*x10130))+((x10122*x10123))+(((-1.0)*x10122))+x10119+(((-1.0)*x10120*x10123))+((x10127*x10129)));
j14eval[0]=x10131;
j14eval[1]=((IKabs(((((-1.0)*x10121))+((cj16*r00)))))+(IKabs((x10129+x10128+((r02*sj15))))));
j14eval[2]=IKsign(x10131);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10132=(r01*sj16);
IkReal x10133=(cj15*cj16*r01);
IkReal x10134=(cj15*r00*sj16);
IkReal x10135=r01*r01;
IkReal x10136=r02*r02;
IkReal x10137=((2.0)*cj16*r00*x10132);
IkReal x10138=cj15*cj15;
IkReal x10139=r00*r00;
IkReal x10140=(x10138*x10139);
IkReal x10141=cj16*cj16;
IkReal x10142=((2.0)*r02*sj15);
IkReal x10143=(x10135*x10141);
CheckValue<IkReal> x10144 = IKatan2WithCheck(IkReal(((((-1.0)*x10132))+((cj16*r00)))),IkReal((((r02*sj15))+x10133+x10134)),IKFAST_ATAN2_MAGTHRESH);
if(!x10144.valid){
continue;
}
CheckValue<IkReal> x10145=IKPowWithIntegerCheck(IKsign((((x10139*x10141))+(((-1.0)*x10137))+(((-1.0)*x10143))+((x10138*x10143))+((x10133*x10142))+(((-1.0)*x10136*x10138))+((x10134*x10142))+(((-1.0)*x10140*x10141))+x10135+x10136+((x10137*x10138))+x10140)),-1);
if(!x10145.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10144.value)+(((1.5707963267949)*(x10145.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10146=IKcos(j14);
IkReal x10147=(cj16*x10146);
IkReal x10148=((1.0)*sj16*x10146);
IkReal x10149=(r22*sj15);
IkReal x10150=IKsin(j14);
IkReal x10151=((1.0)*x10150);
IkReal x10152=(cj15*r21);
IkReal x10153=((1.0)*cj16*x10150);
IkReal x10154=(cj15*r20);
IkReal x10155=((1.0)*sj16*x10150);
IkReal x10156=(r02*sj15);
IkReal x10157=(cj15*r01);
IkReal x10158=(cj15*r00);
IkReal x10159=(sj16*x10150);
IkReal x10160=((1.0)*x10146);
IkReal x10161=((1.0)*cj16*x10146);
IkReal x10162=(r12*sj15);
IkReal x10163=(cj15*r11);
IkReal x10164=(cj15*r10);
evalcond[0]=((((-1.0)*x10154*x10155))+(((-1.0)*x10152*x10153))+(((-1.0)*r21*x10148))+((r20*x10147))+(((-1.0)*x10149*x10151)));
evalcond[1]=((((-1.0)*x10151*x10156))+(((-1.0)*x10155*x10158))+(((-1.0)*x10153*x10157))+((r00*x10147))+(((-1.0)*r01*x10148)));
evalcond[2]=((((-1.0)*x10152*x10161))+(((-1.0)*x10148*x10154))+(((-1.0)*r20*x10153))+((r21*x10159))+(((-1.0)*x10149*x10160)));
evalcond[3]=((((-1.0)*r10*x10153))+(((-1.0)*x10160*x10162))+(((-1.0)*x10148*x10164))+(((-1.0)*x10161*x10163))+((r11*x10159)));
evalcond[4]=((1.0)+(((-1.0)*x10153*x10163))+(((-1.0)*x10155*x10164))+(((-1.0)*x10151*x10162))+((r10*x10147))+(((-1.0)*r11*x10148)));
evalcond[5]=((1.0)+(((-1.0)*x10157*x10161))+(((-1.0)*r00*x10153))+(((-1.0)*x10148*x10158))+((r01*x10159))+(((-1.0)*x10156*x10160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10165=((1.0)*cj16);
IkReal x10166=((1.0)*sj15);
CheckValue<IkReal> x10167 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10165))+((r21*sj16)))),IkReal(((((-1.0)*cj15*r21*x10165))+(((-1.0)*r22*x10166))+(((-1.0)*(1.0)*cj15*r20*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10167.valid){
continue;
}
CheckValue<IkReal> x10168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj15*x10165))+((cj15*r02))+(((-1.0)*r00*sj16*x10166)))),-1);
if(!x10168.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10167.value)+(((1.5707963267949)*(x10168.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10169=IKcos(j14);
IkReal x10170=(cj16*x10169);
IkReal x10171=((1.0)*sj16*x10169);
IkReal x10172=(r22*sj15);
IkReal x10173=IKsin(j14);
IkReal x10174=((1.0)*x10173);
IkReal x10175=(cj15*r21);
IkReal x10176=((1.0)*cj16*x10173);
IkReal x10177=(cj15*r20);
IkReal x10178=((1.0)*sj16*x10173);
IkReal x10179=(r02*sj15);
IkReal x10180=(cj15*r01);
IkReal x10181=(cj15*r00);
IkReal x10182=(sj16*x10173);
IkReal x10183=((1.0)*x10169);
IkReal x10184=((1.0)*cj16*x10169);
IkReal x10185=(r12*sj15);
IkReal x10186=(cj15*r11);
IkReal x10187=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x10171))+(((-1.0)*x10172*x10174))+((r20*x10170))+(((-1.0)*x10177*x10178))+(((-1.0)*x10175*x10176)));
evalcond[1]=((((-1.0)*x10176*x10180))+((r00*x10170))+(((-1.0)*r01*x10171))+(((-1.0)*x10178*x10181))+(((-1.0)*x10174*x10179)));
evalcond[2]=((((-1.0)*x10172*x10183))+(((-1.0)*x10171*x10177))+(((-1.0)*r20*x10176))+(((-1.0)*x10175*x10184))+((r21*x10182)));
evalcond[3]=(((r11*x10182))+(((-1.0)*x10171*x10187))+(((-1.0)*x10183*x10185))+(((-1.0)*r10*x10176))+(((-1.0)*x10184*x10186)));
evalcond[4]=((1.0)+((r10*x10170))+(((-1.0)*r11*x10171))+(((-1.0)*x10174*x10185))+(((-1.0)*x10176*x10186))+(((-1.0)*x10178*x10187)));
evalcond[5]=((1.0)+(((-1.0)*x10171*x10181))+(((-1.0)*r00*x10176))+((r01*x10182))+(((-1.0)*x10179*x10183))+(((-1.0)*x10180*x10184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10188=((1.0)*cj15);
CheckValue<IkReal> x10189 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*cj16*r01*x10188))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*r00*sj16*x10188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10189.valid){
continue;
}
CheckValue<IkReal> x10190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x10188))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x10190.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10189.value)+(((1.5707963267949)*(x10190.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10191=IKcos(j14);
IkReal x10192=(cj16*x10191);
IkReal x10193=((1.0)*sj16*x10191);
IkReal x10194=(r22*sj15);
IkReal x10195=IKsin(j14);
IkReal x10196=((1.0)*x10195);
IkReal x10197=(cj15*r21);
IkReal x10198=((1.0)*cj16*x10195);
IkReal x10199=(cj15*r20);
IkReal x10200=((1.0)*sj16*x10195);
IkReal x10201=(r02*sj15);
IkReal x10202=(cj15*r01);
IkReal x10203=(cj15*r00);
IkReal x10204=(sj16*x10195);
IkReal x10205=((1.0)*x10191);
IkReal x10206=((1.0)*cj16*x10191);
IkReal x10207=(r12*sj15);
IkReal x10208=(cj15*r11);
IkReal x10209=(cj15*r10);
evalcond[0]=((((-1.0)*x10197*x10198))+(((-1.0)*x10194*x10196))+((r20*x10192))+(((-1.0)*x10199*x10200))+(((-1.0)*r21*x10193)));
evalcond[1]=((((-1.0)*x10200*x10203))+((r00*x10192))+(((-1.0)*x10196*x10201))+(((-1.0)*r01*x10193))+(((-1.0)*x10198*x10202)));
evalcond[2]=((((-1.0)*x10194*x10205))+((r21*x10204))+(((-1.0)*x10193*x10199))+(((-1.0)*r20*x10198))+(((-1.0)*x10197*x10206)));
evalcond[3]=((((-1.0)*x10193*x10209))+(((-1.0)*r10*x10198))+(((-1.0)*x10206*x10208))+(((-1.0)*x10205*x10207))+((r11*x10204)));
evalcond[4]=((1.0)+(((-1.0)*x10198*x10208))+(((-1.0)*x10196*x10207))+((r10*x10192))+(((-1.0)*r11*x10193))+(((-1.0)*x10200*x10209)));
evalcond[5]=((1.0)+(((-1.0)*r00*x10198))+(((-1.0)*x10193*x10203))+((r01*x10204))+(((-1.0)*x10201*x10205))+(((-1.0)*x10202*x10206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x10210=((1.0)*cj15);
IkReal x10211=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x10210)));
j14eval[0]=x10211;
j14eval[1]=((IKabs(((((-1.0)*cj16*r21*x10210))+(((-1.0)*r20*sj16*x10210))+(((-1.0)*(1.0)*r22*sj15)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x10211);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x10212=((1.0)*cj16);
IkReal x10213=((1.0)*sj15);
IkReal x10214=((((-1.0)*r21*sj15*x10212))+(((-1.0)*r20*sj16*x10213))+((cj15*r22)));
j14eval[0]=x10214;
j14eval[1]=((IKabs(((((-1.0)*r10*x10212))+((r11*sj16)))))+(IKabs(((((-1.0)*cj15*r11*x10212))+(((-1.0)*r12*x10213))+(((-1.0)*(1.0)*cj15*r10*sj16))))));
j14eval[2]=IKsign(x10214);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x10215=r11*r11;
IkReal x10216=((1.0)*x10215);
IkReal x10217=r12*r12;
IkReal x10218=(r11*sj16);
IkReal x10219=((2.0)*cj16*r10*x10218);
IkReal x10220=cj15*cj15;
IkReal x10221=cj16*cj16;
IkReal x10222=((2.0)*r12*sj15);
IkReal x10223=(cj15*cj16*r11);
IkReal x10224=(cj15*r10*sj16);
IkReal x10225=r10*r10;
IkReal x10226=((1.0)*x10225);
IkReal x10227=(x10220*x10221);
IkReal x10228=((((-1.0)*x10219*x10220))+((x10217*x10220))+x10219+(((-1.0)*x10216))+(((-1.0)*x10222*x10223))+(((-1.0)*x10217))+(((-1.0)*x10216*x10227))+(((-1.0)*x10221*x10226))+((x10225*x10227))+(((-1.0)*x10222*x10224))+((x10215*x10221))+(((-1.0)*x10220*x10226)));
j14eval[0]=x10228;
j14eval[1]=((IKabs((((r12*sj15))+x10224+x10223)))+(IKabs(((((-1.0)*x10218))+((cj16*r10))))));
j14eval[2]=IKsign(x10228);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10229=(r11*sj16);
IkReal x10230=(cj15*cj16*r11);
IkReal x10231=(cj15*r10*sj16);
IkReal x10232=r11*r11;
IkReal x10233=((1.0)*x10232);
IkReal x10234=r12*r12;
IkReal x10235=((2.0)*cj16*r10*x10229);
IkReal x10236=cj15*cj15;
IkReal x10237=cj16*cj16;
IkReal x10238=((2.0)*r12*sj15);
IkReal x10239=r10*r10;
IkReal x10240=((1.0)*x10239);
IkReal x10241=(x10236*x10237);
CheckValue<IkReal> x10242=IKPowWithIntegerCheck(IKsign((((x10232*x10237))+(((-1.0)*x10236*x10240))+(((-1.0)*x10234))+((x10239*x10241))+(((-1.0)*x10230*x10238))+((x10234*x10236))+x10235+(((-1.0)*x10233))+(((-1.0)*x10233*x10241))+(((-1.0)*x10237*x10240))+(((-1.0)*x10235*x10236))+(((-1.0)*x10231*x10238)))),-1);
if(!x10242.valid){
continue;
}
CheckValue<IkReal> x10243 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x10229)))),IkReal((((r12*sj15))+x10230+x10231)),IKFAST_ATAN2_MAGTHRESH);
if(!x10243.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10242.value)))+(x10243.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10244=IKcos(j14);
IkReal x10245=(cj16*x10244);
IkReal x10246=((1.0)*sj16*x10244);
IkReal x10247=(r22*sj15);
IkReal x10248=IKsin(j14);
IkReal x10249=((1.0)*x10248);
IkReal x10250=(cj15*r21);
IkReal x10251=((1.0)*cj16*x10248);
IkReal x10252=(cj15*r20);
IkReal x10253=((1.0)*sj16*x10248);
IkReal x10254=(r12*sj15);
IkReal x10255=(cj15*r11);
IkReal x10256=(cj15*r10);
IkReal x10257=(sj16*x10248);
IkReal x10258=((1.0)*x10244);
IkReal x10259=((1.0)*cj16*x10244);
IkReal x10260=(r02*sj15);
IkReal x10261=(cj15*r01);
IkReal x10262=(cj15*r00);
evalcond[0]=((((-1.0)*x10247*x10249))+(((-1.0)*x10252*x10253))+((r20*x10245))+(((-1.0)*r21*x10246))+(((-1.0)*x10250*x10251)));
evalcond[1]=(((r10*x10245))+(((-1.0)*r11*x10246))+(((-1.0)*x10249*x10254))+(((-1.0)*x10253*x10256))+(((-1.0)*x10251*x10255)));
evalcond[2]=((((-1.0)*r20*x10251))+(((-1.0)*x10246*x10252))+(((-1.0)*x10247*x10258))+(((-1.0)*x10250*x10259))+((r21*x10257)));
evalcond[3]=(((r01*x10257))+(((-1.0)*x10259*x10261))+(((-1.0)*r00*x10251))+(((-1.0)*x10246*x10262))+(((-1.0)*x10258*x10260)));
evalcond[4]=((1.0)+(((-1.0)*x10249*x10260))+(((-1.0)*x10253*x10262))+(((-1.0)*r01*x10246))+((r00*x10245))+(((-1.0)*x10251*x10261)));
evalcond[5]=((-1.0)+((r11*x10257))+(((-1.0)*x10254*x10258))+(((-1.0)*r10*x10251))+(((-1.0)*x10255*x10259))+(((-1.0)*x10246*x10256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10263=((1.0)*cj16);
IkReal x10264=((1.0)*sj15);
CheckValue<IkReal> x10265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x10264))+((cj15*r22))+(((-1.0)*r21*sj15*x10263)))),-1);
if(!x10265.valid){
continue;
}
CheckValue<IkReal> x10266 = IKatan2WithCheck(IkReal((((r11*sj16))+(((-1.0)*r10*x10263)))),IkReal(((((-1.0)*r12*x10264))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*cj15*r11*x10263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10266.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10265.value)))+(x10266.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10267=IKcos(j14);
IkReal x10268=(cj16*x10267);
IkReal x10269=((1.0)*sj16*x10267);
IkReal x10270=(r22*sj15);
IkReal x10271=IKsin(j14);
IkReal x10272=((1.0)*x10271);
IkReal x10273=(cj15*r21);
IkReal x10274=((1.0)*cj16*x10271);
IkReal x10275=(cj15*r20);
IkReal x10276=((1.0)*sj16*x10271);
IkReal x10277=(r12*sj15);
IkReal x10278=(cj15*r11);
IkReal x10279=(cj15*r10);
IkReal x10280=(sj16*x10271);
IkReal x10281=((1.0)*x10267);
IkReal x10282=((1.0)*cj16*x10267);
IkReal x10283=(r02*sj15);
IkReal x10284=(cj15*r01);
IkReal x10285=(cj15*r00);
evalcond[0]=((((-1.0)*x10270*x10272))+((r20*x10268))+(((-1.0)*x10275*x10276))+(((-1.0)*x10273*x10274))+(((-1.0)*r21*x10269)));
evalcond[1]=((((-1.0)*x10272*x10277))+(((-1.0)*r11*x10269))+(((-1.0)*x10276*x10279))+(((-1.0)*x10274*x10278))+((r10*x10268)));
evalcond[2]=(((r21*x10280))+(((-1.0)*x10269*x10275))+(((-1.0)*x10270*x10281))+(((-1.0)*x10273*x10282))+(((-1.0)*r20*x10274)));
evalcond[3]=(((r01*x10280))+(((-1.0)*x10282*x10284))+(((-1.0)*r00*x10274))+(((-1.0)*x10281*x10283))+(((-1.0)*x10269*x10285)));
evalcond[4]=((1.0)+(((-1.0)*r01*x10269))+(((-1.0)*x10276*x10285))+(((-1.0)*x10272*x10283))+(((-1.0)*x10274*x10284))+((r00*x10268)));
evalcond[5]=((-1.0)+(((-1.0)*x10269*x10279))+((r11*x10280))+(((-1.0)*x10278*x10282))+(((-1.0)*r10*x10274))+(((-1.0)*x10277*x10281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10286=((1.0)*cj15);
CheckValue<IkReal> x10287 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*r20*sj16*x10286))+(((-1.0)*cj16*r21*x10286))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10287.valid){
continue;
}
CheckValue<IkReal> x10288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x10286))+((cj16*r11*sj15))+((r10*sj15*sj16)))),-1);
if(!x10288.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10287.value)+(((1.5707963267949)*(x10288.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10289=IKcos(j14);
IkReal x10290=(cj16*x10289);
IkReal x10291=((1.0)*sj16*x10289);
IkReal x10292=(r22*sj15);
IkReal x10293=IKsin(j14);
IkReal x10294=((1.0)*x10293);
IkReal x10295=(cj15*r21);
IkReal x10296=((1.0)*cj16*x10293);
IkReal x10297=(cj15*r20);
IkReal x10298=((1.0)*sj16*x10293);
IkReal x10299=(r12*sj15);
IkReal x10300=(cj15*r11);
IkReal x10301=(cj15*r10);
IkReal x10302=(sj16*x10293);
IkReal x10303=((1.0)*x10289);
IkReal x10304=((1.0)*cj16*x10289);
IkReal x10305=(r02*sj15);
IkReal x10306=(cj15*r01);
IkReal x10307=(cj15*r00);
evalcond[0]=((((-1.0)*x10292*x10294))+(((-1.0)*r21*x10291))+(((-1.0)*x10295*x10296))+((r20*x10290))+(((-1.0)*x10297*x10298)));
evalcond[1]=((((-1.0)*x10298*x10301))+((r10*x10290))+(((-1.0)*r11*x10291))+(((-1.0)*x10296*x10300))+(((-1.0)*x10294*x10299)));
evalcond[2]=((((-1.0)*x10291*x10297))+(((-1.0)*x10292*x10303))+((r21*x10302))+(((-1.0)*r20*x10296))+(((-1.0)*x10295*x10304)));
evalcond[3]=((((-1.0)*r00*x10296))+(((-1.0)*x10304*x10306))+((r01*x10302))+(((-1.0)*x10303*x10305))+(((-1.0)*x10291*x10307)));
evalcond[4]=((1.0)+(((-1.0)*r01*x10291))+((r00*x10290))+(((-1.0)*x10298*x10307))+(((-1.0)*x10294*x10305))+(((-1.0)*x10296*x10306)));
evalcond[5]=((-1.0)+(((-1.0)*x10291*x10301))+(((-1.0)*x10299*x10303))+((r11*x10302))+(((-1.0)*x10300*x10304))+(((-1.0)*r10*x10296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x10308=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x10308;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x10308);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x10309=((1.0)*sj16);
IkReal x10310=((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x10309))+((cj15*r22)));
j14eval[0]=x10310;
j14eval[1]=((IKabs(((((-1.0)*r11*x10309))+((cj16*r10)))))+(IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15))))));
j14eval[2]=IKsign(x10310);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x10311=r11*r11;
IkReal x10312=r12*r12;
IkReal x10313=(r11*sj16);
IkReal x10314=((2.0)*cj16*r10*x10313);
IkReal x10315=cj15*cj15;
IkReal x10316=r10*r10;
IkReal x10317=(x10315*x10316);
IkReal x10318=cj16*cj16;
IkReal x10319=((2.0)*r12*sj15);
IkReal x10320=(cj15*cj16*r11);
IkReal x10321=(cj15*r10*sj16);
IkReal x10322=(x10311*x10318);
IkReal x10323=(((x10314*x10315))+(((-1.0)*x10317*x10318))+(((-1.0)*x10314))+(((-1.0)*x10322))+((x10319*x10320))+((x10315*x10322))+((x10319*x10321))+((x10316*x10318))+x10317+x10312+x10311+(((-1.0)*x10312*x10315)));
j14eval[0]=x10323;
j14eval[1]=IKsign(x10323);
j14eval[2]=((IKabs((x10321+x10320+((r12*sj15)))))+(IKabs(((((-1.0)*x10313))+((cj16*r10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10324=(r11*sj16);
IkReal x10325=(cj15*cj16*r11);
IkReal x10326=(cj15*r10*sj16);
IkReal x10327=r11*r11;
IkReal x10328=r12*r12;
IkReal x10329=((2.0)*cj16*r10*x10324);
IkReal x10330=cj15*cj15;
IkReal x10331=r10*r10;
IkReal x10332=(x10330*x10331);
IkReal x10333=cj16*cj16;
IkReal x10334=((2.0)*r12*sj15);
IkReal x10335=(x10327*x10333);
CheckValue<IkReal> x10336 = IKatan2WithCheck(IkReal(((((-1.0)*x10324))+((cj16*r10)))),IkReal((x10326+x10325+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10336.valid){
continue;
}
CheckValue<IkReal> x10337=IKPowWithIntegerCheck(IKsign((x10328+x10327+((x10329*x10330))+x10332+(((-1.0)*x10335))+(((-1.0)*x10328*x10330))+(((-1.0)*x10332*x10333))+((x10325*x10334))+(((-1.0)*x10329))+((x10326*x10334))+((x10330*x10335))+((x10331*x10333)))),-1);
if(!x10337.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10336.value)+(((1.5707963267949)*(x10337.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10338=IKcos(j14);
IkReal x10339=(cj16*x10338);
IkReal x10340=((1.0)*sj16*x10338);
IkReal x10341=(r22*sj15);
IkReal x10342=IKsin(j14);
IkReal x10343=((1.0)*x10342);
IkReal x10344=(cj15*r21);
IkReal x10345=((1.0)*cj16*x10342);
IkReal x10346=(cj15*r20);
IkReal x10347=((1.0)*sj16*x10342);
IkReal x10348=(r12*sj15);
IkReal x10349=(cj15*r11);
IkReal x10350=(cj15*r10);
IkReal x10351=(sj16*x10342);
IkReal x10352=((1.0)*x10338);
IkReal x10353=((1.0)*cj16*x10338);
IkReal x10354=(r02*sj15);
IkReal x10355=(cj15*r01);
IkReal x10356=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x10340))+((r20*x10339))+(((-1.0)*x10346*x10347))+(((-1.0)*x10344*x10345))+(((-1.0)*x10341*x10343)));
evalcond[1]=(((r10*x10339))+(((-1.0)*r11*x10340))+(((-1.0)*x10347*x10350))+(((-1.0)*x10343*x10348))+(((-1.0)*x10345*x10349)));
evalcond[2]=((((-1.0)*x10344*x10353))+(((-1.0)*x10340*x10346))+(((-1.0)*r20*x10345))+((r21*x10351))+(((-1.0)*x10341*x10352)));
evalcond[3]=((((-1.0)*r00*x10345))+(((-1.0)*x10352*x10354))+(((-1.0)*x10353*x10355))+((r01*x10351))+(((-1.0)*x10340*x10356)));
evalcond[4]=((-1.0)+(((-1.0)*x10345*x10355))+(((-1.0)*x10343*x10354))+(((-1.0)*r01*x10340))+(((-1.0)*x10347*x10356))+((r00*x10339)));
evalcond[5]=((1.0)+(((-1.0)*x10340*x10350))+(((-1.0)*x10348*x10352))+(((-1.0)*x10349*x10353))+(((-1.0)*r10*x10345))+((r11*x10351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10357=((1.0)*sj16);
CheckValue<IkReal> x10358=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x10357))+((cj15*r22)))),-1);
if(!x10358.valid){
continue;
}
CheckValue<IkReal> x10359 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x10357)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10359.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10358.value)))+(x10359.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10360=IKcos(j14);
IkReal x10361=(cj16*x10360);
IkReal x10362=((1.0)*sj16*x10360);
IkReal x10363=(r22*sj15);
IkReal x10364=IKsin(j14);
IkReal x10365=((1.0)*x10364);
IkReal x10366=(cj15*r21);
IkReal x10367=((1.0)*cj16*x10364);
IkReal x10368=(cj15*r20);
IkReal x10369=((1.0)*sj16*x10364);
IkReal x10370=(r12*sj15);
IkReal x10371=(cj15*r11);
IkReal x10372=(cj15*r10);
IkReal x10373=(sj16*x10364);
IkReal x10374=((1.0)*x10360);
IkReal x10375=((1.0)*cj16*x10360);
IkReal x10376=(r02*sj15);
IkReal x10377=(cj15*r01);
IkReal x10378=(cj15*r00);
evalcond[0]=(((r20*x10361))+(((-1.0)*x10366*x10367))+(((-1.0)*x10363*x10365))+(((-1.0)*x10368*x10369))+(((-1.0)*r21*x10362)));
evalcond[1]=((((-1.0)*x10369*x10372))+(((-1.0)*x10367*x10371))+(((-1.0)*r11*x10362))+((r10*x10361))+(((-1.0)*x10365*x10370)));
evalcond[2]=((((-1.0)*x10362*x10368))+((r21*x10373))+(((-1.0)*x10366*x10375))+(((-1.0)*r20*x10367))+(((-1.0)*x10363*x10374)));
evalcond[3]=((((-1.0)*x10374*x10376))+(((-1.0)*r00*x10367))+(((-1.0)*x10375*x10377))+(((-1.0)*x10362*x10378))+((r01*x10373)));
evalcond[4]=((-1.0)+(((-1.0)*x10365*x10376))+(((-1.0)*r01*x10362))+(((-1.0)*x10369*x10378))+(((-1.0)*x10367*x10377))+((r00*x10361)));
evalcond[5]=((1.0)+((r11*x10373))+(((-1.0)*x10371*x10375))+(((-1.0)*r10*x10367))+(((-1.0)*x10370*x10374))+(((-1.0)*x10362*x10372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10379 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10379.valid){
continue;
}
CheckValue<IkReal> x10380=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x10380.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10379.value)+(((1.5707963267949)*(x10380.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10381=IKcos(j14);
IkReal x10382=(cj16*x10381);
IkReal x10383=((1.0)*sj16*x10381);
IkReal x10384=(r22*sj15);
IkReal x10385=IKsin(j14);
IkReal x10386=((1.0)*x10385);
IkReal x10387=(cj15*r21);
IkReal x10388=((1.0)*cj16*x10385);
IkReal x10389=(cj15*r20);
IkReal x10390=((1.0)*sj16*x10385);
IkReal x10391=(r12*sj15);
IkReal x10392=(cj15*r11);
IkReal x10393=(cj15*r10);
IkReal x10394=(sj16*x10385);
IkReal x10395=((1.0)*x10381);
IkReal x10396=((1.0)*cj16*x10381);
IkReal x10397=(r02*sj15);
IkReal x10398=(cj15*r01);
IkReal x10399=(cj15*r00);
evalcond[0]=((((-1.0)*x10389*x10390))+(((-1.0)*x10387*x10388))+(((-1.0)*x10384*x10386))+((r20*x10382))+(((-1.0)*r21*x10383)));
evalcond[1]=((((-1.0)*x10388*x10392))+(((-1.0)*x10390*x10393))+(((-1.0)*x10386*x10391))+(((-1.0)*r11*x10383))+((r10*x10382)));
evalcond[2]=((((-1.0)*r20*x10388))+(((-1.0)*x10387*x10396))+(((-1.0)*x10383*x10389))+(((-1.0)*x10384*x10395))+((r21*x10394)));
evalcond[3]=(((r01*x10394))+(((-1.0)*x10395*x10397))+(((-1.0)*x10383*x10399))+(((-1.0)*x10396*x10398))+(((-1.0)*r00*x10388)));
evalcond[4]=((-1.0)+(((-1.0)*x10386*x10397))+(((-1.0)*r01*x10383))+(((-1.0)*x10388*x10398))+((r00*x10382))+(((-1.0)*x10390*x10399)));
evalcond[5]=((1.0)+((r11*x10394))+(((-1.0)*x10383*x10393))+(((-1.0)*x10392*x10396))+(((-1.0)*x10391*x10395))+(((-1.0)*r10*x10388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10400=(cj15*cj16);
IkReal x10401=(r21*sj10);
IkReal x10402=(cj15*sj16);
IkReal x10403=(r20*sj10);
IkReal x10404=(r02*r22);
IkReal x10405=cj15*cj15;
IkReal x10406=(r00*r20);
IkReal x10407=(x10405*x10406);
IkReal x10408=cj16*cj16;
IkReal x10409=(r00*r21);
IkReal x10410=((1.0)*cj16*sj16);
IkReal x10411=(r01*r20);
IkReal x10412=(r02*sj15);
IkReal x10413=(r01*r21*x10408);
IkReal x10414=(cj16*sj16*x10405);
CheckValue<IkReal> x10415=IKPowWithIntegerCheck(IKsign((x10404+x10407+((x10409*x10414))+((x10411*x10414))+((cj15*r20*sj16*x10412))+(((-1.0)*x10413))+((cj15*cj16*r21*x10412))+((r00*r22*sj15*x10402))+(((-1.0)*x10404*x10405))+(((-1.0)*x10410*x10411))+(((-1.0)*x10409*x10410))+(((-1.0)*x10407*x10408))+((r01*r22*sj15*x10400))+((r01*r21))+((x10405*x10413))+((x10406*x10408)))),-1);
if(!x10415.valid){
continue;
}
CheckValue<IkReal> x10416 = IKatan2WithCheck(IkReal((((x10402*x10403))+((sj10*((r22*sj15))))+((x10400*x10401)))),IkReal(((((-1.0)*cj16*x10403))+((sj16*x10401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10416.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10415.value)))+(x10416.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10417=IKcos(j14);
IkReal x10418=(cj16*x10417);
IkReal x10419=((1.0)*sj16*x10417);
IkReal x10420=(r22*sj15);
IkReal x10421=IKsin(j14);
IkReal x10422=((1.0)*x10421);
IkReal x10423=(cj15*r21);
IkReal x10424=((1.0)*cj16*x10421);
IkReal x10425=(cj15*r20);
IkReal x10426=((1.0)*sj16*x10421);
IkReal x10427=(sj16*x10421);
IkReal x10428=((1.0)*x10417);
IkReal x10429=((1.0)*cj16*x10417);
IkReal x10430=(r02*sj15);
IkReal x10431=(cj15*r01);
IkReal x10432=(cj15*r00);
IkReal x10433=((-1.0)*(((1.0)*cj10)));
IkReal x10434=(r12*sj15);
IkReal x10435=(cj15*r11);
IkReal x10436=(cj15*r10);
evalcond[0]=((((-1.0)*x10423*x10424))+(((-1.0)*r21*x10419))+(((-1.0)*x10425*x10426))+(((-1.0)*x10420*x10422))+((r20*x10418)));
evalcond[1]=((((-1.0)*x10423*x10429))+(((-1.0)*r20*x10424))+((r21*x10427))+(((-1.0)*x10420*x10428))+(((-1.0)*x10419*x10425)));
evalcond[2]=((((-1.0)*r01*x10419))+((r00*x10418))+sj10+(((-1.0)*x10424*x10431))+(((-1.0)*x10426*x10432))+(((-1.0)*x10422*x10430)));
evalcond[3]=((((-1.0)*r11*x10419))+(((-1.0)*x10424*x10435))+(((-1.0)*x10422*x10434))+x10433+((r10*x10418))+(((-1.0)*x10426*x10436)));
evalcond[4]=(((r01*x10427))+(((-1.0)*x10419*x10432))+(((-1.0)*r00*x10424))+(((-1.0)*x10428*x10430))+x10433+(((-1.0)*x10429*x10431)));
evalcond[5]=((((-1.0)*x10428*x10434))+((r11*x10427))+(((-1.0)*x10419*x10436))+(((-1.0)*r10*x10424))+(((-1.0)*x10429*x10435))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10437=((1.0)*cj15);
IkReal x10438=(r21*sj10);
IkReal x10439=((1.0)*sj10);
CheckValue<IkReal> x10440 = IKatan2WithCheck(IkReal((((sj16*x10438))+(((-1.0)*cj16*r20*x10439)))),IkReal(((((-1.0)*r22*sj15*x10439))+(((-1.0)*r20*sj10*sj16*x10437))+(((-1.0)*cj15*cj16*x10438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10440.valid){
continue;
}
CheckValue<IkReal> x10441=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x10437)))),-1);
if(!x10441.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10440.value)+(((1.5707963267949)*(x10441.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10442=IKcos(j14);
IkReal x10443=(cj16*x10442);
IkReal x10444=((1.0)*sj16*x10442);
IkReal x10445=(r22*sj15);
IkReal x10446=IKsin(j14);
IkReal x10447=((1.0)*x10446);
IkReal x10448=(cj15*r21);
IkReal x10449=((1.0)*cj16*x10446);
IkReal x10450=(cj15*r20);
IkReal x10451=((1.0)*sj16*x10446);
IkReal x10452=(sj16*x10446);
IkReal x10453=((1.0)*x10442);
IkReal x10454=((1.0)*cj16*x10442);
IkReal x10455=(r02*sj15);
IkReal x10456=(cj15*r01);
IkReal x10457=(cj15*r00);
IkReal x10458=((-1.0)*(((1.0)*cj10)));
IkReal x10459=(r12*sj15);
IkReal x10460=(cj15*r11);
IkReal x10461=(cj15*r10);
evalcond[0]=((((-1.0)*r21*x10444))+(((-1.0)*x10450*x10451))+((r20*x10443))+(((-1.0)*x10445*x10447))+(((-1.0)*x10448*x10449)));
evalcond[1]=((((-1.0)*x10445*x10453))+((r21*x10452))+(((-1.0)*r20*x10449))+(((-1.0)*x10448*x10454))+(((-1.0)*x10444*x10450)));
evalcond[2]=((((-1.0)*x10451*x10457))+(((-1.0)*r01*x10444))+((r00*x10443))+sj10+(((-1.0)*x10449*x10456))+(((-1.0)*x10447*x10455)));
evalcond[3]=(((r10*x10443))+(((-1.0)*r11*x10444))+(((-1.0)*x10447*x10459))+(((-1.0)*x10449*x10460))+(((-1.0)*x10451*x10461))+x10458);
evalcond[4]=((((-1.0)*x10444*x10457))+(((-1.0)*x10454*x10456))+(((-1.0)*x10453*x10455))+(((-1.0)*r00*x10449))+((r01*x10452))+x10458);
evalcond[5]=(((r11*x10452))+(((-1.0)*x10444*x10461))+(((-1.0)*x10454*x10460))+(((-1.0)*(1.0)*sj10))+(((-1.0)*r10*x10449))+(((-1.0)*x10453*x10459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10462=((1.0)*sj16);
IkReal x10463=(cj10*cj16);
CheckValue<IkReal> x10464 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r21*x10462))+((r20*x10463)))),IkReal((((cj15*r21*x10463))+((cj10*r22*sj15))+((cj10*cj15*r20*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10464.valid){
continue;
}
CheckValue<IkReal> x10465=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15))+(((-1.0)*r00*sj15*x10462)))),-1);
if(!x10465.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10464.value)+(((1.5707963267949)*(x10465.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10466=IKcos(j14);
IkReal x10467=(cj16*x10466);
IkReal x10468=((1.0)*sj16*x10466);
IkReal x10469=(r22*sj15);
IkReal x10470=IKsin(j14);
IkReal x10471=((1.0)*x10470);
IkReal x10472=(cj15*r21);
IkReal x10473=((1.0)*cj16*x10470);
IkReal x10474=(cj15*r20);
IkReal x10475=((1.0)*sj16*x10470);
IkReal x10476=(sj16*x10470);
IkReal x10477=((1.0)*x10466);
IkReal x10478=((1.0)*cj16*x10466);
IkReal x10479=(r02*sj15);
IkReal x10480=(cj15*r01);
IkReal x10481=(cj15*r00);
IkReal x10482=((-1.0)*(((1.0)*cj10)));
IkReal x10483=(r12*sj15);
IkReal x10484=(cj15*r11);
IkReal x10485=(cj15*r10);
evalcond[0]=((((-1.0)*x10474*x10475))+(((-1.0)*x10472*x10473))+(((-1.0)*r21*x10468))+(((-1.0)*x10469*x10471))+((r20*x10467)));
evalcond[1]=((((-1.0)*x10472*x10478))+((r21*x10476))+(((-1.0)*r20*x10473))+(((-1.0)*x10468*x10474))+(((-1.0)*x10469*x10477)));
evalcond[2]=((((-1.0)*x10475*x10481))+(((-1.0)*x10471*x10479))+((r00*x10467))+sj10+(((-1.0)*r01*x10468))+(((-1.0)*x10473*x10480)));
evalcond[3]=((((-1.0)*x10475*x10485))+(((-1.0)*r11*x10468))+x10482+(((-1.0)*x10471*x10483))+((r10*x10467))+(((-1.0)*x10473*x10484)));
evalcond[4]=(((r01*x10476))+x10482+(((-1.0)*x10468*x10481))+(((-1.0)*r00*x10473))+(((-1.0)*x10477*x10479))+(((-1.0)*x10478*x10480)));
evalcond[5]=(((r11*x10476))+(((-1.0)*x10478*x10484))+(((-1.0)*x10468*x10485))+(((-1.0)*x10477*x10483))+(((-1.0)*r10*x10473))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x10486=((1.0)*cj16);
IkReal x10487=((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x10486))+((cj15*r02)));
IkReal x10488=(cj10*r21);
IkReal x10489=(cj10*r20);
j14eval[0]=x10487;
j14eval[1]=((IKabs((((sj16*x10488))+(((-1.0)*x10486*x10489)))))+(IKabs((((cj10*r22*sj15))+((cj15*sj16*x10489))+((cj15*cj16*x10488))))));
j14eval[2]=IKsign(x10487);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x10490=(r12*r22);
IkReal x10491=cj15*cj15;
IkReal x10492=(r10*r20);
IkReal x10493=(x10491*x10492);
IkReal x10494=cj16*cj16;
IkReal x10495=(r10*r21);
IkReal x10496=((1.0)*cj16*sj16);
IkReal x10497=(r11*r20);
IkReal x10498=(cj15*cj16);
IkReal x10499=(r12*sj15);
IkReal x10500=(cj15*sj16);
IkReal x10501=(r11*r21*x10494);
IkReal x10502=(cj16*sj16*x10491);
IkReal x10503=(x10493+x10490+(((-1.0)*x10490*x10491))+(((-1.0)*x10496*x10497))+((r10*r22*sj15*x10500))+((x10497*x10502))+(((-1.0)*x10501))+((x10495*x10502))+((r11*r22*sj15*x10498))+(((-1.0)*x10495*x10496))+((cj15*cj16*r21*x10499))+((x10492*x10494))+((x10491*x10501))+((cj15*r20*sj16*x10499))+(((-1.0)*x10493*x10494))+((r11*r21)));
IkReal x10504=(cj10*r21);
IkReal x10505=(cj10*r20);
j14eval[0]=x10503;
j14eval[1]=IKsign(x10503);
j14eval[2]=((IKabs((((x10500*x10505))+((cj10*((r22*sj15))))+((x10498*x10504)))))+(IKabs(((((-1.0)*cj16*x10505))+((sj16*x10504))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x10506=(r01*r21);
IkReal x10507=((1.0)*x10506);
IkReal x10508=(r02*r22);
IkReal x10509=(cj16*sj16);
IkReal x10510=(r00*r21);
IkReal x10511=(r01*r20);
IkReal x10512=cj15*cj15;
IkReal x10513=cj16*cj16;
IkReal x10514=((1.0)*r00*r20);
IkReal x10515=((1.0)*cj15*sj16);
IkReal x10516=(x10512*x10513);
IkReal x10517=((1.0)*cj16*sj16*x10512);
IkReal x10518=((((-1.0)*r00*r22*sj15*x10515))+(((-1.0)*cj15*cj16*r02*r21*sj15))+(((-1.0)*x10513*x10514))+(((-1.0)*x10511*x10517))+(((-1.0)*x10508))+(((-1.0)*x10510*x10517))+((x10508*x10512))+(((-1.0)*x10512*x10514))+((x10506*x10513))+((x10509*x10510))+((x10509*x10511))+((r00*r20*x10516))+(((-1.0)*r02*r20*sj15*x10515))+(((-1.0)*x10507*x10516))+(((-1.0)*cj15*cj16*r01*r22*sj15))+(((-1.0)*x10507)));
IkReal x10519=(cj10*r21);
IkReal x10520=(cj10*r20);
j14eval[0]=x10518;
j14eval[1]=IKsign(x10518);
j14eval[2]=((IKabs(((((-1.0)*cj16*x10520))+((sj16*x10519)))))+(IKabs((((cj10*((r22*sj15))))+((cj15*cj16*x10519))+((cj15*sj16*x10520))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x10521=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x10521;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x10521);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x10522=((1.0)*sj16);
IkReal x10523=((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x10522))+((cj15*r22)));
j14eval[0]=x10523;
j14eval[1]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs((((cj16*r10))+(((-1.0)*r11*x10522))))));
j14eval[2]=IKsign(x10523);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x10524=r11*r11;
IkReal x10525=r12*r12;
IkReal x10526=(r11*sj16);
IkReal x10527=((2.0)*cj16*r10*x10526);
IkReal x10528=cj15*cj15;
IkReal x10529=r10*r10;
IkReal x10530=(x10528*x10529);
IkReal x10531=cj16*cj16;
IkReal x10532=((2.0)*r12*sj15);
IkReal x10533=(cj15*cj16*r11);
IkReal x10534=(cj15*r10*sj16);
IkReal x10535=(x10524*x10531);
IkReal x10536=(((x10529*x10531))+x10524+x10525+x10530+(((-1.0)*x10527))+((x10528*x10535))+(((-1.0)*x10535))+(((-1.0)*x10525*x10528))+(((-1.0)*x10530*x10531))+((x10532*x10533))+((x10527*x10528))+((x10532*x10534)));
j14eval[0]=x10536;
j14eval[1]=IKsign(x10536);
j14eval[2]=((IKabs(((((-1.0)*x10526))+((cj16*r10)))))+(IKabs((x10534+x10533+((r12*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10537=(r11*sj16);
IkReal x10538=(cj15*cj16*r11);
IkReal x10539=(cj15*r10*sj16);
IkReal x10540=r11*r11;
IkReal x10541=r12*r12;
IkReal x10542=((2.0)*cj16*r10*x10537);
IkReal x10543=cj15*cj15;
IkReal x10544=r10*r10;
IkReal x10545=(x10543*x10544);
IkReal x10546=cj16*cj16;
IkReal x10547=((2.0)*r12*sj15);
IkReal x10548=(x10540*x10546);
CheckValue<IkReal> x10549=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10548))+((x10544*x10546))+x10545+x10540+x10541+((x10542*x10543))+((x10539*x10547))+((x10538*x10547))+(((-1.0)*x10542))+(((-1.0)*x10545*x10546))+(((-1.0)*x10541*x10543))+((x10543*x10548)))),-1);
if(!x10549.valid){
continue;
}
CheckValue<IkReal> x10550 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x10537)))),IkReal((x10538+x10539+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10550.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10549.value)))+(x10550.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10551=IKcos(j14);
IkReal x10552=(cj16*x10551);
IkReal x10553=((1.0)*sj16*x10551);
IkReal x10554=(r22*sj15);
IkReal x10555=IKsin(j14);
IkReal x10556=((1.0)*x10555);
IkReal x10557=(cj15*r21);
IkReal x10558=((1.0)*cj16*x10555);
IkReal x10559=(cj15*r20);
IkReal x10560=((1.0)*sj16*x10555);
IkReal x10561=(r12*sj15);
IkReal x10562=(cj15*r11);
IkReal x10563=(cj15*r10);
IkReal x10564=(sj16*x10555);
IkReal x10565=((1.0)*x10551);
IkReal x10566=((1.0)*cj16*x10551);
IkReal x10567=(r02*sj15);
IkReal x10568=(cj15*r01);
IkReal x10569=(cj15*r00);
evalcond[0]=((((-1.0)*x10559*x10560))+((r20*x10552))+(((-1.0)*x10557*x10558))+(((-1.0)*x10554*x10556))+(((-1.0)*r21*x10553)));
evalcond[1]=(((r10*x10552))+(((-1.0)*r11*x10553))+(((-1.0)*x10556*x10561))+(((-1.0)*x10560*x10563))+(((-1.0)*x10558*x10562)));
evalcond[2]=((((-1.0)*x10557*x10566))+(((-1.0)*x10553*x10559))+(((-1.0)*r20*x10558))+((r21*x10564))+(((-1.0)*x10554*x10565)));
evalcond[3]=((((-1.0)*x10565*x10567))+((r01*x10564))+(((-1.0)*r00*x10558))+(((-1.0)*x10553*x10569))+(((-1.0)*x10566*x10568)));
evalcond[4]=((-1.0)+(((-1.0)*x10558*x10568))+(((-1.0)*r01*x10553))+(((-1.0)*x10556*x10567))+((r00*x10552))+(((-1.0)*x10560*x10569)));
evalcond[5]=((1.0)+((r11*x10564))+(((-1.0)*x10561*x10565))+(((-1.0)*r10*x10558))+(((-1.0)*x10562*x10566))+(((-1.0)*x10553*x10563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10570=((1.0)*sj16);
CheckValue<IkReal> x10571 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x10570))+((cj16*r10)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10571.valid){
continue;
}
CheckValue<IkReal> x10572=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x10570))+((cj15*r22)))),-1);
if(!x10572.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10571.value)+(((1.5707963267949)*(x10572.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10573=IKcos(j14);
IkReal x10574=(cj16*x10573);
IkReal x10575=((1.0)*sj16*x10573);
IkReal x10576=(r22*sj15);
IkReal x10577=IKsin(j14);
IkReal x10578=((1.0)*x10577);
IkReal x10579=(cj15*r21);
IkReal x10580=((1.0)*cj16*x10577);
IkReal x10581=(cj15*r20);
IkReal x10582=((1.0)*sj16*x10577);
IkReal x10583=(r12*sj15);
IkReal x10584=(cj15*r11);
IkReal x10585=(cj15*r10);
IkReal x10586=(sj16*x10577);
IkReal x10587=((1.0)*x10573);
IkReal x10588=((1.0)*cj16*x10573);
IkReal x10589=(r02*sj15);
IkReal x10590=(cj15*r01);
IkReal x10591=(cj15*r00);
evalcond[0]=((((-1.0)*x10576*x10578))+(((-1.0)*x10579*x10580))+((r20*x10574))+(((-1.0)*r21*x10575))+(((-1.0)*x10581*x10582)));
evalcond[1]=(((r10*x10574))+(((-1.0)*x10580*x10584))+(((-1.0)*r11*x10575))+(((-1.0)*x10582*x10585))+(((-1.0)*x10578*x10583)));
evalcond[2]=((((-1.0)*x10579*x10588))+(((-1.0)*x10575*x10581))+((r21*x10586))+(((-1.0)*x10576*x10587))+(((-1.0)*r20*x10580)));
evalcond[3]=((((-1.0)*x10587*x10589))+(((-1.0)*x10575*x10591))+((r01*x10586))+(((-1.0)*x10588*x10590))+(((-1.0)*r00*x10580)));
evalcond[4]=((-1.0)+(((-1.0)*x10580*x10590))+(((-1.0)*r01*x10575))+(((-1.0)*x10582*x10591))+(((-1.0)*x10578*x10589))+((r00*x10574)));
evalcond[5]=((1.0)+((r11*x10586))+(((-1.0)*x10584*x10588))+(((-1.0)*x10583*x10587))+(((-1.0)*x10575*x10585))+(((-1.0)*r10*x10580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10592 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10592.valid){
continue;
}
CheckValue<IkReal> x10593=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x10593.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10592.value)+(((1.5707963267949)*(x10593.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10594=IKcos(j14);
IkReal x10595=(cj16*x10594);
IkReal x10596=((1.0)*sj16*x10594);
IkReal x10597=(r22*sj15);
IkReal x10598=IKsin(j14);
IkReal x10599=((1.0)*x10598);
IkReal x10600=(cj15*r21);
IkReal x10601=((1.0)*cj16*x10598);
IkReal x10602=(cj15*r20);
IkReal x10603=((1.0)*sj16*x10598);
IkReal x10604=(r12*sj15);
IkReal x10605=(cj15*r11);
IkReal x10606=(cj15*r10);
IkReal x10607=(sj16*x10598);
IkReal x10608=((1.0)*x10594);
IkReal x10609=((1.0)*cj16*x10594);
IkReal x10610=(r02*sj15);
IkReal x10611=(cj15*r01);
IkReal x10612=(cj15*r00);
evalcond[0]=((((-1.0)*x10597*x10599))+(((-1.0)*r21*x10596))+(((-1.0)*x10602*x10603))+(((-1.0)*x10600*x10601))+((r20*x10595)));
evalcond[1]=((((-1.0)*x10599*x10604))+((r10*x10595))+(((-1.0)*x10603*x10606))+(((-1.0)*x10601*x10605))+(((-1.0)*r11*x10596)));
evalcond[2]=((((-1.0)*x10600*x10609))+(((-1.0)*x10596*x10602))+(((-1.0)*x10597*x10608))+((r21*x10607))+(((-1.0)*r20*x10601)));
evalcond[3]=((((-1.0)*x10609*x10611))+(((-1.0)*x10596*x10612))+((r01*x10607))+(((-1.0)*r00*x10601))+(((-1.0)*x10608*x10610)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x10596))+(((-1.0)*x10599*x10610))+(((-1.0)*x10601*x10611))+((r00*x10595))+(((-1.0)*x10603*x10612)));
evalcond[5]=((1.0)+(((-1.0)*x10604*x10608))+(((-1.0)*r10*x10601))+(((-1.0)*x10596*x10606))+(((-1.0)*x10605*x10609))+((r11*x10607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x10613=((1.0)*cj15);
IkReal x10614=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x10613)));
j14eval[0]=x10614;
j14eval[1]=((IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))))+(IKabs(((((-1.0)*r20*sj16*x10613))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*cj16*r21*x10613))))));
j14eval[2]=IKsign(x10614);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x10615=((1.0)*cj16);
IkReal x10616=((1.0)*sj15);
IkReal x10617=((((-1.0)*r20*sj16*x10616))+(((-1.0)*r21*sj15*x10615))+((cj15*r22)));
j14eval[0]=x10617;
j14eval[1]=((IKabs(((((-1.0)*r12*x10616))+(((-1.0)*cj15*r11*x10615))+(((-1.0)*(1.0)*cj15*r10*sj16)))))+(IKabs(((((-1.0)*r10*x10615))+((r11*sj16))))));
j14eval[2]=IKsign(x10617);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x10618=r11*r11;
IkReal x10619=((1.0)*x10618);
IkReal x10620=r12*r12;
IkReal x10621=(r11*sj16);
IkReal x10622=((2.0)*cj16*r10*x10621);
IkReal x10623=cj15*cj15;
IkReal x10624=cj16*cj16;
IkReal x10625=((2.0)*r12*sj15);
IkReal x10626=(cj15*cj16*r11);
IkReal x10627=(cj15*r10*sj16);
IkReal x10628=r10*r10;
IkReal x10629=((1.0)*x10628);
IkReal x10630=(x10623*x10624);
IkReal x10631=(((x10628*x10630))+(((-1.0)*x10625*x10626))+(((-1.0)*x10624*x10629))+(((-1.0)*x10625*x10627))+((x10618*x10624))+(((-1.0)*x10622*x10623))+x10622+(((-1.0)*x10623*x10629))+(((-1.0)*x10619*x10630))+(((-1.0)*x10620))+(((-1.0)*x10619))+((x10620*x10623)));
j14eval[0]=x10631;
j14eval[1]=((IKabs((((cj16*r10))+(((-1.0)*x10621)))))+(IKabs((((r12*sj15))+x10626+x10627))));
j14eval[2]=IKsign(x10631);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10632=(r11*sj16);
IkReal x10633=(cj15*cj16*r11);
IkReal x10634=(cj15*r10*sj16);
IkReal x10635=r11*r11;
IkReal x10636=((1.0)*x10635);
IkReal x10637=r12*r12;
IkReal x10638=((2.0)*cj16*r10*x10632);
IkReal x10639=cj15*cj15;
IkReal x10640=cj16*cj16;
IkReal x10641=((2.0)*r12*sj15);
IkReal x10642=r10*r10;
IkReal x10643=((1.0)*x10642);
IkReal x10644=(x10639*x10640);
CheckValue<IkReal> x10645=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10637))+(((-1.0)*x10634*x10641))+((x10635*x10640))+(((-1.0)*x10638*x10639))+(((-1.0)*x10636))+((x10637*x10639))+x10638+(((-1.0)*x10640*x10643))+(((-1.0)*x10633*x10641))+(((-1.0)*x10639*x10643))+((x10642*x10644))+(((-1.0)*x10636*x10644)))),-1);
if(!x10645.valid){
continue;
}
CheckValue<IkReal> x10646 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x10632)))),IkReal((((r12*sj15))+x10634+x10633)),IKFAST_ATAN2_MAGTHRESH);
if(!x10646.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10645.value)))+(x10646.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10647=IKcos(j14);
IkReal x10648=(cj16*x10647);
IkReal x10649=((1.0)*sj16*x10647);
IkReal x10650=(r22*sj15);
IkReal x10651=IKsin(j14);
IkReal x10652=((1.0)*x10651);
IkReal x10653=(cj15*r21);
IkReal x10654=((1.0)*cj16*x10651);
IkReal x10655=(cj15*r20);
IkReal x10656=((1.0)*sj16*x10651);
IkReal x10657=(r12*sj15);
IkReal x10658=(cj15*r11);
IkReal x10659=(cj15*r10);
IkReal x10660=(sj16*x10651);
IkReal x10661=((1.0)*x10647);
IkReal x10662=((1.0)*cj16*x10647);
IkReal x10663=(r02*sj15);
IkReal x10664=(cj15*r01);
IkReal x10665=(cj15*r00);
evalcond[0]=(((r20*x10648))+(((-1.0)*x10653*x10654))+(((-1.0)*x10655*x10656))+(((-1.0)*r21*x10649))+(((-1.0)*x10650*x10652)));
evalcond[1]=((((-1.0)*x10652*x10657))+((r10*x10648))+(((-1.0)*x10654*x10658))+(((-1.0)*x10656*x10659))+(((-1.0)*r11*x10649)));
evalcond[2]=((((-1.0)*x10649*x10655))+((r21*x10660))+(((-1.0)*r20*x10654))+(((-1.0)*x10653*x10662))+(((-1.0)*x10650*x10661)));
evalcond[3]=((((-1.0)*x10662*x10664))+(((-1.0)*x10661*x10663))+(((-1.0)*x10649*x10665))+((r01*x10660))+(((-1.0)*r00*x10654)));
evalcond[4]=((1.0)+(((-1.0)*x10652*x10663))+((r00*x10648))+(((-1.0)*x10656*x10665))+(((-1.0)*r01*x10649))+(((-1.0)*x10654*x10664)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x10654))+((r11*x10660))+(((-1.0)*x10657*x10661))+(((-1.0)*x10649*x10659))+(((-1.0)*x10658*x10662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10666=((1.0)*cj16);
IkReal x10667=((1.0)*sj15);
CheckValue<IkReal> x10668 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10666))+((r11*sj16)))),IkReal(((((-1.0)*cj15*r11*x10666))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*r12*x10667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10668.valid){
continue;
}
CheckValue<IkReal> x10669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x10667))+(((-1.0)*r21*sj15*x10666))+((cj15*r22)))),-1);
if(!x10669.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10668.value)+(((1.5707963267949)*(x10669.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10670=IKcos(j14);
IkReal x10671=(cj16*x10670);
IkReal x10672=((1.0)*sj16*x10670);
IkReal x10673=(r22*sj15);
IkReal x10674=IKsin(j14);
IkReal x10675=((1.0)*x10674);
IkReal x10676=(cj15*r21);
IkReal x10677=((1.0)*cj16*x10674);
IkReal x10678=(cj15*r20);
IkReal x10679=((1.0)*sj16*x10674);
IkReal x10680=(r12*sj15);
IkReal x10681=(cj15*r11);
IkReal x10682=(cj15*r10);
IkReal x10683=(sj16*x10674);
IkReal x10684=((1.0)*x10670);
IkReal x10685=((1.0)*cj16*x10670);
IkReal x10686=(r02*sj15);
IkReal x10687=(cj15*r01);
IkReal x10688=(cj15*r00);
evalcond[0]=((((-1.0)*x10678*x10679))+(((-1.0)*r21*x10672))+((r20*x10671))+(((-1.0)*x10673*x10675))+(((-1.0)*x10676*x10677)));
evalcond[1]=((((-1.0)*x10679*x10682))+(((-1.0)*x10675*x10680))+(((-1.0)*r11*x10672))+(((-1.0)*x10677*x10681))+((r10*x10671)));
evalcond[2]=((((-1.0)*x10676*x10685))+(((-1.0)*x10672*x10678))+(((-1.0)*x10673*x10684))+(((-1.0)*r20*x10677))+((r21*x10683)));
evalcond[3]=((((-1.0)*x10684*x10686))+(((-1.0)*x10672*x10688))+(((-1.0)*x10685*x10687))+(((-1.0)*r00*x10677))+((r01*x10683)));
evalcond[4]=((1.0)+(((-1.0)*x10679*x10688))+(((-1.0)*r01*x10672))+((r00*x10671))+(((-1.0)*x10677*x10687))+(((-1.0)*x10675*x10686)));
evalcond[5]=((-1.0)+(((-1.0)*x10680*x10684))+(((-1.0)*x10681*x10685))+(((-1.0)*r10*x10677))+(((-1.0)*x10672*x10682))+((r11*x10683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10689=((1.0)*cj15);
CheckValue<IkReal> x10690=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x10689)))),-1);
if(!x10690.valid){
continue;
}
CheckValue<IkReal> x10691 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*cj16*r21*x10689))+(((-1.0)*r20*sj16*x10689))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10691.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10690.value)))+(x10691.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10692=IKcos(j14);
IkReal x10693=(cj16*x10692);
IkReal x10694=((1.0)*sj16*x10692);
IkReal x10695=(r22*sj15);
IkReal x10696=IKsin(j14);
IkReal x10697=((1.0)*x10696);
IkReal x10698=(cj15*r21);
IkReal x10699=((1.0)*cj16*x10696);
IkReal x10700=(cj15*r20);
IkReal x10701=((1.0)*sj16*x10696);
IkReal x10702=(r12*sj15);
IkReal x10703=(cj15*r11);
IkReal x10704=(cj15*r10);
IkReal x10705=(sj16*x10696);
IkReal x10706=((1.0)*x10692);
IkReal x10707=((1.0)*cj16*x10692);
IkReal x10708=(r02*sj15);
IkReal x10709=(cj15*r01);
IkReal x10710=(cj15*r00);
evalcond[0]=((((-1.0)*x10700*x10701))+((r20*x10693))+(((-1.0)*x10695*x10697))+(((-1.0)*r21*x10694))+(((-1.0)*x10698*x10699)));
evalcond[1]=((((-1.0)*x10701*x10704))+((r10*x10693))+(((-1.0)*x10697*x10702))+(((-1.0)*x10699*x10703))+(((-1.0)*r11*x10694)));
evalcond[2]=((((-1.0)*r20*x10699))+(((-1.0)*x10698*x10707))+(((-1.0)*x10694*x10700))+(((-1.0)*x10695*x10706))+((r21*x10705)));
evalcond[3]=((((-1.0)*r00*x10699))+(((-1.0)*x10706*x10708))+(((-1.0)*x10694*x10710))+(((-1.0)*x10707*x10709))+((r01*x10705)));
evalcond[4]=((1.0)+(((-1.0)*x10697*x10708))+(((-1.0)*x10699*x10709))+((r00*x10693))+(((-1.0)*x10701*x10710))+(((-1.0)*r01*x10694)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x10699))+(((-1.0)*x10703*x10707))+((r11*x10705))+(((-1.0)*x10694*x10704))+(((-1.0)*x10702*x10706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10711=(r21*sj16);
IkReal x10712=(cj16*r20);
IkReal x10713=(cj16*r21);
IkReal x10714=((1.0)*cj10*cj15);
IkReal x10715=(r20*sj16);
IkReal x10716=(r01*r21);
IkReal x10717=((1.0)*x10716);
IkReal x10718=(cj16*r00*x10711);
IkReal x10719=(r01*sj16*x10712);
IkReal x10720=cj15*cj15;
IkReal x10721=cj16*cj16;
IkReal x10722=((1.0)*r00*r20);
IkReal x10723=((1.0)*cj15*r22*sj15);
IkReal x10724=((1.0)*cj15*r02*sj15);
IkReal x10725=(x10720*x10721);
IkReal x10726=((1.0)*x10720);
CheckValue<IkReal> x10727 = IKatan2WithCheck(IkReal((((cj10*x10711))+(((-1.0)*cj10*x10712)))),IkReal(((((-1.0)*cj10*r22*sj15))+(((-1.0)*x10714*x10715))+(((-1.0)*x10713*x10714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10727.valid){
continue;
}
CheckValue<IkReal> x10728=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x10723))+((r00*r20*x10725))+(((-1.0)*x10721*x10722))+(((-1.0)*x10715*x10724))+(((-1.0)*x10717))+((x10716*x10721))+(((-1.0)*x10720*x10722))+(((-1.0)*r00*sj16*x10723))+((r02*r22*x10720))+(((-1.0)*x10718*x10726))+(((-1.0)*x10717*x10725))+x10719+x10718+(((-1.0)*r02*r22))+(((-1.0)*x10719*x10726))+(((-1.0)*x10713*x10724)))),-1);
if(!x10728.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10727.value)+(((1.5707963267949)*(x10728.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10729=IKcos(j14);
IkReal x10730=(cj16*x10729);
IkReal x10731=((1.0)*sj16*x10729);
IkReal x10732=(r22*sj15);
IkReal x10733=IKsin(j14);
IkReal x10734=((1.0)*x10733);
IkReal x10735=(cj15*r21);
IkReal x10736=((1.0)*cj16*x10733);
IkReal x10737=(cj15*r20);
IkReal x10738=((1.0)*sj16*x10733);
IkReal x10739=(sj16*x10733);
IkReal x10740=((1.0)*x10729);
IkReal x10741=((1.0)*cj16*x10729);
IkReal x10742=(r12*sj15);
IkReal x10743=(cj15*r11);
IkReal x10744=(cj15*r10);
IkReal x10745=(r02*sj15);
IkReal x10746=(cj15*r01);
IkReal x10747=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x10731))+((r20*x10730))+(((-1.0)*x10737*x10738))+(((-1.0)*x10732*x10734))+(((-1.0)*x10735*x10736)));
evalcond[1]=((((-1.0)*x10731*x10737))+((r21*x10739))+(((-1.0)*x10735*x10741))+(((-1.0)*x10732*x10740))+(((-1.0)*r20*x10736)));
evalcond[2]=((((-1.0)*x10736*x10743))+((r10*x10730))+(((-1.0)*r11*x10731))+cj10+(((-1.0)*x10734*x10742))+(((-1.0)*x10738*x10744)));
evalcond[3]=((((-1.0)*r00*x10736))+((r01*x10739))+(((-1.0)*x10731*x10747))+cj10+(((-1.0)*x10741*x10746))+(((-1.0)*x10740*x10745)));
evalcond[4]=((((-1.0)*x10740*x10742))+(((-1.0)*x10731*x10744))+sj10+(((-1.0)*x10741*x10743))+((r11*x10739))+(((-1.0)*r10*x10736)));
evalcond[5]=((((-1.0)*x10734*x10745))+((r00*x10730))+(((-1.0)*x10738*x10747))+(((-1.0)*x10736*x10746))+(((-1.0)*(1.0)*sj10))+(((-1.0)*r01*x10731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10748=(cj10*r21);
IkReal x10749=(cj15*cj16);
IkReal x10750=(cj10*r20);
IkReal x10751=(cj15*sj16);
IkReal x10752=(r12*r22);
IkReal x10753=cj15*cj15;
IkReal x10754=(r10*r20);
IkReal x10755=(x10753*x10754);
IkReal x10756=cj16*cj16;
IkReal x10757=(r10*r21);
IkReal x10758=((1.0)*cj16*sj16);
IkReal x10759=(r11*r20);
IkReal x10760=(r12*sj15);
IkReal x10761=(r11*r21*x10756);
IkReal x10762=(cj16*sj16*x10753);
CheckValue<IkReal> x10763=IKPowWithIntegerCheck(IKsign((((x10759*x10762))+((x10757*x10762))+((x10753*x10761))+(((-1.0)*x10757*x10758))+(((-1.0)*x10758*x10759))+((r11*r22*sj15*x10749))+((r10*r22*sj15*x10751))+((x10754*x10756))+(((-1.0)*x10755*x10756))+x10752+x10755+(((-1.0)*x10761))+(((-1.0)*x10752*x10753))+((cj15*r20*sj16*x10760))+((r11*r21))+((cj15*cj16*r21*x10760)))),-1);
if(!x10763.valid){
continue;
}
CheckValue<IkReal> x10764 = IKatan2WithCheck(IkReal((((cj10*((r22*sj15))))+((x10750*x10751))+((x10748*x10749)))),IkReal((((sj16*x10748))+(((-1.0)*cj16*x10750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10764.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10763.value)))+(x10764.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10765=IKcos(j14);
IkReal x10766=(cj16*x10765);
IkReal x10767=((1.0)*sj16*x10765);
IkReal x10768=(r22*sj15);
IkReal x10769=IKsin(j14);
IkReal x10770=((1.0)*x10769);
IkReal x10771=(cj15*r21);
IkReal x10772=((1.0)*cj16*x10769);
IkReal x10773=(cj15*r20);
IkReal x10774=((1.0)*sj16*x10769);
IkReal x10775=(sj16*x10769);
IkReal x10776=((1.0)*x10765);
IkReal x10777=((1.0)*cj16*x10765);
IkReal x10778=(r12*sj15);
IkReal x10779=(cj15*r11);
IkReal x10780=(cj15*r10);
IkReal x10781=(r02*sj15);
IkReal x10782=(cj15*r01);
IkReal x10783=(cj15*r00);
evalcond[0]=((((-1.0)*x10773*x10774))+((r20*x10766))+(((-1.0)*x10771*x10772))+(((-1.0)*x10768*x10770))+(((-1.0)*r21*x10767)));
evalcond[1]=((((-1.0)*x10771*x10777))+(((-1.0)*x10768*x10776))+((r21*x10775))+(((-1.0)*x10767*x10773))+(((-1.0)*r20*x10772)));
evalcond[2]=((((-1.0)*x10772*x10779))+((r10*x10766))+(((-1.0)*r11*x10767))+cj10+(((-1.0)*x10774*x10780))+(((-1.0)*x10770*x10778)));
evalcond[3]=((((-1.0)*r00*x10772))+(((-1.0)*x10776*x10781))+(((-1.0)*x10767*x10783))+(((-1.0)*x10777*x10782))+cj10+((r01*x10775)));
evalcond[4]=((((-1.0)*x10767*x10780))+(((-1.0)*r10*x10772))+sj10+(((-1.0)*x10777*x10779))+(((-1.0)*x10776*x10778))+((r11*x10775)));
evalcond[5]=(((r00*x10766))+(((-1.0)*x10774*x10783))+(((-1.0)*x10772*x10782))+(((-1.0)*(1.0)*sj10))+(((-1.0)*r01*x10767))+(((-1.0)*x10770*x10781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10784=((1.0)*sj15);
IkReal x10785=(cj10*r21);
IkReal x10786=((1.0)*cj10*r20);
CheckValue<IkReal> x10787 = IKatan2WithCheck(IkReal((((sj16*x10785))+(((-1.0)*cj16*x10786)))),IkReal(((((-1.0)*cj15*cj16*x10785))+(((-1.0)*cj10*r22*sj15))+(((-1.0)*cj15*sj16*x10786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10787.valid){
continue;
}
CheckValue<IkReal> x10788=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x10784))+((cj15*r02))+(((-1.0)*r00*sj16*x10784)))),-1);
if(!x10788.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10787.value)+(((1.5707963267949)*(x10788.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10789=IKcos(j14);
IkReal x10790=(cj16*x10789);
IkReal x10791=((1.0)*sj16*x10789);
IkReal x10792=(r22*sj15);
IkReal x10793=IKsin(j14);
IkReal x10794=((1.0)*x10793);
IkReal x10795=(cj15*r21);
IkReal x10796=((1.0)*cj16*x10793);
IkReal x10797=(cj15*r20);
IkReal x10798=((1.0)*sj16*x10793);
IkReal x10799=(sj16*x10793);
IkReal x10800=((1.0)*x10789);
IkReal x10801=((1.0)*cj16*x10789);
IkReal x10802=(r12*sj15);
IkReal x10803=(cj15*r11);
IkReal x10804=(cj15*r10);
IkReal x10805=(r02*sj15);
IkReal x10806=(cj15*r01);
IkReal x10807=(cj15*r00);
evalcond[0]=((((-1.0)*x10797*x10798))+(((-1.0)*r21*x10791))+(((-1.0)*x10795*x10796))+(((-1.0)*x10792*x10794))+((r20*x10790)));
evalcond[1]=((((-1.0)*r20*x10796))+(((-1.0)*x10795*x10801))+(((-1.0)*x10792*x10800))+((r21*x10799))+(((-1.0)*x10791*x10797)));
evalcond[2]=((((-1.0)*r11*x10791))+cj10+((r10*x10790))+(((-1.0)*x10798*x10804))+(((-1.0)*x10794*x10802))+(((-1.0)*x10796*x10803)));
evalcond[3]=((((-1.0)*x10800*x10805))+((r01*x10799))+cj10+(((-1.0)*r00*x10796))+(((-1.0)*x10791*x10807))+(((-1.0)*x10801*x10806)));
evalcond[4]=((((-1.0)*x10801*x10803))+(((-1.0)*x10791*x10804))+((r11*x10799))+sj10+(((-1.0)*r10*x10796))+(((-1.0)*x10800*x10802)));
evalcond[5]=((((-1.0)*x10796*x10806))+(((-1.0)*x10798*x10807))+(((-1.0)*r01*x10791))+(((-1.0)*(1.0)*sj10))+(((-1.0)*x10794*x10805))+((r00*x10790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x10808=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x10809=(r21*sj10);
IkReal x10810=(r20*sj10);
j14eval[0]=x10808;
j14eval[1]=((IKabs(((((-1.0)*cj16*x10810))+((sj16*x10809)))))+(IKabs((((cj15*sj16*x10810))+((r22*sj10*sj15))+((cj15*cj16*x10809))))));
j14eval[2]=IKsign(x10808);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x10811=(r02*r22);
IkReal x10812=cj15*cj15;
IkReal x10813=(r00*r20);
IkReal x10814=(x10812*x10813);
IkReal x10815=cj16*cj16;
IkReal x10816=(r00*r21);
IkReal x10817=((1.0)*cj16*sj16);
IkReal x10818=(r01*r20);
IkReal x10819=(cj15*cj16);
IkReal x10820=(r02*sj15);
IkReal x10821=(cj15*sj16);
IkReal x10822=(r01*r21*x10815);
IkReal x10823=(cj16*sj16*x10812);
IkReal x10824=(((r00*r22*sj15*x10821))+(((-1.0)*x10817*x10818))+x10814+x10811+(((-1.0)*x10816*x10817))+((x10816*x10823))+((r01*r22*sj15*x10819))+(((-1.0)*x10822))+((cj15*cj16*r21*x10820))+((cj15*r20*sj16*x10820))+(((-1.0)*x10811*x10812))+(((-1.0)*x10814*x10815))+((r01*r21))+((x10818*x10823))+((x10813*x10815))+((x10812*x10822)));
IkReal x10825=(r21*sj10);
IkReal x10826=(r20*sj10);
j14eval[0]=x10824;
j14eval[1]=IKsign(x10824);
j14eval[2]=((IKabs((((sj16*x10825))+(((-1.0)*cj16*x10826)))))+(IKabs((((x10821*x10826))+((x10819*x10825))+((sj10*((r22*sj15))))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x10827=(r01*r21);
IkReal x10828=((1.0)*x10827);
IkReal x10829=(r02*r22);
IkReal x10830=(cj16*sj16);
IkReal x10831=(r00*r21);
IkReal x10832=(r01*r20);
IkReal x10833=cj15*cj15;
IkReal x10834=cj16*cj16;
IkReal x10835=((1.0)*r00*r20);
IkReal x10836=((1.0)*cj15*sj16);
IkReal x10837=(x10833*x10834);
IkReal x10838=((1.0)*cj16*sj16*x10833);
IkReal x10839=(((x10830*x10831))+(((-1.0)*x10829))+(((-1.0)*cj15*cj16*r02*r21*sj15))+((x10829*x10833))+(((-1.0)*x10833*x10835))+(((-1.0)*x10828*x10837))+(((-1.0)*r02*r20*sj15*x10836))+((x10830*x10832))+(((-1.0)*r00*r22*sj15*x10836))+(((-1.0)*x10832*x10838))+((r00*r20*x10837))+(((-1.0)*x10828))+(((-1.0)*x10831*x10838))+(((-1.0)*cj15*cj16*r01*r22*sj15))+(((-1.0)*x10834*x10835))+((x10827*x10834)));
IkReal x10840=(cj10*r21);
IkReal x10841=(cj10*r20);
j14eval[0]=x10839;
j14eval[1]=IKsign(x10839);
j14eval[2]=((IKabs(((((-1.0)*cj16*x10841))+((sj16*x10840)))))+(IKabs((((cj10*((r22*sj15))))+((cj15*sj16*x10841))+((cj15*cj16*x10840))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x10842=((1.0)*cj15);
IkReal x10843=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x10842)));
j14eval[0]=x10843;
j14eval[1]=((IKabs(((((-1.0)*cj16*r21*x10842))+(((-1.0)*r20*sj16*x10842))+(((-1.0)*(1.0)*r22*sj15)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x10843);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x10844=((1.0)*cj16);
IkReal x10845=((1.0)*sj15);
IkReal x10846=((((-1.0)*r20*sj16*x10845))+((cj15*r22))+(((-1.0)*r21*sj15*x10844)));
j14eval[0]=x10846;
j14eval[1]=((IKabs(((((-1.0)*r12*x10845))+(((-1.0)*cj15*r11*x10844))+(((-1.0)*(1.0)*cj15*r10*sj16)))))+(IKabs((((r11*sj16))+(((-1.0)*r10*x10844))))));
j14eval[2]=IKsign(x10846);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x10847=r11*r11;
IkReal x10848=r12*r12;
IkReal x10849=(r11*sj16);
IkReal x10850=((2.0)*cj16*r10*x10849);
IkReal x10851=cj15*cj15;
IkReal x10852=r10*r10;
IkReal x10853=(x10851*x10852);
IkReal x10854=cj16*cj16;
IkReal x10855=((2.0)*r12*sj15);
IkReal x10856=(cj15*cj16*r11);
IkReal x10857=(cj15*r10*sj16);
IkReal x10858=(x10847*x10854);
IkReal x10859=((((-1.0)*x10850))+(((-1.0)*x10858))+((x10855*x10857))+(((-1.0)*x10853*x10854))+((x10855*x10856))+((x10850*x10851))+(((-1.0)*x10848*x10851))+x10848+x10847+((x10851*x10858))+((x10852*x10854))+x10853);
j14eval[0]=x10859;
j14eval[1]=IKsign(x10859);
j14eval[2]=((IKabs((((cj16*r10))+(((-1.0)*x10849)))))+(IKabs((((r12*sj15))+x10857+x10856))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10860=(r11*sj16);
IkReal x10861=(cj15*cj16*r11);
IkReal x10862=(cj15*r10*sj16);
IkReal x10863=r11*r11;
IkReal x10864=r12*r12;
IkReal x10865=((2.0)*cj16*r10*x10860);
IkReal x10866=cj15*cj15;
IkReal x10867=r10*r10;
IkReal x10868=(x10866*x10867);
IkReal x10869=cj16*cj16;
IkReal x10870=((2.0)*r12*sj15);
IkReal x10871=(x10863*x10869);
CheckValue<IkReal> x10872 = IKatan2WithCheck(IkReal(((((-1.0)*x10860))+((cj16*r10)))),IkReal((x10862+x10861+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10872.valid){
continue;
}
CheckValue<IkReal> x10873=IKPowWithIntegerCheck(IKsign((((x10866*x10871))+x10864+x10863+x10868+((x10867*x10869))+(((-1.0)*x10864*x10866))+(((-1.0)*x10871))+(((-1.0)*x10868*x10869))+((x10861*x10870))+((x10862*x10870))+((x10865*x10866))+(((-1.0)*x10865)))),-1);
if(!x10873.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10872.value)+(((1.5707963267949)*(x10873.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10874=IKcos(j14);
IkReal x10875=(cj16*x10874);
IkReal x10876=((1.0)*sj16*x10874);
IkReal x10877=(r22*sj15);
IkReal x10878=IKsin(j14);
IkReal x10879=((1.0)*x10878);
IkReal x10880=(cj15*r21);
IkReal x10881=((1.0)*cj16*x10878);
IkReal x10882=(cj15*r20);
IkReal x10883=((1.0)*sj16*x10878);
IkReal x10884=(r12*sj15);
IkReal x10885=(cj15*r11);
IkReal x10886=(cj15*r10);
IkReal x10887=(sj16*x10878);
IkReal x10888=((1.0)*x10874);
IkReal x10889=((1.0)*cj16*x10874);
IkReal x10890=(r02*sj15);
IkReal x10891=(cj15*r01);
IkReal x10892=(cj15*r00);
evalcond[0]=((((-1.0)*x10882*x10883))+(((-1.0)*x10880*x10881))+((r20*x10875))+(((-1.0)*x10877*x10879))+(((-1.0)*r21*x10876)));
evalcond[1]=(((r10*x10875))+(((-1.0)*r11*x10876))+(((-1.0)*x10883*x10886))+(((-1.0)*x10879*x10884))+(((-1.0)*x10881*x10885)));
evalcond[2]=((((-1.0)*x10876*x10882))+(((-1.0)*x10880*x10889))+(((-1.0)*r20*x10881))+(((-1.0)*x10877*x10888))+((r21*x10887)));
evalcond[3]=((((-1.0)*x10876*x10892))+((r01*x10887))+(((-1.0)*x10888*x10890))+(((-1.0)*r00*x10881))+(((-1.0)*x10889*x10891)));
evalcond[4]=((1.0)+(((-1.0)*r01*x10876))+((r00*x10875))+(((-1.0)*x10881*x10891))+(((-1.0)*x10883*x10892))+(((-1.0)*x10879*x10890)));
evalcond[5]=((1.0)+(((-1.0)*r10*x10881))+(((-1.0)*x10885*x10889))+((r11*x10887))+(((-1.0)*x10876*x10886))+(((-1.0)*x10884*x10888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10893=((1.0)*cj16);
IkReal x10894=((1.0)*sj15);
CheckValue<IkReal> x10895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x10894))+((cj15*r22))+(((-1.0)*r21*sj15*x10893)))),-1);
if(!x10895.valid){
continue;
}
CheckValue<IkReal> x10896 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10893))+((r11*sj16)))),IkReal(((((-1.0)*r12*x10894))+(((-1.0)*cj15*r11*x10893))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10896.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10895.value)))+(x10896.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10897=IKcos(j14);
IkReal x10898=(cj16*x10897);
IkReal x10899=((1.0)*sj16*x10897);
IkReal x10900=(r22*sj15);
IkReal x10901=IKsin(j14);
IkReal x10902=((1.0)*x10901);
IkReal x10903=(cj15*r21);
IkReal x10904=((1.0)*cj16*x10901);
IkReal x10905=(cj15*r20);
IkReal x10906=((1.0)*sj16*x10901);
IkReal x10907=(r12*sj15);
IkReal x10908=(cj15*r11);
IkReal x10909=(cj15*r10);
IkReal x10910=(sj16*x10901);
IkReal x10911=((1.0)*x10897);
IkReal x10912=((1.0)*cj16*x10897);
IkReal x10913=(r02*sj15);
IkReal x10914=(cj15*r01);
IkReal x10915=(cj15*r00);
evalcond[0]=(((r20*x10898))+(((-1.0)*x10900*x10902))+(((-1.0)*x10903*x10904))+(((-1.0)*r21*x10899))+(((-1.0)*x10905*x10906)));
evalcond[1]=((((-1.0)*x10904*x10908))+((r10*x10898))+(((-1.0)*x10906*x10909))+(((-1.0)*r11*x10899))+(((-1.0)*x10902*x10907)));
evalcond[2]=((((-1.0)*x10900*x10911))+(((-1.0)*x10903*x10912))+(((-1.0)*x10899*x10905))+((r21*x10910))+(((-1.0)*r20*x10904)));
evalcond[3]=((((-1.0)*r00*x10904))+((r01*x10910))+(((-1.0)*x10911*x10913))+(((-1.0)*x10912*x10914))+(((-1.0)*x10899*x10915)));
evalcond[4]=((1.0)+(((-1.0)*x10906*x10915))+((r00*x10898))+(((-1.0)*r01*x10899))+(((-1.0)*x10904*x10914))+(((-1.0)*x10902*x10913)));
evalcond[5]=((1.0)+(((-1.0)*x10899*x10909))+((r11*x10910))+(((-1.0)*x10908*x10912))+(((-1.0)*r10*x10904))+(((-1.0)*x10907*x10911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10916=((1.0)*cj15);
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IkReal(((((-1.0)*cj16*r21*x10916))+(((-1.0)*r20*sj16*x10916))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
CheckValue<IkReal> x10918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x10916))+((cj16*r11*sj15))+((r10*sj15*sj16)))),-1);
if(!x10918.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10917.value)+(((1.5707963267949)*(x10918.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10919=IKcos(j14);
IkReal x10920=(cj16*x10919);
IkReal x10921=((1.0)*sj16*x10919);
IkReal x10922=(r22*sj15);
IkReal x10923=IKsin(j14);
IkReal x10924=((1.0)*x10923);
IkReal x10925=(cj15*r21);
IkReal x10926=((1.0)*cj16*x10923);
IkReal x10927=(cj15*r20);
IkReal x10928=((1.0)*sj16*x10923);
IkReal x10929=(r12*sj15);
IkReal x10930=(cj15*r11);
IkReal x10931=(cj15*r10);
IkReal x10932=(sj16*x10923);
IkReal x10933=((1.0)*x10919);
IkReal x10934=((1.0)*cj16*x10919);
IkReal x10935=(r02*sj15);
IkReal x10936=(cj15*r01);
IkReal x10937=(cj15*r00);
evalcond[0]=((((-1.0)*x10927*x10928))+((r20*x10920))+(((-1.0)*x10922*x10924))+(((-1.0)*x10925*x10926))+(((-1.0)*r21*x10921)));
evalcond[1]=((((-1.0)*x10928*x10931))+(((-1.0)*x10924*x10929))+(((-1.0)*x10926*x10930))+((r10*x10920))+(((-1.0)*r11*x10921)));
evalcond[2]=(((r21*x10932))+(((-1.0)*r20*x10926))+(((-1.0)*x10921*x10927))+(((-1.0)*x10922*x10933))+(((-1.0)*x10925*x10934)));
evalcond[3]=((((-1.0)*r00*x10926))+(((-1.0)*x10933*x10935))+(((-1.0)*x10934*x10936))+((r01*x10932))+(((-1.0)*x10921*x10937)));
evalcond[4]=((1.0)+(((-1.0)*x10928*x10937))+(((-1.0)*x10926*x10936))+(((-1.0)*r01*x10921))+((r00*x10920))+(((-1.0)*x10924*x10935)));
evalcond[5]=((1.0)+(((-1.0)*x10929*x10933))+((r11*x10932))+(((-1.0)*x10921*x10931))+(((-1.0)*x10930*x10934))+(((-1.0)*r10*x10926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x10938=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x10938;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x10938);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x10939=((1.0)*sj16);
IkReal x10940=((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x10939))+((cj15*r22)));
j14eval[0]=x10940;
j14eval[1]=((IKabs(((((-1.0)*r11*x10939))+((cj16*r10)))))+(IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15))))));
j14eval[2]=IKsign(x10940);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x10941=r11*r11;
IkReal x10942=((1.0)*x10941);
IkReal x10943=r12*r12;
IkReal x10944=(r11*sj16);
IkReal x10945=((2.0)*cj16*r10*x10944);
IkReal x10946=cj15*cj15;
IkReal x10947=cj16*cj16;
IkReal x10948=((2.0)*r12*sj15);
IkReal x10949=(cj15*cj16*r11);
IkReal x10950=(cj15*r10*sj16);
IkReal x10951=r10*r10;
IkReal x10952=((1.0)*x10951);
IkReal x10953=(x10946*x10947);
IkReal x10954=(((x10943*x10946))+(((-1.0)*x10946*x10952))+(((-1.0)*x10948*x10949))+(((-1.0)*x10943))+((x10941*x10947))+(((-1.0)*x10948*x10950))+(((-1.0)*x10947*x10952))+((x10951*x10953))+(((-1.0)*x10945*x10946))+x10945+(((-1.0)*x10942))+(((-1.0)*x10942*x10953)));
j14eval[0]=x10954;
j14eval[1]=((IKabs((((cj16*r10))+(((-1.0)*x10944)))))+(IKabs((((r12*sj15))+x10950+x10949))));
j14eval[2]=IKsign(x10954);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10955=(r11*sj16);
IkReal x10956=(cj15*cj16*r11);
IkReal x10957=(cj15*r10*sj16);
IkReal x10958=r11*r11;
IkReal x10959=((1.0)*x10958);
IkReal x10960=r12*r12;
IkReal x10961=((2.0)*cj16*r10*x10955);
IkReal x10962=cj15*cj15;
IkReal x10963=cj16*cj16;
IkReal x10964=((2.0)*r12*sj15);
IkReal x10965=r10*r10;
IkReal x10966=((1.0)*x10965);
IkReal x10967=(x10962*x10963);
CheckValue<IkReal> x10968=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10961*x10962))+(((-1.0)*x10956*x10964))+(((-1.0)*x10959))+(((-1.0)*x10963*x10966))+(((-1.0)*x10959*x10967))+(((-1.0)*x10962*x10966))+((x10960*x10962))+((x10965*x10967))+(((-1.0)*x10957*x10964))+x10961+((x10958*x10963))+(((-1.0)*x10960)))),-1);
if(!x10968.valid){
continue;
}
CheckValue<IkReal> x10969 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*x10955)))),IkReal((((r12*sj15))+x10956+x10957)),IKFAST_ATAN2_MAGTHRESH);
if(!x10969.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10968.value)))+(x10969.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10970=IKcos(j14);
IkReal x10971=(cj16*x10970);
IkReal x10972=((1.0)*sj16*x10970);
IkReal x10973=(r22*sj15);
IkReal x10974=IKsin(j14);
IkReal x10975=((1.0)*x10974);
IkReal x10976=(cj15*r21);
IkReal x10977=((1.0)*cj16*x10974);
IkReal x10978=(cj15*r20);
IkReal x10979=((1.0)*sj16*x10974);
IkReal x10980=(r12*sj15);
IkReal x10981=(cj15*r11);
IkReal x10982=(cj15*r10);
IkReal x10983=(sj16*x10974);
IkReal x10984=((1.0)*x10970);
IkReal x10985=((1.0)*cj16*x10970);
IkReal x10986=(r02*sj15);
IkReal x10987=(cj15*r01);
IkReal x10988=(cj15*r00);
evalcond[0]=((((-1.0)*x10973*x10975))+(((-1.0)*x10978*x10979))+(((-1.0)*x10976*x10977))+(((-1.0)*r21*x10972))+((r20*x10971)));
evalcond[1]=((((-1.0)*x10975*x10980))+(((-1.0)*x10977*x10981))+(((-1.0)*r11*x10972))+((r10*x10971))+(((-1.0)*x10979*x10982)));
evalcond[2]=((((-1.0)*x10972*x10978))+((r21*x10983))+(((-1.0)*x10976*x10985))+(((-1.0)*x10973*x10984))+(((-1.0)*r20*x10977)));
evalcond[3]=((((-1.0)*x10972*x10988))+(((-1.0)*x10984*x10986))+(((-1.0)*x10985*x10987))+(((-1.0)*r00*x10977))+((r01*x10983)));
evalcond[4]=((-1.0)+((r00*x10971))+(((-1.0)*x10975*x10986))+(((-1.0)*x10977*x10987))+(((-1.0)*r01*x10972))+(((-1.0)*x10979*x10988)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x10977))+(((-1.0)*x10981*x10985))+(((-1.0)*x10972*x10982))+(((-1.0)*x10980*x10984))+((r11*x10983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10989=((1.0)*sj16);
CheckValue<IkReal> x10990=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj16*r21*sj15))+(((-1.0)*r20*sj15*x10989))+((cj15*r22)))),-1);
if(!x10990.valid){
continue;
}
CheckValue<IkReal> x10991 = IKatan2WithCheck(IkReal((((cj16*r10))+(((-1.0)*r11*x10989)))),IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10991.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10990.value)))+(x10991.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10992=IKcos(j14);
IkReal x10993=(cj16*x10992);
IkReal x10994=((1.0)*sj16*x10992);
IkReal x10995=(r22*sj15);
IkReal x10996=IKsin(j14);
IkReal x10997=((1.0)*x10996);
IkReal x10998=(cj15*r21);
IkReal x10999=((1.0)*cj16*x10996);
IkReal x11000=(cj15*r20);
IkReal x11001=((1.0)*sj16*x10996);
IkReal x11002=(r12*sj15);
IkReal x11003=(cj15*r11);
IkReal x11004=(cj15*r10);
IkReal x11005=(sj16*x10996);
IkReal x11006=((1.0)*x10992);
IkReal x11007=((1.0)*cj16*x10992);
IkReal x11008=(r02*sj15);
IkReal x11009=(cj15*r01);
IkReal x11010=(cj15*r00);
evalcond[0]=((((-1.0)*x10998*x10999))+((r20*x10993))+(((-1.0)*r21*x10994))+(((-1.0)*x11000*x11001))+(((-1.0)*x10995*x10997)));
evalcond[1]=((((-1.0)*x10997*x11002))+(((-1.0)*r11*x10994))+((r10*x10993))+(((-1.0)*x10999*x11003))+(((-1.0)*x11001*x11004)));
evalcond[2]=((((-1.0)*x10998*x11007))+((r21*x11005))+(((-1.0)*x10995*x11006))+(((-1.0)*r20*x10999))+(((-1.0)*x10994*x11000)));
evalcond[3]=((((-1.0)*x11006*x11008))+((r01*x11005))+(((-1.0)*x10994*x11010))+(((-1.0)*x11007*x11009))+(((-1.0)*r00*x10999)));
evalcond[4]=((-1.0)+(((-1.0)*x11001*x11010))+((r00*x10993))+(((-1.0)*r01*x10994))+(((-1.0)*x10997*x11008))+(((-1.0)*x10999*x11009)));
evalcond[5]=((-1.0)+(((-1.0)*x11002*x11006))+(((-1.0)*x10994*x11004))+((r11*x11005))+(((-1.0)*x11003*x11007))+(((-1.0)*r10*x10999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11011 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11011.valid){
continue;
}
CheckValue<IkReal> x11012=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x11012.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11011.value)+(((1.5707963267949)*(x11012.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11013=IKcos(j14);
IkReal x11014=(cj16*x11013);
IkReal x11015=((1.0)*sj16*x11013);
IkReal x11016=(r22*sj15);
IkReal x11017=IKsin(j14);
IkReal x11018=((1.0)*x11017);
IkReal x11019=(cj15*r21);
IkReal x11020=((1.0)*cj16*x11017);
IkReal x11021=(cj15*r20);
IkReal x11022=((1.0)*sj16*x11017);
IkReal x11023=(r12*sj15);
IkReal x11024=(cj15*r11);
IkReal x11025=(cj15*r10);
IkReal x11026=(sj16*x11017);
IkReal x11027=((1.0)*x11013);
IkReal x11028=((1.0)*cj16*x11013);
IkReal x11029=(r02*sj15);
IkReal x11030=(cj15*r01);
IkReal x11031=(cj15*r00);
evalcond[0]=((((-1.0)*x11019*x11020))+(((-1.0)*x11016*x11018))+((r20*x11014))+(((-1.0)*r21*x11015))+(((-1.0)*x11021*x11022)));
evalcond[1]=((((-1.0)*x11020*x11024))+((r10*x11014))+(((-1.0)*x11022*x11025))+(((-1.0)*r11*x11015))+(((-1.0)*x11018*x11023)));
evalcond[2]=((((-1.0)*r20*x11020))+((r21*x11026))+(((-1.0)*x11019*x11028))+(((-1.0)*x11015*x11021))+(((-1.0)*x11016*x11027)));
evalcond[3]=((((-1.0)*x11028*x11030))+(((-1.0)*r00*x11020))+(((-1.0)*x11015*x11031))+((r01*x11026))+(((-1.0)*x11027*x11029)));
evalcond[4]=((-1.0)+(((-1.0)*x11020*x11030))+(((-1.0)*r01*x11015))+(((-1.0)*x11018*x11029))+(((-1.0)*x11022*x11031))+((r00*x11014)));
evalcond[5]=((-1.0)+(((-1.0)*x11024*x11028))+(((-1.0)*x11015*x11025))+(((-1.0)*x11023*x11027))+((r11*x11026))+(((-1.0)*r10*x11020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x11032=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x11032;
j14eval[1]=IKsign(x11032);
j14eval[2]=((IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x11033=((1.0)*sj16);
IkReal x11034=((((-1.0)*r00*sj15*x11033))+((cj15*r02))+(((-1.0)*(1.0)*cj16*r01*sj15)));
j14eval[0]=x11034;
j14eval[1]=IKsign(x11034);
j14eval[2]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs(((((-1.0)*r21*x11033))+((cj16*r20))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x11035=r01*r01;
IkReal x11036=r02*r02;
IkReal x11037=(r01*sj16);
IkReal x11038=((2.0)*cj16*r00*x11037);
IkReal x11039=cj15*cj15;
IkReal x11040=r00*r00;
IkReal x11041=(x11039*x11040);
IkReal x11042=cj16*cj16;
IkReal x11043=((2.0)*r02*sj15);
IkReal x11044=(cj15*cj16*r01);
IkReal x11045=(cj15*r00*sj16);
IkReal x11046=(x11035*x11042);
IkReal x11047=((((-1.0)*x11041*x11042))+(((-1.0)*x11038))+(((-1.0)*x11036*x11039))+x11041+((x11038*x11039))+((x11043*x11044))+((x11040*x11042))+(((-1.0)*x11046))+((x11043*x11045))+x11035+x11036+((x11039*x11046)));
j14eval[0]=x11047;
j14eval[1]=((IKabs((((r02*sj15))+x11045+x11044)))+(IKabs(((((-1.0)*x11037))+((cj16*r00))))));
j14eval[2]=IKsign(x11047);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11048=(r01*sj16);
IkReal x11049=(cj15*cj16*r01);
IkReal x11050=(cj15*r00*sj16);
IkReal x11051=r01*r01;
IkReal x11052=r02*r02;
IkReal x11053=((2.0)*cj16*r00*x11048);
IkReal x11054=cj15*cj15;
IkReal x11055=r00*r00;
IkReal x11056=(x11054*x11055);
IkReal x11057=cj16*cj16;
IkReal x11058=((2.0)*r02*sj15);
IkReal x11059=(x11051*x11057);
CheckValue<IkReal> x11060=IKPowWithIntegerCheck(IKsign((((x11054*x11059))+(((-1.0)*x11053))+((x11055*x11057))+((x11053*x11054))+x11056+x11051+x11052+(((-1.0)*x11059))+(((-1.0)*x11056*x11057))+(((-1.0)*x11052*x11054))+((x11050*x11058))+((x11049*x11058)))),-1);
if(!x11060.valid){
continue;
}
CheckValue<IkReal> x11061 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*x11048)))),IkReal((((r02*sj15))+x11049+x11050)),IKFAST_ATAN2_MAGTHRESH);
if(!x11061.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11060.value)))+(x11061.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11062=IKcos(j14);
IkReal x11063=(cj16*x11062);
IkReal x11064=((1.0)*sj16*x11062);
IkReal x11065=(r22*sj15);
IkReal x11066=IKsin(j14);
IkReal x11067=((1.0)*x11066);
IkReal x11068=(cj15*r21);
IkReal x11069=((1.0)*cj16*x11066);
IkReal x11070=(cj15*r20);
IkReal x11071=((1.0)*sj16*x11066);
IkReal x11072=(r02*sj15);
IkReal x11073=(cj15*r01);
IkReal x11074=(cj15*r00);
IkReal x11075=(sj16*x11066);
IkReal x11076=((1.0)*x11062);
IkReal x11077=((1.0)*cj16*x11062);
IkReal x11078=(r12*sj15);
IkReal x11079=(cj15*r11);
IkReal x11080=(cj15*r10);
evalcond[0]=((((-1.0)*x11065*x11067))+(((-1.0)*r21*x11064))+((r20*x11063))+(((-1.0)*x11068*x11069))+(((-1.0)*x11070*x11071)));
evalcond[1]=((((-1.0)*r01*x11064))+(((-1.0)*x11069*x11073))+((r00*x11063))+(((-1.0)*x11071*x11074))+(((-1.0)*x11067*x11072)));
evalcond[2]=((((-1.0)*r20*x11069))+((r21*x11075))+(((-1.0)*x11065*x11076))+(((-1.0)*x11064*x11070))+(((-1.0)*x11068*x11077)));
evalcond[3]=((((-1.0)*r10*x11069))+(((-1.0)*x11076*x11078))+((r11*x11075))+(((-1.0)*x11077*x11079))+(((-1.0)*x11064*x11080)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x11064))+(((-1.0)*x11069*x11079))+((r10*x11063))+(((-1.0)*x11067*x11078))+(((-1.0)*x11071*x11080)));
evalcond[5]=((1.0)+(((-1.0)*x11073*x11077))+(((-1.0)*x11064*x11074))+((r01*x11075))+(((-1.0)*r00*x11069))+(((-1.0)*x11072*x11076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11081=((1.0)*sj16);
CheckValue<IkReal> x11082=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*r00*sj15*x11081))+(((-1.0)*(1.0)*cj16*r01*sj15)))),-1);
if(!x11082.valid){
continue;
}
CheckValue<IkReal> x11083 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*r21*x11081)))),IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11083.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11082.value)))+(x11083.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11084=IKcos(j14);
IkReal x11085=(cj16*x11084);
IkReal x11086=((1.0)*sj16*x11084);
IkReal x11087=(r22*sj15);
IkReal x11088=IKsin(j14);
IkReal x11089=((1.0)*x11088);
IkReal x11090=(cj15*r21);
IkReal x11091=((1.0)*cj16*x11088);
IkReal x11092=(cj15*r20);
IkReal x11093=((1.0)*sj16*x11088);
IkReal x11094=(r02*sj15);
IkReal x11095=(cj15*r01);
IkReal x11096=(cj15*r00);
IkReal x11097=(sj16*x11088);
IkReal x11098=((1.0)*x11084);
IkReal x11099=((1.0)*cj16*x11084);
IkReal x11100=(r12*sj15);
IkReal x11101=(cj15*r11);
IkReal x11102=(cj15*r10);
evalcond[0]=((((-1.0)*x11092*x11093))+(((-1.0)*r21*x11086))+((r20*x11085))+(((-1.0)*x11090*x11091))+(((-1.0)*x11087*x11089)));
evalcond[1]=((((-1.0)*r01*x11086))+(((-1.0)*x11093*x11096))+((r00*x11085))+(((-1.0)*x11089*x11094))+(((-1.0)*x11091*x11095)));
evalcond[2]=((((-1.0)*x11087*x11098))+((r21*x11097))+(((-1.0)*x11090*x11099))+(((-1.0)*x11086*x11092))+(((-1.0)*r20*x11091)));
evalcond[3]=((((-1.0)*r10*x11091))+((r11*x11097))+(((-1.0)*x11086*x11102))+(((-1.0)*x11098*x11100))+(((-1.0)*x11099*x11101)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x11086))+(((-1.0)*x11093*x11102))+(((-1.0)*x11091*x11101))+((r10*x11085))+(((-1.0)*x11089*x11100)));
evalcond[5]=((1.0)+(((-1.0)*x11095*x11099))+(((-1.0)*x11094*x11098))+((r01*x11097))+(((-1.0)*x11086*x11096))+(((-1.0)*r00*x11091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11103 = IKatan2WithCheck(IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11103.valid){
continue;
}
CheckValue<IkReal> x11104=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x11104.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11103.value)+(((1.5707963267949)*(x11104.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11105=IKcos(j14);
IkReal x11106=(cj16*x11105);
IkReal x11107=((1.0)*sj16*x11105);
IkReal x11108=(r22*sj15);
IkReal x11109=IKsin(j14);
IkReal x11110=((1.0)*x11109);
IkReal x11111=(cj15*r21);
IkReal x11112=((1.0)*cj16*x11109);
IkReal x11113=(cj15*r20);
IkReal x11114=((1.0)*sj16*x11109);
IkReal x11115=(r02*sj15);
IkReal x11116=(cj15*r01);
IkReal x11117=(cj15*r00);
IkReal x11118=(sj16*x11109);
IkReal x11119=((1.0)*x11105);
IkReal x11120=((1.0)*cj16*x11105);
IkReal x11121=(r12*sj15);
IkReal x11122=(cj15*r11);
IkReal x11123=(cj15*r10);
evalcond[0]=(((r20*x11106))+(((-1.0)*x11113*x11114))+(((-1.0)*x11111*x11112))+(((-1.0)*x11108*x11110))+(((-1.0)*r21*x11107)));
evalcond[1]=((((-1.0)*x11110*x11115))+(((-1.0)*r01*x11107))+((r00*x11106))+(((-1.0)*x11112*x11116))+(((-1.0)*x11114*x11117)));
evalcond[2]=((((-1.0)*x11108*x11119))+(((-1.0)*x11111*x11120))+(((-1.0)*r20*x11112))+(((-1.0)*x11107*x11113))+((r21*x11118)));
evalcond[3]=((((-1.0)*x11119*x11121))+(((-1.0)*x11107*x11123))+(((-1.0)*x11120*x11122))+((r11*x11118))+(((-1.0)*r10*x11112)));
evalcond[4]=((-1.0)+(((-1.0)*x11110*x11121))+((r10*x11106))+(((-1.0)*x11112*x11122))+(((-1.0)*r11*x11107))+(((-1.0)*x11114*x11123)));
evalcond[5]=((1.0)+(((-1.0)*r00*x11112))+(((-1.0)*x11107*x11117))+(((-1.0)*x11116*x11120))+((r01*x11118))+(((-1.0)*x11115*x11119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x11124=((1.0)*cj15);
IkReal x11125=(((r20*sj15*sj16))+(((-1.0)*r22*x11124))+((cj16*r21*sj15)));
j14eval[0]=x11125;
j14eval[1]=IKsign(x11125);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs(((((-1.0)*cj16*r01*x11124))+(((-1.0)*r00*sj16*x11124))+(((-1.0)*(1.0)*r02*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x11126=((1.0)*cj16);
IkReal x11127=((1.0)*sj15);
IkReal x11128=((((-1.0)*r00*sj16*x11127))+((cj15*r02))+(((-1.0)*r01*sj15*x11126)));
j14eval[0]=x11128;
j14eval[1]=((IKabs((((r21*sj16))+(((-1.0)*r20*x11126)))))+(IKabs(((((-1.0)*cj15*r21*x11126))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x11127))))));
j14eval[2]=IKsign(x11128);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x11129=r01*r01;
IkReal x11130=((1.0)*x11129);
IkReal x11131=r02*r02;
IkReal x11132=(r01*sj16);
IkReal x11133=((2.0)*cj16*r00*x11132);
IkReal x11134=cj15*cj15;
IkReal x11135=cj16*cj16;
IkReal x11136=((2.0)*r02*sj15);
IkReal x11137=(cj15*cj16*r01);
IkReal x11138=(cj15*r00*sj16);
IkReal x11139=r00*r00;
IkReal x11140=((1.0)*x11139);
IkReal x11141=(x11134*x11135);
IkReal x11142=((((-1.0)*x11134*x11140))+(((-1.0)*x11136*x11138))+((x11139*x11141))+(((-1.0)*x11130))+(((-1.0)*x11135*x11140))+(((-1.0)*x11136*x11137))+(((-1.0)*x11130*x11141))+((x11129*x11135))+(((-1.0)*x11131))+x11133+((x11131*x11134))+(((-1.0)*x11133*x11134)));
j14eval[0]=x11142;
j14eval[1]=IKsign(x11142);
j14eval[2]=((IKabs((((r02*sj15))+x11138+x11137)))+(IKabs(((((-1.0)*x11132))+((cj16*r00))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11143=(r01*sj16);
IkReal x11144=(cj15*cj16*r01);
IkReal x11145=(cj15*r00*sj16);
IkReal x11146=r01*r01;
IkReal x11147=((1.0)*x11146);
IkReal x11148=r02*r02;
IkReal x11149=((2.0)*cj16*r00*x11143);
IkReal x11150=cj15*cj15;
IkReal x11151=cj16*cj16;
IkReal x11152=((2.0)*r02*sj15);
IkReal x11153=r00*r00;
IkReal x11154=((1.0)*x11153);
IkReal x11155=(x11150*x11151);
CheckValue<IkReal> x11156=IKPowWithIntegerCheck(IKsign((x11149+(((-1.0)*x11150*x11154))+(((-1.0)*x11147*x11155))+((x11146*x11151))+(((-1.0)*x11149*x11150))+(((-1.0)*x11144*x11152))+(((-1.0)*x11151*x11154))+(((-1.0)*x11145*x11152))+(((-1.0)*x11148))+((x11148*x11150))+((x11153*x11155))+(((-1.0)*x11147)))),-1);
if(!x11156.valid){
continue;
}
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal(((((-1.0)*x11143))+((cj16*r00)))),IkReal((x11144+x11145+((r02*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11156.value)))+(x11157.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11158=IKcos(j14);
IkReal x11159=(cj16*x11158);
IkReal x11160=((1.0)*sj16*x11158);
IkReal x11161=(r22*sj15);
IkReal x11162=IKsin(j14);
IkReal x11163=((1.0)*x11162);
IkReal x11164=(cj15*r21);
IkReal x11165=((1.0)*cj16*x11162);
IkReal x11166=(cj15*r20);
IkReal x11167=((1.0)*sj16*x11162);
IkReal x11168=(r02*sj15);
IkReal x11169=(cj15*r01);
IkReal x11170=(cj15*r00);
IkReal x11171=(sj16*x11162);
IkReal x11172=((1.0)*x11158);
IkReal x11173=((1.0)*cj16*x11158);
IkReal x11174=(r12*sj15);
IkReal x11175=(cj15*r11);
IkReal x11176=(cj15*r10);
evalcond[0]=(((r20*x11159))+(((-1.0)*x11161*x11163))+(((-1.0)*x11166*x11167))+(((-1.0)*r21*x11160))+(((-1.0)*x11164*x11165)));
evalcond[1]=(((r00*x11159))+(((-1.0)*x11167*x11170))+(((-1.0)*x11163*x11168))+(((-1.0)*r01*x11160))+(((-1.0)*x11165*x11169)));
evalcond[2]=(((r21*x11171))+(((-1.0)*x11164*x11173))+(((-1.0)*x11161*x11172))+(((-1.0)*x11160*x11166))+(((-1.0)*r20*x11165)));
evalcond[3]=(((r11*x11171))+(((-1.0)*x11173*x11175))+(((-1.0)*r10*x11165))+(((-1.0)*x11172*x11174))+(((-1.0)*x11160*x11176)));
evalcond[4]=((1.0)+((r10*x11159))+(((-1.0)*x11163*x11174))+(((-1.0)*x11167*x11176))+(((-1.0)*x11165*x11175))+(((-1.0)*r11*x11160)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x11165))+(((-1.0)*x11160*x11170))+(((-1.0)*x11169*x11173))+(((-1.0)*x11168*x11172))+((r01*x11171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11177=((1.0)*cj16);
IkReal x11178=((1.0)*sj15);
CheckValue<IkReal> x11179 = IKatan2WithCheck(IkReal((((r21*sj16))+(((-1.0)*r20*x11177)))),IkReal(((((-1.0)*cj15*r21*x11177))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x11178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11179.valid){
continue;
}
CheckValue<IkReal> x11180=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*r00*sj16*x11178))+(((-1.0)*r01*sj15*x11177)))),-1);
if(!x11180.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11179.value)+(((1.5707963267949)*(x11180.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11181=IKcos(j14);
IkReal x11182=(cj16*x11181);
IkReal x11183=((1.0)*sj16*x11181);
IkReal x11184=(r22*sj15);
IkReal x11185=IKsin(j14);
IkReal x11186=((1.0)*x11185);
IkReal x11187=(cj15*r21);
IkReal x11188=((1.0)*cj16*x11185);
IkReal x11189=(cj15*r20);
IkReal x11190=((1.0)*sj16*x11185);
IkReal x11191=(r02*sj15);
IkReal x11192=(cj15*r01);
IkReal x11193=(cj15*r00);
IkReal x11194=(sj16*x11185);
IkReal x11195=((1.0)*x11181);
IkReal x11196=((1.0)*cj16*x11181);
IkReal x11197=(r12*sj15);
IkReal x11198=(cj15*r11);
IkReal x11199=(cj15*r10);
evalcond[0]=((((-1.0)*x11184*x11186))+(((-1.0)*x11187*x11188))+(((-1.0)*x11189*x11190))+(((-1.0)*r21*x11183))+((r20*x11182)));
evalcond[1]=((((-1.0)*x11190*x11193))+(((-1.0)*r01*x11183))+((r00*x11182))+(((-1.0)*x11186*x11191))+(((-1.0)*x11188*x11192)));
evalcond[2]=((((-1.0)*x11184*x11195))+(((-1.0)*x11183*x11189))+(((-1.0)*r20*x11188))+(((-1.0)*x11187*x11196))+((r21*x11194)));
evalcond[3]=((((-1.0)*x11183*x11199))+(((-1.0)*x11195*x11197))+((r11*x11194))+(((-1.0)*r10*x11188))+(((-1.0)*x11196*x11198)));
evalcond[4]=((1.0)+(((-1.0)*r11*x11183))+((r10*x11182))+(((-1.0)*x11186*x11197))+(((-1.0)*x11190*x11199))+(((-1.0)*x11188*x11198)));
evalcond[5]=((-1.0)+((r01*x11194))+(((-1.0)*x11192*x11196))+(((-1.0)*x11183*x11193))+(((-1.0)*r00*x11188))+(((-1.0)*x11191*x11195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11200=((1.0)*cj15);
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IkReal(((((-1.0)*cj16*r01*x11200))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*r00*sj16*x11200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
CheckValue<IkReal> x11202=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+((cj16*r21*sj15))+(((-1.0)*r22*x11200)))),-1);
if(!x11202.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11201.value)+(((1.5707963267949)*(x11202.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11203=IKcos(j14);
IkReal x11204=(cj16*x11203);
IkReal x11205=((1.0)*sj16*x11203);
IkReal x11206=(r22*sj15);
IkReal x11207=IKsin(j14);
IkReal x11208=((1.0)*x11207);
IkReal x11209=(cj15*r21);
IkReal x11210=((1.0)*cj16*x11207);
IkReal x11211=(cj15*r20);
IkReal x11212=((1.0)*sj16*x11207);
IkReal x11213=(r02*sj15);
IkReal x11214=(cj15*r01);
IkReal x11215=(cj15*r00);
IkReal x11216=(sj16*x11207);
IkReal x11217=((1.0)*x11203);
IkReal x11218=((1.0)*cj16*x11203);
IkReal x11219=(r12*sj15);
IkReal x11220=(cj15*r11);
IkReal x11221=(cj15*r10);
evalcond[0]=((((-1.0)*x11206*x11208))+((r20*x11204))+(((-1.0)*x11211*x11212))+(((-1.0)*x11209*x11210))+(((-1.0)*r21*x11205)));
evalcond[1]=((((-1.0)*x11208*x11213))+(((-1.0)*x11212*x11215))+(((-1.0)*r01*x11205))+((r00*x11204))+(((-1.0)*x11210*x11214)));
evalcond[2]=((((-1.0)*x11205*x11211))+(((-1.0)*x11209*x11218))+(((-1.0)*r20*x11210))+((r21*x11216))+(((-1.0)*x11206*x11217)));
evalcond[3]=((((-1.0)*x11217*x11219))+(((-1.0)*x11218*x11220))+((r11*x11216))+(((-1.0)*r10*x11210))+(((-1.0)*x11205*x11221)));
evalcond[4]=((1.0)+(((-1.0)*r11*x11205))+(((-1.0)*x11212*x11221))+(((-1.0)*x11210*x11220))+((r10*x11204))+(((-1.0)*x11208*x11219)));
evalcond[5]=((-1.0)+(((-1.0)*x11214*x11218))+(((-1.0)*x11205*x11215))+((r01*x11216))+(((-1.0)*r00*x11210))+(((-1.0)*x11213*x11217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11222=(r21*sj16);
IkReal x11223=(cj16*r20);
IkReal x11224=(cj16*r21);
IkReal x11225=((1.0)*cj10*cj15);
IkReal x11226=(r20*sj16);
IkReal x11227=(r01*r21);
IkReal x11228=((1.0)*x11227);
IkReal x11229=(cj16*r00*x11222);
IkReal x11230=(r01*sj16*x11223);
IkReal x11231=cj15*cj15;
IkReal x11232=cj16*cj16;
IkReal x11233=((1.0)*r00*r20);
IkReal x11234=((1.0)*cj15*r22*sj15);
IkReal x11235=((1.0)*cj15*r02*sj15);
IkReal x11236=(x11231*x11232);
IkReal x11237=((1.0)*x11231);
CheckValue<IkReal> x11238 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x11223))+((cj10*x11222)))),IkReal(((((-1.0)*cj10*r22*sj15))+(((-1.0)*x11224*x11225))+(((-1.0)*x11225*x11226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11238.valid){
continue;
}
CheckValue<IkReal> x11239=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x11234))+((r00*r20*x11236))+(((-1.0)*x11228))+(((-1.0)*x11226*x11235))+(((-1.0)*x11229*x11237))+(((-1.0)*x11228*x11236))+(((-1.0)*r00*sj16*x11234))+((x11227*x11232))+(((-1.0)*x11230*x11237))+((r02*r22*x11231))+(((-1.0)*x11231*x11233))+x11229+x11230+(((-1.0)*x11232*x11233))+(((-1.0)*r02*r22))+(((-1.0)*x11224*x11235)))),-1);
if(!x11239.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11238.value)+(((1.5707963267949)*(x11239.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11240=IKcos(j14);
IkReal x11241=(cj16*x11240);
IkReal x11242=((1.0)*sj16*x11240);
IkReal x11243=(r22*sj15);
IkReal x11244=IKsin(j14);
IkReal x11245=((1.0)*x11244);
IkReal x11246=(cj15*r21);
IkReal x11247=((1.0)*cj16*x11244);
IkReal x11248=(cj15*r20);
IkReal x11249=((1.0)*sj16*x11244);
IkReal x11250=(sj16*x11244);
IkReal x11251=((1.0)*x11240);
IkReal x11252=((1.0)*cj16*x11240);
IkReal x11253=(r02*sj15);
IkReal x11254=(cj15*r01);
IkReal x11255=(cj15*r00);
IkReal x11256=(r12*sj15);
IkReal x11257=(cj15*r11);
IkReal x11258=(cj15*r10);
evalcond[0]=((((-1.0)*x11246*x11247))+(((-1.0)*x11243*x11245))+(((-1.0)*r21*x11242))+((r20*x11241))+(((-1.0)*x11248*x11249)));
evalcond[1]=((((-1.0)*x11246*x11252))+(((-1.0)*x11242*x11248))+((r21*x11250))+(((-1.0)*x11243*x11251))+(((-1.0)*r20*x11247)));
evalcond[2]=((((-1.0)*r01*x11242))+(((-1.0)*x11249*x11255))+(((-1.0)*x11247*x11254))+sj10+((r00*x11241))+(((-1.0)*x11245*x11253)));
evalcond[3]=((((-1.0)*x11251*x11253))+cj10+(((-1.0)*x11242*x11255))+(((-1.0)*x11252*x11254))+((r01*x11250))+(((-1.0)*r00*x11247)));
evalcond[4]=((((-1.0)*x11242*x11258))+(((-1.0)*x11252*x11257))+sj10+((r11*x11250))+(((-1.0)*r10*x11247))+(((-1.0)*x11251*x11256)));
evalcond[5]=((((-1.0)*r11*x11242))+(((-1.0)*x11245*x11256))+(((-1.0)*x11249*x11258))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x11247*x11257))+((r10*x11241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11259=(cj15*cj16);
IkReal x11260=(r21*sj10);
IkReal x11261=(cj15*sj16);
IkReal x11262=(r20*sj10);
IkReal x11263=(r02*r22);
IkReal x11264=cj15*cj15;
IkReal x11265=(r00*r20);
IkReal x11266=(x11264*x11265);
IkReal x11267=cj16*cj16;
IkReal x11268=(r00*r21);
IkReal x11269=((1.0)*cj16*sj16);
IkReal x11270=(r01*r20);
IkReal x11271=(r02*sj15);
IkReal x11272=(r01*r21*x11267);
IkReal x11273=(cj16*sj16*x11264);
CheckValue<IkReal> x11274=IKPowWithIntegerCheck(IKsign((((x11270*x11273))+x11266+x11263+(((-1.0)*x11272))+((x11265*x11267))+(((-1.0)*x11269*x11270))+((x11264*x11272))+(((-1.0)*x11266*x11267))+((r01*r21))+((r01*r22*sj15*x11259))+(((-1.0)*x11263*x11264))+((cj15*r20*sj16*x11271))+((r00*r22*sj15*x11261))+((cj15*cj16*r21*x11271))+((x11268*x11273))+(((-1.0)*x11268*x11269)))),-1);
if(!x11274.valid){
continue;
}
CheckValue<IkReal> x11275 = IKatan2WithCheck(IkReal((((x11261*x11262))+((x11259*x11260))+((sj10*((r22*sj15)))))),IkReal((((sj16*x11260))+(((-1.0)*cj16*x11262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11275.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11274.value)))+(x11275.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11276=IKcos(j14);
IkReal x11277=(cj16*x11276);
IkReal x11278=((1.0)*sj16*x11276);
IkReal x11279=(r22*sj15);
IkReal x11280=IKsin(j14);
IkReal x11281=((1.0)*x11280);
IkReal x11282=(cj15*r21);
IkReal x11283=((1.0)*cj16*x11280);
IkReal x11284=(cj15*r20);
IkReal x11285=((1.0)*sj16*x11280);
IkReal x11286=(sj16*x11280);
IkReal x11287=((1.0)*x11276);
IkReal x11288=((1.0)*cj16*x11276);
IkReal x11289=(r02*sj15);
IkReal x11290=(cj15*r01);
IkReal x11291=(cj15*r00);
IkReal x11292=(r12*sj15);
IkReal x11293=(cj15*r11);
IkReal x11294=(cj15*r10);
evalcond[0]=((((-1.0)*x11279*x11281))+(((-1.0)*x11284*x11285))+(((-1.0)*x11282*x11283))+((r20*x11277))+(((-1.0)*r21*x11278)));
evalcond[1]=((((-1.0)*x11282*x11288))+(((-1.0)*r20*x11283))+(((-1.0)*x11279*x11287))+(((-1.0)*x11278*x11284))+((r21*x11286)));
evalcond[2]=((((-1.0)*x11281*x11289))+(((-1.0)*r01*x11278))+sj10+((r00*x11277))+(((-1.0)*x11283*x11290))+(((-1.0)*x11285*x11291)));
evalcond[3]=((((-1.0)*x11287*x11289))+(((-1.0)*x11288*x11290))+cj10+(((-1.0)*r00*x11283))+(((-1.0)*x11278*x11291))+((r01*x11286)));
evalcond[4]=((((-1.0)*x11288*x11293))+(((-1.0)*x11278*x11294))+((r11*x11286))+(((-1.0)*r10*x11283))+sj10+(((-1.0)*x11287*x11292)));
evalcond[5]=((((-1.0)*x11281*x11292))+(((-1.0)*r11*x11278))+(((-1.0)*x11283*x11293))+(((-1.0)*x11285*x11294))+(((-1.0)*(1.0)*cj10))+((r10*x11277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11295=((1.0)*cj15);
IkReal x11296=(r21*sj10);
IkReal x11297=((1.0)*sj10);
CheckValue<IkReal> x11298 = IKatan2WithCheck(IkReal((((sj16*x11296))+(((-1.0)*cj16*r20*x11297)))),IkReal(((((-1.0)*r20*sj10*sj16*x11295))+(((-1.0)*cj15*cj16*x11296))+(((-1.0)*r22*sj15*x11297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11298.valid){
continue;
}
CheckValue<IkReal> x11299=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x11295))+((cj16*r11*sj15))+((r10*sj15*sj16)))),-1);
if(!x11299.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11298.value)+(((1.5707963267949)*(x11299.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11300=IKcos(j14);
IkReal x11301=(cj16*x11300);
IkReal x11302=((1.0)*sj16*x11300);
IkReal x11303=(r22*sj15);
IkReal x11304=IKsin(j14);
IkReal x11305=((1.0)*x11304);
IkReal x11306=(cj15*r21);
IkReal x11307=((1.0)*cj16*x11304);
IkReal x11308=(cj15*r20);
IkReal x11309=((1.0)*sj16*x11304);
IkReal x11310=(sj16*x11304);
IkReal x11311=((1.0)*x11300);
IkReal x11312=((1.0)*cj16*x11300);
IkReal x11313=(r02*sj15);
IkReal x11314=(cj15*r01);
IkReal x11315=(cj15*r00);
IkReal x11316=(r12*sj15);
IkReal x11317=(cj15*r11);
IkReal x11318=(cj15*r10);
evalcond[0]=((((-1.0)*x11303*x11305))+(((-1.0)*x11306*x11307))+((r20*x11301))+(((-1.0)*x11308*x11309))+(((-1.0)*r21*x11302)));
evalcond[1]=((((-1.0)*r20*x11307))+((r21*x11310))+(((-1.0)*x11302*x11308))+(((-1.0)*x11306*x11312))+(((-1.0)*x11303*x11311)));
evalcond[2]=((((-1.0)*x11309*x11315))+(((-1.0)*x11307*x11314))+(((-1.0)*r01*x11302))+(((-1.0)*x11305*x11313))+sj10+((r00*x11301)));
evalcond[3]=((((-1.0)*x11311*x11313))+(((-1.0)*x11312*x11314))+cj10+(((-1.0)*x11302*x11315))+(((-1.0)*r00*x11307))+((r01*x11310)));
evalcond[4]=((((-1.0)*x11311*x11316))+(((-1.0)*x11312*x11317))+sj10+(((-1.0)*x11302*x11318))+((r11*x11310))+(((-1.0)*r10*x11307)));
evalcond[5]=((((-1.0)*r11*x11302))+(((-1.0)*x11307*x11317))+((r10*x11301))+(((-1.0)*x11305*x11316))+(((-1.0)*x11309*x11318))+(((-1.0)*(1.0)*cj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11319=(cj16*sj11);
IkReal x11320=(r21*sj16);
IkReal x11321=(cj11*sj12);
IkReal x11322=(r22*sj15);
IkReal x11323=(cj15*cj16*r21);
IkReal x11324=(cj15*r20*sj16);
IkReal x11325=(cj16*r20);
IkReal x11326=r21*r21;
IkReal x11327=r22*r22;
IkReal x11328=((2.0)*r21*sj16*x11325);
IkReal x11329=cj15*cj15;
IkReal x11330=r20*r20;
IkReal x11331=(x11329*x11330);
IkReal x11332=cj16*cj16;
IkReal x11333=((2.0)*r22*sj15);
IkReal x11334=(x11326*x11332);
CheckValue<IkReal> x11335=IKPowWithIntegerCheck(IKsign((((x11323*x11333))+(((-1.0)*x11328))+((x11329*x11334))+((x11324*x11333))+x11327+x11326+x11331+((x11328*x11329))+(((-1.0)*x11334))+(((-1.0)*x11331*x11332))+((x11330*x11332))+(((-1.0)*x11327*x11329)))),-1);
if(!x11335.valid){
continue;
}
CheckValue<IkReal> x11336 = IKatan2WithCheck(IkReal((((r20*x11319))+((x11321*x11322))+(((-1.0)*sj11*x11320))+((x11321*x11324))+((x11321*x11323)))),IkReal(((((-1.0)*cj11*sj12*x11325))+((sj11*x11322))+((x11320*x11321))+((sj11*x11324))+((cj15*r21*x11319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11336.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11335.value)))+(x11336.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11337=IKsin(j14);
IkReal x11338=(sj16*x11337);
IkReal x11339=((1.0)*cj16*x11337);
IkReal x11340=(r22*sj15);
IkReal x11341=IKcos(j14);
IkReal x11342=((1.0)*x11341);
IkReal x11343=(cj15*r21);
IkReal x11344=((1.0)*cj16*x11341);
IkReal x11345=(cj15*r20);
IkReal x11346=((1.0)*sj16*x11341);
IkReal x11347=(cj16*x11341);
IkReal x11348=((1.0)*x11337);
IkReal x11349=((1.0)*sj16*x11337);
IkReal x11350=((1.0)*cj11);
IkReal x11351=(r02*sj15);
IkReal x11352=(cj15*r01);
IkReal x11353=(cj15*r00);
IkReal x11354=(r12*sj15);
IkReal x11355=(cj15*r11);
IkReal x11356=(cj15*r10);
IkReal x11357=(sj11*sj12);
evalcond[0]=((((-1.0)*x11340*x11342))+sj11+(((-1.0)*x11345*x11346))+(((-1.0)*r20*x11339))+((r21*x11338))+(((-1.0)*x11343*x11344)));
evalcond[1]=((((-1.0)*x11345*x11349))+(((-1.0)*r21*x11346))+(((-1.0)*x11340*x11348))+((r20*x11347))+((cj11*sj12))+(((-1.0)*x11339*x11343)));
evalcond[2]=((((-1.0)*r00*x11339))+((r01*x11338))+(((-1.0)*x11346*x11353))+(((-1.0)*x11344*x11352))+(((-1.0)*x11342*x11351))+(((-1.0)*cj10*x11350)));
evalcond[3]=((((-1.0)*r10*x11339))+((r11*x11338))+(((-1.0)*x11342*x11354))+(((-1.0)*x11344*x11355))+(((-1.0)*x11346*x11356))+(((-1.0)*sj10*x11350)));
evalcond[4]=((((-1.0)*x11339*x11355))+(((-1.0)*x11348*x11354))+(((-1.0)*r11*x11346))+((sj10*x11357))+((r10*x11347))+((cj10*cj12))+(((-1.0)*x11349*x11356)));
evalcond[5]=((((-1.0)*x11348*x11351))+(((-1.0)*r01*x11346))+(((-1.0)*x11339*x11352))+(((-1.0)*(1.0)*cj12*sj10))+((cj10*x11357))+((r00*x11347))+(((-1.0)*x11349*x11353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11358=((1.0)*sj15);
IkReal x11359=((1.0)*cj15);
IkReal x11360=((1.0)*sj11*sj16);
IkReal x11361=((1.0)*cj11*sj10*sj16);
CheckValue<IkReal> x11362=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x11358))+((cj15*r02))+(((-1.0)*r00*sj16*x11358)))),-1);
if(!x11362.valid){
continue;
}
CheckValue<IkReal> x11363 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*cj16*r21*sj10*x11359))+(((-1.0)*cj15*r20*x11361))+(((-1.0)*r12*sj11*x11358))+(((-1.0)*cj11*r22*sj10*sj15))+(((-1.0)*cj16*r11*sj11*x11359))+(((-1.0)*cj15*r10*x11360)))),IkReal((((r10*((cj16*sj11))))+(((-1.0)*r21*x11361))+((r20*((cj11*cj16*sj10))))+(((-1.0)*r11*x11360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11363.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11362.value)))+(x11363.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11364=IKsin(j14);
IkReal x11365=(sj16*x11364);
IkReal x11366=((1.0)*cj16*x11364);
IkReal x11367=(r22*sj15);
IkReal x11368=IKcos(j14);
IkReal x11369=((1.0)*x11368);
IkReal x11370=(cj15*r21);
IkReal x11371=((1.0)*cj16*x11368);
IkReal x11372=(cj15*r20);
IkReal x11373=((1.0)*sj16*x11368);
IkReal x11374=(cj16*x11368);
IkReal x11375=((1.0)*x11364);
IkReal x11376=((1.0)*sj16*x11364);
IkReal x11377=((1.0)*cj11);
IkReal x11378=(r02*sj15);
IkReal x11379=(cj15*r01);
IkReal x11380=(cj15*r00);
IkReal x11381=(r12*sj15);
IkReal x11382=(cj15*r11);
IkReal x11383=(cj15*r10);
IkReal x11384=(sj11*sj12);
evalcond[0]=((((-1.0)*x11372*x11373))+sj11+((r21*x11365))+(((-1.0)*x11367*x11369))+(((-1.0)*x11370*x11371))+(((-1.0)*r20*x11366)));
evalcond[1]=(((r20*x11374))+(((-1.0)*x11366*x11370))+(((-1.0)*x11367*x11375))+((cj11*sj12))+(((-1.0)*r21*x11373))+(((-1.0)*x11372*x11376)));
evalcond[2]=((((-1.0)*x11371*x11379))+(((-1.0)*cj10*x11377))+(((-1.0)*x11373*x11380))+(((-1.0)*r00*x11366))+(((-1.0)*x11369*x11378))+((r01*x11365)));
evalcond[3]=((((-1.0)*x11373*x11383))+(((-1.0)*x11369*x11381))+((r11*x11365))+(((-1.0)*r10*x11366))+(((-1.0)*sj10*x11377))+(((-1.0)*x11371*x11382)));
evalcond[4]=(((r10*x11374))+((sj10*x11384))+(((-1.0)*r11*x11373))+(((-1.0)*x11366*x11382))+(((-1.0)*x11376*x11383))+(((-1.0)*x11375*x11381))+((cj10*cj12)));
evalcond[5]=((((-1.0)*x11376*x11380))+((cj10*x11384))+(((-1.0)*r01*x11373))+((r00*x11374))+(((-1.0)*x11375*x11378))+(((-1.0)*x11366*x11379))+(((-1.0)*(1.0)*cj12*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11385=((1.0)*sj11);
IkReal x11386=((1.0)*cj10*cj11);
IkReal x11387=(cj16*sj11);
IkReal x11388=((1.0)*cj15*sj16);
IkReal x11389=(cj10*cj11*cj16);
CheckValue<IkReal> x11390 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj11*r20*x11388))+(((-1.0)*cj15*r01*x11387))+(((-1.0)*r02*sj15*x11385))+(((-1.0)*cj15*r21*x11389))+(((-1.0)*r00*sj11*x11388))+(((-1.0)*r22*sj15*x11386)))),IkReal((((r00*x11387))+(((-1.0)*r01*sj16*x11385))+((r20*x11389))+(((-1.0)*r21*sj16*x11386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11390.valid){
continue;
}
CheckValue<IkReal> x11391=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x11391.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11390.value)+(((1.5707963267949)*(x11391.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11392=IKsin(j14);
IkReal x11393=(sj16*x11392);
IkReal x11394=((1.0)*cj16*x11392);
IkReal x11395=(r22*sj15);
IkReal x11396=IKcos(j14);
IkReal x11397=((1.0)*x11396);
IkReal x11398=(cj15*r21);
IkReal x11399=((1.0)*cj16*x11396);
IkReal x11400=(cj15*r20);
IkReal x11401=((1.0)*sj16*x11396);
IkReal x11402=(cj16*x11396);
IkReal x11403=((1.0)*x11392);
IkReal x11404=((1.0)*sj16*x11392);
IkReal x11405=((1.0)*cj11);
IkReal x11406=(r02*sj15);
IkReal x11407=(cj15*r01);
IkReal x11408=(cj15*r00);
IkReal x11409=(r12*sj15);
IkReal x11410=(cj15*r11);
IkReal x11411=(cj15*r10);
IkReal x11412=(sj11*sj12);
evalcond[0]=((((-1.0)*x11400*x11401))+((r21*x11393))+sj11+(((-1.0)*x11398*x11399))+(((-1.0)*x11395*x11397))+(((-1.0)*r20*x11394)));
evalcond[1]=((((-1.0)*x11400*x11404))+(((-1.0)*x11394*x11398))+((r20*x11402))+(((-1.0)*r21*x11401))+((cj11*sj12))+(((-1.0)*x11395*x11403)));
evalcond[2]=((((-1.0)*r00*x11394))+(((-1.0)*x11397*x11406))+((r01*x11393))+(((-1.0)*x11399*x11407))+(((-1.0)*x11401*x11408))+(((-1.0)*cj10*x11405)));
evalcond[3]=((((-1.0)*r10*x11394))+(((-1.0)*x11397*x11409))+((r11*x11393))+(((-1.0)*sj10*x11405))+(((-1.0)*x11401*x11411))+(((-1.0)*x11399*x11410)));
evalcond[4]=((((-1.0)*x11403*x11409))+((sj10*x11412))+(((-1.0)*r11*x11401))+((r10*x11402))+(((-1.0)*x11394*x11410))+(((-1.0)*x11404*x11411))+((cj10*cj12)));
evalcond[5]=(((r00*x11402))+(((-1.0)*x11403*x11406))+(((-1.0)*r01*x11401))+(((-1.0)*x11394*x11407))+((cj10*x11412))+(((-1.0)*(1.0)*cj12*sj10))+(((-1.0)*x11404*x11408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x11413=((1.0)+(((-1.0)*(1.0)*(cj11*cj11)*(cj12*cj12))));
j10eval[0]=x11413;
j10eval[1]=IKsign(x11413);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x11414=r21*r21;
IkReal x11415=((1.0)*x11414);
IkReal x11416=r22*r22;
IkReal x11417=((2.0)*cj16*r21);
IkReal x11418=(r20*sj16*x11417);
IkReal x11419=cj15*cj15;
IkReal x11420=cj16*cj16;
IkReal x11421=(cj15*r22*sj15);
IkReal x11422=r20*r20;
IkReal x11423=((1.0)*x11422);
IkReal x11424=(x11419*x11420);
IkReal x11425=((((-2.0)*r20*sj16*x11421))+(((-1.0)*x11417*x11421))+(((-1.0)*x11415))+(((-1.0)*x11415*x11424))+(((-1.0)*x11419*x11423))+(((-1.0)*x11418*x11419))+(((-1.0)*x11416))+((x11414*x11420))+x11418+(((-1.0)*x11420*x11423))+((x11416*x11419))+((x11422*x11424)));
j14eval[0]=x11425;
j14eval[1]=IKsign(x11425);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x11426=(cj12*sj11);
IkReal x11427=(cj11*cj12*sj11);
IkReal x11428=((cj11*cj11)*(cj12*cj12));
j10eval[0]=((-1.0)+(((5.28144927536232)*x11427))+x11426+x11428);
j10eval[1]=IKsign(((-69.0)+(((364.42)*x11427))+(((69.0)*x11426))+(((69.0)*x11428))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11429=((0.863573439158322)*cj15);
IkReal x11430=((0.0230723086152)*sj15);
IkReal x11431=((0.0230723086152)*cj15*cj16);
IkReal x11432=((0.0230723086152)*cj15*sj16);
IkReal x11433=((0.863573439158322)*cj16*sj15);
IkReal x11434=((0.863573439158322)*sj15*sj16);
if( IKabs((((r10*x11434))+(((-1.0)*r11*x11431))+(((2.30723086152)*py))+((r11*x11433))+(((-1.0)*r12*x11429))+(((-1.0)*r10*x11432))+(((-1.0)*r12*x11430)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x11429))+(((-1.0)*r02*x11430))+(((-1.0)*r01*x11431))+((r00*x11434))+(((-1.0)*r00*x11432))+(((2.30723086152)*px))+((r01*x11433)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x11434))+(((-1.0)*r11*x11431))+(((2.30723086152)*py))+((r11*x11433))+(((-1.0)*r12*x11429))+(((-1.0)*r10*x11432))+(((-1.0)*r12*x11430))))+IKsqr(((((-1.0)*r02*x11429))+(((-1.0)*r02*x11430))+(((-1.0)*r01*x11431))+((r00*x11434))+(((-1.0)*r00*x11432))+(((2.30723086152)*px))+((r01*x11433))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r10*x11434))+(((-1.0)*r11*x11431))+(((2.30723086152)*py))+((r11*x11433))+(((-1.0)*r12*x11429))+(((-1.0)*r10*x11432))+(((-1.0)*r12*x11430))), ((((-1.0)*r02*x11429))+(((-1.0)*r02*x11430))+(((-1.0)*r01*x11431))+((r00*x11434))+(((-1.0)*r00*x11432))+(((2.30723086152)*px))+((r01*x11433))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x11435=((0.37429)*cj15);
IkReal x11436=((0.01)*sj15);
IkReal x11437=((0.01)*cj15*cj16);
IkReal x11438=((0.01)*cj15*sj16);
IkReal x11439=((0.37429)*cj16*sj15);
IkReal x11440=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x11440))+((r00*x11438))+((r02*x11435))+((r01*x11437))+(((-1.0)*r01*x11439))+((r02*x11436))+(((0.43342)*(IKcos(j10)))));
evalcond[1]=((((-1.0)*r11*x11439))+(((-1.0)*(1.0)*py))+(((0.43342)*(IKsin(j10))))+((r12*x11435))+((r11*x11437))+((r10*x11438))+(((-1.0)*r10*x11440))+((r12*x11436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x11441=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x11442=(cj10*r21);
IkReal x11443=(cj10*r20);
j14eval[0]=x11441;
j14eval[1]=((IKabs((((cj15*cj16*x11442))+((cj10*r22*sj15))+((cj15*sj16*x11443)))))+(IKabs(((((-1.0)*cj16*x11443))+((sj16*x11442))))));
j14eval[2]=IKsign(x11441);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x11444=((1.0)*cj16);
IkReal x11445=((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x11444))+((cj15*r02)));
IkReal x11446=(r21*sj10);
IkReal x11447=(r20*sj10);
j14eval[0]=x11445;
j14eval[1]=((IKabs((((cj15*sj16*x11447))+((r22*sj10*sj15))+((cj15*cj16*x11446)))))+(IKabs((((sj16*x11446))+(((-1.0)*x11444*x11447))))));
j14eval[2]=IKsign(x11445);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x11448=(r01*r21);
IkReal x11449=((1.0)*x11448);
IkReal x11450=(r02*r22);
IkReal x11451=(cj16*sj16);
IkReal x11452=(r00*r21);
IkReal x11453=(r01*r20);
IkReal x11454=cj15*cj15;
IkReal x11455=cj16*cj16;
IkReal x11456=((1.0)*r00*r20);
IkReal x11457=((1.0)*cj15*sj16);
IkReal x11458=(x11454*x11455);
IkReal x11459=((1.0)*cj16*sj16*x11454);
IkReal x11460=((((-1.0)*x11455*x11456))+(((-1.0)*r00*r22*sj15*x11457))+(((-1.0)*cj15*cj16*r02*r21*sj15))+(((-1.0)*x11454*x11456))+(((-1.0)*x11452*x11459))+(((-1.0)*x11453*x11459))+((r00*r20*x11458))+((x11448*x11455))+(((-1.0)*x11449))+((x11450*x11454))+(((-1.0)*x11450))+((x11451*x11453))+((x11451*x11452))+(((-1.0)*r02*r20*sj15*x11457))+(((-1.0)*x11449*x11458))+(((-1.0)*cj15*cj16*r01*r22*sj15)));
IkReal x11461=(r21*sj10);
IkReal x11462=(r20*sj10);
j14eval[0]=x11460;
j14eval[1]=IKsign(x11460);
j14eval[2]=((IKabs(((((-1.0)*cj16*x11462))+((sj16*x11461)))))+(IKabs((((cj15*cj16*x11461))+((cj15*sj16*x11462))+((sj10*((r22*sj15))))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x11463=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x11463;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x11463);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x11464=((1.0)*cj16);
IkReal x11465=((((-1.0)*r21*sj15*x11464))+(((-1.0)*(1.0)*r20*sj15*sj16))+((cj15*r22)));
j14eval[0]=x11465;
j14eval[1]=((IKabs(((((-1.0)*r10*x11464))+((r11*sj16)))))+(IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15))))));
j14eval[2]=IKsign(x11465);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x11466=r11*r11;
IkReal x11467=r12*r12;
IkReal x11468=(cj16*r10);
IkReal x11469=((2.0)*r11*sj16*x11468);
IkReal x11470=cj15*cj15;
IkReal x11471=r10*r10;
IkReal x11472=(x11470*x11471);
IkReal x11473=cj16*cj16;
IkReal x11474=((2.0)*r12*sj15);
IkReal x11475=(cj15*cj16*r11);
IkReal x11476=(cj15*r10*sj16);
IkReal x11477=(x11466*x11473);
IkReal x11478=((((-1.0)*x11469))+x11467+x11466+((x11469*x11470))+((x11471*x11473))+((x11474*x11475))+(((-1.0)*x11472*x11473))+(((-1.0)*x11477))+((x11470*x11477))+((x11474*x11476))+x11472+(((-1.0)*x11467*x11470)));
j14eval[0]=x11478;
j14eval[1]=IKsign(x11478);
j14eval[2]=((IKabs((((r12*sj15))+x11476+x11475)))+(IKabs((((r11*sj16))+(((-1.0)*x11468))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11479=(cj15*cj16*r11);
IkReal x11480=(cj15*r10*sj16);
IkReal x11481=(cj16*r10);
IkReal x11482=r11*r11;
IkReal x11483=r12*r12;
IkReal x11484=((2.0)*r11*sj16*x11481);
IkReal x11485=cj15*cj15;
IkReal x11486=r10*r10;
IkReal x11487=(x11485*x11486);
IkReal x11488=cj16*cj16;
IkReal x11489=((2.0)*r12*sj15);
IkReal x11490=(x11482*x11488);
CheckValue<IkReal> x11491=IKPowWithIntegerCheck(IKsign((x11487+x11483+x11482+(((-1.0)*x11483*x11485))+((x11485*x11490))+((x11480*x11489))+((x11484*x11485))+(((-1.0)*x11490))+((x11486*x11488))+(((-1.0)*x11484))+((x11479*x11489))+(((-1.0)*x11487*x11488)))),-1);
if(!x11491.valid){
continue;
}
CheckValue<IkReal> x11492 = IKatan2WithCheck(IkReal((x11480+((r12*sj15))+x11479)),IkReal(((((-1.0)*x11481))+((r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11492.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11491.value)))+(x11492.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11493=IKsin(j14);
IkReal x11494=(cj16*r20);
IkReal x11495=IKcos(j14);
IkReal x11496=(sj15*x11495);
IkReal x11497=(r21*sj16);
IkReal x11498=((1.0)*x11493);
IkReal x11499=(cj15*cj16*x11495);
IkReal x11500=(cj15*sj16*x11495);
IkReal x11501=(cj16*r10);
IkReal x11502=(r11*sj16);
IkReal x11503=(cj16*r00);
IkReal x11504=((1.0)*r01*sj16);
IkReal x11505=((1.0)*x11495);
IkReal x11506=((1.0)*sj15*x11493);
IkReal x11507=((1.0)*cj15*cj16*x11493);
IkReal x11508=((1.0)*cj15*sj16*x11493);
evalcond[0]=(((r22*x11496))+(((-1.0)*x11497*x11498))+((r21*x11499))+((x11493*x11494))+((r20*x11500)));
evalcond[1]=(((x11493*x11501))+((r12*x11496))+(((-1.0)*x11498*x11502))+((r11*x11499))+((r10*x11500)));
evalcond[2]=((-1.0)+((r01*x11499))+((r02*x11496))+(((-1.0)*x11493*x11504))+((r00*x11500))+((x11493*x11503)));
evalcond[3]=((((-1.0)*x11497*x11505))+((x11494*x11495))+(((-1.0)*r21*x11507))+(((-1.0)*r22*x11506))+(((-1.0)*r20*x11508)));
evalcond[4]=((((-1.0)*r01*x11507))+(((-1.0)*r00*x11508))+(((-1.0)*r02*x11506))+((x11495*x11503))+(((-1.0)*x11495*x11504)));
evalcond[5]=((1.0)+(((-1.0)*r11*x11507))+((x11495*x11501))+(((-1.0)*r10*x11508))+(((-1.0)*x11502*x11505))+(((-1.0)*r12*x11506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11509=((1.0)*cj16);
CheckValue<IkReal> x11510 = IKatan2WithCheck(IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IkReal((((r11*sj16))+(((-1.0)*r10*x11509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11510.valid){
continue;
}
CheckValue<IkReal> x11511=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj15*sj16))+((cj15*r22))+(((-1.0)*r21*sj15*x11509)))),-1);
if(!x11511.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11510.value)+(((1.5707963267949)*(x11511.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11512=IKsin(j14);
IkReal x11513=(cj16*r20);
IkReal x11514=IKcos(j14);
IkReal x11515=(sj15*x11514);
IkReal x11516=(r21*sj16);
IkReal x11517=((1.0)*x11512);
IkReal x11518=(cj15*cj16*x11514);
IkReal x11519=(cj15*sj16*x11514);
IkReal x11520=(cj16*r10);
IkReal x11521=(r11*sj16);
IkReal x11522=(cj16*r00);
IkReal x11523=((1.0)*r01*sj16);
IkReal x11524=((1.0)*x11514);
IkReal x11525=((1.0)*sj15*x11512);
IkReal x11526=((1.0)*cj15*cj16*x11512);
IkReal x11527=((1.0)*cj15*sj16*x11512);
evalcond[0]=(((r22*x11515))+((x11512*x11513))+(((-1.0)*x11516*x11517))+((r20*x11519))+((r21*x11518)));
evalcond[1]=(((x11512*x11520))+((r10*x11519))+((r11*x11518))+(((-1.0)*x11517*x11521))+((r12*x11515)));
evalcond[2]=((-1.0)+((r00*x11519))+((r01*x11518))+((x11512*x11522))+(((-1.0)*x11512*x11523))+((r02*x11515)));
evalcond[3]=(((x11513*x11514))+(((-1.0)*r20*x11527))+(((-1.0)*r21*x11526))+(((-1.0)*x11516*x11524))+(((-1.0)*r22*x11525)));
evalcond[4]=((((-1.0)*x11514*x11523))+(((-1.0)*r00*x11527))+(((-1.0)*r02*x11525))+(((-1.0)*r01*x11526))+((x11514*x11522)));
evalcond[5]=((1.0)+(((-1.0)*x11521*x11524))+(((-1.0)*r12*x11525))+(((-1.0)*r11*x11526))+((x11514*x11520))+(((-1.0)*r10*x11527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11528 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11528.valid){
continue;
}
CheckValue<IkReal> x11529=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x11529.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11528.value)+(((1.5707963267949)*(x11529.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11530=IKsin(j14);
IkReal x11531=(cj16*r20);
IkReal x11532=IKcos(j14);
IkReal x11533=(sj15*x11532);
IkReal x11534=(r21*sj16);
IkReal x11535=((1.0)*x11530);
IkReal x11536=(cj15*cj16*x11532);
IkReal x11537=(cj15*sj16*x11532);
IkReal x11538=(cj16*r10);
IkReal x11539=(r11*sj16);
IkReal x11540=(cj16*r00);
IkReal x11541=((1.0)*r01*sj16);
IkReal x11542=((1.0)*x11532);
IkReal x11543=((1.0)*sj15*x11530);
IkReal x11544=((1.0)*cj15*cj16*x11530);
IkReal x11545=((1.0)*cj15*sj16*x11530);
evalcond[0]=(((r20*x11537))+((x11530*x11531))+((r22*x11533))+((r21*x11536))+(((-1.0)*x11534*x11535)));
evalcond[1]=(((r11*x11536))+((r10*x11537))+(((-1.0)*x11535*x11539))+((x11530*x11538))+((r12*x11533)));
evalcond[2]=((-1.0)+((x11530*x11540))+((r02*x11533))+((r00*x11537))+(((-1.0)*x11530*x11541))+((r01*x11536)));
evalcond[3]=((((-1.0)*x11534*x11542))+(((-1.0)*r21*x11544))+(((-1.0)*r22*x11543))+((x11531*x11532))+(((-1.0)*r20*x11545)));
evalcond[4]=((((-1.0)*r00*x11545))+(((-1.0)*r01*x11544))+((x11532*x11540))+(((-1.0)*x11532*x11541))+(((-1.0)*r02*x11543)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11543))+((x11532*x11538))+(((-1.0)*r11*x11544))+(((-1.0)*x11539*x11542))+(((-1.0)*r10*x11545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x11546=((1.0)*cj15);
IkReal x11547=((((-1.0)*r12*x11546))+((cj16*r11*sj15))+((r10*sj15*sj16)));
j14eval[0]=x11547;
j14eval[1]=((IKabs(((((-1.0)*cj16*r21*x11546))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*r20*sj16*x11546)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
j14eval[2]=IKsign(x11547);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x11548=((1.0)*sj15);
IkReal x11549=((((-1.0)*cj16*r21*x11548))+(((-1.0)*r20*sj16*x11548))+((cj15*r22)));
IkReal x11550=((1.0)*r11);
j14eval[0]=x11549;
j14eval[1]=((IKabs((((cj16*r10))+(((-1.0)*sj16*x11550)))))+(IKabs(((((-1.0)*r12*x11548))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*cj15*cj16*x11550))))));
j14eval[2]=IKsign(x11549);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x11551=r11*r11;
IkReal x11552=((1.0)*x11551);
IkReal x11553=r12*r12;
IkReal x11554=(cj16*r10);
IkReal x11555=((2.0)*r11*sj16*x11554);
IkReal x11556=cj15*cj15;
IkReal x11557=cj16*cj16;
IkReal x11558=((2.0)*r12*sj15);
IkReal x11559=(cj15*cj16*r11);
IkReal x11560=(cj15*r10*sj16);
IkReal x11561=r10*r10;
IkReal x11562=((1.0)*x11561);
IkReal x11563=(x11556*x11557);
IkReal x11564=((((-1.0)*x11552*x11563))+x11555+(((-1.0)*x11557*x11562))+(((-1.0)*x11558*x11559))+((x11553*x11556))+(((-1.0)*x11555*x11556))+((x11551*x11557))+(((-1.0)*x11556*x11562))+((x11561*x11563))+(((-1.0)*x11558*x11560))+(((-1.0)*x11552))+(((-1.0)*x11553)));
j14eval[0]=x11564;
j14eval[1]=((IKabs(((((-1.0)*x11554))+((r11*sj16)))))+(IKabs((x11559+((r12*sj15))+x11560))));
j14eval[2]=IKsign(x11564);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11565=(cj15*cj16*r11);
IkReal x11566=(cj15*r10*sj16);
IkReal x11567=(cj16*r10);
IkReal x11568=r11*r11;
IkReal x11569=((1.0)*x11568);
IkReal x11570=r12*r12;
IkReal x11571=((2.0)*r11*sj16*x11567);
IkReal x11572=cj15*cj15;
IkReal x11573=cj16*cj16;
IkReal x11574=((2.0)*r12*sj15);
IkReal x11575=r10*r10;
IkReal x11576=((1.0)*x11575);
IkReal x11577=(x11572*x11573);
CheckValue<IkReal> x11578 = IKatan2WithCheck(IkReal((((r12*sj15))+x11565+x11566)),IkReal((((r11*sj16))+(((-1.0)*x11567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11578.valid){
continue;
}
CheckValue<IkReal> x11579=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11572*x11576))+(((-1.0)*x11569*x11577))+(((-1.0)*x11573*x11576))+(((-1.0)*x11571*x11572))+(((-1.0)*x11566*x11574))+((x11570*x11572))+(((-1.0)*x11569))+(((-1.0)*x11570))+((x11575*x11577))+(((-1.0)*x11565*x11574))+((x11568*x11573))+x11571)),-1);
if(!x11579.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11578.value)+(((1.5707963267949)*(x11579.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11580=IKsin(j14);
IkReal x11581=(cj16*r20);
IkReal x11582=IKcos(j14);
IkReal x11583=(sj15*x11582);
IkReal x11584=(r21*sj16);
IkReal x11585=((1.0)*x11580);
IkReal x11586=(cj15*cj16*x11582);
IkReal x11587=(cj15*sj16*x11582);
IkReal x11588=(cj16*r10);
IkReal x11589=(r11*sj16);
IkReal x11590=(cj16*r00);
IkReal x11591=((1.0)*r01*sj16);
IkReal x11592=((1.0)*x11582);
IkReal x11593=((1.0)*sj15*x11580);
IkReal x11594=((1.0)*cj15*cj16*x11580);
IkReal x11595=((1.0)*cj15*sj16*x11580);
evalcond[0]=((((-1.0)*x11584*x11585))+((r22*x11583))+((r21*x11586))+((r20*x11587))+((x11580*x11581)));
evalcond[1]=(((x11580*x11588))+(((-1.0)*x11585*x11589))+((r11*x11586))+((r12*x11583))+((r10*x11587)));
evalcond[2]=((1.0)+((r00*x11587))+((r02*x11583))+((r01*x11586))+(((-1.0)*x11580*x11591))+((x11580*x11590)));
evalcond[3]=((((-1.0)*r22*x11593))+(((-1.0)*r20*x11595))+(((-1.0)*r21*x11594))+(((-1.0)*x11584*x11592))+((x11581*x11582)));
evalcond[4]=((((-1.0)*r02*x11593))+(((-1.0)*x11582*x11591))+(((-1.0)*r01*x11594))+((x11582*x11590))+(((-1.0)*r00*x11595)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x11595))+(((-1.0)*x11589*x11592))+(((-1.0)*r12*x11593))+((x11582*x11588))+(((-1.0)*r11*x11594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11596=((1.0)*sj15);
IkReal x11597=((1.0)*r11);
CheckValue<IkReal> x11598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x11596))+(((-1.0)*cj16*r21*x11596))+((cj15*r22)))),-1);
if(!x11598.valid){
continue;
}
CheckValue<IkReal> x11599 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*cj16*x11597))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*r12*x11596)))),IkReal((((cj16*r10))+(((-1.0)*sj16*x11597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11599.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11598.value)))+(x11599.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11600=IKsin(j14);
IkReal x11601=(cj16*r20);
IkReal x11602=IKcos(j14);
IkReal x11603=(sj15*x11602);
IkReal x11604=(r21*sj16);
IkReal x11605=((1.0)*x11600);
IkReal x11606=(cj15*cj16*x11602);
IkReal x11607=(cj15*sj16*x11602);
IkReal x11608=(cj16*r10);
IkReal x11609=(r11*sj16);
IkReal x11610=(cj16*r00);
IkReal x11611=((1.0)*r01*sj16);
IkReal x11612=((1.0)*x11602);
IkReal x11613=((1.0)*sj15*x11600);
IkReal x11614=((1.0)*cj15*cj16*x11600);
IkReal x11615=((1.0)*cj15*sj16*x11600);
evalcond[0]=((((-1.0)*x11604*x11605))+((r20*x11607))+((x11600*x11601))+((r22*x11603))+((r21*x11606)));
evalcond[1]=(((r12*x11603))+((r11*x11606))+(((-1.0)*x11605*x11609))+((x11600*x11608))+((r10*x11607)));
evalcond[2]=((1.0)+((r02*x11603))+(((-1.0)*x11600*x11611))+((r00*x11607))+((x11600*x11610))+((r01*x11606)));
evalcond[3]=((((-1.0)*r22*x11613))+(((-1.0)*r20*x11615))+((x11601*x11602))+(((-1.0)*r21*x11614))+(((-1.0)*x11604*x11612)));
evalcond[4]=((((-1.0)*r02*x11613))+(((-1.0)*x11602*x11611))+(((-1.0)*r00*x11615))+((x11602*x11610))+(((-1.0)*r01*x11614)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11613))+(((-1.0)*r10*x11615))+(((-1.0)*r11*x11614))+((x11602*x11608))+(((-1.0)*x11609*x11612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11616=((1.0)*cj15);
CheckValue<IkReal> x11617 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*r21*x11616))+(((-1.0)*r20*sj16*x11616))+(((-1.0)*(1.0)*r22*sj15)))),IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11617.valid){
continue;
}
CheckValue<IkReal> x11618=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x11616)))),-1);
if(!x11618.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11617.value)+(((1.5707963267949)*(x11618.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11619=IKsin(j14);
IkReal x11620=(cj16*r20);
IkReal x11621=IKcos(j14);
IkReal x11622=(sj15*x11621);
IkReal x11623=(r21*sj16);
IkReal x11624=((1.0)*x11619);
IkReal x11625=(cj15*cj16*x11621);
IkReal x11626=(cj15*sj16*x11621);
IkReal x11627=(cj16*r10);
IkReal x11628=(r11*sj16);
IkReal x11629=(cj16*r00);
IkReal x11630=((1.0)*r01*sj16);
IkReal x11631=((1.0)*x11621);
IkReal x11632=((1.0)*sj15*x11619);
IkReal x11633=((1.0)*cj15*cj16*x11619);
IkReal x11634=((1.0)*cj15*sj16*x11619);
evalcond[0]=(((r22*x11622))+(((-1.0)*x11623*x11624))+((x11619*x11620))+((r21*x11625))+((r20*x11626)));
evalcond[1]=(((r11*x11625))+(((-1.0)*x11624*x11628))+((r12*x11622))+((x11619*x11627))+((r10*x11626)));
evalcond[2]=((1.0)+((r01*x11625))+((x11619*x11629))+((r02*x11622))+((r00*x11626))+(((-1.0)*x11619*x11630)));
evalcond[3]=((((-1.0)*r21*x11633))+(((-1.0)*x11623*x11631))+(((-1.0)*r22*x11632))+((x11620*x11621))+(((-1.0)*r20*x11634)));
evalcond[4]=((((-1.0)*r02*x11632))+(((-1.0)*r00*x11634))+(((-1.0)*x11621*x11630))+((x11621*x11629))+(((-1.0)*r01*x11633)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x11633))+(((-1.0)*r12*x11632))+(((-1.0)*x11628*x11631))+((x11621*x11627))+(((-1.0)*r10*x11634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x11635=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x11635;
j14eval[1]=IKsign(x11635);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x11636=((1.0)*cj16);
IkReal x11637=((((-1.0)*r01*sj15*x11636))+(((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02)));
j14eval[0]=x11637;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs(((((-1.0)*r20*x11636))+((r21*sj16))))));
j14eval[2]=IKsign(x11637);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x11638=r01*r01;
IkReal x11639=((1.0)*x11638);
IkReal x11640=r02*r02;
IkReal x11641=(cj16*r00);
IkReal x11642=((2.0)*r01*sj16*x11641);
IkReal x11643=cj15*cj15;
IkReal x11644=cj16*cj16;
IkReal x11645=((2.0)*r02*sj15);
IkReal x11646=(cj15*cj16*r01);
IkReal x11647=(cj15*r00*sj16);
IkReal x11648=r00*r00;
IkReal x11649=((1.0)*x11648);
IkReal x11650=(x11643*x11644);
IkReal x11651=((((-1.0)*x11640))+(((-1.0)*x11644*x11649))+x11642+((x11638*x11644))+(((-1.0)*x11643*x11649))+((x11640*x11643))+((x11648*x11650))+(((-1.0)*x11639*x11650))+(((-1.0)*x11639))+(((-1.0)*x11645*x11647))+(((-1.0)*x11645*x11646))+(((-1.0)*x11642*x11643)));
j14eval[0]=x11651;
j14eval[1]=IKsign(x11651);
j14eval[2]=((IKabs((x11647+x11646+((r02*sj15)))))+(IKabs((((r01*sj16))+(((-1.0)*x11641))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11652=(cj15*cj16*r01);
IkReal x11653=(cj15*r00*sj16);
IkReal x11654=(cj16*r00);
IkReal x11655=r01*r01;
IkReal x11656=((1.0)*x11655);
IkReal x11657=r02*r02;
IkReal x11658=((2.0)*r01*sj16*x11654);
IkReal x11659=cj15*cj15;
IkReal x11660=cj16*cj16;
IkReal x11661=((2.0)*r02*sj15);
IkReal x11662=r00*r00;
IkReal x11663=((1.0)*x11662);
IkReal x11664=(x11659*x11660);
CheckValue<IkReal> x11665 = IKatan2WithCheck(IkReal((x11653+x11652+((r02*sj15)))),IkReal((((r01*sj16))+(((-1.0)*x11654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11665.valid){
continue;
}
CheckValue<IkReal> x11666=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11656*x11664))+(((-1.0)*x11660*x11663))+(((-1.0)*x11656))+((x11662*x11664))+x11658+(((-1.0)*x11659*x11663))+((x11657*x11659))+(((-1.0)*x11657))+((x11655*x11660))+(((-1.0)*x11653*x11661))+(((-1.0)*x11658*x11659))+(((-1.0)*x11652*x11661)))),-1);
if(!x11666.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11665.value)+(((1.5707963267949)*(x11666.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11667=IKsin(j14);
IkReal x11668=(cj16*r20);
IkReal x11669=IKcos(j14);
IkReal x11670=(sj15*x11669);
IkReal x11671=(r21*sj16);
IkReal x11672=((1.0)*x11667);
IkReal x11673=(cj15*cj16*x11669);
IkReal x11674=(cj15*sj16*x11669);
IkReal x11675=(cj16*r00);
IkReal x11676=((1.0)*r01*sj16);
IkReal x11677=(cj16*r10);
IkReal x11678=(r11*sj16);
IkReal x11679=((1.0)*x11669);
IkReal x11680=((1.0)*sj15*x11667);
IkReal x11681=((1.0)*cj15*cj16*x11667);
IkReal x11682=((1.0)*cj15*sj16*x11667);
evalcond[0]=(((x11667*x11668))+((r21*x11673))+((r22*x11670))+(((-1.0)*x11671*x11672))+((r20*x11674)));
evalcond[1]=(((r02*x11670))+((r00*x11674))+((r01*x11673))+(((-1.0)*x11667*x11676))+((x11667*x11675)));
evalcond[2]=((-1.0)+((r10*x11674))+(((-1.0)*x11672*x11678))+((r11*x11673))+((x11667*x11677))+((r12*x11670)));
evalcond[3]=((((-1.0)*r21*x11681))+(((-1.0)*x11671*x11679))+(((-1.0)*r20*x11682))+(((-1.0)*r22*x11680))+((x11668*x11669)));
evalcond[4]=(((x11669*x11677))+(((-1.0)*r10*x11682))+(((-1.0)*x11678*x11679))+(((-1.0)*r12*x11680))+(((-1.0)*r11*x11681)));
evalcond[5]=((-1.0)+(((-1.0)*x11669*x11676))+(((-1.0)*r01*x11681))+((x11669*x11675))+(((-1.0)*r00*x11682))+(((-1.0)*r02*x11680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11683=((1.0)*cj16);
CheckValue<IkReal> x11684 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal((((r21*sj16))+(((-1.0)*r20*x11683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11684.valid){
continue;
}
CheckValue<IkReal> x11685=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02))+(((-1.0)*r01*sj15*x11683)))),-1);
if(!x11685.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11684.value)+(((1.5707963267949)*(x11685.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11686=IKsin(j14);
IkReal x11687=(cj16*r20);
IkReal x11688=IKcos(j14);
IkReal x11689=(sj15*x11688);
IkReal x11690=(r21*sj16);
IkReal x11691=((1.0)*x11686);
IkReal x11692=(cj15*cj16*x11688);
IkReal x11693=(cj15*sj16*x11688);
IkReal x11694=(cj16*r00);
IkReal x11695=((1.0)*r01*sj16);
IkReal x11696=(cj16*r10);
IkReal x11697=(r11*sj16);
IkReal x11698=((1.0)*x11688);
IkReal x11699=((1.0)*sj15*x11686);
IkReal x11700=((1.0)*cj15*cj16*x11686);
IkReal x11701=((1.0)*cj15*sj16*x11686);
evalcond[0]=(((r21*x11692))+((r20*x11693))+((r22*x11689))+((x11686*x11687))+(((-1.0)*x11690*x11691)));
evalcond[1]=(((r01*x11692))+((x11686*x11694))+(((-1.0)*x11686*x11695))+((r02*x11689))+((r00*x11693)));
evalcond[2]=((-1.0)+((r12*x11689))+(((-1.0)*x11691*x11697))+((r11*x11692))+((r10*x11693))+((x11686*x11696)));
evalcond[3]=(((x11687*x11688))+(((-1.0)*x11690*x11698))+(((-1.0)*r21*x11700))+(((-1.0)*r22*x11699))+(((-1.0)*r20*x11701)));
evalcond[4]=(((x11688*x11696))+(((-1.0)*r11*x11700))+(((-1.0)*r10*x11701))+(((-1.0)*r12*x11699))+(((-1.0)*x11697*x11698)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x11699))+(((-1.0)*r01*x11700))+((x11688*x11694))+(((-1.0)*r00*x11701))+(((-1.0)*x11688*x11695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11702 = IKatan2WithCheck(IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11702.valid){
continue;
}
CheckValue<IkReal> x11703=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x11703.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11702.value)+(((1.5707963267949)*(x11703.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11704=IKsin(j14);
IkReal x11705=(cj16*r20);
IkReal x11706=IKcos(j14);
IkReal x11707=(sj15*x11706);
IkReal x11708=(r21*sj16);
IkReal x11709=((1.0)*x11704);
IkReal x11710=(cj15*cj16*x11706);
IkReal x11711=(cj15*sj16*x11706);
IkReal x11712=(cj16*r00);
IkReal x11713=((1.0)*r01*sj16);
IkReal x11714=(cj16*r10);
IkReal x11715=(r11*sj16);
IkReal x11716=((1.0)*x11706);
IkReal x11717=((1.0)*sj15*x11704);
IkReal x11718=((1.0)*cj15*cj16*x11704);
IkReal x11719=((1.0)*cj15*sj16*x11704);
evalcond[0]=(((r22*x11707))+((x11704*x11705))+((r20*x11711))+(((-1.0)*x11708*x11709))+((r21*x11710)));
evalcond[1]=(((r00*x11711))+((r02*x11707))+(((-1.0)*x11704*x11713))+((r01*x11710))+((x11704*x11712)));
evalcond[2]=((-1.0)+((x11704*x11714))+(((-1.0)*x11709*x11715))+((r12*x11707))+((r10*x11711))+((r11*x11710)));
evalcond[3]=((((-1.0)*r20*x11719))+(((-1.0)*x11708*x11716))+(((-1.0)*r22*x11717))+((x11705*x11706))+(((-1.0)*r21*x11718)));
evalcond[4]=((((-1.0)*x11715*x11716))+(((-1.0)*r11*x11718))+(((-1.0)*r12*x11717))+((x11706*x11714))+(((-1.0)*r10*x11719)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x11717))+((x11706*x11712))+(((-1.0)*r00*x11719))+(((-1.0)*x11706*x11713))+(((-1.0)*r01*x11718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x11720=((1.0)*cj15);
IkReal x11721=(((r20*sj15*sj16))+(((-1.0)*r22*x11720))+((cj16*r21*sj15)));
j14eval[0]=x11721;
j14eval[1]=IKsign(x11721);
j14eval[2]=((IKabs(((((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x11720))+(((-1.0)*r00*sj16*x11720)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x11722=((1.0)*sj15);
IkReal x11723=((((-1.0)*cj16*r01*x11722))+((cj15*r02))+(((-1.0)*r00*sj16*x11722)));
IkReal x11724=((1.0)*r21);
j14eval[0]=x11723;
j14eval[1]=IKsign(x11723);
j14eval[2]=((IKabs(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x11722))+(((-1.0)*cj15*cj16*x11724)))))+(IKabs((((cj16*r20))+(((-1.0)*sj16*x11724))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x11725=r01*r01;
IkReal x11726=r02*r02;
IkReal x11727=(cj16*r00);
IkReal x11728=((2.0)*r01*sj16*x11727);
IkReal x11729=cj15*cj15;
IkReal x11730=r00*r00;
IkReal x11731=(x11729*x11730);
IkReal x11732=cj16*cj16;
IkReal x11733=((2.0)*r02*sj15);
IkReal x11734=(cj15*cj16*r01);
IkReal x11735=(cj15*r00*sj16);
IkReal x11736=(x11725*x11732);
IkReal x11737=((((-1.0)*x11736))+(((-1.0)*x11731*x11732))+((x11730*x11732))+((x11733*x11735))+((x11728*x11729))+((x11733*x11734))+x11731+x11725+x11726+((x11729*x11736))+(((-1.0)*x11728))+(((-1.0)*x11726*x11729)));
j14eval[0]=x11737;
j14eval[1]=IKsign(x11737);
j14eval[2]=((IKabs((((r02*sj15))+x11735+x11734)))+(IKabs((((r01*sj16))+(((-1.0)*x11727))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11738=(cj15*cj16*r01);
IkReal x11739=(cj15*r00*sj16);
IkReal x11740=(cj16*r00);
IkReal x11741=r01*r01;
IkReal x11742=r02*r02;
IkReal x11743=((2.0)*r01*sj16*x11740);
IkReal x11744=cj15*cj15;
IkReal x11745=r00*r00;
IkReal x11746=(x11744*x11745);
IkReal x11747=cj16*cj16;
IkReal x11748=((2.0)*r02*sj15);
IkReal x11749=(x11741*x11747);
CheckValue<IkReal> x11750 = IKatan2WithCheck(IkReal((((r02*sj15))+x11738+x11739)),IkReal((((r01*sj16))+(((-1.0)*x11740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11750.valid){
continue;
}
CheckValue<IkReal> x11751=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11743))+((x11745*x11747))+(((-1.0)*x11746*x11747))+x11741+x11746+x11742+((x11738*x11748))+(((-1.0)*x11742*x11744))+(((-1.0)*x11749))+((x11744*x11749))+((x11743*x11744))+((x11739*x11748)))),-1);
if(!x11751.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11750.value)+(((1.5707963267949)*(x11751.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11752=IKsin(j14);
IkReal x11753=(cj16*r20);
IkReal x11754=IKcos(j14);
IkReal x11755=(sj15*x11754);
IkReal x11756=(r21*sj16);
IkReal x11757=((1.0)*x11752);
IkReal x11758=(cj15*cj16*x11754);
IkReal x11759=(cj15*sj16*x11754);
IkReal x11760=(cj16*r00);
IkReal x11761=((1.0)*r01*sj16);
IkReal x11762=(cj16*r10);
IkReal x11763=(r11*sj16);
IkReal x11764=((1.0)*x11754);
IkReal x11765=((1.0)*sj15*x11752);
IkReal x11766=((1.0)*cj15*cj16*x11752);
IkReal x11767=((1.0)*cj15*sj16*x11752);
evalcond[0]=(((r21*x11758))+(((-1.0)*x11756*x11757))+((x11752*x11753))+((r20*x11759))+((r22*x11755)));
evalcond[1]=(((r02*x11755))+((r01*x11758))+(((-1.0)*x11752*x11761))+((x11752*x11760))+((r00*x11759)));
evalcond[2]=((1.0)+((r12*x11755))+((r10*x11759))+((x11752*x11762))+((r11*x11758))+(((-1.0)*x11757*x11763)));
evalcond[3]=(((x11753*x11754))+(((-1.0)*r22*x11765))+(((-1.0)*x11756*x11764))+(((-1.0)*r20*x11767))+(((-1.0)*r21*x11766)));
evalcond[4]=((((-1.0)*r11*x11766))+(((-1.0)*x11763*x11764))+(((-1.0)*r10*x11767))+(((-1.0)*r12*x11765))+((x11754*x11762)));
evalcond[5]=((1.0)+((x11754*x11760))+(((-1.0)*r01*x11766))+(((-1.0)*r00*x11767))+(((-1.0)*x11754*x11761))+(((-1.0)*r02*x11765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11768=((1.0)*sj15);
IkReal x11769=((1.0)*r21);
CheckValue<IkReal> x11770 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x11768))+(((-1.0)*cj15*cj16*x11769)))),IkReal(((((-1.0)*sj16*x11769))+((cj16*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11770.valid){
continue;
}
CheckValue<IkReal> x11771=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x11768))+((cj15*r02))+(((-1.0)*r00*sj16*x11768)))),-1);
if(!x11771.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11770.value)+(((1.5707963267949)*(x11771.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11772=IKsin(j14);
IkReal x11773=(cj16*r20);
IkReal x11774=IKcos(j14);
IkReal x11775=(sj15*x11774);
IkReal x11776=(r21*sj16);
IkReal x11777=((1.0)*x11772);
IkReal x11778=(cj15*cj16*x11774);
IkReal x11779=(cj15*sj16*x11774);
IkReal x11780=(cj16*r00);
IkReal x11781=((1.0)*r01*sj16);
IkReal x11782=(cj16*r10);
IkReal x11783=(r11*sj16);
IkReal x11784=((1.0)*x11774);
IkReal x11785=((1.0)*sj15*x11772);
IkReal x11786=((1.0)*cj15*cj16*x11772);
IkReal x11787=((1.0)*cj15*sj16*x11772);
evalcond[0]=(((r21*x11778))+((r20*x11779))+(((-1.0)*x11776*x11777))+((x11772*x11773))+((r22*x11775)));
evalcond[1]=(((x11772*x11780))+(((-1.0)*x11772*x11781))+((r01*x11778))+((r00*x11779))+((r02*x11775)));
evalcond[2]=((1.0)+((x11772*x11782))+((r11*x11778))+(((-1.0)*x11777*x11783))+((r10*x11779))+((r12*x11775)));
evalcond[3]=((((-1.0)*r21*x11786))+(((-1.0)*r20*x11787))+((x11773*x11774))+(((-1.0)*x11776*x11784))+(((-1.0)*r22*x11785)));
evalcond[4]=(((x11774*x11782))+(((-1.0)*r11*x11786))+(((-1.0)*r12*x11785))+(((-1.0)*x11783*x11784))+(((-1.0)*r10*x11787)));
evalcond[5]=((1.0)+(((-1.0)*x11774*x11781))+(((-1.0)*r02*x11785))+(((-1.0)*r00*x11787))+((x11774*x11780))+(((-1.0)*r01*x11786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11788=((1.0)*cj15);
CheckValue<IkReal> x11789 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj16*x11788))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x11788)))),IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11789.valid){
continue;
}
CheckValue<IkReal> x11790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x11788))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x11790.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11789.value)+(((1.5707963267949)*(x11790.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11791=IKsin(j14);
IkReal x11792=(cj16*r20);
IkReal x11793=IKcos(j14);
IkReal x11794=(sj15*x11793);
IkReal x11795=(r21*sj16);
IkReal x11796=((1.0)*x11791);
IkReal x11797=(cj15*cj16*x11793);
IkReal x11798=(cj15*sj16*x11793);
IkReal x11799=(cj16*r00);
IkReal x11800=((1.0)*r01*sj16);
IkReal x11801=(cj16*r10);
IkReal x11802=(r11*sj16);
IkReal x11803=((1.0)*x11793);
IkReal x11804=((1.0)*sj15*x11791);
IkReal x11805=((1.0)*cj15*cj16*x11791);
IkReal x11806=((1.0)*cj15*sj16*x11791);
evalcond[0]=(((r20*x11798))+((r21*x11797))+(((-1.0)*x11795*x11796))+((x11791*x11792))+((r22*x11794)));
evalcond[1]=((((-1.0)*x11791*x11800))+((r00*x11798))+((r01*x11797))+((x11791*x11799))+((r02*x11794)));
evalcond[2]=((1.0)+((r12*x11794))+((r10*x11798))+(((-1.0)*x11796*x11802))+((x11791*x11801))+((r11*x11797)));
evalcond[3]=((((-1.0)*r21*x11805))+((x11792*x11793))+(((-1.0)*r20*x11806))+(((-1.0)*x11795*x11803))+(((-1.0)*r22*x11804)));
evalcond[4]=((((-1.0)*r10*x11806))+(((-1.0)*r11*x11805))+(((-1.0)*r12*x11804))+(((-1.0)*x11802*x11803))+((x11793*x11801)));
evalcond[5]=((1.0)+(((-1.0)*x11793*x11800))+(((-1.0)*r00*x11806))+(((-1.0)*r01*x11805))+(((-1.0)*r02*x11804))+((x11793*x11799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11807=(r21*sj10);
IkReal x11808=(r20*sj10);
IkReal x11809=(r01*r21);
IkReal x11810=((1.0)*x11809);
IkReal x11811=(r02*r22);
IkReal x11812=(cj16*sj16);
IkReal x11813=(r00*r21);
IkReal x11814=(r01*r20);
IkReal x11815=cj15*cj15;
IkReal x11816=cj16*cj16;
IkReal x11817=((1.0)*r00*r20);
IkReal x11818=((1.0)*cj15*sj16);
IkReal x11819=(x11815*x11816);
IkReal x11820=((1.0)*cj16*sj16*x11815);
CheckValue<IkReal> x11821 = IKatan2WithCheck(IkReal((((cj15*cj16*x11807))+((cj15*sj16*x11808))+((sj10*((r22*sj15)))))),IkReal(((((-1.0)*cj16*x11808))+((sj16*x11807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11821.valid){
continue;
}
CheckValue<IkReal> x11822=IKPowWithIntegerCheck(IKsign((((x11811*x11815))+(((-1.0)*x11815*x11817))+(((-1.0)*cj15*cj16*r02*r21*sj15))+(((-1.0)*r00*r22*sj15*x11818))+(((-1.0)*x11813*x11820))+(((-1.0)*x11816*x11817))+(((-1.0)*r02*r20*sj15*x11818))+((x11812*x11813))+((x11809*x11816))+(((-1.0)*x11811))+(((-1.0)*x11810*x11819))+((r00*r20*x11819))+(((-1.0)*x11810))+(((-1.0)*x11814*x11820))+((x11812*x11814))+(((-1.0)*cj15*cj16*r01*r22*sj15)))),-1);
if(!x11822.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11821.value)+(((1.5707963267949)*(x11822.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11823=IKsin(j14);
IkReal x11824=(cj16*r20);
IkReal x11825=IKcos(j14);
IkReal x11826=(sj15*x11825);
IkReal x11827=(r21*sj16);
IkReal x11828=((1.0)*x11823);
IkReal x11829=(cj15*cj16*x11825);
IkReal x11830=(cj15*sj16*x11825);
IkReal x11831=((1.0)*x11825);
IkReal x11832=((1.0)*sj15*x11823);
IkReal x11833=((1.0)*cj15*cj16*x11823);
IkReal x11834=((1.0)*cj15*sj16*x11823);
IkReal x11835=(cj16*r00);
IkReal x11836=((1.0)*r01*sj16);
IkReal x11837=((-1.0)*(((1.0)*sj10)));
IkReal x11838=(cj16*r10);
IkReal x11839=(r11*sj16);
evalcond[0]=(((r22*x11826))+((x11823*x11824))+((r20*x11830))+(((-1.0)*x11827*x11828))+((r21*x11829)));
evalcond[1]=(((x11824*x11825))+(((-1.0)*r20*x11834))+(((-1.0)*r22*x11832))+(((-1.0)*x11827*x11831))+(((-1.0)*r21*x11833)));
evalcond[2]=(((x11823*x11835))+((r01*x11829))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x11823*x11836))+((r00*x11830))+((r02*x11826)));
evalcond[3]=(((x11823*x11838))+((r11*x11829))+x11837+(((-1.0)*x11828*x11839))+((r10*x11830))+((r12*x11826)));
evalcond[4]=((((-1.0)*r10*x11834))+(((-1.0)*r11*x11833))+(((-1.0)*x11831*x11839))+cj10+(((-1.0)*r12*x11832))+((x11825*x11838)));
evalcond[5]=(x11837+(((-1.0)*r00*x11834))+((x11825*x11835))+(((-1.0)*r02*x11832))+(((-1.0)*x11825*x11836))+(((-1.0)*r01*x11833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11840=((1.0)*cj16);
IkReal x11841=(r21*sj10);
IkReal x11842=(r20*sj10);
CheckValue<IkReal> x11843 = IKatan2WithCheck(IkReal((((r22*sj10*sj15))+((cj15*sj16*x11842))+((cj15*cj16*x11841)))),IkReal((((sj16*x11841))+(((-1.0)*x11840*x11842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11843.valid){
continue;
}
CheckValue<IkReal> x11844=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02))+(((-1.0)*r01*sj15*x11840)))),-1);
if(!x11844.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11843.value)+(((1.5707963267949)*(x11844.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11845=IKsin(j14);
IkReal x11846=(cj16*r20);
IkReal x11847=IKcos(j14);
IkReal x11848=(sj15*x11847);
IkReal x11849=(r21*sj16);
IkReal x11850=((1.0)*x11845);
IkReal x11851=(cj15*cj16*x11847);
IkReal x11852=(cj15*sj16*x11847);
IkReal x11853=((1.0)*x11847);
IkReal x11854=((1.0)*sj15*x11845);
IkReal x11855=((1.0)*cj15*cj16*x11845);
IkReal x11856=((1.0)*cj15*sj16*x11845);
IkReal x11857=(cj16*r00);
IkReal x11858=((1.0)*r01*sj16);
IkReal x11859=((-1.0)*(((1.0)*sj10)));
IkReal x11860=(cj16*r10);
IkReal x11861=(r11*sj16);
evalcond[0]=(((r20*x11852))+(((-1.0)*x11849*x11850))+((r21*x11851))+((x11845*x11846))+((r22*x11848)));
evalcond[1]=((((-1.0)*x11849*x11853))+(((-1.0)*r21*x11855))+(((-1.0)*r22*x11854))+((x11846*x11847))+(((-1.0)*r20*x11856)));
evalcond[2]=(((x11845*x11857))+((r00*x11852))+(((-1.0)*x11845*x11858))+((r01*x11851))+(((-1.0)*(1.0)*cj10))+((r02*x11848)));
evalcond[3]=(((x11845*x11860))+((r12*x11848))+((r11*x11851))+x11859+(((-1.0)*x11850*x11861))+((r10*x11852)));
evalcond[4]=((((-1.0)*r11*x11855))+(((-1.0)*r12*x11854))+cj10+((x11847*x11860))+(((-1.0)*r10*x11856))+(((-1.0)*x11853*x11861)));
evalcond[5]=((((-1.0)*r01*x11855))+(((-1.0)*x11847*x11858))+(((-1.0)*r00*x11856))+((x11847*x11857))+x11859+(((-1.0)*r02*x11854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11862=(cj10*r21);
IkReal x11863=(cj10*r20);
CheckValue<IkReal> x11864 = IKatan2WithCheck(IkReal((((cj10*r22*sj15))+((cj15*cj16*x11862))+((cj15*sj16*x11863)))),IkReal(((((-1.0)*cj16*x11863))+((sj16*x11862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11864.valid){
continue;
}
CheckValue<IkReal> x11865=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x11865.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11864.value)+(((1.5707963267949)*(x11865.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11866=IKsin(j14);
IkReal x11867=(cj16*r20);
IkReal x11868=IKcos(j14);
IkReal x11869=(sj15*x11868);
IkReal x11870=(r21*sj16);
IkReal x11871=((1.0)*x11866);
IkReal x11872=(cj15*cj16*x11868);
IkReal x11873=(cj15*sj16*x11868);
IkReal x11874=((1.0)*x11868);
IkReal x11875=((1.0)*sj15*x11866);
IkReal x11876=((1.0)*cj15*cj16*x11866);
IkReal x11877=((1.0)*cj15*sj16*x11866);
IkReal x11878=(cj16*r00);
IkReal x11879=((1.0)*r01*sj16);
IkReal x11880=((-1.0)*(((1.0)*sj10)));
IkReal x11881=(cj16*r10);
IkReal x11882=(r11*sj16);
evalcond[0]=(((r21*x11872))+((x11866*x11867))+((r20*x11873))+((r22*x11869))+(((-1.0)*x11870*x11871)));
evalcond[1]=((((-1.0)*r21*x11876))+(((-1.0)*r20*x11877))+(((-1.0)*r22*x11875))+(((-1.0)*x11870*x11874))+((x11867*x11868)));
evalcond[2]=((((-1.0)*x11866*x11879))+((r02*x11869))+((x11866*x11878))+(((-1.0)*(1.0)*cj10))+((r00*x11873))+((r01*x11872)));
evalcond[3]=(x11880+(((-1.0)*x11871*x11882))+((r10*x11873))+((r12*x11869))+((x11866*x11881))+((r11*x11872)));
evalcond[4]=((((-1.0)*x11874*x11882))+(((-1.0)*r12*x11875))+((x11868*x11881))+(((-1.0)*r10*x11877))+(((-1.0)*r11*x11876))+cj10);
evalcond[5]=((((-1.0)*r00*x11877))+x11880+(((-1.0)*r01*x11876))+((x11868*x11878))+(((-1.0)*r02*x11875))+(((-1.0)*x11868*x11879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x11883=((0.863573439158322)*cj15);
IkReal x11884=((0.0230723086152)*sj15);
IkReal x11885=((0.0230723086152)*cj15*cj16);
IkReal x11886=((0.0230723086152)*cj15*sj16);
IkReal x11887=((0.863573439158322)*cj16*sj15);
IkReal x11888=((0.863573439158322)*sj15*sj16);
if( IKabs((((r10*x11888))+(((2.30723086152)*py))+(((-1.0)*r12*x11883))+((r11*x11887))+(((-1.0)*r10*x11886))+(((-1.0)*r12*x11884))+(((-1.0)*r11*x11885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x11883))+(((-1.0)*r01*x11885))+(((2.30723086152)*px))+(((-1.0)*r02*x11884))+((r01*x11887))+((r00*x11888))+(((-1.0)*r00*x11886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x11888))+(((2.30723086152)*py))+(((-1.0)*r12*x11883))+((r11*x11887))+(((-1.0)*r10*x11886))+(((-1.0)*r12*x11884))+(((-1.0)*r11*x11885))))+IKsqr(((((-1.0)*r02*x11883))+(((-1.0)*r01*x11885))+(((2.30723086152)*px))+(((-1.0)*r02*x11884))+((r01*x11887))+((r00*x11888))+(((-1.0)*r00*x11886))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r10*x11888))+(((2.30723086152)*py))+(((-1.0)*r12*x11883))+((r11*x11887))+(((-1.0)*r10*x11886))+(((-1.0)*r12*x11884))+(((-1.0)*r11*x11885))), ((((-1.0)*r02*x11883))+(((-1.0)*r01*x11885))+(((2.30723086152)*px))+(((-1.0)*r02*x11884))+((r01*x11887))+((r00*x11888))+(((-1.0)*r00*x11886))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x11889=((0.37429)*cj15);
IkReal x11890=((0.01)*sj15);
IkReal x11891=((0.01)*cj15*cj16);
IkReal x11892=((0.01)*cj15*sj16);
IkReal x11893=((0.37429)*cj16*sj15);
IkReal x11894=((0.37429)*sj15*sj16);
evalcond[0]=(((r02*x11889))+(((-1.0)*(1.0)*px))+((r00*x11892))+((r02*x11890))+(((-1.0)*r01*x11893))+((r01*x11891))+(((-1.0)*r00*x11894))+(((0.43342)*(IKcos(j10)))));
evalcond[1]=((((-1.0)*r10*x11894))+(((-1.0)*(1.0)*py))+(((0.43342)*(IKsin(j10))))+((r12*x11890))+(((-1.0)*r11*x11893))+((r11*x11891))+((r10*x11892))+((r12*x11889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x11895=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x11896=(cj10*r21);
IkReal x11897=(cj10*r20);
j14eval[0]=x11895;
j14eval[1]=((IKabs((((cj10*r22*sj15))+((cj15*sj16*x11897))+((cj15*cj16*x11896)))))+(IKabs(((((-1.0)*cj16*x11897))+((sj16*x11896))))));
j14eval[2]=IKsign(x11895);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x11898=((1.0)*cj16);
IkReal x11899=((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x11898))+((cj15*r02)));
IkReal x11900=(r21*sj10);
IkReal x11901=(r20*sj10);
j14eval[0]=x11899;
j14eval[1]=((IKabs((((sj16*x11900))+(((-1.0)*x11898*x11901)))))+(IKabs((((r22*sj10*sj15))+((cj15*cj16*x11900))+((cj15*sj16*x11901))))));
j14eval[2]=IKsign(x11899);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x11902=(r11*r21);
IkReal x11903=((1.0)*x11902);
IkReal x11904=(r12*r22);
IkReal x11905=(cj16*sj16);
IkReal x11906=(r10*r21);
IkReal x11907=(r11*r20);
IkReal x11908=cj15*cj15;
IkReal x11909=cj16*cj16;
IkReal x11910=((1.0)*r10*r20);
IkReal x11911=((1.0)*cj15*sj16);
IkReal x11912=(x11908*x11909);
IkReal x11913=((1.0)*cj16*sj16*x11908);
IkReal x11914=((((-1.0)*x11903))+(((-1.0)*cj15*cj16*r11*r22*sj15))+(((-1.0)*x11903*x11912))+(((-1.0)*r12*r20*sj15*x11911))+((x11902*x11909))+(((-1.0)*x11908*x11910))+((x11905*x11906))+(((-1.0)*r10*r22*sj15*x11911))+((x11905*x11907))+(((-1.0)*x11904))+(((-1.0)*x11907*x11913))+(((-1.0)*x11906*x11913))+(((-1.0)*cj15*cj16*r12*r21*sj15))+(((-1.0)*x11909*x11910))+((x11904*x11908))+((r10*r20*x11912)));
IkReal x11915=(cj10*r21);
IkReal x11916=(cj10*r20);
j14eval[0]=x11914;
j14eval[1]=((IKabs((((sj16*x11915))+(((-1.0)*cj16*x11916)))))+(IKabs((((cj15*sj16*x11916))+((cj15*cj16*x11915))+((cj10*((r22*sj15))))))));
j14eval[2]=IKsign(x11914);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x11917=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x11917;
j14eval[1]=IKsign(x11917);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x11918=((1.0)*cj16);
IkReal x11919=((((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02))+(((-1.0)*r01*sj15*x11918)));
j14eval[0]=x11919;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs(((((-1.0)*r20*x11918))+((r21*sj16))))));
j14eval[2]=IKsign(x11919);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x11920=r01*r01;
IkReal x11921=r02*r02;
IkReal x11922=(cj16*r00);
IkReal x11923=((2.0)*r01*sj16*x11922);
IkReal x11924=cj15*cj15;
IkReal x11925=r00*r00;
IkReal x11926=(x11924*x11925);
IkReal x11927=cj16*cj16;
IkReal x11928=((2.0)*r02*sj15);
IkReal x11929=(cj15*cj16*r01);
IkReal x11930=(cj15*r00*sj16);
IkReal x11931=(x11920*x11927);
IkReal x11932=(((x11924*x11931))+(((-1.0)*x11926*x11927))+(((-1.0)*x11931))+((x11923*x11924))+(((-1.0)*x11923))+x11921+x11926+x11920+(((-1.0)*x11921*x11924))+((x11928*x11930))+((x11925*x11927))+((x11928*x11929)));
j14eval[0]=x11932;
j14eval[1]=IKsign(x11932);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*x11922)))))+(IKabs((((r02*sj15))+x11929+x11930))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11933=(cj15*cj16*r01);
IkReal x11934=(cj15*r00*sj16);
IkReal x11935=(cj16*r00);
IkReal x11936=r01*r01;
IkReal x11937=r02*r02;
IkReal x11938=((2.0)*r01*sj16*x11935);
IkReal x11939=cj15*cj15;
IkReal x11940=r00*r00;
IkReal x11941=(x11939*x11940);
IkReal x11942=cj16*cj16;
IkReal x11943=((2.0)*r02*sj15);
IkReal x11944=(x11936*x11942);
CheckValue<IkReal> x11945=IKPowWithIntegerCheck(IKsign((((x11933*x11943))+((x11934*x11943))+(((-1.0)*x11938))+x11941+((x11939*x11944))+(((-1.0)*x11944))+(((-1.0)*x11941*x11942))+(((-1.0)*x11937*x11939))+x11936+x11937+((x11940*x11942))+((x11938*x11939)))),-1);
if(!x11945.valid){
continue;
}
CheckValue<IkReal> x11946 = IKatan2WithCheck(IkReal((((r02*sj15))+x11933+x11934)),IkReal(((((-1.0)*x11935))+((r01*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11946.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11945.value)))+(x11946.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11947=IKsin(j14);
IkReal x11948=(cj16*r20);
IkReal x11949=IKcos(j14);
IkReal x11950=(sj15*x11949);
IkReal x11951=(r21*sj16);
IkReal x11952=((1.0)*x11947);
IkReal x11953=(cj15*cj16*x11949);
IkReal x11954=(cj15*sj16*x11949);
IkReal x11955=(cj16*r00);
IkReal x11956=((1.0)*r01*sj16);
IkReal x11957=(cj16*r10);
IkReal x11958=(r11*sj16);
IkReal x11959=((1.0)*x11949);
IkReal x11960=((1.0)*sj15*x11947);
IkReal x11961=((1.0)*cj15*cj16*x11947);
IkReal x11962=((1.0)*cj15*sj16*x11947);
evalcond[0]=(((x11947*x11948))+((r21*x11953))+((r20*x11954))+(((-1.0)*x11951*x11952))+((r22*x11950)));
evalcond[1]=(((r02*x11950))+((x11947*x11955))+((r01*x11953))+(((-1.0)*x11947*x11956))+((r00*x11954)));
evalcond[2]=((-1.0)+(((-1.0)*x11952*x11958))+((r11*x11953))+((r10*x11954))+((r12*x11950))+((x11947*x11957)));
evalcond[3]=((((-1.0)*x11951*x11959))+(((-1.0)*r20*x11962))+(((-1.0)*r21*x11961))+(((-1.0)*r22*x11960))+((x11948*x11949)));
evalcond[4]=((((-1.0)*r11*x11961))+((x11949*x11957))+(((-1.0)*x11958*x11959))+(((-1.0)*r12*x11960))+(((-1.0)*r10*x11962)));
evalcond[5]=((1.0)+(((-1.0)*r01*x11961))+((x11949*x11955))+(((-1.0)*r00*x11962))+(((-1.0)*x11949*x11956))+(((-1.0)*r02*x11960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11963=((1.0)*cj16);
CheckValue<IkReal> x11964 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal(((((-1.0)*r20*x11963))+((r21*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11964.valid){
continue;
}
CheckValue<IkReal> x11965=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x11963))+((cj15*r02)))),-1);
if(!x11965.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11964.value)+(((1.5707963267949)*(x11965.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11966=IKsin(j14);
IkReal x11967=(cj16*r20);
IkReal x11968=IKcos(j14);
IkReal x11969=(sj15*x11968);
IkReal x11970=(r21*sj16);
IkReal x11971=((1.0)*x11966);
IkReal x11972=(cj15*cj16*x11968);
IkReal x11973=(cj15*sj16*x11968);
IkReal x11974=(cj16*r00);
IkReal x11975=((1.0)*r01*sj16);
IkReal x11976=(cj16*r10);
IkReal x11977=(r11*sj16);
IkReal x11978=((1.0)*x11968);
IkReal x11979=((1.0)*sj15*x11966);
IkReal x11980=((1.0)*cj15*cj16*x11966);
IkReal x11981=((1.0)*cj15*sj16*x11966);
evalcond[0]=((((-1.0)*x11970*x11971))+((x11966*x11967))+((r20*x11973))+((r21*x11972))+((r22*x11969)));
evalcond[1]=((((-1.0)*x11966*x11975))+((r00*x11973))+((r01*x11972))+((x11966*x11974))+((r02*x11969)));
evalcond[2]=((-1.0)+(((-1.0)*x11971*x11977))+((r12*x11969))+((r10*x11973))+((r11*x11972))+((x11966*x11976)));
evalcond[3]=(((x11967*x11968))+(((-1.0)*r22*x11979))+(((-1.0)*x11970*x11978))+(((-1.0)*r20*x11981))+(((-1.0)*r21*x11980)));
evalcond[4]=((((-1.0)*x11977*x11978))+(((-1.0)*r12*x11979))+(((-1.0)*r10*x11981))+((x11968*x11976))+(((-1.0)*r11*x11980)));
evalcond[5]=((1.0)+(((-1.0)*r01*x11980))+(((-1.0)*x11968*x11975))+(((-1.0)*r02*x11979))+(((-1.0)*r00*x11981))+((x11968*x11974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11982 = IKatan2WithCheck(IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11982.valid){
continue;
}
CheckValue<IkReal> x11983=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x11983.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11982.value)+(((1.5707963267949)*(x11983.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11984=IKsin(j14);
IkReal x11985=(cj16*r20);
IkReal x11986=IKcos(j14);
IkReal x11987=(sj15*x11986);
IkReal x11988=(r21*sj16);
IkReal x11989=((1.0)*x11984);
IkReal x11990=(cj15*cj16*x11986);
IkReal x11991=(cj15*sj16*x11986);
IkReal x11992=(cj16*r00);
IkReal x11993=((1.0)*r01*sj16);
IkReal x11994=(cj16*r10);
IkReal x11995=(r11*sj16);
IkReal x11996=((1.0)*x11986);
IkReal x11997=((1.0)*sj15*x11984);
IkReal x11998=((1.0)*cj15*cj16*x11984);
IkReal x11999=((1.0)*cj15*sj16*x11984);
evalcond[0]=(((r22*x11987))+(((-1.0)*x11988*x11989))+((r20*x11991))+((x11984*x11985))+((r21*x11990)));
evalcond[1]=(((r02*x11987))+((r01*x11990))+((r00*x11991))+(((-1.0)*x11984*x11993))+((x11984*x11992)));
evalcond[2]=((-1.0)+((r12*x11987))+((r10*x11991))+((x11984*x11994))+(((-1.0)*x11989*x11995))+((r11*x11990)));
evalcond[3]=((((-1.0)*r21*x11998))+(((-1.0)*x11988*x11996))+(((-1.0)*r22*x11997))+(((-1.0)*r20*x11999))+((x11985*x11986)));
evalcond[4]=((((-1.0)*r11*x11998))+((x11986*x11994))+(((-1.0)*r10*x11999))+(((-1.0)*x11995*x11996))+(((-1.0)*r12*x11997)));
evalcond[5]=((1.0)+(((-1.0)*r01*x11998))+(((-1.0)*r02*x11997))+(((-1.0)*r00*x11999))+(((-1.0)*x11986*x11993))+((x11986*x11992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x12000=((1.0)*cj15);
IkReal x12001=(((r20*sj15*sj16))+(((-1.0)*r22*x12000))+((cj16*r21*sj15)));
j14eval[0]=x12001;
j14eval[1]=IKsign(x12001);
j14eval[2]=((IKabs(((((-1.0)*r00*sj16*x12000))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x12000)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x12002=((1.0)*sj15);
IkReal x12003=((((-1.0)*r00*sj16*x12002))+((cj15*r02))+(((-1.0)*cj16*r01*x12002)));
IkReal x12004=((1.0)*r21);
j14eval[0]=x12003;
j14eval[1]=IKsign(x12003);
j14eval[2]=((IKabs((((cj16*r20))+(((-1.0)*sj16*x12004)))))+(IKabs(((((-1.0)*cj15*cj16*x12004))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x12002))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x12005=r01*r01;
IkReal x12006=((1.0)*x12005);
IkReal x12007=r02*r02;
IkReal x12008=(cj16*r00);
IkReal x12009=((2.0)*r01*sj16*x12008);
IkReal x12010=cj15*cj15;
IkReal x12011=cj16*cj16;
IkReal x12012=((2.0)*r02*sj15);
IkReal x12013=(cj15*cj16*r01);
IkReal x12014=(cj15*r00*sj16);
IkReal x12015=r00*r00;
IkReal x12016=((1.0)*x12015);
IkReal x12017=(x12010*x12011);
IkReal x12018=(((x12007*x12010))+(((-1.0)*x12009*x12010))+((x12015*x12017))+(((-1.0)*x12010*x12016))+(((-1.0)*x12012*x12013))+(((-1.0)*x12007))+(((-1.0)*x12006*x12017))+(((-1.0)*x12006))+(((-1.0)*x12012*x12014))+(((-1.0)*x12011*x12016))+((x12005*x12011))+x12009);
j14eval[0]=x12018;
j14eval[1]=IKsign(x12018);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*x12008)))))+(IKabs((((r02*sj15))+x12013+x12014))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12019=(cj15*cj16*r01);
IkReal x12020=(cj15*r00*sj16);
IkReal x12021=(cj16*r00);
IkReal x12022=r01*r01;
IkReal x12023=((1.0)*x12022);
IkReal x12024=r02*r02;
IkReal x12025=((2.0)*r01*sj16*x12021);
IkReal x12026=cj15*cj15;
IkReal x12027=cj16*cj16;
IkReal x12028=((2.0)*r02*sj15);
IkReal x12029=r00*r00;
IkReal x12030=((1.0)*x12029);
IkReal x12031=(x12026*x12027);
CheckValue<IkReal> x12032 = IKatan2WithCheck(IkReal((((r02*sj15))+x12019+x12020)),IkReal((((r01*sj16))+(((-1.0)*x12021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12032.valid){
continue;
}
CheckValue<IkReal> x12033=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12025*x12026))+(((-1.0)*x12020*x12028))+(((-1.0)*x12023))+((x12022*x12027))+(((-1.0)*x12024))+x12025+(((-1.0)*x12026*x12030))+((x12024*x12026))+(((-1.0)*x12027*x12030))+((x12029*x12031))+(((-1.0)*x12023*x12031))+(((-1.0)*x12019*x12028)))),-1);
if(!x12033.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12032.value)+(((1.5707963267949)*(x12033.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12034=IKsin(j14);
IkReal x12035=(cj16*r20);
IkReal x12036=IKcos(j14);
IkReal x12037=(sj15*x12036);
IkReal x12038=(r21*sj16);
IkReal x12039=((1.0)*x12034);
IkReal x12040=(cj15*cj16*x12036);
IkReal x12041=(cj15*sj16*x12036);
IkReal x12042=(cj16*r00);
IkReal x12043=((1.0)*r01*sj16);
IkReal x12044=(cj16*r10);
IkReal x12045=(r11*sj16);
IkReal x12046=((1.0)*x12036);
IkReal x12047=((1.0)*sj15*x12034);
IkReal x12048=((1.0)*cj15*cj16*x12034);
IkReal x12049=((1.0)*cj15*sj16*x12034);
evalcond[0]=(((r20*x12041))+(((-1.0)*x12038*x12039))+((r22*x12037))+((x12034*x12035))+((r21*x12040)));
evalcond[1]=(((r02*x12037))+((r00*x12041))+((r01*x12040))+((x12034*x12042))+(((-1.0)*x12034*x12043)));
evalcond[2]=((1.0)+((r10*x12041))+((r12*x12037))+((x12034*x12044))+(((-1.0)*x12039*x12045))+((r11*x12040)));
evalcond[3]=((((-1.0)*r20*x12049))+(((-1.0)*r22*x12047))+(((-1.0)*r21*x12048))+((x12035*x12036))+(((-1.0)*x12038*x12046)));
evalcond[4]=((((-1.0)*r12*x12047))+((x12036*x12044))+(((-1.0)*r10*x12049))+(((-1.0)*r11*x12048))+(((-1.0)*x12045*x12046)));
evalcond[5]=((-1.0)+((x12036*x12042))+(((-1.0)*x12036*x12043))+(((-1.0)*r02*x12047))+(((-1.0)*r00*x12049))+(((-1.0)*r01*x12048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12050=((1.0)*sj15);
IkReal x12051=((1.0)*r21);
CheckValue<IkReal> x12052 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x12050))+(((-1.0)*cj15*cj16*x12051)))),IkReal(((((-1.0)*sj16*x12051))+((cj16*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12052.valid){
continue;
}
CheckValue<IkReal> x12053=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*r00*sj16*x12050))+(((-1.0)*cj16*r01*x12050)))),-1);
if(!x12053.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12052.value)+(((1.5707963267949)*(x12053.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12054=IKsin(j14);
IkReal x12055=(cj16*r20);
IkReal x12056=IKcos(j14);
IkReal x12057=(sj15*x12056);
IkReal x12058=(r21*sj16);
IkReal x12059=((1.0)*x12054);
IkReal x12060=(cj15*cj16*x12056);
IkReal x12061=(cj15*sj16*x12056);
IkReal x12062=(cj16*r00);
IkReal x12063=((1.0)*r01*sj16);
IkReal x12064=(cj16*r10);
IkReal x12065=(r11*sj16);
IkReal x12066=((1.0)*x12056);
IkReal x12067=((1.0)*sj15*x12054);
IkReal x12068=((1.0)*cj15*cj16*x12054);
IkReal x12069=((1.0)*cj15*sj16*x12054);
evalcond[0]=(((x12054*x12055))+((r21*x12060))+((r20*x12061))+(((-1.0)*x12058*x12059))+((r22*x12057)));
evalcond[1]=(((x12054*x12062))+((r02*x12057))+((r01*x12060))+(((-1.0)*x12054*x12063))+((r00*x12061)));
evalcond[2]=((1.0)+((r12*x12057))+(((-1.0)*x12059*x12065))+((r10*x12061))+((x12054*x12064))+((r11*x12060)));
evalcond[3]=((((-1.0)*r22*x12067))+(((-1.0)*x12058*x12066))+(((-1.0)*r21*x12068))+(((-1.0)*r20*x12069))+((x12055*x12056)));
evalcond[4]=((((-1.0)*x12065*x12066))+((x12056*x12064))+(((-1.0)*r10*x12069))+(((-1.0)*r12*x12067))+(((-1.0)*r11*x12068)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12067))+(((-1.0)*x12056*x12063))+(((-1.0)*r00*x12069))+(((-1.0)*r01*x12068))+((x12056*x12062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12070=((1.0)*cj15);
CheckValue<IkReal> x12071=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+(((-1.0)*r22*x12070))+((cj16*r21*sj15)))),-1);
if(!x12071.valid){
continue;
}
CheckValue<IkReal> x12072 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj16*x12070))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x12070)))),IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12072.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12071.value)))+(x12072.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12073=IKsin(j14);
IkReal x12074=(cj16*r20);
IkReal x12075=IKcos(j14);
IkReal x12076=(sj15*x12075);
IkReal x12077=(r21*sj16);
IkReal x12078=((1.0)*x12073);
IkReal x12079=(cj15*cj16*x12075);
IkReal x12080=(cj15*sj16*x12075);
IkReal x12081=(cj16*r00);
IkReal x12082=((1.0)*r01*sj16);
IkReal x12083=(cj16*r10);
IkReal x12084=(r11*sj16);
IkReal x12085=((1.0)*x12075);
IkReal x12086=((1.0)*sj15*x12073);
IkReal x12087=((1.0)*cj15*cj16*x12073);
IkReal x12088=((1.0)*cj15*sj16*x12073);
evalcond[0]=(((r20*x12080))+(((-1.0)*x12077*x12078))+((r21*x12079))+((x12073*x12074))+((r22*x12076)));
evalcond[1]=(((x12073*x12081))+((r00*x12080))+((r01*x12079))+((r02*x12076))+(((-1.0)*x12073*x12082)));
evalcond[2]=((1.0)+(((-1.0)*x12078*x12084))+((r10*x12080))+((x12073*x12083))+((r12*x12076))+((r11*x12079)));
evalcond[3]=((((-1.0)*x12077*x12085))+((x12074*x12075))+(((-1.0)*r21*x12087))+(((-1.0)*r20*x12088))+(((-1.0)*r22*x12086)));
evalcond[4]=((((-1.0)*r11*x12087))+(((-1.0)*x12084*x12085))+(((-1.0)*r12*x12086))+(((-1.0)*r10*x12088))+((x12075*x12083)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12086))+((x12075*x12081))+(((-1.0)*r00*x12088))+(((-1.0)*x12075*x12082))+(((-1.0)*r01*x12087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x12089=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x12089;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x12089);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x12090=((1.0)*cj16);
IkReal x12091=((((-1.0)*r21*sj15*x12090))+(((-1.0)*(1.0)*r20*sj15*sj16))+((cj15*r22)));
j14eval[0]=x12091;
j14eval[1]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs((((r11*sj16))+(((-1.0)*r10*x12090))))));
j14eval[2]=IKsign(x12091);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x12092=r11*r11;
IkReal x12093=((1.0)*x12092);
IkReal x12094=r12*r12;
IkReal x12095=(cj16*r10);
IkReal x12096=((2.0)*r11*sj16*x12095);
IkReal x12097=cj15*cj15;
IkReal x12098=cj16*cj16;
IkReal x12099=((2.0)*r12*sj15);
IkReal x12100=(cj15*cj16*r11);
IkReal x12101=(cj15*r10*sj16);
IkReal x12102=r10*r10;
IkReal x12103=((1.0)*x12102);
IkReal x12104=(x12097*x12098);
IkReal x12105=((((-1.0)*x12097*x12103))+(((-1.0)*x12093*x12104))+x12096+(((-1.0)*x12096*x12097))+(((-1.0)*x12093))+(((-1.0)*x12099*x12101))+((x12092*x12098))+((x12102*x12104))+(((-1.0)*x12099*x12100))+((x12094*x12097))+(((-1.0)*x12098*x12103))+(((-1.0)*x12094)));
j14eval[0]=x12105;
j14eval[1]=((IKabs((((r11*sj16))+(((-1.0)*x12095)))))+(IKabs((((r12*sj15))+x12101+x12100))));
j14eval[2]=IKsign(x12105);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12106=(cj15*cj16*r11);
IkReal x12107=(cj15*r10*sj16);
IkReal x12108=(cj16*r10);
IkReal x12109=r11*r11;
IkReal x12110=((1.0)*x12109);
IkReal x12111=r12*r12;
IkReal x12112=((2.0)*r11*sj16*x12108);
IkReal x12113=cj15*cj15;
IkReal x12114=cj16*cj16;
IkReal x12115=((2.0)*r12*sj15);
IkReal x12116=r10*r10;
IkReal x12117=((1.0)*x12116);
IkReal x12118=(x12113*x12114);
CheckValue<IkReal> x12119 = IKatan2WithCheck(IkReal((((r12*sj15))+x12107+x12106)),IkReal(((((-1.0)*x12108))+((r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12119.valid){
continue;
}
CheckValue<IkReal> x12120=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12114*x12117))+(((-1.0)*x12112*x12113))+(((-1.0)*x12106*x12115))+(((-1.0)*x12110*x12118))+x12112+((x12111*x12113))+((x12109*x12114))+(((-1.0)*x12110))+((x12116*x12118))+(((-1.0)*x12111))+(((-1.0)*x12113*x12117))+(((-1.0)*x12107*x12115)))),-1);
if(!x12120.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12119.value)+(((1.5707963267949)*(x12120.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12121=IKsin(j14);
IkReal x12122=(cj16*r20);
IkReal x12123=IKcos(j14);
IkReal x12124=(sj15*x12123);
IkReal x12125=(r21*sj16);
IkReal x12126=((1.0)*x12121);
IkReal x12127=(cj15*cj16*x12123);
IkReal x12128=(cj15*sj16*x12123);
IkReal x12129=(cj16*r10);
IkReal x12130=(r11*sj16);
IkReal x12131=(cj16*r00);
IkReal x12132=((1.0)*r01*sj16);
IkReal x12133=((1.0)*x12123);
IkReal x12134=((1.0)*sj15*x12121);
IkReal x12135=((1.0)*cj15*cj16*x12121);
IkReal x12136=((1.0)*cj15*sj16*x12121);
evalcond[0]=(((r21*x12127))+((r22*x12124))+((x12121*x12122))+((r20*x12128))+(((-1.0)*x12125*x12126)));
evalcond[1]=(((r10*x12128))+(((-1.0)*x12126*x12130))+((r11*x12127))+((r12*x12124))+((x12121*x12129)));
evalcond[2]=((-1.0)+((x12121*x12131))+(((-1.0)*x12121*x12132))+((r00*x12128))+((r02*x12124))+((r01*x12127)));
evalcond[3]=(((x12122*x12123))+(((-1.0)*x12125*x12133))+(((-1.0)*r21*x12135))+(((-1.0)*r22*x12134))+(((-1.0)*r20*x12136)));
evalcond[4]=(((x12123*x12131))+(((-1.0)*r00*x12136))+(((-1.0)*r02*x12134))+(((-1.0)*r01*x12135))+(((-1.0)*x12123*x12132)));
evalcond[5]=((-1.0)+(((-1.0)*x12130*x12133))+((x12123*x12129))+(((-1.0)*r12*x12134))+(((-1.0)*r10*x12136))+(((-1.0)*r11*x12135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12137=((1.0)*cj16);
CheckValue<IkReal> x12138 = IKatan2WithCheck(IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IkReal((((r11*sj16))+(((-1.0)*r10*x12137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12138.valid){
continue;
}
CheckValue<IkReal> x12139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj15*x12137))+(((-1.0)*(1.0)*r20*sj15*sj16))+((cj15*r22)))),-1);
if(!x12139.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12138.value)+(((1.5707963267949)*(x12139.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12140=IKsin(j14);
IkReal x12141=(cj16*r20);
IkReal x12142=IKcos(j14);
IkReal x12143=(sj15*x12142);
IkReal x12144=(r21*sj16);
IkReal x12145=((1.0)*x12140);
IkReal x12146=(cj15*cj16*x12142);
IkReal x12147=(cj15*sj16*x12142);
IkReal x12148=(cj16*r10);
IkReal x12149=(r11*sj16);
IkReal x12150=(cj16*r00);
IkReal x12151=((1.0)*r01*sj16);
IkReal x12152=((1.0)*x12142);
IkReal x12153=((1.0)*sj15*x12140);
IkReal x12154=((1.0)*cj15*cj16*x12140);
IkReal x12155=((1.0)*cj15*sj16*x12140);
evalcond[0]=((((-1.0)*x12144*x12145))+((x12140*x12141))+((r22*x12143))+((r20*x12147))+((r21*x12146)));
evalcond[1]=(((r12*x12143))+(((-1.0)*x12145*x12149))+((r11*x12146))+((x12140*x12148))+((r10*x12147)));
evalcond[2]=((-1.0)+((x12140*x12150))+((r02*x12143))+((r01*x12146))+((r00*x12147))+(((-1.0)*x12140*x12151)));
evalcond[3]=((((-1.0)*r22*x12153))+(((-1.0)*r21*x12154))+((x12141*x12142))+(((-1.0)*r20*x12155))+(((-1.0)*x12144*x12152)));
evalcond[4]=((((-1.0)*r00*x12155))+(((-1.0)*r02*x12153))+((x12142*x12150))+(((-1.0)*x12142*x12151))+(((-1.0)*r01*x12154)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x12154))+((x12142*x12148))+(((-1.0)*r12*x12153))+(((-1.0)*r10*x12155))+(((-1.0)*x12149*x12152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12156 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12156.valid){
continue;
}
CheckValue<IkReal> x12157=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x12157.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12156.value)+(((1.5707963267949)*(x12157.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12158=IKsin(j14);
IkReal x12159=(cj16*r20);
IkReal x12160=IKcos(j14);
IkReal x12161=(sj15*x12160);
IkReal x12162=(r21*sj16);
IkReal x12163=((1.0)*x12158);
IkReal x12164=(cj15*cj16*x12160);
IkReal x12165=(cj15*sj16*x12160);
IkReal x12166=(cj16*r10);
IkReal x12167=(r11*sj16);
IkReal x12168=(cj16*r00);
IkReal x12169=((1.0)*r01*sj16);
IkReal x12170=((1.0)*x12160);
IkReal x12171=((1.0)*sj15*x12158);
IkReal x12172=((1.0)*cj15*cj16*x12158);
IkReal x12173=((1.0)*cj15*sj16*x12158);
evalcond[0]=(((x12158*x12159))+((r22*x12161))+(((-1.0)*x12162*x12163))+((r20*x12165))+((r21*x12164)));
evalcond[1]=(((x12158*x12166))+(((-1.0)*x12163*x12167))+((r12*x12161))+((r11*x12164))+((r10*x12165)));
evalcond[2]=((-1.0)+(((-1.0)*x12158*x12169))+((x12158*x12168))+((r02*x12161))+((r01*x12164))+((r00*x12165)));
evalcond[3]=((((-1.0)*r21*x12172))+(((-1.0)*r22*x12171))+(((-1.0)*r20*x12173))+((x12159*x12160))+(((-1.0)*x12162*x12170)));
evalcond[4]=((((-1.0)*r02*x12171))+(((-1.0)*r01*x12172))+(((-1.0)*x12160*x12169))+((x12160*x12168))+(((-1.0)*r00*x12173)));
evalcond[5]=((-1.0)+((x12160*x12166))+(((-1.0)*r10*x12173))+(((-1.0)*r11*x12172))+(((-1.0)*x12167*x12170))+(((-1.0)*r12*x12171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x12174=((1.0)*cj15);
IkReal x12175=((((-1.0)*r12*x12174))+((cj16*r11*sj15))+((r10*sj15*sj16)));
j14eval[0]=x12175;
j14eval[1]=((IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))))+(IKabs(((((-1.0)*(1.0)*r22*sj15))+(((-1.0)*r20*sj16*x12174))+(((-1.0)*cj16*r21*x12174))))));
j14eval[2]=IKsign(x12175);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x12176=((1.0)*sj15);
IkReal x12177=((((-1.0)*cj16*r21*x12176))+(((-1.0)*r20*sj16*x12176))+((cj15*r22)));
IkReal x12178=((1.0)*r11);
j14eval[0]=x12177;
j14eval[1]=((IKabs(((((-1.0)*sj16*x12178))+((cj16*r10)))))+(IKabs(((((-1.0)*cj15*cj16*x12178))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*r12*x12176))))));
j14eval[2]=IKsign(x12177);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x12179=r11*r11;
IkReal x12180=r12*r12;
IkReal x12181=(cj16*r10);
IkReal x12182=((2.0)*r11*sj16*x12181);
IkReal x12183=cj15*cj15;
IkReal x12184=r10*r10;
IkReal x12185=(x12183*x12184);
IkReal x12186=cj16*cj16;
IkReal x12187=((2.0)*r12*sj15);
IkReal x12188=(cj15*cj16*r11);
IkReal x12189=(cj15*r10*sj16);
IkReal x12190=(x12179*x12186);
IkReal x12191=(((x12183*x12190))+x12179+((x12187*x12189))+((x12187*x12188))+(((-1.0)*x12185*x12186))+x12185+x12180+(((-1.0)*x12182))+(((-1.0)*x12190))+((x12182*x12183))+(((-1.0)*x12180*x12183))+((x12184*x12186)));
j14eval[0]=x12191;
j14eval[1]=IKsign(x12191);
j14eval[2]=((IKabs((((r12*sj15))+x12189+x12188)))+(IKabs((((r11*sj16))+(((-1.0)*x12181))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12192=(cj15*cj16*r11);
IkReal x12193=(cj15*r10*sj16);
IkReal x12194=(cj16*r10);
IkReal x12195=r11*r11;
IkReal x12196=r12*r12;
IkReal x12197=((2.0)*r11*sj16*x12194);
IkReal x12198=cj15*cj15;
IkReal x12199=r10*r10;
IkReal x12200=(x12198*x12199);
IkReal x12201=cj16*cj16;
IkReal x12202=((2.0)*r12*sj15);
IkReal x12203=(x12195*x12201);
CheckValue<IkReal> x12204=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12197))+(((-1.0)*x12203))+((x12198*x12203))+x12200+((x12199*x12201))+((x12192*x12202))+(((-1.0)*x12200*x12201))+x12195+x12196+(((-1.0)*x12196*x12198))+((x12193*x12202))+((x12197*x12198)))),-1);
if(!x12204.valid){
continue;
}
CheckValue<IkReal> x12205 = IKatan2WithCheck(IkReal((((r12*sj15))+x12192+x12193)),IkReal((((r11*sj16))+(((-1.0)*x12194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12205.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12204.value)))+(x12205.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12206=IKsin(j14);
IkReal x12207=(cj16*r20);
IkReal x12208=IKcos(j14);
IkReal x12209=(sj15*x12208);
IkReal x12210=(r21*sj16);
IkReal x12211=((1.0)*x12206);
IkReal x12212=(cj15*cj16*x12208);
IkReal x12213=(cj15*sj16*x12208);
IkReal x12214=(cj16*r10);
IkReal x12215=(r11*sj16);
IkReal x12216=(cj16*r00);
IkReal x12217=((1.0)*r01*sj16);
IkReal x12218=((1.0)*x12208);
IkReal x12219=((1.0)*sj15*x12206);
IkReal x12220=((1.0)*cj15*cj16*x12206);
IkReal x12221=((1.0)*cj15*sj16*x12206);
evalcond[0]=(((r20*x12213))+((r22*x12209))+((x12206*x12207))+(((-1.0)*x12210*x12211))+((r21*x12212)));
evalcond[1]=(((r12*x12209))+((x12206*x12214))+(((-1.0)*x12211*x12215))+((r11*x12212))+((r10*x12213)));
evalcond[2]=((1.0)+((r00*x12213))+((x12206*x12216))+(((-1.0)*x12206*x12217))+((r01*x12212))+((r02*x12209)));
evalcond[3]=((((-1.0)*x12210*x12218))+(((-1.0)*r22*x12219))+((x12207*x12208))+(((-1.0)*r20*x12221))+(((-1.0)*r21*x12220)));
evalcond[4]=((((-1.0)*r02*x12219))+(((-1.0)*x12208*x12217))+(((-1.0)*r01*x12220))+((x12208*x12216))+(((-1.0)*r00*x12221)));
evalcond[5]=((1.0)+(((-1.0)*r11*x12220))+(((-1.0)*r10*x12221))+(((-1.0)*r12*x12219))+(((-1.0)*x12215*x12218))+((x12208*x12214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12222=((1.0)*sj15);
IkReal x12223=((1.0)*r11);
CheckValue<IkReal> x12224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x12222))+((cj15*r22))+(((-1.0)*cj16*r21*x12222)))),-1);
if(!x12224.valid){
continue;
}
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12222))+(((-1.0)*cj15*cj16*x12223))+(((-1.0)*(1.0)*cj15*r10*sj16)))),IkReal(((((-1.0)*sj16*x12223))+((cj16*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12224.value)))+(x12225.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12226=IKsin(j14);
IkReal x12227=(cj16*r20);
IkReal x12228=IKcos(j14);
IkReal x12229=(sj15*x12228);
IkReal x12230=(r21*sj16);
IkReal x12231=((1.0)*x12226);
IkReal x12232=(cj15*cj16*x12228);
IkReal x12233=(cj15*sj16*x12228);
IkReal x12234=(cj16*r10);
IkReal x12235=(r11*sj16);
IkReal x12236=(cj16*r00);
IkReal x12237=((1.0)*r01*sj16);
IkReal x12238=((1.0)*x12228);
IkReal x12239=((1.0)*sj15*x12226);
IkReal x12240=((1.0)*cj15*cj16*x12226);
IkReal x12241=((1.0)*cj15*sj16*x12226);
evalcond[0]=(((x12226*x12227))+(((-1.0)*x12230*x12231))+((r22*x12229))+((r20*x12233))+((r21*x12232)));
evalcond[1]=((((-1.0)*x12231*x12235))+((r10*x12233))+((x12226*x12234))+((r11*x12232))+((r12*x12229)));
evalcond[2]=((1.0)+((x12226*x12236))+(((-1.0)*x12226*x12237))+((r01*x12232))+((r02*x12229))+((r00*x12233)));
evalcond[3]=((((-1.0)*x12230*x12238))+(((-1.0)*r20*x12241))+(((-1.0)*r22*x12239))+(((-1.0)*r21*x12240))+((x12227*x12228)));
evalcond[4]=(((x12228*x12236))+(((-1.0)*x12228*x12237))+(((-1.0)*r02*x12239))+(((-1.0)*r01*x12240))+(((-1.0)*r00*x12241)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12239))+((x12228*x12234))+(((-1.0)*r10*x12241))+(((-1.0)*r11*x12240))+(((-1.0)*x12235*x12238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12242=((1.0)*cj15);
CheckValue<IkReal> x12243 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*r21*x12242))+(((-1.0)*r20*sj16*x12242))+(((-1.0)*(1.0)*r22*sj15)))),IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12243.valid){
continue;
}
CheckValue<IkReal> x12244=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x12242)))),-1);
if(!x12244.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12243.value)+(((1.5707963267949)*(x12244.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12245=IKsin(j14);
IkReal x12246=(cj16*r20);
IkReal x12247=IKcos(j14);
IkReal x12248=(sj15*x12247);
IkReal x12249=(r21*sj16);
IkReal x12250=((1.0)*x12245);
IkReal x12251=(cj15*cj16*x12247);
IkReal x12252=(cj15*sj16*x12247);
IkReal x12253=(cj16*r10);
IkReal x12254=(r11*sj16);
IkReal x12255=(cj16*r00);
IkReal x12256=((1.0)*r01*sj16);
IkReal x12257=((1.0)*x12247);
IkReal x12258=((1.0)*sj15*x12245);
IkReal x12259=((1.0)*cj15*cj16*x12245);
IkReal x12260=((1.0)*cj15*sj16*x12245);
evalcond[0]=(((r21*x12251))+((x12245*x12246))+(((-1.0)*x12249*x12250))+((r20*x12252))+((r22*x12248)));
evalcond[1]=((((-1.0)*x12250*x12254))+((r11*x12251))+((x12245*x12253))+((r10*x12252))+((r12*x12248)));
evalcond[2]=((1.0)+((x12245*x12255))+((r01*x12251))+((r02*x12248))+((r00*x12252))+(((-1.0)*x12245*x12256)));
evalcond[3]=((((-1.0)*r20*x12260))+(((-1.0)*r21*x12259))+((x12246*x12247))+(((-1.0)*r22*x12258))+(((-1.0)*x12249*x12257)));
evalcond[4]=((((-1.0)*r00*x12260))+(((-1.0)*x12247*x12256))+(((-1.0)*r02*x12258))+((x12247*x12255))+(((-1.0)*r01*x12259)));
evalcond[5]=((1.0)+(((-1.0)*x12254*x12257))+(((-1.0)*r10*x12260))+((x12247*x12253))+(((-1.0)*r12*x12258))+(((-1.0)*r11*x12259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12261=(cj10*r21);
IkReal x12262=(cj10*r20);
IkReal x12263=(r11*r21);
IkReal x12264=((1.0)*x12263);
IkReal x12265=(r12*r22);
IkReal x12266=(cj16*sj16);
IkReal x12267=(r10*r21);
IkReal x12268=(r11*r20);
IkReal x12269=cj15*cj15;
IkReal x12270=cj16*cj16;
IkReal x12271=((1.0)*r10*r20);
IkReal x12272=((1.0)*cj15*sj16);
IkReal x12273=(x12269*x12270);
IkReal x12274=((1.0)*cj16*sj16*x12269);
CheckValue<IkReal> x12275 = IKatan2WithCheck(IkReal((((cj10*((r22*sj15))))+((cj15*sj16*x12262))+((cj15*cj16*x12261)))),IkReal(((((-1.0)*cj16*x12262))+((sj16*x12261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12275.valid){
continue;
}
CheckValue<IkReal> x12276=IKPowWithIntegerCheck(IKsign((((r10*r20*x12273))+(((-1.0)*cj15*cj16*r11*r22*sj15))+((x12266*x12268))+(((-1.0)*x12270*x12271))+(((-1.0)*x12264*x12273))+(((-1.0)*x12269*x12271))+(((-1.0)*x12267*x12274))+((x12263*x12270))+((x12266*x12267))+(((-1.0)*x12264))+(((-1.0)*x12265))+(((-1.0)*x12268*x12274))+(((-1.0)*r12*r20*sj15*x12272))+(((-1.0)*cj15*cj16*r12*r21*sj15))+((x12265*x12269))+(((-1.0)*r10*r22*sj15*x12272)))),-1);
if(!x12276.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12275.value)+(((1.5707963267949)*(x12276.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12277=IKsin(j14);
IkReal x12278=(cj16*r20);
IkReal x12279=IKcos(j14);
IkReal x12280=(sj15*x12279);
IkReal x12281=(r21*sj16);
IkReal x12282=((1.0)*x12277);
IkReal x12283=(cj15*cj16*x12279);
IkReal x12284=(cj15*sj16*x12279);
IkReal x12285=((1.0)*x12279);
IkReal x12286=((1.0)*sj15*x12277);
IkReal x12287=((1.0)*cj15*cj16*x12277);
IkReal x12288=((1.0)*cj15*sj16*x12277);
IkReal x12289=((-1.0)*(((1.0)*cj10)));
IkReal x12290=(cj16*r00);
IkReal x12291=((1.0)*r01*sj16);
IkReal x12292=(cj16*r10);
IkReal x12293=(r11*sj16);
evalcond[0]=(((x12277*x12278))+((r21*x12283))+(((-1.0)*x12281*x12282))+((r20*x12284))+((r22*x12280)));
evalcond[1]=((((-1.0)*r20*x12288))+(((-1.0)*x12281*x12285))+(((-1.0)*r21*x12287))+(((-1.0)*r22*x12286))+((x12278*x12279)));
evalcond[2]=(((r01*x12283))+((r00*x12284))+((r02*x12280))+((x12277*x12290))+(((-1.0)*x12277*x12291))+x12289);
evalcond[3]=(((r10*x12284))+((r11*x12283))+(((-1.0)*x12282*x12293))+((r12*x12280))+((x12277*x12292))+(((-1.0)*(1.0)*sj10)));
evalcond[4]=((((-1.0)*r02*x12286))+((x12279*x12290))+sj10+(((-1.0)*x12279*x12291))+(((-1.0)*r00*x12288))+(((-1.0)*r01*x12287)));
evalcond[5]=(((x12279*x12292))+(((-1.0)*r12*x12286))+(((-1.0)*r11*x12287))+(((-1.0)*x12285*x12293))+(((-1.0)*r10*x12288))+x12289);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12294=((1.0)*cj16);
IkReal x12295=(r21*sj10);
IkReal x12296=(r20*sj10);
CheckValue<IkReal> x12297 = IKatan2WithCheck(IkReal((((r22*sj10*sj15))+((cj15*cj16*x12295))+((cj15*sj16*x12296)))),IkReal(((((-1.0)*x12294*x12296))+((sj16*x12295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12297.valid){
continue;
}
CheckValue<IkReal> x12298=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x12294))+((cj15*r02)))),-1);
if(!x12298.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12297.value)+(((1.5707963267949)*(x12298.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12299=IKsin(j14);
IkReal x12300=(cj16*r20);
IkReal x12301=IKcos(j14);
IkReal x12302=(sj15*x12301);
IkReal x12303=(r21*sj16);
IkReal x12304=((1.0)*x12299);
IkReal x12305=(cj15*cj16*x12301);
IkReal x12306=(cj15*sj16*x12301);
IkReal x12307=((1.0)*x12301);
IkReal x12308=((1.0)*sj15*x12299);
IkReal x12309=((1.0)*cj15*cj16*x12299);
IkReal x12310=((1.0)*cj15*sj16*x12299);
IkReal x12311=((-1.0)*(((1.0)*cj10)));
IkReal x12312=(cj16*r00);
IkReal x12313=((1.0)*r01*sj16);
IkReal x12314=(cj16*r10);
IkReal x12315=(r11*sj16);
evalcond[0]=(((r20*x12306))+((x12299*x12300))+((r21*x12305))+((r22*x12302))+(((-1.0)*x12303*x12304)));
evalcond[1]=((((-1.0)*r20*x12310))+(((-1.0)*r21*x12309))+((x12300*x12301))+(((-1.0)*x12303*x12307))+(((-1.0)*r22*x12308)));
evalcond[2]=(x12311+((r02*x12302))+((x12299*x12312))+((r01*x12305))+((r00*x12306))+(((-1.0)*x12299*x12313)));
evalcond[3]=(((r11*x12305))+((x12299*x12314))+((r12*x12302))+((r10*x12306))+(((-1.0)*(1.0)*sj10))+(((-1.0)*x12304*x12315)));
evalcond[4]=((((-1.0)*r02*x12308))+(((-1.0)*r01*x12309))+sj10+(((-1.0)*x12301*x12313))+((x12301*x12312))+(((-1.0)*r00*x12310)));
evalcond[5]=(x12311+(((-1.0)*r10*x12310))+(((-1.0)*r12*x12308))+(((-1.0)*x12307*x12315))+((x12301*x12314))+(((-1.0)*r11*x12309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12316=(cj10*r21);
IkReal x12317=(cj10*r20);
CheckValue<IkReal> x12318 = IKatan2WithCheck(IkReal((((cj10*r22*sj15))+((cj15*sj16*x12317))+((cj15*cj16*x12316)))),IkReal(((((-1.0)*cj16*x12317))+((sj16*x12316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12318.valid){
continue;
}
CheckValue<IkReal> x12319=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x12319.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12318.value)+(((1.5707963267949)*(x12319.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12320=IKsin(j14);
IkReal x12321=(cj16*r20);
IkReal x12322=IKcos(j14);
IkReal x12323=(sj15*x12322);
IkReal x12324=(r21*sj16);
IkReal x12325=((1.0)*x12320);
IkReal x12326=(cj15*cj16*x12322);
IkReal x12327=(cj15*sj16*x12322);
IkReal x12328=((1.0)*x12322);
IkReal x12329=((1.0)*sj15*x12320);
IkReal x12330=((1.0)*cj15*cj16*x12320);
IkReal x12331=((1.0)*cj15*sj16*x12320);
IkReal x12332=((-1.0)*(((1.0)*cj10)));
IkReal x12333=(cj16*r00);
IkReal x12334=((1.0)*r01*sj16);
IkReal x12335=(cj16*r10);
IkReal x12336=(r11*sj16);
evalcond[0]=(((x12320*x12321))+(((-1.0)*x12324*x12325))+((r22*x12323))+((r21*x12326))+((r20*x12327)));
evalcond[1]=((((-1.0)*r21*x12330))+(((-1.0)*x12324*x12328))+((x12321*x12322))+(((-1.0)*r20*x12331))+(((-1.0)*r22*x12329)));
evalcond[2]=(((x12320*x12333))+((r00*x12327))+x12332+((r02*x12323))+(((-1.0)*x12320*x12334))+((r01*x12326)));
evalcond[3]=((((-1.0)*x12325*x12336))+((r11*x12326))+((r12*x12323))+(((-1.0)*(1.0)*sj10))+((r10*x12327))+((x12320*x12335)));
evalcond[4]=((((-1.0)*x12322*x12334))+(((-1.0)*r02*x12329))+sj10+((x12322*x12333))+(((-1.0)*r00*x12331))+(((-1.0)*r01*x12330)));
evalcond[5]=(((x12322*x12335))+x12332+(((-1.0)*r12*x12329))+(((-1.0)*r10*x12331))+(((-1.0)*r11*x12330))+(((-1.0)*x12328*x12336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12337=((1.0)*cj16*sj15);
IkReal x12338=((1.0)*sj15*sj16);
if( IKabs(((((-1.0)*r10*x12338))+((cj15*r12))+(((-1.0)*r11*x12337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x12338))+((cj15*r02))+(((-1.0)*r01*x12337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x12338))+((cj15*r12))+(((-1.0)*r11*x12337))))+IKsqr(((((-1.0)*r00*x12338))+((cj15*r02))+(((-1.0)*r01*x12337))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x12338))+((cj15*r12))+(((-1.0)*r11*x12337))), ((((-1.0)*r00*x12338))+((cj15*r02))+(((-1.0)*r01*x12337))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x12339=((1.0)*cj16*sj15);
IkReal x12340=((1.0)*sj15*sj16);
evalcond[0]=((((-1.0)*r10*x12340))+(((-1.0)*(1.0)*(IKsin(j10))))+(((-1.0)*r11*x12339))+((cj15*r12)));
evalcond[1]=((((-1.0)*r00*x12340))+(((-1.0)*(1.0)*(IKcos(j10))))+(((-1.0)*r01*x12339))+((cj15*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12341=((1.0)*cj15);
IkReal x12342=((((-1.0)*r02*x12341))+((r00*sj15*sj16))+((cj16*r01*sj15)));
j14eval[0]=x12342;
j14eval[1]=IKsign(x12342);
j14eval[2]=((IKabs(((((-1.0)*cj16*r11*x12341))+(((-1.0)*r10*sj16*x12341))+(((-1.0)*(1.0)*r12*sj15)))))+(IKabs((((cj16*r10))+(((-1.0)*(1.0)*r11*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12343=((1.0)*sj15);
IkReal x12344=((((-1.0)*r10*sj16*x12343))+(((-1.0)*cj16*r11*x12343))+((cj15*r12)));
IkReal x12345=((1.0)*r01);
j14eval[0]=x12344;
j14eval[1]=((IKabs(((((-1.0)*sj16*x12345))+((cj16*r00)))))+(IKabs(((((-1.0)*r02*x12343))+(((-1.0)*(1.0)*cj15*r00*sj16))+(((-1.0)*cj15*cj16*x12345))))));
j14eval[2]=IKsign(x12344);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12346=r11*r11;
IkReal x12347=((1.0)*x12346);
IkReal x12348=r12*r12;
IkReal x12349=((2.0)*cj16);
IkReal x12350=(r10*r11*sj16*x12349);
IkReal x12351=cj15*cj15;
IkReal x12352=cj16*cj16;
IkReal x12353=(cj15*r10);
IkReal x12354=r10*r10;
IkReal x12355=((1.0)*x12354);
IkReal x12356=(x12351*x12352);
IkReal x12357=(((x12348*x12351))+((x12346*x12352))+(((-1.0)*cj15*r11*r12*sj15*x12349))+(((-2.0)*r12*sj15*sj16*x12353))+(((-1.0)*x12352*x12355))+((x12354*x12356))+(((-1.0)*x12347*x12356))+(((-1.0)*x12350*x12351))+x12350+(((-1.0)*x12347))+(((-1.0)*x12348))+(((-1.0)*x12351*x12355)));
IkReal x12358=(cj10*cj16);
IkReal x12359=(cj10*sj16);
j14eval[0]=x12357;
j14eval[1]=((IKabs((((cj15*r11*x12358))+((x12353*x12359))+((cj10*((r12*sj15)))))))+(IKabs((((r10*x12358))+(((-1.0)*r11*x12359))))));
j14eval[2]=IKsign(x12357);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x12360=((1.0)*cj15);
IkReal x12361=(((r00*sj15*sj16))+(((-1.0)*r02*x12360))+((cj16*r01*sj15)));
j14eval[0]=x12361;
j14eval[1]=IKsign(x12361);
j14eval[2]=((IKabs(((((-1.0)*(1.0)*r12*sj15))+(((-1.0)*r10*sj16*x12360))+(((-1.0)*cj16*r11*x12360)))))+(IKabs((((cj16*r10))+(((-1.0)*(1.0)*r11*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x12362=((1.0)*sj15);
IkReal x12363=((((-1.0)*r10*sj16*x12362))+((cj15*r12))+(((-1.0)*cj16*r11*x12362)));
IkReal x12364=((1.0)*r01);
j14eval[0]=x12363;
j14eval[1]=((IKabs(((((-1.0)*r02*x12362))+(((-1.0)*cj15*cj16*x12364))+(((-1.0)*(1.0)*cj15*r00*sj16)))))+(IKabs(((((-1.0)*sj16*x12364))+((cj16*r00))))));
j14eval[2]=IKsign(x12363);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x12365=r01*r01;
IkReal x12366=((1.0)*x12365);
IkReal x12367=r02*r02;
IkReal x12368=(cj16*r00);
IkReal x12369=((2.0)*r01*sj16*x12368);
IkReal x12370=cj15*cj15;
IkReal x12371=cj16*cj16;
IkReal x12372=((2.0)*r02*sj15);
IkReal x12373=(cj15*cj16*r01);
IkReal x12374=(cj15*r00*sj16);
IkReal x12375=r00*r00;
IkReal x12376=((1.0)*x12375);
IkReal x12377=(x12370*x12371);
IkReal x12378=((((-1.0)*x12372*x12373))+((x12367*x12370))+x12369+(((-1.0)*x12366*x12377))+((x12375*x12377))+(((-1.0)*x12367))+(((-1.0)*x12369*x12370))+(((-1.0)*x12371*x12376))+(((-1.0)*x12372*x12374))+(((-1.0)*x12366))+((x12365*x12371))+(((-1.0)*x12370*x12376)));
j14eval[0]=x12378;
j14eval[1]=IKsign(x12378);
j14eval[2]=((IKabs((((r02*sj15))+x12373+x12374)))+(IKabs((((r01*sj16))+(((-1.0)*x12368))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12379=(cj15*cj16*r01);
IkReal x12380=(cj15*r00*sj16);
IkReal x12381=(cj16*r00);
IkReal x12382=r01*r01;
IkReal x12383=((1.0)*x12382);
IkReal x12384=r02*r02;
IkReal x12385=((2.0)*r01*sj16*x12381);
IkReal x12386=cj15*cj15;
IkReal x12387=cj16*cj16;
IkReal x12388=((2.0)*r02*sj15);
IkReal x12389=r00*r00;
IkReal x12390=((1.0)*x12389);
IkReal x12391=(x12386*x12387);
CheckValue<IkReal> x12392 = IKatan2WithCheck(IkReal((((r02*sj15))+x12379+x12380)),IkReal((((r01*sj16))+(((-1.0)*x12381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12392.valid){
continue;
}
CheckValue<IkReal> x12393=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12387*x12390))+(((-1.0)*x12379*x12388))+((x12389*x12391))+(((-1.0)*x12383*x12391))+x12385+(((-1.0)*x12386*x12390))+(((-1.0)*x12384))+(((-1.0)*x12385*x12386))+(((-1.0)*x12383))+(((-1.0)*x12380*x12388))+((x12384*x12386))+((x12382*x12387)))),-1);
if(!x12393.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12392.value)+(((1.5707963267949)*(x12393.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12394=IKsin(j14);
IkReal x12395=(cj16*r00);
IkReal x12396=IKcos(j14);
IkReal x12397=(sj15*x12396);
IkReal x12398=((1.0)*r01*sj16);
IkReal x12399=(cj15*cj16*x12396);
IkReal x12400=(cj15*sj16*x12396);
IkReal x12401=(cj16*r10);
IkReal x12402=(r11*sj16);
IkReal x12403=((1.0)*x12394);
IkReal x12404=(cj16*r20);
IkReal x12405=(r21*sj16);
IkReal x12406=((1.0)*x12396);
IkReal x12407=((1.0)*sj15*x12394);
IkReal x12408=((1.0)*cj15*cj16*x12394);
IkReal x12409=((1.0)*cj15*sj16*x12394);
evalcond[0]=(((r02*x12397))+((x12394*x12395))+((r01*x12399))+(((-1.0)*x12394*x12398))+((r00*x12400)));
evalcond[1]=((((-1.0)*x12402*x12403))+((r10*x12400))+((x12394*x12401))+((r11*x12399))+((r12*x12397)));
evalcond[2]=((1.0)+((r20*x12400))+((r21*x12399))+(((-1.0)*x12403*x12405))+((r22*x12397))+((x12394*x12404)));
evalcond[3]=((((-1.0)*r21*x12408))+(((-1.0)*r20*x12409))+((x12396*x12404))+(((-1.0)*r22*x12407))+(((-1.0)*x12405*x12406)));
evalcond[4]=(((x12396*x12401))+(((-1.0)*r12*x12407))+(((-1.0)*r11*x12408))+(((-1.0)*r10*x12409))+(((-1.0)*x12402*x12406)));
evalcond[5]=((-1.0)+(((-1.0)*x12396*x12398))+(((-1.0)*r02*x12407))+(((-1.0)*r00*x12409))+(((-1.0)*r01*x12408))+((x12395*x12396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12410=((1.0)*sj15);
IkReal x12411=((1.0)*r01);
CheckValue<IkReal> x12412=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r11*x12410))+(((-1.0)*r10*sj16*x12410))+((cj15*r12)))),-1);
if(!x12412.valid){
continue;
}
CheckValue<IkReal> x12413 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x12410))+(((-1.0)*(1.0)*cj15*r00*sj16))+(((-1.0)*cj15*cj16*x12411)))),IkReal(((((-1.0)*sj16*x12411))+((cj16*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12413.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12412.value)))+(x12413.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12414=IKsin(j14);
IkReal x12415=(cj16*r00);
IkReal x12416=IKcos(j14);
IkReal x12417=(sj15*x12416);
IkReal x12418=((1.0)*r01*sj16);
IkReal x12419=(cj15*cj16*x12416);
IkReal x12420=(cj15*sj16*x12416);
IkReal x12421=(cj16*r10);
IkReal x12422=(r11*sj16);
IkReal x12423=((1.0)*x12414);
IkReal x12424=(cj16*r20);
IkReal x12425=(r21*sj16);
IkReal x12426=((1.0)*x12416);
IkReal x12427=((1.0)*sj15*x12414);
IkReal x12428=((1.0)*cj15*cj16*x12414);
IkReal x12429=((1.0)*cj15*sj16*x12414);
evalcond[0]=((((-1.0)*x12414*x12418))+((r00*x12420))+((r01*x12419))+((x12414*x12415))+((r02*x12417)));
evalcond[1]=((((-1.0)*x12422*x12423))+((r11*x12419))+((x12414*x12421))+((r10*x12420))+((r12*x12417)));
evalcond[2]=((1.0)+((r20*x12420))+((r21*x12419))+((r22*x12417))+(((-1.0)*x12423*x12425))+((x12414*x12424)));
evalcond[3]=((((-1.0)*r20*x12429))+(((-1.0)*r21*x12428))+(((-1.0)*x12425*x12426))+(((-1.0)*r22*x12427))+((x12416*x12424)));
evalcond[4]=((((-1.0)*x12422*x12426))+(((-1.0)*r11*x12428))+(((-1.0)*r12*x12427))+((x12416*x12421))+(((-1.0)*r10*x12429)));
evalcond[5]=((-1.0)+((x12415*x12416))+(((-1.0)*r00*x12429))+(((-1.0)*r01*x12428))+(((-1.0)*r02*x12427))+(((-1.0)*x12416*x12418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12430=((1.0)*cj15);
CheckValue<IkReal> x12431 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj16*x12430))+(((-1.0)*cj16*r11*x12430))+(((-1.0)*(1.0)*r12*sj15)))),IkReal((((cj16*r10))+(((-1.0)*(1.0)*r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12431.valid){
continue;
}
CheckValue<IkReal> x12432=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*x12430))+((r00*sj15*sj16))+((cj16*r01*sj15)))),-1);
if(!x12432.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12431.value)+(((1.5707963267949)*(x12432.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12433=IKsin(j14);
IkReal x12434=(cj16*r00);
IkReal x12435=IKcos(j14);
IkReal x12436=(sj15*x12435);
IkReal x12437=((1.0)*r01*sj16);
IkReal x12438=(cj15*cj16*x12435);
IkReal x12439=(cj15*sj16*x12435);
IkReal x12440=(cj16*r10);
IkReal x12441=(r11*sj16);
IkReal x12442=((1.0)*x12433);
IkReal x12443=(cj16*r20);
IkReal x12444=(r21*sj16);
IkReal x12445=((1.0)*x12435);
IkReal x12446=((1.0)*sj15*x12433);
IkReal x12447=((1.0)*cj15*cj16*x12433);
IkReal x12448=((1.0)*cj15*sj16*x12433);
evalcond[0]=(((r01*x12438))+((r00*x12439))+((x12433*x12434))+((r02*x12436))+(((-1.0)*x12433*x12437)));
evalcond[1]=(((r10*x12439))+((x12433*x12440))+((r12*x12436))+((r11*x12438))+(((-1.0)*x12441*x12442)));
evalcond[2]=((1.0)+((r21*x12438))+((x12433*x12443))+((r22*x12436))+((r20*x12439))+(((-1.0)*x12442*x12444)));
evalcond[3]=((((-1.0)*x12444*x12445))+(((-1.0)*r20*x12448))+(((-1.0)*r22*x12446))+((x12435*x12443))+(((-1.0)*r21*x12447)));
evalcond[4]=((((-1.0)*r11*x12447))+(((-1.0)*r12*x12446))+(((-1.0)*r10*x12448))+(((-1.0)*x12441*x12445))+((x12435*x12440)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x12447))+(((-1.0)*x12435*x12437))+(((-1.0)*r02*x12446))+((x12434*x12435))+(((-1.0)*r00*x12448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x12449=((1.0)*cj15);
IkReal x12450=(((r00*sj15*sj16))+(((-1.0)*r02*x12449))+((cj16*r01*sj15)));
j14eval[0]=x12450;
j14eval[1]=IKsign(x12450);
j14eval[2]=((IKabs(((((-1.0)*cj16*r11*x12449))+(((-1.0)*(1.0)*r12*sj15))+(((-1.0)*r10*sj16*x12449)))))+(IKabs((((cj16*r10))+(((-1.0)*(1.0)*r11*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x12451=((1.0)*sj15);
IkReal x12452=(((cj15*r12))+(((-1.0)*r10*sj16*x12451))+(((-1.0)*cj16*r11*x12451)));
IkReal x12453=((1.0)*r01);
j14eval[0]=x12452;
j14eval[1]=((IKabs(((((-1.0)*r02*x12451))+(((-1.0)*cj15*cj16*x12453))+(((-1.0)*(1.0)*cj15*r00*sj16)))))+(IKabs((((cj16*r00))+(((-1.0)*sj16*x12453))))));
j14eval[2]=IKsign(x12452);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x12454=r01*r01;
IkReal x12455=((1.0)*x12454);
IkReal x12456=r02*r02;
IkReal x12457=((2.0)*r01);
IkReal x12458=(cj16*r00*sj16*x12457);
IkReal x12459=cj15*cj15;
IkReal x12460=cj16*cj16;
IkReal x12461=(cj15*r00*sj16);
IkReal x12462=r00*r00;
IkReal x12463=((1.0)*x12462);
IkReal x12464=(x12459*x12460);
IkReal x12465=((((-1.0)*x12458*x12459))+(((-1.0)*x12459*x12463))+((x12456*x12459))+(((-1.0)*x12455*x12464))+((x12462*x12464))+x12458+(((-1.0)*x12456))+(((-1.0)*cj15*cj16*r02*sj15*x12457))+(((-2.0)*r02*sj15*x12461))+(((-1.0)*x12455))+((x12454*x12460))+(((-1.0)*x12460*x12463)));
IkReal x12466=((1.0)*r01);
j14eval[0]=x12465;
j14eval[1]=((IKabs(((((-1.0)*sj16*x12466))+((cj16*r00)))))+(IKabs(((((-1.0)*cj15*cj16*x12466))+(((-1.0)*x12461))+(((-1.0)*r02*sj15))))));
j14eval[2]=IKsign(x12465);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12467=((1.0)*r01);
IkReal x12468=(cj15*r00*sj16);
IkReal x12469=r01*r01;
IkReal x12470=((1.0)*x12469);
IkReal x12471=r02*r02;
IkReal x12472=((2.0)*r01);
IkReal x12473=(cj16*r00*sj16*x12472);
IkReal x12474=cj15*cj15;
IkReal x12475=cj16*cj16;
IkReal x12476=r00*r00;
IkReal x12477=((1.0)*x12476);
IkReal x12478=(x12474*x12475);
CheckValue<IkReal> x12479=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12473*x12474))+((x12469*x12475))+(((-1.0)*cj15*cj16*r02*sj15*x12472))+(((-1.0)*x12475*x12477))+((x12471*x12474))+((x12476*x12478))+(((-1.0)*x12470))+(((-1.0)*x12474*x12477))+(((-1.0)*x12470*x12478))+x12473+(((-1.0)*x12471))+(((-2.0)*r02*sj15*x12468)))),-1);
if(!x12479.valid){
continue;
}
CheckValue<IkReal> x12480 = IKatan2WithCheck(IkReal(((((-1.0)*x12468))+(((-1.0)*cj15*cj16*x12467))+(((-1.0)*r02*sj15)))),IkReal(((((-1.0)*sj16*x12467))+((cj16*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12480.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12479.value)))+(x12480.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12481=IKsin(j14);
IkReal x12482=(cj16*r00);
IkReal x12483=IKcos(j14);
IkReal x12484=(sj15*x12483);
IkReal x12485=((1.0)*r01*sj16);
IkReal x12486=(cj15*cj16*x12483);
IkReal x12487=(cj15*sj16*x12483);
IkReal x12488=(cj16*r10);
IkReal x12489=(r11*sj16);
IkReal x12490=((1.0)*x12481);
IkReal x12491=(cj16*r20);
IkReal x12492=(r21*sj16);
IkReal x12493=((1.0)*x12483);
IkReal x12494=((1.0)*sj15*x12481);
IkReal x12495=((1.0)*cj15*cj16*x12481);
IkReal x12496=((1.0)*cj15*sj16*x12481);
evalcond[0]=(((r01*x12486))+(((-1.0)*x12481*x12485))+((r02*x12484))+((r00*x12487))+((x12481*x12482)));
evalcond[1]=(((r10*x12487))+((x12481*x12488))+((r11*x12486))+(((-1.0)*x12489*x12490))+((r12*x12484)));
evalcond[2]=((1.0)+((r20*x12487))+((r21*x12486))+((x12481*x12491))+(((-1.0)*x12490*x12492))+((r22*x12484)));
evalcond[3]=((((-1.0)*x12492*x12493))+(((-1.0)*r20*x12496))+(((-1.0)*r21*x12495))+((x12483*x12491))+(((-1.0)*r22*x12494)));
evalcond[4]=((((-1.0)*r12*x12494))+(((-1.0)*r10*x12496))+(((-1.0)*r11*x12495))+(((-1.0)*x12489*x12493))+((x12483*x12488)));
evalcond[5]=((1.0)+((x12482*x12483))+(((-1.0)*x12483*x12485))+(((-1.0)*r02*x12494))+(((-1.0)*r01*x12495))+(((-1.0)*r00*x12496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12497=((1.0)*sj15);
IkReal x12498=((1.0)*r01);
CheckValue<IkReal> x12499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj16*x12497))+((cj15*r12))+(((-1.0)*cj16*r11*x12497)))),-1);
if(!x12499.valid){
continue;
}
CheckValue<IkReal> x12500 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*cj16*x12498))+(((-1.0)*(1.0)*cj15*r00*sj16))+(((-1.0)*r02*x12497)))),IkReal((((cj16*r00))+(((-1.0)*sj16*x12498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12500.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12499.value)))+(x12500.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12501=IKsin(j14);
IkReal x12502=(cj16*r00);
IkReal x12503=IKcos(j14);
IkReal x12504=(sj15*x12503);
IkReal x12505=((1.0)*r01*sj16);
IkReal x12506=(cj15*cj16*x12503);
IkReal x12507=(cj15*sj16*x12503);
IkReal x12508=(cj16*r10);
IkReal x12509=(r11*sj16);
IkReal x12510=((1.0)*x12501);
IkReal x12511=(cj16*r20);
IkReal x12512=(r21*sj16);
IkReal x12513=((1.0)*x12503);
IkReal x12514=((1.0)*sj15*x12501);
IkReal x12515=((1.0)*cj15*cj16*x12501);
IkReal x12516=((1.0)*cj15*sj16*x12501);
evalcond[0]=(((x12501*x12502))+((r00*x12507))+(((-1.0)*x12501*x12505))+((r01*x12506))+((r02*x12504)));
evalcond[1]=(((r11*x12506))+((r12*x12504))+((x12501*x12508))+(((-1.0)*x12509*x12510))+((r10*x12507)));
evalcond[2]=((1.0)+((r20*x12507))+((r22*x12504))+(((-1.0)*x12510*x12512))+((x12501*x12511))+((r21*x12506)));
evalcond[3]=(((x12503*x12511))+(((-1.0)*r22*x12514))+(((-1.0)*r20*x12516))+(((-1.0)*x12512*x12513))+(((-1.0)*r21*x12515)));
evalcond[4]=((((-1.0)*r12*x12514))+(((-1.0)*r11*x12515))+((x12503*x12508))+(((-1.0)*r10*x12516))+(((-1.0)*x12509*x12513)));
evalcond[5]=((1.0)+((x12502*x12503))+(((-1.0)*x12503*x12505))+(((-1.0)*r02*x12514))+(((-1.0)*r00*x12516))+(((-1.0)*r01*x12515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12517=((1.0)*cj15);
CheckValue<IkReal> x12518 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*r11*x12517))+(((-1.0)*r10*sj16*x12517))+(((-1.0)*(1.0)*r12*sj15)))),IkReal((((cj16*r10))+(((-1.0)*(1.0)*r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12518.valid){
continue;
}
CheckValue<IkReal> x12519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*x12517))+((r00*sj15*sj16))+((cj16*r01*sj15)))),-1);
if(!x12519.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12518.value)+(((1.5707963267949)*(x12519.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12520=IKsin(j14);
IkReal x12521=(cj16*r00);
IkReal x12522=IKcos(j14);
IkReal x12523=(sj15*x12522);
IkReal x12524=((1.0)*r01*sj16);
IkReal x12525=(cj15*cj16*x12522);
IkReal x12526=(cj15*sj16*x12522);
IkReal x12527=(cj16*r10);
IkReal x12528=(r11*sj16);
IkReal x12529=((1.0)*x12520);
IkReal x12530=(cj16*r20);
IkReal x12531=(r21*sj16);
IkReal x12532=((1.0)*x12522);
IkReal x12533=((1.0)*sj15*x12520);
IkReal x12534=((1.0)*cj15*cj16*x12520);
IkReal x12535=((1.0)*cj15*sj16*x12520);
evalcond[0]=(((r01*x12525))+((r00*x12526))+((r02*x12523))+(((-1.0)*x12520*x12524))+((x12520*x12521)));
evalcond[1]=(((r11*x12525))+((r12*x12523))+(((-1.0)*x12528*x12529))+((r10*x12526))+((x12520*x12527)));
evalcond[2]=((1.0)+((r21*x12525))+((r20*x12526))+((r22*x12523))+(((-1.0)*x12529*x12531))+((x12520*x12530)));
evalcond[3]=((((-1.0)*r20*x12535))+(((-1.0)*x12531*x12532))+(((-1.0)*r21*x12534))+(((-1.0)*r22*x12533))+((x12522*x12530)));
evalcond[4]=((((-1.0)*r10*x12535))+(((-1.0)*x12528*x12532))+((x12522*x12527))+(((-1.0)*r11*x12534))+(((-1.0)*r12*x12533)));
evalcond[5]=((1.0)+(((-1.0)*r01*x12534))+(((-1.0)*r00*x12535))+((x12521*x12522))+(((-1.0)*r02*x12533))+(((-1.0)*x12522*x12524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12536=(cj15*r10);
IkReal x12537=((1.0)*cj10*sj16);
IkReal x12538=r11*r11;
IkReal x12539=((1.0)*x12538);
IkReal x12540=r12*r12;
IkReal x12541=((2.0)*cj16);
IkReal x12542=(r10*r11*sj16*x12541);
IkReal x12543=cj15*cj15;
IkReal x12544=cj16*cj16;
IkReal x12545=r10*r10;
IkReal x12546=((1.0)*x12545);
IkReal x12547=(x12543*x12544);
CheckValue<IkReal> x12548=IKPowWithIntegerCheck(IKsign((((x12545*x12547))+((x12540*x12543))+((x12538*x12544))+(((-1.0)*x12539*x12547))+(((-1.0)*cj15*r11*r12*sj15*x12541))+(((-1.0)*x12543*x12546))+x12542+(((-1.0)*x12544*x12546))+(((-1.0)*x12539))+(((-2.0)*r12*sj15*sj16*x12536))+(((-1.0)*x12542*x12543))+(((-1.0)*x12540)))),-1);
if(!x12548.valid){
continue;
}
CheckValue<IkReal> x12549 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*cj16*r11))+(((-1.0)*cj10*r12*sj15))+(((-1.0)*x12536*x12537)))),IkReal((((r10*((cj10*cj16))))+(((-1.0)*r11*x12537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12549.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12548.value)))+(x12549.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12550=IKsin(j14);
IkReal x12551=(cj16*r00);
IkReal x12552=IKcos(j14);
IkReal x12553=(sj15*x12552);
IkReal x12554=((1.0)*r01*sj16);
IkReal x12555=(cj15*cj16*x12552);
IkReal x12556=(cj15*sj16*x12552);
IkReal x12557=(cj16*r10);
IkReal x12558=(r11*sj16);
IkReal x12559=((1.0)*x12550);
IkReal x12560=(cj16*r20);
IkReal x12561=(r21*sj16);
IkReal x12562=((1.0)*x12552);
IkReal x12563=((1.0)*sj15*x12550);
IkReal x12564=((1.0)*cj15*cj16*x12550);
IkReal x12565=((1.0)*cj15*sj16*x12550);
evalcond[0]=(((x12550*x12551))+((r01*x12555))+((r00*x12556))+((r02*x12553))+(((-1.0)*x12550*x12554)));
evalcond[1]=(((r11*x12555))+((x12550*x12557))+((r12*x12553))+(((-1.0)*x12558*x12559))+((r10*x12556)));
evalcond[2]=((1.0)+((r21*x12555))+(((-1.0)*x12559*x12561))+((r22*x12553))+((r20*x12556))+((x12550*x12560)));
evalcond[3]=((((-1.0)*r22*x12563))+(((-1.0)*x12561*x12562))+(((-1.0)*r21*x12564))+(((-1.0)*r20*x12565))+((x12552*x12560)));
evalcond[4]=((((-1.0)*r11*x12564))+((x12552*x12557))+(((-1.0)*r12*x12563))+(((-1.0)*x12558*x12562))+cj10+(((-1.0)*r10*x12565)));
evalcond[5]=((((-1.0)*r02*x12563))+(((-1.0)*x12552*x12554))+((x12551*x12552))+(((-1.0)*r01*x12564))+(((-1.0)*(1.0)*sj10))+(((-1.0)*r00*x12565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12566=((1.0)*sj15);
IkReal x12567=((1.0)*r01);
CheckValue<IkReal> x12568 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*cj16*x12567))+(((-1.0)*r02*x12566))+(((-1.0)*(1.0)*cj15*r00*sj16)))),IkReal(((((-1.0)*sj16*x12567))+((cj16*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12568.valid){
continue;
}
CheckValue<IkReal> x12569=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r11*x12566))+((cj15*r12))+(((-1.0)*r10*sj16*x12566)))),-1);
if(!x12569.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12568.value)+(((1.5707963267949)*(x12569.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12570=IKsin(j14);
IkReal x12571=(cj16*r00);
IkReal x12572=IKcos(j14);
IkReal x12573=(sj15*x12572);
IkReal x12574=((1.0)*r01*sj16);
IkReal x12575=(cj15*cj16*x12572);
IkReal x12576=(cj15*sj16*x12572);
IkReal x12577=(cj16*r10);
IkReal x12578=(r11*sj16);
IkReal x12579=((1.0)*x12570);
IkReal x12580=(cj16*r20);
IkReal x12581=(r21*sj16);
IkReal x12582=((1.0)*x12572);
IkReal x12583=((1.0)*sj15*x12570);
IkReal x12584=((1.0)*cj15*cj16*x12570);
IkReal x12585=((1.0)*cj15*sj16*x12570);
evalcond[0]=(((r02*x12573))+((r01*x12575))+((x12570*x12571))+((r00*x12576))+(((-1.0)*x12570*x12574)));
evalcond[1]=(((r10*x12576))+((r11*x12575))+((x12570*x12577))+((r12*x12573))+(((-1.0)*x12578*x12579)));
evalcond[2]=((1.0)+((x12570*x12580))+((r21*x12575))+(((-1.0)*x12579*x12581))+((r20*x12576))+((r22*x12573)));
evalcond[3]=((((-1.0)*r21*x12584))+(((-1.0)*x12581*x12582))+((x12572*x12580))+(((-1.0)*r20*x12585))+(((-1.0)*r22*x12583)));
evalcond[4]=((((-1.0)*r12*x12583))+((x12572*x12577))+(((-1.0)*r10*x12585))+cj10+(((-1.0)*r11*x12584))+(((-1.0)*x12578*x12582)));
evalcond[5]=(((x12571*x12572))+(((-1.0)*r00*x12585))+(((-1.0)*x12572*x12574))+(((-1.0)*r01*x12584))+(((-1.0)*r02*x12583))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12586=((1.0)*cj15);
CheckValue<IkReal> x12587=IKPowWithIntegerCheck(IKsign((((r00*sj15*sj16))+(((-1.0)*r02*x12586))+((cj16*r01*sj15)))),-1);
if(!x12587.valid){
continue;
}
CheckValue<IkReal> x12588 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj16*x12586))+(((-1.0)*cj16*r11*x12586))+(((-1.0)*(1.0)*r12*sj15)))),IkReal((((cj16*r10))+(((-1.0)*(1.0)*r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12588.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12587.value)))+(x12588.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12589=IKsin(j14);
IkReal x12590=(cj16*r00);
IkReal x12591=IKcos(j14);
IkReal x12592=(sj15*x12591);
IkReal x12593=((1.0)*r01*sj16);
IkReal x12594=(cj15*cj16*x12591);
IkReal x12595=(cj15*sj16*x12591);
IkReal x12596=(cj16*r10);
IkReal x12597=(r11*sj16);
IkReal x12598=((1.0)*x12589);
IkReal x12599=(cj16*r20);
IkReal x12600=(r21*sj16);
IkReal x12601=((1.0)*x12591);
IkReal x12602=((1.0)*sj15*x12589);
IkReal x12603=((1.0)*cj15*cj16*x12589);
IkReal x12604=((1.0)*cj15*sj16*x12589);
evalcond[0]=(((r00*x12595))+((r01*x12594))+((x12589*x12590))+(((-1.0)*x12589*x12593))+((r02*x12592)));
evalcond[1]=(((r12*x12592))+((x12589*x12596))+(((-1.0)*x12597*x12598))+((r10*x12595))+((r11*x12594)));
evalcond[2]=((1.0)+(((-1.0)*x12598*x12600))+((r22*x12592))+((r20*x12595))+((x12589*x12599))+((r21*x12594)));
evalcond[3]=(((x12591*x12599))+(((-1.0)*r20*x12604))+(((-1.0)*r22*x12602))+(((-1.0)*x12600*x12601))+(((-1.0)*r21*x12603)));
evalcond[4]=((((-1.0)*r11*x12603))+cj10+((x12591*x12596))+(((-1.0)*r12*x12602))+(((-1.0)*r10*x12604))+(((-1.0)*x12597*x12601)));
evalcond[5]=((((-1.0)*x12591*x12593))+((x12590*x12591))+(((-1.0)*r01*x12603))+(((-1.0)*r02*x12602))+(((-1.0)*(1.0)*sj10))+(((-1.0)*r00*x12604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x12605=((1.26697583102024)*cj15);
IkReal x12606=((0.0338501117053686)*sj15);
IkReal x12607=((0.0338501117053686)*cj15*cj16);
IkReal x12608=((0.0338501117053686)*cj15*sj16);
IkReal x12609=((1.26697583102024)*cj16*sj15);
IkReal x12610=((1.26697583102024)*sj15*sj16);
if( IKabs((((r12*x12605))+(((-1.0)*(3.38501117053686)*py))+((r12*x12606))+(((-1.0)*r11*x12609))+((r11*x12607))+((r10*x12608))+(((-1.0)*r10*x12610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(3.38501117053686)*px))+((r02*x12605))+((r00*x12608))+((r01*x12607))+((r02*x12606))+(((-1.0)*r01*x12609))+(((-1.0)*r00*x12610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x12605))+(((-1.0)*(3.38501117053686)*py))+((r12*x12606))+(((-1.0)*r11*x12609))+((r11*x12607))+((r10*x12608))+(((-1.0)*r10*x12610))))+IKsqr(((((-1.0)*(3.38501117053686)*px))+((r02*x12605))+((r00*x12608))+((r01*x12607))+((r02*x12606))+(((-1.0)*r01*x12609))+(((-1.0)*r00*x12610))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r12*x12605))+(((-1.0)*(3.38501117053686)*py))+((r12*x12606))+(((-1.0)*r11*x12609))+((r11*x12607))+((r10*x12608))+(((-1.0)*r10*x12610))), ((((-1.0)*(3.38501117053686)*px))+((r02*x12605))+((r00*x12608))+((r01*x12607))+((r02*x12606))+(((-1.0)*r01*x12609))+(((-1.0)*r00*x12610))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x12611=((0.37429)*cj15);
IkReal x12612=((0.01)*sj15);
IkReal x12613=((0.01)*cj15*cj16);
IkReal x12614=((0.01)*cj15*sj16);
IkReal x12615=((0.37429)*cj16*sj15);
IkReal x12616=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*(0.29542)*(IKcos(j10))))+(((-1.0)*r01*x12615))+((r02*x12611))+((r01*x12613))+((r00*x12614))+((r02*x12612))+(((-1.0)*r00*x12616)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r12*x12612))+(((-1.0)*(0.29542)*(IKsin(j10))))+((r10*x12614))+(((-1.0)*r10*x12616))+(((-1.0)*r11*x12615))+((r12*x12611))+((r11*x12613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12617=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x12618=(cj10*cj16);
IkReal x12619=(cj10*sj16);
j14eval[0]=x12617;
j14eval[1]=((IKabs(((((-1.0)*r21*x12619))+((r20*x12618)))))+(IKabs((((cj15*r20*x12619))+((cj10*r22*sj15))+((cj15*r21*x12618))))));
j14eval[2]=IKsign(x12617);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12620=((1.0)*sj15);
IkReal x12621=((((-1.0)*cj16*r01*x12620))+((cj15*r02))+(((-1.0)*r00*sj16*x12620)));
IkReal x12622=(cj16*sj10);
IkReal x12623=(sj10*sj16);
j14eval[0]=x12621;
j14eval[1]=IKsign(x12621);
j14eval[2]=((IKabs((((r20*x12622))+(((-1.0)*r21*x12623)))))+(IKabs((((cj15*r20*x12623))+((r22*sj10*sj15))+((cj15*r21*x12622))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12624=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x12624;
j14eval[1]=IKsign(x12624);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x12625=((1.0)*cj15);
IkReal x12626=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x12625)));
j14eval[0]=x12626;
j14eval[1]=((IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))))+(IKabs(((((-1.0)*r20*sj16*x12625))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*cj16*r21*x12625))))));
j14eval[2]=IKsign(x12626);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x12627=((1.0)*sj15);
IkReal x12628=((((-1.0)*cj16*r21*x12627))+((cj15*r22))+(((-1.0)*r20*sj16*x12627)));
IkReal x12629=((1.0)*r11);
j14eval[0]=x12628;
j14eval[1]=((IKabs(((((-1.0)*r12*x12627))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*cj15*cj16*x12629)))))+(IKabs(((((-1.0)*sj16*x12629))+((cj16*r10))))));
j14eval[2]=IKsign(x12628);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x12630=r11*r11;
IkReal x12631=r12*r12;
IkReal x12632=(cj16*r10);
IkReal x12633=((2.0)*r11*sj16*x12632);
IkReal x12634=cj15*cj15;
IkReal x12635=r10*r10;
IkReal x12636=(x12634*x12635);
IkReal x12637=cj16*cj16;
IkReal x12638=((2.0)*r12*sj15);
IkReal x12639=(cj15*cj16*r11);
IkReal x12640=(cj15*r10*sj16);
IkReal x12641=(x12630*x12637);
IkReal x12642=((((-1.0)*x12636*x12637))+((x12633*x12634))+(((-1.0)*x12633))+((x12638*x12639))+((x12638*x12640))+(((-1.0)*x12631*x12634))+((x12635*x12637))+x12636+x12631+x12630+((x12634*x12641))+(((-1.0)*x12641)));
j14eval[0]=x12642;
j14eval[1]=IKsign(x12642);
j14eval[2]=((IKabs(((((-1.0)*x12632))+((r11*sj16)))))+(IKabs((x12640+((r12*sj15))+x12639))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12643=(cj15*cj16*r11);
IkReal x12644=(cj15*r10*sj16);
IkReal x12645=(cj16*r10);
IkReal x12646=r11*r11;
IkReal x12647=r12*r12;
IkReal x12648=((2.0)*r11*sj16*x12645);
IkReal x12649=cj15*cj15;
IkReal x12650=r10*r10;
IkReal x12651=(x12649*x12650);
IkReal x12652=cj16*cj16;
IkReal x12653=((2.0)*r12*sj15);
IkReal x12654=(x12646*x12652);
CheckValue<IkReal> x12655=IKPowWithIntegerCheck(IKsign((x12646+x12647+((x12649*x12654))+((x12650*x12652))+(((-1.0)*x12647*x12649))+((x12644*x12653))+(((-1.0)*x12651*x12652))+x12651+(((-1.0)*x12648))+((x12648*x12649))+(((-1.0)*x12654))+((x12643*x12653)))),-1);
if(!x12655.valid){
continue;
}
CheckValue<IkReal> x12656 = IKatan2WithCheck(IkReal((x12643+x12644+((r12*sj15)))),IkReal((((r11*sj16))+(((-1.0)*x12645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12656.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12655.value)))+(x12656.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12657=IKsin(j14);
IkReal x12658=(cj16*r20);
IkReal x12659=IKcos(j14);
IkReal x12660=(sj15*x12659);
IkReal x12661=(r21*sj16);
IkReal x12662=((1.0)*x12657);
IkReal x12663=(cj15*cj16*x12659);
IkReal x12664=(cj15*sj16*x12659);
IkReal x12665=(cj16*r10);
IkReal x12666=(r11*sj16);
IkReal x12667=(cj16*r00);
IkReal x12668=((1.0)*r01*sj16);
IkReal x12669=((1.0)*x12659);
IkReal x12670=((1.0)*sj15*x12657);
IkReal x12671=((1.0)*cj15*cj16*x12657);
IkReal x12672=((1.0)*cj15*sj16*x12657);
evalcond[0]=((((-1.0)*x12661*x12662))+((r21*x12663))+((r20*x12664))+((r22*x12660))+((x12657*x12658)));
evalcond[1]=(((r12*x12660))+((r10*x12664))+((x12657*x12665))+(((-1.0)*x12662*x12666))+((r11*x12663)));
evalcond[2]=((1.0)+((r00*x12664))+((r01*x12663))+(((-1.0)*x12657*x12668))+((r02*x12660))+((x12657*x12667)));
evalcond[3]=((((-1.0)*r22*x12670))+((x12658*x12659))+(((-1.0)*x12661*x12669))+(((-1.0)*r21*x12671))+(((-1.0)*r20*x12672)));
evalcond[4]=((((-1.0)*x12659*x12668))+(((-1.0)*r00*x12672))+(((-1.0)*r02*x12670))+(((-1.0)*r01*x12671))+((x12659*x12667)));
evalcond[5]=((1.0)+((x12659*x12665))+(((-1.0)*r12*x12670))+(((-1.0)*r10*x12672))+(((-1.0)*r11*x12671))+(((-1.0)*x12666*x12669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12673=((1.0)*sj15);
IkReal x12674=((1.0)*r11);
CheckValue<IkReal> x12675 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*r12*x12673))+(((-1.0)*cj15*cj16*x12674)))),IkReal((((cj16*r10))+(((-1.0)*sj16*x12674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12675.valid){
continue;
}
CheckValue<IkReal> x12676=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r21*x12673))+((cj15*r22))+(((-1.0)*r20*sj16*x12673)))),-1);
if(!x12676.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12675.value)+(((1.5707963267949)*(x12676.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12677=IKsin(j14);
IkReal x12678=(cj16*r20);
IkReal x12679=IKcos(j14);
IkReal x12680=(sj15*x12679);
IkReal x12681=(r21*sj16);
IkReal x12682=((1.0)*x12677);
IkReal x12683=(cj15*cj16*x12679);
IkReal x12684=(cj15*sj16*x12679);
IkReal x12685=(cj16*r10);
IkReal x12686=(r11*sj16);
IkReal x12687=(cj16*r00);
IkReal x12688=((1.0)*r01*sj16);
IkReal x12689=((1.0)*x12679);
IkReal x12690=((1.0)*sj15*x12677);
IkReal x12691=((1.0)*cj15*cj16*x12677);
IkReal x12692=((1.0)*cj15*sj16*x12677);
evalcond[0]=(((r21*x12683))+((r20*x12684))+(((-1.0)*x12681*x12682))+((x12677*x12678))+((r22*x12680)));
evalcond[1]=(((r10*x12684))+((x12677*x12685))+(((-1.0)*x12682*x12686))+((r11*x12683))+((r12*x12680)));
evalcond[2]=((1.0)+((r00*x12684))+((r02*x12680))+((x12677*x12687))+(((-1.0)*x12677*x12688))+((r01*x12683)));
evalcond[3]=((((-1.0)*x12681*x12689))+(((-1.0)*r21*x12691))+((x12678*x12679))+(((-1.0)*r20*x12692))+(((-1.0)*r22*x12690)));
evalcond[4]=((((-1.0)*x12679*x12688))+(((-1.0)*r01*x12691))+((x12679*x12687))+(((-1.0)*r02*x12690))+(((-1.0)*r00*x12692)));
evalcond[5]=((1.0)+(((-1.0)*x12686*x12689))+(((-1.0)*r11*x12691))+(((-1.0)*r12*x12690))+(((-1.0)*r10*x12692))+((x12679*x12685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12693=((1.0)*cj15);
CheckValue<IkReal> x12694 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj16*x12693))+(((-1.0)*cj16*r21*x12693))+(((-1.0)*(1.0)*r22*sj15)))),IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12694.valid){
continue;
}
CheckValue<IkReal> x12695=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x12693))+((cj16*r11*sj15))+((r10*sj15*sj16)))),-1);
if(!x12695.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12694.value)+(((1.5707963267949)*(x12695.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12696=IKsin(j14);
IkReal x12697=(cj16*r20);
IkReal x12698=IKcos(j14);
IkReal x12699=(sj15*x12698);
IkReal x12700=(r21*sj16);
IkReal x12701=((1.0)*x12696);
IkReal x12702=(cj15*cj16*x12698);
IkReal x12703=(cj15*sj16*x12698);
IkReal x12704=(cj16*r10);
IkReal x12705=(r11*sj16);
IkReal x12706=(cj16*r00);
IkReal x12707=((1.0)*r01*sj16);
IkReal x12708=((1.0)*x12698);
IkReal x12709=((1.0)*sj15*x12696);
IkReal x12710=((1.0)*cj15*cj16*x12696);
IkReal x12711=((1.0)*cj15*sj16*x12696);
evalcond[0]=(((r20*x12703))+((r21*x12702))+(((-1.0)*x12700*x12701))+((x12696*x12697))+((r22*x12699)));
evalcond[1]=((((-1.0)*x12701*x12705))+((x12696*x12704))+((r10*x12703))+((r12*x12699))+((r11*x12702)));
evalcond[2]=((1.0)+(((-1.0)*x12696*x12707))+((r01*x12702))+((r02*x12699))+((r00*x12703))+((x12696*x12706)));
evalcond[3]=((((-1.0)*x12700*x12708))+(((-1.0)*r20*x12711))+(((-1.0)*r21*x12710))+(((-1.0)*r22*x12709))+((x12697*x12698)));
evalcond[4]=((((-1.0)*r02*x12709))+((x12698*x12706))+(((-1.0)*x12698*x12707))+(((-1.0)*r00*x12711))+(((-1.0)*r01*x12710)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12711))+(((-1.0)*r11*x12710))+((x12698*x12704))+(((-1.0)*x12705*x12708))+(((-1.0)*r12*x12709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x12712=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x12712;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x12712);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x12713=((1.0)*cj16);
IkReal x12714=((((-1.0)*(1.0)*r20*sj15*sj16))+(((-1.0)*r21*sj15*x12713))+((cj15*r22)));
j14eval[0]=x12714;
j14eval[1]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs((((r11*sj16))+(((-1.0)*r10*x12713))))));
j14eval[2]=IKsign(x12714);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x12715=r11*r11;
IkReal x12716=((1.0)*x12715);
IkReal x12717=r12*r12;
IkReal x12718=(cj16*r10);
IkReal x12719=((2.0)*r11*sj16*x12718);
IkReal x12720=cj15*cj15;
IkReal x12721=cj16*cj16;
IkReal x12722=((2.0)*r12*sj15);
IkReal x12723=(cj15*cj16*r11);
IkReal x12724=(cj15*r10*sj16);
IkReal x12725=r10*r10;
IkReal x12726=((1.0)*x12725);
IkReal x12727=(x12720*x12721);
IkReal x12728=((((-1.0)*x12721*x12726))+(((-1.0)*x12717))+(((-1.0)*x12720*x12726))+((x12717*x12720))+((x12715*x12721))+(((-1.0)*x12722*x12723))+x12719+(((-1.0)*x12719*x12720))+(((-1.0)*x12716*x12727))+(((-1.0)*x12716))+(((-1.0)*x12722*x12724))+((x12725*x12727)));
j14eval[0]=x12728;
j14eval[1]=((IKabs((((r12*sj15))+x12723+x12724)))+(IKabs(((((-1.0)*x12718))+((r11*sj16))))));
j14eval[2]=IKsign(x12728);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12729=(cj15*cj16*r11);
IkReal x12730=(cj15*r10*sj16);
IkReal x12731=(cj16*r10);
IkReal x12732=r11*r11;
IkReal x12733=((1.0)*x12732);
IkReal x12734=r12*r12;
IkReal x12735=((2.0)*r11*sj16*x12731);
IkReal x12736=cj15*cj15;
IkReal x12737=cj16*cj16;
IkReal x12738=((2.0)*r12*sj15);
IkReal x12739=r10*r10;
IkReal x12740=((1.0)*x12739);
IkReal x12741=(x12736*x12737);
CheckValue<IkReal> x12742=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12734))+(((-1.0)*x12736*x12740))+(((-1.0)*x12735*x12736))+((x12734*x12736))+(((-1.0)*x12733*x12741))+x12735+(((-1.0)*x12730*x12738))+(((-1.0)*x12729*x12738))+(((-1.0)*x12733))+((x12739*x12741))+(((-1.0)*x12737*x12740))+((x12732*x12737)))),-1);
if(!x12742.valid){
continue;
}
CheckValue<IkReal> x12743 = IKatan2WithCheck(IkReal((((r12*sj15))+x12730+x12729)),IkReal(((((-1.0)*x12731))+((r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12743.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12742.value)))+(x12743.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12744=IKsin(j14);
IkReal x12745=(cj16*r20);
IkReal x12746=IKcos(j14);
IkReal x12747=(sj15*x12746);
IkReal x12748=(r21*sj16);
IkReal x12749=((1.0)*x12744);
IkReal x12750=(cj15*cj16*x12746);
IkReal x12751=(cj15*sj16*x12746);
IkReal x12752=(cj16*r10);
IkReal x12753=(r11*sj16);
IkReal x12754=(cj16*r00);
IkReal x12755=((1.0)*r01*sj16);
IkReal x12756=((1.0)*x12746);
IkReal x12757=((1.0)*sj15*x12744);
IkReal x12758=((1.0)*cj15*cj16*x12744);
IkReal x12759=((1.0)*cj15*sj16*x12744);
evalcond[0]=(((x12744*x12745))+((r20*x12751))+((r22*x12747))+(((-1.0)*x12748*x12749))+((r21*x12750)));
evalcond[1]=(((r11*x12750))+((x12744*x12752))+((r12*x12747))+((r10*x12751))+(((-1.0)*x12749*x12753)));
evalcond[2]=((-1.0)+(((-1.0)*x12744*x12755))+((r02*x12747))+((x12744*x12754))+((r00*x12751))+((r01*x12750)));
evalcond[3]=((((-1.0)*r21*x12758))+(((-1.0)*r20*x12759))+((x12745*x12746))+(((-1.0)*x12748*x12756))+(((-1.0)*r22*x12757)));
evalcond[4]=((((-1.0)*r00*x12759))+(((-1.0)*x12746*x12755))+((x12746*x12754))+(((-1.0)*r01*x12758))+(((-1.0)*r02*x12757)));
evalcond[5]=((-1.0)+((x12746*x12752))+(((-1.0)*x12753*x12756))+(((-1.0)*r11*x12758))+(((-1.0)*r12*x12757))+(((-1.0)*r10*x12759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12760=((1.0)*cj16);
CheckValue<IkReal> x12761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj15*x12760))+(((-1.0)*(1.0)*r20*sj15*sj16))+((cj15*r22)))),-1);
if(!x12761.valid){
continue;
}
CheckValue<IkReal> x12762 = IKatan2WithCheck(IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IkReal((((r11*sj16))+(((-1.0)*r10*x12760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12762.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12761.value)))+(x12762.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12763=IKsin(j14);
IkReal x12764=(cj16*r20);
IkReal x12765=IKcos(j14);
IkReal x12766=(sj15*x12765);
IkReal x12767=(r21*sj16);
IkReal x12768=((1.0)*x12763);
IkReal x12769=(cj15*cj16*x12765);
IkReal x12770=(cj15*sj16*x12765);
IkReal x12771=(cj16*r10);
IkReal x12772=(r11*sj16);
IkReal x12773=(cj16*r00);
IkReal x12774=((1.0)*r01*sj16);
IkReal x12775=((1.0)*x12765);
IkReal x12776=((1.0)*sj15*x12763);
IkReal x12777=((1.0)*cj15*cj16*x12763);
IkReal x12778=((1.0)*cj15*sj16*x12763);
evalcond[0]=(((r21*x12769))+((r22*x12766))+((r20*x12770))+((x12763*x12764))+(((-1.0)*x12767*x12768)));
evalcond[1]=(((r12*x12766))+((r10*x12770))+((r11*x12769))+((x12763*x12771))+(((-1.0)*x12768*x12772)));
evalcond[2]=((-1.0)+((r01*x12769))+((r02*x12766))+((x12763*x12773))+((r00*x12770))+(((-1.0)*x12763*x12774)));
evalcond[3]=(((x12764*x12765))+(((-1.0)*r20*x12778))+(((-1.0)*x12767*x12775))+(((-1.0)*r21*x12777))+(((-1.0)*r22*x12776)));
evalcond[4]=((((-1.0)*r01*x12777))+(((-1.0)*r00*x12778))+((x12765*x12773))+(((-1.0)*r02*x12776))+(((-1.0)*x12765*x12774)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x12778))+(((-1.0)*r12*x12776))+(((-1.0)*r11*x12777))+(((-1.0)*x12772*x12775))+((x12765*x12771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12779 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12779.valid){
continue;
}
CheckValue<IkReal> x12780=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x12780.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12779.value)+(((1.5707963267949)*(x12780.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12781=IKsin(j14);
IkReal x12782=(cj16*r20);
IkReal x12783=IKcos(j14);
IkReal x12784=(sj15*x12783);
IkReal x12785=(r21*sj16);
IkReal x12786=((1.0)*x12781);
IkReal x12787=(cj15*cj16*x12783);
IkReal x12788=(cj15*sj16*x12783);
IkReal x12789=(cj16*r10);
IkReal x12790=(r11*sj16);
IkReal x12791=(cj16*r00);
IkReal x12792=((1.0)*r01*sj16);
IkReal x12793=((1.0)*x12783);
IkReal x12794=((1.0)*sj15*x12781);
IkReal x12795=((1.0)*cj15*cj16*x12781);
IkReal x12796=((1.0)*cj15*sj16*x12781);
evalcond[0]=(((r21*x12787))+((r22*x12784))+(((-1.0)*x12785*x12786))+((r20*x12788))+((x12781*x12782)));
evalcond[1]=(((r11*x12787))+((r12*x12784))+(((-1.0)*x12786*x12790))+((r10*x12788))+((x12781*x12789)));
evalcond[2]=((-1.0)+((r01*x12787))+((r02*x12784))+((x12781*x12791))+((r00*x12788))+(((-1.0)*x12781*x12792)));
evalcond[3]=((((-1.0)*x12785*x12793))+((x12782*x12783))+(((-1.0)*r22*x12794))+(((-1.0)*r21*x12795))+(((-1.0)*r20*x12796)));
evalcond[4]=((((-1.0)*r00*x12796))+(((-1.0)*r02*x12794))+((x12783*x12791))+(((-1.0)*x12783*x12792))+(((-1.0)*r01*x12795)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x12795))+(((-1.0)*x12790*x12793))+(((-1.0)*r12*x12794))+((x12783*x12789))+(((-1.0)*r10*x12796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x12797=((1.0)*cj15);
IkReal x12798=(((r20*sj15*sj16))+(((-1.0)*r22*x12797))+((cj16*r21*sj15)));
j14eval[0]=x12798;
j14eval[1]=IKsign(x12798);
j14eval[2]=((IKabs(((((-1.0)*r00*sj16*x12797))+(((-1.0)*cj16*r01*x12797))+(((-1.0)*(1.0)*r02*sj15)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x12799=((1.0)*sj15);
IkReal x12800=((((-1.0)*r00*sj16*x12799))+((cj15*r02))+(((-1.0)*cj16*r01*x12799)));
IkReal x12801=((1.0)*r21);
j14eval[0]=x12800;
j14eval[1]=IKsign(x12800);
j14eval[2]=((IKabs(((((-1.0)*cj15*cj16*x12801))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x12799)))))+(IKabs(((((-1.0)*sj16*x12801))+((cj16*r20))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x12802=r01*r01;
IkReal x12803=((1.0)*x12802);
IkReal x12804=r02*r02;
IkReal x12805=(cj16*r00);
IkReal x12806=((2.0)*r01*sj16*x12805);
IkReal x12807=cj15*cj15;
IkReal x12808=cj16*cj16;
IkReal x12809=((2.0)*r02*sj15);
IkReal x12810=(cj15*cj16*r01);
IkReal x12811=(cj15*r00*sj16);
IkReal x12812=r00*r00;
IkReal x12813=((1.0)*x12812);
IkReal x12814=(x12807*x12808);
IkReal x12815=((((-1.0)*x12807*x12813))+((x12804*x12807))+((x12812*x12814))+(((-1.0)*x12809*x12810))+(((-1.0)*x12804))+(((-1.0)*x12803))+(((-1.0)*x12803*x12814))+(((-1.0)*x12806*x12807))+((x12802*x12808))+x12806+(((-1.0)*x12808*x12813))+(((-1.0)*x12809*x12811)));
j14eval[0]=x12815;
j14eval[1]=IKsign(x12815);
j14eval[2]=((IKabs((((r02*sj15))+x12810+x12811)))+(IKabs((((r01*sj16))+(((-1.0)*x12805))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12816=(cj15*cj16*r01);
IkReal x12817=(cj15*r00*sj16);
IkReal x12818=(cj16*r00);
IkReal x12819=r01*r01;
IkReal x12820=((1.0)*x12819);
IkReal x12821=r02*r02;
IkReal x12822=((2.0)*r01*sj16*x12818);
IkReal x12823=cj15*cj15;
IkReal x12824=cj16*cj16;
IkReal x12825=((2.0)*r02*sj15);
IkReal x12826=r00*r00;
IkReal x12827=((1.0)*x12826);
IkReal x12828=(x12823*x12824);
CheckValue<IkReal> x12829 = IKatan2WithCheck(IkReal((((r02*sj15))+x12816+x12817)),IkReal((((r01*sj16))+(((-1.0)*x12818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12829.valid){
continue;
}
CheckValue<IkReal> x12830=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12824*x12827))+(((-1.0)*x12820))+(((-1.0)*x12817*x12825))+(((-1.0)*x12823*x12827))+((x12821*x12823))+(((-1.0)*x12816*x12825))+((x12819*x12824))+(((-1.0)*x12820*x12828))+x12822+(((-1.0)*x12822*x12823))+(((-1.0)*x12821))+((x12826*x12828)))),-1);
if(!x12830.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12829.value)+(((1.5707963267949)*(x12830.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12831=IKsin(j14);
IkReal x12832=(cj16*r20);
IkReal x12833=IKcos(j14);
IkReal x12834=(sj15*x12833);
IkReal x12835=(r21*sj16);
IkReal x12836=((1.0)*x12831);
IkReal x12837=(cj15*cj16*x12833);
IkReal x12838=(cj15*sj16*x12833);
IkReal x12839=(cj16*r00);
IkReal x12840=((1.0)*r01*sj16);
IkReal x12841=(cj16*r10);
IkReal x12842=(r11*sj16);
IkReal x12843=((1.0)*x12833);
IkReal x12844=((1.0)*sj15*x12831);
IkReal x12845=((1.0)*cj15*cj16*x12831);
IkReal x12846=((1.0)*cj15*sj16*x12831);
evalcond[0]=(((r20*x12838))+((r22*x12834))+((r21*x12837))+(((-1.0)*x12835*x12836))+((x12831*x12832)));
evalcond[1]=((((-1.0)*x12831*x12840))+((x12831*x12839))+((r02*x12834))+((r01*x12837))+((r00*x12838)));
evalcond[2]=((1.0)+((r12*x12834))+((r11*x12837))+((r10*x12838))+(((-1.0)*x12836*x12842))+((x12831*x12841)));
evalcond[3]=(((x12832*x12833))+(((-1.0)*r20*x12846))+(((-1.0)*r21*x12845))+(((-1.0)*x12835*x12843))+(((-1.0)*r22*x12844)));
evalcond[4]=((((-1.0)*r10*x12846))+(((-1.0)*r11*x12845))+(((-1.0)*x12842*x12843))+(((-1.0)*r12*x12844))+((x12833*x12841)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x12846))+((x12833*x12839))+(((-1.0)*x12833*x12840))+(((-1.0)*r02*x12844))+(((-1.0)*r01*x12845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12847=((1.0)*sj15);
IkReal x12848=((1.0)*r21);
CheckValue<IkReal> x12849 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12847))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*cj15*cj16*x12848)))),IkReal(((((-1.0)*sj16*x12848))+((cj16*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12849.valid){
continue;
}
CheckValue<IkReal> x12850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x12847))+((cj15*r02))+(((-1.0)*cj16*r01*x12847)))),-1);
if(!x12850.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12849.value)+(((1.5707963267949)*(x12850.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12851=IKsin(j14);
IkReal x12852=(cj16*r20);
IkReal x12853=IKcos(j14);
IkReal x12854=(sj15*x12853);
IkReal x12855=(r21*sj16);
IkReal x12856=((1.0)*x12851);
IkReal x12857=(cj15*cj16*x12853);
IkReal x12858=(cj15*sj16*x12853);
IkReal x12859=(cj16*r00);
IkReal x12860=((1.0)*r01*sj16);
IkReal x12861=(cj16*r10);
IkReal x12862=(r11*sj16);
IkReal x12863=((1.0)*x12853);
IkReal x12864=((1.0)*sj15*x12851);
IkReal x12865=((1.0)*cj15*cj16*x12851);
IkReal x12866=((1.0)*cj15*sj16*x12851);
evalcond[0]=(((r22*x12854))+(((-1.0)*x12855*x12856))+((r21*x12857))+((r20*x12858))+((x12851*x12852)));
evalcond[1]=(((x12851*x12859))+((r01*x12857))+((r00*x12858))+((r02*x12854))+(((-1.0)*x12851*x12860)));
evalcond[2]=((1.0)+((x12851*x12861))+((r10*x12858))+((r12*x12854))+(((-1.0)*x12856*x12862))+((r11*x12857)));
evalcond[3]=((((-1.0)*r21*x12865))+(((-1.0)*x12855*x12863))+(((-1.0)*r20*x12866))+(((-1.0)*r22*x12864))+((x12852*x12853)));
evalcond[4]=((((-1.0)*r10*x12866))+(((-1.0)*x12862*x12863))+(((-1.0)*r11*x12865))+((x12853*x12861))+(((-1.0)*r12*x12864)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x12866))+((x12853*x12859))+(((-1.0)*x12853*x12860))+(((-1.0)*r02*x12864))+(((-1.0)*r01*x12865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12867=((1.0)*cj15);
CheckValue<IkReal> x12868 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj16*x12867))+(((-1.0)*(1.0)*r02*sj15))+(((-1.0)*cj16*r01*x12867)))),IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12868.valid){
continue;
}
CheckValue<IkReal> x12869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x12867))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x12869.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12868.value)+(((1.5707963267949)*(x12869.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12870=IKsin(j14);
IkReal x12871=(cj16*r20);
IkReal x12872=IKcos(j14);
IkReal x12873=(sj15*x12872);
IkReal x12874=(r21*sj16);
IkReal x12875=((1.0)*x12870);
IkReal x12876=(cj15*cj16*x12872);
IkReal x12877=(cj15*sj16*x12872);
IkReal x12878=(cj16*r00);
IkReal x12879=((1.0)*r01*sj16);
IkReal x12880=(cj16*r10);
IkReal x12881=(r11*sj16);
IkReal x12882=((1.0)*x12872);
IkReal x12883=((1.0)*sj15*x12870);
IkReal x12884=((1.0)*cj15*cj16*x12870);
IkReal x12885=((1.0)*cj15*sj16*x12870);
evalcond[0]=(((r22*x12873))+((r21*x12876))+((r20*x12877))+(((-1.0)*x12874*x12875))+((x12870*x12871)));
evalcond[1]=(((r02*x12873))+((r00*x12877))+((x12870*x12878))+((r01*x12876))+(((-1.0)*x12870*x12879)));
evalcond[2]=((1.0)+((r11*x12876))+((r12*x12873))+((x12870*x12880))+((r10*x12877))+(((-1.0)*x12875*x12881)));
evalcond[3]=(((x12871*x12872))+(((-1.0)*x12874*x12882))+(((-1.0)*r22*x12883))+(((-1.0)*r20*x12885))+(((-1.0)*r21*x12884)));
evalcond[4]=(((x12872*x12880))+(((-1.0)*r10*x12885))+(((-1.0)*r11*x12884))+(((-1.0)*x12881*x12882))+(((-1.0)*r12*x12883)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x12885))+((x12872*x12878))+(((-1.0)*x12872*x12879))+(((-1.0)*r02*x12883))+(((-1.0)*r01*x12884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x12886=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x12886;
j14eval[1]=IKsign(x12886);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x12887=((1.0)*cj16);
IkReal x12888=((((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02))+(((-1.0)*r01*sj15*x12887)));
j14eval[0]=x12888;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((r21*sj16))+(((-1.0)*r20*x12887))))));
j14eval[2]=IKsign(x12888);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x12889=r01*r01;
IkReal x12890=r02*r02;
IkReal x12891=(cj16*r00);
IkReal x12892=((2.0)*r01*sj16*x12891);
IkReal x12893=cj15*cj15;
IkReal x12894=r00*r00;
IkReal x12895=(x12893*x12894);
IkReal x12896=cj16*cj16;
IkReal x12897=((2.0)*r02*sj15);
IkReal x12898=(cj15*cj16*r01);
IkReal x12899=(cj15*r00*sj16);
IkReal x12900=(x12889*x12896);
IkReal x12901=(x12889+x12895+x12890+((x12893*x12900))+(((-1.0)*x12900))+(((-1.0)*x12892))+((x12897*x12898))+((x12897*x12899))+((x12894*x12896))+(((-1.0)*x12890*x12893))+((x12892*x12893))+(((-1.0)*x12895*x12896)));
j14eval[0]=x12901;
j14eval[1]=IKsign(x12901);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*x12891)))))+(IKabs((x12899+x12898+((r02*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12902=(cj15*cj16*r01);
IkReal x12903=(cj15*r00*sj16);
IkReal x12904=(cj16*r00);
IkReal x12905=r01*r01;
IkReal x12906=r02*r02;
IkReal x12907=((2.0)*r01*sj16*x12904);
IkReal x12908=cj15*cj15;
IkReal x12909=r00*r00;
IkReal x12910=(x12908*x12909);
IkReal x12911=cj16*cj16;
IkReal x12912=((2.0)*r02*sj15);
IkReal x12913=(x12905*x12911);
CheckValue<IkReal> x12914=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12907))+((x12907*x12908))+x12905+x12906+x12910+((x12909*x12911))+(((-1.0)*x12913))+((x12903*x12912))+(((-1.0)*x12910*x12911))+((x12902*x12912))+((x12908*x12913))+(((-1.0)*x12906*x12908)))),-1);
if(!x12914.valid){
continue;
}
CheckValue<IkReal> x12915 = IKatan2WithCheck(IkReal((x12902+x12903+((r02*sj15)))),IkReal((((r01*sj16))+(((-1.0)*x12904)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12915.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12914.value)))+(x12915.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12916=IKsin(j14);
IkReal x12917=(cj16*r20);
IkReal x12918=IKcos(j14);
IkReal x12919=(sj15*x12918);
IkReal x12920=(r21*sj16);
IkReal x12921=((1.0)*x12916);
IkReal x12922=(cj15*cj16*x12918);
IkReal x12923=(cj15*sj16*x12918);
IkReal x12924=(cj16*r00);
IkReal x12925=((1.0)*r01*sj16);
IkReal x12926=(cj16*r10);
IkReal x12927=(r11*sj16);
IkReal x12928=((1.0)*x12918);
IkReal x12929=((1.0)*sj15*x12916);
IkReal x12930=((1.0)*cj15*cj16*x12916);
IkReal x12931=((1.0)*cj15*sj16*x12916);
evalcond[0]=(((r22*x12919))+((r20*x12923))+((r21*x12922))+((x12916*x12917))+(((-1.0)*x12920*x12921)));
evalcond[1]=(((r00*x12923))+(((-1.0)*x12916*x12925))+((r02*x12919))+((x12916*x12924))+((r01*x12922)));
evalcond[2]=((-1.0)+((r11*x12922))+(((-1.0)*x12921*x12927))+((x12916*x12926))+((r10*x12923))+((r12*x12919)));
evalcond[3]=((((-1.0)*r22*x12929))+(((-1.0)*x12920*x12928))+(((-1.0)*r21*x12930))+(((-1.0)*r20*x12931))+((x12917*x12918)));
evalcond[4]=((((-1.0)*r11*x12930))+(((-1.0)*x12927*x12928))+(((-1.0)*r12*x12929))+((x12918*x12926))+(((-1.0)*r10*x12931)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12929))+(((-1.0)*r00*x12931))+(((-1.0)*r01*x12930))+((x12918*x12924))+(((-1.0)*x12918*x12925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12932=((1.0)*cj16);
CheckValue<IkReal> x12933 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal((((r21*sj16))+(((-1.0)*r20*x12932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12933.valid){
continue;
}
CheckValue<IkReal> x12934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj15*x12932))+(((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02)))),-1);
if(!x12934.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12933.value)+(((1.5707963267949)*(x12934.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12935=IKsin(j14);
IkReal x12936=(cj16*r20);
IkReal x12937=IKcos(j14);
IkReal x12938=(sj15*x12937);
IkReal x12939=(r21*sj16);
IkReal x12940=((1.0)*x12935);
IkReal x12941=(cj15*cj16*x12937);
IkReal x12942=(cj15*sj16*x12937);
IkReal x12943=(cj16*r00);
IkReal x12944=((1.0)*r01*sj16);
IkReal x12945=(cj16*r10);
IkReal x12946=(r11*sj16);
IkReal x12947=((1.0)*x12937);
IkReal x12948=((1.0)*sj15*x12935);
IkReal x12949=((1.0)*cj15*cj16*x12935);
IkReal x12950=((1.0)*cj15*sj16*x12935);
evalcond[0]=(((r20*x12942))+((r22*x12938))+((r21*x12941))+((x12935*x12936))+(((-1.0)*x12939*x12940)));
evalcond[1]=(((r00*x12942))+((r01*x12941))+(((-1.0)*x12935*x12944))+((r02*x12938))+((x12935*x12943)));
evalcond[2]=((-1.0)+((r11*x12941))+((x12935*x12945))+(((-1.0)*x12940*x12946))+((r10*x12942))+((r12*x12938)));
evalcond[3]=((((-1.0)*r22*x12948))+(((-1.0)*x12939*x12947))+((x12936*x12937))+(((-1.0)*r20*x12950))+(((-1.0)*r21*x12949)));
evalcond[4]=((((-1.0)*x12946*x12947))+(((-1.0)*r12*x12948))+(((-1.0)*r11*x12949))+((x12937*x12945))+(((-1.0)*r10*x12950)));
evalcond[5]=((1.0)+(((-1.0)*r00*x12950))+(((-1.0)*r02*x12948))+((x12937*x12943))+(((-1.0)*x12937*x12944))+(((-1.0)*r01*x12949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12951 = IKatan2WithCheck(IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12951.valid){
continue;
}
CheckValue<IkReal> x12952=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x12952.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12951.value)+(((1.5707963267949)*(x12952.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12953=IKsin(j14);
IkReal x12954=(cj16*r20);
IkReal x12955=IKcos(j14);
IkReal x12956=(sj15*x12955);
IkReal x12957=(r21*sj16);
IkReal x12958=((1.0)*x12953);
IkReal x12959=(cj15*cj16*x12955);
IkReal x12960=(cj15*sj16*x12955);
IkReal x12961=(cj16*r00);
IkReal x12962=((1.0)*r01*sj16);
IkReal x12963=(cj16*r10);
IkReal x12964=(r11*sj16);
IkReal x12965=((1.0)*x12955);
IkReal x12966=((1.0)*sj15*x12953);
IkReal x12967=((1.0)*cj15*cj16*x12953);
IkReal x12968=((1.0)*cj15*sj16*x12953);
evalcond[0]=(((r20*x12960))+((r22*x12956))+((r21*x12959))+((x12953*x12954))+(((-1.0)*x12957*x12958)));
evalcond[1]=(((x12953*x12961))+(((-1.0)*x12953*x12962))+((r01*x12959))+((r02*x12956))+((r00*x12960)));
evalcond[2]=((-1.0)+((r11*x12959))+(((-1.0)*x12958*x12964))+((r12*x12956))+((x12953*x12963))+((r10*x12960)));
evalcond[3]=((((-1.0)*r22*x12966))+(((-1.0)*x12957*x12965))+((x12954*x12955))+(((-1.0)*r20*x12968))+(((-1.0)*r21*x12967)));
evalcond[4]=(((x12955*x12963))+(((-1.0)*r10*x12968))+(((-1.0)*r11*x12967))+(((-1.0)*r12*x12966))+(((-1.0)*x12964*x12965)));
evalcond[5]=((1.0)+(((-1.0)*r01*x12967))+((x12955*x12961))+(((-1.0)*r02*x12966))+(((-1.0)*x12955*x12962))+(((-1.0)*r00*x12968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12969=((1.0)*cj15);
IkReal x12970=((1.0)*sj10);
IkReal x12971=(cj10*r11);
IkReal x12972=(cj10*r10);
IkReal x12973=(cj16*sj10);
CheckValue<IkReal> x12974=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+((cj16*r21*sj15))+(((-1.0)*r22*x12969)))),-1);
if(!x12974.valid){
continue;
}
CheckValue<IkReal> x12975 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r01*x12973))+((cj10*r12*sj15))+((cj15*sj16*x12972))+(((-1.0)*r02*sj15*x12970))+(((-1.0)*r00*sj10*sj16*x12969))+((cj15*cj16*x12971)))),IkReal((((r00*x12973))+(((-1.0)*cj16*x12972))+(((-1.0)*r01*sj16*x12970))+((sj16*x12971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12975.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12974.value)))+(x12975.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12976=IKsin(j14);
IkReal x12977=(cj16*r20);
IkReal x12978=IKcos(j14);
IkReal x12979=(sj15*x12978);
IkReal x12980=(r21*sj16);
IkReal x12981=((1.0)*x12976);
IkReal x12982=(cj15*cj16*x12978);
IkReal x12983=(cj15*sj16*x12978);
IkReal x12984=(cj16*r00);
IkReal x12985=((1.0)*r01*sj16);
IkReal x12986=(cj16*r10);
IkReal x12987=(r11*sj16);
IkReal x12988=((1.0)*x12978);
IkReal x12989=((1.0)*sj15*x12976);
IkReal x12990=((1.0)*cj15*cj16*x12976);
IkReal x12991=((1.0)*cj15*sj16*x12976);
evalcond[0]=(((x12976*x12977))+((r22*x12979))+((r20*x12983))+((r21*x12982))+(((-1.0)*x12980*x12981)));
evalcond[1]=((((-1.0)*x12976*x12985))+((x12976*x12984))+((r01*x12982))+((r02*x12979))+cj10+((r00*x12983)));
evalcond[2]=(((x12976*x12986))+(((-1.0)*x12981*x12987))+sj10+((r10*x12983))+((r11*x12982))+((r12*x12979)));
evalcond[3]=((((-1.0)*r21*x12990))+(((-1.0)*r22*x12989))+((x12977*x12978))+(((-1.0)*r20*x12991))+(((-1.0)*x12980*x12988)));
evalcond[4]=((((-1.0)*r12*x12989))+cj10+(((-1.0)*r11*x12990))+(((-1.0)*r10*x12991))+(((-1.0)*x12987*x12988))+((x12978*x12986)));
evalcond[5]=((((-1.0)*r01*x12990))+(((-1.0)*r00*x12991))+(((-1.0)*x12978*x12985))+((x12978*x12984))+(((-1.0)*(1.0)*sj10))+(((-1.0)*r02*x12989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12992=((1.0)*sj15);
IkReal x12993=((1.0)*r21);
IkReal x12994=(sj10*sj16);
CheckValue<IkReal> x12995=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x12992))+((cj15*r02))+(((-1.0)*r00*sj16*x12992)))),-1);
if(!x12995.valid){
continue;
}
CheckValue<IkReal> x12996 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*x12994))+(((-1.0)*r22*sj10*x12992))+(((-1.0)*cj15*cj16*sj10*x12993)))),IkReal(((((-1.0)*x12993*x12994))+((r20*((cj16*sj10)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x12996.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12995.value)))+(x12996.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12997=IKsin(j14);
IkReal x12998=(cj16*r20);
IkReal x12999=IKcos(j14);
IkReal x13000=(sj15*x12999);
IkReal x13001=(r21*sj16);
IkReal x13002=((1.0)*x12997);
IkReal x13003=(cj15*cj16*x12999);
IkReal x13004=(cj15*sj16*x12999);
IkReal x13005=(cj16*r00);
IkReal x13006=((1.0)*r01*sj16);
IkReal x13007=(cj16*r10);
IkReal x13008=(r11*sj16);
IkReal x13009=((1.0)*x12999);
IkReal x13010=((1.0)*sj15*x12997);
IkReal x13011=((1.0)*cj15*cj16*x12997);
IkReal x13012=((1.0)*cj15*sj16*x12997);
evalcond[0]=((((-1.0)*x13001*x13002))+((r20*x13004))+((r21*x13003))+((r22*x13000))+((x12997*x12998)));
evalcond[1]=(((r02*x13000))+(((-1.0)*x12997*x13006))+cj10+((r00*x13004))+((x12997*x13005))+((r01*x13003)));
evalcond[2]=(((x12997*x13007))+(((-1.0)*x13002*x13008))+sj10+((r10*x13004))+((r12*x13000))+((r11*x13003)));
evalcond[3]=(((x12998*x12999))+(((-1.0)*x13001*x13009))+(((-1.0)*r22*x13010))+(((-1.0)*r21*x13011))+(((-1.0)*r20*x13012)));
evalcond[4]=((((-1.0)*x13008*x13009))+(((-1.0)*r11*x13011))+cj10+(((-1.0)*r12*x13010))+(((-1.0)*r10*x13012))+((x12999*x13007)));
evalcond[5]=(((x12999*x13005))+(((-1.0)*r01*x13011))+(((-1.0)*x12999*x13006))+(((-1.0)*(1.0)*sj10))+(((-1.0)*r00*x13012))+(((-1.0)*r02*x13010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13013=((1.0)*cj15);
IkReal x13014=((1.0)*cj10);
IkReal x13015=(cj10*cj16);
CheckValue<IkReal> x13016=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+(((-1.0)*r12*x13013))+((r10*sj15*sj16)))),-1);
if(!x13016.valid){
continue;
}
CheckValue<IkReal> x13017 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r21*x13015))+(((-1.0)*cj10*r20*sj16*x13013))+(((-1.0)*r22*sj15*x13014)))),IkReal((((r20*x13015))+(((-1.0)*r21*sj16*x13014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13017.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13016.value)))+(x13017.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13018=IKsin(j14);
IkReal x13019=(cj16*r20);
IkReal x13020=IKcos(j14);
IkReal x13021=(sj15*x13020);
IkReal x13022=(r21*sj16);
IkReal x13023=((1.0)*x13018);
IkReal x13024=(cj15*cj16*x13020);
IkReal x13025=(cj15*sj16*x13020);
IkReal x13026=(cj16*r00);
IkReal x13027=((1.0)*r01*sj16);
IkReal x13028=(cj16*r10);
IkReal x13029=(r11*sj16);
IkReal x13030=((1.0)*x13020);
IkReal x13031=((1.0)*sj15*x13018);
IkReal x13032=((1.0)*cj15*cj16*x13018);
IkReal x13033=((1.0)*cj15*sj16*x13018);
evalcond[0]=((((-1.0)*x13022*x13023))+((r20*x13025))+((r22*x13021))+((x13018*x13019))+((r21*x13024)));
evalcond[1]=(((x13018*x13026))+(((-1.0)*x13018*x13027))+((r02*x13021))+((r00*x13025))+cj10+((r01*x13024)));
evalcond[2]=(((r10*x13025))+((r11*x13024))+sj10+((x13018*x13028))+(((-1.0)*x13023*x13029))+((r12*x13021)));
evalcond[3]=(((x13019*x13020))+(((-1.0)*r21*x13032))+(((-1.0)*x13022*x13030))+(((-1.0)*r22*x13031))+(((-1.0)*r20*x13033)));
evalcond[4]=((((-1.0)*x13029*x13030))+cj10+(((-1.0)*r12*x13031))+(((-1.0)*r10*x13033))+(((-1.0)*r11*x13032))+((x13020*x13028)));
evalcond[5]=((((-1.0)*r01*x13032))+(((-1.0)*r02*x13031))+((x13020*x13026))+(((-1.0)*x13020*x13027))+(((-1.0)*r00*x13033))+(((-1.0)*(1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13034=((1.26697583102024)*cj15);
IkReal x13035=((0.0338501117053686)*sj15);
IkReal x13036=((0.0338501117053686)*cj15*cj16);
IkReal x13037=((0.0338501117053686)*cj15*sj16);
IkReal x13038=((1.26697583102024)*cj16*sj15);
IkReal x13039=((1.26697583102024)*sj15*sj16);
if( IKabs(((((-1.0)*(3.38501117053686)*py))+((r10*x13037))+((r12*x13034))+((r12*x13035))+(((-1.0)*r11*x13038))+(((-1.0)*r10*x13039))+((r11*x13036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(3.38501117053686)*px))+((r00*x13037))+(((-1.0)*r01*x13038))+((r02*x13035))+(((-1.0)*r00*x13039))+((r01*x13036))+((r02*x13034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(3.38501117053686)*py))+((r10*x13037))+((r12*x13034))+((r12*x13035))+(((-1.0)*r11*x13038))+(((-1.0)*r10*x13039))+((r11*x13036))))+IKsqr(((((-1.0)*(3.38501117053686)*px))+((r00*x13037))+(((-1.0)*r01*x13038))+((r02*x13035))+(((-1.0)*r00*x13039))+((r01*x13036))+((r02*x13034))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*(3.38501117053686)*py))+((r10*x13037))+((r12*x13034))+((r12*x13035))+(((-1.0)*r11*x13038))+(((-1.0)*r10*x13039))+((r11*x13036))), ((((-1.0)*(3.38501117053686)*px))+((r00*x13037))+(((-1.0)*r01*x13038))+((r02*x13035))+(((-1.0)*r00*x13039))+((r01*x13036))+((r02*x13034))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x13040=((0.37429)*cj15);
IkReal x13041=((0.01)*sj15);
IkReal x13042=((0.01)*cj15*cj16);
IkReal x13043=((0.01)*cj15*sj16);
IkReal x13044=((0.37429)*cj16*sj15);
IkReal x13045=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r01*x13044))+(((-1.0)*(1.0)*px))+(((-1.0)*(0.29542)*(IKcos(j10))))+((r02*x13040))+((r02*x13041))+(((-1.0)*r00*x13045))+((r01*x13042))+((r00*x13043)));
evalcond[1]=((((-1.0)*r10*x13045))+(((-1.0)*(1.0)*py))+((r11*x13042))+(((-1.0)*(0.29542)*(IKsin(j10))))+(((-1.0)*r11*x13044))+((r10*x13043))+((r12*x13041))+((r12*x13040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x13046=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
IkReal x13047=(cj10*cj16);
IkReal x13048=(cj10*sj16);
j14eval[0]=x13046;
j14eval[1]=((IKabs((((r20*x13047))+(((-1.0)*r21*x13048)))))+(IKabs((((cj15*r20*x13048))+((cj10*r22*sj15))+((cj15*r21*x13047))))));
j14eval[2]=IKsign(x13046);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x13049=((1.0)*sj15);
IkReal x13050=((((-1.0)*cj16*r01*x13049))+((cj15*r02))+(((-1.0)*r00*sj16*x13049)));
IkReal x13051=(cj16*sj10);
IkReal x13052=(sj10*sj16);
j14eval[0]=x13050;
j14eval[1]=IKsign(x13050);
j14eval[2]=((IKabs((((r22*sj10*sj15))+((cj15*r20*x13052))+((cj15*r21*x13051)))))+(IKabs((((r20*x13051))+(((-1.0)*r21*x13052))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x13053=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x13053;
j14eval[1]=IKsign(x13053);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x13054=((1.0)*cj15);
IkReal x13055=((((-1.0)*r12*x13054))+((cj16*r11*sj15))+((r10*sj15*sj16)));
j14eval[0]=x13055;
j14eval[1]=((IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))))+(IKabs(((((-1.0)*cj16*r21*x13054))+(((-1.0)*r20*sj16*x13054))+(((-1.0)*(1.0)*r22*sj15))))));
j14eval[2]=IKsign(x13055);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x13056=((1.0)*sj15);
IkReal x13057=((((-1.0)*r20*sj16*x13056))+(((-1.0)*cj16*r21*x13056))+((cj15*r22)));
IkReal x13058=((1.0)*r11);
j14eval[0]=x13057;
j14eval[1]=((IKabs(((((-1.0)*cj15*cj16*x13058))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*r12*x13056)))))+(IKabs((((cj16*r10))+(((-1.0)*sj16*x13058))))));
j14eval[2]=IKsign(x13057);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x13059=r11*r11;
IkReal x13060=((1.0)*x13059);
IkReal x13061=r12*r12;
IkReal x13062=(cj16*r10);
IkReal x13063=((2.0)*r11*sj16*x13062);
IkReal x13064=cj15*cj15;
IkReal x13065=cj16*cj16;
IkReal x13066=((2.0)*r12*sj15);
IkReal x13067=(cj15*cj16*r11);
IkReal x13068=(cj15*r10*sj16);
IkReal x13069=r10*r10;
IkReal x13070=((1.0)*x13069);
IkReal x13071=(x13064*x13065);
IkReal x13072=((((-1.0)*x13065*x13070))+(((-1.0)*x13063*x13064))+(((-1.0)*x13060*x13071))+x13063+((x13059*x13065))+(((-1.0)*x13061))+(((-1.0)*x13060))+(((-1.0)*x13066*x13068))+(((-1.0)*x13066*x13067))+((x13061*x13064))+((x13069*x13071))+(((-1.0)*x13064*x13070)));
j14eval[0]=x13072;
j14eval[1]=((IKabs((((r12*sj15))+x13068+x13067)))+(IKabs(((((-1.0)*x13062))+((r11*sj16))))));
j14eval[2]=IKsign(x13072);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13073=(cj15*cj16*r11);
IkReal x13074=(cj15*r10*sj16);
IkReal x13075=(cj16*r10);
IkReal x13076=r11*r11;
IkReal x13077=((1.0)*x13076);
IkReal x13078=r12*r12;
IkReal x13079=((2.0)*r11*sj16*x13075);
IkReal x13080=cj15*cj15;
IkReal x13081=cj16*cj16;
IkReal x13082=((2.0)*r12*sj15);
IkReal x13083=r10*r10;
IkReal x13084=((1.0)*x13083);
IkReal x13085=(x13080*x13081);
CheckValue<IkReal> x13086 = IKatan2WithCheck(IkReal((((r12*sj15))+x13074+x13073)),IkReal(((((-1.0)*x13075))+((r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13086.valid){
continue;
}
CheckValue<IkReal> x13087=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13074*x13082))+(((-1.0)*x13077*x13085))+(((-1.0)*x13077))+((x13078*x13080))+x13079+(((-1.0)*x13078))+((x13076*x13081))+(((-1.0)*x13079*x13080))+((x13083*x13085))+(((-1.0)*x13073*x13082))+(((-1.0)*x13081*x13084))+(((-1.0)*x13080*x13084)))),-1);
if(!x13087.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13086.value)+(((1.5707963267949)*(x13087.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13088=IKsin(j14);
IkReal x13089=(cj16*r20);
IkReal x13090=IKcos(j14);
IkReal x13091=(sj15*x13090);
IkReal x13092=(r21*sj16);
IkReal x13093=((1.0)*x13088);
IkReal x13094=(cj15*cj16*x13090);
IkReal x13095=(cj15*sj16*x13090);
IkReal x13096=(cj16*r10);
IkReal x13097=(r11*sj16);
IkReal x13098=(cj16*r00);
IkReal x13099=((1.0)*r01*sj16);
IkReal x13100=((1.0)*x13090);
IkReal x13101=((1.0)*sj15*x13088);
IkReal x13102=((1.0)*cj15*cj16*x13088);
IkReal x13103=((1.0)*cj15*sj16*x13088);
evalcond[0]=(((r20*x13095))+((r22*x13091))+((r21*x13094))+(((-1.0)*x13092*x13093))+((x13088*x13089)));
evalcond[1]=(((r10*x13095))+((r11*x13094))+(((-1.0)*x13093*x13097))+((x13088*x13096))+((r12*x13091)));
evalcond[2]=((1.0)+((r00*x13095))+(((-1.0)*x13088*x13099))+((x13088*x13098))+((r01*x13094))+((r02*x13091)));
evalcond[3]=((((-1.0)*x13092*x13100))+(((-1.0)*r22*x13101))+((x13089*x13090))+(((-1.0)*r21*x13102))+(((-1.0)*r20*x13103)));
evalcond[4]=((((-1.0)*r00*x13103))+(((-1.0)*x13090*x13099))+((x13090*x13098))+(((-1.0)*r02*x13101))+(((-1.0)*r01*x13102)));
evalcond[5]=((-1.0)+((x13090*x13096))+(((-1.0)*r11*x13102))+(((-1.0)*x13097*x13100))+(((-1.0)*r10*x13103))+(((-1.0)*r12*x13101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13104=((1.0)*sj15);
IkReal x13105=((1.0)*r11);
CheckValue<IkReal> x13106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x13104))+(((-1.0)*cj16*r21*x13104))+((cj15*r22)))),-1);
if(!x13106.valid){
continue;
}
CheckValue<IkReal> x13107 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*cj16*x13105))+(((-1.0)*(1.0)*cj15*r10*sj16))+(((-1.0)*r12*x13104)))),IkReal(((((-1.0)*sj16*x13105))+((cj16*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13107.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13106.value)))+(x13107.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13108=IKsin(j14);
IkReal x13109=(cj16*r20);
IkReal x13110=IKcos(j14);
IkReal x13111=(sj15*x13110);
IkReal x13112=(r21*sj16);
IkReal x13113=((1.0)*x13108);
IkReal x13114=(cj15*cj16*x13110);
IkReal x13115=(cj15*sj16*x13110);
IkReal x13116=(cj16*r10);
IkReal x13117=(r11*sj16);
IkReal x13118=(cj16*r00);
IkReal x13119=((1.0)*r01*sj16);
IkReal x13120=((1.0)*x13110);
IkReal x13121=((1.0)*sj15*x13108);
IkReal x13122=((1.0)*cj15*cj16*x13108);
IkReal x13123=((1.0)*cj15*sj16*x13108);
evalcond[0]=(((x13108*x13109))+(((-1.0)*x13112*x13113))+((r22*x13111))+((r20*x13115))+((r21*x13114)));
evalcond[1]=(((r10*x13115))+(((-1.0)*x13113*x13117))+((r12*x13111))+((r11*x13114))+((x13108*x13116)));
evalcond[2]=((1.0)+((x13108*x13118))+((r02*x13111))+((r01*x13114))+((r00*x13115))+(((-1.0)*x13108*x13119)));
evalcond[3]=((((-1.0)*r22*x13121))+((x13109*x13110))+(((-1.0)*r21*x13122))+(((-1.0)*x13112*x13120))+(((-1.0)*r20*x13123)));
evalcond[4]=((((-1.0)*r00*x13123))+(((-1.0)*r02*x13121))+(((-1.0)*r01*x13122))+((x13110*x13118))+(((-1.0)*x13110*x13119)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13121))+(((-1.0)*r10*x13123))+(((-1.0)*r11*x13122))+(((-1.0)*x13117*x13120))+((x13110*x13116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13124=((1.0)*cj15);
CheckValue<IkReal> x13125 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj16*x13124))+(((-1.0)*cj16*r21*x13124))+(((-1.0)*(1.0)*r22*sj15)))),IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13125.valid){
continue;
}
CheckValue<IkReal> x13126=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+(((-1.0)*r12*x13124))+((r10*sj15*sj16)))),-1);
if(!x13126.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13125.value)+(((1.5707963267949)*(x13126.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13127=IKsin(j14);
IkReal x13128=(cj16*r20);
IkReal x13129=IKcos(j14);
IkReal x13130=(sj15*x13129);
IkReal x13131=(r21*sj16);
IkReal x13132=((1.0)*x13127);
IkReal x13133=(cj15*cj16*x13129);
IkReal x13134=(cj15*sj16*x13129);
IkReal x13135=(cj16*r10);
IkReal x13136=(r11*sj16);
IkReal x13137=(cj16*r00);
IkReal x13138=((1.0)*r01*sj16);
IkReal x13139=((1.0)*x13129);
IkReal x13140=((1.0)*sj15*x13127);
IkReal x13141=((1.0)*cj15*cj16*x13127);
IkReal x13142=((1.0)*cj15*sj16*x13127);
evalcond[0]=(((r22*x13130))+((r21*x13133))+((x13127*x13128))+((r20*x13134))+(((-1.0)*x13131*x13132)));
evalcond[1]=(((r10*x13134))+((r12*x13130))+(((-1.0)*x13132*x13136))+((x13127*x13135))+((r11*x13133)));
evalcond[2]=((1.0)+((r02*x13130))+((r01*x13133))+((r00*x13134))+(((-1.0)*x13127*x13138))+((x13127*x13137)));
evalcond[3]=((((-1.0)*x13131*x13139))+(((-1.0)*r22*x13140))+(((-1.0)*r21*x13141))+((x13128*x13129))+(((-1.0)*r20*x13142)));
evalcond[4]=((((-1.0)*r00*x13142))+(((-1.0)*r02*x13140))+(((-1.0)*x13129*x13138))+(((-1.0)*r01*x13141))+((x13129*x13137)));
evalcond[5]=((-1.0)+(((-1.0)*x13136*x13139))+(((-1.0)*r12*x13140))+((x13129*x13135))+(((-1.0)*r11*x13141))+(((-1.0)*r10*x13142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13143=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x13143;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20))))));
j14eval[2]=IKsign(x13143);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13144=((1.0)*cj16);
IkReal x13145=((((-1.0)*r21*sj15*x13144))+(((-1.0)*(1.0)*r20*sj15*sj16))+((cj15*r22)));
j14eval[0]=x13145;
j14eval[1]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs(((((-1.0)*r10*x13144))+((r11*sj16))))));
j14eval[2]=IKsign(x13145);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13146=r11*r11;
IkReal x13147=r12*r12;
IkReal x13148=(cj16*r10);
IkReal x13149=((2.0)*r11*sj16*x13148);
IkReal x13150=cj15*cj15;
IkReal x13151=r10*r10;
IkReal x13152=(x13150*x13151);
IkReal x13153=cj16*cj16;
IkReal x13154=((2.0)*r12*sj15);
IkReal x13155=(cj15*cj16*r11);
IkReal x13156=(cj15*r10*sj16);
IkReal x13157=(x13146*x13153);
IkReal x13158=(((x13149*x13150))+((x13151*x13153))+((x13150*x13157))+x13152+(((-1.0)*x13157))+x13146+x13147+((x13154*x13155))+(((-1.0)*x13147*x13150))+(((-1.0)*x13152*x13153))+((x13154*x13156))+(((-1.0)*x13149)));
j14eval[0]=x13158;
j14eval[1]=IKsign(x13158);
j14eval[2]=((IKabs((((r12*sj15))+x13156+x13155)))+(IKabs(((((-1.0)*x13148))+((r11*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13159=(cj15*cj16*r11);
IkReal x13160=(cj15*r10*sj16);
IkReal x13161=(cj16*r10);
IkReal x13162=r11*r11;
IkReal x13163=r12*r12;
IkReal x13164=((2.0)*r11*sj16*x13161);
IkReal x13165=cj15*cj15;
IkReal x13166=r10*r10;
IkReal x13167=(x13165*x13166);
IkReal x13168=cj16*cj16;
IkReal x13169=((2.0)*r12*sj15);
IkReal x13170=(x13162*x13168);
CheckValue<IkReal> x13171=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13164))+(((-1.0)*x13170))+((x13160*x13169))+(((-1.0)*x13167*x13168))+((x13166*x13168))+x13163+x13167+x13162+((x13165*x13170))+(((-1.0)*x13163*x13165))+((x13159*x13169))+((x13164*x13165)))),-1);
if(!x13171.valid){
continue;
}
CheckValue<IkReal> x13172 = IKatan2WithCheck(IkReal((((r12*sj15))+x13159+x13160)),IkReal(((((-1.0)*x13161))+((r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13172.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13171.value)))+(x13172.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13173=IKsin(j14);
IkReal x13174=(cj16*r20);
IkReal x13175=IKcos(j14);
IkReal x13176=(sj15*x13175);
IkReal x13177=(r21*sj16);
IkReal x13178=((1.0)*x13173);
IkReal x13179=(cj15*cj16*x13175);
IkReal x13180=(cj15*sj16*x13175);
IkReal x13181=(cj16*r10);
IkReal x13182=(r11*sj16);
IkReal x13183=(cj16*r00);
IkReal x13184=((1.0)*r01*sj16);
IkReal x13185=((1.0)*x13175);
IkReal x13186=((1.0)*sj15*x13173);
IkReal x13187=((1.0)*cj15*cj16*x13173);
IkReal x13188=((1.0)*cj15*sj16*x13173);
evalcond[0]=(((r22*x13176))+(((-1.0)*x13177*x13178))+((x13173*x13174))+((r20*x13180))+((r21*x13179)));
evalcond[1]=(((r10*x13180))+((x13173*x13181))+(((-1.0)*x13178*x13182))+((r12*x13176))+((r11*x13179)));
evalcond[2]=((-1.0)+(((-1.0)*x13173*x13184))+((r00*x13180))+((r02*x13176))+((x13173*x13183))+((r01*x13179)));
evalcond[3]=((((-1.0)*x13177*x13185))+((x13174*x13175))+(((-1.0)*r22*x13186))+(((-1.0)*r20*x13188))+(((-1.0)*r21*x13187)));
evalcond[4]=((((-1.0)*x13175*x13184))+((x13175*x13183))+(((-1.0)*r01*x13187))+(((-1.0)*r02*x13186))+(((-1.0)*r00*x13188)));
evalcond[5]=((1.0)+(((-1.0)*r11*x13187))+(((-1.0)*r10*x13188))+(((-1.0)*x13182*x13185))+((x13175*x13181))+(((-1.0)*r12*x13186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13189=((1.0)*cj16);
CheckValue<IkReal> x13190 = IKatan2WithCheck(IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IkReal(((((-1.0)*r10*x13189))+((r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13190.valid){
continue;
}
CheckValue<IkReal> x13191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj15*x13189))+(((-1.0)*(1.0)*r20*sj15*sj16))+((cj15*r22)))),-1);
if(!x13191.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13190.value)+(((1.5707963267949)*(x13191.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13192=IKsin(j14);
IkReal x13193=(cj16*r20);
IkReal x13194=IKcos(j14);
IkReal x13195=(sj15*x13194);
IkReal x13196=(r21*sj16);
IkReal x13197=((1.0)*x13192);
IkReal x13198=(cj15*cj16*x13194);
IkReal x13199=(cj15*sj16*x13194);
IkReal x13200=(cj16*r10);
IkReal x13201=(r11*sj16);
IkReal x13202=(cj16*r00);
IkReal x13203=((1.0)*r01*sj16);
IkReal x13204=((1.0)*x13194);
IkReal x13205=((1.0)*sj15*x13192);
IkReal x13206=((1.0)*cj15*cj16*x13192);
IkReal x13207=((1.0)*cj15*sj16*x13192);
evalcond[0]=((((-1.0)*x13196*x13197))+((r22*x13195))+((r20*x13199))+((r21*x13198))+((x13192*x13193)));
evalcond[1]=(((x13192*x13200))+((r11*x13198))+((r12*x13195))+((r10*x13199))+(((-1.0)*x13197*x13201)));
evalcond[2]=((-1.0)+(((-1.0)*x13192*x13203))+((r00*x13199))+((r01*x13198))+((x13192*x13202))+((r02*x13195)));
evalcond[3]=((((-1.0)*r22*x13205))+(((-1.0)*r20*x13207))+(((-1.0)*r21*x13206))+((x13193*x13194))+(((-1.0)*x13196*x13204)));
evalcond[4]=(((x13194*x13202))+(((-1.0)*r00*x13207))+(((-1.0)*x13194*x13203))+(((-1.0)*r01*x13206))+(((-1.0)*r02*x13205)));
evalcond[5]=((1.0)+((x13194*x13200))+(((-1.0)*r12*x13205))+(((-1.0)*r10*x13207))+(((-1.0)*x13201*x13204))+(((-1.0)*r11*x13206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13208 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal((((r21*sj16))+(((-1.0)*(1.0)*cj16*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13208.valid){
continue;
}
CheckValue<IkReal> x13209=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x13209.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13208.value)+(((1.5707963267949)*(x13209.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13210=IKsin(j14);
IkReal x13211=(cj16*r20);
IkReal x13212=IKcos(j14);
IkReal x13213=(sj15*x13212);
IkReal x13214=(r21*sj16);
IkReal x13215=((1.0)*x13210);
IkReal x13216=(cj15*cj16*x13212);
IkReal x13217=(cj15*sj16*x13212);
IkReal x13218=(cj16*r10);
IkReal x13219=(r11*sj16);
IkReal x13220=(cj16*r00);
IkReal x13221=((1.0)*r01*sj16);
IkReal x13222=((1.0)*x13212);
IkReal x13223=((1.0)*sj15*x13210);
IkReal x13224=((1.0)*cj15*cj16*x13210);
IkReal x13225=((1.0)*cj15*sj16*x13210);
evalcond[0]=((((-1.0)*x13214*x13215))+((r21*x13216))+((x13210*x13211))+((r22*x13213))+((r20*x13217)));
evalcond[1]=(((x13210*x13218))+((r11*x13216))+((r12*x13213))+((r10*x13217))+(((-1.0)*x13215*x13219)));
evalcond[2]=((-1.0)+((r02*x13213))+((r00*x13217))+((x13210*x13220))+(((-1.0)*x13210*x13221))+((r01*x13216)));
evalcond[3]=((((-1.0)*r20*x13225))+(((-1.0)*r21*x13224))+(((-1.0)*x13214*x13222))+((x13211*x13212))+(((-1.0)*r22*x13223)));
evalcond[4]=((((-1.0)*x13212*x13221))+(((-1.0)*r00*x13225))+(((-1.0)*r02*x13223))+(((-1.0)*r01*x13224))+((x13212*x13220)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13223))+(((-1.0)*x13219*x13222))+(((-1.0)*r11*x13224))+(((-1.0)*r10*x13225))+((x13212*x13218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x13226=((1.0)*cj15);
IkReal x13227=((((-1.0)*r22*x13226))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x13227;
j14eval[1]=IKsign(x13227);
j14eval[2]=((IKabs(((((-1.0)*cj16*r01*x13226))+(((-1.0)*r00*sj16*x13226))+(((-1.0)*(1.0)*r02*sj15)))))+(IKabs((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x13228=((1.0)*sj15);
IkReal x13229=((((-1.0)*r00*sj16*x13228))+(((-1.0)*cj16*r01*x13228))+((cj15*r02)));
IkReal x13230=((1.0)*r21);
j14eval[0]=x13229;
j14eval[1]=IKsign(x13229);
j14eval[2]=((IKabs(((((-1.0)*cj15*cj16*x13230))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x13228)))))+(IKabs((((cj16*r20))+(((-1.0)*sj16*x13230))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x13231=r01*r01;
IkReal x13232=r02*r02;
IkReal x13233=(cj16*r00);
IkReal x13234=((2.0)*r01*sj16*x13233);
IkReal x13235=cj15*cj15;
IkReal x13236=r00*r00;
IkReal x13237=(x13235*x13236);
IkReal x13238=cj16*cj16;
IkReal x13239=((2.0)*r02*sj15);
IkReal x13240=(cj15*cj16*r01);
IkReal x13241=(cj15*r00*sj16);
IkReal x13242=(x13231*x13238);
IkReal x13243=(((x13234*x13235))+(((-1.0)*x13232*x13235))+x13237+x13231+x13232+((x13235*x13242))+(((-1.0)*x13242))+(((-1.0)*x13237*x13238))+(((-1.0)*x13234))+((x13239*x13241))+((x13236*x13238))+((x13239*x13240)));
j14eval[0]=x13243;
j14eval[1]=IKsign(x13243);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*x13233)))))+(IKabs((((r02*sj15))+x13241+x13240))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13244=(cj15*cj16*r01);
IkReal x13245=(cj15*r00*sj16);
IkReal x13246=(cj16*r00);
IkReal x13247=r01*r01;
IkReal x13248=r02*r02;
IkReal x13249=((2.0)*r01*sj16*x13246);
IkReal x13250=cj15*cj15;
IkReal x13251=r00*r00;
IkReal x13252=(x13250*x13251);
IkReal x13253=cj16*cj16;
IkReal x13254=((2.0)*r02*sj15);
IkReal x13255=(x13247*x13253);
CheckValue<IkReal> x13256=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13249))+((x13249*x13250))+((x13251*x13253))+((x13250*x13255))+((x13245*x13254))+(((-1.0)*x13252*x13253))+x13252+x13248+x13247+(((-1.0)*x13248*x13250))+(((-1.0)*x13255))+((x13244*x13254)))),-1);
if(!x13256.valid){
continue;
}
CheckValue<IkReal> x13257 = IKatan2WithCheck(IkReal((((r02*sj15))+x13245+x13244)),IkReal((((r01*sj16))+(((-1.0)*x13246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13257.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13256.value)))+(x13257.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13258=IKsin(j14);
IkReal x13259=(cj16*r20);
IkReal x13260=IKcos(j14);
IkReal x13261=(sj15*x13260);
IkReal x13262=(r21*sj16);
IkReal x13263=((1.0)*x13258);
IkReal x13264=(cj15*cj16*x13260);
IkReal x13265=(cj15*sj16*x13260);
IkReal x13266=(cj16*r00);
IkReal x13267=((1.0)*r01*sj16);
IkReal x13268=(cj16*r10);
IkReal x13269=(r11*sj16);
IkReal x13270=((1.0)*x13260);
IkReal x13271=((1.0)*sj15*x13258);
IkReal x13272=((1.0)*cj15*cj16*x13258);
IkReal x13273=((1.0)*cj15*sj16*x13258);
evalcond[0]=(((x13258*x13259))+((r21*x13264))+((r20*x13265))+(((-1.0)*x13262*x13263))+((r22*x13261)));
evalcond[1]=((((-1.0)*x13258*x13267))+((r00*x13265))+((x13258*x13266))+((r02*x13261))+((r01*x13264)));
evalcond[2]=((1.0)+((x13258*x13268))+(((-1.0)*x13263*x13269))+((r10*x13265))+((r11*x13264))+((r12*x13261)));
evalcond[3]=((((-1.0)*r21*x13272))+((x13259*x13260))+(((-1.0)*r22*x13271))+(((-1.0)*r20*x13273))+(((-1.0)*x13262*x13270)));
evalcond[4]=(((x13260*x13268))+(((-1.0)*r11*x13272))+(((-1.0)*x13269*x13270))+(((-1.0)*r12*x13271))+(((-1.0)*r10*x13273)));
evalcond[5]=((1.0)+(((-1.0)*r00*x13273))+(((-1.0)*r01*x13272))+(((-1.0)*r02*x13271))+(((-1.0)*x13260*x13267))+((x13260*x13266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13274=((1.0)*sj15);
IkReal x13275=((1.0)*r21);
CheckValue<IkReal> x13276 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*cj16*x13275))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*r22*x13274)))),IkReal(((((-1.0)*sj16*x13275))+((cj16*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13276.valid){
continue;
}
CheckValue<IkReal> x13277=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x13274))+((cj15*r02))+(((-1.0)*r00*sj16*x13274)))),-1);
if(!x13277.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13276.value)+(((1.5707963267949)*(x13277.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13278=IKsin(j14);
IkReal x13279=(cj16*r20);
IkReal x13280=IKcos(j14);
IkReal x13281=(sj15*x13280);
IkReal x13282=(r21*sj16);
IkReal x13283=((1.0)*x13278);
IkReal x13284=(cj15*cj16*x13280);
IkReal x13285=(cj15*sj16*x13280);
IkReal x13286=(cj16*r00);
IkReal x13287=((1.0)*r01*sj16);
IkReal x13288=(cj16*r10);
IkReal x13289=(r11*sj16);
IkReal x13290=((1.0)*x13280);
IkReal x13291=((1.0)*sj15*x13278);
IkReal x13292=((1.0)*cj15*cj16*x13278);
IkReal x13293=((1.0)*cj15*sj16*x13278);
evalcond[0]=(((x13278*x13279))+((r20*x13285))+((r21*x13284))+(((-1.0)*x13282*x13283))+((r22*x13281)));
evalcond[1]=(((r01*x13284))+((r00*x13285))+((x13278*x13286))+((r02*x13281))+(((-1.0)*x13278*x13287)));
evalcond[2]=((1.0)+((r10*x13285))+((x13278*x13288))+((r12*x13281))+(((-1.0)*x13283*x13289))+((r11*x13284)));
evalcond[3]=(((x13279*x13280))+(((-1.0)*r21*x13292))+(((-1.0)*r22*x13291))+(((-1.0)*r20*x13293))+(((-1.0)*x13282*x13290)));
evalcond[4]=((((-1.0)*x13289*x13290))+(((-1.0)*r12*x13291))+(((-1.0)*r11*x13292))+((x13280*x13288))+(((-1.0)*r10*x13293)));
evalcond[5]=((1.0)+(((-1.0)*x13280*x13287))+((x13280*x13286))+(((-1.0)*r00*x13293))+(((-1.0)*r01*x13292))+(((-1.0)*r02*x13291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13294=((1.0)*cj15);
CheckValue<IkReal> x13295=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+(((-1.0)*r22*x13294))+((cj16*r21*sj15)))),-1);
if(!x13295.valid){
continue;
}
CheckValue<IkReal> x13296 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj16*x13294))+(((-1.0)*cj16*r01*x13294))+(((-1.0)*(1.0)*r02*sj15)))),IkReal((((cj16*r00))+(((-1.0)*(1.0)*r01*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13296.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13295.value)))+(x13296.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13297=IKsin(j14);
IkReal x13298=(cj16*r20);
IkReal x13299=IKcos(j14);
IkReal x13300=(sj15*x13299);
IkReal x13301=(r21*sj16);
IkReal x13302=((1.0)*x13297);
IkReal x13303=(cj15*cj16*x13299);
IkReal x13304=(cj15*sj16*x13299);
IkReal x13305=(cj16*r00);
IkReal x13306=((1.0)*r01*sj16);
IkReal x13307=(cj16*r10);
IkReal x13308=(r11*sj16);
IkReal x13309=((1.0)*x13299);
IkReal x13310=((1.0)*sj15*x13297);
IkReal x13311=((1.0)*cj15*cj16*x13297);
IkReal x13312=((1.0)*cj15*sj16*x13297);
evalcond[0]=(((r20*x13304))+((x13297*x13298))+(((-1.0)*x13301*x13302))+((r21*x13303))+((r22*x13300)));
evalcond[1]=(((r00*x13304))+((x13297*x13305))+((r02*x13300))+(((-1.0)*x13297*x13306))+((r01*x13303)));
evalcond[2]=((1.0)+((r12*x13300))+((r10*x13304))+((r11*x13303))+(((-1.0)*x13302*x13308))+((x13297*x13307)));
evalcond[3]=((((-1.0)*r22*x13310))+(((-1.0)*r21*x13311))+(((-1.0)*x13301*x13309))+(((-1.0)*r20*x13312))+((x13298*x13299)));
evalcond[4]=((((-1.0)*r12*x13310))+(((-1.0)*x13308*x13309))+(((-1.0)*r11*x13311))+((x13299*x13307))+(((-1.0)*r10*x13312)));
evalcond[5]=((1.0)+(((-1.0)*r00*x13312))+(((-1.0)*x13299*x13306))+(((-1.0)*r02*x13310))+(((-1.0)*r01*x13311))+((x13299*x13305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x13313=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x13313;
j14eval[1]=IKsign(x13313);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))))+(IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x13314=((1.0)*cj16);
IkReal x13315=((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x13314))+((cj15*r02)));
j14eval[0]=x13315;
j14eval[1]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((r21*sj16))+(((-1.0)*r20*x13314))))));
j14eval[2]=IKsign(x13315);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x13316=r01*r01;
IkReal x13317=((1.0)*x13316);
IkReal x13318=r02*r02;
IkReal x13319=(cj16*r00);
IkReal x13320=((2.0)*r01*sj16*x13319);
IkReal x13321=cj15*cj15;
IkReal x13322=cj16*cj16;
IkReal x13323=((2.0)*r02*sj15);
IkReal x13324=(cj15*cj16*r01);
IkReal x13325=(cj15*r00*sj16);
IkReal x13326=r00*r00;
IkReal x13327=((1.0)*x13326);
IkReal x13328=(x13321*x13322);
IkReal x13329=(((x13318*x13321))+(((-1.0)*x13323*x13325))+(((-1.0)*x13317))+x13320+(((-1.0)*x13318))+((x13316*x13322))+(((-1.0)*x13320*x13321))+(((-1.0)*x13322*x13327))+(((-1.0)*x13321*x13327))+((x13326*x13328))+(((-1.0)*x13323*x13324))+(((-1.0)*x13317*x13328)));
j14eval[0]=x13329;
j14eval[1]=IKsign(x13329);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*x13319)))))+(IKabs((x13324+x13325+((r02*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13330=(cj15*cj16*r01);
IkReal x13331=(cj15*r00*sj16);
IkReal x13332=(cj16*r00);
IkReal x13333=r01*r01;
IkReal x13334=((1.0)*x13333);
IkReal x13335=r02*r02;
IkReal x13336=((2.0)*r01*sj16*x13332);
IkReal x13337=cj15*cj15;
IkReal x13338=cj16*cj16;
IkReal x13339=((2.0)*r02*sj15);
IkReal x13340=r00*r00;
IkReal x13341=((1.0)*x13340);
IkReal x13342=(x13337*x13338);
CheckValue<IkReal> x13343=IKPowWithIntegerCheck(IKsign((x13336+(((-1.0)*x13330*x13339))+(((-1.0)*x13335))+(((-1.0)*x13337*x13341))+((x13335*x13337))+(((-1.0)*x13331*x13339))+(((-1.0)*x13336*x13337))+((x13333*x13338))+(((-1.0)*x13334*x13342))+(((-1.0)*x13338*x13341))+(((-1.0)*x13334))+((x13340*x13342)))),-1);
if(!x13343.valid){
continue;
}
CheckValue<IkReal> x13344 = IKatan2WithCheck(IkReal((x13331+x13330+((r02*sj15)))),IkReal((((r01*sj16))+(((-1.0)*x13332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13344.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13343.value)))+(x13344.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13345=IKsin(j14);
IkReal x13346=(cj16*r20);
IkReal x13347=IKcos(j14);
IkReal x13348=(sj15*x13347);
IkReal x13349=(r21*sj16);
IkReal x13350=((1.0)*x13345);
IkReal x13351=(cj15*cj16*x13347);
IkReal x13352=(cj15*sj16*x13347);
IkReal x13353=(cj16*r00);
IkReal x13354=((1.0)*r01*sj16);
IkReal x13355=(cj16*r10);
IkReal x13356=(r11*sj16);
IkReal x13357=((1.0)*x13347);
IkReal x13358=((1.0)*sj15*x13345);
IkReal x13359=((1.0)*cj15*cj16*x13345);
IkReal x13360=((1.0)*cj15*sj16*x13345);
evalcond[0]=(((r20*x13352))+((r22*x13348))+((r21*x13351))+((x13345*x13346))+(((-1.0)*x13349*x13350)));
evalcond[1]=(((r01*x13351))+(((-1.0)*x13345*x13354))+((r00*x13352))+((r02*x13348))+((x13345*x13353)));
evalcond[2]=((-1.0)+((x13345*x13355))+((r10*x13352))+(((-1.0)*x13350*x13356))+((r12*x13348))+((r11*x13351)));
evalcond[3]=((((-1.0)*r22*x13358))+(((-1.0)*x13349*x13357))+(((-1.0)*r21*x13359))+(((-1.0)*r20*x13360))+((x13346*x13347)));
evalcond[4]=((((-1.0)*r12*x13358))+(((-1.0)*r10*x13360))+(((-1.0)*x13356*x13357))+((x13347*x13355))+(((-1.0)*r11*x13359)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x13359))+(((-1.0)*r00*x13360))+(((-1.0)*x13347*x13354))+((x13347*x13353))+(((-1.0)*r02*x13358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13361=((1.0)*cj16);
CheckValue<IkReal> x13362 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal(((((-1.0)*r20*x13361))+((r21*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13362.valid){
continue;
}
CheckValue<IkReal> x13363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj15*x13361))+(((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02)))),-1);
if(!x13363.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13362.value)+(((1.5707963267949)*(x13363.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13364=IKsin(j14);
IkReal x13365=(cj16*r20);
IkReal x13366=IKcos(j14);
IkReal x13367=(sj15*x13366);
IkReal x13368=(r21*sj16);
IkReal x13369=((1.0)*x13364);
IkReal x13370=(cj15*cj16*x13366);
IkReal x13371=(cj15*sj16*x13366);
IkReal x13372=(cj16*r00);
IkReal x13373=((1.0)*r01*sj16);
IkReal x13374=(cj16*r10);
IkReal x13375=(r11*sj16);
IkReal x13376=((1.0)*x13366);
IkReal x13377=((1.0)*sj15*x13364);
IkReal x13378=((1.0)*cj15*cj16*x13364);
IkReal x13379=((1.0)*cj15*sj16*x13364);
evalcond[0]=(((r20*x13371))+((r22*x13367))+((r21*x13370))+(((-1.0)*x13368*x13369))+((x13364*x13365)));
evalcond[1]=(((r00*x13371))+((r01*x13370))+(((-1.0)*x13364*x13373))+((r02*x13367))+((x13364*x13372)));
evalcond[2]=((-1.0)+((r12*x13367))+((r11*x13370))+(((-1.0)*x13369*x13375))+((x13364*x13374))+((r10*x13371)));
evalcond[3]=((((-1.0)*r22*x13377))+(((-1.0)*r21*x13378))+(((-1.0)*r20*x13379))+((x13365*x13366))+(((-1.0)*x13368*x13376)));
evalcond[4]=((((-1.0)*r10*x13379))+(((-1.0)*r11*x13378))+((x13366*x13374))+(((-1.0)*x13375*x13376))+(((-1.0)*r12*x13377)));
evalcond[5]=((-1.0)+(((-1.0)*x13366*x13373))+((x13366*x13372))+(((-1.0)*r00*x13379))+(((-1.0)*r01*x13378))+(((-1.0)*r02*x13377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13380 = IKatan2WithCheck(IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IkReal((((r01*sj16))+(((-1.0)*(1.0)*cj16*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13380.valid){
continue;
}
CheckValue<IkReal> x13381=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x13381.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13380.value)+(((1.5707963267949)*(x13381.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13382=IKsin(j14);
IkReal x13383=(cj16*r20);
IkReal x13384=IKcos(j14);
IkReal x13385=(sj15*x13384);
IkReal x13386=(r21*sj16);
IkReal x13387=((1.0)*x13382);
IkReal x13388=(cj15*cj16*x13384);
IkReal x13389=(cj15*sj16*x13384);
IkReal x13390=(cj16*r00);
IkReal x13391=((1.0)*r01*sj16);
IkReal x13392=(cj16*r10);
IkReal x13393=(r11*sj16);
IkReal x13394=((1.0)*x13384);
IkReal x13395=((1.0)*sj15*x13382);
IkReal x13396=((1.0)*cj15*cj16*x13382);
IkReal x13397=((1.0)*cj15*sj16*x13382);
evalcond[0]=(((r22*x13385))+(((-1.0)*x13386*x13387))+((r21*x13388))+((x13382*x13383))+((r20*x13389)));
evalcond[1]=(((r00*x13389))+((r02*x13385))+((r01*x13388))+((x13382*x13390))+(((-1.0)*x13382*x13391)));
evalcond[2]=((-1.0)+((r10*x13389))+((r12*x13385))+(((-1.0)*x13387*x13393))+((r11*x13388))+((x13382*x13392)));
evalcond[3]=((((-1.0)*r21*x13396))+(((-1.0)*x13386*x13394))+((x13383*x13384))+(((-1.0)*r22*x13395))+(((-1.0)*r20*x13397)));
evalcond[4]=((((-1.0)*r12*x13395))+((x13384*x13392))+(((-1.0)*r10*x13397))+(((-1.0)*r11*x13396))+(((-1.0)*x13393*x13394)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x13396))+(((-1.0)*x13384*x13391))+((x13384*x13390))+(((-1.0)*r02*x13395))+(((-1.0)*r00*x13397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13398=((1.0)*cj15);
IkReal x13399=((1.0)*sj10);
IkReal x13400=(cj10*r11);
IkReal x13401=(cj10*r10);
IkReal x13402=(cj16*sj10);
CheckValue<IkReal> x13403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x13398))+((r20*sj15*sj16))+((cj16*r21*sj15)))),-1);
if(!x13403.valid){
continue;
}
CheckValue<IkReal> x13404 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj10*sj16*x13398))+((cj10*r12*sj15))+(((-1.0)*cj15*r01*x13402))+(((-1.0)*r02*sj15*x13399))+((cj15*sj16*x13401))+((cj15*cj16*x13400)))),IkReal(((((-1.0)*cj16*x13401))+(((-1.0)*r01*sj16*x13399))+((r00*x13402))+((sj16*x13400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13404.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13403.value)))+(x13404.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13405=IKsin(j14);
IkReal x13406=(cj16*r20);
IkReal x13407=IKcos(j14);
IkReal x13408=(sj15*x13407);
IkReal x13409=(r21*sj16);
IkReal x13410=((1.0)*x13405);
IkReal x13411=(cj15*cj16*x13407);
IkReal x13412=(cj15*sj16*x13407);
IkReal x13413=(cj16*r00);
IkReal x13414=((1.0)*r01*sj16);
IkReal x13415=(cj16*r10);
IkReal x13416=(r11*sj16);
IkReal x13417=((1.0)*x13407);
IkReal x13418=((1.0)*sj15*x13405);
IkReal x13419=((1.0)*cj15*cj16*x13405);
IkReal x13420=((1.0)*cj15*sj16*x13405);
evalcond[0]=((((-1.0)*x13409*x13410))+((r20*x13412))+((x13405*x13406))+((r21*x13411))+((r22*x13408)));
evalcond[1]=(((r02*x13408))+((r01*x13411))+cj10+((x13405*x13413))+(((-1.0)*x13405*x13414))+((r00*x13412)));
evalcond[2]=(((r11*x13411))+((r10*x13412))+sj10+((r12*x13408))+(((-1.0)*x13410*x13416))+((x13405*x13415)));
evalcond[3]=((((-1.0)*r21*x13419))+((x13406*x13407))+(((-1.0)*r22*x13418))+(((-1.0)*x13409*x13417))+(((-1.0)*r20*x13420)));
evalcond[4]=((((-1.0)*r01*x13419))+sj10+(((-1.0)*x13407*x13414))+((x13407*x13413))+(((-1.0)*r02*x13418))+(((-1.0)*r00*x13420)));
evalcond[5]=((((-1.0)*r12*x13418))+(((-1.0)*r10*x13420))+((x13407*x13415))+(((-1.0)*(1.0)*cj10))+(((-1.0)*x13416*x13417))+(((-1.0)*r11*x13419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13421=((1.0)*sj15);
IkReal x13422=((1.0)*r21);
IkReal x13423=(sj10*sj16);
CheckValue<IkReal> x13424 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*x13423))+(((-1.0)*cj15*cj16*sj10*x13422))+(((-1.0)*r22*sj10*x13421)))),IkReal((((r20*((cj16*sj10))))+(((-1.0)*x13422*x13423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13424.valid){
continue;
}
CheckValue<IkReal> x13425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x13421))+(((-1.0)*cj16*r01*x13421))+((cj15*r02)))),-1);
if(!x13425.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13424.value)+(((1.5707963267949)*(x13425.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13426=IKsin(j14);
IkReal x13427=(cj16*r20);
IkReal x13428=IKcos(j14);
IkReal x13429=(sj15*x13428);
IkReal x13430=(r21*sj16);
IkReal x13431=((1.0)*x13426);
IkReal x13432=(cj15*cj16*x13428);
IkReal x13433=(cj15*sj16*x13428);
IkReal x13434=(cj16*r00);
IkReal x13435=((1.0)*r01*sj16);
IkReal x13436=(cj16*r10);
IkReal x13437=(r11*sj16);
IkReal x13438=((1.0)*x13428);
IkReal x13439=((1.0)*sj15*x13426);
IkReal x13440=((1.0)*cj15*cj16*x13426);
IkReal x13441=((1.0)*cj15*sj16*x13426);
evalcond[0]=(((r22*x13429))+((x13426*x13427))+((r20*x13433))+(((-1.0)*x13430*x13431))+((r21*x13432)));
evalcond[1]=(((r02*x13429))+cj10+((x13426*x13434))+((r00*x13433))+((r01*x13432))+(((-1.0)*x13426*x13435)));
evalcond[2]=(((r10*x13433))+sj10+((x13426*x13436))+((r11*x13432))+((r12*x13429))+(((-1.0)*x13431*x13437)));
evalcond[3]=((((-1.0)*r22*x13439))+(((-1.0)*r20*x13441))+(((-1.0)*r21*x13440))+((x13427*x13428))+(((-1.0)*x13430*x13438)));
evalcond[4]=((((-1.0)*x13428*x13435))+sj10+((x13428*x13434))+(((-1.0)*r00*x13441))+(((-1.0)*r01*x13440))+(((-1.0)*r02*x13439)));
evalcond[5]=((((-1.0)*r12*x13439))+((x13428*x13436))+(((-1.0)*r10*x13441))+(((-1.0)*(1.0)*cj10))+(((-1.0)*r11*x13440))+(((-1.0)*x13437*x13438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13442=((1.0)*cj15);
IkReal x13443=((1.0)*cj10);
IkReal x13444=(cj10*cj16);
CheckValue<IkReal> x13445=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*r12*x13442)))),-1);
if(!x13445.valid){
continue;
}
CheckValue<IkReal> x13446 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r21*x13444))+(((-1.0)*cj10*r20*sj16*x13442))+(((-1.0)*r22*sj15*x13443)))),IkReal((((r20*x13444))+(((-1.0)*r21*sj16*x13443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13446.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13445.value)))+(x13446.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13447=IKsin(j14);
IkReal x13448=(cj16*r20);
IkReal x13449=IKcos(j14);
IkReal x13450=(sj15*x13449);
IkReal x13451=(r21*sj16);
IkReal x13452=((1.0)*x13447);
IkReal x13453=(cj15*cj16*x13449);
IkReal x13454=(cj15*sj16*x13449);
IkReal x13455=(cj16*r00);
IkReal x13456=((1.0)*r01*sj16);
IkReal x13457=(cj16*r10);
IkReal x13458=(r11*sj16);
IkReal x13459=((1.0)*x13449);
IkReal x13460=((1.0)*sj15*x13447);
IkReal x13461=((1.0)*cj15*cj16*x13447);
IkReal x13462=((1.0)*cj15*sj16*x13447);
evalcond[0]=(((r22*x13450))+((x13447*x13448))+(((-1.0)*x13451*x13452))+((r20*x13454))+((r21*x13453)));
evalcond[1]=(((r00*x13454))+((r01*x13453))+((x13447*x13455))+cj10+(((-1.0)*x13447*x13456))+((r02*x13450)));
evalcond[2]=((((-1.0)*x13452*x13458))+((r10*x13454))+((r11*x13453))+((x13447*x13457))+sj10+((r12*x13450)));
evalcond[3]=(((x13448*x13449))+(((-1.0)*r20*x13462))+(((-1.0)*r22*x13460))+(((-1.0)*x13451*x13459))+(((-1.0)*r21*x13461)));
evalcond[4]=(((x13449*x13455))+sj10+(((-1.0)*r01*x13461))+(((-1.0)*r00*x13462))+(((-1.0)*x13449*x13456))+(((-1.0)*r02*x13460)));
evalcond[5]=((((-1.0)*r10*x13462))+(((-1.0)*r12*x13460))+(((-1.0)*x13458*x13459))+(((-1.0)*r11*x13461))+((x13449*x13457))+(((-1.0)*(1.0)*cj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13463=((1.0)*cj16*sj15);
IkReal x13464=((1.0)*sj15*sj16);
if( IKabs(((((-1.0)*r10*x13464))+(((-1.0)*r11*x13463))+((cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x13463))+((cj15*r02))+(((-1.0)*r00*x13464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x13464))+(((-1.0)*r11*x13463))+((cj15*r12))))+IKsqr(((((-1.0)*r01*x13463))+((cj15*r02))+(((-1.0)*r00*x13464))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x13464))+(((-1.0)*r11*x13463))+((cj15*r12))), ((((-1.0)*r01*x13463))+((cj15*r02))+(((-1.0)*r00*x13464))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x13465=((1.0)*cj16*sj15);
IkReal x13466=((1.0)*sj15*sj16);
evalcond[0]=((((-1.0)*r11*x13465))+(((-1.0)*(1.0)*(IKsin(j10))))+(((-1.0)*r10*x13466))+((cj15*r12)));
evalcond[1]=((((-1.0)*(1.0)*(IKcos(j10))))+(((-1.0)*r00*x13466))+((cj15*r02))+(((-1.0)*r01*x13465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x13467=(((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02)));
j14eval[0]=x13467;
j14eval[1]=IKsign(x13467);
j14eval[2]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs((((r11*sj16))+(((-1.0)*(1.0)*cj16*r10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x13468=((1.0)*cj16);
IkReal x13469=((((-1.0)*r11*sj15*x13468))+((cj15*r12))+(((-1.0)*(1.0)*r10*sj15*sj16)));
j14eval[0]=x13469;
j14eval[1]=IKsign(x13469);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*r00*x13468)))))+(IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x13470=r01*r01;
IkReal x13471=((1.0)*x13470);
IkReal x13472=r02*r02;
IkReal x13473=((2.0)*cj16);
IkReal x13474=(r00*r01*sj16*x13473);
IkReal x13475=cj15*cj15;
IkReal x13476=cj16*cj16;
IkReal x13477=(cj15*r00);
IkReal x13478=r00*r00;
IkReal x13479=((1.0)*x13478);
IkReal x13480=(x13475*x13476);
IkReal x13481=((((-2.0)*r02*sj15*sj16*x13477))+((x13472*x13475))+(((-1.0)*x13475*x13479))+(((-1.0)*x13476*x13479))+((x13470*x13476))+x13474+(((-1.0)*x13472))+((x13478*x13480))+(((-1.0)*x13471))+(((-1.0)*x13474*x13475))+(((-1.0)*cj15*r01*r02*sj15*x13473))+(((-1.0)*x13471*x13480)));
IkReal x13482=(cj16*sj10);
IkReal x13483=(sj10*sj16);
j14eval[0]=x13481;
j14eval[1]=((IKabs((((x13477*x13483))+((sj10*((r02*sj15))))+((cj15*r01*x13482)))))+(IKabs(((((-1.0)*r01*x13483))+((r00*x13482))))));
j14eval[2]=IKsign(x13481);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x13484=(((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02)));
j14eval[0]=x13484;
j14eval[1]=IKsign(x13484);
j14eval[2]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs((((r11*sj16))+(((-1.0)*(1.0)*cj16*r10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x13485=((1.0)*cj16);
IkReal x13486=((((-1.0)*r11*sj15*x13485))+((cj15*r12))+(((-1.0)*(1.0)*r10*sj15*sj16)));
j14eval[0]=x13486;
j14eval[1]=IKsign(x13486);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*r00*x13485)))))+(IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x13487=r11*r11;
IkReal x13488=((1.0)*x13487);
IkReal x13489=r12*r12;
IkReal x13490=(cj16*r10);
IkReal x13491=((2.0)*r11*sj16*x13490);
IkReal x13492=cj15*cj15;
IkReal x13493=cj16*cj16;
IkReal x13494=((2.0)*r12*sj15);
IkReal x13495=(cj15*cj16*r11);
IkReal x13496=(cj15*r10*sj16);
IkReal x13497=r10*r10;
IkReal x13498=((1.0)*x13497);
IkReal x13499=(x13492*x13493);
IkReal x13500=((((-1.0)*x13491*x13492))+x13491+(((-1.0)*x13488*x13499))+(((-1.0)*x13493*x13498))+((x13497*x13499))+(((-1.0)*x13494*x13496))+((x13487*x13493))+(((-1.0)*x13488))+(((-1.0)*x13494*x13495))+((x13489*x13492))+(((-1.0)*x13489))+(((-1.0)*x13492*x13498)));
j14eval[0]=x13500;
j14eval[1]=((IKabs((x13495+x13496+((r12*sj15)))))+(IKabs((((r11*sj16))+(((-1.0)*x13490))))));
j14eval[2]=IKsign(x13500);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13501=(cj15*cj16*r11);
IkReal x13502=(cj15*r10*sj16);
IkReal x13503=(cj16*r10);
IkReal x13504=r11*r11;
IkReal x13505=((1.0)*x13504);
IkReal x13506=r12*r12;
IkReal x13507=((2.0)*r11*sj16*x13503);
IkReal x13508=cj15*cj15;
IkReal x13509=cj16*cj16;
IkReal x13510=((2.0)*r12*sj15);
IkReal x13511=r10*r10;
IkReal x13512=((1.0)*x13511);
IkReal x13513=(x13508*x13509);
CheckValue<IkReal> x13514=IKPowWithIntegerCheck(IKsign((((x13511*x13513))+((x13506*x13508))+(((-1.0)*x13509*x13512))+((x13504*x13509))+(((-1.0)*x13501*x13510))+(((-1.0)*x13505))+(((-1.0)*x13505*x13513))+(((-1.0)*x13507*x13508))+(((-1.0)*x13506))+x13507+(((-1.0)*x13508*x13512))+(((-1.0)*x13502*x13510)))),-1);
if(!x13514.valid){
continue;
}
CheckValue<IkReal> x13515 = IKatan2WithCheck(IkReal((((r12*sj15))+x13502+x13501)),IkReal(((((-1.0)*x13503))+((r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13515.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13514.value)))+(x13515.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13516=IKsin(j14);
IkReal x13517=(cj16*r00);
IkReal x13518=IKcos(j14);
IkReal x13519=(sj15*x13518);
IkReal x13520=((1.0)*r01*sj16);
IkReal x13521=(cj15*cj16*x13518);
IkReal x13522=(cj15*sj16*x13518);
IkReal x13523=(cj16*r10);
IkReal x13524=(r11*sj16);
IkReal x13525=((1.0)*x13516);
IkReal x13526=(cj16*r20);
IkReal x13527=(r21*sj16);
IkReal x13528=((1.0)*x13518);
IkReal x13529=((1.0)*sj15*x13516);
IkReal x13530=((1.0)*cj15*cj16*x13516);
IkReal x13531=((1.0)*cj15*sj16*x13516);
evalcond[0]=((((-1.0)*x13516*x13520))+((x13516*x13517))+((r02*x13519))+((r01*x13521))+((r00*x13522)));
evalcond[1]=(((x13516*x13523))+((r12*x13519))+((r10*x13522))+(((-1.0)*x13524*x13525))+((r11*x13521)));
evalcond[2]=((-1.0)+((r22*x13519))+((r21*x13521))+((r20*x13522))+(((-1.0)*x13525*x13527))+((x13516*x13526)));
evalcond[3]=(((x13518*x13526))+(((-1.0)*x13527*x13528))+(((-1.0)*r21*x13530))+(((-1.0)*r22*x13529))+(((-1.0)*r20*x13531)));
evalcond[4]=((((-1.0)*r01*x13530))+((x13517*x13518))+(((-1.0)*r00*x13531))+(((-1.0)*x13518*x13520))+(((-1.0)*r02*x13529)));
evalcond[5]=((-1.0)+(((-1.0)*x13524*x13528))+((x13518*x13523))+(((-1.0)*r12*x13529))+(((-1.0)*r10*x13531))+(((-1.0)*r11*x13530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13532=((1.0)*cj16);
CheckValue<IkReal> x13533 = IKatan2WithCheck(IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IkReal((((r01*sj16))+(((-1.0)*r00*x13532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13533.valid){
continue;
}
CheckValue<IkReal> x13534=IKPowWithIntegerCheck(IKsign((((cj15*r12))+(((-1.0)*(1.0)*r10*sj15*sj16))+(((-1.0)*r11*sj15*x13532)))),-1);
if(!x13534.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13533.value)+(((1.5707963267949)*(x13534.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13535=IKsin(j14);
IkReal x13536=(cj16*r00);
IkReal x13537=IKcos(j14);
IkReal x13538=(sj15*x13537);
IkReal x13539=((1.0)*r01*sj16);
IkReal x13540=(cj15*cj16*x13537);
IkReal x13541=(cj15*sj16*x13537);
IkReal x13542=(cj16*r10);
IkReal x13543=(r11*sj16);
IkReal x13544=((1.0)*x13535);
IkReal x13545=(cj16*r20);
IkReal x13546=(r21*sj16);
IkReal x13547=((1.0)*x13537);
IkReal x13548=((1.0)*sj15*x13535);
IkReal x13549=((1.0)*cj15*cj16*x13535);
IkReal x13550=((1.0)*cj15*sj16*x13535);
evalcond[0]=(((r02*x13538))+((r00*x13541))+(((-1.0)*x13535*x13539))+((r01*x13540))+((x13535*x13536)));
evalcond[1]=(((r11*x13540))+((r10*x13541))+(((-1.0)*x13543*x13544))+((r12*x13538))+((x13535*x13542)));
evalcond[2]=((-1.0)+((r22*x13538))+((r20*x13541))+((r21*x13540))+((x13535*x13545))+(((-1.0)*x13544*x13546)));
evalcond[3]=((((-1.0)*r21*x13549))+(((-1.0)*r22*x13548))+(((-1.0)*x13546*x13547))+(((-1.0)*r20*x13550))+((x13537*x13545)));
evalcond[4]=(((x13536*x13537))+(((-1.0)*r01*x13549))+(((-1.0)*r00*x13550))+(((-1.0)*x13537*x13539))+(((-1.0)*r02*x13548)));
evalcond[5]=((-1.0)+(((-1.0)*x13543*x13547))+(((-1.0)*r11*x13549))+(((-1.0)*r10*x13550))+(((-1.0)*r12*x13548))+((x13537*x13542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13551 = IKatan2WithCheck(IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IkReal((((r11*sj16))+(((-1.0)*(1.0)*cj16*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13551.valid){
continue;
}
CheckValue<IkReal> x13552=IKPowWithIntegerCheck(IKsign((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02)))),-1);
if(!x13552.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13551.value)+(((1.5707963267949)*(x13552.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13553=IKsin(j14);
IkReal x13554=(cj16*r00);
IkReal x13555=IKcos(j14);
IkReal x13556=(sj15*x13555);
IkReal x13557=((1.0)*r01*sj16);
IkReal x13558=(cj15*cj16*x13555);
IkReal x13559=(cj15*sj16*x13555);
IkReal x13560=(cj16*r10);
IkReal x13561=(r11*sj16);
IkReal x13562=((1.0)*x13553);
IkReal x13563=(cj16*r20);
IkReal x13564=(r21*sj16);
IkReal x13565=((1.0)*x13555);
IkReal x13566=((1.0)*sj15*x13553);
IkReal x13567=((1.0)*cj15*cj16*x13553);
IkReal x13568=((1.0)*cj15*sj16*x13553);
evalcond[0]=(((r00*x13559))+((r01*x13558))+((x13553*x13554))+(((-1.0)*x13553*x13557))+((r02*x13556)));
evalcond[1]=((((-1.0)*x13561*x13562))+((r11*x13558))+((x13553*x13560))+((r12*x13556))+((r10*x13559)));
evalcond[2]=((-1.0)+(((-1.0)*x13562*x13564))+((r21*x13558))+((x13553*x13563))+((r22*x13556))+((r20*x13559)));
evalcond[3]=((((-1.0)*r20*x13568))+(((-1.0)*r22*x13566))+(((-1.0)*r21*x13567))+((x13555*x13563))+(((-1.0)*x13564*x13565)));
evalcond[4]=(((x13554*x13555))+(((-1.0)*x13555*x13557))+(((-1.0)*r02*x13566))+(((-1.0)*r01*x13567))+(((-1.0)*r00*x13568)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x13567))+((x13555*x13560))+(((-1.0)*r10*x13568))+(((-1.0)*x13561*x13565))+(((-1.0)*r12*x13566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13569=(((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02)));
j14eval[0]=x13569;
j14eval[1]=IKsign(x13569);
j14eval[2]=((IKabs((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))))+(IKabs((((r11*sj16))+(((-1.0)*(1.0)*cj16*r10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13570=((1.0)*cj16);
IkReal x13571=((((-1.0)*r11*sj15*x13570))+((cj15*r12))+(((-1.0)*(1.0)*r10*sj15*sj16)));
j14eval[0]=x13571;
j14eval[1]=IKsign(x13571);
j14eval[2]=((IKabs((((r01*sj16))+(((-1.0)*r00*x13570)))))+(IKabs((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13572=r11*r11;
IkReal x13573=r12*r12;
IkReal x13574=(cj16*r10);
IkReal x13575=((2.0)*r11*sj16*x13574);
IkReal x13576=cj15*cj15;
IkReal x13577=r10*r10;
IkReal x13578=(x13576*x13577);
IkReal x13579=cj16*cj16;
IkReal x13580=((2.0)*r12*sj15);
IkReal x13581=(cj15*cj16*r11);
IkReal x13582=(cj15*r10*sj16);
IkReal x13583=(x13572*x13579);
IkReal x13584=(((x13580*x13582))+((x13577*x13579))+((x13580*x13581))+(((-1.0)*x13578*x13579))+(((-1.0)*x13583))+((x13576*x13583))+((x13575*x13576))+x13573+x13572+x13578+(((-1.0)*x13573*x13576))+(((-1.0)*x13575)));
j14eval[0]=x13584;
j14eval[1]=IKsign(x13584);
j14eval[2]=((IKabs((((r12*sj15))+x13581+x13582)))+(IKabs((((r11*sj16))+(((-1.0)*x13574))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13585=(cj15*cj16*r11);
IkReal x13586=(cj15*r10*sj16);
IkReal x13587=(cj16*r10);
IkReal x13588=r11*r11;
IkReal x13589=r12*r12;
IkReal x13590=((2.0)*r11*sj16*x13587);
IkReal x13591=cj15*cj15;
IkReal x13592=r10*r10;
IkReal x13593=(x13591*x13592);
IkReal x13594=cj16*cj16;
IkReal x13595=((2.0)*r12*sj15);
IkReal x13596=(x13588*x13594);
CheckValue<IkReal> x13597 = IKatan2WithCheck(IkReal((((r12*sj15))+x13585+x13586)),IkReal(((((-1.0)*x13587))+((r11*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13597.valid){
continue;
}
CheckValue<IkReal> x13598=IKPowWithIntegerCheck(IKsign((((x13592*x13594))+((x13590*x13591))+(((-1.0)*x13590))+x13593+((x13591*x13596))+x13589+x13588+((x13585*x13595))+(((-1.0)*x13589*x13591))+((x13586*x13595))+(((-1.0)*x13593*x13594))+(((-1.0)*x13596)))),-1);
if(!x13598.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13597.value)+(((1.5707963267949)*(x13598.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13599=IKsin(j14);
IkReal x13600=(cj16*r00);
IkReal x13601=IKcos(j14);
IkReal x13602=(sj15*x13601);
IkReal x13603=((1.0)*r01*sj16);
IkReal x13604=(cj15*cj16*x13601);
IkReal x13605=(cj15*sj16*x13601);
IkReal x13606=(cj16*r10);
IkReal x13607=(r11*sj16);
IkReal x13608=((1.0)*x13599);
IkReal x13609=(cj16*r20);
IkReal x13610=(r21*sj16);
IkReal x13611=((1.0)*x13601);
IkReal x13612=((1.0)*sj15*x13599);
IkReal x13613=((1.0)*cj15*cj16*x13599);
IkReal x13614=((1.0)*cj15*sj16*x13599);
evalcond[0]=(((r02*x13602))+(((-1.0)*x13599*x13603))+((r01*x13604))+((x13599*x13600))+((r00*x13605)));
evalcond[1]=((((-1.0)*x13607*x13608))+((r10*x13605))+((r11*x13604))+((r12*x13602))+((x13599*x13606)));
evalcond[2]=((-1.0)+((r21*x13604))+((x13599*x13609))+(((-1.0)*x13608*x13610))+((r20*x13605))+((r22*x13602)));
evalcond[3]=((((-1.0)*x13610*x13611))+(((-1.0)*r20*x13614))+((x13601*x13609))+(((-1.0)*r22*x13612))+(((-1.0)*r21*x13613)));
evalcond[4]=(((x13600*x13601))+(((-1.0)*x13601*x13603))+(((-1.0)*r01*x13613))+(((-1.0)*r02*x13612))+(((-1.0)*r00*x13614)));
evalcond[5]=((1.0)+(((-1.0)*r11*x13613))+((x13601*x13606))+(((-1.0)*x13607*x13611))+(((-1.0)*r12*x13612))+(((-1.0)*r10*x13614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13615=((1.0)*cj16);
CheckValue<IkReal> x13616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj15*x13615))+((cj15*r12))+(((-1.0)*(1.0)*r10*sj15*sj16)))),-1);
if(!x13616.valid){
continue;
}
CheckValue<IkReal> x13617 = IKatan2WithCheck(IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IkReal((((r01*sj16))+(((-1.0)*r00*x13615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13617.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13616.value)))+(x13617.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13618=IKsin(j14);
IkReal x13619=(cj16*r00);
IkReal x13620=IKcos(j14);
IkReal x13621=(sj15*x13620);
IkReal x13622=((1.0)*r01*sj16);
IkReal x13623=(cj15*cj16*x13620);
IkReal x13624=(cj15*sj16*x13620);
IkReal x13625=(cj16*r10);
IkReal x13626=(r11*sj16);
IkReal x13627=((1.0)*x13618);
IkReal x13628=(cj16*r20);
IkReal x13629=(r21*sj16);
IkReal x13630=((1.0)*x13620);
IkReal x13631=((1.0)*sj15*x13618);
IkReal x13632=((1.0)*cj15*cj16*x13618);
IkReal x13633=((1.0)*cj15*sj16*x13618);
evalcond[0]=(((x13618*x13619))+(((-1.0)*x13618*x13622))+((r00*x13624))+((r01*x13623))+((r02*x13621)));
evalcond[1]=(((r11*x13623))+((x13618*x13625))+((r12*x13621))+((r10*x13624))+(((-1.0)*x13626*x13627)));
evalcond[2]=((-1.0)+((r21*x13623))+((r20*x13624))+((x13618*x13628))+(((-1.0)*x13627*x13629))+((r22*x13621)));
evalcond[3]=((((-1.0)*r21*x13632))+((x13620*x13628))+(((-1.0)*x13629*x13630))+(((-1.0)*r20*x13633))+(((-1.0)*r22*x13631)));
evalcond[4]=((((-1.0)*r02*x13631))+((x13619*x13620))+(((-1.0)*x13620*x13622))+(((-1.0)*r00*x13633))+(((-1.0)*r01*x13632)));
evalcond[5]=((1.0)+(((-1.0)*r10*x13633))+(((-1.0)*x13626*x13630))+(((-1.0)*r11*x13632))+(((-1.0)*r12*x13631))+((x13620*x13625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13634 = IKatan2WithCheck(IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IkReal((((r11*sj16))+(((-1.0)*(1.0)*cj16*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13634.valid){
continue;
}
CheckValue<IkReal> x13635=IKPowWithIntegerCheck(IKsign((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02)))),-1);
if(!x13635.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13634.value)+(((1.5707963267949)*(x13635.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13636=IKsin(j14);
IkReal x13637=(cj16*r00);
IkReal x13638=IKcos(j14);
IkReal x13639=(sj15*x13638);
IkReal x13640=((1.0)*r01*sj16);
IkReal x13641=(cj15*cj16*x13638);
IkReal x13642=(cj15*sj16*x13638);
IkReal x13643=(cj16*r10);
IkReal x13644=(r11*sj16);
IkReal x13645=((1.0)*x13636);
IkReal x13646=(cj16*r20);
IkReal x13647=(r21*sj16);
IkReal x13648=((1.0)*x13638);
IkReal x13649=((1.0)*sj15*x13636);
IkReal x13650=((1.0)*cj15*cj16*x13636);
IkReal x13651=((1.0)*cj15*sj16*x13636);
evalcond[0]=(((r00*x13642))+((x13636*x13637))+((r02*x13639))+(((-1.0)*x13636*x13640))+((r01*x13641)));
evalcond[1]=(((x13636*x13643))+((r10*x13642))+(((-1.0)*x13644*x13645))+((r11*x13641))+((r12*x13639)));
evalcond[2]=((-1.0)+((r21*x13641))+(((-1.0)*x13645*x13647))+((r20*x13642))+((x13636*x13646))+((r22*x13639)));
evalcond[3]=((((-1.0)*x13647*x13648))+((x13638*x13646))+(((-1.0)*r21*x13650))+(((-1.0)*r20*x13651))+(((-1.0)*r22*x13649)));
evalcond[4]=((((-1.0)*r01*x13650))+(((-1.0)*r02*x13649))+(((-1.0)*r00*x13651))+(((-1.0)*x13638*x13640))+((x13637*x13638)));
evalcond[5]=((1.0)+(((-1.0)*x13644*x13648))+((x13638*x13643))+(((-1.0)*r10*x13651))+(((-1.0)*r12*x13649))+(((-1.0)*r11*x13650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13652=(cj15*r00);
IkReal x13653=((1.0)*sj10*sj16);
IkReal x13654=r01*r01;
IkReal x13655=((1.0)*x13654);
IkReal x13656=r02*r02;
IkReal x13657=((2.0)*cj16);
IkReal x13658=(r00*r01*sj16*x13657);
IkReal x13659=cj15*cj15;
IkReal x13660=cj16*cj16;
IkReal x13661=r00*r00;
IkReal x13662=((1.0)*x13661);
IkReal x13663=(x13659*x13660);
CheckValue<IkReal> x13664 = IKatan2WithCheck(IkReal(((((-1.0)*x13652*x13653))+(((-1.0)*cj15*cj16*r01*sj10))+(((-1.0)*r02*sj10*sj15)))),IkReal(((((-1.0)*r01*x13653))+((r00*((cj16*sj10)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x13664.valid){
continue;
}
CheckValue<IkReal> x13665=IKPowWithIntegerCheck(IKsign((x13658+(((-2.0)*r02*sj15*sj16*x13652))+(((-1.0)*x13655*x13663))+(((-1.0)*x13656))+(((-1.0)*x13660*x13662))+(((-1.0)*x13658*x13659))+(((-1.0)*x13659*x13662))+((x13656*x13659))+((x13661*x13663))+((x13654*x13660))+(((-1.0)*cj15*r01*r02*sj15*x13657))+(((-1.0)*x13655)))),-1);
if(!x13665.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13664.value)+(((1.5707963267949)*(x13665.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13666=IKsin(j14);
IkReal x13667=(cj16*r00);
IkReal x13668=IKcos(j14);
IkReal x13669=(sj15*x13668);
IkReal x13670=((1.0)*r01*sj16);
IkReal x13671=(cj15*cj16*x13668);
IkReal x13672=(cj15*sj16*x13668);
IkReal x13673=(cj16*r10);
IkReal x13674=(r11*sj16);
IkReal x13675=((1.0)*x13666);
IkReal x13676=(cj16*r20);
IkReal x13677=(r21*sj16);
IkReal x13678=((1.0)*x13668);
IkReal x13679=((1.0)*sj15*x13666);
IkReal x13680=((1.0)*cj15*cj16*x13666);
IkReal x13681=((1.0)*cj15*sj16*x13666);
evalcond[0]=(((r02*x13669))+((r00*x13672))+((r01*x13671))+(((-1.0)*x13666*x13670))+((x13666*x13667)));
evalcond[1]=(((r10*x13672))+((r11*x13671))+((r12*x13669))+((x13666*x13673))+(((-1.0)*x13674*x13675)));
evalcond[2]=((-1.0)+((r21*x13671))+(((-1.0)*x13675*x13677))+((r22*x13669))+((x13666*x13676))+((r20*x13672)));
evalcond[3]=((((-1.0)*x13677*x13678))+(((-1.0)*r21*x13680))+(((-1.0)*r22*x13679))+(((-1.0)*r20*x13681))+((x13668*x13676)));
evalcond[4]=((((-1.0)*x13668*x13670))+(((-1.0)*r00*x13681))+sj10+((x13667*x13668))+(((-1.0)*r01*x13680))+(((-1.0)*r02*x13679)));
evalcond[5]=((((-1.0)*x13674*x13678))+(((-1.0)*r10*x13681))+(((-1.0)*(1.0)*cj10))+(((-1.0)*r12*x13679))+(((-1.0)*r11*x13680))+((x13668*x13673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13682=((1.0)*cj16);
CheckValue<IkReal> x13683 = IKatan2WithCheck(IkReal((((cj15*r00*sj16))+((r02*sj15))+((cj15*cj16*r01)))),IkReal((((r01*sj16))+(((-1.0)*r00*x13682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13683.valid){
continue;
}
CheckValue<IkReal> x13684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj15*x13682))+((cj15*r12))+(((-1.0)*(1.0)*r10*sj15*sj16)))),-1);
if(!x13684.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13683.value)+(((1.5707963267949)*(x13684.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13685=IKsin(j14);
IkReal x13686=(cj16*r00);
IkReal x13687=IKcos(j14);
IkReal x13688=(sj15*x13687);
IkReal x13689=((1.0)*r01*sj16);
IkReal x13690=(cj15*cj16*x13687);
IkReal x13691=(cj15*sj16*x13687);
IkReal x13692=(cj16*r10);
IkReal x13693=(r11*sj16);
IkReal x13694=((1.0)*x13685);
IkReal x13695=(cj16*r20);
IkReal x13696=(r21*sj16);
IkReal x13697=((1.0)*x13687);
IkReal x13698=((1.0)*sj15*x13685);
IkReal x13699=((1.0)*cj15*cj16*x13685);
IkReal x13700=((1.0)*cj15*sj16*x13685);
evalcond[0]=(((r02*x13688))+((r00*x13691))+((x13685*x13686))+(((-1.0)*x13685*x13689))+((r01*x13690)));
evalcond[1]=(((x13685*x13692))+((r10*x13691))+((r12*x13688))+((r11*x13690))+(((-1.0)*x13693*x13694)));
evalcond[2]=((-1.0)+((r22*x13688))+((r20*x13691))+((r21*x13690))+(((-1.0)*x13694*x13696))+((x13685*x13695)));
evalcond[3]=(((x13687*x13695))+(((-1.0)*x13696*x13697))+(((-1.0)*r21*x13699))+(((-1.0)*r20*x13700))+(((-1.0)*r22*x13698)));
evalcond[4]=((((-1.0)*x13687*x13689))+((x13686*x13687))+(((-1.0)*r00*x13700))+sj10+(((-1.0)*r02*x13698))+(((-1.0)*r01*x13699)));
evalcond[5]=((((-1.0)*x13693*x13697))+((x13687*x13692))+(((-1.0)*r10*x13700))+(((-1.0)*(1.0)*cj10))+(((-1.0)*r12*x13698))+(((-1.0)*r11*x13699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13701 = IKatan2WithCheck(IkReal((((cj15*r10*sj16))+((cj15*cj16*r11))+((r12*sj15)))),IkReal((((r11*sj16))+(((-1.0)*(1.0)*cj16*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13701.valid){
continue;
}
CheckValue<IkReal> x13702=IKPowWithIntegerCheck(IKsign((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02)))),-1);
if(!x13702.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13701.value)+(((1.5707963267949)*(x13702.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13703=IKsin(j14);
IkReal x13704=(cj16*r00);
IkReal x13705=IKcos(j14);
IkReal x13706=(sj15*x13705);
IkReal x13707=((1.0)*r01*sj16);
IkReal x13708=(cj15*cj16*x13705);
IkReal x13709=(cj15*sj16*x13705);
IkReal x13710=(cj16*r10);
IkReal x13711=(r11*sj16);
IkReal x13712=((1.0)*x13703);
IkReal x13713=(cj16*r20);
IkReal x13714=(r21*sj16);
IkReal x13715=((1.0)*x13705);
IkReal x13716=((1.0)*sj15*x13703);
IkReal x13717=((1.0)*cj15*cj16*x13703);
IkReal x13718=((1.0)*cj15*sj16*x13703);
evalcond[0]=(((r00*x13709))+((r01*x13708))+((x13703*x13704))+(((-1.0)*x13703*x13707))+((r02*x13706)));
evalcond[1]=(((x13703*x13710))+(((-1.0)*x13711*x13712))+((r10*x13709))+((r11*x13708))+((r12*x13706)));
evalcond[2]=((-1.0)+((r20*x13709))+((r22*x13706))+(((-1.0)*x13712*x13714))+((r21*x13708))+((x13703*x13713)));
evalcond[3]=((((-1.0)*r22*x13716))+(((-1.0)*r21*x13717))+((x13705*x13713))+(((-1.0)*r20*x13718))+(((-1.0)*x13714*x13715)));
evalcond[4]=((((-1.0)*r02*x13716))+((x13704*x13705))+(((-1.0)*x13705*x13707))+sj10+(((-1.0)*r01*x13717))+(((-1.0)*r00*x13718)));
evalcond[5]=((((-1.0)*r12*x13716))+(((-1.0)*x13711*x13715))+(((-1.0)*r10*x13718))+((x13705*x13710))+(((-1.0)*(1.0)*cj10))+(((-1.0)*r11*x13717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13719=(cj12*sj11);
IkReal x13720=((69.0)*x13719);
IkReal x13721=((364.42)*cj11);
IkReal x13722=(cj15*r12);
IkReal x13723=((69.0)*x13722);
IkReal x13724=((1000.0)*px);
IkReal x13725=((374.29)*cj15);
IkReal x13726=(r02*sj12);
IkReal x13727=((69.0)*sj15);
IkReal x13728=(cj16*r11);
IkReal x13729=(x13727*x13728);
IkReal x13730=((10.0)*sj15);
IkReal x13731=(r10*sj16);
IkReal x13732=(x13727*x13731);
IkReal x13733=((364.42)*cj11*sj15);
IkReal x13734=(cj16*r01);
IkReal x13735=((10.0)*cj15*sj12);
IkReal x13736=(r00*sj16);
IkReal x13737=((374.29)*sj12*sj15);
IkReal x13738=((69.0)*cj12*sj11*sj15);
IkReal x13739=(cj12*r02*sj11);
IkReal x13740=((10.0)*cj12*cj15*sj11);
IkReal x13741=((374.29)*cj12*sj11*sj15);
CheckValue<IkReal> x13742 = IKatan2WithCheck(IkReal(((((-1.0)*x13728*x13733))+((x13734*x13737))+(((-1.0)*x13734*x13735))+((x13731*x13738))+(((-1.0)*x13726*x13730))+(((-1.0)*x13731*x13733))+((x13736*x13737))+((x13721*x13722))+(((-1.0)*x13729))+(((-1.0)*x13720*x13722))+((x13728*x13738))+((sj12*x13724))+(((-1.0)*x13732))+(((-1.0)*x13725*x13726))+(((-1.0)*x13735*x13736))+x13723)),IkReal(((((-1.0)*x13730*x13739))+(((-1.0)*x13736*x13740))+((sj12*x13723))+((x13736*x13741))+((x13719*x13724))+(((-1.0)*x13734*x13740))+(((-1.0)*x13725*x13739))+(((-1.0)*sj12*x13729))+(((-1.0)*sj12*x13732))+((x13734*x13741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13742.valid){
continue;
}
CheckValue<IkReal> x13743=IKPowWithIntegerCheck(IKsign(((-69.0)+(((69.0)*(cj11*cj11)*(cj12*cj12)))+((x13719*x13721))+x13720)),-1);
if(!x13743.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x13742.value)+(((1.5707963267949)*(x13743.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x13744=(cj15*r12);
IkReal x13745=IKcos(j10);
IkReal x13746=(sj12*x13745);
IkReal x13747=(cj16*r11*sj15);
IkReal x13748=(r10*sj15*sj16);
IkReal x13749=(cj12*sj11);
IkReal x13750=IKsin(j10);
IkReal x13751=((1.0)*x13750);
IkReal x13752=(cj15*r02);
IkReal x13753=(cj16*r01*sj15);
IkReal x13754=(r00*sj15*sj16);
IkReal x13755=((0.01)*sj15);
IkReal x13756=((0.069)*x13745);
IkReal x13757=((0.36442)*cj11);
IkReal x13758=((0.069)*x13750);
IkReal x13759=((0.01)*cj15*cj16);
IkReal x13760=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x13747))+(((-1.0)*x13749*x13751))+x13744+x13746+(((-1.0)*x13748)));
evalcond[1]=((((-1.0)*x13745*x13749))+(((-1.0)*x13754))+x13752+(((-1.0)*sj12*x13751))+(((-1.0)*x13753)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*x13749*x13756))+((r00*x13760))+((r01*x13759))+((x13745*x13757))+((r02*x13755))+(((0.37429)*x13752))+x13756+(((-1.0)*sj12*x13758))+(((-0.37429)*x13754))+(((-0.37429)*x13753)));
evalcond[3]=(((r11*x13759))+(((0.069)*x13746))+(((-1.0)*x13749*x13758))+((r10*x13760))+(((-1.0)*(1.0)*py))+((x13750*x13757))+((r12*x13755))+(((-0.37429)*x13747))+x13758+(((0.37429)*x13744))+(((-0.37429)*x13748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13761=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x13761;
j14eval[1]=IKsign(x13761);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13762=((1.0)*sj15);
IkReal x13763=((((-1.0)*r00*sj16*x13762))+((cj15*r02))+(((-1.0)*cj16*r01*x13762)));
j14eval[0]=x13763;
j14eval[1]=IKsign(x13763);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13764=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x13764;
j14eval[1]=IKsign(x13764);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13765=((1.0)*cj10*cj11);
IkReal x13766=(cj11*r01*sj10);
IkReal x13767=(cj11*r00*sj10);
IkReal x13768=(cj10*cj11*cj16);
CheckValue<IkReal> x13769 = IKatan2WithCheck(IkReal((((((r02*sj15))*((cj11*sj10))))+((cj15*sj16*x13767))+(((-1.0)*cj15*r11*x13768))+((cj15*cj16*x13766))+(((-1.0)*cj10*cj11*cj15*r10*sj16))+(((-1.0)*r12*sj15*x13765)))),IkReal((((r10*x13768))+(((-1.0)*r11*sj16*x13765))+(((-1.0)*cj16*x13767))+((sj16*x13766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13769.valid){
continue;
}
CheckValue<IkReal> x13770=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+(((-1.0)*cj15*r22))+((cj16*r21*sj15)))),-1);
if(!x13770.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13769.value)+(((1.5707963267949)*(x13770.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13771=IKsin(j14);
IkReal x13772=(cj16*r20);
IkReal x13773=IKcos(j14);
IkReal x13774=(sj15*x13773);
IkReal x13775=(r21*sj16);
IkReal x13776=((1.0)*x13771);
IkReal x13777=(cj15*cj16*x13773);
IkReal x13778=(cj15*sj16*x13773);
IkReal x13779=((1.0)*cj11);
IkReal x13780=(cj16*r00);
IkReal x13781=((1.0)*r01*sj16);
IkReal x13782=(cj16*r10);
IkReal x13783=(r11*sj16);
IkReal x13784=((1.0)*x13773);
IkReal x13785=((1.0)*sj15*x13771);
IkReal x13786=((1.0)*cj15*cj16*x13771);
IkReal x13787=((1.0)*cj15*sj16*x13771);
IkReal x13788=(sj11*sj12);
evalcond[0]=(((r22*x13774))+((r20*x13778))+((r21*x13777))+(((-1.0)*x13775*x13776))+sj11+((x13771*x13772)));
evalcond[1]=(((r00*x13778))+(((-1.0)*x13771*x13781))+((x13771*x13780))+(((-1.0)*cj10*x13779))+((r02*x13774))+((r01*x13777)));
evalcond[2]=((((-1.0)*sj10*x13779))+((r10*x13778))+((r12*x13774))+(((-1.0)*x13776*x13783))+((x13771*x13782))+((r11*x13777)));
evalcond[3]=((((-1.0)*x13775*x13784))+((x13772*x13773))+(((-1.0)*r21*x13786))+(((-1.0)*r20*x13787))+((cj11*sj12))+(((-1.0)*r22*x13785)));
evalcond[4]=((((-1.0)*r11*x13786))+(((-1.0)*x13783*x13784))+((x13773*x13782))+(((-1.0)*r12*x13785))+((sj10*x13788))+((cj10*cj12))+(((-1.0)*r10*x13787)));
evalcond[5]=((((-1.0)*x13773*x13781))+(((-1.0)*r00*x13787))+((cj10*x13788))+(((-1.0)*r02*x13785))+((x13773*x13780))+(((-1.0)*(1.0)*cj12*sj10))+(((-1.0)*r01*x13786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13789=((1.0)*cj16);
IkReal x13790=(cj15*cj16);
IkReal x13791=(r11*sj11);
IkReal x13792=(cj15*sj16);
IkReal x13793=(r10*sj11);
IkReal x13794=(cj11*r21*sj10);
IkReal x13795=(cj11*r20*sj10);
CheckValue<IkReal> x13796 = IKatan2WithCheck(IkReal((((x13790*x13791))+((((r22*sj15))*((cj11*sj10))))+((x13792*x13795))+((x13792*x13793))+((x13790*x13794))+((r12*sj11*sj15)))),IkReal((((sj16*x13794))+(((-1.0)*x13789*x13795))+((sj16*x13791))+(((-1.0)*x13789*x13793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13796.valid){
continue;
}
CheckValue<IkReal> x13797=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02))+(((-1.0)*r01*sj15*x13789)))),-1);
if(!x13797.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13796.value)+(((1.5707963267949)*(x13797.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13798=IKsin(j14);
IkReal x13799=(cj16*r20);
IkReal x13800=IKcos(j14);
IkReal x13801=(sj15*x13800);
IkReal x13802=(r21*sj16);
IkReal x13803=((1.0)*x13798);
IkReal x13804=(cj15*cj16*x13800);
IkReal x13805=(cj15*sj16*x13800);
IkReal x13806=((1.0)*cj11);
IkReal x13807=(cj16*r00);
IkReal x13808=((1.0)*r01*sj16);
IkReal x13809=(cj16*r10);
IkReal x13810=(r11*sj16);
IkReal x13811=((1.0)*x13800);
IkReal x13812=((1.0)*sj15*x13798);
IkReal x13813=((1.0)*cj15*cj16*x13798);
IkReal x13814=((1.0)*cj15*sj16*x13798);
IkReal x13815=(sj11*sj12);
evalcond[0]=((((-1.0)*x13802*x13803))+sj11+((r22*x13801))+((r21*x13804))+((x13798*x13799))+((r20*x13805)));
evalcond[1]=(((r00*x13805))+(((-1.0)*x13798*x13808))+(((-1.0)*cj10*x13806))+((r02*x13801))+((r01*x13804))+((x13798*x13807)));
evalcond[2]=(((r11*x13804))+((r12*x13801))+((x13798*x13809))+(((-1.0)*x13803*x13810))+((r10*x13805))+(((-1.0)*sj10*x13806)));
evalcond[3]=((((-1.0)*r21*x13813))+(((-1.0)*r20*x13814))+(((-1.0)*r22*x13812))+((x13799*x13800))+((cj11*sj12))+(((-1.0)*x13802*x13811)));
evalcond[4]=((((-1.0)*r11*x13813))+(((-1.0)*r12*x13812))+((x13800*x13809))+((sj10*x13815))+((cj10*cj12))+(((-1.0)*x13810*x13811))+(((-1.0)*r10*x13814)));
evalcond[5]=(((x13800*x13807))+(((-1.0)*x13800*x13808))+(((-1.0)*r00*x13814))+(((-1.0)*(1.0)*cj12*sj10))+(((-1.0)*r02*x13812))+((cj10*x13815))+(((-1.0)*r01*x13813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13816=(cj15*cj16);
IkReal x13817=(r01*sj11);
IkReal x13818=(cj15*sj16);
IkReal x13819=(r00*sj11);
IkReal x13820=(cj10*cj11*r21);
IkReal x13821=(cj10*cj11*r20);
IkReal x13822=((1.0)*cj16);
CheckValue<IkReal> x13823 = IKatan2WithCheck(IkReal((((r02*sj11*sj15))+((x13816*x13817))+((x13818*x13819))+((x13818*x13821))+((((r22*sj15))*((cj10*cj11))))+((x13816*x13820)))),IkReal((((sj16*x13820))+(((-1.0)*x13821*x13822))+(((-1.0)*x13819*x13822))+((sj16*x13817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13823.valid){
continue;
}
CheckValue<IkReal> x13824=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x13824.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13823.value)+(((1.5707963267949)*(x13824.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13825=IKsin(j14);
IkReal x13826=(cj16*r20);
IkReal x13827=IKcos(j14);
IkReal x13828=(sj15*x13827);
IkReal x13829=(r21*sj16);
IkReal x13830=((1.0)*x13825);
IkReal x13831=(cj15*cj16*x13827);
IkReal x13832=(cj15*sj16*x13827);
IkReal x13833=((1.0)*cj11);
IkReal x13834=(cj16*r00);
IkReal x13835=((1.0)*r01*sj16);
IkReal x13836=(cj16*r10);
IkReal x13837=(r11*sj16);
IkReal x13838=((1.0)*x13827);
IkReal x13839=((1.0)*sj15*x13825);
IkReal x13840=((1.0)*cj15*cj16*x13825);
IkReal x13841=((1.0)*cj15*sj16*x13825);
IkReal x13842=(sj11*sj12);
evalcond[0]=(((r21*x13831))+((r22*x13828))+((x13825*x13826))+sj11+((r20*x13832))+(((-1.0)*x13829*x13830)));
evalcond[1]=((((-1.0)*cj10*x13833))+((r02*x13828))+((r00*x13832))+(((-1.0)*x13825*x13835))+((r01*x13831))+((x13825*x13834)));
evalcond[2]=((((-1.0)*x13830*x13837))+(((-1.0)*sj10*x13833))+((x13825*x13836))+((r11*x13831))+((r12*x13828))+((r10*x13832)));
evalcond[3]=((((-1.0)*r21*x13840))+(((-1.0)*r22*x13839))+(((-1.0)*x13829*x13838))+(((-1.0)*r20*x13841))+((x13826*x13827))+((cj11*sj12)));
evalcond[4]=(((sj10*x13842))+(((-1.0)*r11*x13840))+(((-1.0)*x13837*x13838))+(((-1.0)*r12*x13839))+(((-1.0)*r10*x13841))+((cj10*cj12))+((x13827*x13836)));
evalcond[5]=((((-1.0)*r02*x13839))+((x13827*x13834))+((cj10*x13842))+(((-1.0)*x13827*x13835))+(((-1.0)*r00*x13841))+(((-1.0)*r01*x13840))+(((-1.0)*(1.0)*cj12*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13843=(cj16*r20);
IkReal x13844=((1.0)*sj16);
IkReal x13845=(r21*sj11);
IkReal x13846=(cj11*sj12);
IkReal x13847=(cj11*r21*sj12);
IkReal x13848=(cj15*r20*sj16);
IkReal x13849=r21*r21;
IkReal x13850=((1.0)*x13849);
IkReal x13851=r22*r22;
IkReal x13852=((2.0)*r21);
IkReal x13853=(cj16*r20*sj16*x13852);
IkReal x13854=cj15*cj15;
IkReal x13855=cj16*cj16;
IkReal x13856=r20*r20;
IkReal x13857=((1.0)*x13856);
IkReal x13858=(x13854*x13855);
CheckValue<IkReal> x13859=IKPowWithIntegerCheck(IKsign(((((-2.0)*r22*sj15*x13848))+((x13856*x13858))+((x13851*x13854))+(((-1.0)*x13855*x13857))+x13853+(((-1.0)*x13854*x13857))+(((-1.0)*x13851))+((x13849*x13855))+(((-1.0)*x13850*x13858))+(((-1.0)*x13853*x13854))+(((-1.0)*cj15*cj16*r22*sj15*x13852))+(((-1.0)*x13850)))),-1);
if(!x13859.valid){
continue;
}
CheckValue<IkReal> x13860 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*cj16*x13847))+(((-1.0)*x13844*x13845))+((sj11*x13843))+(((-1.0)*r22*sj15*x13846))+(((-1.0)*cj11*cj15*r20*sj12*sj16)))),IkReal((((sj11*((r22*sj15))))+(((-1.0)*x13844*x13847))+((sj11*x13848))+((x13843*x13846))+((cj15*cj16*x13845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13860.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13859.value)))+(x13860.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x13861=IKsin(j14);
IkReal x13862=(cj16*r20);
IkReal x13863=IKcos(j14);
IkReal x13864=(r22*sj15);
IkReal x13865=((1.0)*r21*sj16);
IkReal x13866=(cj16*r21);
IkReal x13867=(cj15*x13863);
IkReal x13868=(r20*sj16);
IkReal x13869=((1.0)*cj15*x13861);
evalcond[0]=(((x13863*x13864))+((x13866*x13867))+((x13867*x13868))+((x13861*x13862))+sj11+(((-1.0)*x13861*x13865)));
evalcond[1]=((((-1.0)*x13863*x13865))+(((-1.0)*x13866*x13869))+((cj11*sj12))+((x13862*x13863))+(((-1.0)*x13861*x13864))+(((-1.0)*x13868*x13869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13870=((1.0)+(((-1.0)*(1.0)*(cj11*cj11)*(cj12*cj12))));
j10eval[0]=x13870;
j10eval[1]=IKsign(x13870);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j10eval[0]=cj11;
j10eval[1]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j10eval[0]=cj11;
j10eval[1]=cj12;
j10eval[2]=sj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13871=(cj12*cj15);
IkReal x13872=(cj15*sj12);
IkReal x13873=(cj16*r11);
IkReal x13874=((1.0)*cj12*sj15);
IkReal x13875=(r10*sj16);
IkReal x13876=(cj16*r01);
IkReal x13877=((1.0)*sj12*sj15);
IkReal x13878=(r00*sj16);
IkReal x13879=(sj12*sj15);
if( IKabs((((r02*x13872))+(((-1.0)*x13874*x13875))+(((-1.0)*x13876*x13877))+(((-1.0)*x13873*x13874))+((r12*x13871))+(((-1.0)*x13877*x13878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x13875*x13879))+((r02*x13871))+(((-1.0)*x13874*x13876))+((x13873*x13879))+(((-1.0)*r12*x13872))+(((-1.0)*x13874*x13878)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x13872))+(((-1.0)*x13874*x13875))+(((-1.0)*x13876*x13877))+(((-1.0)*x13873*x13874))+((r12*x13871))+(((-1.0)*x13877*x13878))))+IKsqr((((x13875*x13879))+((r02*x13871))+(((-1.0)*x13874*x13876))+((x13873*x13879))+(((-1.0)*r12*x13872))+(((-1.0)*x13874*x13878))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r02*x13872))+(((-1.0)*x13874*x13875))+(((-1.0)*x13876*x13877))+(((-1.0)*x13873*x13874))+((r12*x13871))+(((-1.0)*x13877*x13878))), (((x13875*x13879))+((r02*x13871))+(((-1.0)*x13874*x13876))+((x13873*x13879))+(((-1.0)*r12*x13872))+(((-1.0)*x13874*x13878))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13880=IKcos(j10);
IkReal x13881=(sj12*x13880);
IkReal x13882=IKsin(j10);
IkReal x13883=((((-1.0)*cj12*x13882))+x13881);
IkReal x13884=(cj15*r12);
IkReal x13885=(cj16*r11*sj15);
IkReal x13886=(r10*sj16);
IkReal x13887=(cj15*r02);
IkReal x13888=(cj12*x13880);
IkReal x13889=(sj12*x13882);
IkReal x13890=(cj16*r01*sj15);
IkReal x13891=(r00*sj15*sj16);
IkReal x13892=(cj14*cj16);
IkReal x13893=((1.0)*cj14*sj16);
IkReal x13894=((1.0)*sj14*sj15);
IkReal x13895=((1.0)*cj15*cj16*sj14);
IkReal x13896=((1.0)*cj15*sj14);
IkReal x13897=((0.01)*sj15);
IkReal x13898=((0.01)*cj15*cj16);
IkReal x13899=((0.01)*cj15*sj16);
IkReal x13900=((0.069)*x13882);
evalcond[0]=((((-1.0)*sj15*x13886))+(((-1.0)*x13885))+x13883+x13884);
evalcond[1]=((((-1.0)*x13890))+(((-1.0)*x13891))+(((-1.0)*x13888))+(((-1.0)*x13889))+x13887);
evalcond[2]=((((-1.0)*r11*x13893))+(((-1.0)*x13886*x13896))+(((-1.0)*r11*x13895))+(((-1.0)*r12*x13894))+((r10*x13892))+x13889+x13888);
evalcond[3]=((((-1.0)*r01*x13895))+(((-1.0)*r02*x13894))+(((-1.0)*r01*x13893))+(((-1.0)*r00*sj16*x13896))+((r00*x13892))+x13883);
evalcond[4]=((((-1.0)*(1.0)*px))+((r01*x13898))+((r02*x13897))+(((-0.069)*x13888))+((r00*x13899))+(((-0.37429)*x13891))+(((0.37429)*x13887))+(((-0.069)*x13889))+(((0.069)*x13880))+(((-0.37429)*x13890)));
evalcond[5]=(((r11*x13898))+(((-1.0)*(1.0)*py))+((r10*x13899))+(((-1.0)*cj12*x13900))+x13900+(((-0.37429)*x13885))+(((-0.37429)*sj15*x13886))+(((0.069)*x13881))+(((0.37429)*x13884))+((r12*x13897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13901=(cj15*r02);
IkReal x13902=((1.0)*cj12);
IkReal x13903=(cj15*r12);
IkReal x13904=(cj12*cj16*sj15);
IkReal x13905=(cj12*sj15*sj16);
IkReal x13906=((1.0)*sj12*sj15);
IkReal x13907=(sj12*sj15);
if( IKabs((((r11*x13904))+(((-1.0)*cj16*r01*x13906))+((sj12*x13901))+(((-1.0)*x13902*x13903))+((r10*x13905))+(((-1.0)*r00*sj16*x13906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj12*x13903))+((r01*x13904))+(((-1.0)*x13901*x13902))+((r00*x13905))+((cj16*r11*x13907))+((r10*sj16*x13907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x13904))+(((-1.0)*cj16*r01*x13906))+((sj12*x13901))+(((-1.0)*x13902*x13903))+((r10*x13905))+(((-1.0)*r00*sj16*x13906))))+IKsqr(((((-1.0)*sj12*x13903))+((r01*x13904))+(((-1.0)*x13901*x13902))+((r00*x13905))+((cj16*r11*x13907))+((r10*sj16*x13907))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r11*x13904))+(((-1.0)*cj16*r01*x13906))+((sj12*x13901))+(((-1.0)*x13902*x13903))+((r10*x13905))+(((-1.0)*r00*sj16*x13906))), ((((-1.0)*sj12*x13903))+((r01*x13904))+(((-1.0)*x13901*x13902))+((r00*x13905))+((cj16*r11*x13907))+((r10*sj16*x13907))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13908=(cj15*r12);
IkReal x13909=IKsin(j10);
IkReal x13910=(cj12*x13909);
IkReal x13911=IKcos(j10);
IkReal x13912=(sj12*x13911);
IkReal x13913=(cj16*r11*sj15);
IkReal x13914=(r10*sj16);
IkReal x13915=(cj12*x13911);
IkReal x13916=((((-1.0)*sj12*x13909))+x13915);
IkReal x13917=(cj15*r02);
IkReal x13918=(cj16*r01*sj15);
IkReal x13919=(r00*sj15*sj16);
IkReal x13920=(cj14*cj16);
IkReal x13921=((1.0)*cj14*sj16);
IkReal x13922=((1.0)*sj14*sj15);
IkReal x13923=((1.0)*cj15*cj16*sj14);
IkReal x13924=((1.0)*cj15*sj14);
IkReal x13925=((0.01)*sj15);
IkReal x13926=((0.069)*x13909);
IkReal x13927=((0.01)*cj15*cj16);
IkReal x13928=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*sj15*x13914))+x13912+x13910+x13908+(((-1.0)*x13913)));
evalcond[1]=(x13917+x13916+(((-1.0)*x13919))+(((-1.0)*x13918)));
evalcond[2]=((((-1.0)*r12*x13922))+(((-1.0)*r11*x13921))+(((-1.0)*r11*x13923))+((r10*x13920))+x13916+(((-1.0)*x13914*x13924)));
evalcond[3]=((((-1.0)*x13912))+(((-1.0)*x13910))+(((-1.0)*r02*x13922))+((r00*x13920))+(((-1.0)*r00*sj16*x13924))+(((-1.0)*r01*x13923))+(((-1.0)*r01*x13921)));
evalcond[4]=(((r02*x13925))+(((-1.0)*(1.0)*px))+(((-0.37429)*x13918))+(((-0.37429)*x13919))+(((-1.0)*sj12*x13926))+((r01*x13927))+(((0.069)*x13915))+(((0.37429)*x13917))+(((0.069)*x13911))+((r00*x13928)));
evalcond[5]=((((-0.37429)*sj15*x13914))+((r11*x13927))+(((-1.0)*(1.0)*py))+(((-0.37429)*x13913))+((r10*x13928))+(((0.37429)*x13908))+((r12*x13925))+x13926+(((0.069)*x13910))+(((0.069)*x13912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13929=(cj16*sj15);
IkReal x13930=(sj15*sj16);
if( IKabs(((((-1.0)*r00*x13930))+((cj15*r02))+(((-1.0)*r01*x13929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x13929))+((r10*x13930))+(((-1.0)*(1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x13930))+((cj15*r02))+(((-1.0)*r01*x13929))))+IKsqr((((r11*x13929))+((r10*x13930))+(((-1.0)*(1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x13930))+((cj15*r02))+(((-1.0)*r01*x13929))), (((r11*x13929))+((r10*x13930))+(((-1.0)*(1.0)*cj15*r12))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x13931=IKcos(j10);
IkReal x13932=(cj15*r12);
IkReal x13933=(cj16*r11*sj15);
IkReal x13934=(r10*sj15*sj16);
IkReal x13935=(cj15*r02);
IkReal x13936=IKsin(j10);
IkReal x13937=((1.0)*x13936);
IkReal x13938=(cj16*r01*sj15);
IkReal x13939=(r00*sj15*sj16);
IkReal x13940=(cj14*sj15);
IkReal x13941=(cj16*sj14);
IkReal x13942=((1.0)*sj14*sj16);
IkReal x13943=(cj14*cj15*cj16);
IkReal x13944=(cj14*cj15*sj16);
IkReal x13945=(cj14*cj16);
IkReal x13946=((1.0)*cj14*sj16);
IkReal x13947=((1.0)*sj14*sj15);
IkReal x13948=((1.0)*cj15*cj16*sj14);
IkReal x13949=((1.0)*cj15*sj14*sj16);
IkReal x13950=((0.01)*sj15);
IkReal x13951=((0.069)*x13936);
IkReal x13952=((0.069)*x13931);
IkReal x13953=((0.36442)*cj11);
IkReal x13954=((0.01)*cj15*cj16);
IkReal x13955=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x13934))+(((-1.0)*x13933))+x13931+x13932);
evalcond[1]=((((-1.0)*x13937))+(((-1.0)*x13939))+(((-1.0)*x13938))+x13935);
evalcond[2]=(((r00*x13944))+((r00*x13941))+(((-1.0)*cj11*x13931))+(((-1.0)*r01*x13942))+((r02*x13940))+((r01*x13943)));
evalcond[3]=(((r10*x13944))+((r10*x13941))+((r12*x13940))+((r11*x13943))+(((-1.0)*cj11*x13937))+(((-1.0)*r11*x13942)));
evalcond[4]=(((r10*x13945))+(((-1.0)*r11*x13948))+(((-1.0)*r11*x13946))+(((-1.0)*r12*x13947))+((sj11*x13936))+(((-1.0)*r10*x13949)));
evalcond[5]=((((-1.0)*r01*x13946))+((r00*x13945))+(((-1.0)*r01*x13948))+(((-1.0)*r00*x13949))+(((-1.0)*r02*x13947))+((sj11*x13931)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*x13951))+x13952+((r00*x13955))+(((-0.37429)*x13939))+(((-0.37429)*x13938))+((x13931*x13953))+((r01*x13954))+((r02*x13950))+(((0.37429)*x13935)));
evalcond[7]=((((-1.0)*(1.0)*py))+x13951+x13952+((x13936*x13953))+(((-0.37429)*x13933))+((r12*x13950))+((r11*x13954))+(((-0.37429)*x13934))+((r10*x13955))+(((0.37429)*x13932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13956=(cj16*sj15);
IkReal x13957=(sj15*sj16);
if( IKabs((((r01*x13956))+((r00*x13957))+(((-1.0)*(1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*r11*x13956))+(((-1.0)*r10*x13957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x13956))+((r00*x13957))+(((-1.0)*(1.0)*cj15*r02))))+IKsqr((((cj15*r12))+(((-1.0)*r11*x13956))+(((-1.0)*r10*x13957))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x13956))+((r00*x13957))+(((-1.0)*(1.0)*cj15*r02))), (((cj15*r12))+(((-1.0)*r11*x13956))+(((-1.0)*r10*x13957))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x13958=IKsin(j10);
IkReal x13959=(cj15*r02);
IkReal x13960=(cj16*r01*sj15);
IkReal x13961=(r00*sj15*sj16);
IkReal x13962=(cj15*r12);
IkReal x13963=IKcos(j10);
IkReal x13964=((1.0)*x13963);
IkReal x13965=(cj16*r11*sj15);
IkReal x13966=(r10*sj15*sj16);
IkReal x13967=(cj14*sj15);
IkReal x13968=(cj16*sj14);
IkReal x13969=((1.0)*sj14*sj16);
IkReal x13970=(cj14*cj15*cj16);
IkReal x13971=(cj14*cj15*sj16);
IkReal x13972=(cj11*x13958);
IkReal x13973=(cj14*cj16);
IkReal x13974=((1.0)*cj14*sj16);
IkReal x13975=((1.0)*sj14*sj15);
IkReal x13976=((1.0)*cj15*cj16*sj14);
IkReal x13977=((1.0)*cj15*sj14*sj16);
IkReal x13978=((0.01)*sj15);
IkReal x13979=((0.069)*x13958);
IkReal x13980=((0.069)*x13963);
IkReal x13981=((0.01)*cj15*cj16);
IkReal x13982=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x13961))+x13959+x13958+(((-1.0)*x13960)));
evalcond[1]=(x13962+(((-1.0)*x13965))+(((-1.0)*x13966))+(((-1.0)*x13964)));
evalcond[2]=((((-1.0)*cj11*x13964))+((r00*x13971))+((r02*x13967))+((r00*x13968))+((r01*x13970))+(((-1.0)*r01*x13969)));
evalcond[3]=(((r10*x13971))+((r11*x13970))+(((-1.0)*x13972))+((r12*x13967))+(((-1.0)*r11*x13969))+((r10*x13968)));
evalcond[4]=((((-1.0)*r11*x13976))+(((-1.0)*sj11*x13958))+(((-1.0)*r12*x13975))+(((-1.0)*r10*x13977))+((r10*x13973))+(((-1.0)*r11*x13974)));
evalcond[5]=((((-1.0)*sj11*x13964))+((r00*x13973))+(((-1.0)*r00*x13977))+(((-1.0)*r01*x13976))+(((-1.0)*r02*x13975))+(((-1.0)*r01*x13974)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r01*x13981))+(((-0.37429)*x13960))+(((0.37429)*x13959))+((r00*x13982))+((r02*x13978))+(((-0.37429)*x13961))+x13980+x13979+(((0.36442)*cj11*x13963)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-0.37429)*x13966))+((r10*x13982))+((r11*x13981))+(((-1.0)*x13980))+((r12*x13978))+(((-0.37429)*x13965))+(((0.36442)*x13972))+(((0.37429)*x13962))+x13979);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
IkReal x13983=(cj16*sj15);
IkReal x13984=(sj15*sj16);
j10eval[0]=sj12;
j10eval[1]=IKsign(sj12);
j10eval[2]=((IKabs(((((-1.0)*r00*x13984))+((cj15*r02))+(((-1.0)*r01*x13983)))))+(IKabs((((r10*x13984))+((r11*x13983))+(((-1.0)*(1.0)*cj15*r12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j10eval[0]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j10eval[0]=cj12;
j10eval[1]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x13985=(cj16*sj15);
IkReal x13986=(sj15*sj16);
if( IKabs(((((-1.0)*r01*x13985))+((cj15*r02))+(((-1.0)*r00*x13986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x13985))+((r10*x13986))+(((-1.0)*(1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x13985))+((cj15*r02))+(((-1.0)*r00*x13986))))+IKsqr((((r11*x13985))+((r10*x13986))+(((-1.0)*(1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r01*x13985))+((cj15*r02))+(((-1.0)*r00*x13986))), (((r11*x13985))+((r10*x13986))+(((-1.0)*(1.0)*cj15*r12))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x13987=IKcos(j10);
IkReal x13988=(cj15*r12);
IkReal x13989=(cj16*r11*sj15);
IkReal x13990=(r10*sj15);
IkReal x13991=(cj15*r02);
IkReal x13992=IKsin(j10);
IkReal x13993=((-1.0)*x13992);
IkReal x13994=(cj16*r01*sj15);
IkReal x13995=(r00*sj15*sj16);
IkReal x13996=(cj14*sj15);
IkReal x13997=(cj16*sj14);
IkReal x13998=((1.0)*sj14*sj16);
IkReal x13999=(cj14*cj15*cj16);
IkReal x14000=(cj14*cj15*sj16);
IkReal x14001=((0.01)*sj15);
IkReal x14002=((0.01)*cj15*cj16);
IkReal x14003=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x13989))+(((-1.0)*sj16*x13990))+x13987+x13988);
evalcond[1]=(x13993+x13991+(((-1.0)*x13995))+(((-1.0)*x13994)));
evalcond[2]=(((r01*x13999))+((r00*x13997))+(((-1.0)*x13987))+(((-1.0)*r01*x13998))+((r02*x13996))+((r00*x14000)));
evalcond[3]=(((r10*x14000))+(((-1.0)*r11*x13998))+x13993+((r12*x13996))+((r10*x13997))+((r11*x13999)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.43342)*x13987))+((r02*x14001))+((r01*x14002))+(((-0.37429)*x13995))+((r00*x14003))+(((-0.37429)*x13994))+(((0.37429)*x13991))+(((-0.069)*x13992)));
evalcond[5]=((((-1.0)*(1.0)*py))+((r11*x14002))+(((0.069)*x13987))+(((-0.37429)*sj16*x13990))+(((0.37429)*x13988))+(((-0.37429)*x13989))+(((0.43342)*x13992))+((r10*x14003))+((r12*x14001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14004=(cj16*sj15);
IkReal x14005=(sj15*sj16);
if( IKabs((((r00*x14005))+((r01*x14004))+(((-1.0)*(1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x14004))+(((-1.0)*r10*x14005))+((cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x14005))+((r01*x14004))+(((-1.0)*(1.0)*cj15*r02))))+IKsqr(((((-1.0)*r11*x14004))+(((-1.0)*r10*x14005))+((cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r00*x14005))+((r01*x14004))+(((-1.0)*(1.0)*cj15*r02))), ((((-1.0)*r11*x14004))+(((-1.0)*r10*x14005))+((cj15*r12))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14006=IKsin(j10);
IkReal x14007=(cj15*r02);
IkReal x14008=(cj16*r01*sj15);
IkReal x14009=(r00*sj15*sj16);
IkReal x14010=(cj15*r12);
IkReal x14011=IKcos(j10);
IkReal x14012=((-1.0)*x14011);
IkReal x14013=(cj16*r11*sj15);
IkReal x14014=(r10*sj15);
IkReal x14015=(cj14*sj15);
IkReal x14016=(cj16*sj14);
IkReal x14017=((1.0)*sj14*sj16);
IkReal x14018=(cj14*cj15*cj16);
IkReal x14019=(cj14*cj15*sj16);
IkReal x14020=((0.01)*sj15);
IkReal x14021=((0.01)*cj15*cj16);
IkReal x14022=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x14008))+(((-1.0)*x14009))+x14007+x14006);
evalcond[1]=(x14012+x14010+(((-1.0)*sj16*x14014))+(((-1.0)*x14013)));
evalcond[2]=(x14012+((r02*x14015))+((r00*x14019))+((r00*x14016))+((r01*x14018))+(((-1.0)*r01*x14017)));
evalcond[3]=(((r12*x14015))+((r11*x14018))+(((-1.0)*r11*x14017))+(((-1.0)*x14006))+((r10*x14019))+((r10*x14016)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r02*x14020))+(((-0.37429)*x14008))+(((0.069)*x14006))+((r01*x14021))+(((0.37429)*x14007))+(((0.43342)*x14011))+(((-0.37429)*x14009))+((r00*x14022)));
evalcond[5]=((((0.43342)*x14006))+(((-1.0)*(1.0)*py))+(((-0.37429)*sj16*x14014))+(((0.37429)*x14010))+((r10*x14022))+((r12*x14020))+(((-0.069)*x14011))+((r11*x14021))+(((-0.37429)*x14013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14023=(cj14*sj15);
IkReal x14024=(cj16*sj14);
IkReal x14025=((1.0)*sj14*sj16);
IkReal x14026=(cj14*cj15*cj16);
IkReal x14027=(cj14*cj15*sj16);
if( IKabs((((r12*x14023))+((r11*x14026))+((r10*x14027))+((r10*x14024))+(((-1.0)*r11*x14025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x14023))+((r01*x14026))+(((-1.0)*r01*x14025))+((r00*x14027))+((r00*x14024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x14023))+((r11*x14026))+((r10*x14027))+((r10*x14024))+(((-1.0)*r11*x14025))))+IKsqr((((r02*x14023))+((r01*x14026))+(((-1.0)*r01*x14025))+((r00*x14027))+((r00*x14024))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r12*x14023))+((r11*x14026))+((r10*x14027))+((r10*x14024))+(((-1.0)*r11*x14025))), (((r02*x14023))+((r01*x14026))+(((-1.0)*r01*x14025))+((r00*x14027))+((r00*x14024))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14028=(cj14*sj15);
IkReal x14029=(cj16*sj14);
IkReal x14030=IKcos(j10);
IkReal x14031=((1.0)*sj14*sj16);
IkReal x14032=(cj14*cj15*cj16);
IkReal x14033=(cj14*cj15*sj16);
IkReal x14034=IKsin(j10);
IkReal x14035=((-1.0)*x14034);
IkReal x14036=(cj14*cj16);
IkReal x14037=((1.0)*cj14*sj16);
IkReal x14038=((1.0)*sj14*sj15);
IkReal x14039=((1.0)*cj15*cj16*sj14);
IkReal x14040=((1.0)*cj15*sj14*sj16);
IkReal x14041=((0.37429)*cj15);
IkReal x14042=((0.01)*sj15);
IkReal x14043=((0.01)*cj15*cj16);
IkReal x14044=((0.01)*cj15*sj16);
IkReal x14045=((0.37429)*cj16*sj15);
IkReal x14046=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r01*x14031))+((r00*x14029))+((r02*x14028))+((r00*x14033))+(((-1.0)*x14030))+((r01*x14032)));
evalcond[1]=(x14035+((r10*x14029))+((r10*x14033))+((r12*x14028))+((r11*x14032))+(((-1.0)*r11*x14031)));
evalcond[2]=((((-1.0)*r11*x14039))+x14030+(((-1.0)*r11*x14037))+(((-1.0)*r12*x14038))+((r10*x14036))+(((-1.0)*r10*x14040)));
evalcond[3]=(x14035+(((-1.0)*r02*x14038))+((r00*x14036))+(((-1.0)*r01*x14037))+(((-1.0)*r00*x14040))+(((-1.0)*r01*x14039)));
evalcond[4]=(((r02*x14041))+(((-1.0)*(1.0)*px))+((r02*x14042))+(((-1.0)*r00*x14046))+((r00*x14044))+(((0.43342)*x14030))+((r01*x14043))+(((-1.0)*r01*x14045)));
evalcond[5]=((((-1.0)*(1.0)*py))+((r11*x14043))+((r12*x14042))+(((0.43342)*x14034))+(((-1.0)*r11*x14045))+((r10*x14044))+(((-1.0)*r10*x14046))+((r12*x14041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14047=(cj14*sj15);
IkReal x14048=(cj16*sj14);
IkReal x14049=((1.0)*sj14*sj16);
IkReal x14050=(cj14*cj15*cj16);
IkReal x14051=(cj14*cj15*sj16);
if( IKabs((((r11*x14050))+((r10*x14051))+((r10*x14048))+(((-1.0)*r11*x14049))+((r12*x14047)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x14051))+((r02*x14047))+((r01*x14050))+((r00*x14048))+(((-1.0)*r01*x14049)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x14050))+((r10*x14051))+((r10*x14048))+(((-1.0)*r11*x14049))+((r12*x14047))))+IKsqr((((r00*x14051))+((r02*x14047))+((r01*x14050))+((r00*x14048))+(((-1.0)*r01*x14049))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r11*x14050))+((r10*x14051))+((r10*x14048))+(((-1.0)*r11*x14049))+((r12*x14047))), (((r00*x14051))+((r02*x14047))+((r01*x14050))+((r00*x14048))+(((-1.0)*r01*x14049))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14052=(cj14*sj15);
IkReal x14053=(cj16*sj14);
IkReal x14054=IKcos(j10);
IkReal x14055=((-1.0)*x14054);
IkReal x14056=((1.0)*sj14*sj16);
IkReal x14057=(cj14*cj15*cj16);
IkReal x14058=(cj14*cj15*sj16);
IkReal x14059=IKsin(j10);
IkReal x14060=(cj14*cj16);
IkReal x14061=((1.0)*cj14*sj16);
IkReal x14062=((1.0)*sj14*sj15);
IkReal x14063=((1.0)*cj15*cj16*sj14);
IkReal x14064=((1.0)*cj15*sj14*sj16);
IkReal x14065=((0.37429)*cj15);
IkReal x14066=((0.01)*sj15);
IkReal x14067=((0.01)*cj15*cj16);
IkReal x14068=((0.01)*cj15*sj16);
IkReal x14069=((0.37429)*cj16*sj15);
IkReal x14070=((0.37429)*sj15*sj16);
evalcond[0]=(x14055+(((-1.0)*r01*x14056))+((r02*x14052))+((r00*x14058))+((r01*x14057))+((r00*x14053)));
evalcond[1]=(((r12*x14052))+((r10*x14058))+(((-1.0)*x14059))+(((-1.0)*r11*x14056))+((r10*x14053))+((r11*x14057)));
evalcond[2]=((((-1.0)*r01*x14061))+x14059+(((-1.0)*r02*x14062))+(((-1.0)*r00*x14064))+((r00*x14060))+(((-1.0)*r01*x14063)));
evalcond[3]=(x14055+((r10*x14060))+(((-1.0)*r10*x14064))+(((-1.0)*r11*x14061))+(((-1.0)*r11*x14063))+(((-1.0)*r12*x14062)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.43342)*x14054))+(((-1.0)*r00*x14070))+((r01*x14067))+((r00*x14068))+((r02*x14066))+((r02*x14065))+(((-1.0)*r01*x14069)));
evalcond[5]=((((-1.0)*r11*x14069))+(((-1.0)*(1.0)*py))+((r12*x14065))+(((-1.0)*r10*x14070))+(((0.43342)*x14059))+((r11*x14067))+((r10*x14068))+((r12*x14066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14071=((1.0)*cj15*sj14);
CheckValue<IkReal> x14072=IKPowWithIntegerCheck(cj12,-1);
if(!x14072.valid){
continue;
}
CheckValue<IkReal> x14073=IKPowWithIntegerCheck(sj12,-1);
if(!x14073.valid){
continue;
}
if( IKabs(((x14072.value)*(((((-1.0)*r00*sj16*x14071))+(((-1.0)*(1.0)*cj14*r01*sj16))+(((-1.0)*cj16*r01*x14071))+((cj14*cj16*r00))+(((-1.0)*(1.0)*r02*sj14*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14073.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14072.value)*(((((-1.0)*r00*sj16*x14071))+(((-1.0)*(1.0)*cj14*r01*sj16))+(((-1.0)*cj16*r01*x14071))+((cj14*cj16*r00))+(((-1.0)*(1.0)*r02*sj14*sj15))))))+IKsqr(((x14073.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x14072.value)*(((((-1.0)*r00*sj16*x14071))+(((-1.0)*(1.0)*cj14*r01*sj16))+(((-1.0)*cj16*r01*x14071))+((cj14*cj16*r00))+(((-1.0)*(1.0)*r02*sj14*sj15))))), ((x14073.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14074=(cj15*r12);
IkReal x14075=IKcos(j10);
IkReal x14076=(sj12*x14075);
IkReal x14077=(cj16*r11*sj15);
IkReal x14078=(r10*sj15*sj16);
IkReal x14079=(cj15*r02);
IkReal x14080=IKsin(j10);
IkReal x14081=((1.0)*x14080);
IkReal x14082=(cj16*r01*sj15);
IkReal x14083=(r00*sj15*sj16);
IkReal x14084=(cj14*sj15);
IkReal x14085=(cj16*sj14);
IkReal x14086=((1.0)*sj14*sj16);
IkReal x14087=(cj14*cj15*cj16);
IkReal x14088=(cj14*cj15*sj16);
IkReal x14089=(cj14*cj16);
IkReal x14090=((1.0)*cj14*sj16);
IkReal x14091=((1.0)*sj14*sj15);
IkReal x14092=((1.0)*cj15*cj16*sj14);
IkReal x14093=((1.0)*cj15*sj14*sj16);
IkReal x14094=((0.01)*sj15);
IkReal x14095=((0.01)*cj15*cj16);
IkReal x14096=((0.01)*cj15*sj16);
evalcond[0]=(x14074+x14076+(((-1.0)*x14077))+(((-1.0)*x14078)));
evalcond[1]=((((-1.0)*x14082))+x14079+(((-1.0)*x14083))+(((-1.0)*sj12*x14081)));
evalcond[2]=((((-1.0)*r01*x14086))+((r00*x14088))+((r00*x14085))+(((-1.0)*x14075))+((r02*x14084))+((r01*x14087)));
evalcond[3]=(((r10*x14085))+((r12*x14084))+((r10*x14088))+(((-1.0)*x14081))+((r11*x14087))+(((-1.0)*r11*x14086)));
evalcond[4]=((((-1.0)*r11*x14090))+(((-1.0)*r11*x14092))+(((-1.0)*r12*x14091))+((cj12*x14075))+((r10*x14089))+(((-1.0)*r10*x14093)));
evalcond[5]=((((-1.0)*cj12*x14081))+(((-1.0)*r01*x14092))+(((-1.0)*r02*x14091))+(((-1.0)*r01*x14090))+((r00*x14089))+(((-1.0)*r00*x14093)));
evalcond[6]=((((-0.069)*sj12*x14080))+(((-1.0)*(1.0)*px))+((r00*x14096))+(((-0.37429)*x14083))+(((-0.37429)*x14082))+((r01*x14095))+((r02*x14094))+(((0.37429)*x14079))+(((0.43342)*x14075)));
evalcond[7]=(((r10*x14096))+(((-1.0)*(1.0)*py))+(((-0.37429)*x14078))+(((-0.37429)*x14077))+(((0.069)*x14076))+((r11*x14095))+(((0.43342)*x14080))+(((0.37429)*x14074))+((r12*x14094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14097=(cj14*cj15);
IkReal x14098=(cj16*r11);
IkReal x14099=(r10*sj16);
CheckValue<IkReal> x14100=IKPowWithIntegerCheck(sj12,-1);
if(!x14100.valid){
continue;
}
if( IKabs((((cj14*r12*sj15))+((x14097*x14099))+((cj16*r10*sj14))+((x14097*x14098))+(((-1.0)*(1.0)*r11*sj14*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14100.value)*((((sj15*x14098))+((sj15*x14099))+(((-1.0)*(1.0)*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj14*r12*sj15))+((x14097*x14099))+((cj16*r10*sj14))+((x14097*x14098))+(((-1.0)*(1.0)*r11*sj14*sj16))))+IKsqr(((x14100.value)*((((sj15*x14098))+((sj15*x14099))+(((-1.0)*(1.0)*cj15*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj14*r12*sj15))+((x14097*x14099))+((cj16*r10*sj14))+((x14097*x14098))+(((-1.0)*(1.0)*r11*sj14*sj16))), ((x14100.value)*((((sj15*x14098))+((sj15*x14099))+(((-1.0)*(1.0)*cj15*r12))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14101=(cj15*r12);
IkReal x14102=IKcos(j10);
IkReal x14103=(sj12*x14102);
IkReal x14104=(cj16*r11*sj15);
IkReal x14105=(r10*sj15*sj16);
IkReal x14106=(cj15*r02);
IkReal x14107=IKsin(j10);
IkReal x14108=((1.0)*x14107);
IkReal x14109=(cj16*r01*sj15);
IkReal x14110=(r00*sj15*sj16);
IkReal x14111=(cj14*sj15);
IkReal x14112=(cj16*sj14);
IkReal x14113=((1.0)*sj14*sj16);
IkReal x14114=(cj14*cj15*cj16);
IkReal x14115=(cj14*cj15*sj16);
IkReal x14116=(cj14*cj16);
IkReal x14117=((1.0)*cj14*sj16);
IkReal x14118=((1.0)*sj14*sj15);
IkReal x14119=((1.0)*cj15*cj16*sj14);
IkReal x14120=((1.0)*cj15*sj14*sj16);
IkReal x14121=((0.01)*sj15);
IkReal x14122=((0.01)*cj15*cj16);
IkReal x14123=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x14105))+x14101+x14103+(((-1.0)*x14104)));
evalcond[1]=((((-1.0)*sj12*x14108))+x14106+(((-1.0)*x14109))+(((-1.0)*x14110)));
evalcond[2]=((((-1.0)*x14102))+((r02*x14111))+(((-1.0)*r01*x14113))+((r00*x14115))+((r00*x14112))+((r01*x14114)));
evalcond[3]=(((r12*x14111))+((r10*x14115))+(((-1.0)*r11*x14113))+(((-1.0)*x14108))+((r10*x14112))+((r11*x14114)));
evalcond[4]=(((r10*x14116))+(((-1.0)*r11*x14119))+((cj12*x14102))+(((-1.0)*r12*x14118))+(((-1.0)*r10*x14120))+(((-1.0)*r11*x14117)));
evalcond[5]=((((-1.0)*cj12*x14108))+(((-1.0)*r01*x14119))+((r00*x14116))+(((-1.0)*r01*x14117))+(((-1.0)*r02*x14118))+(((-1.0)*r00*x14120)));
evalcond[6]=((((0.43342)*x14102))+(((-1.0)*(1.0)*px))+(((-0.37429)*x14110))+(((-0.37429)*x14109))+((r02*x14121))+((r00*x14123))+(((0.37429)*x14106))+((r01*x14122))+(((-0.069)*sj12*x14107)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r11*x14122))+(((-0.37429)*x14104))+(((-0.37429)*x14105))+(((0.43342)*x14107))+((r10*x14123))+((r12*x14121))+(((0.069)*x14103))+(((0.37429)*x14101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14124=(cj16*sj15);
IkReal x14125=(sj15*sj16);
CheckValue<IkReal> x14126=IKPowWithIntegerCheck(IKsign(sj12),-1);
if(!x14126.valid){
continue;
}
CheckValue<IkReal> x14127 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x14125))+(((-1.0)*r01*x14124))+((cj15*r02)))),IkReal((((r11*x14124))+((r10*x14125))+(((-1.0)*(1.0)*cj15*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14127.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14126.value)))+(x14127.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14128=(cj15*r12);
IkReal x14129=IKcos(j10);
IkReal x14130=(sj12*x14129);
IkReal x14131=(cj16*r11*sj15);
IkReal x14132=(r10*sj15*sj16);
IkReal x14133=(cj15*r02);
IkReal x14134=IKsin(j10);
IkReal x14135=((1.0)*x14134);
IkReal x14136=(cj16*r01*sj15);
IkReal x14137=(r00*sj15*sj16);
IkReal x14138=(cj14*sj15);
IkReal x14139=(cj16*sj14);
IkReal x14140=((1.0)*sj14*sj16);
IkReal x14141=(cj14*cj15*cj16);
IkReal x14142=(cj14*cj15*sj16);
IkReal x14143=(cj14*cj16);
IkReal x14144=((1.0)*cj14*sj16);
IkReal x14145=((1.0)*sj14*sj15);
IkReal x14146=((1.0)*cj15*cj16*sj14);
IkReal x14147=((1.0)*cj15*sj14*sj16);
IkReal x14148=((0.01)*sj15);
IkReal x14149=((0.01)*cj15*cj16);
IkReal x14150=((0.01)*cj15*sj16);
evalcond[0]=(x14130+x14128+(((-1.0)*x14132))+(((-1.0)*x14131)));
evalcond[1]=((((-1.0)*sj12*x14135))+x14133+(((-1.0)*x14136))+(((-1.0)*x14137)));
evalcond[2]=((((-1.0)*r01*x14140))+((r01*x14141))+((r00*x14142))+(((-1.0)*x14129))+((r00*x14139))+((r02*x14138)));
evalcond[3]=((((-1.0)*x14135))+((r11*x14141))+((r10*x14139))+((r10*x14142))+(((-1.0)*r11*x14140))+((r12*x14138)));
evalcond[4]=((((-1.0)*r12*x14145))+((r10*x14143))+(((-1.0)*r10*x14147))+(((-1.0)*r11*x14146))+(((-1.0)*r11*x14144))+((cj12*x14129)));
evalcond[5]=(((r00*x14143))+(((-1.0)*cj12*x14135))+(((-1.0)*r01*x14144))+(((-1.0)*r02*x14145))+(((-1.0)*r01*x14146))+(((-1.0)*r00*x14147)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x14136))+(((0.43342)*x14129))+(((-0.37429)*x14137))+(((0.37429)*x14133))+((r02*x14148))+((r01*x14149))+((r00*x14150))+(((-0.069)*sj12*x14134)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r10*x14150))+((r12*x14148))+(((0.069)*x14130))+(((0.43342)*x14134))+(((0.37429)*x14128))+(((-0.37429)*x14132))+(((-0.37429)*x14131))+((r11*x14149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x14151=(cj16*sj15);
IkReal x14152=(sj15*sj16);
j10eval[0]=sj12;
j10eval[1]=IKsign(sj12);
j10eval[2]=((IKabs(((((-1.0)*r01*x14151))+((cj15*r02))+(((-1.0)*r00*x14152)))))+(IKabs((((r10*x14152))+((r11*x14151))+(((-1.0)*(1.0)*cj15*r12))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j10eval[0]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j10eval[0]=cj12;
j10eval[1]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14153=(cj16*sj15);
IkReal x14154=(sj15*sj16);
if( IKabs(((((-1.0)*r00*x14154))+(((-1.0)*r01*x14153))+((cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x14154))+((r11*x14153))+(((-1.0)*(1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x14154))+(((-1.0)*r01*x14153))+((cj15*r02))))+IKsqr((((r10*x14154))+((r11*x14153))+(((-1.0)*(1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x14154))+(((-1.0)*r01*x14153))+((cj15*r02))), (((r10*x14154))+((r11*x14153))+(((-1.0)*(1.0)*cj15*r12))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14155=IKcos(j10);
IkReal x14156=(cj15*r12);
IkReal x14157=(cj16*r11*sj15);
IkReal x14158=(r10*sj15);
IkReal x14159=(cj15*r02);
IkReal x14160=IKsin(j10);
IkReal x14161=(cj16*r01*sj15);
IkReal x14162=(r00*sj15*sj16);
IkReal x14163=(cj14*sj15);
IkReal x14164=(cj16*sj14);
IkReal x14165=((1.0)*sj14*sj16);
IkReal x14166=(cj14*cj15*cj16);
IkReal x14167=(cj14*cj15*sj16);
IkReal x14168=((0.01)*sj15);
IkReal x14169=((0.01)*cj15*cj16);
IkReal x14170=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*sj16*x14158))+(((-1.0)*x14157))+x14155+x14156);
evalcond[1]=(x14159+(((-1.0)*x14160))+(((-1.0)*x14161))+(((-1.0)*x14162)));
evalcond[2]=((((-1.0)*r01*x14165))+((r00*x14167))+((r00*x14164))+x14155+((r01*x14166))+((r02*x14163)));
evalcond[3]=(((r10*x14167))+x14160+(((-1.0)*r11*x14165))+((r12*x14163))+((r11*x14166))+((r10*x14164)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r00*x14170))+(((-0.29542)*x14155))+(((-0.37429)*x14161))+(((-0.069)*x14160))+((r02*x14168))+(((-0.37429)*x14162))+(((0.37429)*x14159))+((r01*x14169)));
evalcond[5]=((((-0.29542)*x14160))+(((-1.0)*(1.0)*py))+(((-0.37429)*x14157))+((r10*x14170))+((r12*x14168))+(((-0.37429)*sj16*x14158))+((r11*x14169))+(((0.069)*x14155))+(((0.37429)*x14156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14171=(cj16*sj15);
IkReal x14172=(sj15*sj16);
if( IKabs((((r01*x14171))+((r00*x14172))+(((-1.0)*(1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x14171))+(((-1.0)*r10*x14172))+((cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x14171))+((r00*x14172))+(((-1.0)*(1.0)*cj15*r02))))+IKsqr(((((-1.0)*r11*x14171))+(((-1.0)*r10*x14172))+((cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x14171))+((r00*x14172))+(((-1.0)*(1.0)*cj15*r02))), ((((-1.0)*r11*x14171))+(((-1.0)*r10*x14172))+((cj15*r12))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14173=IKsin(j10);
IkReal x14174=(cj15*r02);
IkReal x14175=(cj16*r01*sj15);
IkReal x14176=(r00*sj15*sj16);
IkReal x14177=(cj15*r12);
IkReal x14178=IKcos(j10);
IkReal x14179=(cj16*r11*sj15);
IkReal x14180=(r10*sj15);
IkReal x14181=(cj14*sj15);
IkReal x14182=(cj16*sj14);
IkReal x14183=((1.0)*sj14*sj16);
IkReal x14184=(cj14*cj15*cj16);
IkReal x14185=(cj14*cj15*sj16);
IkReal x14186=((0.01)*sj15);
IkReal x14187=((0.01)*cj15*cj16);
IkReal x14188=((0.01)*cj15*sj16);
evalcond[0]=(x14173+x14174+(((-1.0)*x14176))+(((-1.0)*x14175)));
evalcond[1]=((((-1.0)*x14178))+(((-1.0)*sj16*x14180))+x14177+(((-1.0)*x14179)));
evalcond[2]=(((r01*x14184))+((r00*x14182))+x14178+(((-1.0)*r01*x14183))+((r00*x14185))+((r02*x14181)));
evalcond[3]=(((r12*x14181))+x14173+((r10*x14185))+(((-1.0)*r11*x14183))+((r11*x14184))+((r10*x14182)));
evalcond[4]=(((r00*x14188))+(((-1.0)*(1.0)*px))+(((-0.37429)*x14176))+(((0.37429)*x14174))+((r02*x14186))+(((-0.29542)*x14178))+(((0.069)*x14173))+((r01*x14187))+(((-0.37429)*x14175)));
evalcond[5]=((((-0.37429)*x14179))+(((-1.0)*(1.0)*py))+(((-0.069)*x14178))+((r12*x14186))+(((0.37429)*x14177))+((r11*x14187))+(((-0.37429)*sj16*x14180))+(((-0.29542)*x14173))+((r10*x14188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14189=(r11*sj16);
IkReal x14190=((1.0)*cj14);
IkReal x14191=(r12*sj15);
IkReal x14192=(cj16*r10);
IkReal x14193=(cj16*r11);
IkReal x14194=((1.0)*cj14*cj15);
IkReal x14195=(r10*sj16);
IkReal x14196=(cj15*sj14);
if( IKabs(((((-1.0)*sj14*x14192))+(((-1.0)*x14193*x14194))+(((-1.0)*x14194*x14195))+(((-1.0)*x14190*x14191))+((sj14*x14189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x14193*x14196))+(((-1.0)*x14190*x14192))+((sj14*x14191))+((cj14*x14189))+((x14195*x14196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj14*x14192))+(((-1.0)*x14193*x14194))+(((-1.0)*x14194*x14195))+(((-1.0)*x14190*x14191))+((sj14*x14189))))+IKsqr((((x14193*x14196))+(((-1.0)*x14190*x14192))+((sj14*x14191))+((cj14*x14189))+((x14195*x14196))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*sj14*x14192))+(((-1.0)*x14193*x14194))+(((-1.0)*x14194*x14195))+(((-1.0)*x14190*x14191))+((sj14*x14189))), (((x14193*x14196))+(((-1.0)*x14190*x14192))+((sj14*x14191))+((cj14*x14189))+((x14195*x14196))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14197=IKcos(j10);
IkReal x14198=(cj14*sj15);
IkReal x14199=(cj16*sj14);
IkReal x14200=((1.0)*sj14*sj16);
IkReal x14201=(cj14*cj15*cj16);
IkReal x14202=(cj14*cj15*sj16);
IkReal x14203=IKsin(j10);
IkReal x14204=(cj14*cj16);
IkReal x14205=((1.0)*cj14*sj16);
IkReal x14206=((1.0)*sj14*sj15);
IkReal x14207=((1.0)*cj15*cj16*sj14);
IkReal x14208=((1.0)*cj15*sj14*sj16);
IkReal x14209=((0.37429)*cj15);
IkReal x14210=((0.01)*sj15);
IkReal x14211=((0.01)*cj15*cj16);
IkReal x14212=((0.01)*cj15*sj16);
IkReal x14213=((0.37429)*cj16*sj15);
IkReal x14214=((0.37429)*sj15*sj16);
evalcond[0]=(((r00*x14199))+((r01*x14201))+(((-1.0)*r01*x14200))+((r02*x14198))+((r00*x14202))+x14197);
evalcond[1]=(((r11*x14201))+x14203+((r10*x14202))+(((-1.0)*r11*x14200))+((r10*x14199))+((r12*x14198)));
evalcond[2]=((((-1.0)*r11*x14205))+(((-1.0)*r11*x14207))+(((-1.0)*r12*x14206))+((r10*x14204))+(((-1.0)*r10*x14208))+x14197);
evalcond[3]=(((r00*x14204))+(((-1.0)*r00*x14208))+(((-1.0)*r01*x14207))+(((-1.0)*r01*x14205))+(((-1.0)*r02*x14206))+(((-1.0)*x14203)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r00*x14212))+((r02*x14210))+((r01*x14211))+((r02*x14209))+(((-1.0)*r01*x14213))+(((-0.29542)*x14197))+(((-1.0)*r00*x14214)));
evalcond[5]=(((r12*x14210))+(((-1.0)*(1.0)*py))+((r11*x14211))+((r12*x14209))+(((-1.0)*r11*x14213))+((r10*x14212))+(((-1.0)*r10*x14214))+(((-0.29542)*x14203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14215=(r01*sj16);
IkReal x14216=(r02*sj15);
IkReal x14217=((1.0)*cj14);
IkReal x14218=(cj16*r00);
IkReal x14219=(cj15*sj14);
IkReal x14220=(cj16*r01);
IkReal x14221=(r00*sj16);
IkReal x14222=((1.0)*cj14*cj15);
if( IKabs((((x14219*x14221))+((sj14*x14216))+(((-1.0)*x14217*x14218))+((cj14*x14215))+((x14219*x14220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj14*x14218))+((sj14*x14215))+(((-1.0)*x14221*x14222))+(((-1.0)*x14220*x14222))+(((-1.0)*x14216*x14217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x14219*x14221))+((sj14*x14216))+(((-1.0)*x14217*x14218))+((cj14*x14215))+((x14219*x14220))))+IKsqr(((((-1.0)*sj14*x14218))+((sj14*x14215))+(((-1.0)*x14221*x14222))+(((-1.0)*x14220*x14222))+(((-1.0)*x14216*x14217))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x14219*x14221))+((sj14*x14216))+(((-1.0)*x14217*x14218))+((cj14*x14215))+((x14219*x14220))), ((((-1.0)*sj14*x14218))+((sj14*x14215))+(((-1.0)*x14221*x14222))+(((-1.0)*x14220*x14222))+(((-1.0)*x14216*x14217))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14223=IKcos(j10);
IkReal x14224=(cj14*sj15);
IkReal x14225=(cj16*sj14);
IkReal x14226=((1.0)*sj14*sj16);
IkReal x14227=(cj14*cj15*cj16);
IkReal x14228=(cj14*cj15*sj16);
IkReal x14229=IKsin(j10);
IkReal x14230=(cj14*cj16);
IkReal x14231=((1.0)*cj14*sj16);
IkReal x14232=((1.0)*sj14*sj15);
IkReal x14233=((1.0)*cj15*cj16*sj14);
IkReal x14234=((1.0)*cj15*sj14*sj16);
IkReal x14235=((0.37429)*cj15);
IkReal x14236=((0.01)*sj15);
IkReal x14237=((0.01)*cj15*cj16);
IkReal x14238=((0.01)*cj15*sj16);
IkReal x14239=((0.37429)*cj16*sj15);
IkReal x14240=((0.37429)*sj15*sj16);
evalcond[0]=(((r00*x14228))+x14223+(((-1.0)*r01*x14226))+((r00*x14225))+((r02*x14224))+((r01*x14227)));
evalcond[1]=(((r11*x14227))+((r12*x14224))+x14229+((r10*x14225))+((r10*x14228))+(((-1.0)*r11*x14226)));
evalcond[2]=(x14229+(((-1.0)*r01*x14233))+(((-1.0)*r00*x14234))+(((-1.0)*r01*x14231))+((r00*x14230))+(((-1.0)*r02*x14232)));
evalcond[3]=((((-1.0)*r11*x14231))+(((-1.0)*r11*x14233))+((r10*x14230))+(((-1.0)*r12*x14232))+(((-1.0)*x14223))+(((-1.0)*r10*x14234)));
evalcond[4]=(((r01*x14237))+(((-1.0)*(1.0)*px))+((r00*x14238))+(((-1.0)*r01*x14239))+((r02*x14236))+(((-1.0)*r00*x14240))+(((-0.29542)*x14223))+((r02*x14235)));
evalcond[5]=(((r12*x14236))+(((-1.0)*(1.0)*py))+((r11*x14237))+((r12*x14235))+(((-1.0)*r11*x14239))+(((-1.0)*r10*x14240))+(((-0.29542)*x14229))+((r10*x14238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14241=((1.0)*cj15*sj14);
CheckValue<IkReal> x14242=IKPowWithIntegerCheck(cj12,-1);
if(!x14242.valid){
continue;
}
CheckValue<IkReal> x14243=IKPowWithIntegerCheck(sj12,-1);
if(!x14243.valid){
continue;
}
if( IKabs(((x14242.value)*(((((-1.0)*cj16*r01*x14241))+(((-1.0)*r00*sj16*x14241))+(((-1.0)*(1.0)*cj14*r01*sj16))+((cj14*cj16*r00))+(((-1.0)*(1.0)*r02*sj14*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14243.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14242.value)*(((((-1.0)*cj16*r01*x14241))+(((-1.0)*r00*sj16*x14241))+(((-1.0)*(1.0)*cj14*r01*sj16))+((cj14*cj16*r00))+(((-1.0)*(1.0)*r02*sj14*sj15))))))+IKsqr(((x14243.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x14242.value)*(((((-1.0)*cj16*r01*x14241))+(((-1.0)*r00*sj16*x14241))+(((-1.0)*(1.0)*cj14*r01*sj16))+((cj14*cj16*r00))+(((-1.0)*(1.0)*r02*sj14*sj15))))), ((x14243.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14244=(cj15*r12);
IkReal x14245=IKcos(j10);
IkReal x14246=(sj12*x14245);
IkReal x14247=(cj16*r11*sj15);
IkReal x14248=(r10*sj15*sj16);
IkReal x14249=(cj15*r02);
IkReal x14250=IKsin(j10);
IkReal x14251=((1.0)*x14250);
IkReal x14252=(cj16*r01*sj15);
IkReal x14253=(r00*sj15*sj16);
IkReal x14254=(cj14*sj15);
IkReal x14255=(cj16*sj14);
IkReal x14256=((1.0)*sj14*sj16);
IkReal x14257=(cj14*cj15*cj16);
IkReal x14258=(cj14*cj15*sj16);
IkReal x14259=(cj14*cj16);
IkReal x14260=((1.0)*cj14*sj16);
IkReal x14261=((1.0)*sj14*sj15);
IkReal x14262=((1.0)*cj15*cj16*sj14);
IkReal x14263=((1.0)*cj15*sj14*sj16);
IkReal x14264=((0.01)*sj15);
IkReal x14265=((0.01)*cj15*cj16);
IkReal x14266=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x14248))+x14246+x14244+(((-1.0)*x14247)));
evalcond[1]=((((-1.0)*sj12*x14251))+(((-1.0)*x14253))+(((-1.0)*x14252))+x14249);
evalcond[2]=((((-1.0)*r01*x14256))+((r02*x14254))+x14245+((r01*x14257))+((r00*x14258))+((r00*x14255)));
evalcond[3]=((((-1.0)*r11*x14256))+x14250+((r12*x14254))+((r10*x14255))+((r10*x14258))+((r11*x14257)));
evalcond[4]=(((cj12*x14245))+(((-1.0)*r11*x14262))+((r10*x14259))+(((-1.0)*r12*x14261))+(((-1.0)*r11*x14260))+(((-1.0)*r10*x14263)));
evalcond[5]=((((-1.0)*r02*x14261))+(((-1.0)*r00*x14263))+(((-1.0)*r01*x14262))+((r00*x14259))+(((-1.0)*cj12*x14251))+(((-1.0)*r01*x14260)));
evalcond[6]=((((-0.37429)*x14253))+(((-1.0)*(1.0)*px))+((r00*x14266))+(((-0.069)*sj12*x14250))+(((0.37429)*x14249))+((r02*x14264))+((r01*x14265))+(((-0.37429)*x14252))+(((-0.29542)*x14245)));
evalcond[7]=(((r12*x14264))+(((0.37429)*x14244))+(((-1.0)*(1.0)*py))+(((0.069)*x14246))+(((-0.37429)*x14247))+((r10*x14266))+(((-0.29542)*x14250))+((r11*x14265))+(((-0.37429)*x14248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14267=((1.0)*r12);
IkReal x14268=(cj16*r11);
IkReal x14269=((1.0)*cj14*cj15);
IkReal x14270=(r10*sj16);
CheckValue<IkReal> x14271=IKPowWithIntegerCheck(sj12,-1);
if(!x14271.valid){
continue;
}
if( IKabs(((((-1.0)*x14269*x14270))+(((-1.0)*(1.0)*cj16*r10*sj14))+(((-1.0)*x14268*x14269))+(((-1.0)*cj14*sj15*x14267))+((r11*sj14*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14271.value)*((((sj15*x14268))+((sj15*x14270))+(((-1.0)*cj15*x14267)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14269*x14270))+(((-1.0)*(1.0)*cj16*r10*sj14))+(((-1.0)*x14268*x14269))+(((-1.0)*cj14*sj15*x14267))+((r11*sj14*sj16))))+IKsqr(((x14271.value)*((((sj15*x14268))+((sj15*x14270))+(((-1.0)*cj15*x14267))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x14269*x14270))+(((-1.0)*(1.0)*cj16*r10*sj14))+(((-1.0)*x14268*x14269))+(((-1.0)*cj14*sj15*x14267))+((r11*sj14*sj16))), ((x14271.value)*((((sj15*x14268))+((sj15*x14270))+(((-1.0)*cj15*x14267))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14272=(cj15*r12);
IkReal x14273=IKcos(j10);
IkReal x14274=(sj12*x14273);
IkReal x14275=(cj16*r11*sj15);
IkReal x14276=(r10*sj15*sj16);
IkReal x14277=(cj15*r02);
IkReal x14278=IKsin(j10);
IkReal x14279=((1.0)*x14278);
IkReal x14280=(cj16*r01*sj15);
IkReal x14281=(r00*sj15*sj16);
IkReal x14282=(cj14*sj15);
IkReal x14283=(cj16*sj14);
IkReal x14284=((1.0)*sj14*sj16);
IkReal x14285=(cj14*cj15*cj16);
IkReal x14286=(cj14*cj15*sj16);
IkReal x14287=(cj14*cj16);
IkReal x14288=((1.0)*cj14*sj16);
IkReal x14289=((1.0)*sj14*sj15);
IkReal x14290=((1.0)*cj15*cj16*sj14);
IkReal x14291=((1.0)*cj15*sj14*sj16);
IkReal x14292=((0.01)*sj15);
IkReal x14293=((0.01)*cj15*cj16);
IkReal x14294=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x14276))+x14274+x14272+(((-1.0)*x14275)));
evalcond[1]=(x14277+(((-1.0)*sj12*x14279))+(((-1.0)*x14281))+(((-1.0)*x14280)));
evalcond[2]=((((-1.0)*r01*x14284))+((r00*x14283))+((r01*x14285))+((r02*x14282))+x14273+((r00*x14286)));
evalcond[3]=(((r11*x14285))+(((-1.0)*r11*x14284))+((r10*x14286))+((r10*x14283))+((r12*x14282))+x14278);
evalcond[4]=((((-1.0)*r11*x14288))+((cj12*x14273))+(((-1.0)*r11*x14290))+(((-1.0)*r10*x14291))+(((-1.0)*r12*x14289))+((r10*x14287)));
evalcond[5]=((((-1.0)*r02*x14289))+(((-1.0)*r00*x14291))+(((-1.0)*r01*x14288))+((r00*x14287))+(((-1.0)*cj12*x14279))+(((-1.0)*r01*x14290)));
evalcond[6]=(((r01*x14293))+(((-1.0)*(1.0)*px))+((r00*x14294))+(((-0.069)*sj12*x14278))+(((0.37429)*x14277))+(((-0.29542)*x14273))+(((-0.37429)*x14280))+((r02*x14292))+(((-0.37429)*x14281)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r10*x14294))+(((-0.29542)*x14278))+(((-0.37429)*x14275))+((r12*x14292))+(((0.37429)*x14272))+((r11*x14293))+(((0.069)*x14274))+(((-0.37429)*x14276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14295=(cj16*sj15);
IkReal x14296=(sj15*sj16);
CheckValue<IkReal> x14297=IKPowWithIntegerCheck(IKsign(sj12),-1);
if(!x14297.valid){
continue;
}
CheckValue<IkReal> x14298 = IKatan2WithCheck(IkReal((((cj15*r02))+(((-1.0)*r01*x14295))+(((-1.0)*r00*x14296)))),IkReal((((r10*x14296))+((r11*x14295))+(((-1.0)*(1.0)*cj15*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14298.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14297.value)))+(x14298.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14299=(cj15*r12);
IkReal x14300=IKcos(j10);
IkReal x14301=(sj12*x14300);
IkReal x14302=(cj16*r11*sj15);
IkReal x14303=(r10*sj15*sj16);
IkReal x14304=(cj15*r02);
IkReal x14305=IKsin(j10);
IkReal x14306=((1.0)*x14305);
IkReal x14307=(cj16*r01*sj15);
IkReal x14308=(r00*sj15*sj16);
IkReal x14309=(cj14*sj15);
IkReal x14310=(cj16*sj14);
IkReal x14311=((1.0)*sj14*sj16);
IkReal x14312=(cj14*cj15*cj16);
IkReal x14313=(cj14*cj15*sj16);
IkReal x14314=(cj14*cj16);
IkReal x14315=((1.0)*cj14*sj16);
IkReal x14316=((1.0)*sj14*sj15);
IkReal x14317=((1.0)*cj15*cj16*sj14);
IkReal x14318=((1.0)*cj15*sj14*sj16);
IkReal x14319=((0.01)*sj15);
IkReal x14320=((0.01)*cj15*cj16);
IkReal x14321=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x14303))+x14299+(((-1.0)*x14302))+x14301);
evalcond[1]=((((-1.0)*x14307))+(((-1.0)*x14308))+(((-1.0)*sj12*x14306))+x14304);
evalcond[2]=(((r00*x14313))+((r00*x14310))+(((-1.0)*r01*x14311))+((r02*x14309))+((r01*x14312))+x14300);
evalcond[3]=(((r12*x14309))+(((-1.0)*r11*x14311))+((r10*x14310))+((r10*x14313))+((r11*x14312))+x14305);
evalcond[4]=(((r10*x14314))+(((-1.0)*r10*x14318))+(((-1.0)*r12*x14316))+(((-1.0)*r11*x14315))+((cj12*x14300))+(((-1.0)*r11*x14317)));
evalcond[5]=((((-1.0)*r00*x14318))+((r00*x14314))+(((-1.0)*r01*x14315))+(((-1.0)*cj12*x14306))+(((-1.0)*r01*x14317))+(((-1.0)*r02*x14316)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x14308))+(((-0.37429)*x14307))+((r00*x14321))+((r01*x14320))+(((-0.069)*sj12*x14305))+(((0.37429)*x14304))+((r02*x14319))+(((-0.29542)*x14300)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r12*x14319))+(((-0.29542)*x14305))+(((-0.37429)*x14303))+((r10*x14321))+(((-0.37429)*x14302))+((r11*x14320))+(((0.069)*x14301))+(((0.37429)*x14299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x14322=((1.0)*cj16*sj15);
IkReal x14323=((1.0)*sj15*sj16);
j10eval[0]=sj11;
j10eval[1]=((IKabs((((cj15*r02))+(((-1.0)*r00*x14323))+(((-1.0)*r01*x14322)))))+(IKabs(((((-1.0)*r11*x14322))+((cj15*r12))+(((-1.0)*r10*x14323))))));
j10eval[2]=IKsign(sj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
j10eval[0]=sj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14324=((1.0)*cj16*sj15);
IkReal x14325=((1.0)*sj15*sj16);
if( IKabs(((((-1.0)*r10*x14325))+((cj15*r12))+(((-1.0)*r11*x14324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x14325))+(((-1.0)*r01*x14324))+((cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x14325))+((cj15*r12))+(((-1.0)*r11*x14324))))+IKsqr(((((-1.0)*r00*x14325))+(((-1.0)*r01*x14324))+((cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x14325))+((cj15*r12))+(((-1.0)*r11*x14324))), ((((-1.0)*r00*x14325))+(((-1.0)*r01*x14324))+((cj15*r02))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x14326=((-1.0)*(((1.0)*(IKsin(j10)))));
IkReal x14327=((1.0)*cj16*sj15);
IkReal x14328=((1.0)*sj15*sj16);
IkReal x14329=IKcos(j10);
IkReal x14330=(cj14*cj16);
IkReal x14331=((1.0)*cj14*sj16);
IkReal x14332=((1.0)*sj14*sj15);
IkReal x14333=((1.0)*cj15*cj16*sj14);
IkReal x14334=((1.0)*cj15*sj14*sj16);
evalcond[0]=((((-1.0)*r10*x14328))+(((-1.0)*r11*x14327))+x14326+((cj15*r12)));
evalcond[1]=((((-1.0)*x14329))+(((-1.0)*r01*x14327))+(((-1.0)*r00*x14328))+((cj15*r02)));
evalcond[2]=(((r10*x14330))+(((-1.0)*r11*x14333))+(((-1.0)*r10*x14334))+x14329+(((-1.0)*r12*x14332))+(((-1.0)*r11*x14331)));
evalcond[3]=((((-1.0)*r01*x14331))+(((-1.0)*r02*x14332))+x14326+(((-1.0)*r00*x14334))+((r00*x14330))+(((-1.0)*r01*x14333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14335=((1.0)*cj15);
IkReal x14336=(cj16*sj15);
IkReal x14337=(sj15*sj16);
if( IKabs((((r11*x14336))+(((-1.0)*r12*x14335))+((r10*x14337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x14336))+((r00*x14337))+(((-1.0)*r02*x14335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x14336))+(((-1.0)*r12*x14335))+((r10*x14337))))+IKsqr((((r01*x14336))+((r00*x14337))+(((-1.0)*r02*x14335))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r11*x14336))+(((-1.0)*r12*x14335))+((r10*x14337))), (((r01*x14336))+((r00*x14337))+(((-1.0)*r02*x14335))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14338=IKsin(j10);
IkReal x14339=(cj15*r12);
IkReal x14340=(cj16*r11*sj15);
IkReal x14341=(r10*sj16);
IkReal x14342=IKcos(j10);
IkReal x14343=(cj15*r02);
IkReal x14344=(cj16*r01*sj15);
IkReal x14345=(r00*sj15*sj16);
IkReal x14346=(cj14*cj16);
IkReal x14347=((1.0)*cj14*sj16);
IkReal x14348=((1.0)*sj14*sj15);
IkReal x14349=((1.0)*cj15*cj16*sj14);
IkReal x14350=((1.0)*cj15*sj14);
IkReal x14351=((0.01)*sj15);
IkReal x14352=((0.01)*cj15*cj16);
IkReal x14353=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*sj15*x14341))+(((-1.0)*x14340))+x14339+x14338);
evalcond[1]=(x14343+x14342+(((-1.0)*x14345))+(((-1.0)*x14344)));
evalcond[2]=((((-1.0)*x14341*x14350))+(((-1.0)*r11*x14349))+((r10*x14346))+x14342+(((-1.0)*r11*x14347))+(((-1.0)*r12*x14348)));
evalcond[3]=((((-1.0)*r01*x14347))+(((-1.0)*r02*x14348))+(((-1.0)*r00*sj16*x14350))+(((-1.0)*r01*x14349))+(((-1.0)*x14338))+((r00*x14346)));
evalcond[4]=((((-0.37429)*x14344))+(((-1.0)*(1.0)*px))+((r01*x14352))+(((0.138)*x14342))+(((0.37429)*x14343))+((r00*x14353))+((r02*x14351))+(((-0.37429)*x14345)));
evalcond[5]=((((0.37429)*x14339))+(((-0.37429)*sj15*x14341))+(((-1.0)*(1.0)*py))+((r11*x14352))+(((0.138)*x14338))+(((-0.37429)*x14340))+((r10*x14353))+((r12*x14351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14354=((1.0)*sj15);
IkReal x14355=(cj14*cj15);
CheckValue<IkReal> x14356=IKPowWithIntegerCheck(sj11,-1);
if(!x14356.valid){
continue;
}
CheckValue<IkReal> x14357=IKPowWithIntegerCheck(cj11,-1);
if(!x14357.valid){
continue;
}
if( IKabs(((x14356.value)*(((((-1.0)*cj16*r11*x14354))+((cj15*r12))+(((-1.0)*r10*sj16*x14354)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14357.value)*((((r00*sj16*x14355))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj16*r01*x14355))+((cj14*r02*sj15))+((cj16*r00*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14356.value)*(((((-1.0)*cj16*r11*x14354))+((cj15*r12))+(((-1.0)*r10*sj16*x14354))))))+IKsqr(((x14357.value)*((((r00*sj16*x14355))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj16*r01*x14355))+((cj14*r02*sj15))+((cj16*r00*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x14356.value)*(((((-1.0)*cj16*r11*x14354))+((cj15*r12))+(((-1.0)*r10*sj16*x14354))))), ((x14357.value)*((((r00*sj16*x14355))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj16*r01*x14355))+((cj14*r02*sj15))+((cj16*r00*sj14))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14358=(cj15*r12);
IkReal x14359=IKsin(j10);
IkReal x14360=((1.0)*x14359);
IkReal x14361=(cj16*r11*sj15);
IkReal x14362=(r10*sj15*sj16);
IkReal x14363=(cj15*r02);
IkReal x14364=IKcos(j10);
IkReal x14365=((1.0)*x14364);
IkReal x14366=(cj16*r01*sj15);
IkReal x14367=(r00*sj15*sj16);
IkReal x14368=(cj14*cj16);
IkReal x14369=((1.0)*cj14*sj16);
IkReal x14370=((1.0)*sj14*sj15);
IkReal x14371=((1.0)*cj15*cj16*sj14);
IkReal x14372=((1.0)*cj15*sj14*sj16);
IkReal x14373=(cj14*sj15);
IkReal x14374=(cj16*sj14);
IkReal x14375=((1.0)*sj14*sj16);
IkReal x14376=(cj14*cj15*cj16);
IkReal x14377=(cj14*cj15*sj16);
IkReal x14378=((0.01)*sj15);
IkReal x14379=((0.069)*x14364);
IkReal x14380=((0.36442)*cj11);
IkReal x14381=((0.01)*cj15*cj16);
IkReal x14382=((0.01)*cj15*sj16);
IkReal x14383=((0.069)*x14359);
evalcond[0]=(x14358+(((-1.0)*x14362))+(((-1.0)*x14361))+(((-1.0)*sj11*x14360)));
evalcond[1]=((((-1.0)*x14367))+x14363+(((-1.0)*sj11*x14365))+(((-1.0)*x14366)));
evalcond[2]=(((r10*x14368))+x14364+(((-1.0)*r10*x14372))+(((-1.0)*r11*x14371))+(((-1.0)*r12*x14370))+(((-1.0)*r11*x14369)));
evalcond[3]=((((-1.0)*r01*x14375))+((r01*x14376))+((r00*x14374))+((r00*x14377))+(((-1.0)*cj11*x14365))+((r02*x14373)));
evalcond[4]=(((r12*x14373))+((r10*x14374))+((r10*x14377))+((r11*x14376))+(((-1.0)*r11*x14375))+(((-1.0)*cj11*x14360)));
evalcond[5]=((((-1.0)*r01*x14369))+(((-1.0)*r00*x14372))+((r00*x14368))+(((-1.0)*x14360))+(((-1.0)*r02*x14370))+(((-1.0)*r01*x14371)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x14366))+((r01*x14381))+(((0.37429)*x14363))+(((-1.0)*sj11*x14379))+x14379+((x14364*x14380))+((r00*x14382))+(((-0.37429)*x14367))+((r02*x14378)));
evalcond[7]=((((0.37429)*x14358))+((r12*x14378))+(((-1.0)*(1.0)*py))+(((-1.0)*sj11*x14383))+x14383+(((-0.37429)*x14362))+(((-0.37429)*x14361))+((r10*x14382))+((r11*x14381))+((x14359*x14380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14384=((1.0)*cj16);
IkReal x14385=(r10*sj16);
IkReal x14386=(cj15*sj14);
CheckValue<IkReal> x14387=IKPowWithIntegerCheck(sj11,-1);
if(!x14387.valid){
continue;
}
if( IKabs(((x14387.value)*(((((-1.0)*sj15*x14385))+(((-1.0)*r11*sj15*x14384))+((cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj16*r11*x14386))+(((-1.0)*cj14*r10*x14384))+((x14385*x14386))+((r12*sj14*sj15))+((cj14*r11*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14387.value)*(((((-1.0)*sj15*x14385))+(((-1.0)*r11*sj15*x14384))+((cj15*r12))))))+IKsqr((((cj16*r11*x14386))+(((-1.0)*cj14*r10*x14384))+((x14385*x14386))+((r12*sj14*sj15))+((cj14*r11*sj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x14387.value)*(((((-1.0)*sj15*x14385))+(((-1.0)*r11*sj15*x14384))+((cj15*r12))))), (((cj16*r11*x14386))+(((-1.0)*cj14*r10*x14384))+((x14385*x14386))+((r12*sj14*sj15))+((cj14*r11*sj16))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14388=(cj15*r12);
IkReal x14389=IKsin(j10);
IkReal x14390=((1.0)*x14389);
IkReal x14391=(cj16*r11*sj15);
IkReal x14392=(r10*sj15*sj16);
IkReal x14393=(cj15*r02);
IkReal x14394=IKcos(j10);
IkReal x14395=((1.0)*x14394);
IkReal x14396=(cj16*r01*sj15);
IkReal x14397=(r00*sj15*sj16);
IkReal x14398=(cj14*cj16);
IkReal x14399=((1.0)*cj14*sj16);
IkReal x14400=((1.0)*sj14*sj15);
IkReal x14401=((1.0)*cj15*cj16*sj14);
IkReal x14402=((1.0)*cj15*sj14*sj16);
IkReal x14403=(cj14*sj15);
IkReal x14404=(cj16*sj14);
IkReal x14405=((1.0)*sj14*sj16);
IkReal x14406=(cj14*cj15*cj16);
IkReal x14407=(cj14*cj15*sj16);
IkReal x14408=((0.01)*sj15);
IkReal x14409=((0.069)*x14394);
IkReal x14410=((0.36442)*cj11);
IkReal x14411=((0.01)*cj15*cj16);
IkReal x14412=((0.01)*cj15*sj16);
IkReal x14413=((0.069)*x14389);
evalcond[0]=((((-1.0)*x14391))+(((-1.0)*sj11*x14390))+(((-1.0)*x14392))+x14388);
evalcond[1]=((((-1.0)*x14396))+(((-1.0)*x14397))+x14393+(((-1.0)*sj11*x14395)));
evalcond[2]=(x14394+(((-1.0)*r11*x14401))+((r10*x14398))+(((-1.0)*r11*x14399))+(((-1.0)*r10*x14402))+(((-1.0)*r12*x14400)));
evalcond[3]=(((r01*x14406))+(((-1.0)*cj11*x14395))+((r00*x14407))+((r00*x14404))+(((-1.0)*r01*x14405))+((r02*x14403)));
evalcond[4]=((((-1.0)*r11*x14405))+((r10*x14407))+((r11*x14406))+((r10*x14404))+(((-1.0)*cj11*x14390))+((r12*x14403)));
evalcond[5]=((((-1.0)*r01*x14401))+(((-1.0)*r01*x14399))+(((-1.0)*r00*x14402))+(((-1.0)*r02*x14400))+((r00*x14398))+(((-1.0)*x14390)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((0.37429)*x14393))+((x14394*x14410))+(((-1.0)*sj11*x14409))+x14409+(((-0.37429)*x14396))+((r01*x14411))+(((-0.37429)*x14397))+((r00*x14412))+((r02*x14408)));
evalcond[7]=((((-0.37429)*x14391))+(((-1.0)*(1.0)*py))+x14413+(((-0.37429)*x14392))+((r12*x14408))+((r10*x14412))+(((-1.0)*sj11*x14413))+((x14389*x14410))+(((0.37429)*x14388))+((r11*x14411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14414=((1.0)*cj16*sj15);
IkReal x14415=((1.0)*sj15*sj16);
CheckValue<IkReal> x14416 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x14414))+(((-1.0)*r10*x14415))+((cj15*r12)))),IkReal(((((-1.0)*r00*x14415))+(((-1.0)*r01*x14414))+((cj15*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14416.valid){
continue;
}
CheckValue<IkReal> x14417=IKPowWithIntegerCheck(IKsign(sj11),-1);
if(!x14417.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14416.value)+(((1.5707963267949)*(x14417.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14418=(cj15*r12);
IkReal x14419=IKsin(j10);
IkReal x14420=((1.0)*x14419);
IkReal x14421=(cj16*r11*sj15);
IkReal x14422=(r10*sj15*sj16);
IkReal x14423=(cj15*r02);
IkReal x14424=IKcos(j10);
IkReal x14425=((1.0)*x14424);
IkReal x14426=(cj16*r01*sj15);
IkReal x14427=(r00*sj15*sj16);
IkReal x14428=(cj14*cj16);
IkReal x14429=((1.0)*cj14*sj16);
IkReal x14430=((1.0)*sj14*sj15);
IkReal x14431=((1.0)*cj15*cj16*sj14);
IkReal x14432=((1.0)*cj15*sj14*sj16);
IkReal x14433=(cj14*sj15);
IkReal x14434=(cj16*sj14);
IkReal x14435=((1.0)*sj14*sj16);
IkReal x14436=(cj14*cj15*cj16);
IkReal x14437=(cj14*cj15*sj16);
IkReal x14438=((0.01)*sj15);
IkReal x14439=((0.069)*x14424);
IkReal x14440=((0.36442)*cj11);
IkReal x14441=((0.01)*cj15*cj16);
IkReal x14442=((0.01)*cj15*sj16);
IkReal x14443=((0.069)*x14419);
evalcond[0]=((((-1.0)*x14422))+x14418+(((-1.0)*x14421))+(((-1.0)*sj11*x14420)));
evalcond[1]=((((-1.0)*sj11*x14425))+x14423+(((-1.0)*x14426))+(((-1.0)*x14427)));
evalcond[2]=((((-1.0)*r10*x14432))+(((-1.0)*r11*x14431))+x14424+((r10*x14428))+(((-1.0)*r11*x14429))+(((-1.0)*r12*x14430)));
evalcond[3]=(((r00*x14434))+((r00*x14437))+(((-1.0)*r01*x14435))+((r01*x14436))+(((-1.0)*cj11*x14425))+((r02*x14433)));
evalcond[4]=((((-1.0)*cj11*x14420))+((r11*x14436))+(((-1.0)*r11*x14435))+((r10*x14434))+((r10*x14437))+((r12*x14433)));
evalcond[5]=((((-1.0)*r01*x14429))+(((-1.0)*x14420))+((r00*x14428))+(((-1.0)*r02*x14430))+(((-1.0)*r00*x14432))+(((-1.0)*r01*x14431)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x14426))+(((-0.37429)*x14427))+x14439+(((0.37429)*x14423))+(((-1.0)*sj11*x14439))+((r02*x14438))+((r00*x14442))+((r01*x14441))+((x14424*x14440)));
evalcond[7]=(((r11*x14441))+(((-0.37429)*x14421))+((r10*x14442))+(((-1.0)*(1.0)*py))+((r12*x14438))+(((0.37429)*x14418))+(((-1.0)*sj11*x14443))+((x14419*x14440))+(((-0.37429)*x14422))+x14443);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x14444=((1.0)*cj15);
IkReal x14445=(cj16*sj15);
IkReal x14446=(sj15*sj16);
j10eval[0]=sj11;
j10eval[1]=((IKabs((((r11*x14445))+((r10*x14446))+(((-1.0)*r12*x14444)))))+(IKabs((((r00*x14446))+((r01*x14445))+(((-1.0)*r02*x14444))))));
j10eval[2]=IKsign(sj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j10eval[0]=sj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14447=((1.0)*cj15);
IkReal x14448=(cj16*sj15);
IkReal x14449=(sj15*sj16);
if( IKabs((((r11*x14448))+((r10*x14449))+(((-1.0)*r12*x14447)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x14448))+((r00*x14449))+(((-1.0)*r02*x14447)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x14448))+((r10*x14449))+(((-1.0)*r12*x14447))))+IKsqr((((r01*x14448))+((r00*x14449))+(((-1.0)*r02*x14447))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r11*x14448))+((r10*x14449))+(((-1.0)*r12*x14447))), (((r01*x14448))+((r00*x14449))+(((-1.0)*r02*x14447))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14450=IKsin(j10);
IkReal x14451=(cj15*r12);
IkReal x14452=(cj16*r11*sj15);
IkReal x14453=(r10*sj16);
IkReal x14454=IKcos(j10);
IkReal x14455=(cj15*r02);
IkReal x14456=(cj16*r01*sj15);
IkReal x14457=(r00*sj15*sj16);
IkReal x14458=(cj14*cj16);
IkReal x14459=((1.0)*cj14*sj16);
IkReal x14460=((1.0)*sj14*sj15);
IkReal x14461=((1.0)*cj15*cj16*sj14);
IkReal x14462=((1.0)*cj15*sj14);
IkReal x14463=((0.01)*sj15);
IkReal x14464=((0.01)*cj15*cj16);
IkReal x14465=((0.01)*cj15*sj16);
evalcond[0]=(x14450+x14451+(((-1.0)*x14452))+(((-1.0)*sj15*x14453)));
evalcond[1]=((((-1.0)*x14456))+x14454+x14455+(((-1.0)*x14457)));
evalcond[2]=(x14450+(((-1.0)*r01*x14461))+(((-1.0)*r00*sj16*x14462))+(((-1.0)*r02*x14460))+(((-1.0)*r01*x14459))+((r00*x14458)));
evalcond[3]=(((r10*x14458))+(((-1.0)*r11*x14459))+(((-1.0)*x14453*x14462))+(((-1.0)*r12*x14460))+(((-1.0)*x14454))+(((-1.0)*r11*x14461)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((-0.37429)*x14457))+(((-0.37429)*x14456))+(((0.138)*x14454))+((r02*x14463))+((r00*x14465))+(((0.37429)*x14455))+((r01*x14464)));
evalcond[5]=(((r10*x14465))+(((0.138)*x14450))+(((-1.0)*(1.0)*py))+((r11*x14464))+(((-0.37429)*sj15*x14453))+(((0.37429)*x14451))+(((-0.37429)*x14452))+((r12*x14463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14466=((1.0)*cj16*sj15);
IkReal x14467=((1.0)*sj15*sj16);
if( IKabs(((((-1.0)*r11*x14466))+((cj15*r12))+(((-1.0)*r10*x14467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x14466))+((cj15*r02))+(((-1.0)*r00*x14467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x14466))+((cj15*r12))+(((-1.0)*r10*x14467))))+IKsqr(((((-1.0)*r01*x14466))+((cj15*r02))+(((-1.0)*r00*x14467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r11*x14466))+((cj15*r12))+(((-1.0)*r10*x14467))), ((((-1.0)*r01*x14466))+((cj15*r02))+(((-1.0)*r00*x14467))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x14468=IKsin(j10);
IkReal x14469=((1.0)*cj16*sj15);
IkReal x14470=((1.0)*sj15*sj16);
IkReal x14471=((-1.0)*(((1.0)*(IKcos(j10)))));
IkReal x14472=(cj14*cj16);
IkReal x14473=((1.0)*cj14*sj16);
IkReal x14474=((1.0)*sj14*sj15);
IkReal x14475=((1.0)*cj15*cj16*sj14);
IkReal x14476=((1.0)*cj15*sj14*sj16);
evalcond[0]=((((-1.0)*r11*x14469))+(((-1.0)*r10*x14470))+(((-1.0)*x14468))+((cj15*r12)));
evalcond[1]=((((-1.0)*r01*x14469))+x14471+((cj15*r02))+(((-1.0)*r00*x14470)));
evalcond[2]=((((-1.0)*r01*x14473))+(((-1.0)*r02*x14474))+((r00*x14472))+(((-1.0)*r00*x14476))+(((-1.0)*r01*x14475))+x14468);
evalcond[3]=((((-1.0)*r11*x14473))+((r10*x14472))+(((-1.0)*r10*x14476))+(((-1.0)*r11*x14475))+x14471+(((-1.0)*r12*x14474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14477=(cj14*cj15);
CheckValue<IkReal> x14478=IKPowWithIntegerCheck(sj11,-1);
if(!x14478.valid){
continue;
}
CheckValue<IkReal> x14479=IKPowWithIntegerCheck(cj11,-1);
if(!x14479.valid){
continue;
}
if( IKabs(((x14478.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14479.value)*((((r00*sj16*x14477))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((cj16*r01*x14477))+((cj16*r00*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14478.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12))))))+IKsqr(((x14479.value)*((((r00*sj16*x14477))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((cj16*r01*x14477))+((cj16*r00*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x14478.value)*((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12))))), ((x14479.value)*((((r00*sj16*x14477))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((cj16*r01*x14477))+((cj16*r00*sj14))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14480=(cj15*r12);
IkReal x14481=IKsin(j10);
IkReal x14482=(sj11*x14481);
IkReal x14483=(cj16*r11*sj15);
IkReal x14484=(r10*sj15*sj16);
IkReal x14485=(cj15*r02);
IkReal x14486=IKcos(j10);
IkReal x14487=(sj11*x14486);
IkReal x14488=(cj16*r01*sj15);
IkReal x14489=(r00*sj15*sj16);
IkReal x14490=(cj14*cj16);
IkReal x14491=((1.0)*cj14*sj16);
IkReal x14492=((1.0)*sj14*sj15);
IkReal x14493=((1.0)*cj15*cj16*sj14);
IkReal x14494=((1.0)*cj15*sj14*sj16);
IkReal x14495=(cj14*sj15);
IkReal x14496=(cj16*sj14);
IkReal x14497=((1.0)*x14486);
IkReal x14498=((1.0)*sj14*sj16);
IkReal x14499=(cj14*cj15*cj16);
IkReal x14500=(cj14*cj15*sj16);
IkReal x14501=(cj11*x14481);
IkReal x14502=((0.01)*sj15);
IkReal x14503=((0.01)*cj15*cj16);
IkReal x14504=((0.01)*cj15*sj16);
evalcond[0]=(x14480+x14482+(((-1.0)*x14484))+(((-1.0)*x14483)));
evalcond[1]=(x14485+x14487+(((-1.0)*x14488))+(((-1.0)*x14489)));
evalcond[2]=(x14481+(((-1.0)*r01*x14493))+(((-1.0)*r00*x14494))+(((-1.0)*r01*x14491))+(((-1.0)*r02*x14492))+((r00*x14490)));
evalcond[3]=((((-1.0)*r01*x14498))+((r00*x14496))+(((-1.0)*cj11*x14497))+((r02*x14495))+((r00*x14500))+((r01*x14499)));
evalcond[4]=(((r11*x14499))+(((-1.0)*x14501))+((r10*x14496))+((r12*x14495))+((r10*x14500))+(((-1.0)*r11*x14498)));
evalcond[5]=(((r10*x14490))+(((-1.0)*r11*x14493))+(((-1.0)*x14497))+(((-1.0)*r11*x14491))+(((-1.0)*r10*x14494))+(((-1.0)*r12*x14492)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x14489))+(((0.069)*x14486))+((r02*x14502))+((r00*x14504))+(((0.37429)*x14485))+(((0.36442)*cj11*x14486))+(((-0.37429)*x14488))+((r01*x14503))+(((0.069)*x14487)));
evalcond[7]=(((r10*x14504))+(((-1.0)*(1.0)*py))+((r12*x14502))+(((0.37429)*x14480))+(((0.36442)*x14501))+(((0.069)*x14482))+(((0.069)*x14481))+(((-0.37429)*x14483))+(((-0.37429)*x14484))+((r11*x14503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14505=(cj15*sj14);
IkReal x14506=(cj16*r01);
IkReal x14507=(r00*sj16);
CheckValue<IkReal> x14508=IKPowWithIntegerCheck(sj11,-1);
if(!x14508.valid){
continue;
}
if( IKabs((((r02*sj14*sj15))+((x14505*x14506))+((x14505*x14507))+(((-1.0)*(1.0)*cj14*cj16*r00))+((cj14*r01*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14508.value)*((((sj15*x14506))+((sj15*x14507))+(((-1.0)*(1.0)*cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj14*sj15))+((x14505*x14506))+((x14505*x14507))+(((-1.0)*(1.0)*cj14*cj16*r00))+((cj14*r01*sj16))))+IKsqr(((x14508.value)*((((sj15*x14506))+((sj15*x14507))+(((-1.0)*(1.0)*cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r02*sj14*sj15))+((x14505*x14506))+((x14505*x14507))+(((-1.0)*(1.0)*cj14*cj16*r00))+((cj14*r01*sj16))), ((x14508.value)*((((sj15*x14506))+((sj15*x14507))+(((-1.0)*(1.0)*cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14509=(cj15*r12);
IkReal x14510=IKsin(j10);
IkReal x14511=(sj11*x14510);
IkReal x14512=(cj16*r11*sj15);
IkReal x14513=(r10*sj15*sj16);
IkReal x14514=(cj15*r02);
IkReal x14515=IKcos(j10);
IkReal x14516=(sj11*x14515);
IkReal x14517=(cj16*r01*sj15);
IkReal x14518=(r00*sj15*sj16);
IkReal x14519=(cj14*cj16);
IkReal x14520=((1.0)*cj14*sj16);
IkReal x14521=((1.0)*sj14*sj15);
IkReal x14522=((1.0)*cj15*cj16*sj14);
IkReal x14523=((1.0)*cj15*sj14*sj16);
IkReal x14524=(cj14*sj15);
IkReal x14525=(cj16*sj14);
IkReal x14526=((1.0)*x14515);
IkReal x14527=((1.0)*sj14*sj16);
IkReal x14528=(cj14*cj15*cj16);
IkReal x14529=(cj14*cj15*sj16);
IkReal x14530=(cj11*x14510);
IkReal x14531=((0.01)*sj15);
IkReal x14532=((0.01)*cj15*cj16);
IkReal x14533=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x14512))+(((-1.0)*x14513))+x14509+x14511);
evalcond[1]=((((-1.0)*x14518))+(((-1.0)*x14517))+x14516+x14514);
evalcond[2]=((((-1.0)*r00*x14523))+((r00*x14519))+(((-1.0)*r02*x14521))+(((-1.0)*r01*x14522))+x14510+(((-1.0)*r01*x14520)));
evalcond[3]=((((-1.0)*cj11*x14526))+(((-1.0)*r01*x14527))+((r02*x14524))+((r01*x14528))+((r00*x14529))+((r00*x14525)));
evalcond[4]=(((r10*x14525))+((r10*x14529))+(((-1.0)*r11*x14527))+(((-1.0)*x14530))+((r11*x14528))+((r12*x14524)));
evalcond[5]=(((r10*x14519))+(((-1.0)*x14526))+(((-1.0)*r11*x14520))+(((-1.0)*r11*x14522))+(((-1.0)*r10*x14523))+(((-1.0)*r12*x14521)));
evalcond[6]=((((-0.37429)*x14517))+(((-1.0)*(1.0)*px))+(((0.069)*x14515))+(((0.36442)*cj11*x14515))+((r01*x14532))+((r02*x14531))+(((0.069)*x14516))+(((-0.37429)*x14518))+((r00*x14533))+(((0.37429)*x14514)));
evalcond[7]=(((r12*x14531))+(((-1.0)*(1.0)*py))+((r10*x14533))+(((-0.37429)*x14512))+((r11*x14532))+(((0.37429)*x14509))+(((-0.37429)*x14513))+(((0.069)*x14510))+(((0.069)*x14511))+(((0.36442)*x14530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14534=((1.0)*cj15);
IkReal x14535=(cj16*sj15);
IkReal x14536=(sj15*sj16);
CheckValue<IkReal> x14537 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14534))+((r11*x14535))+((r10*x14536)))),IkReal(((((-1.0)*r02*x14534))+((r01*x14535))+((r00*x14536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14537.valid){
continue;
}
CheckValue<IkReal> x14538=IKPowWithIntegerCheck(IKsign(sj11),-1);
if(!x14538.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14537.value)+(((1.5707963267949)*(x14538.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14539=(cj15*r12);
IkReal x14540=IKsin(j10);
IkReal x14541=(sj11*x14540);
IkReal x14542=(cj16*r11*sj15);
IkReal x14543=(r10*sj15*sj16);
IkReal x14544=(cj15*r02);
IkReal x14545=IKcos(j10);
IkReal x14546=(sj11*x14545);
IkReal x14547=(cj16*r01*sj15);
IkReal x14548=(r00*sj15*sj16);
IkReal x14549=(cj14*cj16);
IkReal x14550=((1.0)*cj14*sj16);
IkReal x14551=((1.0)*sj14*sj15);
IkReal x14552=((1.0)*cj15*cj16*sj14);
IkReal x14553=((1.0)*cj15*sj14*sj16);
IkReal x14554=(cj14*sj15);
IkReal x14555=(cj16*sj14);
IkReal x14556=((1.0)*x14545);
IkReal x14557=((1.0)*sj14*sj16);
IkReal x14558=(cj14*cj15*cj16);
IkReal x14559=(cj14*cj15*sj16);
IkReal x14560=(cj11*x14540);
IkReal x14561=((0.01)*sj15);
IkReal x14562=((0.01)*cj15*cj16);
IkReal x14563=((0.01)*cj15*sj16);
evalcond[0]=(x14541+(((-1.0)*x14542))+(((-1.0)*x14543))+x14539);
evalcond[1]=((((-1.0)*x14547))+x14544+x14546+(((-1.0)*x14548)));
evalcond[2]=((((-1.0)*r02*x14551))+x14540+(((-1.0)*r01*x14552))+(((-1.0)*r00*x14553))+(((-1.0)*r01*x14550))+((r00*x14549)));
evalcond[3]=(((r01*x14558))+(((-1.0)*cj11*x14556))+((r02*x14554))+((r00*x14559))+(((-1.0)*r01*x14557))+((r00*x14555)));
evalcond[4]=((((-1.0)*x14560))+((r10*x14559))+(((-1.0)*r11*x14557))+((r10*x14555))+((r11*x14558))+((r12*x14554)));
evalcond[5]=((((-1.0)*r11*x14552))+(((-1.0)*r10*x14553))+(((-1.0)*x14556))+(((-1.0)*r11*x14550))+((r10*x14549))+(((-1.0)*r12*x14551)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r01*x14562))+(((-0.37429)*x14547))+((r02*x14561))+(((-0.37429)*x14548))+(((0.069)*x14545))+(((0.069)*x14546))+((r00*x14563))+(((0.37429)*x14544))+(((0.36442)*cj11*x14545)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r10*x14563))+((r11*x14562))+(((0.37429)*x14539))+(((0.069)*x14540))+(((-0.37429)*x14542))+((r12*x14561))+(((-0.37429)*x14543))+(((0.069)*x14541))+(((0.36442)*x14560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14572=IKPowWithIntegerCheck(cj11,-1);
if(!x14572.valid){
continue;
}
IkReal x14564=x14572.value;
IkReal x14565=(cj14*r02*sj15);
IkReal x14566=(cj16*r00*sj14);
IkReal x14567=(cj11*sj15);
IkReal x14568=(((r01*sj14))*(((1.0)*sj16)));
IkReal x14569=(cj14*cj15);
IkReal x14570=(cj16*r01*x14569);
IkReal x14571=(r00*sj16*x14569);
CheckValue<IkReal> x14573=IKPowWithIntegerCheck(cj12,-1);
if(!x14573.valid){
continue;
}
CheckValue<IkReal> x14574=IKPowWithIntegerCheck(sj11,-1);
if(!x14574.valid){
continue;
}
if( IKabs((x14564*(x14573.value)*(x14574.value)*((((sj12*x14571))+(((-1.0)*sj12*x14568))+((sj12*x14570))+((sj12*x14566))+((cj11*cj15*r12))+((sj12*x14565))+(((-1.0)*r10*sj16*x14567))+(((-1.0)*cj16*r11*x14567)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14564*((x14566+x14565+x14570+x14571+(((-1.0)*x14568)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14564*(x14573.value)*(x14574.value)*((((sj12*x14571))+(((-1.0)*sj12*x14568))+((sj12*x14570))+((sj12*x14566))+((cj11*cj15*r12))+((sj12*x14565))+(((-1.0)*r10*sj16*x14567))+(((-1.0)*cj16*r11*x14567))))))+IKsqr((x14564*((x14566+x14565+x14570+x14571+(((-1.0)*x14568))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x14564*(x14573.value)*(x14574.value)*((((sj12*x14571))+(((-1.0)*sj12*x14568))+((sj12*x14570))+((sj12*x14566))+((cj11*cj15*r12))+((sj12*x14565))+(((-1.0)*r10*sj16*x14567))+(((-1.0)*cj16*r11*x14567))))), (x14564*((x14566+x14565+x14570+x14571+(((-1.0)*x14568))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14575=(cj15*r12);
IkReal x14576=IKcos(j10);
IkReal x14577=(sj12*x14576);
IkReal x14578=(cj16*r11*sj15);
IkReal x14579=(r10*sj15*sj16);
IkReal x14580=IKsin(j10);
IkReal x14581=((1.0)*x14580);
IkReal x14582=(cj12*x14581);
IkReal x14583=(cj15*r02);
IkReal x14584=(cj16*r01*sj15);
IkReal x14585=(r00*sj15*sj16);
IkReal x14586=(cj12*sj11*x14576);
IkReal x14587=(cj14*sj15);
IkReal x14588=(cj16*sj14);
IkReal x14589=(cj11*x14576);
IkReal x14590=((1.0)*sj14*sj16);
IkReal x14591=(cj14*cj15*cj16);
IkReal x14592=(cj14*cj15*sj16);
IkReal x14593=(cj11*x14580);
IkReal x14594=(cj14*cj16);
IkReal x14595=((1.0)*cj14*sj16);
IkReal x14596=((1.0)*sj14*sj15);
IkReal x14597=((1.0)*cj15*cj16*sj14);
IkReal x14598=((1.0)*cj15*sj14*sj16);
IkReal x14599=((0.01)*sj15);
IkReal x14600=((0.069)*x14580);
IkReal x14601=((0.01)*cj15*cj16);
IkReal x14602=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x14578))+x14575+x14577+(((-1.0)*x14579))+(((-1.0)*sj11*x14582)));
evalcond[1]=((((-1.0)*sj12*x14581))+(((-1.0)*x14586))+(((-1.0)*x14585))+x14583+(((-1.0)*x14584)));
evalcond[2]=((((-1.0)*x14589))+((r02*x14587))+(((-1.0)*r01*x14590))+((r00*x14592))+((r01*x14591))+((r00*x14588)));
evalcond[3]=(((r11*x14591))+((r10*x14592))+((r12*x14587))+(((-1.0)*x14593))+(((-1.0)*r11*x14590))+((r10*x14588)));
evalcond[4]=((((-1.0)*r10*x14598))+((sj11*sj12*x14580))+(((-1.0)*r12*x14596))+((r10*x14594))+(((-1.0)*r11*x14595))+(((-1.0)*r11*x14597))+((cj12*x14576)));
evalcond[5]=((((-1.0)*r01*x14597))+(((-1.0)*r01*x14595))+(((-1.0)*r02*x14596))+(((-1.0)*x14582))+(((-1.0)*r00*x14598))+((sj11*x14577))+((r00*x14594)));
evalcond[6]=((((0.37429)*x14583))+((r02*x14599))+(((-1.0)*(1.0)*px))+(((-0.37429)*x14585))+(((0.36442)*x14589))+((r01*x14601))+(((-0.069)*x14586))+(((0.069)*x14576))+(((-1.0)*sj12*x14600))+(((-0.37429)*x14584))+((r00*x14602)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r12*x14599))+(((0.069)*x14577))+(((0.37429)*x14575))+(((0.36442)*x14593))+(((-0.37429)*x14578))+((r10*x14602))+((r11*x14601))+x14600+(((-1.0)*cj12*sj11*x14600))+(((-0.37429)*x14579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x14614=IKPowWithIntegerCheck(cj11,-1);
if(!x14614.valid){
continue;
}
IkReal x14603=x14614.value;
IkReal x14604=(cj14*r12*sj15);
IkReal x14605=(cj16*r10*sj14);
IkReal x14606=((1.0)*r11*sj14*sj16);
IkReal x14607=(cj14*cj15);
IkReal x14608=(cj16*r11);
IkReal x14609=(x14607*x14608);
IkReal x14610=(r10*sj16);
IkReal x14611=(x14607*x14610);
IkReal x14612=(cj11*sj15);
IkReal x14613=(cj12*sj11);
CheckValue<IkReal> x14615=IKPowWithIntegerCheck(sj12,-1);
if(!x14615.valid){
continue;
}
if( IKabs((x14603*((x14611+x14604+x14605+x14609+(((-1.0)*x14606)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14603*(x14615.value)*(((((-1.0)*x14606*x14613))+((x14608*x14612))+((x14609*x14613))+((x14605*x14613))+((x14611*x14613))+((x14610*x14612))+(((-1.0)*(1.0)*cj11*cj15*r12))+((x14604*x14613)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14603*((x14611+x14604+x14605+x14609+(((-1.0)*x14606))))))+IKsqr((x14603*(x14615.value)*(((((-1.0)*x14606*x14613))+((x14608*x14612))+((x14609*x14613))+((x14605*x14613))+((x14611*x14613))+((x14610*x14612))+(((-1.0)*(1.0)*cj11*cj15*r12))+((x14604*x14613))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x14603*((x14611+x14604+x14605+x14609+(((-1.0)*x14606))))), (x14603*(x14615.value)*(((((-1.0)*x14606*x14613))+((x14608*x14612))+((x14609*x14613))+((x14605*x14613))+((x14611*x14613))+((x14610*x14612))+(((-1.0)*(1.0)*cj11*cj15*r12))+((x14604*x14613))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14616=(cj15*r12);
IkReal x14617=IKcos(j10);
IkReal x14618=(sj12*x14617);
IkReal x14619=(cj16*r11*sj15);
IkReal x14620=(r10*sj15*sj16);
IkReal x14621=IKsin(j10);
IkReal x14622=((1.0)*x14621);
IkReal x14623=(cj12*x14622);
IkReal x14624=(cj15*r02);
IkReal x14625=(cj16*r01*sj15);
IkReal x14626=(r00*sj15*sj16);
IkReal x14627=(cj12*sj11*x14617);
IkReal x14628=(cj14*sj15);
IkReal x14629=(cj16*sj14);
IkReal x14630=(cj11*x14617);
IkReal x14631=((1.0)*sj14*sj16);
IkReal x14632=(cj14*cj15*cj16);
IkReal x14633=(cj14*cj15*sj16);
IkReal x14634=(cj11*x14621);
IkReal x14635=(cj14*cj16);
IkReal x14636=((1.0)*cj14*sj16);
IkReal x14637=((1.0)*sj14*sj15);
IkReal x14638=((1.0)*cj15*cj16*sj14);
IkReal x14639=((1.0)*cj15*sj14*sj16);
IkReal x14640=((0.01)*sj15);
IkReal x14641=((0.069)*x14621);
IkReal x14642=((0.01)*cj15*cj16);
IkReal x14643=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x14619))+x14616+x14618+(((-1.0)*sj11*x14623))+(((-1.0)*x14620)));
evalcond[1]=((((-1.0)*sj12*x14622))+(((-1.0)*x14625))+(((-1.0)*x14626))+x14624+(((-1.0)*x14627)));
evalcond[2]=((((-1.0)*x14630))+((r02*x14628))+((r01*x14632))+(((-1.0)*r01*x14631))+((r00*x14633))+((r00*x14629)));
evalcond[3]=(((r10*x14629))+((r12*x14628))+((r10*x14633))+((r11*x14632))+(((-1.0)*x14634))+(((-1.0)*r11*x14631)));
evalcond[4]=(((cj12*x14617))+(((-1.0)*r11*x14636))+((sj11*sj12*x14621))+((r10*x14635))+(((-1.0)*r10*x14639))+(((-1.0)*r11*x14638))+(((-1.0)*r12*x14637)));
evalcond[5]=((((-1.0)*r00*x14639))+(((-1.0)*r01*x14638))+(((-1.0)*r01*x14636))+(((-1.0)*x14623))+((r00*x14635))+(((-1.0)*r02*x14637))+((sj11*x14618)));
evalcond[6]=((((-1.0)*sj12*x14641))+(((-1.0)*(1.0)*px))+(((0.37429)*x14624))+((r02*x14640))+(((0.36442)*x14630))+((r01*x14642))+(((0.069)*x14617))+(((-0.37429)*x14626))+(((-0.37429)*x14625))+((r00*x14643))+(((-0.069)*x14627)));
evalcond[7]=(((r10*x14643))+(((-1.0)*(1.0)*py))+(((-0.37429)*x14619))+(((0.36442)*x14634))+x14641+(((0.37429)*x14616))+(((-0.37429)*x14620))+(((0.069)*x14618))+((r11*x14642))+(((-1.0)*cj12*sj11*x14641))+((r12*x14640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14644=(cj15*sj12);
IkReal x14645=(cj12*cj15*sj11);
IkReal x14646=((1.0)*r01);
IkReal x14647=(cj16*sj12*sj15);
IkReal x14648=((1.0)*r00);
IkReal x14649=(sj12*sj15*sj16);
IkReal x14650=(cj12*cj16*sj11*sj15);
IkReal x14651=(cj12*sj11*sj15*sj16);
CheckValue<IkReal> x14652 = IKatan2WithCheck(IkReal((((r12*x14645))+(((-1.0)*x14646*x14647))+((r02*x14644))+(((-1.0)*x14648*x14649))+(((-1.0)*r10*x14651))+(((-1.0)*r11*x14650)))),IkReal(((((-1.0)*x14646*x14650))+((r11*x14647))+((r10*x14649))+((r02*x14645))+(((-1.0)*x14648*x14651))+(((-1.0)*r12*x14644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14652.valid){
continue;
}
CheckValue<IkReal> x14653=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(1.0)*(cj11*cj11)*(cj12*cj12))))),-1);
if(!x14653.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14652.value)+(((1.5707963267949)*(x14653.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x14654=(cj15*r12);
IkReal x14655=IKcos(j10);
IkReal x14656=(sj12*x14655);
IkReal x14657=(cj16*r11*sj15);
IkReal x14658=(r10*sj15*sj16);
IkReal x14659=IKsin(j10);
IkReal x14660=((1.0)*x14659);
IkReal x14661=(cj12*x14660);
IkReal x14662=(cj15*r02);
IkReal x14663=(cj16*r01*sj15);
IkReal x14664=(r00*sj15*sj16);
IkReal x14665=(cj12*sj11*x14655);
IkReal x14666=(cj14*sj15);
IkReal x14667=(cj16*sj14);
IkReal x14668=(cj11*x14655);
IkReal x14669=((1.0)*sj14*sj16);
IkReal x14670=(cj14*cj15*cj16);
IkReal x14671=(cj14*cj15*sj16);
IkReal x14672=(cj11*x14659);
IkReal x14673=(cj14*cj16);
IkReal x14674=((1.0)*cj14*sj16);
IkReal x14675=((1.0)*sj14*sj15);
IkReal x14676=((1.0)*cj15*cj16*sj14);
IkReal x14677=((1.0)*cj15*sj14*sj16);
IkReal x14678=((0.01)*sj15);
IkReal x14679=((0.069)*x14659);
IkReal x14680=((0.01)*cj15*cj16);
IkReal x14681=((0.01)*cj15*sj16);
evalcond[0]=(x14654+x14656+(((-1.0)*x14657))+(((-1.0)*sj11*x14661))+(((-1.0)*x14658)));
evalcond[1]=((((-1.0)*x14665))+(((-1.0)*x14664))+x14662+(((-1.0)*sj12*x14660))+(((-1.0)*x14663)));
evalcond[2]=(((r01*x14670))+((r02*x14666))+(((-1.0)*r01*x14669))+((r00*x14667))+(((-1.0)*x14668))+((r00*x14671)));
evalcond[3]=(((r11*x14670))+(((-1.0)*r11*x14669))+((r12*x14666))+(((-1.0)*x14672))+((r10*x14667))+((r10*x14671)));
evalcond[4]=((((-1.0)*r11*x14674))+(((-1.0)*r10*x14677))+(((-1.0)*r12*x14675))+((cj12*x14655))+((r10*x14673))+(((-1.0)*r11*x14676))+((sj11*sj12*x14659)));
evalcond[5]=((((-1.0)*x14661))+(((-1.0)*r02*x14675))+(((-1.0)*r01*x14676))+((sj11*x14656))+(((-1.0)*r00*x14677))+((r00*x14673))+(((-1.0)*r01*x14674)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.069)*x14665))+(((-1.0)*sj12*x14679))+(((0.36442)*x14668))+(((-0.37429)*x14663))+((r00*x14681))+((r01*x14680))+(((0.069)*x14655))+(((-0.37429)*x14664))+((r02*x14678))+(((0.37429)*x14662)));
evalcond[7]=(((r11*x14680))+((r10*x14681))+(((0.37429)*x14654))+(((-1.0)*(1.0)*py))+((r12*x14678))+(((0.36442)*x14672))+(((-0.37429)*x14658))+(((-0.37429)*x14657))+x14679+(((0.069)*x14656))+(((-1.0)*cj12*sj11*x14679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14682=(cj15*sj12);
IkReal x14683=(cj12*cj15*sj11);
IkReal x14684=((1.0)*r01);
IkReal x14685=(cj16*sj12*sj15);
IkReal x14686=((1.0)*r00);
IkReal x14687=(sj12*sj15*sj16);
IkReal x14688=(cj12*cj16*sj11*sj15);
IkReal x14689=(cj12*sj11*sj15*sj16);
CheckValue<IkReal> x14690 = IKatan2WithCheck(IkReal(((((-1.0)*x14686*x14687))+(((-1.0)*r11*x14688))+(((-1.0)*x14684*x14685))+((r12*x14683))+(((-1.0)*r10*x14689))+((r02*x14682)))),IkReal(((((-1.0)*x14686*x14689))+(((-1.0)*x14684*x14688))+(((-1.0)*r12*x14682))+((r10*x14687))+((r11*x14685))+((r02*x14683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14690.valid){
continue;
}
CheckValue<IkReal> x14691=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(1.0)*(cj11*cj11)*(cj12*cj12))))),-1);
if(!x14691.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14690.value)+(((1.5707963267949)*(x14691.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x14692=(cj15*r12);
IkReal x14693=IKcos(j10);
IkReal x14694=(sj12*x14693);
IkReal x14695=(cj16*r11*sj15);
IkReal x14696=(r10*sj15*sj16);
IkReal x14697=(cj12*sj11);
IkReal x14698=IKsin(j10);
IkReal x14699=((1.0)*x14698);
IkReal x14700=(cj15*r02);
IkReal x14701=(cj16*r01*sj15);
IkReal x14702=(r00*sj15*sj16);
IkReal x14703=((0.01)*sj15);
IkReal x14704=((0.069)*x14693);
IkReal x14705=((0.36442)*cj11);
IkReal x14706=((0.069)*x14698);
IkReal x14707=((0.01)*cj15*cj16);
IkReal x14708=((0.01)*cj15*sj16);
evalcond[0]=(x14692+x14694+(((-1.0)*x14697*x14699))+(((-1.0)*x14695))+(((-1.0)*x14696)));
evalcond[1]=(x14700+(((-1.0)*x14701))+(((-1.0)*sj12*x14699))+(((-1.0)*x14702))+(((-1.0)*x14693*x14697)));
evalcond[2]=(x14704+(((-1.0)*(1.0)*px))+(((-1.0)*x14697*x14704))+(((-1.0)*sj12*x14706))+(((0.37429)*x14700))+(((-0.37429)*x14702))+((r02*x14703))+((r01*x14707))+((x14693*x14705))+(((-0.37429)*x14701))+((r00*x14708)));
evalcond[3]=(x14706+(((-1.0)*(1.0)*py))+((x14698*x14705))+((r11*x14707))+(((0.37429)*x14692))+(((-0.37429)*x14695))+((r10*x14708))+(((0.069)*x14694))+((r12*x14703))+(((-1.0)*x14697*x14706))+(((-0.37429)*x14696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14709=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x14709;
j14eval[1]=IKsign(x14709);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14710=((1.0)*sj15);
IkReal x14711=((((-1.0)*cj16*r01*x14710))+(((-1.0)*r00*sj16*x14710))+((cj15*r02)));
j14eval[0]=x14711;
j14eval[1]=IKsign(x14711);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14712=((((-1.0)*(1.0)*cj15*r22))+((r20*sj15*sj16))+((cj16*r21*sj15)));
j14eval[0]=x14712;
j14eval[1]=IKsign(x14712);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14713=((1.0)*cj10*cj11);
IkReal x14714=(cj11*r01*sj10);
IkReal x14715=(cj11*r00*sj10);
IkReal x14716=(cj10*cj11*cj16);
CheckValue<IkReal> x14717 = IKatan2WithCheck(IkReal((((((r02*sj15))*((cj11*sj10))))+((cj15*cj16*x14714))+((cj15*sj16*x14715))+(((-1.0)*r12*sj15*x14713))+(((-1.0)*cj10*cj11*cj15*r10*sj16))+(((-1.0)*cj15*r11*x14716)))),IkReal(((((-1.0)*cj16*x14715))+((sj16*x14714))+(((-1.0)*r11*sj16*x14713))+((r10*x14716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14717.valid){
continue;
}
CheckValue<IkReal> x14718=IKPowWithIntegerCheck(IKsign((((r20*sj15*sj16))+(((-1.0)*cj15*r22))+((cj16*r21*sj15)))),-1);
if(!x14718.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14717.value)+(((1.5707963267949)*(x14718.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14719=IKsin(j14);
IkReal x14720=(cj16*r20);
IkReal x14721=IKcos(j14);
IkReal x14722=(sj15*x14721);
IkReal x14723=(r21*sj16);
IkReal x14724=((1.0)*x14719);
IkReal x14725=(cj15*cj16*x14721);
IkReal x14726=(cj15*sj16*x14721);
IkReal x14727=((1.0)*cj11);
IkReal x14728=(cj16*r00);
IkReal x14729=((1.0)*r01*sj16);
IkReal x14730=(cj16*r10);
IkReal x14731=(r11*sj16);
IkReal x14732=((1.0)*x14721);
IkReal x14733=((1.0)*sj15*x14719);
IkReal x14734=((1.0)*cj15*cj16*x14719);
IkReal x14735=((1.0)*cj15*sj16*x14719);
IkReal x14736=(sj11*sj12);
evalcond[0]=(((r22*x14722))+((r21*x14725))+((x14719*x14720))+(((-1.0)*x14723*x14724))+sj11+((r20*x14726)));
evalcond[1]=((((-1.0)*x14719*x14729))+((r01*x14725))+((x14719*x14728))+((r00*x14726))+((r02*x14722))+(((-1.0)*cj10*x14727)));
evalcond[2]=((((-1.0)*sj10*x14727))+((x14719*x14730))+((r10*x14726))+((r12*x14722))+(((-1.0)*x14724*x14731))+((r11*x14725)));
evalcond[3]=((((-1.0)*r20*x14735))+(((-1.0)*x14723*x14732))+(((-1.0)*r22*x14733))+((x14720*x14721))+(((-1.0)*r21*x14734))+((cj11*sj12)));
evalcond[4]=(((sj10*x14736))+(((-1.0)*r11*x14734))+(((-1.0)*x14731*x14732))+((x14721*x14730))+(((-1.0)*r12*x14733))+(((-1.0)*r10*x14735))+((cj10*cj12)));
evalcond[5]=((((-1.0)*x14721*x14729))+(((-1.0)*r00*x14735))+(((-1.0)*r02*x14733))+((cj10*x14736))+(((-1.0)*r01*x14734))+(((-1.0)*(1.0)*cj12*sj10))+((x14721*x14728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14737=((1.0)*cj16);
IkReal x14738=(cj15*cj16);
IkReal x14739=(r11*sj11);
IkReal x14740=(cj15*sj16);
IkReal x14741=(r10*sj11);
IkReal x14742=(cj11*r21*sj10);
IkReal x14743=(cj11*r20*sj10);
CheckValue<IkReal> x14744=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj15*sj16))+((cj15*r02))+(((-1.0)*r01*sj15*x14737)))),-1);
if(!x14744.valid){
continue;
}
CheckValue<IkReal> x14745 = IKatan2WithCheck(IkReal((((x14738*x14742))+((x14740*x14743))+((((r22*sj15))*((cj11*sj10))))+((x14740*x14741))+((r12*sj11*sj15))+((x14738*x14739)))),IkReal((((sj16*x14742))+((sj16*x14739))+(((-1.0)*x14737*x14741))+(((-1.0)*x14737*x14743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14745.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14744.value)))+(x14745.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14746=IKsin(j14);
IkReal x14747=(cj16*r20);
IkReal x14748=IKcos(j14);
IkReal x14749=(sj15*x14748);
IkReal x14750=(r21*sj16);
IkReal x14751=((1.0)*x14746);
IkReal x14752=(cj15*cj16*x14748);
IkReal x14753=(cj15*sj16*x14748);
IkReal x14754=((1.0)*cj11);
IkReal x14755=(cj16*r00);
IkReal x14756=((1.0)*r01*sj16);
IkReal x14757=(cj16*r10);
IkReal x14758=(r11*sj16);
IkReal x14759=((1.0)*x14748);
IkReal x14760=((1.0)*sj15*x14746);
IkReal x14761=((1.0)*cj15*cj16*x14746);
IkReal x14762=((1.0)*cj15*sj16*x14746);
IkReal x14763=(sj11*sj12);
evalcond[0]=(((x14746*x14747))+(((-1.0)*x14750*x14751))+((r22*x14749))+((r21*x14752))+sj11+((r20*x14753)));
evalcond[1]=((((-1.0)*cj10*x14754))+((r01*x14752))+((r00*x14753))+((x14746*x14755))+((r02*x14749))+(((-1.0)*x14746*x14756)));
evalcond[2]=(((r11*x14752))+(((-1.0)*sj10*x14754))+((r12*x14749))+((r10*x14753))+(((-1.0)*x14751*x14758))+((x14746*x14757)));
evalcond[3]=((((-1.0)*r22*x14760))+(((-1.0)*r20*x14762))+((x14747*x14748))+((cj11*sj12))+(((-1.0)*x14750*x14759))+(((-1.0)*r21*x14761)));
evalcond[4]=(((x14748*x14757))+(((-1.0)*r11*x14761))+(((-1.0)*r10*x14762))+((sj10*x14763))+((cj10*cj12))+(((-1.0)*r12*x14760))+(((-1.0)*x14758*x14759)));
evalcond[5]=((((-1.0)*x14748*x14756))+((x14748*x14755))+((cj10*x14763))+(((-1.0)*r00*x14762))+(((-1.0)*r01*x14761))+(((-1.0)*(1.0)*cj12*sj10))+(((-1.0)*r02*x14760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14764=(cj15*cj16);
IkReal x14765=(r01*sj11);
IkReal x14766=(cj15*sj16);
IkReal x14767=(r00*sj11);
IkReal x14768=(cj10*cj11*r21);
IkReal x14769=(cj10*cj11*r20);
IkReal x14770=((1.0)*cj16);
CheckValue<IkReal> x14771 = IKatan2WithCheck(IkReal((((r02*sj11*sj15))+((x14766*x14767))+((x14764*x14765))+((x14766*x14769))+((x14764*x14768))+((((r22*sj15))*((cj10*cj11)))))),IkReal(((((-1.0)*x14769*x14770))+((sj16*x14765))+(((-1.0)*x14767*x14770))+((sj16*x14768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14771.valid){
continue;
}
CheckValue<IkReal> x14772=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x14772.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14771.value)+(((1.5707963267949)*(x14772.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14773=IKsin(j14);
IkReal x14774=(cj16*r20);
IkReal x14775=IKcos(j14);
IkReal x14776=(sj15*x14775);
IkReal x14777=(r21*sj16);
IkReal x14778=((1.0)*x14773);
IkReal x14779=(cj15*cj16*x14775);
IkReal x14780=(cj15*sj16*x14775);
IkReal x14781=((1.0)*cj11);
IkReal x14782=(cj16*r00);
IkReal x14783=((1.0)*r01*sj16);
IkReal x14784=(cj16*r10);
IkReal x14785=(r11*sj16);
IkReal x14786=((1.0)*x14775);
IkReal x14787=((1.0)*sj15*x14773);
IkReal x14788=((1.0)*cj15*cj16*x14773);
IkReal x14789=((1.0)*cj15*sj16*x14773);
IkReal x14790=(sj11*sj12);
evalcond[0]=(((r20*x14780))+((x14773*x14774))+sj11+(((-1.0)*x14777*x14778))+((r22*x14776))+((r21*x14779)));
evalcond[1]=(((r00*x14780))+(((-1.0)*x14773*x14783))+((r01*x14779))+((x14773*x14782))+(((-1.0)*cj10*x14781))+((r02*x14776)));
evalcond[2]=(((r12*x14776))+(((-1.0)*sj10*x14781))+((r10*x14780))+(((-1.0)*x14778*x14785))+((x14773*x14784))+((r11*x14779)));
evalcond[3]=((((-1.0)*r20*x14789))+((cj11*sj12))+(((-1.0)*x14777*x14786))+(((-1.0)*r21*x14788))+((x14774*x14775))+(((-1.0)*r22*x14787)));
evalcond[4]=(((x14775*x14784))+(((-1.0)*x14785*x14786))+(((-1.0)*r12*x14787))+((sj10*x14790))+(((-1.0)*r11*x14788))+((cj10*cj12))+(((-1.0)*r10*x14789)));
evalcond[5]=((((-1.0)*r00*x14789))+((cj10*x14790))+(((-1.0)*x14775*x14783))+((x14775*x14782))+(((-1.0)*r01*x14788))+(((-1.0)*(1.0)*cj12*sj10))+(((-1.0)*r02*x14787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x14791=((1.0)*cj16*sj15);
IkReal x14792=((1.0)*sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs(((((-1.0)*r00*x14792))+(((-1.0)*r01*x14791))+((cj15*r02)))))+(IKabs(((((-1.0)*r11*x14791))+(((-1.0)*r10*x14792))+((cj15*r12))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x14793=r21*r21;
IkReal x14794=((1.0)*x14793);
IkReal x14795=r22*r22;
IkReal x14796=(((cj16*r20*sj16))*(((2.0)*r21)));
IkReal x14797=cj15*cj15;
IkReal x14798=cj16*cj16;
IkReal x14799=(cj15*r22*sj15);
IkReal x14800=r20*r20;
IkReal x14801=((1.0)*x14800);
IkReal x14802=(x14797*x14798);
IkReal x14803=(((x14800*x14802))+x14796+(((-1.0)*x14798*x14801))+(((-1.0)*x14794*x14802))+(((-1.0)*x14796*x14797))+(((-2.0)*r20*sj16*x14799))+(((-1.0)*x14797*x14801))+(((-1.0)*x14795))+(((-1.0)*x14794))+(((-2.0)*cj16*r21*x14799))+((x14795*x14797))+((x14793*x14798)));
IkReal x14804=(cj11*cj12);
IkReal x14805=(r22*sj15);
IkReal x14806=(cj11*sj12);
IkReal x14807=(cj16*r20);
IkReal x14808=((1.0)*r21*sj16);
IkReal x14809=(cj16*r21);
IkReal x14810=(cj11*cj12*cj15);
IkReal x14811=(r20*sj16);
IkReal x14812=((1.0)*cj11*cj15*sj12);
j14eval[0]=x14803;
j14eval[1]=((IKabs((((x14809*x14810))+(((-1.0)*x14806*x14808))+((x14804*x14805))+((x14806*x14807))+((x14810*x14811)))))+(IKabs(((((-1.0)*x14811*x14812))+(((-1.0)*x14804*x14808))+(((-1.0)*x14809*x14812))+((x14804*x14807))+(((-1.0)*cj11*sj12*x14805))))));
j14eval[2]=IKsign(x14803);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=(cj11+(((5.28144927536232)*(cj11*cj11)))+(((-1.0)*(1.0)*cj11*cj12*sj11)));
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j10eval[0]=((1.0)+(((-1.0)*(1.0)*cj12)));
j10eval[1]=IKsign(((9522.0)+(((-1.0)*(9522.0)*cj12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x14813=((1.0)*r21);
j14eval[0]=((IKabs(((((-1.0)*sj16*x14813))+((cj16*r20)))))+(IKabs(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*cj15*cj16*x14813))+(((-1.0)*(1.0)*r22*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x14814=((1.0)*cj16);
j14eval[0]=((IKabs((((r21*sj16))+(((-1.0)*r20*x14814)))))+(IKabs(((((-1.0)*cj15*r21*x14814))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*(1.0)*r22*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
IkReal x14815=((1.0)*cj16);
CheckValue<IkReal> x14817 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r21*x14815))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*(1.0)*r22*sj15)))),IkReal((((r21*sj16))+(((-1.0)*r20*x14815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14817.valid){
continue;
}
IkReal x14816=((-1.0)*(x14817.value));
j14array[0]=x14816;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+x14816);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
IkReal x14818=IKcos(j14);
IkReal x14819=((1.0)*r21);
IkReal x14820=IKsin(j14);
IkReal x14821=((1.0)*x14820);
evalcond[0]=((((-1.0)*cj15*r20*sj16*x14821))+(((-1.0)*r22*sj15*x14821))+(((-1.0)*cj15*cj16*x14819*x14820))+((cj16*r20*x14818))+(((-1.0)*sj16*x14818*x14819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14822=(cj12*cj14*cj16);
IkReal x14823=(cj14*sj12);
IkReal x14824=(r11*sj16);
IkReal x14825=(r12*sj14*sj15);
IkReal x14826=(r01*sj16);
IkReal x14827=(r02*sj14*sj15);
IkReal x14828=((1.0)*r10);
IkReal x14829=(cj14*cj16*sj12);
IkReal x14830=(cj16*r11);
IkReal x14831=(cj15*sj12*sj14);
IkReal x14832=(r10*sj16);
IkReal x14833=(cj16*r01);
IkReal x14834=((1.0)*cj12*cj15*sj14);
IkReal x14835=(r00*sj16);
IkReal x14836=(cj12*cj15*sj14);
if( IKabs(((((-1.0)*x14834*x14835))+((sj12*x14825))+((x14830*x14831))+(((-1.0)*cj12*x14827))+((x14831*x14832))+(((-1.0)*cj12*cj14*x14826))+(((-1.0)*x14833*x14834))+((x14823*x14824))+((r00*x14822))+(((-1.0)*x14828*x14829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x14830*x14836))+((sj12*x14827))+((x14832*x14836))+((x14831*x14835))+((x14831*x14833))+((cj12*x14825))+((x14823*x14826))+(((-1.0)*r00*x14829))+((cj12*cj14*x14824))+(((-1.0)*x14822*x14828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14834*x14835))+((sj12*x14825))+((x14830*x14831))+(((-1.0)*cj12*x14827))+((x14831*x14832))+(((-1.0)*cj12*cj14*x14826))+(((-1.0)*x14833*x14834))+((x14823*x14824))+((r00*x14822))+(((-1.0)*x14828*x14829))))+IKsqr((((x14830*x14836))+((sj12*x14827))+((x14832*x14836))+((x14831*x14835))+((x14831*x14833))+((cj12*x14825))+((x14823*x14826))+(((-1.0)*r00*x14829))+((cj12*cj14*x14824))+(((-1.0)*x14822*x14828))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x14834*x14835))+((sj12*x14825))+((x14830*x14831))+(((-1.0)*cj12*x14827))+((x14831*x14832))+(((-1.0)*cj12*cj14*x14826))+(((-1.0)*x14833*x14834))+((x14823*x14824))+((r00*x14822))+(((-1.0)*x14828*x14829))), (((x14830*x14836))+((sj12*x14827))+((x14832*x14836))+((x14831*x14835))+((x14831*x14833))+((cj12*x14825))+((x14823*x14826))+(((-1.0)*r00*x14829))+((cj12*cj14*x14824))+(((-1.0)*x14822*x14828))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14837=IKcos(j10);
IkReal x14838=(cj12*x14837);
IkReal x14839=IKsin(j10);
IkReal x14840=(sj12*x14839);
IkReal x14841=(cj14*cj16);
IkReal x14842=((1.0)*cj14*sj16);
IkReal x14843=((1.0)*sj14*sj15);
IkReal x14844=((1.0)*cj15*cj16*sj14);
IkReal x14845=((1.0)*cj15*sj14*sj16);
IkReal x14846=(sj12*x14837);
IkReal x14847=((((-1.0)*cj12*x14839))+x14846);
IkReal x14848=(sj14*sj16);
IkReal x14849=((1.0)*cj14*sj15);
IkReal x14850=((1.0)*cj16*sj14);
IkReal x14851=((1.0)*cj14*cj15*cj16);
IkReal x14852=((1.0)*cj14*cj15*sj16);
IkReal x14853=((0.37429)*cj15);
IkReal x14854=((0.01)*sj15);
IkReal x14855=((0.01)*cj15*cj16);
IkReal x14856=((0.01)*cj15*sj16);
IkReal x14857=((0.37429)*cj16*sj15);
IkReal x14858=((0.37429)*sj15*sj16);
IkReal x14859=((0.069)*x14839);
evalcond[0]=((((-1.0)*r10*x14845))+(((-1.0)*r11*x14844))+x14840+(((-1.0)*r11*x14842))+((r10*x14841))+(((-1.0)*r12*x14843))+x14838);
evalcond[1]=((((-1.0)*r02*x14843))+(((-1.0)*r01*x14844))+x14847+((r00*x14841))+(((-1.0)*r00*x14845))+(((-1.0)*r01*x14842)));
evalcond[2]=((((-1.0)*r11*x14851))+x14847+((r11*x14848))+(((-1.0)*r12*x14849))+(((-1.0)*r10*x14850))+(((-1.0)*r10*x14852)));
evalcond[3]=((((-1.0)*x14840))+(((-1.0)*r02*x14849))+(((-1.0)*r00*x14852))+((r01*x14848))+(((-1.0)*r01*x14851))+(((-1.0)*x14838))+(((-1.0)*r00*x14850)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x14858))+((r02*x14854))+((r01*x14855))+(((-0.069)*x14840))+((r00*x14856))+((r02*x14853))+(((0.069)*x14837))+(((-0.069)*x14838))+(((-1.0)*r01*x14857)));
evalcond[5]=(((r12*x14853))+(((-1.0)*(1.0)*py))+(((-1.0)*cj12*x14859))+x14859+((r12*x14854))+(((-1.0)*r10*x14858))+(((-1.0)*r11*x14857))+((r11*x14855))+((r10*x14856))+(((0.069)*x14846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
IkReal x14860=((1.0)*r21);
CheckValue<IkReal> x14862 = IKatan2WithCheck(IkReal(((((-1.0)*sj16*x14860))+((cj16*r20)))),IkReal(((((-1.0)*cj15*cj16*x14860))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14862.valid){
continue;
}
IkReal x14861=((-1.0)*(x14862.value));
j14array[0]=x14861;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+x14861);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
IkReal x14863=IKsin(j14);
IkReal x14864=((1.0)*cj16);
IkReal x14865=IKcos(j14);
IkReal x14866=((1.0)*x14865);
evalcond[0]=(((r21*sj16*x14863))+(((-1.0)*r22*sj15*x14866))+(((-1.0)*cj15*r20*sj16*x14866))+(((-1.0)*cj15*r21*x14864*x14865))+(((-1.0)*r20*x14863*x14864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14867=(cj12*cj14*cj16);
IkReal x14868=(cj14*sj12);
IkReal x14869=(r11*sj16);
IkReal x14870=(r12*sj14*sj15);
IkReal x14871=(r01*sj16);
IkReal x14872=(r02*sj14*sj15);
IkReal x14873=((1.0)*r10);
IkReal x14874=(cj14*cj16*sj12);
IkReal x14875=(cj16*r11);
IkReal x14876=(cj15*sj12*sj14);
IkReal x14877=(r10*sj16);
IkReal x14878=(cj16*r01);
IkReal x14879=((1.0)*cj12*cj15*sj14);
IkReal x14880=(r00*sj16);
IkReal x14881=(cj12*cj15*sj14);
if( IKabs((((x14875*x14876))+(((-1.0)*cj12*cj14*x14871))+((x14876*x14877))+(((-1.0)*x14878*x14879))+((r00*x14867))+(((-1.0)*x14879*x14880))+((x14868*x14869))+(((-1.0)*cj12*x14872))+(((-1.0)*x14873*x14874))+((sj12*x14870)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x14877*x14881))+((x14876*x14878))+((x14876*x14880))+(((-1.0)*x14867*x14873))+((sj12*x14872))+((cj12*x14870))+((cj12*cj14*x14869))+((x14868*x14871))+((x14875*x14881))+(((-1.0)*r00*x14874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x14875*x14876))+(((-1.0)*cj12*cj14*x14871))+((x14876*x14877))+(((-1.0)*x14878*x14879))+((r00*x14867))+(((-1.0)*x14879*x14880))+((x14868*x14869))+(((-1.0)*cj12*x14872))+(((-1.0)*x14873*x14874))+((sj12*x14870))))+IKsqr((((x14877*x14881))+((x14876*x14878))+((x14876*x14880))+(((-1.0)*x14867*x14873))+((sj12*x14872))+((cj12*x14870))+((cj12*cj14*x14869))+((x14868*x14871))+((x14875*x14881))+(((-1.0)*r00*x14874))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x14875*x14876))+(((-1.0)*cj12*cj14*x14871))+((x14876*x14877))+(((-1.0)*x14878*x14879))+((r00*x14867))+(((-1.0)*x14879*x14880))+((x14868*x14869))+(((-1.0)*cj12*x14872))+(((-1.0)*x14873*x14874))+((sj12*x14870))), (((x14877*x14881))+((x14876*x14878))+((x14876*x14880))+(((-1.0)*x14867*x14873))+((sj12*x14872))+((cj12*x14870))+((cj12*cj14*x14869))+((x14868*x14871))+((x14875*x14881))+(((-1.0)*r00*x14874))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x14882=IKcos(j10);
IkReal x14883=(cj12*x14882);
IkReal x14884=IKsin(j10);
IkReal x14885=(sj12*x14884);
IkReal x14886=(cj14*cj16);
IkReal x14887=((1.0)*cj14*sj16);
IkReal x14888=((1.0)*sj14*sj15);
IkReal x14889=((1.0)*cj15*cj16*sj14);
IkReal x14890=((1.0)*cj15*sj14*sj16);
IkReal x14891=(sj12*x14882);
IkReal x14892=(x14891+(((-1.0)*cj12*x14884)));
IkReal x14893=(sj14*sj16);
IkReal x14894=((1.0)*cj14*sj15);
IkReal x14895=((1.0)*cj16*sj14);
IkReal x14896=((1.0)*cj14*cj15*cj16);
IkReal x14897=((1.0)*cj14*cj15*sj16);
IkReal x14898=((0.37429)*cj15);
IkReal x14899=((0.01)*sj15);
IkReal x14900=((0.01)*cj15*cj16);
IkReal x14901=((0.01)*cj15*sj16);
IkReal x14902=((0.37429)*cj16*sj15);
IkReal x14903=((0.37429)*sj15*sj16);
IkReal x14904=((0.069)*x14884);
evalcond[0]=((((-1.0)*r10*x14890))+((r10*x14886))+(((-1.0)*r12*x14888))+x14885+x14883+(((-1.0)*r11*x14889))+(((-1.0)*r11*x14887)));
evalcond[1]=((((-1.0)*r00*x14890))+(((-1.0)*r02*x14888))+((r00*x14886))+(((-1.0)*r01*x14887))+x14892+(((-1.0)*r01*x14889)));
evalcond[2]=((((-1.0)*r12*x14894))+(((-1.0)*r11*x14896))+((r11*x14893))+x14892+(((-1.0)*r10*x14895))+(((-1.0)*r10*x14897)));
evalcond[3]=((((-1.0)*x14883))+((r01*x14893))+(((-1.0)*r00*x14895))+(((-1.0)*x14885))+(((-1.0)*r00*x14897))+(((-1.0)*r01*x14896))+(((-1.0)*r02*x14894)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r01*x14900))+((r00*x14901))+(((-1.0)*r00*x14903))+(((-0.069)*x14885))+(((-0.069)*x14883))+(((0.069)*x14882))+(((-1.0)*r01*x14902))+((r02*x14899))+((r02*x14898)));
evalcond[5]=((((0.069)*x14891))+(((-1.0)*(1.0)*py))+((r10*x14901))+(((-1.0)*r11*x14902))+(((-1.0)*cj12*x14904))+(((-1.0)*r10*x14903))+((r12*x14899))+((r12*x14898))+((r11*x14900))+x14904);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x14905=((69000.0)*py);
IkReal x14906=((25826.01)*cj15);
IkReal x14907=(r12*x14906);
IkReal x14908=((69000.0)*px);
IkReal x14909=((690.0)*sj15);
IkReal x14910=(r12*x14909);
IkReal x14911=((690.0)*cj15*cj16);
IkReal x14912=(r11*x14911);
IkReal x14913=(r02*x14906);
IkReal x14914=((690.0)*cj15*sj16);
IkReal x14915=(r10*x14914);
IkReal x14916=((25826.01)*cj16*sj15);
IkReal x14917=(r11*x14916);
IkReal x14918=(r02*x14909);
IkReal x14919=((25826.01)*sj15*sj16);
IkReal x14920=(r10*x14919);
IkReal x14921=(r01*x14911);
IkReal x14922=(r00*x14914);
IkReal x14923=(r01*x14916);
IkReal x14924=(r00*x14919);
CheckValue<IkReal> x14925 = IKatan2WithCheck(IkReal((((cj12*x14912))+(((-1.0)*x14910))+(((-1.0)*sj12*x14908))+(((-1.0)*cj12*x14905))+(((-1.0)*x14915))+((sj12*x14922))+((sj12*x14913))+((cj12*x14915))+(((-1.0)*x14907))+(((-1.0)*sj12*x14924))+((cj12*x14910))+((sj12*x14918))+(((-1.0)*x14912))+x14920+x14905+(((-1.0)*cj12*x14917))+((sj12*x14921))+(((-1.0)*cj12*x14920))+((cj12*x14907))+(((-1.0)*sj12*x14923))+x14917)),IkReal((((sj12*x14905))+(((-1.0)*cj12*x14923))+((cj12*x14921))+(((-1.0)*x14922))+(((-1.0)*cj12*x14908))+(((-1.0)*cj12*x14924))+(((-1.0)*sj12*x14912))+(((-1.0)*sj12*x14907))+((cj12*x14922))+((cj12*x14918))+((sj12*x14917))+(((-1.0)*sj12*x14910))+(((-1.0)*x14921))+(((-1.0)*x14918))+(((-1.0)*sj12*x14915))+(((-1.0)*x14913))+((sj12*x14920))+((cj12*x14913))+x14924+x14923+x14908)),IKFAST_ATAN2_MAGTHRESH);
if(!x14925.valid){
continue;
}
CheckValue<IkReal> x14926=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-1.0)*(9522.0)*cj12)))),-1);
if(!x14926.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x14925.value)+(((1.5707963267949)*(x14926.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x14927=((0.37429)*cj15);
IkReal x14928=((0.01)*sj15);
IkReal x14929=((0.069)*(IKcos(j10)));
IkReal x14930=((0.069)*(IKsin(j10)));
IkReal x14931=((0.01)*cj15*cj16);
IkReal x14932=((0.01)*cj15*sj16);
IkReal x14933=((0.37429)*cj16*sj15);
IkReal x14934=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x14933))+(((-1.0)*r00*x14934))+((r02*x14927))+(((-1.0)*cj12*x14929))+((r02*x14928))+((r01*x14931))+(((-1.0)*sj12*x14930))+((r00*x14932))+x14929);
evalcond[1]=(((sj12*x14929))+(((-1.0)*r11*x14933))+(((-1.0)*(1.0)*py))+(((-1.0)*cj12*x14930))+((r10*x14932))+((r11*x14931))+((r12*x14927))+((r12*x14928))+x14930+(((-1.0)*r10*x14934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x14935=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x14935;
j14eval[1]=IKsign(x14935);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x14936=((1.0)*sj15);
IkReal x14937=(((cj15*r02))+(((-1.0)*r00*sj16*x14936))+(((-1.0)*cj16*r01*x14936)));
j14eval[0]=x14937;
j14eval[1]=IKsign(x14937);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x14938=(r12*r22);
IkReal x14939=cj15*cj15;
IkReal x14940=(r10*r20);
IkReal x14941=(x14939*x14940);
IkReal x14942=cj16*cj16;
IkReal x14943=(r10*r21);
IkReal x14944=((1.0)*cj16*sj16);
IkReal x14945=(r11*r20);
IkReal x14946=(cj15*cj16*sj15);
IkReal x14947=(cj15*sj15*sj16);
IkReal x14948=(r11*r21*x14942);
IkReal x14949=(cj16*sj16*x14939);
IkReal x14950=(((r10*r22*x14947))+((x14939*x14948))+x14941+((x14940*x14942))+((r12*r20*x14947))+(((-1.0)*x14944*x14945))+((x14943*x14949))+(((-1.0)*x14941*x14942))+(((-1.0)*x14938*x14939))+((x14945*x14949))+((r12*r21*x14946))+(((-1.0)*x14948))+x14938+((r11*r22*x14946))+((r11*r21))+(((-1.0)*x14943*x14944)));
j14eval[0]=x14950;
j14eval[1]=IKsign(x14950);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14951=(cj10*cj12);
IkReal x14952=(r22*sj15);
IkReal x14953=(sj10*sj12);
IkReal x14954=(cj10*cj12*cj15);
IkReal x14955=(cj15*cj16*r21);
IkReal x14956=(cj15*r20*sj16);
IkReal x14957=(r21*sj16);
IkReal x14958=((1.0)*cj16*r20);
IkReal x14959=(r12*r22);
IkReal x14960=cj15*cj15;
IkReal x14961=(r10*r20);
IkReal x14962=(x14960*x14961);
IkReal x14963=cj16*cj16;
IkReal x14964=(r10*r21*sj16);
IkReal x14965=(cj15*r22*sj15);
IkReal x14966=(r12*sj15);
IkReal x14967=(r11*r21*x14963);
IkReal x14968=(cj16*x14960);
CheckValue<IkReal> x14969=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14967))+x14962+x14959+((r10*sj16*x14965))+((x14956*x14966))+((x14960*x14967))+(((-1.0)*x14962*x14963))+(((-1.0)*cj16*x14964))+(((-1.0)*r11*sj16*x14958))+((x14955*x14966))+((x14961*x14963))+((r11*r21))+((cj16*r11*x14965))+((x14964*x14968))+((r11*r20*sj16*x14968))+(((-1.0)*x14959*x14960)))),-1);
if(!x14969.valid){
continue;
}
CheckValue<IkReal> x14970 = IKatan2WithCheck(IkReal((((cj16*r21*x14954))+((r20*sj16*x14954))+((x14951*x14952))+((x14953*x14956))+((x14952*x14953))+((x14953*x14955)))),IkReal((((x14951*x14957))+((x14953*x14957))+(((-1.0)*x14953*x14958))+(((-1.0)*x14951*x14958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14970.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14969.value)))+(x14970.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14971=IKcos(j14);
IkReal x14972=(cj16*x14971);
IkReal x14973=((1.0)*sj16*x14971);
IkReal x14974=(r22*sj15);
IkReal x14975=IKsin(j14);
IkReal x14976=((1.0)*x14975);
IkReal x14977=(cj15*r21);
IkReal x14978=((1.0)*cj16*x14975);
IkReal x14979=(cj15*r20);
IkReal x14980=((1.0)*sj16*x14975);
IkReal x14981=(sj16*x14975);
IkReal x14982=((1.0)*x14971);
IkReal x14983=((1.0)*cj16*x14971);
IkReal x14984=(cj10*cj12);
IkReal x14985=(sj10*sj12);
IkReal x14986=(r12*sj15);
IkReal x14987=(cj15*r11);
IkReal x14988=(cj15*r10);
IkReal x14989=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x14990=(r02*sj15);
IkReal x14991=(cj15*r01);
IkReal x14992=(cj15*r00);
evalcond[0]=((((-1.0)*x14977*x14978))+(((-1.0)*r21*x14973))+(((-1.0)*x14974*x14976))+(((-1.0)*x14979*x14980))+((r20*x14972)));
evalcond[1]=(((r21*x14981))+(((-1.0)*r20*x14978))+(((-1.0)*x14977*x14983))+(((-1.0)*x14974*x14982))+(((-1.0)*x14973*x14979)));
evalcond[2]=(((r10*x14972))+(((-1.0)*r11*x14973))+x14984+x14985+(((-1.0)*x14980*x14988))+(((-1.0)*x14978*x14987))+(((-1.0)*x14976*x14986)));
evalcond[3]=(((r00*x14972))+(((-1.0)*x14976*x14990))+x14989+(((-1.0)*x14980*x14992))+(((-1.0)*r01*x14973))+(((-1.0)*x14978*x14991)));
evalcond[4]=((((-1.0)*x14983*x14987))+(((-1.0)*r10*x14978))+x14989+(((-1.0)*x14982*x14986))+((r11*x14981))+(((-1.0)*x14973*x14988)));
evalcond[5]=((((-1.0)*x14983*x14991))+(((-1.0)*x14982*x14990))+(((-1.0)*x14973*x14992))+(((-1.0)*r00*x14978))+((r01*x14981))+(((-1.0)*x14984))+(((-1.0)*x14985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14993=((1.0)*sj15);
IkReal x14994=(cj10*cj12);
IkReal x14995=(r21*sj16);
IkReal x14996=(sj10*sj12);
IkReal x14997=((1.0)*cj16*r20);
IkReal x14998=((1.0)*r22*sj15);
IkReal x14999=(cj16*r21);
IkReal x15000=((1.0)*cj10*cj12*cj15);
IkReal x15001=(r20*sj16);
IkReal x15002=((1.0)*cj15*sj10*sj12);
CheckValue<IkReal> x15003 = IKatan2WithCheck(IkReal((((x14994*x14995))+(((-1.0)*x14996*x14997))+((x14995*x14996))+(((-1.0)*x14994*x14997)))),IkReal(((((-1.0)*x14994*x14998))+(((-1.0)*x14996*x14998))+(((-1.0)*x15000*x15001))+(((-1.0)*x14999*x15002))+(((-1.0)*x14999*x15000))+(((-1.0)*x15001*x15002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15003.valid){
continue;
}
CheckValue<IkReal> x15004=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x14993))+((cj15*r02))+(((-1.0)*r00*sj16*x14993)))),-1);
if(!x15004.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15003.value)+(((1.5707963267949)*(x15004.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15005=IKcos(j14);
IkReal x15006=(cj16*x15005);
IkReal x15007=((1.0)*sj16*x15005);
IkReal x15008=(r22*sj15);
IkReal x15009=IKsin(j14);
IkReal x15010=((1.0)*x15009);
IkReal x15011=(cj15*r21);
IkReal x15012=((1.0)*cj16*x15009);
IkReal x15013=(cj15*r20);
IkReal x15014=((1.0)*sj16*x15009);
IkReal x15015=(sj16*x15009);
IkReal x15016=((1.0)*x15005);
IkReal x15017=((1.0)*cj16*x15005);
IkReal x15018=(cj10*cj12);
IkReal x15019=(sj10*sj12);
IkReal x15020=(r12*sj15);
IkReal x15021=(cj15*r11);
IkReal x15022=(cj15*r10);
IkReal x15023=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x15024=(r02*sj15);
IkReal x15025=(cj15*r01);
IkReal x15026=(cj15*r00);
evalcond[0]=((((-1.0)*x15013*x15014))+(((-1.0)*r21*x15007))+(((-1.0)*x15011*x15012))+(((-1.0)*x15008*x15010))+((r20*x15006)));
evalcond[1]=(((r21*x15015))+(((-1.0)*r20*x15012))+(((-1.0)*x15007*x15013))+(((-1.0)*x15008*x15016))+(((-1.0)*x15011*x15017)));
evalcond[2]=((((-1.0)*r11*x15007))+(((-1.0)*x15010*x15020))+(((-1.0)*x15014*x15022))+((r10*x15006))+(((-1.0)*x15012*x15021))+x15019+x15018);
evalcond[3]=((((-1.0)*x15010*x15024))+((r00*x15006))+(((-1.0)*r01*x15007))+(((-1.0)*x15012*x15025))+(((-1.0)*x15014*x15026))+x15023);
evalcond[4]=(((r11*x15015))+(((-1.0)*x15007*x15022))+(((-1.0)*r10*x15012))+(((-1.0)*x15017*x15021))+(((-1.0)*x15016*x15020))+x15023);
evalcond[5]=((((-1.0)*x15016*x15024))+((r01*x15015))+(((-1.0)*x15019))+(((-1.0)*x15007*x15026))+(((-1.0)*x15018))+(((-1.0)*x15017*x15025))+(((-1.0)*r00*x15012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15027=(cj12*sj10);
IkReal x15028=(cj16*r20);
IkReal x15029=((1.0)*cj10*sj12);
IkReal x15030=(r22*sj15);
IkReal x15031=(cj16*r21);
IkReal x15032=(cj12*cj15*sj10);
IkReal x15033=(r20*sj16);
IkReal x15034=((1.0)*cj10*cj15*sj12);
CheckValue<IkReal> x15035=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x15035.valid){
continue;
}
CheckValue<IkReal> x15036 = IKatan2WithCheck(IkReal((((((cj10*sj12))*((r21*sj16))))+(((-1.0)*x15028*x15029))+((x15027*x15028))+(((-1.0)*r21*sj16*x15027)))),IkReal((((x15027*x15030))+((x15031*x15032))+(((-1.0)*x15031*x15034))+(((-1.0)*x15029*x15030))+(((-1.0)*x15033*x15034))+((x15032*x15033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15036.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15035.value)))+(x15036.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15037=IKcos(j14);
IkReal x15038=(cj16*x15037);
IkReal x15039=((1.0)*sj16*x15037);
IkReal x15040=(r22*sj15);
IkReal x15041=IKsin(j14);
IkReal x15042=((1.0)*x15041);
IkReal x15043=(cj15*r21);
IkReal x15044=((1.0)*cj16*x15041);
IkReal x15045=(cj15*r20);
IkReal x15046=((1.0)*sj16*x15041);
IkReal x15047=(sj16*x15041);
IkReal x15048=((1.0)*x15037);
IkReal x15049=((1.0)*cj16*x15037);
IkReal x15050=(cj10*cj12);
IkReal x15051=(sj10*sj12);
IkReal x15052=(r12*sj15);
IkReal x15053=(cj15*r11);
IkReal x15054=(cj15*r10);
IkReal x15055=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x15056=(r02*sj15);
IkReal x15057=(cj15*r01);
IkReal x15058=(cj15*r00);
evalcond[0]=(((r20*x15038))+(((-1.0)*x15043*x15044))+(((-1.0)*x15045*x15046))+(((-1.0)*x15040*x15042))+(((-1.0)*r21*x15039)));
evalcond[1]=((((-1.0)*x15043*x15049))+((r21*x15047))+(((-1.0)*x15040*x15048))+(((-1.0)*x15039*x15045))+(((-1.0)*r20*x15044)));
evalcond[2]=(((r10*x15038))+(((-1.0)*x15042*x15052))+(((-1.0)*r11*x15039))+(((-1.0)*x15046*x15054))+x15050+x15051+(((-1.0)*x15044*x15053)));
evalcond[3]=((((-1.0)*x15046*x15058))+((r00*x15038))+(((-1.0)*x15044*x15057))+(((-1.0)*x15042*x15056))+(((-1.0)*r01*x15039))+x15055);
evalcond[4]=((((-1.0)*x15039*x15054))+((r11*x15047))+(((-1.0)*x15049*x15053))+(((-1.0)*x15048*x15052))+(((-1.0)*r10*x15044))+x15055);
evalcond[5]=((((-1.0)*x15050))+(((-1.0)*x15051))+(((-1.0)*x15048*x15056))+((r01*x15047))+(((-1.0)*r00*x15044))+(((-1.0)*x15039*x15058))+(((-1.0)*x15049*x15057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j10eval[0]=((1.0)+cj12);
j10eval[1]=IKsign(((9522.0)+(((9522.0)*cj12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x15059=((1.0)*r21);
j14eval[0]=((IKabs(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*cj15*cj16*x15059))+(((-1.0)*(1.0)*r22*sj15)))))+(IKabs(((((-1.0)*sj16*x15059))+((cj16*r20))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x15060=((1.0)*cj16);
j14eval[0]=((IKabs(((((-1.0)*r20*x15060))+((r21*sj16)))))+(IKabs(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*cj15*r21*x15060))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
IkReal x15061=((1.0)*cj16);
CheckValue<IkReal> x15063 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*cj15*r21*x15061))+(((-1.0)*(1.0)*r22*sj15)))),IkReal((((r21*sj16))+(((-1.0)*r20*x15061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15063.valid){
continue;
}
IkReal x15062=((-1.0)*(x15063.value));
j14array[0]=x15062;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+x15062);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
IkReal x15064=IKcos(j14);
IkReal x15065=((1.0)*r21);
IkReal x15066=IKsin(j14);
IkReal x15067=((1.0)*x15066);
evalcond[0]=((((-1.0)*cj15*r20*sj16*x15067))+(((-1.0)*r22*sj15*x15067))+(((-1.0)*cj15*cj16*x15065*x15066))+(((-1.0)*sj16*x15064*x15065))+((cj16*r20*x15064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15068=(cj12*cj14);
IkReal x15069=(r12*sj15);
IkReal x15070=(cj12*sj14);
IkReal x15071=(cj16*r10);
IkReal x15072=(cj14*sj12);
IkReal x15073=((1.0)*r11*sj16);
IkReal x15074=(cj16*r11);
IkReal x15075=(cj12*cj14*cj15);
IkReal x15076=(r10*sj16);
IkReal x15077=((1.0)*cj15*sj12*sj14);
IkReal x15078=(sj12*sj14);
IkReal x15079=(cj12*cj15*sj14);
IkReal x15080=(cj14*cj15*sj12);
if( IKabs((((x15075*x15076))+((x15071*x15072))+((x15074*x15075))+(((-1.0)*x15070*x15073))+((x15070*x15071))+(((-1.0)*sj12*sj14*x15069))+(((-1.0)*x15072*x15073))+(((-1.0)*x15076*x15077))+((x15068*x15069))+(((-1.0)*x15074*x15077)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*cj14*x15071))+(((-1.0)*x15073*x15078))+((x15076*x15080))+((x15069*x15070))+((x15074*x15079))+((x15076*x15079))+((r11*sj16*x15068))+((x15069*x15072))+((x15074*x15080))+((x15071*x15078)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15075*x15076))+((x15071*x15072))+((x15074*x15075))+(((-1.0)*x15070*x15073))+((x15070*x15071))+(((-1.0)*sj12*sj14*x15069))+(((-1.0)*x15072*x15073))+(((-1.0)*x15076*x15077))+((x15068*x15069))+(((-1.0)*x15074*x15077))))+IKsqr(((((-1.0)*cj12*cj14*x15071))+(((-1.0)*x15073*x15078))+((x15076*x15080))+((x15069*x15070))+((x15074*x15079))+((x15076*x15079))+((r11*sj16*x15068))+((x15069*x15072))+((x15074*x15080))+((x15071*x15078))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x15075*x15076))+((x15071*x15072))+((x15074*x15075))+(((-1.0)*x15070*x15073))+((x15070*x15071))+(((-1.0)*sj12*sj14*x15069))+(((-1.0)*x15072*x15073))+(((-1.0)*x15076*x15077))+((x15068*x15069))+(((-1.0)*x15074*x15077))), ((((-1.0)*cj12*cj14*x15071))+(((-1.0)*x15073*x15078))+((x15076*x15080))+((x15069*x15070))+((x15074*x15079))+((x15076*x15079))+((r11*sj16*x15068))+((x15069*x15072))+((x15074*x15080))+((x15071*x15078))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x15081=IKsin(j10);
IkReal x15082=(cj12*x15081);
IkReal x15083=IKcos(j10);
IkReal x15084=(sj12*x15083);
IkReal x15085=(sj14*sj16);
IkReal x15086=((1.0)*cj14*sj15);
IkReal x15087=((1.0)*cj16*sj14);
IkReal x15088=((1.0)*cj14*cj15*cj16);
IkReal x15089=((1.0)*cj14*cj15*sj16);
IkReal x15090=(cj12*x15083);
IkReal x15091=(x15090+(((-1.0)*sj12*x15081)));
IkReal x15092=(cj14*cj16);
IkReal x15093=((1.0)*cj14*sj16);
IkReal x15094=((1.0)*sj14*sj15);
IkReal x15095=((1.0)*cj15*cj16*sj14);
IkReal x15096=((1.0)*cj15*sj14*sj16);
IkReal x15097=((0.37429)*cj15);
IkReal x15098=((0.01)*sj15);
IkReal x15099=((0.069)*x15081);
IkReal x15100=((0.01)*cj15*cj16);
IkReal x15101=((0.01)*cj15*sj16);
IkReal x15102=((0.37429)*cj16*sj15);
IkReal x15103=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r10*x15089))+(((-1.0)*r11*x15088))+(((-1.0)*r12*x15086))+((r11*x15085))+(((-1.0)*r10*x15087))+x15084+x15082);
evalcond[1]=((((-1.0)*r11*x15095))+x15091+((r10*x15092))+(((-1.0)*r11*x15093))+(((-1.0)*r10*x15096))+(((-1.0)*r12*x15094)));
evalcond[2]=(((r01*x15085))+(((-1.0)*r01*x15088))+x15091+(((-1.0)*r00*x15089))+(((-1.0)*r00*x15087))+(((-1.0)*r02*x15086)));
evalcond[3]=((((-1.0)*x15082))+(((-1.0)*r02*x15094))+(((-1.0)*r01*x15093))+(((-1.0)*r01*x15095))+(((-1.0)*r00*x15096))+((r00*x15092))+(((-1.0)*x15084)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.069)*x15090))+(((0.069)*x15083))+((r00*x15101))+(((-1.0)*sj12*x15099))+((r01*x15100))+(((-1.0)*r01*x15102))+((r02*x15098))+(((-1.0)*r00*x15103))+((r02*x15097)));
evalcond[5]=((((0.069)*x15082))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x15103))+(((0.069)*x15084))+((r11*x15100))+((r10*x15101))+x15099+((r12*x15097))+((r12*x15098))+(((-1.0)*r11*x15102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
IkReal x15104=((1.0)*r21);
CheckValue<IkReal> x15106 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*sj16*x15104)))),IkReal(((((-1.0)*cj15*cj16*x15104))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15106.valid){
continue;
}
IkReal x15105=((-1.0)*(x15106.value));
j14array[0]=x15105;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+x15105);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
IkReal x15107=IKsin(j14);
IkReal x15108=((1.0)*cj16);
IkReal x15109=IKcos(j14);
IkReal x15110=((1.0)*x15109);
evalcond[0]=(((r21*sj16*x15107))+(((-1.0)*cj15*r20*sj16*x15110))+(((-1.0)*r22*sj15*x15110))+(((-1.0)*cj15*r21*x15108*x15109))+(((-1.0)*r20*x15107*x15108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15111=(cj12*cj14);
IkReal x15112=(r12*sj15);
IkReal x15113=(cj12*sj14);
IkReal x15114=(cj16*r10);
IkReal x15115=(cj14*sj12);
IkReal x15116=((1.0)*r11*sj16);
IkReal x15117=(cj16*r11);
IkReal x15118=(cj12*cj14*cj15);
IkReal x15119=(r10*sj16);
IkReal x15120=((1.0)*cj15*sj12*sj14);
IkReal x15121=(sj12*sj14);
IkReal x15122=(cj12*cj15*sj14);
IkReal x15123=(cj14*cj15*sj12);
if( IKabs((((x15118*x15119))+(((-1.0)*sj12*sj14*x15112))+(((-1.0)*x15113*x15116))+((x15113*x15114))+((x15117*x15118))+(((-1.0)*x15115*x15116))+((x15111*x15112))+(((-1.0)*x15119*x15120))+(((-1.0)*x15117*x15120))+((x15114*x15115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x15114*x15121))+((x15117*x15122))+((r11*sj16*x15111))+(((-1.0)*cj12*cj14*x15114))+((x15117*x15123))+(((-1.0)*x15116*x15121))+((x15112*x15115))+((x15119*x15122))+((x15112*x15113))+((x15119*x15123)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15118*x15119))+(((-1.0)*sj12*sj14*x15112))+(((-1.0)*x15113*x15116))+((x15113*x15114))+((x15117*x15118))+(((-1.0)*x15115*x15116))+((x15111*x15112))+(((-1.0)*x15119*x15120))+(((-1.0)*x15117*x15120))+((x15114*x15115))))+IKsqr((((x15114*x15121))+((x15117*x15122))+((r11*sj16*x15111))+(((-1.0)*cj12*cj14*x15114))+((x15117*x15123))+(((-1.0)*x15116*x15121))+((x15112*x15115))+((x15119*x15122))+((x15112*x15113))+((x15119*x15123))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x15118*x15119))+(((-1.0)*sj12*sj14*x15112))+(((-1.0)*x15113*x15116))+((x15113*x15114))+((x15117*x15118))+(((-1.0)*x15115*x15116))+((x15111*x15112))+(((-1.0)*x15119*x15120))+(((-1.0)*x15117*x15120))+((x15114*x15115))), (((x15114*x15121))+((x15117*x15122))+((r11*sj16*x15111))+(((-1.0)*cj12*cj14*x15114))+((x15117*x15123))+(((-1.0)*x15116*x15121))+((x15112*x15115))+((x15119*x15122))+((x15112*x15113))+((x15119*x15123))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x15124=IKsin(j10);
IkReal x15125=(cj12*x15124);
IkReal x15126=IKcos(j10);
IkReal x15127=(sj12*x15126);
IkReal x15128=(sj14*sj16);
IkReal x15129=((1.0)*cj14*sj15);
IkReal x15130=((1.0)*cj16*sj14);
IkReal x15131=((1.0)*cj14*cj15*cj16);
IkReal x15132=((1.0)*cj14*cj15*sj16);
IkReal x15133=(cj12*x15126);
IkReal x15134=(x15133+(((-1.0)*sj12*x15124)));
IkReal x15135=(cj14*cj16);
IkReal x15136=((1.0)*cj14*sj16);
IkReal x15137=((1.0)*sj14*sj15);
IkReal x15138=((1.0)*cj15*cj16*sj14);
IkReal x15139=((1.0)*cj15*sj14*sj16);
IkReal x15140=((0.37429)*cj15);
IkReal x15141=((0.01)*sj15);
IkReal x15142=((0.069)*x15124);
IkReal x15143=((0.01)*cj15*cj16);
IkReal x15144=((0.01)*cj15*sj16);
IkReal x15145=((0.37429)*cj16*sj15);
IkReal x15146=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r10*x15130))+x15125+x15127+(((-1.0)*r12*x15129))+((r11*x15128))+(((-1.0)*r10*x15132))+(((-1.0)*r11*x15131)));
evalcond[1]=((((-1.0)*r11*x15136))+(((-1.0)*r10*x15139))+x15134+(((-1.0)*r11*x15138))+((r10*x15135))+(((-1.0)*r12*x15137)));
evalcond[2]=(((r01*x15128))+x15134+(((-1.0)*r00*x15132))+(((-1.0)*r02*x15129))+(((-1.0)*r01*x15131))+(((-1.0)*r00*x15130)));
evalcond[3]=(((r00*x15135))+(((-1.0)*r00*x15139))+(((-1.0)*r02*x15137))+(((-1.0)*r01*x15138))+(((-1.0)*r01*x15136))+(((-1.0)*x15125))+(((-1.0)*x15127)));
evalcond[4]=(((r02*x15141))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x15145))+(((0.069)*x15133))+(((-1.0)*r00*x15146))+(((0.069)*x15126))+((r01*x15143))+(((-1.0)*sj12*x15142))+((r00*x15144))+((r02*x15140)));
evalcond[5]=(((r11*x15143))+(((-1.0)*(1.0)*py))+x15142+(((0.069)*x15127))+(((-1.0)*r11*x15145))+(((0.069)*x15125))+((r12*x15140))+((r12*x15141))+(((-1.0)*r10*x15146))+((r10*x15144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15147=((69000.0)*py);
IkReal x15148=((25826.01)*cj15);
IkReal x15149=(r12*x15148);
IkReal x15150=((69000.0)*px);
IkReal x15151=((690.0)*sj15);
IkReal x15152=(r12*x15151);
IkReal x15153=((690.0)*cj15*cj16);
IkReal x15154=(r11*x15153);
IkReal x15155=(r02*x15148);
IkReal x15156=((690.0)*cj15*sj16);
IkReal x15157=(r10*x15156);
IkReal x15158=((25826.01)*cj16*sj15);
IkReal x15159=(r11*x15158);
IkReal x15160=(r02*x15151);
IkReal x15161=((25826.01)*sj15*sj16);
IkReal x15162=(r10*x15161);
IkReal x15163=(r01*x15153);
IkReal x15164=(r00*x15156);
IkReal x15165=(r01*x15158);
IkReal x15166=(r00*x15161);
CheckValue<IkReal> x15167=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj12)))),-1);
if(!x15167.valid){
continue;
}
CheckValue<IkReal> x15168 = IKatan2WithCheck(IkReal((((sj12*x15155))+((cj12*x15162))+x15162+(((-1.0)*x15149))+((cj12*x15159))+(((-1.0)*cj12*x15154))+x15147+((cj12*x15147))+(((-1.0)*sj12*x15166))+(((-1.0)*cj12*x15149))+(((-1.0)*sj12*x15150))+(((-1.0)*x15152))+(((-1.0)*cj12*x15157))+x15159+(((-1.0)*cj12*x15152))+(((-1.0)*sj12*x15165))+((sj12*x15164))+(((-1.0)*x15157))+((sj12*x15163))+((sj12*x15160))+(((-1.0)*x15154)))),IkReal(((((-1.0)*cj12*x15160))+x15165+x15166+(((-1.0)*sj12*x15149))+(((-1.0)*sj12*x15152))+((cj12*x15165))+(((-1.0)*x15163))+(((-1.0)*x15164))+(((-1.0)*sj12*x15154))+((sj12*x15147))+(((-1.0)*sj12*x15157))+(((-1.0)*x15155))+x15150+((cj12*x15150))+(((-1.0)*cj12*x15164))+((sj12*x15159))+((sj12*x15162))+(((-1.0)*x15160))+((cj12*x15166))+(((-1.0)*cj12*x15163))+(((-1.0)*cj12*x15155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15168.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15167.value)))+(x15168.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x15169=((0.37429)*cj15);
IkReal x15170=((0.01)*sj15);
IkReal x15171=((0.069)*(IKcos(j10)));
IkReal x15172=((0.069)*(IKsin(j10)));
IkReal x15173=((0.01)*cj15*cj16);
IkReal x15174=((0.01)*cj15*sj16);
IkReal x15175=((0.37429)*cj16*sj15);
IkReal x15176=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+((r02*x15170))+(((-1.0)*sj12*x15172))+((r00*x15174))+((r01*x15173))+((cj12*x15171))+((r02*x15169))+(((-1.0)*r00*x15176))+(((-1.0)*r01*x15175))+x15171);
evalcond[1]=((((-1.0)*(1.0)*py))+((r11*x15173))+((sj12*x15171))+((r10*x15174))+(((-1.0)*r10*x15176))+((cj12*x15172))+((r12*x15170))+(((-1.0)*r11*x15175))+((r12*x15169))+x15172);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x15177=((1.0)*sj15);
IkReal x15178=((((-1.0)*cj16*r01*x15177))+(((-1.0)*r00*sj16*x15177))+((cj15*r02)));
j14eval[0]=x15178;
j14eval[1]=IKsign(x15178);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x15179=(r01*r21);
IkReal x15180=((1.0)*x15179);
IkReal x15181=(r02*r22);
IkReal x15182=(cj16*sj16);
IkReal x15183=(r00*r21*x15182);
IkReal x15184=(r01*r20*x15182);
IkReal x15185=cj15*cj15;
IkReal x15186=cj16*cj16;
IkReal x15187=((1.0)*r00*r20);
IkReal x15188=((1.0)*cj15*cj16*sj15);
IkReal x15189=((1.0)*cj15*sj15*sj16);
IkReal x15190=(x15185*x15186);
IkReal x15191=((1.0)*x15185);
IkReal x15192=((((-1.0)*x15180*x15190))+((x15181*x15185))+(((-1.0)*r02*r21*x15188))+(((-1.0)*r00*r22*x15189))+(((-1.0)*x15184*x15191))+(((-1.0)*r02*r20*x15189))+(((-1.0)*x15186*x15187))+(((-1.0)*r01*r22*x15188))+(((-1.0)*x15185*x15187))+((x15179*x15186))+((r00*r20*x15190))+(((-1.0)*x15181))+x15183+x15184+(((-1.0)*x15180))+(((-1.0)*x15183*x15191)));
j14eval[0]=x15192;
j14eval[1]=IKsign(x15192);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x15193=(r11*r21);
IkReal x15194=((1.0)*x15193);
IkReal x15195=(r12*r22);
IkReal x15196=(cj16*sj16);
IkReal x15197=(r10*r21*x15196);
IkReal x15198=(r11*r20*x15196);
IkReal x15199=cj15*cj15;
IkReal x15200=cj16*cj16;
IkReal x15201=((1.0)*r10*r20);
IkReal x15202=((1.0)*cj15*cj16*sj15);
IkReal x15203=((1.0)*cj15*sj15*sj16);
IkReal x15204=(x15199*x15200);
IkReal x15205=((1.0)*x15199);
IkReal x15206=((((-1.0)*r11*r22*x15202))+((x15195*x15199))+(((-1.0)*r12*r20*x15203))+(((-1.0)*x15194))+((x15193*x15200))+x15198+x15197+(((-1.0)*x15198*x15205))+((r10*r20*x15204))+(((-1.0)*r12*r21*x15202))+(((-1.0)*r10*r22*x15203))+(((-1.0)*x15195))+(((-1.0)*x15199*x15201))+(((-1.0)*x15197*x15205))+(((-1.0)*x15200*x15201))+(((-1.0)*x15194*x15204)));
j14eval[0]=x15206;
j14eval[1]=IKsign(x15206);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15207=(r21*sj16);
IkReal x15208=(cj16*r20);
IkReal x15209=((1.0)*cj10*sj12);
IkReal x15210=((1.0)*cj12*sj10);
IkReal x15211=(r22*sj15);
IkReal x15212=(cj16*r21);
IkReal x15213=((1.0)*cj10*cj15*sj12);
IkReal x15214=(r20*sj16);
IkReal x15215=((1.0)*cj12*cj15*sj10);
IkReal x15216=(r11*r21);
IkReal x15217=((1.0)*x15216);
IkReal x15218=(r12*r22);
IkReal x15219=(cj16*r10*x15207);
IkReal x15220=(r11*sj16*x15208);
IkReal x15221=cj15*cj15;
IkReal x15222=cj16*cj16;
IkReal x15223=((1.0)*r10*r20);
IkReal x15224=((1.0)*cj15*r22*sj15);
IkReal x15225=((1.0)*cj15*r12*sj15);
IkReal x15226=(x15221*x15222);
IkReal x15227=((1.0)*x15221);
CheckValue<IkReal> x15228 = IKatan2WithCheck(IkReal((((cj12*sj10*x15207))+(((-1.0)*x15208*x15210))+(((-1.0)*x15208*x15209))+((cj10*sj12*x15207)))),IkReal(((((-1.0)*x15212*x15215))+(((-1.0)*x15213*x15214))+(((-1.0)*x15209*x15211))+(((-1.0)*x15210*x15211))+(((-1.0)*x15214*x15215))+(((-1.0)*x15212*x15213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15228.valid){
continue;
}
CheckValue<IkReal> x15229=IKPowWithIntegerCheck(IKsign((x15220+(((-1.0)*x15217*x15226))+(((-1.0)*x15221*x15223))+((x15216*x15222))+x15219+((x15218*x15221))+(((-1.0)*x15214*x15225))+(((-1.0)*x15219*x15227))+(((-1.0)*x15212*x15225))+(((-1.0)*x15218))+(((-1.0)*cj16*r11*x15224))+(((-1.0)*x15217))+((r10*r20*x15226))+(((-1.0)*x15220*x15227))+(((-1.0)*x15222*x15223))+(((-1.0)*r10*sj16*x15224)))),-1);
if(!x15229.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15228.value)+(((1.5707963267949)*(x15229.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15230=IKcos(j14);
IkReal x15231=(cj16*x15230);
IkReal x15232=((1.0)*sj16*x15230);
IkReal x15233=(r22*sj15);
IkReal x15234=IKsin(j14);
IkReal x15235=((1.0)*x15234);
IkReal x15236=(cj15*r21);
IkReal x15237=((1.0)*cj16*x15234);
IkReal x15238=(cj15*r20);
IkReal x15239=((1.0)*sj16*x15234);
IkReal x15240=(sj16*x15234);
IkReal x15241=((1.0)*x15230);
IkReal x15242=((1.0)*cj16*x15230);
IkReal x15243=(cj10*sj12);
IkReal x15244=(cj12*sj10);
IkReal x15245=(r12*sj15);
IkReal x15246=(cj15*r11);
IkReal x15247=(cj15*r10);
IkReal x15248=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x15249=(r02*sj15);
IkReal x15250=(cj15*r01);
IkReal x15251=(cj15*r00);
evalcond[0]=((((-1.0)*x15233*x15235))+(((-1.0)*x15238*x15239))+(((-1.0)*r21*x15232))+((r20*x15231))+(((-1.0)*x15236*x15237)));
evalcond[1]=(((r21*x15240))+(((-1.0)*x15232*x15238))+(((-1.0)*x15233*x15241))+(((-1.0)*x15236*x15242))+(((-1.0)*r20*x15237)));
evalcond[2]=((((-1.0)*r10*x15237))+((r11*x15240))+(((-1.0)*x15232*x15247))+(((-1.0)*x15242*x15246))+(((-1.0)*x15241*x15245))+x15244+x15243);
evalcond[3]=((((-1.0)*r11*x15232))+((r10*x15231))+(((-1.0)*x15239*x15247))+(((-1.0)*x15235*x15245))+x15248+(((-1.0)*x15237*x15246)));
evalcond[4]=((((-1.0)*x15241*x15249))+(((-1.0)*x15232*x15251))+((r01*x15240))+(((-1.0)*r00*x15237))+(((-1.0)*x15242*x15250))+x15248);
evalcond[5]=((((-1.0)*x15244))+(((-1.0)*x15235*x15249))+((r00*x15231))+(((-1.0)*x15237*x15250))+(((-1.0)*x15239*x15251))+(((-1.0)*r01*x15232))+(((-1.0)*x15243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15252=(r21*sj16);
IkReal x15253=(cj16*r20);
IkReal x15254=(sj10*sj12);
IkReal x15255=((1.0)*cj10*cj12);
IkReal x15256=(r22*sj15);
IkReal x15257=(cj16*r21);
IkReal x15258=(cj15*sj10*sj12);
IkReal x15259=(r20*sj16);
IkReal x15260=((1.0)*cj10*cj12*cj15);
IkReal x15261=(r01*r21);
IkReal x15262=((1.0)*x15261);
IkReal x15263=(r02*r22);
IkReal x15264=(cj16*r00*x15252);
IkReal x15265=(r01*sj16*x15253);
IkReal x15266=cj15*cj15;
IkReal x15267=cj16*cj16;
IkReal x15268=((1.0)*r00*r20);
IkReal x15269=((1.0)*cj15*r22*sj15);
IkReal x15270=((1.0)*cj15*r02*sj15);
IkReal x15271=(x15266*x15267);
IkReal x15272=((1.0)*x15266);
CheckValue<IkReal> x15273 = IKatan2WithCheck(IkReal(((((-1.0)*x15253*x15255))+(((-1.0)*r21*sj16*x15254))+((x15253*x15254))+((cj10*cj12*x15252)))),IkReal(((((-1.0)*x15259*x15260))+((x15254*x15256))+(((-1.0)*x15257*x15260))+((x15257*x15258))+(((-1.0)*x15255*x15256))+((x15258*x15259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15273.valid){
continue;
}
CheckValue<IkReal> x15274=IKPowWithIntegerCheck(IKsign((x15264+x15265+(((-1.0)*x15259*x15270))+(((-1.0)*x15264*x15272))+(((-1.0)*r00*sj16*x15269))+(((-1.0)*x15262))+(((-1.0)*x15262*x15271))+((x15261*x15267))+(((-1.0)*x15263))+(((-1.0)*x15266*x15268))+(((-1.0)*cj16*r01*x15269))+(((-1.0)*x15267*x15268))+((r00*r20*x15271))+(((-1.0)*x15257*x15270))+((x15263*x15266))+(((-1.0)*x15265*x15272)))),-1);
if(!x15274.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15273.value)+(((1.5707963267949)*(x15274.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15275=IKcos(j14);
IkReal x15276=(cj16*x15275);
IkReal x15277=((1.0)*sj16*x15275);
IkReal x15278=(r22*sj15);
IkReal x15279=IKsin(j14);
IkReal x15280=((1.0)*x15279);
IkReal x15281=(cj15*r21);
IkReal x15282=((1.0)*cj16*x15279);
IkReal x15283=(cj15*r20);
IkReal x15284=((1.0)*sj16*x15279);
IkReal x15285=(sj16*x15279);
IkReal x15286=((1.0)*x15275);
IkReal x15287=((1.0)*cj16*x15275);
IkReal x15288=(cj10*sj12);
IkReal x15289=(cj12*sj10);
IkReal x15290=(r12*sj15);
IkReal x15291=(cj15*r11);
IkReal x15292=(cj15*r10);
IkReal x15293=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x15294=(r02*sj15);
IkReal x15295=(cj15*r01);
IkReal x15296=(cj15*r00);
evalcond[0]=((((-1.0)*x15278*x15280))+((r20*x15276))+(((-1.0)*x15283*x15284))+(((-1.0)*x15281*x15282))+(((-1.0)*r21*x15277)));
evalcond[1]=((((-1.0)*x15278*x15286))+((r21*x15285))+(((-1.0)*x15281*x15287))+(((-1.0)*x15277*x15283))+(((-1.0)*r20*x15282)));
evalcond[2]=(((r11*x15285))+(((-1.0)*x15287*x15291))+(((-1.0)*r10*x15282))+(((-1.0)*x15277*x15292))+(((-1.0)*x15286*x15290))+x15289+x15288);
evalcond[3]=((((-1.0)*x15280*x15290))+x15293+(((-1.0)*r11*x15277))+((r10*x15276))+(((-1.0)*x15284*x15292))+(((-1.0)*x15282*x15291)));
evalcond[4]=((((-1.0)*x15286*x15294))+x15293+(((-1.0)*r00*x15282))+(((-1.0)*x15287*x15295))+(((-1.0)*x15277*x15296))+((r01*x15285)));
evalcond[5]=(((r00*x15276))+(((-1.0)*r01*x15277))+(((-1.0)*x15284*x15296))+(((-1.0)*x15282*x15295))+(((-1.0)*x15289))+(((-1.0)*x15288))+(((-1.0)*x15280*x15294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15297=((1.0)*sj15);
IkReal x15298=(cj10*sj12);
IkReal x15299=(r22*sj15);
IkReal x15300=(cj12*sj10);
IkReal x15301=(cj16*r21);
IkReal x15302=(cj10*cj15*sj12);
IkReal x15303=(r20*sj16);
IkReal x15304=(cj12*cj15*sj10);
IkReal x15305=(r21*sj16);
IkReal x15306=((1.0)*cj16*r20);
CheckValue<IkReal> x15307=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x15297))+(((-1.0)*r00*sj16*x15297))+((cj15*r02)))),-1);
if(!x15307.valid){
continue;
}
CheckValue<IkReal> x15308 = IKatan2WithCheck(IkReal((((x15299*x15300))+((x15298*x15299))+((x15301*x15304))+((x15301*x15302))+((x15302*x15303))+((x15303*x15304)))),IkReal(((((-1.0)*x15298*x15306))+((x15300*x15305))+(((-1.0)*x15300*x15306))+((x15298*x15305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15308.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15307.value)))+(x15308.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15309=IKcos(j14);
IkReal x15310=(cj16*x15309);
IkReal x15311=((1.0)*sj16*x15309);
IkReal x15312=(r22*sj15);
IkReal x15313=IKsin(j14);
IkReal x15314=((1.0)*x15313);
IkReal x15315=(cj15*r21);
IkReal x15316=((1.0)*cj16*x15313);
IkReal x15317=(cj15*r20);
IkReal x15318=((1.0)*sj16*x15313);
IkReal x15319=(sj16*x15313);
IkReal x15320=((1.0)*x15309);
IkReal x15321=((1.0)*cj16*x15309);
IkReal x15322=(cj10*sj12);
IkReal x15323=(cj12*sj10);
IkReal x15324=(r12*sj15);
IkReal x15325=(cj15*r11);
IkReal x15326=(cj15*r10);
IkReal x15327=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x15328=(r02*sj15);
IkReal x15329=(cj15*r01);
IkReal x15330=(cj15*r00);
evalcond[0]=((((-1.0)*x15312*x15314))+(((-1.0)*x15315*x15316))+((r20*x15310))+(((-1.0)*r21*x15311))+(((-1.0)*x15317*x15318)));
evalcond[1]=(((r21*x15319))+(((-1.0)*r20*x15316))+(((-1.0)*x15311*x15317))+(((-1.0)*x15312*x15320))+(((-1.0)*x15315*x15321)));
evalcond[2]=((((-1.0)*x15311*x15326))+(((-1.0)*r10*x15316))+((r11*x15319))+x15323+x15322+(((-1.0)*x15321*x15325))+(((-1.0)*x15320*x15324)));
evalcond[3]=((((-1.0)*x15316*x15325))+x15327+(((-1.0)*x15314*x15324))+((r10*x15310))+(((-1.0)*x15318*x15326))+(((-1.0)*r11*x15311)));
evalcond[4]=((((-1.0)*x15320*x15328))+((r01*x15319))+x15327+(((-1.0)*r00*x15316))+(((-1.0)*x15321*x15329))+(((-1.0)*x15311*x15330)));
evalcond[5]=((((-1.0)*x15323))+(((-1.0)*x15318*x15330))+(((-1.0)*x15316*x15329))+((r00*x15310))+(((-1.0)*x15322))+(((-1.0)*r01*x15311))+(((-1.0)*x15314*x15328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15331=((0.069)*cj11);
IkReal x15332=(cj11*r12);
IkReal x15333=(cj15*r02);
IkReal x15334=(cj16*r11);
IkReal x15335=((0.01)*cj11*cj15);
IkReal x15336=(r10*sj16);
IkReal x15337=((0.37429)*cj11*sj15);
IkReal x15338=(cj16*r01);
IkReal x15339=((0.069)*sj12*sj15);
IkReal x15340=(r00*sj16);
IkReal x15341=((1.0)*sj15);
CheckValue<IkReal> x15342=IKPowWithIntegerCheck(((((-1.0)*cj12*sj11*x15331))+(((0.36442)*(cj11*cj11)))+x15331),-1);
if(!x15342.valid){
continue;
}
CheckValue<IkReal> x15343=IKPowWithIntegerCheck(cj11,-1);
if(!x15343.valid){
continue;
}
if( IKabs(((x15342.value)*(((((-0.01)*sj15*x15332))+(((-1.0)*x15335*x15336))+(((-0.069)*sj12*x15333))+((x15336*x15337))+((x15339*x15340))+((x15338*x15339))+(((-1.0)*x15334*x15335))+(((-0.37429)*cj15*x15332))+((cj11*py))+((x15334*x15337)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15343.value)*(((((-1.0)*x15340*x15341))+x15333+(((-1.0)*x15338*x15341)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15342.value)*(((((-0.01)*sj15*x15332))+(((-1.0)*x15335*x15336))+(((-0.069)*sj12*x15333))+((x15336*x15337))+((x15339*x15340))+((x15338*x15339))+(((-1.0)*x15334*x15335))+(((-0.37429)*cj15*x15332))+((cj11*py))+((x15334*x15337))))))+IKsqr(((x15343.value)*(((((-1.0)*x15340*x15341))+x15333+(((-1.0)*x15338*x15341))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x15342.value)*(((((-0.01)*sj15*x15332))+(((-1.0)*x15335*x15336))+(((-0.069)*sj12*x15333))+((x15336*x15337))+((x15339*x15340))+((x15338*x15339))+(((-1.0)*x15334*x15335))+(((-0.37429)*cj15*x15332))+((cj11*py))+((x15334*x15337))))), ((x15343.value)*(((((-1.0)*x15340*x15341))+x15333+(((-1.0)*x15338*x15341))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x15344=(cj15*r02);
IkReal x15345=IKcos(j10);
IkReal x15346=(cj11*x15345);
IkReal x15347=(cj16*r01*sj15);
IkReal x15348=(r00*sj15*sj16);
IkReal x15349=(cj15*r12);
IkReal x15350=IKsin(j10);
IkReal x15351=(cj11*x15350);
IkReal x15352=(cj16*r11*sj15);
IkReal x15353=(r10*sj15*sj16);
IkReal x15354=((0.01)*sj15);
IkReal x15355=((0.069)*x15345);
IkReal x15356=((0.069)*x15350);
IkReal x15357=((0.01)*cj15*cj16);
IkReal x15358=((0.01)*cj15*sj16);
IkReal x15359=(cj12*sj11);
evalcond[0]=((((-1.0)*x15347))+x15344+(((-1.0)*x15348))+(((-1.0)*x15346)));
evalcond[1]=((((-1.0)*x15353))+x15349+(((-1.0)*x15352))+(((-1.0)*x15351)));
evalcond[2]=(((r01*x15357))+(((-1.0)*(1.0)*px))+x15355+(((0.36442)*x15346))+((r00*x15358))+(((-0.37429)*x15348))+(((-1.0)*sj12*x15356))+(((-0.37429)*x15347))+(((0.37429)*x15344))+(((-1.0)*x15355*x15359))+((r02*x15354)));
evalcond[3]=(((r12*x15354))+(((-1.0)*(1.0)*py))+(((-0.37429)*x15352))+((r10*x15358))+x15356+((sj12*x15355))+(((0.36442)*x15351))+(((-0.37429)*x15353))+(((-1.0)*x15356*x15359))+((r11*x15357))+(((0.37429)*x15349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
IkReal x15360=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x15360;
j14eval[1]=IKsign(x15360);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
IkReal x15361=((1.0)*sj15);
IkReal x15362=((((-1.0)*r00*sj16*x15361))+((cj15*r02))+(((-1.0)*cj16*r01*x15361)));
j14eval[0]=x15362;
j14eval[1]=IKsign(x15362);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x15363=r21*r21;
IkReal x15364=((1.0)*x15363);
IkReal x15365=r22*r22;
IkReal x15366=(((cj16*r20*sj16))*(((2.0)*r21)));
IkReal x15367=cj15*cj15;
IkReal x15368=cj16*cj16;
IkReal x15369=(cj15*r22*sj15);
IkReal x15370=r20*r20;
IkReal x15371=((1.0)*x15370);
IkReal x15372=(x15367*x15368);
IkReal x15373=((((-1.0)*x15365))+((x15365*x15367))+((x15370*x15372))+x15366+(((-1.0)*x15367*x15371))+(((-1.0)*x15364))+(((-1.0)*x15368*x15371))+(((-2.0)*cj16*r21*x15369))+(((-2.0)*r20*sj16*x15369))+((x15363*x15368))+(((-1.0)*x15364*x15372))+(((-1.0)*x15366*x15367)));
IkReal x15374=(cj11*cj12);
IkReal x15375=(r22*sj15);
IkReal x15376=(cj11*sj12);
IkReal x15377=(cj16*r20);
IkReal x15378=((1.0)*r21*sj16);
IkReal x15379=(cj16*r21);
IkReal x15380=(cj11*cj12*cj15);
IkReal x15381=(r20*sj16);
IkReal x15382=((1.0)*cj11*cj15*sj12);
j14eval[0]=x15373;
j14eval[1]=((IKabs(((((-1.0)*cj11*sj12*x15375))+(((-1.0)*x15379*x15382))+((x15374*x15377))+(((-1.0)*x15381*x15382))+(((-1.0)*x15374*x15378)))))+(IKabs(((((-1.0)*x15376*x15378))+((x15376*x15377))+((x15379*x15380))+((x15374*x15375))+((x15380*x15381))))));
j14eval[2]=IKsign(x15373);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x15383=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x15383;
j14eval[1]=IKsign(x15383);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x15384=((1.0)*sj15);
IkReal x15385=((((-1.0)*r00*sj16*x15384))+(((-1.0)*cj16*r01*x15384))+((cj15*r02)));
j14eval[0]=x15385;
j14eval[1]=IKsign(x15385);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x15386=(r12*r22);
IkReal x15387=cj15*cj15;
IkReal x15388=(r10*r20);
IkReal x15389=(x15387*x15388);
IkReal x15390=cj16*cj16;
IkReal x15391=(r10*r21);
IkReal x15392=((1.0)*cj16*sj16);
IkReal x15393=(r11*r20);
IkReal x15394=(cj15*cj16*sj15);
IkReal x15395=(cj15*sj15*sj16);
IkReal x15396=(r11*r21*x15390);
IkReal x15397=(cj16*sj16*x15387);
IkReal x15398=(((r12*r21*x15394))+((x15388*x15390))+((x15393*x15397))+((x15387*x15396))+(((-1.0)*x15389*x15390))+(((-1.0)*x15391*x15392))+x15389+x15386+(((-1.0)*x15396))+(((-1.0)*x15392*x15393))+((r12*r20*x15395))+(((-1.0)*x15386*x15387))+((r10*r22*x15395))+((r11*r22*x15394))+((r11*r21))+((x15391*x15397)));
j14eval[0]=x15398;
j14eval[1]=IKsign(x15398);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15399=(cj10*cj12);
IkReal x15400=(r22*sj15);
IkReal x15401=(sj10*sj12);
IkReal x15402=(cj10*cj12*cj15);
IkReal x15403=(cj15*cj16*r21);
IkReal x15404=(cj15*r20*sj16);
IkReal x15405=(r21*sj16);
IkReal x15406=((1.0)*cj16*r20);
IkReal x15407=(r12*r22);
IkReal x15408=cj15*cj15;
IkReal x15409=(r10*r20);
IkReal x15410=(x15408*x15409);
IkReal x15411=cj16*cj16;
IkReal x15412=(r10*r21*sj16);
IkReal x15413=(cj15*r22*sj15);
IkReal x15414=(r12*sj15);
IkReal x15415=(r11*r21*x15411);
IkReal x15416=(cj16*x15408);
CheckValue<IkReal> x15417=IKPowWithIntegerCheck(IKsign((((x15409*x15411))+((r10*sj16*x15413))+((x15412*x15416))+((x15408*x15415))+(((-1.0)*r11*sj16*x15406))+((cj16*r11*x15413))+(((-1.0)*cj16*x15412))+(((-1.0)*x15415))+x15410+(((-1.0)*x15410*x15411))+((r11*r20*sj16*x15416))+((x15403*x15414))+((r11*r21))+x15407+((x15404*x15414))+(((-1.0)*x15407*x15408)))),-1);
if(!x15417.valid){
continue;
}
CheckValue<IkReal> x15418 = IKatan2WithCheck(IkReal((((r20*sj16*x15402))+((x15399*x15400))+((x15401*x15403))+((x15401*x15404))+((cj16*r21*x15402))+((x15400*x15401)))),IkReal(((((-1.0)*x15401*x15406))+((x15401*x15405))+((x15399*x15405))+(((-1.0)*x15399*x15406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15418.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15417.value)))+(x15418.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15419=IKcos(j14);
IkReal x15420=(cj16*x15419);
IkReal x15421=((1.0)*sj16*x15419);
IkReal x15422=(r22*sj15);
IkReal x15423=IKsin(j14);
IkReal x15424=((1.0)*x15423);
IkReal x15425=(cj15*r21);
IkReal x15426=((1.0)*cj16*x15423);
IkReal x15427=(cj15*r20);
IkReal x15428=((1.0)*sj16*x15423);
IkReal x15429=(sj16*x15423);
IkReal x15430=((1.0)*x15419);
IkReal x15431=((1.0)*cj16*x15419);
IkReal x15432=(cj10*cj12);
IkReal x15433=(sj10*sj12);
IkReal x15434=(r12*sj15);
IkReal x15435=(cj15*r11);
IkReal x15436=(cj15*r10);
IkReal x15437=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x15438=(r02*sj15);
IkReal x15439=(cj15*r01);
IkReal x15440=(cj15*r00);
evalcond[0]=(((r20*x15420))+(((-1.0)*x15425*x15426))+(((-1.0)*r21*x15421))+(((-1.0)*x15427*x15428))+(((-1.0)*x15422*x15424)));
evalcond[1]=((((-1.0)*x15422*x15430))+(((-1.0)*r20*x15426))+((r21*x15429))+(((-1.0)*x15425*x15431))+(((-1.0)*x15421*x15427)));
evalcond[2]=((((-1.0)*r11*x15421))+(((-1.0)*x15428*x15436))+(((-1.0)*x15426*x15435))+x15432+x15433+(((-1.0)*x15424*x15434))+((r10*x15420)));
evalcond[3]=((((-1.0)*x15424*x15438))+(((-1.0)*x15426*x15439))+x15437+((r00*x15420))+(((-1.0)*r01*x15421))+(((-1.0)*x15428*x15440)));
evalcond[4]=(((r11*x15429))+(((-1.0)*x15430*x15434))+x15437+(((-1.0)*x15431*x15435))+(((-1.0)*x15421*x15436))+(((-1.0)*r10*x15426)));
evalcond[5]=(((r01*x15429))+(((-1.0)*r00*x15426))+(((-1.0)*x15432))+(((-1.0)*x15433))+(((-1.0)*x15421*x15440))+(((-1.0)*x15431*x15439))+(((-1.0)*x15430*x15438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15441=((1.0)*sj15);
IkReal x15442=(cj10*cj12);
IkReal x15443=(r21*sj16);
IkReal x15444=(sj10*sj12);
IkReal x15445=((1.0)*cj16*r20);
IkReal x15446=((1.0)*r22*sj15);
IkReal x15447=(cj16*r21);
IkReal x15448=((1.0)*cj10*cj12*cj15);
IkReal x15449=(r20*sj16);
IkReal x15450=((1.0)*cj15*sj10*sj12);
CheckValue<IkReal> x15451 = IKatan2WithCheck(IkReal(((((-1.0)*x15444*x15445))+((x15442*x15443))+(((-1.0)*x15442*x15445))+((x15443*x15444)))),IkReal(((((-1.0)*x15447*x15448))+(((-1.0)*x15444*x15446))+(((-1.0)*x15448*x15449))+(((-1.0)*x15449*x15450))+(((-1.0)*x15447*x15450))+(((-1.0)*x15442*x15446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15451.valid){
continue;
}
CheckValue<IkReal> x15452=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x15441))+((cj15*r02))+(((-1.0)*r00*sj16*x15441)))),-1);
if(!x15452.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15451.value)+(((1.5707963267949)*(x15452.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15453=IKcos(j14);
IkReal x15454=(cj16*x15453);
IkReal x15455=((1.0)*sj16*x15453);
IkReal x15456=(r22*sj15);
IkReal x15457=IKsin(j14);
IkReal x15458=((1.0)*x15457);
IkReal x15459=(cj15*r21);
IkReal x15460=((1.0)*cj16*x15457);
IkReal x15461=(cj15*r20);
IkReal x15462=((1.0)*sj16*x15457);
IkReal x15463=(sj16*x15457);
IkReal x15464=((1.0)*x15453);
IkReal x15465=((1.0)*cj16*x15453);
IkReal x15466=(cj10*cj12);
IkReal x15467=(sj10*sj12);
IkReal x15468=(r12*sj15);
IkReal x15469=(cj15*r11);
IkReal x15470=(cj15*r10);
IkReal x15471=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x15472=(r02*sj15);
IkReal x15473=(cj15*r01);
IkReal x15474=(cj15*r00);
evalcond[0]=(((r20*x15454))+(((-1.0)*x15459*x15460))+(((-1.0)*r21*x15455))+(((-1.0)*x15456*x15458))+(((-1.0)*x15461*x15462)));
evalcond[1]=((((-1.0)*x15455*x15461))+((r21*x15463))+(((-1.0)*x15456*x15464))+(((-1.0)*r20*x15460))+(((-1.0)*x15459*x15465)));
evalcond[2]=((((-1.0)*r11*x15455))+(((-1.0)*x15462*x15470))+(((-1.0)*x15458*x15468))+x15466+x15467+(((-1.0)*x15460*x15469))+((r10*x15454)));
evalcond[3]=((((-1.0)*x15460*x15473))+x15471+(((-1.0)*x15458*x15472))+((r00*x15454))+(((-1.0)*r01*x15455))+(((-1.0)*x15462*x15474)));
evalcond[4]=((((-1.0)*x15465*x15469))+x15471+(((-1.0)*r10*x15460))+(((-1.0)*x15455*x15470))+(((-1.0)*x15464*x15468))+((r11*x15463)));
evalcond[5]=((((-1.0)*r00*x15460))+((r01*x15463))+(((-1.0)*x15465*x15473))+(((-1.0)*x15467))+(((-1.0)*x15455*x15474))+(((-1.0)*x15464*x15472))+(((-1.0)*x15466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15475=(cj12*sj10);
IkReal x15476=(cj16*r20);
IkReal x15477=((1.0)*cj10*sj12);
IkReal x15478=(r22*sj15);
IkReal x15479=(cj16*r21);
IkReal x15480=(cj12*cj15*sj10);
IkReal x15481=(r20*sj16);
IkReal x15482=((1.0)*cj10*cj15*sj12);
CheckValue<IkReal> x15483 = IKatan2WithCheck(IkReal((((((cj10*sj12))*((r21*sj16))))+(((-1.0)*r21*sj16*x15475))+(((-1.0)*x15476*x15477))+((x15475*x15476)))),IkReal((((x15479*x15480))+((x15475*x15478))+(((-1.0)*x15479*x15482))+(((-1.0)*x15477*x15478))+(((-1.0)*x15481*x15482))+((x15480*x15481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15483.valid){
continue;
}
CheckValue<IkReal> x15484=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x15484.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15483.value)+(((1.5707963267949)*(x15484.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15485=IKcos(j14);
IkReal x15486=(cj16*x15485);
IkReal x15487=((1.0)*sj16*x15485);
IkReal x15488=(r22*sj15);
IkReal x15489=IKsin(j14);
IkReal x15490=((1.0)*x15489);
IkReal x15491=(cj15*r21);
IkReal x15492=((1.0)*cj16*x15489);
IkReal x15493=(cj15*r20);
IkReal x15494=((1.0)*sj16*x15489);
IkReal x15495=(sj16*x15489);
IkReal x15496=((1.0)*x15485);
IkReal x15497=((1.0)*cj16*x15485);
IkReal x15498=(cj10*cj12);
IkReal x15499=(sj10*sj12);
IkReal x15500=(r12*sj15);
IkReal x15501=(cj15*r11);
IkReal x15502=(cj15*r10);
IkReal x15503=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x15504=(r02*sj15);
IkReal x15505=(cj15*r01);
IkReal x15506=(cj15*r00);
evalcond[0]=(((r20*x15486))+(((-1.0)*x15491*x15492))+(((-1.0)*r21*x15487))+(((-1.0)*x15493*x15494))+(((-1.0)*x15488*x15490)));
evalcond[1]=((((-1.0)*x15491*x15497))+(((-1.0)*x15487*x15493))+(((-1.0)*r20*x15492))+(((-1.0)*x15488*x15496))+((r21*x15495)));
evalcond[2]=((((-1.0)*x15492*x15501))+x15499+x15498+(((-1.0)*x15494*x15502))+((r10*x15486))+(((-1.0)*r11*x15487))+(((-1.0)*x15490*x15500)));
evalcond[3]=((((-1.0)*x15494*x15506))+(((-1.0)*x15492*x15505))+((r00*x15486))+(((-1.0)*r01*x15487))+(((-1.0)*x15490*x15504))+x15503);
evalcond[4]=(((r11*x15495))+(((-1.0)*x15496*x15500))+(((-1.0)*x15487*x15502))+(((-1.0)*r10*x15492))+(((-1.0)*x15497*x15501))+x15503);
evalcond[5]=((((-1.0)*x15497*x15505))+(((-1.0)*x15487*x15506))+(((-1.0)*x15499))+(((-1.0)*x15496*x15504))+(((-1.0)*r00*x15492))+((r01*x15495))+(((-1.0)*x15498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x15507=((1.0)*sj15);
IkReal x15508=((((-1.0)*r00*sj16*x15507))+((cj15*r02))+(((-1.0)*cj16*r01*x15507)));
j14eval[0]=x15508;
j14eval[1]=IKsign(x15508);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x15509=(r01*r21);
IkReal x15510=((1.0)*x15509);
IkReal x15511=(r02*r22);
IkReal x15512=(cj16*sj16);
IkReal x15513=(r00*r21*x15512);
IkReal x15514=(r01*r20*x15512);
IkReal x15515=cj15*cj15;
IkReal x15516=cj16*cj16;
IkReal x15517=((1.0)*r00*r20);
IkReal x15518=((1.0)*cj15*cj16*sj15);
IkReal x15519=((1.0)*cj15*sj15*sj16);
IkReal x15520=(x15515*x15516);
IkReal x15521=((1.0)*x15515);
IkReal x15522=((((-1.0)*r01*r22*x15518))+(((-1.0)*x15513*x15521))+(((-1.0)*r02*r21*x15518))+(((-1.0)*x15516*x15517))+(((-1.0)*x15510))+((r00*r20*x15520))+(((-1.0)*x15510*x15520))+(((-1.0)*r00*r22*x15519))+((x15509*x15516))+(((-1.0)*x15514*x15521))+x15514+x15513+((x15511*x15515))+(((-1.0)*x15515*x15517))+(((-1.0)*r02*r20*x15519))+(((-1.0)*x15511)));
j14eval[0]=x15522;
j14eval[1]=IKsign(x15522);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x15523=(r11*r21);
IkReal x15524=((1.0)*x15523);
IkReal x15525=(r12*r22);
IkReal x15526=(cj16*sj16);
IkReal x15527=(r10*r21*x15526);
IkReal x15528=(r11*r20*x15526);
IkReal x15529=cj15*cj15;
IkReal x15530=cj16*cj16;
IkReal x15531=((1.0)*r10*r20);
IkReal x15532=((1.0)*cj15*cj16*sj15);
IkReal x15533=((1.0)*cj15*sj15*sj16);
IkReal x15534=(x15529*x15530);
IkReal x15535=((1.0)*x15529);
IkReal x15536=((((-1.0)*x15525))+((x15523*x15530))+(((-1.0)*r11*r22*x15532))+(((-1.0)*x15527*x15535))+(((-1.0)*x15528*x15535))+x15528+x15527+((x15525*x15529))+(((-1.0)*r10*r22*x15533))+(((-1.0)*x15524*x15534))+(((-1.0)*x15529*x15531))+(((-1.0)*r12*r21*x15532))+((r10*r20*x15534))+(((-1.0)*r12*r20*x15533))+(((-1.0)*x15530*x15531))+(((-1.0)*x15524)));
j14eval[0]=x15536;
j14eval[1]=IKsign(x15536);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15537=(r21*sj16);
IkReal x15538=(cj16*r20);
IkReal x15539=((1.0)*cj10*sj12);
IkReal x15540=((1.0)*cj12*sj10);
IkReal x15541=(r22*sj15);
IkReal x15542=(cj16*r21);
IkReal x15543=((1.0)*cj10*cj15*sj12);
IkReal x15544=(r20*sj16);
IkReal x15545=((1.0)*cj12*cj15*sj10);
IkReal x15546=(r11*r21);
IkReal x15547=((1.0)*x15546);
IkReal x15548=(r12*r22);
IkReal x15549=(cj16*r10*x15537);
IkReal x15550=(r11*sj16*x15538);
IkReal x15551=cj15*cj15;
IkReal x15552=cj16*cj16;
IkReal x15553=((1.0)*r10*r20);
IkReal x15554=((1.0)*cj15*r22*sj15);
IkReal x15555=((1.0)*cj15*r12*sj15);
IkReal x15556=(x15551*x15552);
IkReal x15557=((1.0)*x15551);
CheckValue<IkReal> x15558 = IKatan2WithCheck(IkReal(((((-1.0)*x15538*x15539))+(((-1.0)*x15538*x15540))+((cj12*sj10*x15537))+((cj10*sj12*x15537)))),IkReal(((((-1.0)*x15543*x15544))+(((-1.0)*x15542*x15545))+(((-1.0)*x15540*x15541))+(((-1.0)*x15542*x15543))+(((-1.0)*x15544*x15545))+(((-1.0)*x15539*x15541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15558.valid){
continue;
}
CheckValue<IkReal> x15559=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15551*x15553))+(((-1.0)*r10*sj16*x15554))+(((-1.0)*x15547*x15556))+(((-1.0)*cj16*r11*x15554))+x15549+((r10*r20*x15556))+(((-1.0)*x15547))+(((-1.0)*x15544*x15555))+(((-1.0)*x15548))+(((-1.0)*x15549*x15557))+((x15548*x15551))+(((-1.0)*x15552*x15553))+(((-1.0)*x15550*x15557))+((x15546*x15552))+(((-1.0)*x15542*x15555))+x15550)),-1);
if(!x15559.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15558.value)+(((1.5707963267949)*(x15559.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15560=IKcos(j14);
IkReal x15561=(cj16*x15560);
IkReal x15562=((1.0)*sj16*x15560);
IkReal x15563=(r22*sj15);
IkReal x15564=IKsin(j14);
IkReal x15565=((1.0)*x15564);
IkReal x15566=(cj15*r21);
IkReal x15567=((1.0)*cj16*x15564);
IkReal x15568=(cj15*r20);
IkReal x15569=((1.0)*sj16*x15564);
IkReal x15570=(sj16*x15564);
IkReal x15571=((1.0)*x15560);
IkReal x15572=((1.0)*cj16*x15560);
IkReal x15573=(cj10*sj12);
IkReal x15574=(cj12*sj10);
IkReal x15575=(r12*sj15);
IkReal x15576=(cj15*r11);
IkReal x15577=(cj15*r10);
IkReal x15578=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x15579=(r02*sj15);
IkReal x15580=(cj15*r01);
IkReal x15581=(cj15*r00);
evalcond[0]=((((-1.0)*x15566*x15567))+(((-1.0)*x15568*x15569))+(((-1.0)*r21*x15562))+(((-1.0)*x15563*x15565))+((r20*x15561)));
evalcond[1]=((((-1.0)*x15566*x15572))+((r21*x15570))+(((-1.0)*r20*x15567))+(((-1.0)*x15562*x15568))+(((-1.0)*x15563*x15571)));
evalcond[2]=(((r11*x15570))+(((-1.0)*x15571*x15575))+x15574+x15573+(((-1.0)*r10*x15567))+(((-1.0)*x15562*x15577))+(((-1.0)*x15572*x15576)));
evalcond[3]=(((r10*x15561))+(((-1.0)*r11*x15562))+(((-1.0)*x15567*x15576))+x15578+(((-1.0)*x15565*x15575))+(((-1.0)*x15569*x15577)));
evalcond[4]=((((-1.0)*x15571*x15579))+(((-1.0)*x15562*x15581))+((r01*x15570))+x15578+(((-1.0)*r00*x15567))+(((-1.0)*x15572*x15580)));
evalcond[5]=((((-1.0)*x15567*x15580))+(((-1.0)*x15569*x15581))+(((-1.0)*x15573))+(((-1.0)*r01*x15562))+((r00*x15561))+(((-1.0)*x15565*x15579))+(((-1.0)*x15574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15582=(r21*sj16);
IkReal x15583=(cj16*r20);
IkReal x15584=(sj10*sj12);
IkReal x15585=((1.0)*cj10*cj12);
IkReal x15586=(r22*sj15);
IkReal x15587=(cj16*r21);
IkReal x15588=(cj15*sj10*sj12);
IkReal x15589=(r20*sj16);
IkReal x15590=((1.0)*cj10*cj12*cj15);
IkReal x15591=(r01*r21);
IkReal x15592=((1.0)*x15591);
IkReal x15593=(r02*r22);
IkReal x15594=(cj16*r00*x15582);
IkReal x15595=(r01*sj16*x15583);
IkReal x15596=cj15*cj15;
IkReal x15597=cj16*cj16;
IkReal x15598=((1.0)*r00*r20);
IkReal x15599=((1.0)*cj15*r22*sj15);
IkReal x15600=((1.0)*cj15*r02*sj15);
IkReal x15601=(x15596*x15597);
IkReal x15602=((1.0)*x15596);
CheckValue<IkReal> x15603=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15587*x15600))+((x15591*x15597))+(((-1.0)*r00*sj16*x15599))+(((-1.0)*x15594*x15602))+((r00*r20*x15601))+(((-1.0)*x15592))+(((-1.0)*x15592*x15601))+(((-1.0)*x15589*x15600))+x15595+x15594+(((-1.0)*cj16*r01*x15599))+(((-1.0)*x15593))+((x15593*x15596))+(((-1.0)*x15597*x15598))+(((-1.0)*x15595*x15602))+(((-1.0)*x15596*x15598)))),-1);
if(!x15603.valid){
continue;
}
CheckValue<IkReal> x15604 = IKatan2WithCheck(IkReal(((((-1.0)*x15583*x15585))+((cj10*cj12*x15582))+((x15583*x15584))+(((-1.0)*r21*sj16*x15584)))),IkReal(((((-1.0)*x15585*x15586))+(((-1.0)*x15589*x15590))+((x15587*x15588))+((x15588*x15589))+(((-1.0)*x15587*x15590))+((x15584*x15586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15604.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15603.value)))+(x15604.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15605=IKcos(j14);
IkReal x15606=(cj16*x15605);
IkReal x15607=((1.0)*sj16*x15605);
IkReal x15608=(r22*sj15);
IkReal x15609=IKsin(j14);
IkReal x15610=((1.0)*x15609);
IkReal x15611=(cj15*r21);
IkReal x15612=((1.0)*cj16*x15609);
IkReal x15613=(cj15*r20);
IkReal x15614=((1.0)*sj16*x15609);
IkReal x15615=(sj16*x15609);
IkReal x15616=((1.0)*x15605);
IkReal x15617=((1.0)*cj16*x15605);
IkReal x15618=(cj10*sj12);
IkReal x15619=(cj12*sj10);
IkReal x15620=(r12*sj15);
IkReal x15621=(cj15*r11);
IkReal x15622=(cj15*r10);
IkReal x15623=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x15624=(r02*sj15);
IkReal x15625=(cj15*r01);
IkReal x15626=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x15607))+(((-1.0)*x15608*x15610))+(((-1.0)*x15613*x15614))+(((-1.0)*x15611*x15612))+((r20*x15606)));
evalcond[1]=((((-1.0)*x15611*x15617))+(((-1.0)*x15608*x15616))+(((-1.0)*r20*x15612))+(((-1.0)*x15607*x15613))+((r21*x15615)));
evalcond[2]=((((-1.0)*x15616*x15620))+x15618+x15619+((r11*x15615))+(((-1.0)*r10*x15612))+(((-1.0)*x15617*x15621))+(((-1.0)*x15607*x15622)));
evalcond[3]=(((r10*x15606))+(((-1.0)*x15614*x15622))+(((-1.0)*x15612*x15621))+(((-1.0)*x15610*x15620))+x15623+(((-1.0)*r11*x15607)));
evalcond[4]=((((-1.0)*x15617*x15625))+(((-1.0)*r00*x15612))+((r01*x15615))+(((-1.0)*x15607*x15626))+x15623+(((-1.0)*x15616*x15624)));
evalcond[5]=(((r00*x15606))+(((-1.0)*x15612*x15625))+(((-1.0)*x15618))+(((-1.0)*x15614*x15626))+(((-1.0)*x15619))+(((-1.0)*x15610*x15624))+(((-1.0)*r01*x15607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15627=((1.0)*sj15);
IkReal x15628=(cj10*sj12);
IkReal x15629=(r22*sj15);
IkReal x15630=(cj12*sj10);
IkReal x15631=(cj16*r21);
IkReal x15632=(cj10*cj15*sj12);
IkReal x15633=(r20*sj16);
IkReal x15634=(cj12*cj15*sj10);
IkReal x15635=(r21*sj16);
IkReal x15636=((1.0)*cj16*r20);
CheckValue<IkReal> x15637 = IKatan2WithCheck(IkReal((((x15633*x15634))+((x15632*x15633))+((x15631*x15634))+((x15628*x15629))+((x15631*x15632))+((x15629*x15630)))),IkReal(((((-1.0)*x15630*x15636))+((x15630*x15635))+((x15628*x15635))+(((-1.0)*x15628*x15636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15637.valid){
continue;
}
CheckValue<IkReal> x15638=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*cj16*r01*x15627))+(((-1.0)*r00*sj16*x15627)))),-1);
if(!x15638.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15637.value)+(((1.5707963267949)*(x15638.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15639=IKcos(j14);
IkReal x15640=(cj16*x15639);
IkReal x15641=((1.0)*sj16*x15639);
IkReal x15642=(r22*sj15);
IkReal x15643=IKsin(j14);
IkReal x15644=((1.0)*x15643);
IkReal x15645=(cj15*r21);
IkReal x15646=((1.0)*cj16*x15643);
IkReal x15647=(cj15*r20);
IkReal x15648=((1.0)*sj16*x15643);
IkReal x15649=(sj16*x15643);
IkReal x15650=((1.0)*x15639);
IkReal x15651=((1.0)*cj16*x15639);
IkReal x15652=(cj10*sj12);
IkReal x15653=(cj12*sj10);
IkReal x15654=(r12*sj15);
IkReal x15655=(cj15*r11);
IkReal x15656=(cj15*r10);
IkReal x15657=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x15658=(r02*sj15);
IkReal x15659=(cj15*r01);
IkReal x15660=(cj15*r00);
evalcond[0]=((((-1.0)*x15642*x15644))+((r20*x15640))+(((-1.0)*r21*x15641))+(((-1.0)*x15645*x15646))+(((-1.0)*x15647*x15648)));
evalcond[1]=((((-1.0)*r20*x15646))+((r21*x15649))+(((-1.0)*x15645*x15651))+(((-1.0)*x15641*x15647))+(((-1.0)*x15642*x15650)));
evalcond[2]=((((-1.0)*x15650*x15654))+(((-1.0)*r10*x15646))+((r11*x15649))+x15652+x15653+(((-1.0)*x15641*x15656))+(((-1.0)*x15651*x15655)));
evalcond[3]=((((-1.0)*x15648*x15656))+(((-1.0)*x15646*x15655))+(((-1.0)*x15644*x15654))+((r10*x15640))+x15657+(((-1.0)*r11*x15641)));
evalcond[4]=(x15657+(((-1.0)*x15650*x15658))+(((-1.0)*r00*x15646))+((r01*x15649))+(((-1.0)*x15651*x15659))+(((-1.0)*x15641*x15660)));
evalcond[5]=((((-1.0)*x15646*x15659))+((r00*x15640))+(((-1.0)*x15652))+(((-1.0)*x15648*x15660))+(((-1.0)*x15653))+(((-1.0)*r01*x15641))+(((-1.0)*x15644*x15658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15661=(cj11*cj12);
IkReal x15662=(cj16*r20);
IkReal x15663=((1.0)*r21*sj16);
IkReal x15664=(r22*sj15);
IkReal x15665=(cj16*r21);
IkReal x15666=((1.0)*cj11*cj15*sj12);
IkReal x15667=(r20*sj16);
IkReal x15668=(cj11*sj12);
IkReal x15669=(cj11*cj12*cj15);
IkReal x15670=r21*r21;
IkReal x15671=((1.0)*x15670);
IkReal x15672=r22*r22;
IkReal x15673=(((cj16*r20*sj16))*(((2.0)*r21)));
IkReal x15674=cj15*cj15;
IkReal x15675=cj16*cj16;
IkReal x15676=(cj15*r22*sj15);
IkReal x15677=r20*r20;
IkReal x15678=((1.0)*x15677);
IkReal x15679=(x15674*x15675);
CheckValue<IkReal> x15680 = IKatan2WithCheck(IkReal(((((-1.0)*x15666*x15667))+(((-1.0)*cj11*sj12*x15664))+(((-1.0)*x15665*x15666))+((x15661*x15662))+(((-1.0)*x15661*x15663)))),IkReal(((((-1.0)*x15663*x15668))+((x15665*x15669))+((x15661*x15664))+((x15667*x15669))+((x15662*x15668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15680.valid){
continue;
}
CheckValue<IkReal> x15681=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15671*x15679))+(((-1.0)*x15674*x15678))+(((-1.0)*x15672))+(((-1.0)*x15673*x15674))+(((-2.0)*r20*sj16*x15676))+((x15677*x15679))+(((-2.0)*cj16*r21*x15676))+((x15672*x15674))+x15673+(((-1.0)*x15671))+((x15670*x15675))+(((-1.0)*x15675*x15678)))),-1);
if(!x15681.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15680.value)+(((1.5707963267949)*(x15681.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15682=IKcos(j14);
IkReal x15683=(cj16*x15682);
IkReal x15684=((1.0)*sj16*x15682);
IkReal x15685=(r22*sj15);
IkReal x15686=IKsin(j14);
IkReal x15687=((1.0)*x15686);
IkReal x15688=(cj15*r21);
IkReal x15689=((1.0)*cj16*x15686);
IkReal x15690=(cj15*r20);
IkReal x15691=((1.0)*sj16*x15686);
IkReal x15692=((1.0)*cj12);
IkReal x15693=(sj16*x15686);
IkReal x15694=((1.0)*x15682);
IkReal x15695=((1.0)*cj16*x15682);
IkReal x15696=(cj10*cj12);
IkReal x15697=(sj10*sj12);
IkReal x15698=(r12*sj15);
IkReal x15699=(cj15*r11);
IkReal x15700=(cj15*r10);
IkReal x15701=(sj10*x15692);
IkReal x15702=(cj10*sj12);
IkReal x15703=(r02*sj15);
IkReal x15704=(cj15*r01);
IkReal x15705=(cj15*r00);
evalcond[0]=(((r20*x15683))+(((-1.0)*r21*x15684))+(((-1.0)*x15688*x15689))+((cj11*sj12))+(((-1.0)*x15690*x15691))+(((-1.0)*x15685*x15687)));
evalcond[1]=((((-1.0)*cj11*x15692))+((r21*x15693))+(((-1.0)*r20*x15689))+(((-1.0)*x15688*x15695))+(((-1.0)*x15685*x15694))+(((-1.0)*x15684*x15690)));
evalcond[2]=(((r10*x15683))+x15696+(((-1.0)*x15689*x15699))+(((-1.0)*x15691*x15700))+((sj11*x15697))+(((-1.0)*r11*x15684))+(((-1.0)*x15687*x15698)));
evalcond[3]=((((-1.0)*x15701))+((sj11*x15702))+(((-1.0)*r01*x15684))+(((-1.0)*x15691*x15705))+(((-1.0)*x15687*x15703))+((r00*x15683))+(((-1.0)*x15689*x15704)));
evalcond[4]=((((-1.0)*x15694*x15698))+(((-1.0)*x15695*x15699))+(((-1.0)*x15684*x15700))+(((-1.0)*r10*x15689))+((r11*x15693))+x15702+(((-1.0)*sj11*x15701)));
evalcond[5]=((((-1.0)*x15697))+((r01*x15693))+(((-1.0)*x15694*x15703))+(((-1.0)*x15684*x15705))+(((-1.0)*x15695*x15704))+(((-1.0)*r00*x15689))+(((-1.0)*sj11*x15696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15706=((1.0)*sj15);
IkReal x15707=(cj10*cj12);
IkReal x15708=(r21*sj16);
IkReal x15709=(cj11*cj16*sj12);
IkReal x15710=((1.0)*cj10*cj12*cj16);
IkReal x15711=(cj11*sj12*sj16);
IkReal x15712=(sj10*sj11*sj12);
IkReal x15713=(cj16*sj10*sj11*sj12);
IkReal x15714=((1.0)*r22*sj15);
IkReal x15715=((1.0)*cj15*r20*sj16);
CheckValue<IkReal> x15716 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x15711))+((x15708*x15712))+(((-1.0)*r20*x15713))+((r10*x15709))+(((-1.0)*r20*x15710))+((x15707*x15708)))),IkReal(((((-1.0)*x15712*x15715))+(((-1.0)*x15707*x15714))+((((r12*sj15))*((cj11*sj12))))+((cj15*r11*x15709))+(((-1.0)*x15707*x15715))+((cj15*r10*x15711))+(((-1.0)*cj15*r21*x15713))+(((-1.0)*cj15*r21*x15710))+(((-1.0)*x15712*x15714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15716.valid){
continue;
}
CheckValue<IkReal> x15717=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x15706))+(((-1.0)*cj16*r01*x15706))+((cj15*r02)))),-1);
if(!x15717.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15716.value)+(((1.5707963267949)*(x15717.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15718=IKcos(j14);
IkReal x15719=(cj16*x15718);
IkReal x15720=((1.0)*sj16*x15718);
IkReal x15721=(r22*sj15);
IkReal x15722=IKsin(j14);
IkReal x15723=((1.0)*x15722);
IkReal x15724=(cj15*r21);
IkReal x15725=((1.0)*cj16*x15722);
IkReal x15726=(cj15*r20);
IkReal x15727=((1.0)*sj16*x15722);
IkReal x15728=((1.0)*cj12);
IkReal x15729=(sj16*x15722);
IkReal x15730=((1.0)*x15718);
IkReal x15731=((1.0)*cj16*x15718);
IkReal x15732=(cj10*cj12);
IkReal x15733=(sj10*sj12);
IkReal x15734=(r12*sj15);
IkReal x15735=(cj15*r11);
IkReal x15736=(cj15*r10);
IkReal x15737=(sj10*x15728);
IkReal x15738=(cj10*sj12);
IkReal x15739=(r02*sj15);
IkReal x15740=(cj15*r01);
IkReal x15741=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x15720))+((r20*x15719))+(((-1.0)*x15724*x15725))+((cj11*sj12))+(((-1.0)*x15721*x15723))+(((-1.0)*x15726*x15727)));
evalcond[1]=((((-1.0)*x15724*x15731))+(((-1.0)*x15720*x15726))+(((-1.0)*x15721*x15730))+((r21*x15729))+(((-1.0)*r20*x15725))+(((-1.0)*cj11*x15728)));
evalcond[2]=((((-1.0)*x15723*x15734))+(((-1.0)*r11*x15720))+((sj11*x15733))+((r10*x15719))+(((-1.0)*x15725*x15735))+x15732+(((-1.0)*x15727*x15736)));
evalcond[3]=((((-1.0)*r01*x15720))+(((-1.0)*x15737))+(((-1.0)*x15725*x15740))+((sj11*x15738))+(((-1.0)*x15727*x15741))+((r00*x15719))+(((-1.0)*x15723*x15739)));
evalcond[4]=((((-1.0)*sj11*x15737))+(((-1.0)*x15720*x15736))+x15738+(((-1.0)*x15731*x15735))+(((-1.0)*r10*x15725))+((r11*x15729))+(((-1.0)*x15730*x15734)));
evalcond[5]=((((-1.0)*x15733))+(((-1.0)*r00*x15725))+(((-1.0)*x15720*x15741))+(((-1.0)*x15731*x15740))+(((-1.0)*x15730*x15739))+(((-1.0)*sj11*x15732))+((r01*x15729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15742=(cj11*cj16*sj12);
IkReal x15743=(cj12*cj16*sj10);
IkReal x15744=((1.0)*sj16);
IkReal x15745=(cj10*r21*sj11*sj12);
IkReal x15746=((1.0)*cj10*sj11*sj12);
IkReal x15747=(r22*sj15);
IkReal x15748=(cj15*sj16);
CheckValue<IkReal> x15749 = IKatan2WithCheck(IkReal((((sj16*x15745))+((r20*x15743))+(((-1.0)*cj12*r21*sj10*x15744))+(((-1.0)*cj16*r20*x15746))+(((-1.0)*cj11*r01*sj12*x15744))+((r00*x15742)))),IkReal((((cj12*sj10*x15747))+(((-1.0)*cj10*cj15*r20*sj11*sj12*sj16))+((((r02*sj15))*((cj11*sj12))))+((cj12*r20*sj10*x15748))+((cj15*r21*x15743))+((cj11*r00*sj12*x15748))+((cj15*r01*x15742))+(((-1.0)*x15746*x15747))+(((-1.0)*cj15*cj16*x15745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15749.valid){
continue;
}
CheckValue<IkReal> x15750=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x15750.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15749.value)+(((1.5707963267949)*(x15750.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x15751=IKcos(j14);
IkReal x15752=(cj16*x15751);
IkReal x15753=((1.0)*sj16*x15751);
IkReal x15754=(r22*sj15);
IkReal x15755=IKsin(j14);
IkReal x15756=((1.0)*x15755);
IkReal x15757=(cj15*r21);
IkReal x15758=((1.0)*cj16*x15755);
IkReal x15759=(cj15*r20);
IkReal x15760=((1.0)*sj16*x15755);
IkReal x15761=((1.0)*cj12);
IkReal x15762=(sj16*x15755);
IkReal x15763=((1.0)*x15751);
IkReal x15764=((1.0)*cj16*x15751);
IkReal x15765=(cj10*cj12);
IkReal x15766=(sj10*sj12);
IkReal x15767=(r12*sj15);
IkReal x15768=(cj15*r11);
IkReal x15769=(cj15*r10);
IkReal x15770=(sj10*x15761);
IkReal x15771=(cj10*sj12);
IkReal x15772=(r02*sj15);
IkReal x15773=(cj15*r01);
IkReal x15774=(cj15*r00);
evalcond[0]=((((-1.0)*x15759*x15760))+(((-1.0)*x15757*x15758))+(((-1.0)*x15754*x15756))+((cj11*sj12))+((r20*x15752))+(((-1.0)*r21*x15753)));
evalcond[1]=((((-1.0)*x15754*x15763))+(((-1.0)*r20*x15758))+(((-1.0)*x15753*x15759))+((r21*x15762))+(((-1.0)*x15757*x15764))+(((-1.0)*cj11*x15761)));
evalcond[2]=((((-1.0)*x15760*x15769))+((sj11*x15766))+(((-1.0)*x15756*x15767))+x15765+(((-1.0)*r11*x15753))+((r10*x15752))+(((-1.0)*x15758*x15768)));
evalcond[3]=((((-1.0)*x15760*x15774))+(((-1.0)*x15756*x15772))+((sj11*x15771))+(((-1.0)*x15770))+(((-1.0)*x15758*x15773))+(((-1.0)*r01*x15753))+((r00*x15752)));
evalcond[4]=((((-1.0)*x15764*x15768))+(((-1.0)*x15753*x15769))+(((-1.0)*r10*x15758))+((r11*x15762))+(((-1.0)*x15763*x15767))+x15771+(((-1.0)*sj11*x15770)));
evalcond[5]=((((-1.0)*sj11*x15765))+(((-1.0)*x15764*x15773))+(((-1.0)*x15766))+(((-1.0)*x15763*x15772))+(((-1.0)*r00*x15758))+(((-1.0)*x15753*x15774))+((r01*x15762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15775=(cj11*cj12);
IkReal x15776=(cj16*r20);
IkReal x15777=((1.0)*r21*sj16);
IkReal x15778=(r22*sj15);
IkReal x15779=(cj16*r21);
IkReal x15780=((1.0)*cj11*cj15*sj12);
IkReal x15781=(r20*sj16);
IkReal x15782=(cj11*sj12);
IkReal x15783=(cj11*cj12*cj15);
IkReal x15784=r21*r21;
IkReal x15785=((1.0)*x15784);
IkReal x15786=r22*r22;
IkReal x15787=(((cj16*r20*sj16))*(((2.0)*r21)));
IkReal x15788=cj15*cj15;
IkReal x15789=cj16*cj16;
IkReal x15790=(cj15*r22*sj15);
IkReal x15791=r20*r20;
IkReal x15792=((1.0)*x15791);
IkReal x15793=(x15788*x15789);
CheckValue<IkReal> x15794 = IKatan2WithCheck(IkReal(((((-1.0)*x15775*x15777))+(((-1.0)*x15780*x15781))+(((-1.0)*x15779*x15780))+((x15775*x15776))+(((-1.0)*cj11*sj12*x15778)))),IkReal((((x15776*x15782))+((x15779*x15783))+(((-1.0)*x15777*x15782))+((x15781*x15783))+((x15775*x15778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15794.valid){
continue;
}
CheckValue<IkReal> x15795=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15787*x15788))+(((-1.0)*x15785))+((x15786*x15788))+(((-1.0)*x15785*x15793))+(((-1.0)*x15788*x15792))+(((-2.0)*r20*sj16*x15790))+(((-1.0)*x15786))+x15787+(((-1.0)*x15789*x15792))+((x15791*x15793))+(((-2.0)*cj16*r21*x15790))+((x15784*x15789)))),-1);
if(!x15795.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15794.value)+(((1.5707963267949)*(x15795.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x15796=IKcos(j14);
IkReal x15797=(cj16*r20);
IkReal x15798=(r21*sj16);
IkReal x15799=((1.0)*x15796);
IkReal x15800=(r22*sj15);
IkReal x15801=IKsin(j14);
IkReal x15802=((1.0)*x15801);
IkReal x15803=(cj15*cj16*r21);
IkReal x15804=(cj15*r20*sj16);
evalcond[0]=((((-1.0)*x15798*x15799))+(((-1.0)*x15802*x15804))+(((-1.0)*x15802*x15803))+((cj11*sj12))+((x15796*x15797))+(((-1.0)*x15800*x15802)));
evalcond[1]=((((-1.0)*x15797*x15802))+(((-1.0)*x15799*x15800))+(((-1.0)*x15799*x15804))+(((-1.0)*x15799*x15803))+(((-1.0)*(1.0)*cj11*cj12))+((x15798*x15801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x15805=((1.0)*cj16*sj15);
IkReal x15806=((1.0)*sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs(((((-1.0)*r00*x15806))+((cj15*r02))+(((-1.0)*r01*x15805)))))+(IKabs(((((-1.0)*r11*x15805))+((cj15*r12))+(((-1.0)*r10*x15806))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=cj11;
j10eval[1]=cj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj13=0;
cj13=1.0;
j13=0;
j10eval[0]=cj11;
j10eval[1]=sj11;
j10eval[2]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15807=(cj12*cj14*cj16);
IkReal x15808=(cj14*sj12);
IkReal x15809=(r11*sj16);
IkReal x15810=(r12*sj14*sj15);
IkReal x15811=(r01*sj16);
IkReal x15812=(r02*sj14*sj15);
IkReal x15813=((1.0)*r10);
IkReal x15814=(cj14*cj16*sj12);
IkReal x15815=(cj16*r11);
IkReal x15816=(cj15*sj12*sj14);
IkReal x15817=(r10*sj16);
IkReal x15818=(cj16*r01);
IkReal x15819=((1.0)*cj12*cj15*sj14);
IkReal x15820=(r00*sj16);
IkReal x15821=(cj12*cj15*sj14);
if( IKabs((((x15816*x15817))+((r00*x15807))+(((-1.0)*x15818*x15819))+(((-1.0)*x15813*x15814))+(((-1.0)*x15819*x15820))+((x15808*x15809))+((sj12*x15810))+((x15815*x15816))+(((-1.0)*cj12*x15812))+(((-1.0)*cj12*cj14*x15811)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x15814))+((cj12*cj14*x15809))+((x15816*x15820))+((sj12*x15812))+((x15815*x15821))+((x15816*x15818))+(((-1.0)*x15807*x15813))+((x15808*x15811))+((x15817*x15821))+((cj12*x15810)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15816*x15817))+((r00*x15807))+(((-1.0)*x15818*x15819))+(((-1.0)*x15813*x15814))+(((-1.0)*x15819*x15820))+((x15808*x15809))+((sj12*x15810))+((x15815*x15816))+(((-1.0)*cj12*x15812))+(((-1.0)*cj12*cj14*x15811))))+IKsqr(((((-1.0)*r00*x15814))+((cj12*cj14*x15809))+((x15816*x15820))+((sj12*x15812))+((x15815*x15821))+((x15816*x15818))+(((-1.0)*x15807*x15813))+((x15808*x15811))+((x15817*x15821))+((cj12*x15810))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x15816*x15817))+((r00*x15807))+(((-1.0)*x15818*x15819))+(((-1.0)*x15813*x15814))+(((-1.0)*x15819*x15820))+((x15808*x15809))+((sj12*x15810))+((x15815*x15816))+(((-1.0)*cj12*x15812))+(((-1.0)*cj12*cj14*x15811))), ((((-1.0)*r00*x15814))+((cj12*cj14*x15809))+((x15816*x15820))+((sj12*x15812))+((x15815*x15821))+((x15816*x15818))+(((-1.0)*x15807*x15813))+((x15808*x15811))+((x15817*x15821))+((cj12*x15810))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x15822=IKcos(j10);
IkReal x15823=(cj12*x15822);
IkReal x15824=IKsin(j10);
IkReal x15825=(sj12*x15824);
IkReal x15826=(cj14*cj16);
IkReal x15827=((1.0)*cj14*sj16);
IkReal x15828=((1.0)*sj14*sj15);
IkReal x15829=((1.0)*cj15*cj16*sj14);
IkReal x15830=((1.0)*cj15*sj14*sj16);
IkReal x15831=(sj12*x15822);
IkReal x15832=(x15831+(((-1.0)*cj12*x15824)));
IkReal x15833=(sj14*sj16);
IkReal x15834=((1.0)*cj14*sj15);
IkReal x15835=((1.0)*cj16*sj14);
IkReal x15836=((1.0)*cj14*cj15*cj16);
IkReal x15837=((1.0)*cj14*cj15*sj16);
IkReal x15838=((0.37429)*cj15);
IkReal x15839=((0.01)*sj15);
IkReal x15840=((0.01)*cj15*cj16);
IkReal x15841=((0.01)*cj15*sj16);
IkReal x15842=((0.37429)*cj16*sj15);
IkReal x15843=((0.37429)*sj15*sj16);
IkReal x15844=((0.069)*x15824);
evalcond[0]=(((r10*x15826))+(((-1.0)*r11*x15829))+(((-1.0)*r10*x15830))+(((-1.0)*r12*x15828))+x15823+x15825+(((-1.0)*r11*x15827)));
evalcond[1]=((((-1.0)*r00*x15830))+x15832+(((-1.0)*r01*x15827))+(((-1.0)*r02*x15828))+((r00*x15826))+(((-1.0)*r01*x15829)));
evalcond[2]=((((-1.0)*r12*x15834))+(((-1.0)*r10*x15837))+((r11*x15833))+x15832+(((-1.0)*r10*x15835))+(((-1.0)*r11*x15836)));
evalcond[3]=((((-1.0)*x15825))+(((-1.0)*x15823))+(((-1.0)*r01*x15836))+((r01*x15833))+(((-1.0)*r00*x15837))+(((-1.0)*r00*x15835))+(((-1.0)*r02*x15834)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.069)*x15822))+(((-0.069)*x15823))+((r02*x15839))+((r01*x15840))+(((-0.069)*x15825))+((r00*x15841))+(((-1.0)*r00*x15843))+((r02*x15838))+(((-1.0)*r01*x15842)));
evalcond[5]=(((r12*x15838))+(((-1.0)*(1.0)*py))+(((0.069)*x15831))+(((-1.0)*r10*x15843))+((r11*x15840))+(((-1.0)*cj12*x15844))+((r10*x15841))+x15844+(((-1.0)*r11*x15842))+((r12*x15839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15845=(cj12*cj14);
IkReal x15846=(r12*sj15);
IkReal x15847=(cj12*sj14);
IkReal x15848=(cj16*r10);
IkReal x15849=(cj14*sj12);
IkReal x15850=((1.0)*r11*sj16);
IkReal x15851=(cj16*r11);
IkReal x15852=(cj12*cj14*cj15);
IkReal x15853=(r10*sj16);
IkReal x15854=((1.0)*cj15*sj12*sj14);
IkReal x15855=(sj12*sj14);
IkReal x15856=(cj12*cj15*sj14);
IkReal x15857=(cj14*cj15*sj12);
if( IKabs((((x15851*x15852))+(((-1.0)*x15847*x15850))+((x15847*x15848))+(((-1.0)*x15849*x15850))+((x15852*x15853))+((x15848*x15849))+((x15845*x15846))+(((-1.0)*sj12*sj14*x15846))+(((-1.0)*x15853*x15854))+(((-1.0)*x15851*x15854)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj16*x15845))+((x15851*x15857))+((x15853*x15856))+((x15848*x15855))+((x15851*x15856))+((x15846*x15847))+(((-1.0)*x15850*x15855))+((x15846*x15849))+((x15853*x15857))+(((-1.0)*cj12*cj14*x15848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15851*x15852))+(((-1.0)*x15847*x15850))+((x15847*x15848))+(((-1.0)*x15849*x15850))+((x15852*x15853))+((x15848*x15849))+((x15845*x15846))+(((-1.0)*sj12*sj14*x15846))+(((-1.0)*x15853*x15854))+(((-1.0)*x15851*x15854))))+IKsqr((((r11*sj16*x15845))+((x15851*x15857))+((x15853*x15856))+((x15848*x15855))+((x15851*x15856))+((x15846*x15847))+(((-1.0)*x15850*x15855))+((x15846*x15849))+((x15853*x15857))+(((-1.0)*cj12*cj14*x15848))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x15851*x15852))+(((-1.0)*x15847*x15850))+((x15847*x15848))+(((-1.0)*x15849*x15850))+((x15852*x15853))+((x15848*x15849))+((x15845*x15846))+(((-1.0)*sj12*sj14*x15846))+(((-1.0)*x15853*x15854))+(((-1.0)*x15851*x15854))), (((r11*sj16*x15845))+((x15851*x15857))+((x15853*x15856))+((x15848*x15855))+((x15851*x15856))+((x15846*x15847))+(((-1.0)*x15850*x15855))+((x15846*x15849))+((x15853*x15857))+(((-1.0)*cj12*cj14*x15848))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x15858=IKsin(j10);
IkReal x15859=(cj12*x15858);
IkReal x15860=IKcos(j10);
IkReal x15861=(sj12*x15860);
IkReal x15862=(sj14*sj16);
IkReal x15863=((1.0)*cj14*sj15);
IkReal x15864=((1.0)*cj16*sj14);
IkReal x15865=((1.0)*cj14*cj15*cj16);
IkReal x15866=((1.0)*cj14*cj15*sj16);
IkReal x15867=(cj12*x15860);
IkReal x15868=((((-1.0)*sj12*x15858))+x15867);
IkReal x15869=(cj14*cj16);
IkReal x15870=((1.0)*cj14*sj16);
IkReal x15871=((1.0)*sj14*sj15);
IkReal x15872=((1.0)*cj15*cj16*sj14);
IkReal x15873=((1.0)*cj15*sj14*sj16);
IkReal x15874=((0.37429)*cj15);
IkReal x15875=((0.01)*sj15);
IkReal x15876=((0.069)*x15858);
IkReal x15877=((0.01)*cj15*cj16);
IkReal x15878=((0.01)*cj15*sj16);
IkReal x15879=((0.37429)*cj16*sj15);
IkReal x15880=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r10*x15866))+(((-1.0)*r10*x15864))+((r11*x15862))+(((-1.0)*r11*x15865))+x15859+(((-1.0)*r12*x15863))+x15861);
evalcond[1]=((((-1.0)*r11*x15872))+((r10*x15869))+(((-1.0)*r12*x15871))+(((-1.0)*r11*x15870))+x15868+(((-1.0)*r10*x15873)));
evalcond[2]=((((-1.0)*r01*x15865))+((r01*x15862))+(((-1.0)*r00*x15866))+(((-1.0)*r00*x15864))+(((-1.0)*r02*x15863))+x15868);
evalcond[3]=((((-1.0)*r01*x15870))+(((-1.0)*x15859))+((r00*x15869))+(((-1.0)*r02*x15871))+(((-1.0)*r00*x15873))+(((-1.0)*r01*x15872))+(((-1.0)*x15861)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x15879))+(((0.069)*x15860))+(((-1.0)*sj12*x15876))+(((-1.0)*r00*x15880))+(((0.069)*x15867))+((r02*x15874))+((r02*x15875))+((r00*x15878))+((r01*x15877)));
evalcond[5]=(((r11*x15877))+(((0.069)*x15859))+(((-1.0)*(1.0)*py))+((r12*x15875))+((r10*x15878))+(((-1.0)*r11*x15879))+((r12*x15874))+(((0.069)*x15861))+x15876+(((-1.0)*r10*x15880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15881=((1.0)*cj16*sj15);
IkReal x15882=((1.0)*sj15*sj16);
if( IKabs(((((-1.0)*r10*x15882))+(((-1.0)*r11*x15881))+((cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x15881))+(((-1.0)*r00*x15882))+((cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x15882))+(((-1.0)*r11*x15881))+((cj15*r12))))+IKsqr(((((-1.0)*r01*x15881))+(((-1.0)*r00*x15882))+((cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x15882))+(((-1.0)*r11*x15881))+((cj15*r12))), ((((-1.0)*r01*x15881))+(((-1.0)*r00*x15882))+((cj15*r02))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x15883=(cj15*r02);
IkReal x15884=IKcos(j10);
IkReal x15885=((1.0)*cj16);
IkReal x15886=(r01*sj15);
IkReal x15887=(r00*sj15*sj16);
IkReal x15888=(cj15*r12);
IkReal x15889=IKsin(j10);
IkReal x15890=((1.0)*x15889);
IkReal x15891=(r11*sj15);
IkReal x15892=(r10*sj16);
IkReal x15893=(cj14*cj16);
IkReal x15894=((1.0)*cj14*sj16);
IkReal x15895=((1.0)*sj14*sj15);
IkReal x15896=((1.0)*cj15*cj16*sj14);
IkReal x15897=((1.0)*cj15*sj14*sj16);
IkReal x15898=(sj12*x15884);
IkReal x15899=(sj14*sj16);
IkReal x15900=((1.0)*cj14*sj15);
IkReal x15901=((1.0)*cj16*sj14);
IkReal x15902=((1.0)*cj14*cj15*cj16);
IkReal x15903=((1.0)*cj14*cj15*sj16);
IkReal x15904=((0.01)*sj15);
IkReal x15905=((0.01)*cj15*cj16);
IkReal x15906=((0.01)*cj15*sj16);
IkReal x15907=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x15884))+x15883+(((-1.0)*x15885*x15886))+(((-1.0)*x15887)));
evalcond[1]=((((-1.0)*x15890))+x15888+(((-1.0)*x15885*x15891))+(((-1.0)*sj15*x15892)));
evalcond[2]=(((cj12*x15884))+(((-1.0)*r12*x15895))+(((-1.0)*r11*x15894))+(((-1.0)*r10*x15897))+(((-1.0)*r11*x15896))+((r10*x15893)));
evalcond[3]=(((r11*x15899))+(((-1.0)*r11*x15902))+(((-1.0)*r10*x15901))+x15898+(((-1.0)*r10*x15903))+(((-1.0)*r12*x15900)));
evalcond[4]=((((-1.0)*r01*x15896))+(((-1.0)*r01*x15894))+(((-1.0)*r00*x15897))+(((-1.0)*r02*x15895))+(((-1.0)*cj12*x15890))+((r00*x15893)));
evalcond[5]=((((-1.0)*r00*x15901))+((r01*x15899))+(((-1.0)*r01*x15902))+(((-1.0)*r00*x15903))+(((-1.0)*sj12*x15890))+(((-1.0)*r02*x15900)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r02*x15904))+((r00*x15906))+((r01*x15905))+(((0.37429)*x15883))+(((-0.069)*sj12*x15889))+(((0.43342)*x15884))+(((-0.37429)*x15887))+(((-1.0)*x15886*x15907)));
evalcond[7]=((((-0.37429)*sj15*x15892))+(((-1.0)*x15891*x15907))+(((-1.0)*(1.0)*py))+((r11*x15905))+(((0.37429)*x15888))+(((0.43342)*x15889))+((r10*x15906))+((r12*x15904))+(((0.069)*x15898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15908=((1.0)*cj15);
IkReal x15909=(cj16*sj15);
IkReal x15910=(sj15*sj16);
if( IKabs((((r10*x15910))+(((-1.0)*r12*x15908))+((r11*x15909)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x15908))+((r01*x15909))+((r00*x15910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x15910))+(((-1.0)*r12*x15908))+((r11*x15909))))+IKsqr(((((-1.0)*r02*x15908))+((r01*x15909))+((r00*x15910))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r10*x15910))+(((-1.0)*r12*x15908))+((r11*x15909))), ((((-1.0)*r02*x15908))+((r01*x15909))+((r00*x15910))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x15911=IKcos(j10);
IkReal x15912=(cj15*r02);
IkReal x15913=((1.0)*cj16);
IkReal x15914=(r01*sj15);
IkReal x15915=(r00*sj15*sj16);
IkReal x15916=IKsin(j10);
IkReal x15917=(cj15*r12);
IkReal x15918=(r11*sj15);
IkReal x15919=(r10*sj16);
IkReal x15920=(cj14*cj16);
IkReal x15921=((1.0)*cj14*sj16);
IkReal x15922=((1.0)*sj14*sj15);
IkReal x15923=((1.0)*cj15*cj16*sj14);
IkReal x15924=((1.0)*cj15*sj14*sj16);
IkReal x15925=(sj12*x15911);
IkReal x15926=(sj14*sj16);
IkReal x15927=((1.0)*cj14*sj15);
IkReal x15928=((1.0)*cj16*sj14);
IkReal x15929=((1.0)*cj14*cj15*cj16);
IkReal x15930=((1.0)*cj14*cj15*sj16);
IkReal x15931=((1.0)*x15916);
IkReal x15932=((0.01)*sj15);
IkReal x15933=((0.01)*cj15*cj16);
IkReal x15934=((0.01)*cj15*sj16);
IkReal x15935=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x15915))+(((-1.0)*x15913*x15914))+x15911+x15912);
evalcond[1]=((((-1.0)*x15913*x15918))+(((-1.0)*sj15*x15919))+x15917+x15916);
evalcond[2]=(((r10*x15920))+(((-1.0)*r11*x15923))+(((-1.0)*r12*x15922))+(((-1.0)*r11*x15921))+(((-1.0)*r10*x15924))+((cj12*x15911)));
evalcond[3]=(((r11*x15926))+x15925+(((-1.0)*r10*x15928))+(((-1.0)*r10*x15930))+(((-1.0)*r11*x15929))+(((-1.0)*r12*x15927)));
evalcond[4]=(((r00*x15920))+(((-1.0)*r01*x15923))+(((-1.0)*cj12*x15931))+(((-1.0)*r00*x15924))+(((-1.0)*r02*x15922))+(((-1.0)*r01*x15921)));
evalcond[5]=((((-1.0)*r00*x15930))+(((-1.0)*r02*x15927))+(((-1.0)*r01*x15929))+(((-1.0)*sj12*x15931))+(((-1.0)*r00*x15928))+((r01*x15926)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r00*x15934))+(((-1.0)*x15914*x15935))+((r01*x15933))+((r02*x15932))+(((-0.37429)*x15915))+(((-0.069)*sj12*x15916))+(((-0.29542)*x15911))+(((0.37429)*x15912)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-1.0)*x15918*x15935))+((r11*x15933))+(((-0.29542)*x15916))+(((0.069)*x15925))+((r12*x15932))+(((-0.37429)*sj15*x15919))+((r10*x15934))+(((0.37429)*x15917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj12=0;
cj12=1.0;
j12=0;
IkReal x15936=((1.0)*cj16*sj15);
IkReal x15937=((1.0)*sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs(((((-1.0)*r00*x15937))+((cj15*r02))+(((-1.0)*r01*x15936)))))+(IKabs(((((-1.0)*r10*x15937))+((cj15*r12))+(((-1.0)*r11*x15936))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj12=0;
cj12=1.0;
j12=0;
j10eval[0]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj12=0;
cj12=1.0;
j12=0;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15938=((1.0)*cj16*sj15);
IkReal x15939=((1.0)*sj15*sj16);
if( IKabs(((((-1.0)*r10*x15939))+((cj15*r12))+(((-1.0)*r11*x15938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x15939))+((cj15*r02))+(((-1.0)*r01*x15938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x15939))+((cj15*r12))+(((-1.0)*r11*x15938))))+IKsqr(((((-1.0)*r00*x15939))+((cj15*r02))+(((-1.0)*r01*x15938))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x15939))+((cj15*r12))+(((-1.0)*r11*x15938))), ((((-1.0)*r00*x15939))+((cj15*r02))+(((-1.0)*r01*x15938))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x15940=(cj15*r02);
IkReal x15941=IKcos(j10);
IkReal x15942=(cj16*r01*sj15);
IkReal x15943=(r00*sj15*sj16);
IkReal x15944=(cj15*r12);
IkReal x15945=IKsin(j10);
IkReal x15946=((-1.0)*x15945);
IkReal x15947=(cj16*r11*sj15);
IkReal x15948=(r10*sj16);
IkReal x15949=(cj14*cj16);
IkReal x15950=((1.0)*cj14*sj16);
IkReal x15951=((1.0)*sj14*sj15);
IkReal x15952=((1.0)*cj15*cj16*sj14);
IkReal x15953=((1.0)*cj15*sj14);
IkReal x15954=((0.01)*sj15);
IkReal x15955=((0.01)*cj15*cj16);
IkReal x15956=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x15943))+(((-1.0)*x15941))+(((-1.0)*x15942))+x15940);
evalcond[1]=((((-1.0)*sj15*x15948))+x15946+x15944+(((-1.0)*x15947)));
evalcond[2]=(((r10*x15949))+(((-1.0)*r11*x15952))+(((-1.0)*x15948*x15953))+(((-1.0)*r11*x15950))+(((-1.0)*r12*x15951))+x15941);
evalcond[3]=((((-1.0)*r01*x15950))+((r00*x15949))+(((-1.0)*r01*x15952))+x15946+(((-1.0)*r00*sj16*x15953))+(((-1.0)*r02*x15951)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r00*x15956))+(((0.37429)*x15940))+((r01*x15955))+(((-0.37429)*x15942))+(((0.43342)*x15941))+(((-0.37429)*x15943))+((r02*x15954)));
evalcond[5]=((((-1.0)*(1.0)*py))+((r10*x15956))+(((0.43342)*x15945))+(((0.37429)*x15944))+((r11*x15955))+(((-0.37429)*sj15*x15948))+((r12*x15954))+(((-0.37429)*x15947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15957=((1.0)*cj15);
IkReal x15958=(cj16*sj15);
IkReal x15959=(sj15*sj16);
if( IKabs(((((-1.0)*r12*x15957))+((r10*x15959))+((r11*x15958)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x15957))+((r01*x15958))+((r00*x15959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x15957))+((r10*x15959))+((r11*x15958))))+IKsqr(((((-1.0)*r02*x15957))+((r01*x15958))+((r00*x15959))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r12*x15957))+((r10*x15959))+((r11*x15958))), ((((-1.0)*r02*x15957))+((r01*x15958))+((r00*x15959))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x15960=IKcos(j10);
IkReal x15961=(cj15*r02);
IkReal x15962=(cj16*r01*sj15);
IkReal x15963=(r00*sj15*sj16);
IkReal x15964=IKsin(j10);
IkReal x15965=(cj15*r12);
IkReal x15966=(cj16*r11*sj15);
IkReal x15967=(r10*sj16);
IkReal x15968=(cj14*cj16);
IkReal x15969=((1.0)*cj14*sj16);
IkReal x15970=((1.0)*sj14*sj15);
IkReal x15971=((1.0)*cj15*cj16*sj14);
IkReal x15972=((1.0)*cj15*sj14);
IkReal x15973=((0.01)*sj15);
IkReal x15974=((0.01)*cj15*cj16);
IkReal x15975=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x15962))+(((-1.0)*x15963))+x15960+x15961);
evalcond[1]=(x15964+x15965+(((-1.0)*x15966))+(((-1.0)*sj15*x15967)));
evalcond[2]=((((-1.0)*r11*x15969))+((r10*x15968))+x15960+(((-1.0)*r11*x15971))+(((-1.0)*x15967*x15972))+(((-1.0)*r12*x15970)));
evalcond[3]=(((r00*x15968))+(((-1.0)*r00*sj16*x15972))+(((-1.0)*x15964))+(((-1.0)*r01*x15969))+(((-1.0)*r01*x15971))+(((-1.0)*r02*x15970)));
evalcond[4]=(((r02*x15973))+((r01*x15974))+(((-1.0)*(1.0)*px))+(((-0.37429)*x15962))+(((0.37429)*x15961))+(((-0.37429)*x15963))+((r00*x15975))+(((-0.29542)*x15960)));
evalcond[5]=((((-1.0)*(1.0)*py))+(((0.37429)*x15965))+((r10*x15975))+((r11*x15974))+(((-0.37429)*sj15*x15967))+(((-0.37429)*x15966))+(((-0.29542)*x15964))+((r12*x15973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15976=(cj14*cj16);
IkReal x15977=((1.0)*r01);
IkReal x15978=(cj14*sj16);
IkReal x15979=(sj14*sj15);
IkReal x15980=(cj15*cj16*sj14);
IkReal x15981=(cj15*sj14*sj16);
if( IKabs(((((-1.0)*x15977*x15978))+((r00*x15976))+(((-1.0)*x15977*x15980))+(((-1.0)*r00*x15981))+(((-1.0)*r02*x15979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x15978))+((r10*x15981))+(((-1.0)*r10*x15976))+((r11*x15980))+((r12*x15979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x15977*x15978))+((r00*x15976))+(((-1.0)*x15977*x15980))+(((-1.0)*r00*x15981))+(((-1.0)*r02*x15979))))+IKsqr((((r11*x15978))+((r10*x15981))+(((-1.0)*r10*x15976))+((r11*x15980))+((r12*x15979))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x15977*x15978))+((r00*x15976))+(((-1.0)*x15977*x15980))+(((-1.0)*r00*x15981))+(((-1.0)*r02*x15979))), (((r11*x15978))+((r10*x15981))+(((-1.0)*r10*x15976))+((r11*x15980))+((r12*x15979))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x15982=IKcos(j10);
IkReal x15983=(cj14*cj16);
IkReal x15984=((1.0)*cj14*sj16);
IkReal x15985=((1.0)*sj14*sj15);
IkReal x15986=((1.0)*cj15*cj16*sj14);
IkReal x15987=((1.0)*cj15*sj14*sj16);
IkReal x15988=((-1.0)*(((1.0)*(IKsin(j10)))));
IkReal x15989=(sj14*sj16);
IkReal x15990=((1.0)*cj14*sj15);
IkReal x15991=((1.0)*cj16*sj14);
IkReal x15992=((1.0)*cj14*cj15*cj16);
IkReal x15993=((1.0)*cj14*cj15*sj16);
evalcond[0]=((((-1.0)*r11*x15986))+x15982+((r10*x15983))+(((-1.0)*r10*x15987))+(((-1.0)*r11*x15984))+(((-1.0)*r12*x15985)));
evalcond[1]=(x15988+(((-1.0)*r01*x15986))+(((-1.0)*r01*x15984))+((r00*x15983))+(((-1.0)*r02*x15985))+(((-1.0)*r00*x15987)));
evalcond[2]=((((-1.0)*r10*x15993))+x15988+(((-1.0)*r11*x15992))+(((-1.0)*r10*x15991))+(((-1.0)*r12*x15990))+((r11*x15989)));
evalcond[3]=((((-1.0)*r01*x15992))+((r01*x15989))+(((-1.0)*r00*x15993))+(((-1.0)*r00*x15991))+(((-1.0)*r02*x15990))+(((-1.0)*x15982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15994=(r12*sj15);
IkReal x15995=(cj16*r10);
IkReal x15996=(r11*sj16);
IkReal x15997=(cj14*cj15);
IkReal x15998=(cj16*r11);
IkReal x15999=(r10*sj16);
IkReal x16000=(cj15*sj14);
if( IKabs((((sj14*x15995))+((cj14*x15994))+((x15997*x15999))+((x15997*x15998))+(((-1.0)*sj14*x15996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj14*x15995))+((sj14*x15994))+((x15999*x16000))+((cj14*x15996))+((x15998*x16000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj14*x15995))+((cj14*x15994))+((x15997*x15999))+((x15997*x15998))+(((-1.0)*sj14*x15996))))+IKsqr(((((-1.0)*cj14*x15995))+((sj14*x15994))+((x15999*x16000))+((cj14*x15996))+((x15998*x16000))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((sj14*x15995))+((cj14*x15994))+((x15997*x15999))+((x15997*x15998))+(((-1.0)*sj14*x15996))), ((((-1.0)*cj14*x15995))+((sj14*x15994))+((x15999*x16000))+((cj14*x15996))+((x15998*x16000))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x16001=IKcos(j10);
IkReal x16002=(cj14*cj16);
IkReal x16003=((1.0)*cj14*sj16);
IkReal x16004=((1.0)*sj14*sj15);
IkReal x16005=((1.0)*cj15*cj16*sj14);
IkReal x16006=((1.0)*cj15*sj14*sj16);
IkReal x16007=IKsin(j10);
IkReal x16008=(sj14*sj16);
IkReal x16009=((1.0)*cj14*sj15);
IkReal x16010=((1.0)*cj16*sj14);
IkReal x16011=((1.0)*cj14*cj15*cj16);
IkReal x16012=((1.0)*cj14*cj15*sj16);
IkReal x16013=((0.37429)*cj15);
IkReal x16014=((0.01)*sj15);
IkReal x16015=((0.01)*cj15*cj16);
IkReal x16016=((0.01)*cj15*sj16);
IkReal x16017=((0.37429)*cj16*sj15);
IkReal x16018=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*r11*x16005))+(((-1.0)*r11*x16003))+x16001+(((-1.0)*r10*x16006))+((r10*x16002))+(((-1.0)*r12*x16004)));
evalcond[1]=((((-1.0)*r10*x16012))+x16007+(((-1.0)*r11*x16011))+(((-1.0)*r10*x16010))+((r11*x16008))+(((-1.0)*r12*x16009)));
evalcond[2]=((((-1.0)*r00*x16012))+((r01*x16008))+x16001+(((-1.0)*r02*x16009))+(((-1.0)*r00*x16010))+(((-1.0)*r01*x16011)));
evalcond[3]=((((-1.0)*r01*x16005))+(((-1.0)*r00*x16006))+(((-1.0)*r02*x16004))+((r00*x16002))+(((-1.0)*r01*x16003))+(((-1.0)*x16007)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r02*x16013))+(((-1.0)*r00*x16018))+(((-1.0)*r01*x16017))+(((0.138)*x16001))+((r02*x16014))+((r01*x16015))+((r00*x16016)));
evalcond[5]=((((0.138)*x16007))+(((-1.0)*(1.0)*py))+((r10*x16016))+((r12*x16013))+((r11*x16015))+(((-1.0)*r11*x16017))+((r12*x16014))+(((-1.0)*r10*x16018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16019=((1.0)*sj15);
IkReal x16020=(cj14*cj15);
CheckValue<IkReal> x16021=IKPowWithIntegerCheck(sj11,-1);
if(!x16021.valid){
continue;
}
CheckValue<IkReal> x16022=IKPowWithIntegerCheck(cj11,-1);
if(!x16022.valid){
continue;
}
if( IKabs(((x16021.value)*(((((-1.0)*r10*sj16*x16020))+(((-1.0)*cj14*r12*x16019))+(((-1.0)*cj16*r11*x16020))+((r11*sj14*sj16))+(((-1.0)*cj16*r10*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16022.value)*(((((-1.0)*r00*sj16*x16019))+(((-1.0)*cj16*r01*x16019))+((cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16021.value)*(((((-1.0)*r10*sj16*x16020))+(((-1.0)*cj14*r12*x16019))+(((-1.0)*cj16*r11*x16020))+((r11*sj14*sj16))+(((-1.0)*cj16*r10*sj14))))))+IKsqr(((x16022.value)*(((((-1.0)*r00*sj16*x16019))+(((-1.0)*cj16*r01*x16019))+((cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x16021.value)*(((((-1.0)*r10*sj16*x16020))+(((-1.0)*cj14*r12*x16019))+(((-1.0)*cj16*r11*x16020))+((r11*sj14*sj16))+(((-1.0)*cj16*r10*sj14))))), ((x16022.value)*(((((-1.0)*r00*sj16*x16019))+(((-1.0)*cj16*r01*x16019))+((cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16023=(cj15*r02);
IkReal x16024=IKcos(j10);
IkReal x16025=((1.0)*x16024);
IkReal x16026=((1.0)*cj16);
IkReal x16027=(r01*sj15);
IkReal x16028=(r00*sj15*sj16);
IkReal x16029=(cj15*r12);
IkReal x16030=IKsin(j10);
IkReal x16031=((1.0)*x16030);
IkReal x16032=(r11*sj15);
IkReal x16033=(r10*sj16);
IkReal x16034=(cj14*cj16);
IkReal x16035=((1.0)*cj14*sj16);
IkReal x16036=((1.0)*sj14*sj15);
IkReal x16037=((1.0)*cj15*cj16*sj14);
IkReal x16038=((1.0)*cj15*sj14*sj16);
IkReal x16039=(sj14*sj16);
IkReal x16040=((1.0)*cj14*sj15);
IkReal x16041=((1.0)*cj16*sj14);
IkReal x16042=((1.0)*cj14*cj15*cj16);
IkReal x16043=((1.0)*cj14*cj15*sj16);
IkReal x16044=((0.01)*sj15);
IkReal x16045=((0.069)*x16024);
IkReal x16046=((0.36442)*cj11);
IkReal x16047=((0.01)*cj15*cj16);
IkReal x16048=((0.01)*cj15*sj16);
IkReal x16049=((0.37429)*cj16);
IkReal x16050=((0.069)*x16030);
evalcond[0]=(x16023+(((-1.0)*cj11*x16025))+(((-1.0)*x16026*x16027))+(((-1.0)*x16028)));
evalcond[1]=((((-1.0)*cj11*x16031))+(((-1.0)*x16026*x16032))+(((-1.0)*sj15*x16033))+x16029);
evalcond[2]=((((-1.0)*r11*x16037))+((r10*x16034))+(((-1.0)*r11*x16035))+x16024+(((-1.0)*r12*x16036))+(((-1.0)*r10*x16038)));
evalcond[3]=(((r00*x16034))+(((-1.0)*r00*x16038))+(((-1.0)*x16031))+(((-1.0)*r01*x16037))+(((-1.0)*r02*x16036))+(((-1.0)*r01*x16035)));
evalcond[4]=((((-1.0)*r12*x16040))+(((-1.0)*sj11*x16031))+(((-1.0)*r11*x16042))+((r11*x16039))+(((-1.0)*r10*x16041))+(((-1.0)*r10*x16043)));
evalcond[5]=((((-1.0)*sj11*x16025))+(((-1.0)*r00*x16043))+((r01*x16039))+(((-1.0)*r01*x16042))+(((-1.0)*r02*x16040))+(((-1.0)*r00*x16041)));
evalcond[6]=((((0.37429)*x16023))+((r00*x16048))+(((-1.0)*(1.0)*px))+(((-1.0)*x16027*x16049))+x16045+(((-0.37429)*x16028))+(((-1.0)*sj11*x16045))+((r01*x16047))+((x16024*x16046))+((r02*x16044)));
evalcond[7]=((((-0.37429)*sj15*x16033))+(((-1.0)*x16032*x16049))+(((-1.0)*(1.0)*py))+((r10*x16048))+x16050+(((-1.0)*sj11*x16050))+((x16030*x16046))+(((0.37429)*x16029))+((r12*x16044))+((r11*x16047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16051=((1.0)*cj16);
IkReal x16052=(r10*sj16);
IkReal x16053=(cj15*sj14);
CheckValue<IkReal> x16054=IKPowWithIntegerCheck(cj11,-1);
if(!x16054.valid){
continue;
}
if( IKabs(((x16054.value)*(((((-1.0)*r11*sj15*x16051))+(((-1.0)*sj15*x16052))+((cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj14*r10*x16051))+((r12*sj14*sj15))+((x16052*x16053))+((cj14*r11*sj16))+((cj16*r11*x16053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16054.value)*(((((-1.0)*r11*sj15*x16051))+(((-1.0)*sj15*x16052))+((cj15*r12))))))+IKsqr(((((-1.0)*cj14*r10*x16051))+((r12*sj14*sj15))+((x16052*x16053))+((cj14*r11*sj16))+((cj16*r11*x16053))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x16054.value)*(((((-1.0)*r11*sj15*x16051))+(((-1.0)*sj15*x16052))+((cj15*r12))))), ((((-1.0)*cj14*r10*x16051))+((r12*sj14*sj15))+((x16052*x16053))+((cj14*r11*sj16))+((cj16*r11*x16053))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16055=(cj15*r02);
IkReal x16056=IKcos(j10);
IkReal x16057=((1.0)*x16056);
IkReal x16058=((1.0)*cj16);
IkReal x16059=(r01*sj15);
IkReal x16060=(r00*sj15*sj16);
IkReal x16061=(cj15*r12);
IkReal x16062=IKsin(j10);
IkReal x16063=((1.0)*x16062);
IkReal x16064=(r11*sj15);
IkReal x16065=(r10*sj16);
IkReal x16066=(cj14*cj16);
IkReal x16067=((1.0)*cj14*sj16);
IkReal x16068=((1.0)*sj14*sj15);
IkReal x16069=((1.0)*cj15*cj16*sj14);
IkReal x16070=((1.0)*cj15*sj14*sj16);
IkReal x16071=(sj14*sj16);
IkReal x16072=((1.0)*cj14*sj15);
IkReal x16073=((1.0)*cj16*sj14);
IkReal x16074=((1.0)*cj14*cj15*cj16);
IkReal x16075=((1.0)*cj14*cj15*sj16);
IkReal x16076=((0.01)*sj15);
IkReal x16077=((0.069)*x16056);
IkReal x16078=((0.36442)*cj11);
IkReal x16079=((0.01)*cj15*cj16);
IkReal x16080=((0.01)*cj15*sj16);
IkReal x16081=((0.37429)*cj16);
IkReal x16082=((0.069)*x16062);
evalcond[0]=((((-1.0)*x16060))+x16055+(((-1.0)*x16058*x16059))+(((-1.0)*cj11*x16057)));
evalcond[1]=(x16061+(((-1.0)*cj11*x16063))+(((-1.0)*x16058*x16064))+(((-1.0)*sj15*x16065)));
evalcond[2]=((((-1.0)*r11*x16069))+(((-1.0)*r11*x16067))+x16056+((r10*x16066))+(((-1.0)*r10*x16070))+(((-1.0)*r12*x16068)));
evalcond[3]=(((r00*x16066))+(((-1.0)*r00*x16070))+(((-1.0)*r01*x16067))+(((-1.0)*r01*x16069))+(((-1.0)*r02*x16068))+(((-1.0)*x16063)));
evalcond[4]=((((-1.0)*r12*x16072))+((r11*x16071))+(((-1.0)*r10*x16073))+(((-1.0)*r10*x16075))+(((-1.0)*r11*x16074))+(((-1.0)*sj11*x16063)));
evalcond[5]=((((-1.0)*r00*x16073))+(((-1.0)*r00*x16075))+(((-1.0)*r02*x16072))+(((-1.0)*sj11*x16057))+(((-1.0)*r01*x16074))+((r01*x16071)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*x16059*x16081))+(((-0.37429)*x16060))+(((-1.0)*sj11*x16077))+(((0.37429)*x16055))+((x16056*x16078))+x16077+((r00*x16080))+((r02*x16076))+((r01*x16079)));
evalcond[7]=(((x16062*x16078))+(((-1.0)*(1.0)*py))+(((-1.0)*sj11*x16082))+((r10*x16080))+x16082+(((-0.37429)*sj15*x16065))+((r12*x16076))+((r11*x16079))+(((-1.0)*x16064*x16081))+(((0.37429)*x16061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16083=((1.0)*cj16*sj15);
IkReal x16084=((1.0)*sj15*sj16);
CheckValue<IkReal> x16085=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x16085.valid){
continue;
}
CheckValue<IkReal> x16086 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x16084))+(((-1.0)*r11*x16083))+((cj15*r12)))),IkReal(((((-1.0)*r01*x16083))+((cj15*r02))+(((-1.0)*r00*x16084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16086.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16085.value)))+(x16086.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16087=(cj15*r02);
IkReal x16088=IKcos(j10);
IkReal x16089=((1.0)*x16088);
IkReal x16090=((1.0)*cj16);
IkReal x16091=(r01*sj15);
IkReal x16092=(r00*sj15*sj16);
IkReal x16093=(cj15*r12);
IkReal x16094=IKsin(j10);
IkReal x16095=((1.0)*x16094);
IkReal x16096=(r11*sj15);
IkReal x16097=(r10*sj16);
IkReal x16098=(cj14*cj16);
IkReal x16099=((1.0)*cj14*sj16);
IkReal x16100=((1.0)*sj14*sj15);
IkReal x16101=((1.0)*cj15*cj16*sj14);
IkReal x16102=((1.0)*cj15*sj14*sj16);
IkReal x16103=(sj14*sj16);
IkReal x16104=((1.0)*cj14*sj15);
IkReal x16105=((1.0)*cj16*sj14);
IkReal x16106=((1.0)*cj14*cj15*cj16);
IkReal x16107=((1.0)*cj14*cj15*sj16);
IkReal x16108=((0.01)*sj15);
IkReal x16109=((0.069)*x16088);
IkReal x16110=((0.36442)*cj11);
IkReal x16111=((0.01)*cj15*cj16);
IkReal x16112=((0.01)*cj15*sj16);
IkReal x16113=((0.37429)*cj16);
IkReal x16114=((0.069)*x16094);
evalcond[0]=((((-1.0)*cj11*x16089))+x16087+(((-1.0)*x16092))+(((-1.0)*x16090*x16091)));
evalcond[1]=((((-1.0)*x16090*x16096))+(((-1.0)*cj11*x16095))+(((-1.0)*sj15*x16097))+x16093);
evalcond[2]=(((r10*x16098))+(((-1.0)*r11*x16101))+x16088+(((-1.0)*r11*x16099))+(((-1.0)*r10*x16102))+(((-1.0)*r12*x16100)));
evalcond[3]=(((r00*x16098))+(((-1.0)*r00*x16102))+(((-1.0)*r02*x16100))+(((-1.0)*r01*x16101))+(((-1.0)*x16095))+(((-1.0)*r01*x16099)));
evalcond[4]=((((-1.0)*r10*x16107))+(((-1.0)*r12*x16104))+(((-1.0)*sj11*x16095))+(((-1.0)*r11*x16106))+((r11*x16103))+(((-1.0)*r10*x16105)));
evalcond[5]=((((-1.0)*r01*x16106))+(((-1.0)*sj11*x16089))+(((-1.0)*r00*x16105))+(((-1.0)*r02*x16104))+(((-1.0)*r00*x16107))+((r01*x16103)));
evalcond[6]=(((r01*x16111))+(((-1.0)*(1.0)*px))+(((-1.0)*sj11*x16109))+((r00*x16112))+((x16088*x16110))+(((0.37429)*x16087))+((r02*x16108))+(((-0.37429)*x16092))+x16109+(((-1.0)*x16091*x16113)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-1.0)*x16096*x16113))+((r11*x16111))+((r10*x16112))+((x16094*x16110))+(((0.37429)*x16093))+(((-1.0)*sj11*x16114))+(((-0.37429)*sj15*x16097))+((r12*x16108))+x16114);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x16115=((1.0)*cj16*sj15);
IkReal x16116=((1.0)*sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs(((((-1.0)*r10*x16116))+((cj15*r12))+(((-1.0)*r11*x16115)))))+(IKabs(((((-1.0)*r00*x16116))+(((-1.0)*r01*x16115))+((cj15*r02))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j10eval[0]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16117=(cj14*cj15);
IkReal x16118=((1.0)*sj15);
CheckValue<IkReal> x16119=IKPowWithIntegerCheck(sj11,-1);
if(!x16119.valid){
continue;
}
CheckValue<IkReal> x16120=IKPowWithIntegerCheck(cj11,-1);
if(!x16120.valid){
continue;
}
if( IKabs(((x16119.value)*((((cj14*r12*sj15))+((cj16*r10*sj14))+((cj16*r11*x16117))+((r10*sj16*x16117))+(((-1.0)*(1.0)*r11*sj14*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16120.value)*(((((-1.0)*r00*sj16*x16118))+(((-1.0)*cj16*r01*x16118))+((cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16119.value)*((((cj14*r12*sj15))+((cj16*r10*sj14))+((cj16*r11*x16117))+((r10*sj16*x16117))+(((-1.0)*(1.0)*r11*sj14*sj16))))))+IKsqr(((x16120.value)*(((((-1.0)*r00*sj16*x16118))+(((-1.0)*cj16*r01*x16118))+((cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x16119.value)*((((cj14*r12*sj15))+((cj16*r10*sj14))+((cj16*r11*x16117))+((r10*sj16*x16117))+(((-1.0)*(1.0)*r11*sj14*sj16))))), ((x16120.value)*(((((-1.0)*r00*sj16*x16118))+(((-1.0)*cj16*r01*x16118))+((cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16121=(cj15*r02);
IkReal x16122=IKcos(j10);
IkReal x16123=((1.0)*x16122);
IkReal x16124=((1.0)*cj16);
IkReal x16125=(r01*sj15);
IkReal x16126=(r00*sj15*sj16);
IkReal x16127=(cj15*r12);
IkReal x16128=IKsin(j10);
IkReal x16129=(cj11*x16128);
IkReal x16130=(r11*sj15);
IkReal x16131=(r10*sj16);
IkReal x16132=(cj14*cj16);
IkReal x16133=((1.0)*cj14*sj16);
IkReal x16134=((1.0)*sj14*sj15);
IkReal x16135=((1.0)*cj15*cj16*sj14);
IkReal x16136=((1.0)*cj15*sj14*sj16);
IkReal x16137=(sj11*x16128);
IkReal x16138=(sj14*sj16);
IkReal x16139=((1.0)*cj14*sj15);
IkReal x16140=((1.0)*cj16*sj14);
IkReal x16141=((1.0)*cj14*cj15*cj16);
IkReal x16142=((1.0)*cj14*cj15*sj16);
IkReal x16143=(sj11*x16122);
IkReal x16144=((0.01)*sj15);
IkReal x16145=((0.01)*cj15*cj16);
IkReal x16146=((0.01)*cj15*sj16);
IkReal x16147=((0.37429)*cj16);
evalcond[0]=(x16121+(((-1.0)*x16124*x16125))+(((-1.0)*cj11*x16123))+(((-1.0)*x16126)));
evalcond[1]=(x16127+(((-1.0)*sj15*x16131))+(((-1.0)*x16129))+(((-1.0)*x16124*x16130)));
evalcond[2]=(x16128+(((-1.0)*r01*x16135))+(((-1.0)*r00*x16136))+((r00*x16132))+(((-1.0)*r02*x16134))+(((-1.0)*r01*x16133)));
evalcond[3]=((((-1.0)*r11*x16135))+(((-1.0)*x16123))+(((-1.0)*r11*x16133))+((r10*x16132))+(((-1.0)*r10*x16136))+(((-1.0)*r12*x16134)));
evalcond[4]=((((-1.0)*r10*x16142))+(((-1.0)*r12*x16139))+x16137+((r11*x16138))+(((-1.0)*r11*x16141))+(((-1.0)*r10*x16140)));
evalcond[5]=((((-1.0)*r01*x16141))+(((-1.0)*r02*x16139))+(((-1.0)*r00*x16140))+(((-1.0)*r00*x16142))+((r01*x16138))+x16143);
evalcond[6]=((((-1.0)*(1.0)*px))+((r00*x16146))+(((0.37429)*x16121))+((r01*x16145))+(((-0.37429)*x16126))+(((0.36442)*cj11*x16122))+(((0.069)*x16122))+(((0.069)*x16143))+(((-1.0)*x16125*x16147))+((r02*x16144)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r12*x16144))+(((0.36442)*x16129))+((r11*x16145))+(((0.069)*x16128))+(((-1.0)*x16130*x16147))+(((0.069)*x16137))+(((-0.37429)*sj15*x16131))+(((0.37429)*x16127))+((r10*x16146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16148=((1.0)*cj16);
IkReal x16149=(cj15*sj14);
IkReal x16150=(r00*sj16);
CheckValue<IkReal> x16151=IKPowWithIntegerCheck(cj11,-1);
if(!x16151.valid){
continue;
}
if( IKabs(((((-1.0)*cj14*r00*x16148))+((cj16*r01*x16149))+((r02*sj14*sj15))+((x16149*x16150))+((cj14*r01*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16151.value)*(((((-1.0)*r01*sj15*x16148))+((cj15*r02))+(((-1.0)*sj15*x16150)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj14*r00*x16148))+((cj16*r01*x16149))+((r02*sj14*sj15))+((x16149*x16150))+((cj14*r01*sj16))))+IKsqr(((x16151.value)*(((((-1.0)*r01*sj15*x16148))+((cj15*r02))+(((-1.0)*sj15*x16150))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj14*r00*x16148))+((cj16*r01*x16149))+((r02*sj14*sj15))+((x16149*x16150))+((cj14*r01*sj16))), ((x16151.value)*(((((-1.0)*r01*sj15*x16148))+((cj15*r02))+(((-1.0)*sj15*x16150))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16152=(cj15*r02);
IkReal x16153=IKcos(j10);
IkReal x16154=((1.0)*x16153);
IkReal x16155=((1.0)*cj16);
IkReal x16156=(r01*sj15);
IkReal x16157=(r00*sj15*sj16);
IkReal x16158=(cj15*r12);
IkReal x16159=IKsin(j10);
IkReal x16160=(cj11*x16159);
IkReal x16161=(r11*sj15);
IkReal x16162=(r10*sj16);
IkReal x16163=(cj14*cj16);
IkReal x16164=((1.0)*cj14*sj16);
IkReal x16165=((1.0)*sj14*sj15);
IkReal x16166=((1.0)*cj15*cj16*sj14);
IkReal x16167=((1.0)*cj15*sj14*sj16);
IkReal x16168=(sj11*x16159);
IkReal x16169=(sj14*sj16);
IkReal x16170=((1.0)*cj14*sj15);
IkReal x16171=((1.0)*cj16*sj14);
IkReal x16172=((1.0)*cj14*cj15*cj16);
IkReal x16173=((1.0)*cj14*cj15*sj16);
IkReal x16174=(sj11*x16153);
IkReal x16175=((0.01)*sj15);
IkReal x16176=((0.01)*cj15*cj16);
IkReal x16177=((0.01)*cj15*sj16);
IkReal x16178=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x16157))+(((-1.0)*cj11*x16154))+(((-1.0)*x16155*x16156))+x16152);
evalcond[1]=((((-1.0)*x16160))+(((-1.0)*x16155*x16161))+(((-1.0)*sj15*x16162))+x16158);
evalcond[2]=((((-1.0)*r00*x16167))+(((-1.0)*r01*x16164))+((r00*x16163))+(((-1.0)*r01*x16166))+(((-1.0)*r02*x16165))+x16159);
evalcond[3]=((((-1.0)*r11*x16164))+(((-1.0)*r10*x16167))+(((-1.0)*r12*x16165))+((r10*x16163))+(((-1.0)*x16154))+(((-1.0)*r11*x16166)));
evalcond[4]=(((r11*x16169))+(((-1.0)*r11*x16172))+(((-1.0)*r10*x16171))+(((-1.0)*r10*x16173))+x16168+(((-1.0)*r12*x16170)));
evalcond[5]=((((-1.0)*r00*x16173))+(((-1.0)*r00*x16171))+((r01*x16169))+x16174+(((-1.0)*r01*x16172))+(((-1.0)*r02*x16170)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*x16156*x16178))+(((0.069)*x16174))+((r01*x16176))+((r02*x16175))+(((0.069)*x16153))+(((-0.37429)*x16157))+(((0.36442)*cj11*x16153))+((r00*x16177))+(((0.37429)*x16152)));
evalcond[7]=((((-0.37429)*sj15*x16162))+(((-1.0)*x16161*x16178))+((r10*x16177))+(((-1.0)*(1.0)*py))+(((0.37429)*x16158))+(((0.069)*x16159))+((r12*x16175))+(((0.069)*x16168))+((r11*x16176))+(((0.36442)*x16160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16179=((1.0)*cj16*sj15);
IkReal x16180=((1.0)*sj15*sj16);
CheckValue<IkReal> x16181=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x16181.valid){
continue;
}
CheckValue<IkReal> x16182 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x16180))+((cj15*r12))+(((-1.0)*r11*x16179)))),IkReal(((((-1.0)*r01*x16179))+(((-1.0)*r00*x16180))+((cj15*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16182.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16181.value)))+(x16182.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16183=(cj15*r02);
IkReal x16184=IKcos(j10);
IkReal x16185=((1.0)*x16184);
IkReal x16186=((1.0)*cj16);
IkReal x16187=(r01*sj15);
IkReal x16188=(r00*sj15*sj16);
IkReal x16189=(cj15*r12);
IkReal x16190=IKsin(j10);
IkReal x16191=(cj11*x16190);
IkReal x16192=(r11*sj15);
IkReal x16193=(r10*sj16);
IkReal x16194=(cj14*cj16);
IkReal x16195=((1.0)*cj14*sj16);
IkReal x16196=((1.0)*sj14*sj15);
IkReal x16197=((1.0)*cj15*cj16*sj14);
IkReal x16198=((1.0)*cj15*sj14*sj16);
IkReal x16199=(sj11*x16190);
IkReal x16200=(sj14*sj16);
IkReal x16201=((1.0)*cj14*sj15);
IkReal x16202=((1.0)*cj16*sj14);
IkReal x16203=((1.0)*cj14*cj15*cj16);
IkReal x16204=((1.0)*cj14*cj15*sj16);
IkReal x16205=(sj11*x16184);
IkReal x16206=((0.01)*sj15);
IkReal x16207=((0.01)*cj15*cj16);
IkReal x16208=((0.01)*cj15*sj16);
IkReal x16209=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x16186*x16187))+(((-1.0)*x16188))+(((-1.0)*cj11*x16185))+x16183);
evalcond[1]=((((-1.0)*sj15*x16193))+x16189+(((-1.0)*x16191))+(((-1.0)*x16186*x16192)));
evalcond[2]=((((-1.0)*r01*x16195))+(((-1.0)*r00*x16198))+x16190+((r00*x16194))+(((-1.0)*r01*x16197))+(((-1.0)*r02*x16196)));
evalcond[3]=(((r10*x16194))+(((-1.0)*r10*x16198))+(((-1.0)*x16185))+(((-1.0)*r11*x16195))+(((-1.0)*r11*x16197))+(((-1.0)*r12*x16196)));
evalcond[4]=((((-1.0)*r10*x16202))+((r11*x16200))+(((-1.0)*r11*x16203))+(((-1.0)*r12*x16201))+x16199+(((-1.0)*r10*x16204)));
evalcond[5]=((((-1.0)*r02*x16201))+((r01*x16200))+(((-1.0)*r00*x16204))+(((-1.0)*r00*x16202))+x16205+(((-1.0)*r01*x16203)));
evalcond[6]=((((-1.0)*x16187*x16209))+(((-1.0)*(1.0)*px))+((r00*x16208))+(((-0.37429)*x16188))+(((0.069)*x16205))+((r02*x16206))+((r01*x16207))+(((0.069)*x16184))+(((0.37429)*x16183))+(((0.36442)*cj11*x16184)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r11*x16207))+((r10*x16208))+(((0.069)*x16190))+(((-1.0)*x16192*x16209))+(((0.36442)*x16191))+(((0.069)*x16199))+(((-0.37429)*sj15*x16193))+(((0.37429)*x16189))+((r12*x16206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x16210=((1.0)*cj16*sj15);
IkReal x16211=((1.0)*sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs((((cj15*r12))+(((-1.0)*r10*x16211))+(((-1.0)*r11*x16210)))))+(IKabs(((((-1.0)*r01*x16210))+((cj15*r02))+(((-1.0)*r00*x16211))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j10eval[0]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16212=((1.0)*cj16);
IkReal x16213=(cj15*sj14);
CheckValue<IkReal> x16214=IKPowWithIntegerCheck(sj11,-1);
if(!x16214.valid){
continue;
}
CheckValue<IkReal> x16215=IKPowWithIntegerCheck(cj11,-1);
if(!x16215.valid){
continue;
}
if( IKabs(((x16214.value)*((((r10*sj16*x16213))+(((-1.0)*cj14*r10*x16212))+((r12*sj14*sj15))+((cj16*r11*x16213))+((cj14*r11*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16215.value)*(((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x16212))+((cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16214.value)*((((r10*sj16*x16213))+(((-1.0)*cj14*r10*x16212))+((r12*sj14*sj15))+((cj16*r11*x16213))+((cj14*r11*sj16))))))+IKsqr(((x16215.value)*(((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x16212))+((cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x16214.value)*((((r10*sj16*x16213))+(((-1.0)*cj14*r10*x16212))+((r12*sj14*sj15))+((cj16*r11*x16213))+((cj14*r11*sj16))))), ((x16215.value)*(((((-1.0)*(1.0)*r00*sj15*sj16))+(((-1.0)*r01*sj15*x16212))+((cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16216=(cj15*r02);
IkReal x16217=IKcos(j10);
IkReal x16218=((1.0)*cj16);
IkReal x16219=(r01*sj15);
IkReal x16220=(r00*sj15*sj16);
IkReal x16221=(cj15*r12);
IkReal x16222=IKsin(j10);
IkReal x16223=((1.0)*x16222);
IkReal x16224=(r11*sj15);
IkReal x16225=(r10*sj16);
IkReal x16226=(sj14*sj16);
IkReal x16227=((1.0)*cj14*sj15);
IkReal x16228=((1.0)*cj16*sj14);
IkReal x16229=((1.0)*cj14*cj15*cj16);
IkReal x16230=((1.0)*cj14*cj15*sj16);
IkReal x16231=(cj14*cj16);
IkReal x16232=((1.0)*cj14*sj16);
IkReal x16233=((1.0)*sj14*sj15);
IkReal x16234=((1.0)*cj15*cj16*sj14);
IkReal x16235=((1.0)*cj15*sj14*sj16);
IkReal x16236=((0.01)*sj15);
IkReal x16237=((0.069)*x16222);
IkReal x16238=((0.069)*x16217);
IkReal x16239=((0.36442)*cj11);
IkReal x16240=((0.01)*cj15*cj16);
IkReal x16241=((0.01)*cj15*sj16);
IkReal x16242=((0.37429)*cj16);
evalcond[0]=(x16216+(((-1.0)*x16220))+(((-1.0)*x16218*x16219))+(((-1.0)*cj11*x16217)));
evalcond[1]=(x16221+(((-1.0)*sj15*x16225))+(((-1.0)*cj11*x16223))+(((-1.0)*x16218*x16224)));
evalcond[2]=(x16217+((r11*x16226))+(((-1.0)*r11*x16229))+(((-1.0)*r10*x16230))+(((-1.0)*r12*x16227))+(((-1.0)*r10*x16228)));
evalcond[3]=((((-1.0)*r10*x16235))+((r10*x16231))+(((-1.0)*r12*x16233))+(((-1.0)*r11*x16232))+((sj11*x16222))+(((-1.0)*r11*x16234)));
evalcond[4]=((((-1.0)*r02*x16233))+((r00*x16231))+(((-1.0)*r00*x16235))+(((-1.0)*r01*x16234))+(((-1.0)*r01*x16232))+((sj11*x16217)));
evalcond[5]=((((-1.0)*x16223))+((r01*x16226))+(((-1.0)*r00*x16228))+(((-1.0)*r02*x16227))+(((-1.0)*r01*x16229))+(((-1.0)*r00*x16230)));
evalcond[6]=((((-1.0)*x16219*x16242))+(((-1.0)*(1.0)*px))+(((0.37429)*x16216))+x16238+((r01*x16240))+(((-0.37429)*x16220))+((x16217*x16239))+((r00*x16241))+(((-1.0)*x16237))+((r02*x16236)));
evalcond[7]=((((-1.0)*x16224*x16242))+(((-1.0)*(1.0)*py))+((r10*x16241))+x16237+x16238+((x16222*x16239))+((r12*x16236))+(((0.37429)*x16221))+((r11*x16240))+(((-0.37429)*sj15*x16225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16243=((1.0)*sj15);
IkReal x16244=(cj16*r11);
IkReal x16245=(r10*sj16);
IkReal x16246=(cj14*cj15);
CheckValue<IkReal> x16247=IKPowWithIntegerCheck(cj11,-1);
if(!x16247.valid){
continue;
}
if( IKabs(((x16247.value)*(((((-1.0)*x16243*x16245))+(((-1.0)*x16243*x16244))+((cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12*sj15))+((x16244*x16246))+((cj16*r10*sj14))+((x16245*x16246))+(((-1.0)*(1.0)*r11*sj14*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16247.value)*(((((-1.0)*x16243*x16245))+(((-1.0)*x16243*x16244))+((cj15*r12))))))+IKsqr((((cj14*r12*sj15))+((x16244*x16246))+((cj16*r10*sj14))+((x16245*x16246))+(((-1.0)*(1.0)*r11*sj14*sj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x16247.value)*(((((-1.0)*x16243*x16245))+(((-1.0)*x16243*x16244))+((cj15*r12))))), (((cj14*r12*sj15))+((x16244*x16246))+((cj16*r10*sj14))+((x16245*x16246))+(((-1.0)*(1.0)*r11*sj14*sj16))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16248=(cj15*r02);
IkReal x16249=IKcos(j10);
IkReal x16250=((1.0)*cj16);
IkReal x16251=(r01*sj15);
IkReal x16252=(r00*sj15*sj16);
IkReal x16253=(cj15*r12);
IkReal x16254=IKsin(j10);
IkReal x16255=((1.0)*x16254);
IkReal x16256=(r11*sj15);
IkReal x16257=(r10*sj16);
IkReal x16258=(sj14*sj16);
IkReal x16259=((1.0)*cj14*sj15);
IkReal x16260=((1.0)*cj16*sj14);
IkReal x16261=((1.0)*cj14*cj15*cj16);
IkReal x16262=((1.0)*cj14*cj15*sj16);
IkReal x16263=(cj14*cj16);
IkReal x16264=((1.0)*cj14*sj16);
IkReal x16265=((1.0)*sj14*sj15);
IkReal x16266=((1.0)*cj15*cj16*sj14);
IkReal x16267=((1.0)*cj15*sj14*sj16);
IkReal x16268=((0.01)*sj15);
IkReal x16269=((0.069)*x16254);
IkReal x16270=((0.069)*x16249);
IkReal x16271=((0.36442)*cj11);
IkReal x16272=((0.01)*cj15*cj16);
IkReal x16273=((0.01)*cj15*sj16);
IkReal x16274=((0.37429)*cj16);
evalcond[0]=((((-1.0)*cj11*x16249))+(((-1.0)*x16252))+(((-1.0)*x16250*x16251))+x16248);
evalcond[1]=(x16253+(((-1.0)*x16250*x16256))+(((-1.0)*sj15*x16257))+(((-1.0)*cj11*x16255)));
evalcond[2]=((((-1.0)*r11*x16261))+(((-1.0)*r12*x16259))+(((-1.0)*r10*x16260))+(((-1.0)*r10*x16262))+x16249+((r11*x16258)));
evalcond[3]=(((sj11*x16254))+(((-1.0)*r11*x16264))+(((-1.0)*r11*x16266))+(((-1.0)*r10*x16267))+(((-1.0)*r12*x16265))+((r10*x16263)));
evalcond[4]=((((-1.0)*r00*x16267))+(((-1.0)*r02*x16265))+((r00*x16263))+((sj11*x16249))+(((-1.0)*r01*x16266))+(((-1.0)*r01*x16264)));
evalcond[5]=((((-1.0)*r01*x16261))+(((-1.0)*r02*x16259))+(((-1.0)*r00*x16260))+((r01*x16258))+(((-1.0)*r00*x16262))+(((-1.0)*x16255)));
evalcond[6]=((((-1.0)*x16269))+((r01*x16272))+(((-1.0)*(1.0)*px))+(((-0.37429)*x16252))+x16270+(((0.37429)*x16248))+((r00*x16273))+((r02*x16268))+(((-1.0)*x16251*x16274))+((x16249*x16271)));
evalcond[7]=((((-1.0)*(1.0)*py))+x16270+((x16254*x16271))+(((0.37429)*x16253))+x16269+((r10*x16273))+(((-0.37429)*sj15*x16257))+((r11*x16272))+((r12*x16268))+(((-1.0)*x16256*x16274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16275=((1.0)*cj16*sj15);
IkReal x16276=((1.0)*sj15*sj16);
CheckValue<IkReal> x16277=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x16277.valid){
continue;
}
CheckValue<IkReal> x16278 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x16275))+((cj15*r12))+(((-1.0)*r10*x16276)))),IkReal(((((-1.0)*r01*x16275))+(((-1.0)*r00*x16276))+((cj15*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16278.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16277.value)))+(x16278.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16279=(cj15*r02);
IkReal x16280=IKcos(j10);
IkReal x16281=((1.0)*cj16);
IkReal x16282=(r01*sj15);
IkReal x16283=(r00*sj15*sj16);
IkReal x16284=(cj15*r12);
IkReal x16285=IKsin(j10);
IkReal x16286=((1.0)*x16285);
IkReal x16287=(r11*sj15);
IkReal x16288=(r10*sj16);
IkReal x16289=(sj14*sj16);
IkReal x16290=((1.0)*cj14*sj15);
IkReal x16291=((1.0)*cj16*sj14);
IkReal x16292=((1.0)*cj14*cj15*cj16);
IkReal x16293=((1.0)*cj14*cj15*sj16);
IkReal x16294=(cj14*cj16);
IkReal x16295=((1.0)*cj14*sj16);
IkReal x16296=((1.0)*sj14*sj15);
IkReal x16297=((1.0)*cj15*cj16*sj14);
IkReal x16298=((1.0)*cj15*sj14*sj16);
IkReal x16299=((0.01)*sj15);
IkReal x16300=((0.069)*x16285);
IkReal x16301=((0.069)*x16280);
IkReal x16302=((0.36442)*cj11);
IkReal x16303=((0.01)*cj15*cj16);
IkReal x16304=((0.01)*cj15*sj16);
IkReal x16305=((0.37429)*cj16);
evalcond[0]=((((-1.0)*cj11*x16280))+x16279+(((-1.0)*x16283))+(((-1.0)*x16281*x16282)));
evalcond[1]=((((-1.0)*x16281*x16287))+x16284+(((-1.0)*cj11*x16286))+(((-1.0)*sj15*x16288)));
evalcond[2]=(((r11*x16289))+x16280+(((-1.0)*r10*x16291))+(((-1.0)*r10*x16293))+(((-1.0)*r12*x16290))+(((-1.0)*r11*x16292)));
evalcond[3]=((((-1.0)*r10*x16298))+((r10*x16294))+(((-1.0)*r11*x16295))+(((-1.0)*r12*x16296))+(((-1.0)*r11*x16297))+((sj11*x16285)));
evalcond[4]=((((-1.0)*r02*x16296))+(((-1.0)*r01*x16297))+(((-1.0)*r01*x16295))+(((-1.0)*r00*x16298))+((sj11*x16280))+((r00*x16294)));
evalcond[5]=((((-1.0)*r01*x16292))+(((-1.0)*r00*x16291))+(((-1.0)*x16286))+(((-1.0)*r02*x16290))+(((-1.0)*r00*x16293))+((r01*x16289)));
evalcond[6]=((((-1.0)*(1.0)*px))+((x16280*x16302))+((r01*x16303))+((r00*x16304))+((r02*x16299))+(((-0.37429)*x16283))+(((0.37429)*x16279))+(((-1.0)*x16300))+x16301+(((-1.0)*x16282*x16305)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-0.37429)*sj15*x16288))+(((-1.0)*x16287*x16305))+((r11*x16303))+((x16285*x16302))+((r12*x16299))+x16301+x16300+(((0.37429)*x16284))+((r10*x16304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x16306=((1.0)*cj16*sj15);
IkReal x16307=((1.0)*sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs(((((-1.0)*r00*x16307))+(((-1.0)*r01*x16306))+((cj15*r02)))))+(IKabs(((((-1.0)*r11*x16306))+((cj15*r12))+(((-1.0)*r10*x16307))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=0;
cj13=1.0;
j13=0;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j10eval[0]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16308=((1.0)*sj16);
IkReal x16309=((1.0)*sj15);
IkReal x16310=(cj15*sj14);
CheckValue<IkReal> x16311=IKPowWithIntegerCheck(sj11,-1);
if(!x16311.valid){
continue;
}
CheckValue<IkReal> x16312=IKPowWithIntegerCheck(cj11,-1);
if(!x16312.valid){
continue;
}
if( IKabs(((x16311.value)*((((cj14*cj16*r10))+(((-1.0)*r10*sj16*x16310))+(((-1.0)*r12*sj14*x16309))+(((-1.0)*cj14*r11*x16308))+(((-1.0)*cj16*r11*x16310)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16312.value)*(((((-1.0)*r00*sj15*x16308))+(((-1.0)*cj16*r01*x16309))+((cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16311.value)*((((cj14*cj16*r10))+(((-1.0)*r10*sj16*x16310))+(((-1.0)*r12*sj14*x16309))+(((-1.0)*cj14*r11*x16308))+(((-1.0)*cj16*r11*x16310))))))+IKsqr(((x16312.value)*(((((-1.0)*r00*sj15*x16308))+(((-1.0)*cj16*r01*x16309))+((cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x16311.value)*((((cj14*cj16*r10))+(((-1.0)*r10*sj16*x16310))+(((-1.0)*r12*sj14*x16309))+(((-1.0)*cj14*r11*x16308))+(((-1.0)*cj16*r11*x16310))))), ((x16312.value)*(((((-1.0)*r00*sj15*x16308))+(((-1.0)*cj16*r01*x16309))+((cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16313=(cj15*r02);
IkReal x16314=IKcos(j10);
IkReal x16315=((1.0)*x16314);
IkReal x16316=((1.0)*cj16);
IkReal x16317=(r01*sj15);
IkReal x16318=(r00*sj15*sj16);
IkReal x16319=(cj15*r12);
IkReal x16320=IKsin(j10);
IkReal x16321=(cj11*x16320);
IkReal x16322=(r11*sj15);
IkReal x16323=(r10*sj16);
IkReal x16324=(sj14*sj16);
IkReal x16325=((1.0)*cj14*sj15);
IkReal x16326=((1.0)*cj16*sj14);
IkReal x16327=((1.0)*cj14*cj15*cj16);
IkReal x16328=((1.0)*cj14*cj15*sj16);
IkReal x16329=(cj14*cj16);
IkReal x16330=((1.0)*cj14*sj16);
IkReal x16331=((1.0)*sj14*sj15);
IkReal x16332=((1.0)*cj15*cj16*sj14);
IkReal x16333=((1.0)*cj15*sj14*sj16);
IkReal x16334=((0.01)*sj15);
IkReal x16335=((0.069)*x16320);
IkReal x16336=((0.069)*x16314);
IkReal x16337=((0.01)*cj15*cj16);
IkReal x16338=((0.01)*cj15*sj16);
IkReal x16339=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x16318))+(((-1.0)*cj11*x16315))+x16313+(((-1.0)*x16316*x16317)));
evalcond[1]=((((-1.0)*sj15*x16323))+(((-1.0)*x16316*x16322))+(((-1.0)*x16321))+x16319);
evalcond[2]=(((r01*x16324))+(((-1.0)*r00*x16326))+x16320+(((-1.0)*r01*x16327))+(((-1.0)*r00*x16328))+(((-1.0)*r02*x16325)));
evalcond[3]=((((-1.0)*x16315))+(((-1.0)*r10*x16328))+(((-1.0)*r12*x16325))+(((-1.0)*r10*x16326))+((r11*x16324))+(((-1.0)*r11*x16327)));
evalcond[4]=((((-1.0)*sj11*x16320))+(((-1.0)*r11*x16332))+(((-1.0)*r12*x16331))+(((-1.0)*r11*x16330))+(((-1.0)*r10*x16333))+((r10*x16329)));
evalcond[5]=((((-1.0)*r01*x16330))+((r00*x16329))+(((-1.0)*r02*x16331))+(((-1.0)*r01*x16332))+(((-1.0)*r00*x16333))+(((-1.0)*sj11*x16315)));
evalcond[6]=((((-1.0)*(1.0)*px))+x16335+x16336+(((0.36442)*cj11*x16314))+(((-0.37429)*x16318))+(((-1.0)*x16317*x16339))+(((0.37429)*x16313))+((r02*x16334))+((r01*x16337))+((r00*x16338)));
evalcond[7]=(x16335+(((-1.0)*(1.0)*py))+(((0.37429)*x16319))+(((-0.37429)*sj15*x16323))+((r12*x16334))+(((0.36442)*x16321))+(((-1.0)*x16322*x16339))+((r11*x16337))+(((-1.0)*x16336))+((r10*x16338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16340=(cj14*cj15);
IkReal x16341=(cj16*r01);
IkReal x16342=(r00*sj16);
IkReal x16343=((1.0)*sj15);
CheckValue<IkReal> x16344=IKPowWithIntegerCheck(cj11,-1);
if(!x16344.valid){
continue;
}
if( IKabs((((x16340*x16341))+((x16340*x16342))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((cj16*r00*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16344.value)*(((((-1.0)*x16341*x16343))+(((-1.0)*x16342*x16343))+((cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x16340*x16341))+((x16340*x16342))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((cj16*r00*sj14))))+IKsqr(((x16344.value)*(((((-1.0)*x16341*x16343))+(((-1.0)*x16342*x16343))+((cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x16340*x16341))+((x16340*x16342))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((cj16*r00*sj14))), ((x16344.value)*(((((-1.0)*x16341*x16343))+(((-1.0)*x16342*x16343))+((cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16345=(cj15*r02);
IkReal x16346=IKcos(j10);
IkReal x16347=((1.0)*x16346);
IkReal x16348=((1.0)*cj16);
IkReal x16349=(r01*sj15);
IkReal x16350=(r00*sj15*sj16);
IkReal x16351=(cj15*r12);
IkReal x16352=IKsin(j10);
IkReal x16353=(cj11*x16352);
IkReal x16354=(r11*sj15);
IkReal x16355=(r10*sj16);
IkReal x16356=(sj14*sj16);
IkReal x16357=((1.0)*cj14*sj15);
IkReal x16358=((1.0)*cj16*sj14);
IkReal x16359=((1.0)*cj14*cj15*cj16);
IkReal x16360=((1.0)*cj14*cj15*sj16);
IkReal x16361=(cj14*cj16);
IkReal x16362=((1.0)*cj14*sj16);
IkReal x16363=((1.0)*sj14*sj15);
IkReal x16364=((1.0)*cj15*cj16*sj14);
IkReal x16365=((1.0)*cj15*sj14*sj16);
IkReal x16366=((0.01)*sj15);
IkReal x16367=((0.069)*x16352);
IkReal x16368=((0.069)*x16346);
IkReal x16369=((0.01)*cj15*cj16);
IkReal x16370=((0.01)*cj15*sj16);
IkReal x16371=((0.37429)*cj16);
evalcond[0]=(x16345+(((-1.0)*cj11*x16347))+(((-1.0)*x16348*x16349))+(((-1.0)*x16350)));
evalcond[1]=((((-1.0)*x16348*x16354))+x16351+(((-1.0)*sj15*x16355))+(((-1.0)*x16353)));
evalcond[2]=(x16352+(((-1.0)*r00*x16360))+(((-1.0)*r01*x16359))+((r01*x16356))+(((-1.0)*r00*x16358))+(((-1.0)*r02*x16357)));
evalcond[3]=((((-1.0)*r12*x16357))+(((-1.0)*x16347))+((r11*x16356))+(((-1.0)*r11*x16359))+(((-1.0)*r10*x16360))+(((-1.0)*r10*x16358)));
evalcond[4]=((((-1.0)*sj11*x16352))+(((-1.0)*r12*x16363))+(((-1.0)*r11*x16362))+(((-1.0)*r10*x16365))+(((-1.0)*r11*x16364))+((r10*x16361)));
evalcond[5]=((((-1.0)*r02*x16363))+(((-1.0)*r00*x16365))+(((-1.0)*sj11*x16347))+((r00*x16361))+(((-1.0)*r01*x16364))+(((-1.0)*r01*x16362)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*x16349*x16371))+((r02*x16366))+(((-0.37429)*x16350))+x16368+x16367+((r01*x16369))+(((0.37429)*x16345))+((r00*x16370))+(((0.36442)*cj11*x16346)));
evalcond[7]=((((-1.0)*x16368))+(((-1.0)*(1.0)*py))+((r11*x16369))+(((0.37429)*x16351))+((r12*x16366))+((r10*x16370))+x16367+(((-1.0)*x16354*x16371))+(((0.36442)*x16353))+(((-0.37429)*sj15*x16355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16372=((1.0)*cj16*sj15);
IkReal x16373=((1.0)*sj15*sj16);
CheckValue<IkReal> x16374 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x16373))+(((-1.0)*r11*x16372))+((cj15*r12)))),IkReal(((((-1.0)*r00*x16373))+((cj15*r02))+(((-1.0)*r01*x16372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16374.valid){
continue;
}
CheckValue<IkReal> x16375=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x16375.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x16374.value)+(((1.5707963267949)*(x16375.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16376=(cj15*r02);
IkReal x16377=IKcos(j10);
IkReal x16378=((1.0)*x16377);
IkReal x16379=((1.0)*cj16);
IkReal x16380=(r01*sj15);
IkReal x16381=(r00*sj15*sj16);
IkReal x16382=(cj15*r12);
IkReal x16383=IKsin(j10);
IkReal x16384=(cj11*x16383);
IkReal x16385=(r11*sj15);
IkReal x16386=(r10*sj16);
IkReal x16387=(sj14*sj16);
IkReal x16388=((1.0)*cj14*sj15);
IkReal x16389=((1.0)*cj16*sj14);
IkReal x16390=((1.0)*cj14*cj15*cj16);
IkReal x16391=((1.0)*cj14*cj15*sj16);
IkReal x16392=(cj14*cj16);
IkReal x16393=((1.0)*cj14*sj16);
IkReal x16394=((1.0)*sj14*sj15);
IkReal x16395=((1.0)*cj15*cj16*sj14);
IkReal x16396=((1.0)*cj15*sj14*sj16);
IkReal x16397=((0.01)*sj15);
IkReal x16398=((0.069)*x16383);
IkReal x16399=((0.069)*x16377);
IkReal x16400=((0.01)*cj15*cj16);
IkReal x16401=((0.01)*cj15*sj16);
IkReal x16402=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x16381))+(((-1.0)*cj11*x16378))+(((-1.0)*x16379*x16380))+x16376);
evalcond[1]=((((-1.0)*x16379*x16385))+(((-1.0)*x16384))+x16382+(((-1.0)*sj15*x16386)));
evalcond[2]=((((-1.0)*r00*x16389))+((r01*x16387))+x16383+(((-1.0)*r01*x16390))+(((-1.0)*r02*x16388))+(((-1.0)*r00*x16391)));
evalcond[3]=((((-1.0)*r12*x16388))+(((-1.0)*r10*x16389))+(((-1.0)*r10*x16391))+(((-1.0)*r11*x16390))+(((-1.0)*x16378))+((r11*x16387)));
evalcond[4]=((((-1.0)*r10*x16396))+(((-1.0)*r11*x16395))+((r10*x16392))+(((-1.0)*r11*x16393))+(((-1.0)*sj11*x16383))+(((-1.0)*r12*x16394)));
evalcond[5]=((((-1.0)*r02*x16394))+(((-1.0)*r01*x16393))+(((-1.0)*r01*x16395))+(((-1.0)*sj11*x16378))+(((-1.0)*r00*x16396))+((r00*x16392)));
evalcond[6]=((((-1.0)*(1.0)*px))+x16398+x16399+(((-0.37429)*x16381))+(((0.37429)*x16376))+((r02*x16397))+(((0.36442)*cj11*x16377))+((r00*x16401))+(((-1.0)*x16380*x16402))+((r01*x16400)));
evalcond[7]=(((r11*x16400))+(((-1.0)*(1.0)*py))+(((0.36442)*x16384))+x16398+(((-1.0)*x16399))+(((0.37429)*x16382))+(((-1.0)*x16385*x16402))+((r10*x16401))+((r12*x16397))+(((-0.37429)*sj15*x16386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x16411=IKPowWithIntegerCheck(cj11,-1);
if(!x16411.valid){
continue;
}
IkReal x16403=x16411.value;
IkReal x16404=(cj15*r02);
IkReal x16405=(cj11*cj14);
IkReal x16406=(cj12*sj15);
IkReal x16407=(cj16*r01);
IkReal x16408=(r00*sj16);
IkReal x16409=(cj11*cj15*sj14);
IkReal x16410=((1.0)*sj15);
CheckValue<IkReal> x16412=IKPowWithIntegerCheck(sj11,-1);
if(!x16412.valid){
continue;
}
CheckValue<IkReal> x16413=IKPowWithIntegerCheck(sj12,-1);
if(!x16413.valid){
continue;
}
if( IKabs((x16403*(x16412.value)*(x16413.value)*(((((-1.0)*cj16*r10*x16405))+((r11*sj16*x16405))+((((r12*sj15))*((cj11*sj14))))+((x16406*x16408))+(((-1.0)*cj12*x16404))+((r10*sj16*x16409))+((cj16*r11*x16409))+((x16406*x16407)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x16403*((x16404+(((-1.0)*x16408*x16410))+(((-1.0)*x16407*x16410)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16403*(x16412.value)*(x16413.value)*(((((-1.0)*cj16*r10*x16405))+((r11*sj16*x16405))+((((r12*sj15))*((cj11*sj14))))+((x16406*x16408))+(((-1.0)*cj12*x16404))+((r10*sj16*x16409))+((cj16*r11*x16409))+((x16406*x16407))))))+IKsqr((x16403*((x16404+(((-1.0)*x16408*x16410))+(((-1.0)*x16407*x16410))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x16403*(x16412.value)*(x16413.value)*(((((-1.0)*cj16*r10*x16405))+((r11*sj16*x16405))+((((r12*sj15))*((cj11*sj14))))+((x16406*x16408))+(((-1.0)*cj12*x16404))+((r10*sj16*x16409))+((cj16*r11*x16409))+((x16406*x16407))))), (x16403*((x16404+(((-1.0)*x16408*x16410))+(((-1.0)*x16407*x16410))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16414=(cj15*r02);
IkReal x16415=IKcos(j10);
IkReal x16416=(cj11*x16415);
IkReal x16417=((1.0)*cj16);
IkReal x16418=(r01*sj15);
IkReal x16419=(r00*sj15*sj16);
IkReal x16420=(cj15*r12);
IkReal x16421=IKsin(j10);
IkReal x16422=(cj11*x16421);
IkReal x16423=(r11*sj15);
IkReal x16424=(r10*sj16);
IkReal x16425=(cj14*cj16);
IkReal x16426=((1.0)*cj14*sj16);
IkReal x16427=((1.0)*sj14*sj15);
IkReal x16428=((1.0)*cj15*cj16*sj14);
IkReal x16429=((1.0)*cj15*sj14*sj16);
IkReal x16430=((1.0)*x16421);
IkReal x16431=(cj12*x16430);
IkReal x16432=(sj12*x16415);
IkReal x16433=(sj14*sj16);
IkReal x16434=((1.0)*cj14*sj15);
IkReal x16435=((1.0)*cj16*sj14);
IkReal x16436=((1.0)*cj14*cj15*cj16);
IkReal x16437=((1.0)*cj14*cj15*sj16);
IkReal x16438=(cj12*sj11*x16415);
IkReal x16439=((0.01)*sj15);
IkReal x16440=((0.069)*x16421);
IkReal x16441=((0.01)*cj15*cj16);
IkReal x16442=((0.01)*cj15*sj16);
IkReal x16443=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x16416))+(((-1.0)*x16417*x16418))+x16414+(((-1.0)*x16419)));
evalcond[1]=((((-1.0)*sj15*x16424))+(((-1.0)*x16422))+(((-1.0)*x16417*x16423))+x16420);
evalcond[2]=(((sj11*sj12*x16421))+(((-1.0)*r12*x16427))+(((-1.0)*r11*x16426))+((cj12*x16415))+(((-1.0)*r10*x16429))+((r10*x16425))+(((-1.0)*r11*x16428)));
evalcond[3]=((((-1.0)*x16431))+(((-1.0)*r01*x16426))+(((-1.0)*r01*x16428))+(((-1.0)*r02*x16427))+((r00*x16425))+(((-1.0)*r00*x16429))+((sj11*x16432)));
evalcond[4]=(((r11*x16433))+(((-1.0)*r12*x16434))+(((-1.0)*r11*x16436))+(((-1.0)*sj11*x16431))+(((-1.0)*r10*x16435))+(((-1.0)*r10*x16437))+x16432);
evalcond[5]=((((-1.0)*r02*x16434))+((r01*x16433))+(((-1.0)*r01*x16436))+(((-1.0)*x16438))+(((-1.0)*r00*x16435))+(((-1.0)*sj12*x16430))+(((-1.0)*r00*x16437)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((0.37429)*x16414))+(((0.069)*x16415))+((r01*x16441))+((r00*x16442))+((r02*x16439))+(((-0.37429)*x16419))+(((-1.0)*sj12*x16440))+(((0.36442)*x16416))+(((-1.0)*x16418*x16443))+(((-0.069)*x16438)));
evalcond[7]=((((0.069)*x16432))+(((-1.0)*(1.0)*py))+(((-1.0)*cj12*sj11*x16440))+(((-0.37429)*sj15*x16424))+(((0.36442)*x16422))+(((0.37429)*x16420))+x16440+(((-1.0)*x16423*x16443))+((r10*x16442))+((r12*x16439))+((r11*x16441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x16451=IKPowWithIntegerCheck(cj11,-1);
if(!x16451.valid){
continue;
}
IkReal x16444=x16451.value;
IkReal x16445=((1.0)*sj15);
IkReal x16446=(cj16*r11);
IkReal x16447=(r10*sj16);
IkReal x16448=(cj11*cj14);
IkReal x16449=(cj11*cj15*sj14);
IkReal x16450=(sj11*sj12*sj15);
CheckValue<IkReal> x16452=IKPowWithIntegerCheck(cj12,-1);
if(!x16452.valid){
continue;
}
if( IKabs((x16444*(((((-1.0)*x16445*x16447))+(((-1.0)*x16445*x16446))+((cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x16444*(x16452.value)*((((x16447*x16449))+((x16447*x16450))+((r11*sj16*x16448))+((x16446*x16450))+((((r12*sj15))*((cj11*sj14))))+(((-1.0)*cj16*r10*x16448))+((x16446*x16449))+(((-1.0)*cj15*r12*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16444*(((((-1.0)*x16445*x16447))+(((-1.0)*x16445*x16446))+((cj15*r12))))))+IKsqr((x16444*(x16452.value)*((((x16447*x16449))+((x16447*x16450))+((r11*sj16*x16448))+((x16446*x16450))+((((r12*sj15))*((cj11*sj14))))+(((-1.0)*cj16*r10*x16448))+((x16446*x16449))+(((-1.0)*cj15*r12*sj11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x16444*(((((-1.0)*x16445*x16447))+(((-1.0)*x16445*x16446))+((cj15*r12))))), (x16444*(x16452.value)*((((x16447*x16449))+((x16447*x16450))+((r11*sj16*x16448))+((x16446*x16450))+((((r12*sj15))*((cj11*sj14))))+(((-1.0)*cj16*r10*x16448))+((x16446*x16449))+(((-1.0)*cj15*r12*sj11*sj12))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16453=(cj15*r02);
IkReal x16454=IKcos(j10);
IkReal x16455=(cj11*x16454);
IkReal x16456=((1.0)*cj16);
IkReal x16457=(r01*sj15);
IkReal x16458=(r00*sj15*sj16);
IkReal x16459=(cj15*r12);
IkReal x16460=IKsin(j10);
IkReal x16461=(cj11*x16460);
IkReal x16462=(r11*sj15);
IkReal x16463=(r10*sj16);
IkReal x16464=(cj14*cj16);
IkReal x16465=((1.0)*cj14*sj16);
IkReal x16466=((1.0)*sj14*sj15);
IkReal x16467=((1.0)*cj15*cj16*sj14);
IkReal x16468=((1.0)*cj15*sj14*sj16);
IkReal x16469=((1.0)*x16460);
IkReal x16470=(cj12*x16469);
IkReal x16471=(sj12*x16454);
IkReal x16472=(sj14*sj16);
IkReal x16473=((1.0)*cj14*sj15);
IkReal x16474=((1.0)*cj16*sj14);
IkReal x16475=((1.0)*cj14*cj15*cj16);
IkReal x16476=((1.0)*cj14*cj15*sj16);
IkReal x16477=(cj12*sj11*x16454);
IkReal x16478=((0.01)*sj15);
IkReal x16479=((0.069)*x16460);
IkReal x16480=((0.01)*cj15*cj16);
IkReal x16481=((0.01)*cj15*sj16);
IkReal x16482=((0.37429)*cj16);
evalcond[0]=((((-1.0)*x16458))+x16453+(((-1.0)*x16456*x16457))+(((-1.0)*x16455)));
evalcond[1]=(x16459+(((-1.0)*x16461))+(((-1.0)*x16456*x16462))+(((-1.0)*sj15*x16463)));
evalcond[2]=(((cj12*x16454))+(((-1.0)*r12*x16466))+(((-1.0)*r10*x16468))+((sj11*sj12*x16460))+(((-1.0)*r11*x16465))+(((-1.0)*r11*x16467))+((r10*x16464)));
evalcond[3]=(((sj11*x16471))+(((-1.0)*r02*x16466))+(((-1.0)*x16470))+(((-1.0)*r00*x16468))+((r00*x16464))+(((-1.0)*r01*x16465))+(((-1.0)*r01*x16467)));
evalcond[4]=((((-1.0)*r10*x16474))+(((-1.0)*r10*x16476))+(((-1.0)*sj11*x16470))+((r11*x16472))+(((-1.0)*r12*x16473))+(((-1.0)*r11*x16475))+x16471);
evalcond[5]=((((-1.0)*r00*x16474))+(((-1.0)*r02*x16473))+(((-1.0)*sj12*x16469))+(((-1.0)*x16477))+((r01*x16472))+(((-1.0)*r01*x16475))+(((-1.0)*r00*x16476)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-1.0)*sj12*x16479))+((r02*x16478))+(((-0.069)*x16477))+(((0.36442)*x16455))+(((0.37429)*x16453))+((r01*x16480))+((r00*x16481))+(((-1.0)*x16457*x16482))+(((0.069)*x16454))+(((-0.37429)*x16458)));
evalcond[7]=((((0.069)*x16471))+(((-1.0)*(1.0)*py))+(((0.37429)*x16459))+(((-1.0)*x16462*x16482))+((r11*x16480))+(((-0.37429)*sj15*x16463))+((r12*x16478))+((r10*x16481))+x16479+(((-1.0)*cj12*sj11*x16479))+(((0.36442)*x16461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16483=((1.0)*cj16*sj15);
IkReal x16484=((1.0)*sj15*sj16);
CheckValue<IkReal> x16485=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x16485.valid){
continue;
}
CheckValue<IkReal> x16486 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x16484))+(((-1.0)*r11*x16483))+((cj15*r12)))),IkReal(((((-1.0)*r00*x16484))+(((-1.0)*r01*x16483))+((cj15*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16486.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16485.value)))+(x16486.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x16487=(cj15*r02);
IkReal x16488=IKcos(j10);
IkReal x16489=(cj11*x16488);
IkReal x16490=((1.0)*cj16);
IkReal x16491=(r01*sj15);
IkReal x16492=(r00*sj15*sj16);
IkReal x16493=(cj15*r12);
IkReal x16494=IKsin(j10);
IkReal x16495=(cj11*x16494);
IkReal x16496=(r11*sj15);
IkReal x16497=(r10*sj16);
IkReal x16498=(cj14*cj16);
IkReal x16499=((1.0)*cj14*sj16);
IkReal x16500=((1.0)*sj14*sj15);
IkReal x16501=((1.0)*cj15*cj16*sj14);
IkReal x16502=((1.0)*cj15*sj14*sj16);
IkReal x16503=((1.0)*x16494);
IkReal x16504=(cj12*x16503);
IkReal x16505=(sj12*x16488);
IkReal x16506=(sj14*sj16);
IkReal x16507=((1.0)*cj14*sj15);
IkReal x16508=((1.0)*cj16*sj14);
IkReal x16509=((1.0)*cj14*cj15*cj16);
IkReal x16510=((1.0)*cj14*cj15*sj16);
IkReal x16511=(cj12*sj11*x16488);
IkReal x16512=((0.01)*sj15);
IkReal x16513=((0.069)*x16494);
IkReal x16514=((0.01)*cj15*cj16);
IkReal x16515=((0.01)*cj15*sj16);
IkReal x16516=((0.37429)*cj16);
evalcond[0]=(x16487+(((-1.0)*x16492))+(((-1.0)*x16489))+(((-1.0)*x16490*x16491)));
evalcond[1]=((((-1.0)*sj15*x16497))+(((-1.0)*x16495))+x16493+(((-1.0)*x16490*x16496)));
evalcond[2]=((((-1.0)*r10*x16502))+(((-1.0)*r11*x16499))+(((-1.0)*r11*x16501))+((r10*x16498))+(((-1.0)*r12*x16500))+((sj11*sj12*x16494))+((cj12*x16488)));
evalcond[3]=(((sj11*x16505))+((r00*x16498))+(((-1.0)*x16504))+(((-1.0)*r01*x16501))+(((-1.0)*r00*x16502))+(((-1.0)*r02*x16500))+(((-1.0)*r01*x16499)));
evalcond[4]=(x16505+((r11*x16506))+(((-1.0)*r10*x16508))+(((-1.0)*r10*x16510))+(((-1.0)*r12*x16507))+(((-1.0)*sj11*x16504))+(((-1.0)*r11*x16509)));
evalcond[5]=((((-1.0)*x16511))+(((-1.0)*r00*x16510))+((r01*x16506))+(((-1.0)*r00*x16508))+(((-1.0)*r01*x16509))+(((-1.0)*sj12*x16503))+(((-1.0)*r02*x16507)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r01*x16514))+(((-0.069)*x16511))+(((-0.37429)*x16492))+(((0.069)*x16488))+((r02*x16512))+((r00*x16515))+(((0.36442)*x16489))+(((-1.0)*sj12*x16513))+(((-1.0)*x16491*x16516))+(((0.37429)*x16487)));
evalcond[7]=((((-1.0)*x16496*x16516))+(((-0.37429)*sj15*x16497))+((r11*x16514))+(((-1.0)*(1.0)*py))+((r10*x16515))+x16513+(((0.069)*x16505))+((r12*x16512))+(((-1.0)*cj12*sj11*x16513))+(((0.36442)*x16495))+(((0.37429)*x16493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16517=((1.0)*cj16*sj15);
IkReal x16518=((1.0)*sj15*sj16);
CheckValue<IkReal> x16519=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x16519.valid){
continue;
}
CheckValue<IkReal> x16520 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x16518))+((cj15*r12))+(((-1.0)*r11*x16517)))),IkReal(((((-1.0)*r00*x16518))+((cj15*r02))+(((-1.0)*r01*x16517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16520.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16519.value)))+(x16520.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x16521=(cj15*r02);
IkReal x16522=IKcos(j10);
IkReal x16523=(cj11*x16522);
IkReal x16524=(cj16*r01*sj15);
IkReal x16525=(r00*sj15*sj16);
IkReal x16526=(cj15*r12);
IkReal x16527=IKsin(j10);
IkReal x16528=(cj11*x16527);
IkReal x16529=(cj16*r11*sj15);
IkReal x16530=(r10*sj15*sj16);
IkReal x16531=((0.01)*sj15);
IkReal x16532=((0.069)*x16522);
IkReal x16533=((0.069)*x16527);
IkReal x16534=((0.01)*cj15*cj16);
IkReal x16535=((0.01)*cj15*sj16);
IkReal x16536=(cj12*sj11);
evalcond[0]=((((-1.0)*x16525))+x16521+(((-1.0)*x16524))+(((-1.0)*x16523)));
evalcond[1]=((((-1.0)*x16530))+x16526+(((-1.0)*x16529))+(((-1.0)*x16528)));
evalcond[2]=((((-1.0)*(1.0)*px))+((r02*x16531))+((r00*x16535))+(((-1.0)*sj12*x16533))+((r01*x16534))+(((0.37429)*x16521))+x16532+(((0.36442)*x16523))+(((-1.0)*x16532*x16536))+(((-0.37429)*x16525))+(((-0.37429)*x16524)));
evalcond[3]=(((r10*x16535))+(((-1.0)*(1.0)*py))+((r11*x16534))+(((-0.37429)*x16530))+((sj12*x16532))+(((-0.37429)*x16529))+((r12*x16531))+x16533+(((0.37429)*x16526))+(((-1.0)*x16533*x16536))+(((0.36442)*x16528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
IkReal x16537=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x16537;
j14eval[1]=IKsign(x16537);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
IkReal x16538=((1.0)*sj15);
IkReal x16539=((((-1.0)*r00*sj16*x16538))+(((-1.0)*cj16*r01*x16538))+((cj15*r02)));
j14eval[0]=x16539;
j14eval[1]=IKsign(x16539);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x16540=r21*r21;
IkReal x16541=((1.0)*x16540);
IkReal x16542=r22*r22;
IkReal x16543=(((cj16*r20*sj16))*(((2.0)*r21)));
IkReal x16544=cj15*cj15;
IkReal x16545=cj16*cj16;
IkReal x16546=(cj15*r22*sj15);
IkReal x16547=r20*r20;
IkReal x16548=((1.0)*x16547);
IkReal x16549=(x16544*x16545);
IkReal x16550=((((-1.0)*x16544*x16548))+(((-1.0)*x16541))+(((-2.0)*cj16*r21*x16546))+x16543+((x16547*x16549))+(((-2.0)*r20*sj16*x16546))+(((-1.0)*x16541*x16549))+(((-1.0)*x16542))+((x16540*x16545))+((x16542*x16544))+(((-1.0)*x16545*x16548))+(((-1.0)*x16543*x16544)));
IkReal x16551=(cj11*cj12);
IkReal x16552=(r22*sj15);
IkReal x16553=(cj11*sj12);
IkReal x16554=(cj16*r20);
IkReal x16555=((1.0)*r21*sj16);
IkReal x16556=(cj16*r21);
IkReal x16557=(cj11*cj12*cj15);
IkReal x16558=(r20*sj16);
IkReal x16559=((1.0)*cj11*cj15*sj12);
j14eval[0]=x16550;
j14eval[1]=((IKabs(((((-1.0)*x16551*x16555))+((x16551*x16554))+(((-1.0)*cj11*sj12*x16552))+(((-1.0)*x16558*x16559))+(((-1.0)*x16556*x16559)))))+(IKabs((((x16556*x16557))+((x16553*x16554))+(((-1.0)*x16553*x16555))+((x16557*x16558))+((x16551*x16552))))));
j14eval[2]=IKsign(x16550);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x16560=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x16560;
j14eval[1]=IKsign(x16560);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x16561=((1.0)*sj15);
IkReal x16562=((((-1.0)*r00*sj16*x16561))+((cj15*r02))+(((-1.0)*cj16*r01*x16561)));
j14eval[0]=x16562;
j14eval[1]=IKsign(x16562);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x16563=(r12*r22);
IkReal x16564=cj15*cj15;
IkReal x16565=(r10*r20);
IkReal x16566=(x16564*x16565);
IkReal x16567=cj16*cj16;
IkReal x16568=(r10*r21);
IkReal x16569=((1.0)*cj16*sj16);
IkReal x16570=(r11*r20);
IkReal x16571=(cj15*cj16*sj15);
IkReal x16572=(cj15*sj15*sj16);
IkReal x16573=(r11*r21*x16567);
IkReal x16574=(cj16*sj16*x16564);
IkReal x16575=((((-1.0)*x16568*x16569))+(((-1.0)*x16563*x16564))+((r11*r22*x16571))+((r12*r21*x16571))+((x16570*x16574))+((x16565*x16567))+((r12*r20*x16572))+((x16568*x16574))+((x16564*x16573))+((r10*r22*x16572))+(((-1.0)*x16566*x16567))+(((-1.0)*x16569*x16570))+x16563+x16566+((r11*r21))+(((-1.0)*x16573)));
j14eval[0]=x16575;
j14eval[1]=IKsign(x16575);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x16576=(cj10*cj12);
IkReal x16577=(r22*sj15);
IkReal x16578=(sj10*sj12);
IkReal x16579=(cj10*cj12*cj15);
IkReal x16580=(cj15*cj16*r21);
IkReal x16581=(cj15*r20*sj16);
IkReal x16582=(r21*sj16);
IkReal x16583=((1.0)*cj16*r20);
IkReal x16584=(r12*r22);
IkReal x16585=cj15*cj15;
IkReal x16586=(r10*r20);
IkReal x16587=(x16585*x16586);
IkReal x16588=cj16*cj16;
IkReal x16589=(r10*r21*sj16);
IkReal x16590=(cj15*r22*sj15);
IkReal x16591=(r12*sj15);
IkReal x16592=(r11*r21*x16588);
IkReal x16593=(cj16*x16585);
CheckValue<IkReal> x16594 = IKatan2WithCheck(IkReal((((x16578*x16580))+((x16577*x16578))+((r20*sj16*x16579))+((x16578*x16581))+((cj16*r21*x16579))+((x16576*x16577)))),IkReal(((((-1.0)*x16578*x16583))+((x16578*x16582))+(((-1.0)*x16576*x16583))+((x16576*x16582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16594.valid){
continue;
}
CheckValue<IkReal> x16595=IKPowWithIntegerCheck(IKsign((((x16586*x16588))+(((-1.0)*x16587*x16588))+((x16580*x16591))+((x16581*x16591))+(((-1.0)*r11*sj16*x16583))+((r11*r20*sj16*x16593))+x16587+x16584+((x16585*x16592))+(((-1.0)*x16592))+(((-1.0)*x16584*x16585))+(((-1.0)*cj16*x16589))+((r11*r21))+((r10*sj16*x16590))+((x16589*x16593))+((cj16*r11*x16590)))),-1);
if(!x16595.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x16594.value)+(((1.5707963267949)*(x16595.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x16596=IKcos(j14);
IkReal x16597=(cj16*x16596);
IkReal x16598=((1.0)*sj16*x16596);
IkReal x16599=(r22*sj15);
IkReal x16600=IKsin(j14);
IkReal x16601=((1.0)*x16600);
IkReal x16602=(cj15*r21);
IkReal x16603=((1.0)*cj16*x16600);
IkReal x16604=(cj15*r20);
IkReal x16605=((1.0)*sj16*x16600);
IkReal x16606=(sj16*x16600);
IkReal x16607=((1.0)*x16596);
IkReal x16608=((1.0)*cj16*x16596);
IkReal x16609=(cj10*cj12);
IkReal x16610=(sj10*sj12);
IkReal x16611=(r12*sj15);
IkReal x16612=(cj15*r11);
IkReal x16613=(cj15*r10);
IkReal x16614=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x16615=(r02*sj15);
IkReal x16616=(cj15*r01);
IkReal x16617=(cj15*r00);
evalcond[0]=((((-1.0)*x16604*x16605))+(((-1.0)*x16602*x16603))+((r20*x16597))+(((-1.0)*x16599*x16601))+(((-1.0)*r21*x16598)));
evalcond[1]=(((r21*x16606))+(((-1.0)*x16598*x16604))+(((-1.0)*r20*x16603))+(((-1.0)*x16602*x16608))+(((-1.0)*x16599*x16607)));
evalcond[2]=((((-1.0)*x16605*x16613))+((r10*x16597))+x16609+(((-1.0)*r11*x16598))+x16610+(((-1.0)*x16601*x16611))+(((-1.0)*x16603*x16612)));
evalcond[3]=((((-1.0)*r01*x16598))+x16614+((r00*x16597))+(((-1.0)*x16605*x16617))+(((-1.0)*x16603*x16616))+(((-1.0)*x16601*x16615)));
evalcond[4]=(x16614+(((-1.0)*x16598*x16613))+(((-1.0)*r10*x16603))+(((-1.0)*x16608*x16612))+(((-1.0)*x16607*x16611))+((r11*x16606)));
evalcond[5]=((((-1.0)*x16608*x16616))+(((-1.0)*r00*x16603))+((r01*x16606))+(((-1.0)*x16598*x16617))+(((-1.0)*x16610))+(((-1.0)*x16607*x16615))+(((-1.0)*x16609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x16618=((1.0)*sj15);
IkReal x16619=(cj10*cj12);
IkReal x16620=(r21*sj16);
IkReal x16621=(sj10*sj12);
IkReal x16622=((1.0)*cj16*r20);
IkReal x16623=((1.0)*r22*sj15);
IkReal x16624=(cj16*r21);
IkReal x16625=((1.0)*cj10*cj12*cj15);
IkReal x16626=(r20*sj16);
IkReal x16627=((1.0)*cj15*sj10*sj12);
CheckValue<IkReal> x16628=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x16618))+(((-1.0)*cj16*r01*x16618))+((cj15*r02)))),-1);
if(!x16628.valid){
continue;
}
CheckValue<IkReal> x16629 = IKatan2WithCheck(IkReal(((((-1.0)*x16619*x16622))+(((-1.0)*x16621*x16622))+((x16619*x16620))+((x16620*x16621)))),IkReal(((((-1.0)*x16621*x16623))+(((-1.0)*x16624*x16627))+(((-1.0)*x16624*x16625))+(((-1.0)*x16626*x16627))+(((-1.0)*x16625*x16626))+(((-1.0)*x16619*x16623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16629.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16628.value)))+(x16629.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x16630=IKcos(j14);
IkReal x16631=(cj16*x16630);
IkReal x16632=((1.0)*sj16*x16630);
IkReal x16633=(r22*sj15);
IkReal x16634=IKsin(j14);
IkReal x16635=((1.0)*x16634);
IkReal x16636=(cj15*r21);
IkReal x16637=((1.0)*cj16*x16634);
IkReal x16638=(cj15*r20);
IkReal x16639=((1.0)*sj16*x16634);
IkReal x16640=(sj16*x16634);
IkReal x16641=((1.0)*x16630);
IkReal x16642=((1.0)*cj16*x16630);
IkReal x16643=(cj10*cj12);
IkReal x16644=(sj10*sj12);
IkReal x16645=(r12*sj15);
IkReal x16646=(cj15*r11);
IkReal x16647=(cj15*r10);
IkReal x16648=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x16649=(r02*sj15);
IkReal x16650=(cj15*r01);
IkReal x16651=(cj15*r00);
evalcond[0]=(((r20*x16631))+(((-1.0)*x16636*x16637))+(((-1.0)*x16638*x16639))+(((-1.0)*r21*x16632))+(((-1.0)*x16633*x16635)));
evalcond[1]=((((-1.0)*r20*x16637))+(((-1.0)*x16636*x16642))+(((-1.0)*x16633*x16641))+(((-1.0)*x16632*x16638))+((r21*x16640)));
evalcond[2]=((((-1.0)*x16637*x16646))+x16643+x16644+(((-1.0)*x16639*x16647))+(((-1.0)*r11*x16632))+((r10*x16631))+(((-1.0)*x16635*x16645)));
evalcond[3]=((((-1.0)*r01*x16632))+x16648+(((-1.0)*x16635*x16649))+((r00*x16631))+(((-1.0)*x16637*x16650))+(((-1.0)*x16639*x16651)));
evalcond[4]=((((-1.0)*r10*x16637))+(((-1.0)*x16632*x16647))+x16648+((r11*x16640))+(((-1.0)*x16642*x16646))+(((-1.0)*x16641*x16645)));
evalcond[5]=((((-1.0)*x16643))+((r01*x16640))+(((-1.0)*x16644))+(((-1.0)*x16641*x16649))+(((-1.0)*x16642*x16650))+(((-1.0)*r00*x16637))+(((-1.0)*x16632*x16651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x16652=(cj12*sj10);
IkReal x16653=(cj16*r20);
IkReal x16654=((1.0)*cj10*sj12);
IkReal x16655=(r22*sj15);
IkReal x16656=(cj16*r21);
IkReal x16657=(cj12*cj15*sj10);
IkReal x16658=(r20*sj16);
IkReal x16659=((1.0)*cj10*cj15*sj12);
CheckValue<IkReal> x16660 = IKatan2WithCheck(IkReal((((((cj10*sj12))*((r21*sj16))))+(((-1.0)*x16653*x16654))+((x16652*x16653))+(((-1.0)*r21*sj16*x16652)))),IkReal((((x16652*x16655))+((x16657*x16658))+(((-1.0)*x16658*x16659))+(((-1.0)*x16654*x16655))+((x16656*x16657))+(((-1.0)*x16656*x16659)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16660.valid){
continue;
}
CheckValue<IkReal> x16661=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x16661.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x16660.value)+(((1.5707963267949)*(x16661.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x16662=IKcos(j14);
IkReal x16663=(cj16*x16662);
IkReal x16664=((1.0)*sj16*x16662);
IkReal x16665=(r22*sj15);
IkReal x16666=IKsin(j14);
IkReal x16667=((1.0)*x16666);
IkReal x16668=(cj15*r21);
IkReal x16669=((1.0)*cj16*x16666);
IkReal x16670=(cj15*r20);
IkReal x16671=((1.0)*sj16*x16666);
IkReal x16672=(sj16*x16666);
IkReal x16673=((1.0)*x16662);
IkReal x16674=((1.0)*cj16*x16662);
IkReal x16675=(cj10*cj12);
IkReal x16676=(sj10*sj12);
IkReal x16677=(r12*sj15);
IkReal x16678=(cj15*r11);
IkReal x16679=(cj15*r10);
IkReal x16680=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x16681=(r02*sj15);
IkReal x16682=(cj15*r01);
IkReal x16683=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x16664))+(((-1.0)*x16670*x16671))+((r20*x16663))+(((-1.0)*x16665*x16667))+(((-1.0)*x16668*x16669)));
evalcond[1]=(((r21*x16672))+(((-1.0)*x16668*x16674))+(((-1.0)*x16665*x16673))+(((-1.0)*x16664*x16670))+(((-1.0)*r20*x16669)));
evalcond[2]=(((r10*x16663))+(((-1.0)*x16667*x16677))+(((-1.0)*r11*x16664))+x16675+x16676+(((-1.0)*x16669*x16678))+(((-1.0)*x16671*x16679)));
evalcond[3]=(x16680+(((-1.0)*x16669*x16682))+(((-1.0)*x16667*x16681))+(((-1.0)*x16671*x16683))+(((-1.0)*r01*x16664))+((r00*x16663)));
evalcond[4]=(x16680+(((-1.0)*r10*x16669))+(((-1.0)*x16664*x16679))+((r11*x16672))+(((-1.0)*x16674*x16678))+(((-1.0)*x16673*x16677)));
evalcond[5]=(((r01*x16672))+(((-1.0)*x16676))+(((-1.0)*x16675))+(((-1.0)*x16674*x16682))+(((-1.0)*x16664*x16683))+(((-1.0)*r00*x16669))+(((-1.0)*x16673*x16681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x16684=((1.0)*sj15);
IkReal x16685=((((-1.0)*cj16*r01*x16684))+((cj15*r02))+(((-1.0)*r00*sj16*x16684)));
j14eval[0]=x16685;
j14eval[1]=IKsign(x16685);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x16686=(r01*r21);
IkReal x16687=((1.0)*x16686);
IkReal x16688=(r02*r22);
IkReal x16689=(cj16*sj16);
IkReal x16690=(r00*r21*x16689);
IkReal x16691=(r01*r20*x16689);
IkReal x16692=cj15*cj15;
IkReal x16693=cj16*cj16;
IkReal x16694=((1.0)*r00*r20);
IkReal x16695=((1.0)*cj15*cj16*sj15);
IkReal x16696=((1.0)*cj15*sj15*sj16);
IkReal x16697=(x16692*x16693);
IkReal x16698=((1.0)*x16692);
IkReal x16699=((((-1.0)*x16692*x16694))+(((-1.0)*x16688))+(((-1.0)*r02*r20*x16696))+((x16688*x16692))+((r00*r20*x16697))+(((-1.0)*x16687))+(((-1.0)*r02*r21*x16695))+(((-1.0)*x16693*x16694))+x16691+x16690+(((-1.0)*r00*r22*x16696))+((x16686*x16693))+(((-1.0)*x16691*x16698))+(((-1.0)*x16690*x16698))+(((-1.0)*x16687*x16697))+(((-1.0)*r01*r22*x16695)));
j14eval[0]=x16699;
j14eval[1]=IKsign(x16699);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=1.0;
j13=0;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x16700=(r11*r21);
IkReal x16701=((1.0)*x16700);
IkReal x16702=(r12*r22);
IkReal x16703=(cj16*sj16);
IkReal x16704=(r10*r21*x16703);
IkReal x16705=(r11*r20*x16703);
IkReal x16706=cj15*cj15;
IkReal x16707=cj16*cj16;
IkReal x16708=((1.0)*r10*r20);
IkReal x16709=((1.0)*cj15*cj16*sj15);
IkReal x16710=((1.0)*cj15*sj15*sj16);
IkReal x16711=(x16706*x16707);
IkReal x16712=((1.0)*x16706);
IkReal x16713=((((-1.0)*x16705*x16712))+(((-1.0)*r12*r21*x16709))+(((-1.0)*x16707*x16708))+((x16700*x16707))+(((-1.0)*r10*r22*x16710))+(((-1.0)*r12*r20*x16710))+x16705+x16704+(((-1.0)*x16702))+(((-1.0)*x16701))+((r10*r20*x16711))+(((-1.0)*x16706*x16708))+(((-1.0)*x16704*x16712))+((x16702*x16706))+(((-1.0)*x16701*x16711))+(((-1.0)*r11*r22*x16709)));
j14eval[0]=x16713;
j14eval[1]=IKsign(x16713);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x16714=(r21*sj16);
IkReal x16715=(cj16*r20);
IkReal x16716=((1.0)*cj10*sj12);
IkReal x16717=((1.0)*cj12*sj10);
IkReal x16718=(r22*sj15);
IkReal x16719=(cj16*r21);
IkReal x16720=((1.0)*cj10*cj15*sj12);
IkReal x16721=(r20*sj16);
IkReal x16722=((1.0)*cj12*cj15*sj10);
IkReal x16723=(r11*r21);
IkReal x16724=((1.0)*x16723);
IkReal x16725=(r12*r22);
IkReal x16726=(cj16*r10*x16714);
IkReal x16727=(r11*sj16*x16715);
IkReal x16728=cj15*cj15;
IkReal x16729=cj16*cj16;
IkReal x16730=((1.0)*r10*r20);
IkReal x16731=((1.0)*cj15*r22*sj15);
IkReal x16732=((1.0)*cj15*r12*sj15);
IkReal x16733=(x16728*x16729);
IkReal x16734=((1.0)*x16728);
CheckValue<IkReal> x16735 = IKatan2WithCheck(IkReal((((cj10*sj12*x16714))+((cj12*sj10*x16714))+(((-1.0)*x16715*x16716))+(((-1.0)*x16715*x16717)))),IkReal(((((-1.0)*x16719*x16720))+(((-1.0)*x16719*x16722))+(((-1.0)*x16717*x16718))+(((-1.0)*x16716*x16718))+(((-1.0)*x16720*x16721))+(((-1.0)*x16721*x16722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16735.valid){
continue;
}
CheckValue<IkReal> x16736=IKPowWithIntegerCheck(IKsign((((r10*r20*x16733))+(((-1.0)*x16725))+(((-1.0)*x16729*x16730))+(((-1.0)*x16727*x16734))+(((-1.0)*cj16*r11*x16731))+x16727+x16726+((x16725*x16728))+(((-1.0)*x16726*x16734))+(((-1.0)*x16721*x16732))+(((-1.0)*x16724*x16733))+(((-1.0)*r10*sj16*x16731))+(((-1.0)*x16728*x16730))+(((-1.0)*x16724))+((x16723*x16729))+(((-1.0)*x16719*x16732)))),-1);
if(!x16736.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x16735.value)+(((1.5707963267949)*(x16736.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x16737=IKcos(j14);
IkReal x16738=(cj16*x16737);
IkReal x16739=((1.0)*sj16*x16737);
IkReal x16740=(r22*sj15);
IkReal x16741=IKsin(j14);
IkReal x16742=((1.0)*x16741);
IkReal x16743=(cj15*r21);
IkReal x16744=((1.0)*cj16*x16741);
IkReal x16745=(cj15*r20);
IkReal x16746=((1.0)*sj16*x16741);
IkReal x16747=(sj16*x16741);
IkReal x16748=((1.0)*x16737);
IkReal x16749=((1.0)*cj16*x16737);
IkReal x16750=(cj10*sj12);
IkReal x16751=(cj12*sj10);
IkReal x16752=(r12*sj15);
IkReal x16753=(cj15*r11);
IkReal x16754=(cj15*r10);
IkReal x16755=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x16756=(r02*sj15);
IkReal x16757=(cj15*r01);
IkReal x16758=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x16739))+(((-1.0)*x16740*x16742))+(((-1.0)*x16743*x16744))+(((-1.0)*x16745*x16746))+((r20*x16738)));
evalcond[1]=((((-1.0)*x16743*x16749))+(((-1.0)*r20*x16744))+(((-1.0)*x16739*x16745))+((r21*x16747))+(((-1.0)*x16740*x16748)));
evalcond[2]=((((-1.0)*r10*x16744))+x16751+x16750+(((-1.0)*x16749*x16753))+(((-1.0)*x16739*x16754))+((r11*x16747))+(((-1.0)*x16748*x16752)));
evalcond[3]=((((-1.0)*x16746*x16754))+x16755+(((-1.0)*x16744*x16753))+(((-1.0)*r11*x16739))+((r10*x16738))+(((-1.0)*x16742*x16752)));
evalcond[4]=((((-1.0)*r00*x16744))+(((-1.0)*x16749*x16757))+x16755+(((-1.0)*x16748*x16756))+(((-1.0)*x16739*x16758))+((r01*x16747)));
evalcond[5]=((((-1.0)*r01*x16739))+(((-1.0)*x16751))+(((-1.0)*x16744*x16757))+(((-1.0)*x16742*x16756))+(((-1.0)*x16746*x16758))+((r00*x16738))+(((-1.0)*x16750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x16759=(r21*sj16);
IkReal x16760=(cj16*r20);
IkReal x16761=(sj10*sj12);
IkReal x16762=((1.0)*cj10*cj12);
IkReal x16763=(r22*sj15);
IkReal x16764=(cj16*r21);
IkReal x16765=(cj15*sj10*sj12);
IkReal x16766=(r20*sj16);
IkReal x16767=((1.0)*cj10*cj12*cj15);
IkReal x16768=(r01*r21);
IkReal x16769=((1.0)*x16768);
IkReal x16770=(r02*r22);
IkReal x16771=(cj16*r00*x16759);
IkReal x16772=(r01*sj16*x16760);
IkReal x16773=cj15*cj15;
IkReal x16774=cj16*cj16;
IkReal x16775=((1.0)*r00*r20);
IkReal x16776=((1.0)*cj15*r22*sj15);
IkReal x16777=((1.0)*cj15*r02*sj15);
IkReal x16778=(x16773*x16774);
IkReal x16779=((1.0)*x16773);
CheckValue<IkReal> x16780=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16770))+(((-1.0)*x16772*x16779))+x16772+x16771+(((-1.0)*x16769))+(((-1.0)*cj16*r01*x16776))+((x16768*x16774))+(((-1.0)*x16774*x16775))+(((-1.0)*x16766*x16777))+(((-1.0)*x16764*x16777))+(((-1.0)*r00*sj16*x16776))+(((-1.0)*x16769*x16778))+(((-1.0)*x16771*x16779))+((x16770*x16773))+((r00*r20*x16778))+(((-1.0)*x16773*x16775)))),-1);
if(!x16780.valid){
continue;
}
CheckValue<IkReal> x16781 = IKatan2WithCheck(IkReal((((x16760*x16761))+(((-1.0)*r21*sj16*x16761))+((cj10*cj12*x16759))+(((-1.0)*x16760*x16762)))),IkReal((((x16764*x16765))+(((-1.0)*x16766*x16767))+(((-1.0)*x16764*x16767))+(((-1.0)*x16762*x16763))+((x16761*x16763))+((x16765*x16766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16781.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16780.value)))+(x16781.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x16782=IKcos(j14);
IkReal x16783=(cj16*x16782);
IkReal x16784=((1.0)*sj16*x16782);
IkReal x16785=(r22*sj15);
IkReal x16786=IKsin(j14);
IkReal x16787=((1.0)*x16786);
IkReal x16788=(cj15*r21);
IkReal x16789=((1.0)*cj16*x16786);
IkReal x16790=(cj15*r20);
IkReal x16791=((1.0)*sj16*x16786);
IkReal x16792=(sj16*x16786);
IkReal x16793=((1.0)*x16782);
IkReal x16794=((1.0)*cj16*x16782);
IkReal x16795=(cj10*sj12);
IkReal x16796=(cj12*sj10);
IkReal x16797=(r12*sj15);
IkReal x16798=(cj15*r11);
IkReal x16799=(cj15*r10);
IkReal x16800=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x16801=(r02*sj15);
IkReal x16802=(cj15*r01);
IkReal x16803=(cj15*r00);
evalcond[0]=((((-1.0)*x16785*x16787))+(((-1.0)*x16788*x16789))+((r20*x16783))+(((-1.0)*x16790*x16791))+(((-1.0)*r21*x16784)));
evalcond[1]=((((-1.0)*x16785*x16793))+((r21*x16792))+(((-1.0)*r20*x16789))+(((-1.0)*x16788*x16794))+(((-1.0)*x16784*x16790)));
evalcond[2]=(x16796+x16795+(((-1.0)*x16784*x16799))+(((-1.0)*x16794*x16798))+(((-1.0)*x16793*x16797))+(((-1.0)*r10*x16789))+((r11*x16792)));
evalcond[3]=((((-1.0)*x16791*x16799))+(((-1.0)*r11*x16784))+(((-1.0)*x16787*x16797))+x16800+(((-1.0)*x16789*x16798))+((r10*x16783)));
evalcond[4]=((((-1.0)*x16794*x16802))+((r01*x16792))+x16800+(((-1.0)*x16784*x16803))+(((-1.0)*r00*x16789))+(((-1.0)*x16793*x16801)));
evalcond[5]=((((-1.0)*r01*x16784))+(((-1.0)*x16795))+(((-1.0)*x16796))+(((-1.0)*x16789*x16802))+(((-1.0)*x16787*x16801))+(((-1.0)*x16791*x16803))+((r00*x16783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x16804=((1.0)*sj15);
IkReal x16805=(cj10*sj12);
IkReal x16806=(r22*sj15);
IkReal x16807=(cj12*sj10);
IkReal x16808=(cj16*r21);
IkReal x16809=(cj10*cj15*sj12);
IkReal x16810=(r20*sj16);
IkReal x16811=(cj12*cj15*sj10);
IkReal x16812=(r21*sj16);
IkReal x16813=((1.0)*cj16*r20);
CheckValue<IkReal> x16814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x16804))+((cj15*r02))+(((-1.0)*cj16*r01*x16804)))),-1);
if(!x16814.valid){
continue;
}
CheckValue<IkReal> x16815 = IKatan2WithCheck(IkReal((((x16808*x16809))+((x16809*x16810))+((x16805*x16806))+((x16810*x16811))+((x16806*x16807))+((x16808*x16811)))),IkReal((((x16805*x16812))+(((-1.0)*x16805*x16813))+(((-1.0)*x16807*x16813))+((x16807*x16812)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16815.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16814.value)))+(x16815.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x16816=IKcos(j14);
IkReal x16817=(cj16*x16816);
IkReal x16818=((1.0)*sj16*x16816);
IkReal x16819=(r22*sj15);
IkReal x16820=IKsin(j14);
IkReal x16821=((1.0)*x16820);
IkReal x16822=(cj15*r21);
IkReal x16823=((1.0)*cj16*x16820);
IkReal x16824=(cj15*r20);
IkReal x16825=((1.0)*sj16*x16820);
IkReal x16826=(sj16*x16820);
IkReal x16827=((1.0)*x16816);
IkReal x16828=((1.0)*cj16*x16816);
IkReal x16829=(cj10*sj12);
IkReal x16830=(cj12*sj10);
IkReal x16831=(r12*sj15);
IkReal x16832=(cj15*r11);
IkReal x16833=(cj15*r10);
IkReal x16834=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x16835=(r02*sj15);
IkReal x16836=(cj15*r01);
IkReal x16837=(cj15*r00);
evalcond[0]=((((-1.0)*x16822*x16823))+(((-1.0)*x16824*x16825))+((r20*x16817))+(((-1.0)*r21*x16818))+(((-1.0)*x16819*x16821)));
evalcond[1]=((((-1.0)*x16818*x16824))+(((-1.0)*x16822*x16828))+((r21*x16826))+(((-1.0)*x16819*x16827))+(((-1.0)*r20*x16823)));
evalcond[2]=((((-1.0)*x16828*x16832))+(((-1.0)*x16827*x16831))+x16830+x16829+((r11*x16826))+(((-1.0)*r10*x16823))+(((-1.0)*x16818*x16833)));
evalcond[3]=((((-1.0)*x16823*x16832))+x16834+(((-1.0)*x16825*x16833))+((r10*x16817))+(((-1.0)*x16821*x16831))+(((-1.0)*r11*x16818)));
evalcond[4]=((((-1.0)*x16818*x16837))+x16834+(((-1.0)*r00*x16823))+((r01*x16826))+(((-1.0)*x16828*x16836))+(((-1.0)*x16827*x16835)));
evalcond[5]=((((-1.0)*x16829))+(((-1.0)*x16830))+(((-1.0)*x16825*x16837))+((r00*x16817))+(((-1.0)*x16821*x16835))+(((-1.0)*x16823*x16836))+(((-1.0)*r01*x16818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x16838=(cj11*cj12);
IkReal x16839=(cj16*r20);
IkReal x16840=((1.0)*r21*sj16);
IkReal x16841=(r22*sj15);
IkReal x16842=(cj16*r21);
IkReal x16843=((1.0)*cj11*cj15*sj12);
IkReal x16844=(r20*sj16);
IkReal x16845=(cj11*sj12);
IkReal x16846=(cj11*cj12*cj15);
IkReal x16847=r21*r21;
IkReal x16848=((1.0)*x16847);
IkReal x16849=r22*r22;
IkReal x16850=(((cj16*r20*sj16))*(((2.0)*r21)));
IkReal x16851=cj15*cj15;
IkReal x16852=cj16*cj16;
IkReal x16853=(cj15*r22*sj15);
IkReal x16854=r20*r20;
IkReal x16855=((1.0)*x16854);
IkReal x16856=(x16851*x16852);
CheckValue<IkReal> x16857 = IKatan2WithCheck(IkReal((((x16838*x16839))+(((-1.0)*x16843*x16844))+(((-1.0)*cj11*sj12*x16841))+(((-1.0)*x16838*x16840))+(((-1.0)*x16842*x16843)))),IkReal((((x16844*x16846))+((x16839*x16845))+((x16842*x16846))+((x16838*x16841))+(((-1.0)*x16840*x16845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16857.valid){
continue;
}
CheckValue<IkReal> x16858=IKPowWithIntegerCheck(IKsign((((x16849*x16851))+(((-1.0)*x16850*x16851))+(((-1.0)*x16852*x16855))+(((-1.0)*x16849))+(((-1.0)*x16848*x16856))+x16850+(((-1.0)*x16848))+((x16847*x16852))+(((-2.0)*r20*sj16*x16853))+((x16854*x16856))+(((-1.0)*x16851*x16855))+(((-2.0)*cj16*r21*x16853)))),-1);
if(!x16858.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x16857.value)+(((1.5707963267949)*(x16858.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x16859=IKcos(j14);
IkReal x16860=(cj16*x16859);
IkReal x16861=((1.0)*sj16*x16859);
IkReal x16862=(r22*sj15);
IkReal x16863=IKsin(j14);
IkReal x16864=((1.0)*x16863);
IkReal x16865=(cj15*r21);
IkReal x16866=((1.0)*cj16*x16863);
IkReal x16867=(cj15*r20);
IkReal x16868=((1.0)*sj16*x16863);
IkReal x16869=((1.0)*cj12);
IkReal x16870=(sj16*x16863);
IkReal x16871=((1.0)*x16859);
IkReal x16872=((1.0)*cj16*x16859);
IkReal x16873=(cj10*cj12);
IkReal x16874=(sj10*sj12);
IkReal x16875=(r12*sj15);
IkReal x16876=(cj15*r11);
IkReal x16877=(cj15*r10);
IkReal x16878=(sj10*x16869);
IkReal x16879=(cj10*sj12);
IkReal x16880=(r02*sj15);
IkReal x16881=(cj15*r01);
IkReal x16882=(cj15*r00);
evalcond[0]=((((-1.0)*r21*x16861))+(((-1.0)*x16865*x16866))+((cj11*sj12))+((r20*x16860))+(((-1.0)*x16862*x16864))+(((-1.0)*x16867*x16868)));
evalcond[1]=((((-1.0)*r20*x16866))+(((-1.0)*x16861*x16867))+(((-1.0)*x16865*x16872))+(((-1.0)*cj11*x16869))+(((-1.0)*x16862*x16871))+((r21*x16870)));
evalcond[2]=(((r10*x16860))+((sj11*x16874))+(((-1.0)*x16864*x16875))+(((-1.0)*x16866*x16876))+(((-1.0)*x16868*x16877))+(((-1.0)*r11*x16861))+x16873);
evalcond[3]=((((-1.0)*x16868*x16882))+(((-1.0)*x16864*x16880))+(((-1.0)*r01*x16861))+(((-1.0)*x16878))+(((-1.0)*x16866*x16881))+((r00*x16860))+((sj11*x16879)));
evalcond[4]=((((-1.0)*sj11*x16878))+(((-1.0)*x16871*x16875))+(((-1.0)*x16861*x16877))+(((-1.0)*x16872*x16876))+((r11*x16870))+(((-1.0)*r10*x16866))+x16879);
evalcond[5]=(((r01*x16870))+(((-1.0)*x16871*x16880))+(((-1.0)*x16861*x16882))+(((-1.0)*x16872*x16881))+(((-1.0)*x16874))+(((-1.0)*sj11*x16873))+(((-1.0)*r00*x16866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x16883=((1.0)*sj15);
IkReal x16884=(cj10*cj12);
IkReal x16885=(r21*sj16);
IkReal x16886=(cj11*cj16*sj12);
IkReal x16887=((1.0)*cj10*cj12*cj16);
IkReal x16888=(cj11*sj12*sj16);
IkReal x16889=(sj10*sj11*sj12);
IkReal x16890=(cj16*sj10*sj11*sj12);
IkReal x16891=((1.0)*r22*sj15);
IkReal x16892=((1.0)*cj15*r20*sj16);
CheckValue<IkReal> x16893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x16883))+((cj15*r02))+(((-1.0)*cj16*r01*x16883)))),-1);
if(!x16893.valid){
continue;
}
CheckValue<IkReal> x16894 = IKatan2WithCheck(IkReal((((r10*x16886))+(((-1.0)*r11*x16888))+((x16885*x16889))+(((-1.0)*r20*x16887))+((x16884*x16885))+(((-1.0)*r20*x16890)))),IkReal((((cj15*r10*x16888))+(((-1.0)*x16889*x16891))+(((-1.0)*x16889*x16892))+((((r12*sj15))*((cj11*sj12))))+(((-1.0)*x16884*x16892))+(((-1.0)*x16884*x16891))+(((-1.0)*cj15*r21*x16890))+((cj15*r11*x16886))+(((-1.0)*cj15*r21*x16887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16894.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16893.value)))+(x16894.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x16895=IKcos(j14);
IkReal x16896=(cj16*x16895);
IkReal x16897=((1.0)*sj16*x16895);
IkReal x16898=(r22*sj15);
IkReal x16899=IKsin(j14);
IkReal x16900=((1.0)*x16899);
IkReal x16901=(cj15*r21);
IkReal x16902=((1.0)*cj16*x16899);
IkReal x16903=(cj15*r20);
IkReal x16904=((1.0)*sj16*x16899);
IkReal x16905=((1.0)*cj12);
IkReal x16906=(sj16*x16899);
IkReal x16907=((1.0)*x16895);
IkReal x16908=((1.0)*cj16*x16895);
IkReal x16909=(cj10*cj12);
IkReal x16910=(sj10*sj12);
IkReal x16911=(r12*sj15);
IkReal x16912=(cj15*r11);
IkReal x16913=(cj15*r10);
IkReal x16914=(sj10*x16905);
IkReal x16915=(cj10*sj12);
IkReal x16916=(r02*sj15);
IkReal x16917=(cj15*r01);
IkReal x16918=(cj15*r00);
evalcond[0]=((((-1.0)*x16903*x16904))+(((-1.0)*r21*x16897))+((cj11*sj12))+(((-1.0)*x16898*x16900))+((r20*x16896))+(((-1.0)*x16901*x16902)));
evalcond[1]=((((-1.0)*x16898*x16907))+((r21*x16906))+(((-1.0)*x16897*x16903))+(((-1.0)*r20*x16902))+(((-1.0)*x16901*x16908))+(((-1.0)*cj11*x16905)));
evalcond[2]=((((-1.0)*r11*x16897))+(((-1.0)*x16902*x16912))+x16909+(((-1.0)*x16904*x16913))+((sj11*x16910))+(((-1.0)*x16900*x16911))+((r10*x16896)));
evalcond[3]=((((-1.0)*x16900*x16916))+((sj11*x16915))+(((-1.0)*x16902*x16917))+((r00*x16896))+(((-1.0)*x16914))+(((-1.0)*r01*x16897))+(((-1.0)*x16904*x16918)));
evalcond[4]=((((-1.0)*x16897*x16913))+(((-1.0)*x16907*x16911))+(((-1.0)*r10*x16902))+((r11*x16906))+(((-1.0)*sj11*x16914))+x16915+(((-1.0)*x16908*x16912)));
evalcond[5]=((((-1.0)*x16907*x16916))+(((-1.0)*r00*x16902))+(((-1.0)*x16910))+(((-1.0)*sj11*x16909))+(((-1.0)*x16908*x16917))+(((-1.0)*x16897*x16918))+((r01*x16906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x16919=(cj11*cj16*sj12);
IkReal x16920=(cj12*cj16*sj10);
IkReal x16921=((1.0)*sj16);
IkReal x16922=(cj10*r21*sj11*sj12);
IkReal x16923=((1.0)*cj10*sj11*sj12);
IkReal x16924=(r22*sj15);
IkReal x16925=(cj15*sj16);
CheckValue<IkReal> x16926=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x16926.valid){
continue;
}
CheckValue<IkReal> x16927 = IKatan2WithCheck(IkReal((((r00*x16919))+(((-1.0)*cj16*r20*x16923))+((r20*x16920))+((sj16*x16922))+(((-1.0)*cj11*r01*sj12*x16921))+(((-1.0)*cj12*r21*sj10*x16921)))),IkReal((((cj12*sj10*x16924))+((cj15*r01*x16919))+((cj12*r20*sj10*x16925))+(((-1.0)*cj15*cj16*x16922))+(((-1.0)*cj10*cj15*r20*sj11*sj12*sj16))+((((r02*sj15))*((cj11*sj12))))+((cj15*r21*x16920))+(((-1.0)*x16923*x16924))+((cj11*r00*sj12*x16925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16927.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16926.value)))+(x16927.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x16928=IKcos(j14);
IkReal x16929=(cj16*x16928);
IkReal x16930=((1.0)*sj16*x16928);
IkReal x16931=(r22*sj15);
IkReal x16932=IKsin(j14);
IkReal x16933=((1.0)*x16932);
IkReal x16934=(cj15*r21);
IkReal x16935=((1.0)*cj16*x16932);
IkReal x16936=(cj15*r20);
IkReal x16937=((1.0)*sj16*x16932);
IkReal x16938=((1.0)*cj12);
IkReal x16939=(sj16*x16932);
IkReal x16940=((1.0)*x16928);
IkReal x16941=((1.0)*cj16*x16928);
IkReal x16942=(cj10*cj12);
IkReal x16943=(sj10*sj12);
IkReal x16944=(r12*sj15);
IkReal x16945=(cj15*r11);
IkReal x16946=(cj15*r10);
IkReal x16947=(sj10*x16938);
IkReal x16948=(cj10*sj12);
IkReal x16949=(r02*sj15);
IkReal x16950=(cj15*r01);
IkReal x16951=(cj15*r00);
evalcond[0]=((((-1.0)*x16931*x16933))+((cj11*sj12))+(((-1.0)*x16936*x16937))+(((-1.0)*r21*x16930))+((r20*x16929))+(((-1.0)*x16934*x16935)));
evalcond[1]=((((-1.0)*x16934*x16941))+(((-1.0)*x16931*x16940))+(((-1.0)*x16930*x16936))+((r21*x16939))+(((-1.0)*cj11*x16938))+(((-1.0)*r20*x16935)));
evalcond[2]=((((-1.0)*x16935*x16945))+(((-1.0)*x16933*x16944))+((r10*x16929))+(((-1.0)*r11*x16930))+(((-1.0)*x16937*x16946))+x16942+((sj11*x16943)));
evalcond[3]=((((-1.0)*r01*x16930))+(((-1.0)*x16933*x16949))+(((-1.0)*x16935*x16950))+(((-1.0)*x16947))+((sj11*x16948))+(((-1.0)*x16937*x16951))+((r00*x16929)));
evalcond[4]=((((-1.0)*x16941*x16945))+(((-1.0)*r10*x16935))+(((-1.0)*x16940*x16944))+(((-1.0)*sj11*x16947))+((r11*x16939))+x16948+(((-1.0)*x16930*x16946)));
evalcond[5]=((((-1.0)*x16930*x16951))+(((-1.0)*r00*x16935))+(((-1.0)*x16940*x16949))+(((-1.0)*x16941*x16950))+(((-1.0)*sj11*x16942))+((r01*x16939))+(((-1.0)*x16943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x16952=((1.0)*cj15);
IkReal x16953=(cj16*sj15);
IkReal x16954=(sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs(((((-1.0)*r02*x16952))+((r01*x16953))+((r00*x16954)))))+(IKabs((((r10*x16954))+(((-1.0)*r12*x16952))+((r11*x16953))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x16955=r21*r21;
IkReal x16956=((1.0)*x16955);
IkReal x16957=r22*r22;
IkReal x16958=(cj16*r20);
IkReal x16959=((2.0)*r21*sj16*x16958);
IkReal x16960=cj15*cj15;
IkReal x16961=cj16*cj16;
IkReal x16962=(cj16*r21);
IkReal x16963=((2.0)*cj15*r22*sj15);
IkReal x16964=(r20*sj16);
IkReal x16965=r20*r20;
IkReal x16966=((1.0)*x16965);
IkReal x16967=(x16960*x16961);
IkReal x16968=((((-1.0)*x16961*x16966))+(((-1.0)*x16960*x16966))+(((-1.0)*x16956*x16967))+(((-1.0)*x16957))+((x16965*x16967))+(((-1.0)*x16956))+(((-1.0)*x16962*x16963))+((x16955*x16961))+((x16957*x16960))+x16959+(((-1.0)*x16963*x16964))+(((-1.0)*x16959*x16960)));
IkReal x16969=(r21*sj16);
IkReal x16970=((1.0)*cj11*cj12);
IkReal x16971=(r22*sj15);
IkReal x16972=((1.0)*cj11*sj12);
IkReal x16973=((1.0)*cj11*cj15*sj12);
IkReal x16974=((1.0)*cj11*cj12*cj15);
j14eval[0]=x16968;
j14eval[1]=IKsign(x16968);
j14eval[2]=((IKabs(((((-1.0)*x16964*x16974))+(((-1.0)*x16969*x16972))+(((-1.0)*x16970*x16971))+((cj11*sj12*x16958))+(((-1.0)*x16962*x16974)))))+(IKabs(((((-1.0)*x16971*x16972))+((cj11*cj12*x16969))+(((-1.0)*x16958*x16970))+(((-1.0)*x16962*x16973))+(((-1.0)*x16964*x16973))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=(cj11+(((5.28144927536232)*(cj11*cj11)))+(((-1.0)*(1.0)*cj11*cj12*sj11)));
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j10eval[0]=((1.0)+(((-1.0)*(1.0)*cj12)));
j10eval[1]=IKsign(((9522.0)+(((-1.0)*(9522.0)*cj12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j14eval[0]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x16975=((1.0)*r21);
j14eval[0]=((IKabs((((cj16*r20))+(((-1.0)*sj16*x16975)))))+(IKabs(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*cj15*cj16*x16975))+(((-1.0)*(1.0)*r22*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
IkReal x16976=((1.0)*r21);
CheckValue<IkReal> x16978 = IKatan2WithCheck(IkReal((((cj16*r20))+(((-1.0)*sj16*x16976)))),IkReal(((((-1.0)*cj15*cj16*x16976))+(((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*(1.0)*r22*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16978.valid){
continue;
}
IkReal x16977=((-1.0)*(x16978.value));
j14array[0]=x16977;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+x16977);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
IkReal x16979=IKsin(j14);
IkReal x16980=IKcos(j14);
IkReal x16981=(cj15*x16980);
evalcond[0]=(((r22*sj15*x16980))+((r20*sj16*x16981))+(((-1.0)*r21*sj16*x16979))+((cj16*r20*x16979))+((cj16*r21*x16981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x16982=(cj12*cj14*sj15);
IkReal x16983=(cj12*cj16*sj14);
IkReal x16984=(cj14*sj12*sj15);
IkReal x16985=(cj16*sj12*sj14);
IkReal x16986=(r11*sj16);
IkReal x16987=((1.0)*cj12*sj14);
IkReal x16988=(r01*sj16);
IkReal x16989=(cj12*cj14*cj15*cj16);
IkReal x16990=(cj12*cj14*cj15*sj16);
IkReal x16991=(cj14*cj15*cj16*sj12);
IkReal x16992=(cj14*cj15*sj12*sj16);
IkReal x16993=((1.0)*r10);
if( IKabs((((r02*x16984))+((r00*x16985))+((r11*x16989))+((r00*x16992))+((r10*x16990))+(((-1.0)*x16986*x16987))+((r01*x16991))+(((-1.0)*sj12*sj14*x16988))+((r12*x16982))+((r10*x16983)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj12*sj14*x16986))+(((-1.0)*r12*x16984))+((r00*x16990))+(((-1.0)*x16987*x16988))+(((-1.0)*r11*x16991))+((r00*x16983))+((r01*x16989))+(((-1.0)*x16985*x16993))+((r02*x16982))+(((-1.0)*x16992*x16993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x16984))+((r00*x16985))+((r11*x16989))+((r00*x16992))+((r10*x16990))+(((-1.0)*x16986*x16987))+((r01*x16991))+(((-1.0)*sj12*sj14*x16988))+((r12*x16982))+((r10*x16983))))+IKsqr((((sj12*sj14*x16986))+(((-1.0)*r12*x16984))+((r00*x16990))+(((-1.0)*x16987*x16988))+(((-1.0)*r11*x16991))+((r00*x16983))+((r01*x16989))+(((-1.0)*x16985*x16993))+((r02*x16982))+(((-1.0)*x16992*x16993))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r02*x16984))+((r00*x16985))+((r11*x16989))+((r00*x16992))+((r10*x16990))+(((-1.0)*x16986*x16987))+((r01*x16991))+(((-1.0)*sj12*sj14*x16988))+((r12*x16982))+((r10*x16983))), (((sj12*sj14*x16986))+(((-1.0)*r12*x16984))+((r00*x16990))+(((-1.0)*x16987*x16988))+(((-1.0)*r11*x16991))+((r00*x16983))+((r01*x16989))+(((-1.0)*x16985*x16993))+((r02*x16982))+(((-1.0)*x16992*x16993))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x16994=IKcos(j10);
IkReal x16995=(sj12*x16994);
IkReal x16996=IKsin(j10);
IkReal x16997=(x16995+(((-1.0)*cj12*x16996)));
IkReal x16998=(cj14*sj15);
IkReal x16999=(cj16*sj14);
IkReal x17000=((1.0)*sj14*sj16);
IkReal x17001=(cj14*cj15*cj16);
IkReal x17002=(cj14*cj15*sj16);
IkReal x17003=(cj12*x16994);
IkReal x17004=(sj12*x16996);
IkReal x17005=(cj14*cj16);
IkReal x17006=((1.0)*cj14*sj16);
IkReal x17007=((1.0)*sj14*sj15);
IkReal x17008=((1.0)*cj15*cj16*sj14);
IkReal x17009=((1.0)*cj15*sj14*sj16);
IkReal x17010=((0.37429)*cj15);
IkReal x17011=((0.01)*sj15);
IkReal x17012=((0.01)*cj15*cj16);
IkReal x17013=((0.01)*cj15*sj16);
IkReal x17014=((0.37429)*cj16*sj15);
IkReal x17015=((0.37429)*sj15*sj16);
IkReal x17016=((0.069)*x16996);
evalcond[0]=((((-1.0)*r11*x17000))+((r12*x16998))+x16997+((r10*x17002))+((r10*x16999))+((r11*x17001)));
evalcond[1]=(((r01*x17001))+(((-1.0)*x17004))+((r00*x17002))+((r02*x16998))+((r00*x16999))+(((-1.0)*r01*x17000))+(((-1.0)*x17003)));
evalcond[2]=((((-1.0)*r12*x17007))+x17004+x17003+(((-1.0)*r11*x17006))+(((-1.0)*r11*x17008))+((r10*x17005))+(((-1.0)*r10*x17009)));
evalcond[3]=((((-1.0)*r01*x17006))+(((-1.0)*r01*x17008))+((r00*x17005))+(((-1.0)*r02*x17007))+x16997+(((-1.0)*r00*x17009)));
evalcond[4]=((((0.069)*x16994))+(((-1.0)*(1.0)*px))+((r02*x17010))+((r01*x17012))+((r00*x17013))+(((-1.0)*r01*x17014))+(((-1.0)*r00*x17015))+(((-0.069)*x17003))+((r02*x17011))+(((-0.069)*x17004)));
evalcond[5]=((((0.069)*x16995))+(((-1.0)*(1.0)*py))+((r12*x17011))+((r11*x17012))+(((-1.0)*r11*x17014))+(((-1.0)*r10*x17015))+x17016+(((-1.0)*cj12*x17016))+((r10*x17013))+((r12*x17010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x17018 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17018.valid){
continue;
}
IkReal x17017=((-1.0)*(x17018.value));
j14array[0]=x17017;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+x17017);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
IkReal x17019=IKcos(j14);
IkReal x17020=((1.0)*r21);
IkReal x17021=IKsin(j14);
IkReal x17022=((1.0)*x17021);
evalcond[0]=((((-1.0)*cj15*r20*sj16*x17022))+(((-1.0)*r22*sj15*x17022))+(((-1.0)*cj15*cj16*x17020*x17021))+((cj16*r20*x17019))+(((-1.0)*sj16*x17019*x17020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17023=(cj12*cj14*sj15);
IkReal x17024=(cj12*cj16*sj14);
IkReal x17025=(cj14*sj12*sj15);
IkReal x17026=(cj16*sj12*sj14);
IkReal x17027=(r11*sj16);
IkReal x17028=((1.0)*cj12*sj14);
IkReal x17029=(r01*sj16);
IkReal x17030=(cj12*cj14*cj15*cj16);
IkReal x17031=(cj12*cj14*cj15*sj16);
IkReal x17032=(cj14*cj15*cj16*sj12);
IkReal x17033=(cj14*cj15*sj12*sj16);
IkReal x17034=((1.0)*r10);
if( IKabs((((r00*x17033))+((r12*x17023))+((r02*x17025))+((r10*x17031))+((r00*x17026))+(((-1.0)*x17027*x17028))+(((-1.0)*sj12*sj14*x17029))+((r11*x17030))+((r01*x17032))+((r10*x17024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x17026*x17034))+((r02*x17023))+(((-1.0)*x17028*x17029))+(((-1.0)*r12*x17025))+(((-1.0)*r11*x17032))+((r01*x17030))+((r00*x17031))+((sj12*sj14*x17027))+((r00*x17024))+(((-1.0)*x17033*x17034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x17033))+((r12*x17023))+((r02*x17025))+((r10*x17031))+((r00*x17026))+(((-1.0)*x17027*x17028))+(((-1.0)*sj12*sj14*x17029))+((r11*x17030))+((r01*x17032))+((r10*x17024))))+IKsqr(((((-1.0)*x17026*x17034))+((r02*x17023))+(((-1.0)*x17028*x17029))+(((-1.0)*r12*x17025))+(((-1.0)*r11*x17032))+((r01*x17030))+((r00*x17031))+((sj12*sj14*x17027))+((r00*x17024))+(((-1.0)*x17033*x17034))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r00*x17033))+((r12*x17023))+((r02*x17025))+((r10*x17031))+((r00*x17026))+(((-1.0)*x17027*x17028))+(((-1.0)*sj12*sj14*x17029))+((r11*x17030))+((r01*x17032))+((r10*x17024))), ((((-1.0)*x17026*x17034))+((r02*x17023))+(((-1.0)*x17028*x17029))+(((-1.0)*r12*x17025))+(((-1.0)*r11*x17032))+((r01*x17030))+((r00*x17031))+((sj12*sj14*x17027))+((r00*x17024))+(((-1.0)*x17033*x17034))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x17035=IKcos(j10);
IkReal x17036=(sj12*x17035);
IkReal x17037=IKsin(j10);
IkReal x17038=(x17036+(((-1.0)*cj12*x17037)));
IkReal x17039=(cj14*sj15);
IkReal x17040=(cj16*sj14);
IkReal x17041=((1.0)*sj14*sj16);
IkReal x17042=(cj14*cj15*cj16);
IkReal x17043=(cj14*cj15*sj16);
IkReal x17044=(cj12*x17035);
IkReal x17045=(sj12*x17037);
IkReal x17046=(cj14*cj16);
IkReal x17047=((1.0)*cj14*sj16);
IkReal x17048=((1.0)*sj14*sj15);
IkReal x17049=((1.0)*cj15*cj16*sj14);
IkReal x17050=((1.0)*cj15*sj14*sj16);
IkReal x17051=((0.37429)*cj15);
IkReal x17052=((0.01)*sj15);
IkReal x17053=((0.01)*cj15*cj16);
IkReal x17054=((0.01)*cj15*sj16);
IkReal x17055=((0.37429)*cj16*sj15);
IkReal x17056=((0.37429)*sj15*sj16);
IkReal x17057=((0.069)*x17037);
evalcond[0]=(((r11*x17042))+((r10*x17043))+x17038+((r12*x17039))+(((-1.0)*r11*x17041))+((r10*x17040)));
evalcond[1]=((((-1.0)*r01*x17041))+(((-1.0)*x17044))+((r01*x17042))+(((-1.0)*x17045))+((r00*x17043))+((r00*x17040))+((r02*x17039)));
evalcond[2]=((((-1.0)*r11*x17049))+((r10*x17046))+(((-1.0)*r11*x17047))+(((-1.0)*r12*x17048))+(((-1.0)*r10*x17050))+x17045+x17044);
evalcond[3]=((((-1.0)*r00*x17050))+x17038+(((-1.0)*r01*x17047))+((r00*x17046))+(((-1.0)*r01*x17049))+(((-1.0)*r02*x17048)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r02*x17051))+(((-1.0)*r00*x17056))+(((-0.069)*x17044))+(((-0.069)*x17045))+((r00*x17054))+((r01*x17053))+(((-1.0)*r01*x17055))+((r02*x17052))+(((0.069)*x17035)));
evalcond[5]=((((-1.0)*(1.0)*py))+(((-1.0)*cj12*x17057))+((r12*x17052))+(((-1.0)*r11*x17055))+(((-1.0)*r10*x17056))+((r10*x17054))+((r12*x17051))+((r11*x17053))+(((0.069)*x17036))+x17057);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17058=((69000.0)*py);
IkReal x17059=((25826.01)*cj15);
IkReal x17060=(r12*x17059);
IkReal x17061=((69000.0)*px);
IkReal x17062=((690.0)*sj15);
IkReal x17063=(r12*x17062);
IkReal x17064=((690.0)*cj15*cj16);
IkReal x17065=(r11*x17064);
IkReal x17066=(r02*x17059);
IkReal x17067=((690.0)*cj15*sj16);
IkReal x17068=(r10*x17067);
IkReal x17069=((25826.01)*cj16*sj15);
IkReal x17070=(r11*x17069);
IkReal x17071=(r02*x17062);
IkReal x17072=((25826.01)*sj15*sj16);
IkReal x17073=(r10*x17072);
IkReal x17074=(r01*x17064);
IkReal x17075=(r00*x17067);
IkReal x17076=(r01*x17069);
IkReal x17077=(r00*x17072);
CheckValue<IkReal> x17078=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-1.0)*(9522.0)*cj12)))),-1);
if(!x17078.valid){
continue;
}
CheckValue<IkReal> x17079 = IKatan2WithCheck(IkReal((((cj12*x17068))+(((-1.0)*sj12*x17077))+((cj12*x17063))+((sj12*x17071))+((sj12*x17066))+(((-1.0)*x17063))+((cj12*x17065))+(((-1.0)*x17065))+(((-1.0)*sj12*x17076))+((cj12*x17060))+(((-1.0)*x17068))+((sj12*x17075))+((sj12*x17074))+(((-1.0)*cj12*x17070))+(((-1.0)*sj12*x17061))+(((-1.0)*cj12*x17058))+(((-1.0)*cj12*x17073))+x17058+(((-1.0)*x17060))+x17073+x17070)),IkReal((((sj12*x17070))+(((-1.0)*sj12*x17068))+(((-1.0)*x17075))+(((-1.0)*cj12*x17076))+((sj12*x17058))+(((-1.0)*cj12*x17061))+((cj12*x17075))+(((-1.0)*x17071))+((sj12*x17073))+(((-1.0)*cj12*x17077))+(((-1.0)*sj12*x17060))+((cj12*x17074))+(((-1.0)*sj12*x17063))+(((-1.0)*x17066))+((cj12*x17066))+(((-1.0)*x17074))+x17061+(((-1.0)*sj12*x17065))+x17077+x17076+((cj12*x17071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17079.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17078.value)))+(x17079.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x17080=((0.37429)*cj15);
IkReal x17081=((0.01)*sj15);
IkReal x17082=((0.069)*(IKcos(j10)));
IkReal x17083=((0.069)*(IKsin(j10)));
IkReal x17084=((0.01)*cj15*cj16);
IkReal x17085=((0.01)*cj15*sj16);
IkReal x17086=((0.37429)*cj16*sj15);
IkReal x17087=((0.37429)*sj15*sj16);
evalcond[0]=(((r02*x17081))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x17087))+((r02*x17080))+((r00*x17085))+x17082+(((-1.0)*sj12*x17083))+(((-1.0)*r01*x17086))+(((-1.0)*cj12*x17082))+((r01*x17084)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*r10*x17087))+((r10*x17085))+x17083+((r12*x17081))+((r12*x17080))+(((-1.0)*cj12*x17083))+((sj12*x17082))+((r11*x17084))+(((-1.0)*r11*x17086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x17088=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x17088;
j14eval[1]=IKsign(x17088);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x17089=((1.0)*sj15);
IkReal x17090=((((-1.0)*cj16*r01*x17089))+(((-1.0)*r00*sj16*x17089))+((cj15*r02)));
j14eval[0]=x17090;
j14eval[1]=IKsign(x17090);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x17091=(r01*r21);
IkReal x17092=((1.0)*x17091);
IkReal x17093=(r02*r22);
IkReal x17094=(cj16*sj16);
IkReal x17095=(r00*r21*x17094);
IkReal x17096=(r01*r20*x17094);
IkReal x17097=cj15*cj15;
IkReal x17098=cj16*cj16;
IkReal x17099=((1.0)*r00*r20);
IkReal x17100=((1.0)*cj15*cj16*sj15);
IkReal x17101=((1.0)*cj15*sj15*sj16);
IkReal x17102=(x17097*x17098);
IkReal x17103=((1.0)*x17097);
IkReal x17104=((((-1.0)*x17093))+(((-1.0)*x17095*x17103))+((r00*r20*x17102))+(((-1.0)*r02*r20*x17101))+(((-1.0)*x17092*x17102))+x17096+x17095+((x17091*x17098))+(((-1.0)*r02*r21*x17100))+(((-1.0)*x17097*x17099))+(((-1.0)*r00*r22*x17101))+(((-1.0)*r01*r22*x17100))+(((-1.0)*x17098*x17099))+(((-1.0)*x17092))+((x17093*x17097))+(((-1.0)*x17096*x17103)));
j14eval[0]=x17104;
j14eval[1]=IKsign(x17104);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17105=(cj12*sj10);
IkReal x17106=(r22*sj15);
IkReal x17107=((1.0)*cj10*sj12);
IkReal x17108=(cj16*r21);
IkReal x17109=(cj12*cj15*sj10);
IkReal x17110=(r20*sj16);
IkReal x17111=((1.0)*cj10*cj15*sj12);
IkReal x17112=(cj16*r20);
IkReal x17113=(r21*sj16);
IkReal x17114=(r01*r21);
IkReal x17115=((1.0)*x17114);
IkReal x17116=(r02*r22);
IkReal x17117=(cj16*r00*x17113);
IkReal x17118=(r01*sj16*x17112);
IkReal x17119=cj15*cj15;
IkReal x17120=cj16*cj16;
IkReal x17121=((1.0)*r00*r20);
IkReal x17122=((1.0)*cj15*r22*sj15);
IkReal x17123=((1.0)*cj15*r02*sj15);
IkReal x17124=(x17119*x17120);
IkReal x17125=((1.0)*x17119);
CheckValue<IkReal> x17126 = IKatan2WithCheck(IkReal(((((-1.0)*x17110*x17111))+((x17105*x17106))+(((-1.0)*x17106*x17107))+(((-1.0)*x17108*x17111))+((x17109*x17110))+((x17108*x17109)))),IkReal((((cj10*sj12*x17112))+(((-1.0)*cj16*r20*x17105))+(((-1.0)*x17107*x17113))+((x17105*x17113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17126.valid){
continue;
}
CheckValue<IkReal> x17127=IKPowWithIntegerCheck(IKsign(((((-1.0)*x17110*x17123))+(((-1.0)*x17118*x17125))+(((-1.0)*x17119*x17121))+(((-1.0)*cj16*r01*x17122))+(((-1.0)*x17115))+(((-1.0)*x17115*x17124))+((x17114*x17120))+(((-1.0)*r00*sj16*x17122))+(((-1.0)*x17116))+((r00*r20*x17124))+((x17116*x17119))+x17118+x17117+(((-1.0)*x17117*x17125))+(((-1.0)*x17108*x17123))+(((-1.0)*x17120*x17121)))),-1);
if(!x17127.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17126.value)+(((1.5707963267949)*(x17127.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17128=IKsin(j14);
IkReal x17129=(cj16*r20);
IkReal x17130=IKcos(j14);
IkReal x17131=(sj15*x17130);
IkReal x17132=(r21*sj16);
IkReal x17133=((1.0)*x17128);
IkReal x17134=(cj15*cj16*x17130);
IkReal x17135=(cj15*sj16*x17130);
IkReal x17136=((1.0)*x17130);
IkReal x17137=((1.0)*sj15*x17128);
IkReal x17138=((1.0)*cj15*cj16*x17128);
IkReal x17139=((1.0)*cj15*sj16*x17128);
IkReal x17140=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x17141=(cj16*r10);
IkReal x17142=(r11*sj16);
IkReal x17143=(cj10*cj12);
IkReal x17144=(sj10*sj12);
IkReal x17145=(cj16*r00);
IkReal x17146=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x17132*x17133))+((r22*x17131))+((x17128*x17129))+((r21*x17134))+((r20*x17135)));
evalcond[1]=((((-1.0)*r22*x17137))+(((-1.0)*x17132*x17136))+((x17129*x17130))+(((-1.0)*r20*x17139))+(((-1.0)*r21*x17138)));
evalcond[2]=(((x17128*x17141))+(((-1.0)*x17133*x17142))+x17140+((r11*x17134))+((r10*x17135))+((r12*x17131)));
evalcond[3]=((((-1.0)*x17128*x17146))+((r01*x17134))+(((-1.0)*x17143))+(((-1.0)*x17144))+((r02*x17131))+((x17128*x17145))+((r00*x17135)));
evalcond[4]=((((-1.0)*x17136*x17142))+((x17130*x17141))+x17143+x17144+(((-1.0)*r10*x17139))+(((-1.0)*r12*x17137))+(((-1.0)*r11*x17138)));
evalcond[5]=((((-1.0)*r02*x17137))+((x17130*x17145))+(((-1.0)*r00*x17139))+(((-1.0)*x17130*x17146))+x17140+(((-1.0)*r01*x17138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17147=((1.0)*sj15);
IkReal x17148=(cj12*sj10);
IkReal x17149=(cj10*sj12);
IkReal x17150=(cj16*r21);
IkReal x17151=(cj12*cj15*sj10);
IkReal x17152=(r20*sj16);
IkReal x17153=((1.0)*cj10*cj15*sj12);
IkReal x17154=(r21*sj16);
CheckValue<IkReal> x17155 = IKatan2WithCheck(IkReal((((r22*sj15*x17148))+((x17150*x17151))+(((-1.0)*x17152*x17153))+(((-1.0)*r22*sj15*x17149))+((x17151*x17152))+(((-1.0)*x17150*x17153)))),IkReal(((((-1.0)*cj10*sj12*x17154))+(((-1.0)*cj16*r20*x17148))+((x17148*x17154))+((cj16*r20*x17149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17155.valid){
continue;
}
CheckValue<IkReal> x17156=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x17147))+((cj15*r02))+(((-1.0)*r00*sj16*x17147)))),-1);
if(!x17156.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17155.value)+(((1.5707963267949)*(x17156.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17157=IKsin(j14);
IkReal x17158=(cj16*r20);
IkReal x17159=IKcos(j14);
IkReal x17160=(sj15*x17159);
IkReal x17161=(r21*sj16);
IkReal x17162=((1.0)*x17157);
IkReal x17163=(cj15*cj16*x17159);
IkReal x17164=(cj15*sj16*x17159);
IkReal x17165=((1.0)*x17159);
IkReal x17166=((1.0)*sj15*x17157);
IkReal x17167=((1.0)*cj15*cj16*x17157);
IkReal x17168=((1.0)*cj15*sj16*x17157);
IkReal x17169=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x17170=(cj16*r10);
IkReal x17171=(r11*sj16);
IkReal x17172=(cj10*cj12);
IkReal x17173=(sj10*sj12);
IkReal x17174=(cj16*r00);
IkReal x17175=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x17161*x17162))+((r22*x17160))+((r21*x17163))+((r20*x17164))+((x17157*x17158)));
evalcond[1]=((((-1.0)*r22*x17166))+((x17158*x17159))+(((-1.0)*r20*x17168))+(((-1.0)*r21*x17167))+(((-1.0)*x17161*x17165)));
evalcond[2]=(x17169+((r12*x17160))+((x17157*x17170))+((r11*x17163))+((r10*x17164))+(((-1.0)*x17162*x17171)));
evalcond[3]=((((-1.0)*x17172))+((r00*x17164))+(((-1.0)*x17157*x17175))+((x17157*x17174))+((r01*x17163))+((r02*x17160))+(((-1.0)*x17173)));
evalcond[4]=(x17172+x17173+(((-1.0)*r10*x17168))+(((-1.0)*r12*x17166))+(((-1.0)*x17165*x17171))+((x17159*x17170))+(((-1.0)*r11*x17167)));
evalcond[5]=(((x17159*x17174))+(((-1.0)*r00*x17168))+x17169+(((-1.0)*r02*x17166))+(((-1.0)*r01*x17167))+(((-1.0)*x17159*x17175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17176=(cj10*cj12);
IkReal x17177=(r22*sj15);
IkReal x17178=(sj10*sj12);
IkReal x17179=(cj16*r21);
IkReal x17180=(cj10*cj12*cj15);
IkReal x17181=(r20*sj16);
IkReal x17182=(cj15*sj10*sj12);
IkReal x17183=(r21*sj16);
IkReal x17184=((1.0)*cj16*r20);
CheckValue<IkReal> x17185 = IKatan2WithCheck(IkReal((((x17179*x17180))+((x17179*x17182))+((x17180*x17181))+((x17176*x17177))+((x17177*x17178))+((x17181*x17182)))),IkReal(((((-1.0)*x17176*x17184))+(((-1.0)*x17178*x17184))+((x17176*x17183))+((x17178*x17183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17185.valid){
continue;
}
CheckValue<IkReal> x17186=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x17186.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17185.value)+(((1.5707963267949)*(x17186.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17187=IKsin(j14);
IkReal x17188=(cj16*r20);
IkReal x17189=IKcos(j14);
IkReal x17190=(sj15*x17189);
IkReal x17191=(r21*sj16);
IkReal x17192=((1.0)*x17187);
IkReal x17193=(cj15*cj16*x17189);
IkReal x17194=(cj15*sj16*x17189);
IkReal x17195=((1.0)*x17189);
IkReal x17196=((1.0)*sj15*x17187);
IkReal x17197=((1.0)*cj15*cj16*x17187);
IkReal x17198=((1.0)*cj15*sj16*x17187);
IkReal x17199=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x17200=(cj16*r10);
IkReal x17201=(r11*sj16);
IkReal x17202=(cj10*cj12);
IkReal x17203=(sj10*sj12);
IkReal x17204=(cj16*r00);
IkReal x17205=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x17191*x17192))+((r20*x17194))+((r21*x17193))+((r22*x17190))+((x17187*x17188)));
evalcond[1]=((((-1.0)*r22*x17196))+(((-1.0)*r21*x17197))+(((-1.0)*x17191*x17195))+((x17188*x17189))+(((-1.0)*r20*x17198)));
evalcond[2]=((((-1.0)*x17192*x17201))+x17199+((x17187*x17200))+((r10*x17194))+((r12*x17190))+((r11*x17193)));
evalcond[3]=((((-1.0)*x17202))+(((-1.0)*x17187*x17205))+((r00*x17194))+((x17187*x17204))+((r02*x17190))+((r01*x17193))+(((-1.0)*x17203)));
evalcond[4]=((((-1.0)*r12*x17196))+(((-1.0)*r10*x17198))+(((-1.0)*r11*x17197))+x17203+x17202+(((-1.0)*x17195*x17201))+((x17189*x17200)));
evalcond[5]=(x17199+(((-1.0)*r02*x17196))+(((-1.0)*r00*x17198))+(((-1.0)*x17189*x17205))+((x17189*x17204))+(((-1.0)*r01*x17197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j10eval[0]=((1.0)+cj12);
j10eval[1]=IKsign(((9522.0)+(((9522.0)*cj12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j14eval[0]=((IKabs((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))))+(IKabs((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x17206=((1.0)*r21);
j14eval[0]=((IKabs(((((-1.0)*sj16*x17206))+((cj16*r20)))))+(IKabs(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*cj15*cj16*x17206))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
IkReal x17207=((1.0)*r21);
CheckValue<IkReal> x17209 = IKatan2WithCheck(IkReal(((((-1.0)*sj16*x17207))+((cj16*r20)))),IkReal(((((-1.0)*(1.0)*cj15*r20*sj16))+(((-1.0)*(1.0)*r22*sj15))+(((-1.0)*cj15*cj16*x17207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17209.valid){
continue;
}
IkReal x17208=((-1.0)*(x17209.value));
j14array[0]=x17208;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+x17208);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
IkReal x17210=IKsin(j14);
IkReal x17211=IKcos(j14);
IkReal x17212=(cj15*x17211);
evalcond[0]=(((cj16*r21*x17212))+(((-1.0)*r21*sj16*x17210))+((cj16*r20*x17210))+((r20*sj16*x17212))+((r22*sj15*x17211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17213=(cj12*sj14*sj16);
IkReal x17214=(cj14*r02*sj15);
IkReal x17215=(cj16*r00);
IkReal x17216=((1.0)*cj12);
IkReal x17217=(cj14*r12*sj15);
IkReal x17218=(cj16*r10);
IkReal x17219=((1.0)*cj12*sj14);
IkReal x17220=(sj12*sj14*sj16);
IkReal x17221=(cj16*r01);
IkReal x17222=(cj14*cj15*sj12);
IkReal x17223=(r00*sj16);
IkReal x17224=(cj16*r11);
IkReal x17225=((1.0)*cj12*cj14*cj15);
IkReal x17226=(r10*sj16);
IkReal x17227=((1.0)*cj14*cj15*sj12);
if( IKabs((((x17222*x17223))+((x17221*x17222))+(((-1.0)*x17218*x17219))+(((-1.0)*x17216*x17217))+((sj12*x17214))+((sj12*sj14*x17215))+(((-1.0)*x17225*x17226))+(((-1.0)*r01*x17220))+((r11*x17213))+(((-1.0)*x17224*x17225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x17226*x17227))+(((-1.0)*sj12*sj14*x17218))+(((-1.0)*x17214*x17216))+(((-1.0)*x17215*x17219))+(((-1.0)*x17224*x17227))+(((-1.0)*sj12*x17217))+(((-1.0)*x17223*x17225))+((r01*x17213))+(((-1.0)*x17221*x17225))+((r11*x17220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x17222*x17223))+((x17221*x17222))+(((-1.0)*x17218*x17219))+(((-1.0)*x17216*x17217))+((sj12*x17214))+((sj12*sj14*x17215))+(((-1.0)*x17225*x17226))+(((-1.0)*r01*x17220))+((r11*x17213))+(((-1.0)*x17224*x17225))))+IKsqr(((((-1.0)*x17226*x17227))+(((-1.0)*sj12*sj14*x17218))+(((-1.0)*x17214*x17216))+(((-1.0)*x17215*x17219))+(((-1.0)*x17224*x17227))+(((-1.0)*sj12*x17217))+(((-1.0)*x17223*x17225))+((r01*x17213))+(((-1.0)*x17221*x17225))+((r11*x17220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x17222*x17223))+((x17221*x17222))+(((-1.0)*x17218*x17219))+(((-1.0)*x17216*x17217))+((sj12*x17214))+((sj12*sj14*x17215))+(((-1.0)*x17225*x17226))+(((-1.0)*r01*x17220))+((r11*x17213))+(((-1.0)*x17224*x17225))), ((((-1.0)*x17226*x17227))+(((-1.0)*sj12*sj14*x17218))+(((-1.0)*x17214*x17216))+(((-1.0)*x17215*x17219))+(((-1.0)*x17224*x17227))+(((-1.0)*sj12*x17217))+(((-1.0)*x17223*x17225))+((r01*x17213))+(((-1.0)*x17221*x17225))+((r11*x17220))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x17228=IKsin(j10);
IkReal x17229=(cj12*x17228);
IkReal x17230=IKcos(j10);
IkReal x17231=(sj12*x17230);
IkReal x17232=(cj14*sj15);
IkReal x17233=(cj16*sj14);
IkReal x17234=((1.0)*sj14*sj16);
IkReal x17235=(cj14*cj15*cj16);
IkReal x17236=(cj14*cj15*sj16);
IkReal x17237=(cj12*x17230);
IkReal x17238=(x17237+(((-1.0)*sj12*x17228)));
IkReal x17239=(cj14*cj16);
IkReal x17240=((1.0)*cj14*sj16);
IkReal x17241=((1.0)*sj14*sj15);
IkReal x17242=((1.0)*cj15*cj16*sj14);
IkReal x17243=((1.0)*cj15*sj14*sj16);
IkReal x17244=((0.37429)*cj15);
IkReal x17245=((0.01)*sj15);
IkReal x17246=((0.069)*x17228);
IkReal x17247=((0.01)*cj15*cj16);
IkReal x17248=((0.01)*cj15*sj16);
IkReal x17249=((0.37429)*cj16*sj15);
IkReal x17250=((0.37429)*sj15*sj16);
evalcond[0]=(((r12*x17232))+x17229+(((-1.0)*r11*x17234))+((r10*x17236))+((r11*x17235))+x17231+((r10*x17233)));
evalcond[1]=((((-1.0)*r01*x17234))+((r00*x17236))+((r00*x17233))+x17238+((r01*x17235))+((r02*x17232)));
evalcond[2]=((((-1.0)*r12*x17241))+(((-1.0)*r11*x17240))+x17238+((r10*x17239))+(((-1.0)*r10*x17243))+(((-1.0)*r11*x17242)));
evalcond[3]=((((-1.0)*r00*x17243))+(((-1.0)*x17231))+(((-1.0)*r01*x17242))+((r00*x17239))+(((-1.0)*r02*x17241))+(((-1.0)*x17229))+(((-1.0)*r01*x17240)));
evalcond[4]=((((0.069)*x17230))+(((-1.0)*(1.0)*px))+((r00*x17248))+((r02*x17245))+((r01*x17247))+(((-1.0)*r01*x17249))+(((0.069)*x17237))+((r02*x17244))+(((-1.0)*r00*x17250))+(((-1.0)*sj12*x17246)));
evalcond[5]=(((r12*x17244))+((r11*x17247))+(((-1.0)*(1.0)*py))+((r12*x17245))+x17246+(((-1.0)*r11*x17249))+(((0.069)*x17231))+(((0.069)*x17229))+((r10*x17248))+(((-1.0)*r10*x17250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x17252 = IKatan2WithCheck(IkReal((((r22*sj15))+((cj15*r20*sj16))+((cj15*cj16*r21)))),IkReal((((cj16*r20))+(((-1.0)*(1.0)*r21*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17252.valid){
continue;
}
IkReal x17251=((-1.0)*(x17252.value));
j14array[0]=x17251;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
j14array[1]=((3.14159265358979)+x17251);
sj14array[1]=IKsin(j14array[1]);
cj14array[1]=IKcos(j14array[1]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
if( j14array[1] > IKPI )
{
    j14array[1]-=IK2PI;
}
else if( j14array[1] < -IKPI )
{    j14array[1]+=IK2PI;
}
j14valid[1] = true;
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
IkReal x17253=IKcos(j14);
IkReal x17254=((1.0)*r21);
IkReal x17255=IKsin(j14);
IkReal x17256=((1.0)*x17255);
evalcond[0]=(((cj16*r20*x17253))+(((-1.0)*r22*sj15*x17256))+(((-1.0)*sj16*x17253*x17254))+(((-1.0)*cj15*cj16*x17254*x17255))+(((-1.0)*cj15*r20*sj16*x17256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17257=(cj12*sj14*sj16);
IkReal x17258=(cj14*r02*sj15);
IkReal x17259=(cj16*r00);
IkReal x17260=((1.0)*cj12);
IkReal x17261=(cj14*r12*sj15);
IkReal x17262=(cj16*r10);
IkReal x17263=((1.0)*cj12*sj14);
IkReal x17264=(sj12*sj14*sj16);
IkReal x17265=(cj16*r01);
IkReal x17266=(cj14*cj15*sj12);
IkReal x17267=(r00*sj16);
IkReal x17268=(cj16*r11);
IkReal x17269=((1.0)*cj12*cj14*cj15);
IkReal x17270=(r10*sj16);
IkReal x17271=((1.0)*cj14*cj15*sj12);
if( IKabs(((((-1.0)*x17269*x17270))+(((-1.0)*r01*x17264))+(((-1.0)*x17262*x17263))+((x17265*x17266))+(((-1.0)*x17268*x17269))+((sj12*sj14*x17259))+((sj12*x17258))+((r11*x17257))+((x17266*x17267))+(((-1.0)*x17260*x17261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x17268*x17271))+(((-1.0)*x17265*x17269))+((r01*x17257))+((r11*x17264))+(((-1.0)*x17259*x17263))+(((-1.0)*x17267*x17269))+(((-1.0)*x17270*x17271))+(((-1.0)*sj12*x17261))+(((-1.0)*sj12*sj14*x17262))+(((-1.0)*x17258*x17260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x17269*x17270))+(((-1.0)*r01*x17264))+(((-1.0)*x17262*x17263))+((x17265*x17266))+(((-1.0)*x17268*x17269))+((sj12*sj14*x17259))+((sj12*x17258))+((r11*x17257))+((x17266*x17267))+(((-1.0)*x17260*x17261))))+IKsqr(((((-1.0)*x17268*x17271))+(((-1.0)*x17265*x17269))+((r01*x17257))+((r11*x17264))+(((-1.0)*x17259*x17263))+(((-1.0)*x17267*x17269))+(((-1.0)*x17270*x17271))+(((-1.0)*sj12*x17261))+(((-1.0)*sj12*sj14*x17262))+(((-1.0)*x17258*x17260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x17269*x17270))+(((-1.0)*r01*x17264))+(((-1.0)*x17262*x17263))+((x17265*x17266))+(((-1.0)*x17268*x17269))+((sj12*sj14*x17259))+((sj12*x17258))+((r11*x17257))+((x17266*x17267))+(((-1.0)*x17260*x17261))), ((((-1.0)*x17268*x17271))+(((-1.0)*x17265*x17269))+((r01*x17257))+((r11*x17264))+(((-1.0)*x17259*x17263))+(((-1.0)*x17267*x17269))+(((-1.0)*x17270*x17271))+(((-1.0)*sj12*x17261))+(((-1.0)*sj12*sj14*x17262))+(((-1.0)*x17258*x17260))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x17272=IKsin(j10);
IkReal x17273=(cj12*x17272);
IkReal x17274=IKcos(j10);
IkReal x17275=(sj12*x17274);
IkReal x17276=(cj14*sj15);
IkReal x17277=(cj16*sj14);
IkReal x17278=((1.0)*sj14*sj16);
IkReal x17279=(cj14*cj15*cj16);
IkReal x17280=(cj14*cj15*sj16);
IkReal x17281=(cj12*x17274);
IkReal x17282=(x17281+(((-1.0)*sj12*x17272)));
IkReal x17283=(cj14*cj16);
IkReal x17284=((1.0)*cj14*sj16);
IkReal x17285=((1.0)*sj14*sj15);
IkReal x17286=((1.0)*cj15*cj16*sj14);
IkReal x17287=((1.0)*cj15*sj14*sj16);
IkReal x17288=((0.37429)*cj15);
IkReal x17289=((0.01)*sj15);
IkReal x17290=((0.069)*x17272);
IkReal x17291=((0.01)*cj15*cj16);
IkReal x17292=((0.01)*cj15*sj16);
IkReal x17293=((0.37429)*cj16*sj15);
IkReal x17294=((0.37429)*sj15*sj16);
evalcond[0]=(((r11*x17279))+x17273+x17275+((r10*x17280))+((r12*x17276))+((r10*x17277))+(((-1.0)*r11*x17278)));
evalcond[1]=(((r02*x17276))+((r00*x17277))+x17282+((r00*x17280))+((r01*x17279))+(((-1.0)*r01*x17278)));
evalcond[2]=(x17282+((r10*x17283))+(((-1.0)*r11*x17286))+(((-1.0)*r12*x17285))+(((-1.0)*r10*x17287))+(((-1.0)*r11*x17284)));
evalcond[3]=(((r00*x17283))+(((-1.0)*r02*x17285))+(((-1.0)*x17273))+(((-1.0)*x17275))+(((-1.0)*r01*x17284))+(((-1.0)*r01*x17286))+(((-1.0)*r00*x17287)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x17294))+(((-1.0)*sj12*x17290))+((r01*x17291))+(((-1.0)*r01*x17293))+(((0.069)*x17274))+((r00*x17292))+((r02*x17289))+(((0.069)*x17281))+((r02*x17288)));
evalcond[5]=(x17290+(((-1.0)*r11*x17293))+((r12*x17288))+(((-1.0)*(1.0)*py))+((r11*x17291))+((r12*x17289))+(((-1.0)*r10*x17294))+((r10*x17292))+(((0.069)*x17275))+(((0.069)*x17273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17295=((69000.0)*py);
IkReal x17296=((25826.01)*cj15);
IkReal x17297=(r12*x17296);
IkReal x17298=((69000.0)*px);
IkReal x17299=((690.0)*sj15);
IkReal x17300=(r12*x17299);
IkReal x17301=((690.0)*cj15*cj16);
IkReal x17302=(r11*x17301);
IkReal x17303=(r02*x17296);
IkReal x17304=((690.0)*cj15*sj16);
IkReal x17305=(r10*x17304);
IkReal x17306=((25826.01)*cj16*sj15);
IkReal x17307=(r11*x17306);
IkReal x17308=(r02*x17299);
IkReal x17309=((25826.01)*sj15*sj16);
IkReal x17310=(r10*x17309);
IkReal x17311=(r01*x17301);
IkReal x17312=(r00*x17304);
IkReal x17313=(r01*x17306);
IkReal x17314=(r00*x17309);
CheckValue<IkReal> x17315=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj12)))),-1);
if(!x17315.valid){
continue;
}
CheckValue<IkReal> x17316 = IKatan2WithCheck(IkReal((x17295+(((-1.0)*cj12*x17297))+(((-1.0)*cj12*x17302))+(((-1.0)*sj12*x17314))+x17307+(((-1.0)*x17302))+(((-1.0)*cj12*x17305))+(((-1.0)*x17305))+((sj12*x17311))+x17310+((sj12*x17308))+((sj12*x17312))+(((-1.0)*cj12*x17300))+(((-1.0)*x17297))+(((-1.0)*sj12*x17298))+((cj12*x17310))+((cj12*x17307))+(((-1.0)*x17300))+((sj12*x17303))+((cj12*x17295))+(((-1.0)*sj12*x17313)))),IkReal((x17298+(((-1.0)*x17311))+(((-1.0)*sj12*x17300))+(((-1.0)*cj12*x17308))+((sj12*x17307))+(((-1.0)*sj12*x17297))+(((-1.0)*cj12*x17303))+((cj12*x17298))+(((-1.0)*x17303))+((cj12*x17314))+((sj12*x17295))+((sj12*x17310))+x17313+x17314+(((-1.0)*cj12*x17312))+(((-1.0)*cj12*x17311))+(((-1.0)*sj12*x17302))+((cj12*x17313))+(((-1.0)*sj12*x17305))+(((-1.0)*x17312))+(((-1.0)*x17308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17316.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17315.value)))+(x17316.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x17317=((0.37429)*cj15);
IkReal x17318=((0.01)*sj15);
IkReal x17319=((0.069)*(IKcos(j10)));
IkReal x17320=((0.069)*(IKsin(j10)));
IkReal x17321=((0.01)*cj15*cj16);
IkReal x17322=((0.01)*cj15*sj16);
IkReal x17323=((0.37429)*cj16*sj15);
IkReal x17324=((0.37429)*sj15*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-1.0)*sj12*x17320))+(((-1.0)*r01*x17323))+((r01*x17321))+(((-1.0)*r00*x17324))+((cj12*x17319))+((r00*x17322))+x17319+((r02*x17318))+((r02*x17317)));
evalcond[1]=(((r10*x17322))+((r12*x17317))+(((-1.0)*(1.0)*py))+((r11*x17321))+((sj12*x17319))+(((-1.0)*r11*x17323))+(((-1.0)*r10*x17324))+((cj12*x17320))+x17320+((r12*x17318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x17325=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x17325;
j14eval[1]=IKsign(x17325);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x17326=((1.0)*sj15);
IkReal x17327=((((-1.0)*r00*sj16*x17326))+(((-1.0)*cj16*r01*x17326))+((cj15*r02)));
j14eval[0]=x17327;
j14eval[1]=IKsign(x17327);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x17328=(r12*r22);
IkReal x17329=cj15*cj15;
IkReal x17330=(r10*r20);
IkReal x17331=(x17329*x17330);
IkReal x17332=cj16*cj16;
IkReal x17333=(r10*r21);
IkReal x17334=((1.0)*cj16*sj16);
IkReal x17335=(r11*r20);
IkReal x17336=(cj15*cj16*sj15);
IkReal x17337=(cj15*sj15*sj16);
IkReal x17338=(r11*r21*x17332);
IkReal x17339=(cj16*sj16*x17329);
IkReal x17340=(((x17330*x17332))+((r12*r21*x17336))+(((-1.0)*x17331*x17332))+((x17329*x17338))+((r12*r20*x17337))+((r10*r22*x17337))+((r11*r22*x17336))+x17331+((x17333*x17339))+(((-1.0)*x17333*x17334))+(((-1.0)*x17328*x17329))+(((-1.0)*x17338))+((x17335*x17339))+(((-1.0)*x17334*x17335))+x17328+((r11*r21)));
j14eval[0]=x17340;
j14eval[1]=IKsign(x17340);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17341=(r21*sj16);
IkReal x17342=(cj16*r20);
IkReal x17343=((1.0)*cj10*sj12);
IkReal x17344=((1.0)*cj12*sj10);
IkReal x17345=(r22*sj15);
IkReal x17346=(cj15*cj16*r21);
IkReal x17347=(cj15*r20*sj16);
IkReal x17348=(r12*r22);
IkReal x17349=cj15*cj15;
IkReal x17350=(r10*r20);
IkReal x17351=(x17349*x17350);
IkReal x17352=cj16*cj16;
IkReal x17353=(cj16*r10*r21*sj16);
IkReal x17354=(cj16*r11*r20*sj16);
IkReal x17355=(r12*sj15);
IkReal x17356=(r11*r21*x17352);
CheckValue<IkReal> x17357 = IKatan2WithCheck(IkReal(((((-1.0)*x17342*x17343))+((cj12*sj10*x17341))+(((-1.0)*x17342*x17344))+((cj10*sj12*x17341)))),IkReal(((((-1.0)*x17343*x17345))+(((-1.0)*x17343*x17346))+(((-1.0)*x17344*x17345))+(((-1.0)*x17344*x17346))+(((-1.0)*x17343*x17347))+(((-1.0)*x17344*x17347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17357.valid){
continue;
}
CheckValue<IkReal> x17358=IKPowWithIntegerCheck(IKsign(((((-1.0)*x17348*x17349))+((x17346*x17355))+((x17347*x17355))+(((-1.0)*x17356))+((((r11*r22*sj15))*((cj15*cj16))))+((x17349*x17353))+((x17349*x17354))+((x17350*x17352))+(((-1.0)*x17353))+(((-1.0)*x17351*x17352))+(((-1.0)*x17354))+x17351+x17348+((x17349*x17356))+((r11*r21))+((((r10*r22*sj15))*((cj15*sj16)))))),-1);
if(!x17358.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17357.value)+(((1.5707963267949)*(x17358.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17359=IKsin(j14);
IkReal x17360=(cj16*r20);
IkReal x17361=IKcos(j14);
IkReal x17362=(sj15*x17361);
IkReal x17363=(r21*sj16);
IkReal x17364=((1.0)*x17359);
IkReal x17365=(cj15*cj16*x17361);
IkReal x17366=(cj15*sj16*x17361);
IkReal x17367=((1.0)*x17361);
IkReal x17368=((1.0)*sj15*x17359);
IkReal x17369=((1.0)*cj15*cj16*x17359);
IkReal x17370=((1.0)*cj15*sj16*x17359);
IkReal x17371=(cj10*sj12);
IkReal x17372=(cj12*sj10);
IkReal x17373=(cj16*r10);
IkReal x17374=(r11*sj16);
IkReal x17375=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x17376=(cj16*r00);
IkReal x17377=((1.0)*r01*sj16);
evalcond[0]=(((x17359*x17360))+((r22*x17362))+((r21*x17365))+((r20*x17366))+(((-1.0)*x17363*x17364)));
evalcond[1]=((((-1.0)*r22*x17368))+(((-1.0)*x17363*x17367))+(((-1.0)*r20*x17370))+((x17360*x17361))+(((-1.0)*r21*x17369)));
evalcond[2]=(((r12*x17362))+(((-1.0)*x17364*x17374))+((r11*x17365))+x17371+x17372+((r10*x17366))+((x17359*x17373)));
evalcond[3]=(((r01*x17365))+((x17359*x17376))+x17375+(((-1.0)*x17359*x17377))+((r00*x17366))+((r02*x17362)));
evalcond[4]=((((-1.0)*x17367*x17374))+(((-1.0)*r12*x17368))+((x17361*x17373))+x17375+(((-1.0)*r10*x17370))+(((-1.0)*r11*x17369)));
evalcond[5]=((((-1.0)*r01*x17369))+((x17361*x17376))+(((-1.0)*x17371))+(((-1.0)*r00*x17370))+(((-1.0)*x17372))+(((-1.0)*x17361*x17377))+(((-1.0)*r02*x17368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17378=((1.0)*sj15);
IkReal x17379=(cj10*sj12);
IkReal x17380=((1.0)*r22*sj15);
IkReal x17381=(cj12*sj10);
IkReal x17382=(cj16*r21);
IkReal x17383=((1.0)*cj10*cj15*sj12);
IkReal x17384=(r20*sj16);
IkReal x17385=((1.0)*cj12*cj15*sj10);
IkReal x17386=(cj16*r20);
IkReal x17387=((1.0)*r21*sj16);
CheckValue<IkReal> x17388=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x17378))+(((-1.0)*r00*sj16*x17378))+((cj15*r02)))),-1);
if(!x17388.valid){
continue;
}
CheckValue<IkReal> x17389 = IKatan2WithCheck(IkReal(((((-1.0)*x17384*x17385))+(((-1.0)*x17382*x17383))+(((-1.0)*x17383*x17384))+(((-1.0)*x17379*x17380))+(((-1.0)*x17382*x17385))+(((-1.0)*x17380*x17381)))),IkReal(((((-1.0)*x17379*x17387))+((x17381*x17386))+(((-1.0)*x17381*x17387))+((x17379*x17386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17389.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17388.value)))+(x17389.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17390=IKsin(j14);
IkReal x17391=(cj16*r20);
IkReal x17392=IKcos(j14);
IkReal x17393=(sj15*x17392);
IkReal x17394=(r21*sj16);
IkReal x17395=((1.0)*x17390);
IkReal x17396=(cj15*cj16*x17392);
IkReal x17397=(cj15*sj16*x17392);
IkReal x17398=((1.0)*x17392);
IkReal x17399=((1.0)*sj15*x17390);
IkReal x17400=((1.0)*cj15*cj16*x17390);
IkReal x17401=((1.0)*cj15*sj16*x17390);
IkReal x17402=(cj10*sj12);
IkReal x17403=(cj12*sj10);
IkReal x17404=(cj16*r10);
IkReal x17405=(r11*sj16);
IkReal x17406=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x17407=(cj16*r00);
IkReal x17408=((1.0)*r01*sj16);
evalcond[0]=(((r22*x17393))+((x17390*x17391))+((r20*x17397))+(((-1.0)*x17394*x17395))+((r21*x17396)));
evalcond[1]=((((-1.0)*x17394*x17398))+(((-1.0)*r20*x17401))+(((-1.0)*r22*x17399))+(((-1.0)*r21*x17400))+((x17391*x17392)));
evalcond[2]=(((r10*x17397))+x17402+x17403+(((-1.0)*x17395*x17405))+((r12*x17393))+((x17390*x17404))+((r11*x17396)));
evalcond[3]=(x17406+(((-1.0)*x17390*x17408))+((r02*x17393))+((x17390*x17407))+((r01*x17396))+((r00*x17397)));
evalcond[4]=(x17406+(((-1.0)*r10*x17401))+((x17392*x17404))+(((-1.0)*r11*x17400))+(((-1.0)*x17398*x17405))+(((-1.0)*r12*x17399)));
evalcond[5]=((((-1.0)*r02*x17399))+(((-1.0)*r00*x17401))+(((-1.0)*x17402))+((x17392*x17407))+(((-1.0)*x17403))+(((-1.0)*x17392*x17408))+(((-1.0)*r01*x17400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17409=(r22*sj15);
IkReal x17410=(sj10*sj12);
IkReal x17411=((1.0)*cj10*cj12);
IkReal x17412=(cj16*r21);
IkReal x17413=(cj15*sj10*sj12);
IkReal x17414=(r20*sj16);
IkReal x17415=((1.0)*cj10*cj12*cj15);
IkReal x17416=(r21*sj16);
CheckValue<IkReal> x17417 = IKatan2WithCheck(IkReal(((((-1.0)*x17412*x17415))+(((-1.0)*x17414*x17415))+((x17412*x17413))+((x17409*x17410))+(((-1.0)*x17409*x17411))+((x17413*x17414)))),IkReal(((((-1.0)*x17411*x17416))+((x17410*x17416))+(((-1.0)*cj16*r20*x17410))+((((cj10*cj12))*((cj16*r20)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x17417.valid){
continue;
}
CheckValue<IkReal> x17418=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x17418.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17417.value)+(((1.5707963267949)*(x17418.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17419=IKsin(j14);
IkReal x17420=(cj16*r20);
IkReal x17421=IKcos(j14);
IkReal x17422=(sj15*x17421);
IkReal x17423=(r21*sj16);
IkReal x17424=((1.0)*x17419);
IkReal x17425=(cj15*cj16*x17421);
IkReal x17426=(cj15*sj16*x17421);
IkReal x17427=((1.0)*x17421);
IkReal x17428=((1.0)*sj15*x17419);
IkReal x17429=((1.0)*cj15*cj16*x17419);
IkReal x17430=((1.0)*cj15*sj16*x17419);
IkReal x17431=(cj10*sj12);
IkReal x17432=(cj12*sj10);
IkReal x17433=(cj16*r10);
IkReal x17434=(r11*sj16);
IkReal x17435=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x17436=(cj16*r00);
IkReal x17437=((1.0)*r01*sj16);
evalcond[0]=(((x17419*x17420))+(((-1.0)*x17423*x17424))+((r20*x17426))+((r22*x17422))+((r21*x17425)));
evalcond[1]=((((-1.0)*r21*x17429))+(((-1.0)*r20*x17430))+(((-1.0)*r22*x17428))+(((-1.0)*x17423*x17427))+((x17420*x17421)));
evalcond[2]=(((x17419*x17433))+(((-1.0)*x17424*x17434))+((r11*x17425))+((r10*x17426))+((r12*x17422))+x17432+x17431);
evalcond[3]=(((x17419*x17436))+((r02*x17422))+(((-1.0)*x17419*x17437))+((r00*x17426))+((r01*x17425))+x17435);
evalcond[4]=((((-1.0)*r11*x17429))+(((-1.0)*x17427*x17434))+(((-1.0)*r12*x17428))+((x17421*x17433))+x17435+(((-1.0)*r10*x17430)));
evalcond[5]=((((-1.0)*r00*x17430))+(((-1.0)*r01*x17429))+(((-1.0)*x17432))+(((-1.0)*r02*x17428))+((x17421*x17436))+(((-1.0)*x17421*x17437))+(((-1.0)*x17431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17438=((0.069)*cj11);
IkReal x17439=(cj11*r12);
IkReal x17440=((0.069)*sj12);
IkReal x17441=(cj15*r02);
IkReal x17442=((0.01)*cj11*cj15);
IkReal x17443=((0.37429)*cj11);
IkReal x17444=(r01*((cj16*sj15)));
IkReal x17445=(r00*((sj15*sj16)));
CheckValue<IkReal> x17446=IKPowWithIntegerCheck(((((-1.0)*cj12*sj11*x17438))+(((0.36442)*(cj11*cj11)))+x17438),-1);
if(!x17446.valid){
continue;
}
CheckValue<IkReal> x17447=IKPowWithIntegerCheck(cj11,-1);
if(!x17447.valid){
continue;
}
if( IKabs(((x17446.value)*(((((-1.0)*cj16*r11*x17442))+(((-0.37429)*cj15*x17439))+((x17440*x17441))+((cj16*r11*sj15*x17443))+(((-1.0)*x17440*x17445))+(((-0.01)*sj15*x17439))+(((-1.0)*x17440*x17444))+(((-1.0)*r10*sj16*x17442))+((r10*sj15*sj16*x17443))+((cj11*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17447.value)*(((((-1.0)*x17441))+x17445+x17444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x17446.value)*(((((-1.0)*cj16*r11*x17442))+(((-0.37429)*cj15*x17439))+((x17440*x17441))+((cj16*r11*sj15*x17443))+(((-1.0)*x17440*x17445))+(((-0.01)*sj15*x17439))+(((-1.0)*x17440*x17444))+(((-1.0)*r10*sj16*x17442))+((r10*sj15*sj16*x17443))+((cj11*py))))))+IKsqr(((x17447.value)*(((((-1.0)*x17441))+x17445+x17444))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x17446.value)*(((((-1.0)*cj16*r11*x17442))+(((-0.37429)*cj15*x17439))+((x17440*x17441))+((cj16*r11*sj15*x17443))+(((-1.0)*x17440*x17445))+(((-0.01)*sj15*x17439))+(((-1.0)*x17440*x17444))+(((-1.0)*r10*sj16*x17442))+((r10*sj15*sj16*x17443))+((cj11*py))))), ((x17447.value)*(((((-1.0)*x17441))+x17445+x17444))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x17448=(cj15*r02);
IkReal x17449=(cj16*sj15);
IkReal x17450=(r01*x17449);
IkReal x17451=(sj15*sj16);
IkReal x17452=(r00*x17451);
IkReal x17453=IKcos(j10);
IkReal x17454=(cj11*x17453);
IkReal x17455=(cj15*r12);
IkReal x17456=(r11*x17449);
IkReal x17457=(r10*x17451);
IkReal x17458=IKsin(j10);
IkReal x17459=(cj11*x17458);
IkReal x17460=((0.01)*sj15);
IkReal x17461=((0.069)*x17453);
IkReal x17462=((0.069)*x17458);
IkReal x17463=((0.01)*cj15*cj16);
IkReal x17464=((0.01)*cj15*sj16);
IkReal x17465=(cj12*sj11);
evalcond[0]=((((-1.0)*x17454))+x17452+x17450+(((-1.0)*x17448)));
evalcond[1]=((((-1.0)*x17455))+x17456+x17457+(((-1.0)*x17459)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*x17461*x17465))+(((0.37429)*x17448))+((r02*x17460))+x17461+((r01*x17463))+(((-0.37429)*x17450))+(((0.36442)*x17454))+(((-1.0)*sj12*x17462))+(((-0.37429)*x17452))+((r00*x17464)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((0.36442)*x17459))+(((-0.37429)*x17457))+((r11*x17463))+(((-0.37429)*x17456))+((sj12*x17461))+(((0.37429)*x17455))+x17462+(((-1.0)*x17462*x17465))+((r12*x17460))+((r10*x17464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x17466=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x17466;
j14eval[1]=IKsign(x17466);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x17467=((1.0)*sj15);
IkReal x17468=((((-1.0)*cj16*r01*x17467))+((cj15*r02))+(((-1.0)*r00*sj16*x17467)));
j14eval[0]=x17468;
j14eval[1]=IKsign(x17468);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x17469=r21*r21;
IkReal x17470=((1.0)*x17469);
IkReal x17471=r22*r22;
IkReal x17472=(cj16*r20);
IkReal x17473=((2.0)*r21*sj16*x17472);
IkReal x17474=cj15*cj15;
IkReal x17475=cj16*cj16;
IkReal x17476=(cj16*r21);
IkReal x17477=((2.0)*cj15*r22*sj15);
IkReal x17478=(r20*sj16);
IkReal x17479=r20*r20;
IkReal x17480=((1.0)*x17479);
IkReal x17481=(x17474*x17475);
IkReal x17482=((((-1.0)*x17477*x17478))+(((-1.0)*x17471))+(((-1.0)*x17476*x17477))+(((-1.0)*x17474*x17480))+((x17471*x17474))+(((-1.0)*x17473*x17474))+x17473+((x17469*x17475))+(((-1.0)*x17470*x17481))+(((-1.0)*x17475*x17480))+(((-1.0)*x17470))+((x17479*x17481)));
IkReal x17483=(r21*sj16);
IkReal x17484=((1.0)*cj11*cj12);
IkReal x17485=(r22*sj15);
IkReal x17486=((1.0)*cj11*sj12);
IkReal x17487=((1.0)*cj11*cj15*sj12);
IkReal x17488=((1.0)*cj11*cj12*cj15);
j14eval[0]=x17482;
j14eval[1]=IKsign(x17482);
j14eval[2]=((IKabs(((((-1.0)*x17478*x17488))+(((-1.0)*x17476*x17488))+(((-1.0)*x17484*x17485))+(((-1.0)*x17483*x17486))+((cj11*sj12*x17472)))))+(IKabs(((((-1.0)*x17476*x17487))+(((-1.0)*x17485*x17486))+(((-1.0)*x17478*x17487))+(((-1.0)*x17472*x17484))+((cj11*cj12*x17483))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x17489=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x17489;
j14eval[1]=IKsign(x17489);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x17490=((1.0)*sj15);
IkReal x17491=((((-1.0)*cj16*r01*x17490))+(((-1.0)*r00*sj16*x17490))+((cj15*r02)));
j14eval[0]=x17491;
j14eval[1]=IKsign(x17491);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x17492=(r01*r21);
IkReal x17493=((1.0)*x17492);
IkReal x17494=(r02*r22);
IkReal x17495=(cj16*sj16);
IkReal x17496=(r00*r21*x17495);
IkReal x17497=(r01*r20*x17495);
IkReal x17498=cj15*cj15;
IkReal x17499=cj16*cj16;
IkReal x17500=((1.0)*r00*r20);
IkReal x17501=((1.0)*cj15*cj16*sj15);
IkReal x17502=((1.0)*cj15*sj15*sj16);
IkReal x17503=(x17498*x17499);
IkReal x17504=((1.0)*x17498);
IkReal x17505=((((-1.0)*x17497*x17504))+x17496+x17497+(((-1.0)*x17496*x17504))+((x17494*x17498))+((x17492*x17499))+(((-1.0)*r00*r22*x17502))+(((-1.0)*x17499*x17500))+(((-1.0)*r02*r21*x17501))+(((-1.0)*r01*r22*x17501))+(((-1.0)*r02*r20*x17502))+(((-1.0)*x17498*x17500))+((r00*r20*x17503))+(((-1.0)*x17493))+(((-1.0)*x17493*x17503))+(((-1.0)*x17494)));
j14eval[0]=x17505;
j14eval[1]=IKsign(x17505);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17506=(cj12*sj10);
IkReal x17507=(r22*sj15);
IkReal x17508=((1.0)*cj10*sj12);
IkReal x17509=(cj16*r21);
IkReal x17510=(cj12*cj15*sj10);
IkReal x17511=(r20*sj16);
IkReal x17512=((1.0)*cj10*cj15*sj12);
IkReal x17513=(cj16*r20);
IkReal x17514=(r21*sj16);
IkReal x17515=(r01*r21);
IkReal x17516=((1.0)*x17515);
IkReal x17517=(r02*r22);
IkReal x17518=(cj16*r00*x17514);
IkReal x17519=(r01*sj16*x17513);
IkReal x17520=cj15*cj15;
IkReal x17521=cj16*cj16;
IkReal x17522=((1.0)*r00*r20);
IkReal x17523=((1.0)*cj15*r22*sj15);
IkReal x17524=((1.0)*cj15*r02*sj15);
IkReal x17525=(x17520*x17521);
IkReal x17526=((1.0)*x17520);
CheckValue<IkReal> x17527 = IKatan2WithCheck(IkReal(((((-1.0)*x17511*x17512))+((x17506*x17507))+(((-1.0)*x17507*x17508))+(((-1.0)*x17509*x17512))+((x17510*x17511))+((x17509*x17510)))),IkReal((((cj10*sj12*x17513))+(((-1.0)*cj16*r20*x17506))+((x17506*x17514))+(((-1.0)*x17508*x17514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17527.valid){
continue;
}
CheckValue<IkReal> x17528=IKPowWithIntegerCheck(IKsign((((x17517*x17520))+(((-1.0)*x17517))+(((-1.0)*x17520*x17522))+(((-1.0)*x17509*x17524))+(((-1.0)*r00*sj16*x17523))+(((-1.0)*cj16*r01*x17523))+x17519+x17518+(((-1.0)*x17511*x17524))+(((-1.0)*x17521*x17522))+((x17515*x17521))+(((-1.0)*x17519*x17526))+(((-1.0)*x17516*x17525))+(((-1.0)*x17518*x17526))+(((-1.0)*x17516))+((r00*r20*x17525)))),-1);
if(!x17528.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17527.value)+(((1.5707963267949)*(x17528.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17529=IKsin(j14);
IkReal x17530=(cj16*r20);
IkReal x17531=IKcos(j14);
IkReal x17532=(sj15*x17531);
IkReal x17533=(r21*sj16);
IkReal x17534=((1.0)*x17529);
IkReal x17535=(cj15*cj16*x17531);
IkReal x17536=(cj15*sj16*x17531);
IkReal x17537=((1.0)*x17531);
IkReal x17538=((1.0)*sj15*x17529);
IkReal x17539=((1.0)*cj15*cj16*x17529);
IkReal x17540=((1.0)*cj15*sj16*x17529);
IkReal x17541=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x17542=(cj16*r10);
IkReal x17543=(r11*sj16);
IkReal x17544=(cj10*cj12);
IkReal x17545=(sj10*sj12);
IkReal x17546=(cj16*r00);
IkReal x17547=((1.0)*r01*sj16);
evalcond[0]=(((r21*x17535))+((x17529*x17530))+((r20*x17536))+(((-1.0)*x17533*x17534))+((r22*x17532)));
evalcond[1]=((((-1.0)*r21*x17539))+(((-1.0)*r22*x17538))+(((-1.0)*x17533*x17537))+(((-1.0)*r20*x17540))+((x17530*x17531)));
evalcond[2]=((((-1.0)*x17534*x17543))+((r10*x17536))+((r12*x17532))+x17541+((r11*x17535))+((x17529*x17542)));
evalcond[3]=(((x17529*x17546))+(((-1.0)*x17545))+(((-1.0)*x17529*x17547))+((r02*x17532))+((r00*x17536))+((r01*x17535))+(((-1.0)*x17544)));
evalcond[4]=((((-1.0)*r12*x17538))+x17544+x17545+((x17531*x17542))+(((-1.0)*r11*x17539))+(((-1.0)*x17537*x17543))+(((-1.0)*r10*x17540)));
evalcond[5]=((((-1.0)*r00*x17540))+x17541+(((-1.0)*r02*x17538))+(((-1.0)*x17531*x17547))+((x17531*x17546))+(((-1.0)*r01*x17539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17548=((1.0)*sj15);
IkReal x17549=(cj12*sj10);
IkReal x17550=(cj10*sj12);
IkReal x17551=(cj16*r21);
IkReal x17552=(cj12*cj15*sj10);
IkReal x17553=(r20*sj16);
IkReal x17554=((1.0)*cj10*cj15*sj12);
IkReal x17555=(r21*sj16);
CheckValue<IkReal> x17556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x17548))+(((-1.0)*cj16*r01*x17548))+((cj15*r02)))),-1);
if(!x17556.valid){
continue;
}
CheckValue<IkReal> x17557 = IKatan2WithCheck(IkReal((((x17552*x17553))+((r22*sj15*x17549))+(((-1.0)*r22*sj15*x17550))+(((-1.0)*x17551*x17554))+(((-1.0)*x17553*x17554))+((x17551*x17552)))),IkReal(((((-1.0)*cj10*sj12*x17555))+((x17549*x17555))+((cj16*r20*x17550))+(((-1.0)*cj16*r20*x17549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17557.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17556.value)))+(x17557.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17558=IKsin(j14);
IkReal x17559=(cj16*r20);
IkReal x17560=IKcos(j14);
IkReal x17561=(sj15*x17560);
IkReal x17562=(r21*sj16);
IkReal x17563=((1.0)*x17558);
IkReal x17564=(cj15*cj16*x17560);
IkReal x17565=(cj15*sj16*x17560);
IkReal x17566=((1.0)*x17560);
IkReal x17567=((1.0)*sj15*x17558);
IkReal x17568=((1.0)*cj15*cj16*x17558);
IkReal x17569=((1.0)*cj15*sj16*x17558);
IkReal x17570=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x17571=(cj16*r10);
IkReal x17572=(r11*sj16);
IkReal x17573=(cj10*cj12);
IkReal x17574=(sj10*sj12);
IkReal x17575=(cj16*r00);
IkReal x17576=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x17562*x17563))+((x17558*x17559))+((r21*x17564))+((r20*x17565))+((r22*x17561)));
evalcond[1]=((((-1.0)*r21*x17568))+(((-1.0)*r22*x17567))+((x17559*x17560))+(((-1.0)*x17562*x17566))+(((-1.0)*r20*x17569)));
evalcond[2]=(((r11*x17564))+((x17558*x17571))+x17570+((r12*x17561))+((r10*x17565))+(((-1.0)*x17563*x17572)));
evalcond[3]=((((-1.0)*x17558*x17576))+((x17558*x17575))+((r02*x17561))+((r00*x17565))+(((-1.0)*x17574))+((r01*x17564))+(((-1.0)*x17573)));
evalcond[4]=((((-1.0)*x17566*x17572))+((x17560*x17571))+(((-1.0)*r10*x17569))+x17574+x17573+(((-1.0)*r12*x17567))+(((-1.0)*r11*x17568)));
evalcond[5]=((((-1.0)*r00*x17569))+(((-1.0)*r01*x17568))+(((-1.0)*x17560*x17576))+((x17560*x17575))+x17570+(((-1.0)*r02*x17567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17577=(cj10*cj12);
IkReal x17578=(r22*sj15);
IkReal x17579=(sj10*sj12);
IkReal x17580=(cj16*r21);
IkReal x17581=(cj10*cj12*cj15);
IkReal x17582=(r20*sj16);
IkReal x17583=(cj15*sj10*sj12);
IkReal x17584=(r21*sj16);
IkReal x17585=((1.0)*cj16*r20);
CheckValue<IkReal> x17586 = IKatan2WithCheck(IkReal((((x17580*x17581))+((x17578*x17579))+((x17577*x17578))+((x17581*x17582))+((x17582*x17583))+((x17580*x17583)))),IkReal((((x17577*x17584))+(((-1.0)*x17579*x17585))+(((-1.0)*x17577*x17585))+((x17579*x17584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17586.valid){
continue;
}
CheckValue<IkReal> x17587=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x17587.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17586.value)+(((1.5707963267949)*(x17587.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17588=IKsin(j14);
IkReal x17589=(cj16*r20);
IkReal x17590=IKcos(j14);
IkReal x17591=(sj15*x17590);
IkReal x17592=(r21*sj16);
IkReal x17593=((1.0)*x17588);
IkReal x17594=(cj15*cj16*x17590);
IkReal x17595=(cj15*sj16*x17590);
IkReal x17596=((1.0)*x17590);
IkReal x17597=((1.0)*sj15*x17588);
IkReal x17598=((1.0)*cj15*cj16*x17588);
IkReal x17599=((1.0)*cj15*sj16*x17588);
IkReal x17600=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x17601=(cj16*r10);
IkReal x17602=(r11*sj16);
IkReal x17603=(cj10*cj12);
IkReal x17604=(sj10*sj12);
IkReal x17605=(cj16*r00);
IkReal x17606=((1.0)*r01*sj16);
evalcond[0]=(((r20*x17595))+((r21*x17594))+(((-1.0)*x17592*x17593))+((x17588*x17589))+((r22*x17591)));
evalcond[1]=((((-1.0)*r22*x17597))+(((-1.0)*x17592*x17596))+((x17589*x17590))+(((-1.0)*r20*x17599))+(((-1.0)*r21*x17598)));
evalcond[2]=(x17600+(((-1.0)*x17593*x17602))+((r11*x17594))+((r10*x17595))+((x17588*x17601))+((r12*x17591)));
evalcond[3]=((((-1.0)*x17588*x17606))+(((-1.0)*x17604))+(((-1.0)*x17603))+((r02*x17591))+((r00*x17595))+((x17588*x17605))+((r01*x17594)));
evalcond[4]=(x17603+x17604+((x17590*x17601))+(((-1.0)*r10*x17599))+(((-1.0)*r12*x17597))+(((-1.0)*r11*x17598))+(((-1.0)*x17596*x17602)));
evalcond[5]=(((x17590*x17605))+x17600+(((-1.0)*r02*x17597))+(((-1.0)*r01*x17598))+(((-1.0)*x17590*x17606))+(((-1.0)*r00*x17599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x17607=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x17607;
j14eval[1]=IKsign(x17607);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x17608=((1.0)*sj15);
IkReal x17609=(((cj15*r02))+(((-1.0)*cj16*r01*x17608))+(((-1.0)*r00*sj16*x17608)));
j14eval[0]=x17609;
j14eval[1]=IKsign(x17609);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x17610=(r12*r22);
IkReal x17611=cj15*cj15;
IkReal x17612=(r10*r20);
IkReal x17613=(x17611*x17612);
IkReal x17614=cj16*cj16;
IkReal x17615=(r10*r21);
IkReal x17616=((1.0)*cj16*sj16);
IkReal x17617=(r11*r20);
IkReal x17618=(cj15*cj16*sj15);
IkReal x17619=(cj15*sj15*sj16);
IkReal x17620=(r11*r21*x17614);
IkReal x17621=(cj16*sj16*x17611);
IkReal x17622=(((r10*r22*x17619))+((x17612*x17614))+((r12*r20*x17619))+(((-1.0)*x17616*x17617))+((x17617*x17621))+(((-1.0)*x17610*x17611))+x17613+x17610+(((-1.0)*x17615*x17616))+((r12*r21*x17618))+((r11*r22*x17618))+(((-1.0)*x17613*x17614))+((x17611*x17620))+((x17615*x17621))+((r11*r21))+(((-1.0)*x17620)));
j14eval[0]=x17622;
j14eval[1]=IKsign(x17622);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17623=(r21*sj16);
IkReal x17624=(cj16*r20);
IkReal x17625=((1.0)*cj10*sj12);
IkReal x17626=((1.0)*cj12*sj10);
IkReal x17627=(r22*sj15);
IkReal x17628=(cj15*cj16*r21);
IkReal x17629=(cj15*r20*sj16);
IkReal x17630=(r12*r22);
IkReal x17631=cj15*cj15;
IkReal x17632=(r10*r20);
IkReal x17633=(x17631*x17632);
IkReal x17634=cj16*cj16;
IkReal x17635=(cj16*r10*r21*sj16);
IkReal x17636=(cj16*r11*r20*sj16);
IkReal x17637=(r12*sj15);
IkReal x17638=(r11*r21*x17634);
CheckValue<IkReal> x17639=IKPowWithIntegerCheck(IKsign((((x17631*x17636))+(((-1.0)*x17638))+((x17632*x17634))+((((r11*r22*sj15))*((cj15*cj16))))+(((-1.0)*x17635))+(((-1.0)*x17636))+((x17629*x17637))+((x17628*x17637))+(((-1.0)*x17630*x17631))+x17630+x17633+(((-1.0)*x17633*x17634))+((x17631*x17638))+((r11*r21))+((x17631*x17635))+((((r10*r22*sj15))*((cj15*sj16)))))),-1);
if(!x17639.valid){
continue;
}
CheckValue<IkReal> x17640 = IKatan2WithCheck(IkReal((((cj12*sj10*x17623))+(((-1.0)*x17624*x17625))+((cj10*sj12*x17623))+(((-1.0)*x17624*x17626)))),IkReal(((((-1.0)*x17625*x17629))+(((-1.0)*x17626*x17627))+(((-1.0)*x17625*x17627))+(((-1.0)*x17626*x17628))+(((-1.0)*x17626*x17629))+(((-1.0)*x17625*x17628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17640.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17639.value)))+(x17640.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17641=IKsin(j14);
IkReal x17642=(cj16*r20);
IkReal x17643=IKcos(j14);
IkReal x17644=(sj15*x17643);
IkReal x17645=(r21*sj16);
IkReal x17646=((1.0)*x17641);
IkReal x17647=(cj15*cj16*x17643);
IkReal x17648=(cj15*sj16*x17643);
IkReal x17649=((1.0)*x17643);
IkReal x17650=((1.0)*sj15*x17641);
IkReal x17651=((1.0)*cj15*cj16*x17641);
IkReal x17652=((1.0)*cj15*sj16*x17641);
IkReal x17653=(cj10*sj12);
IkReal x17654=(cj12*sj10);
IkReal x17655=(cj16*r10);
IkReal x17656=(r11*sj16);
IkReal x17657=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x17658=(cj16*r00);
IkReal x17659=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x17645*x17646))+((x17641*x17642))+((r20*x17648))+((r21*x17647))+((r22*x17644)));
evalcond[1]=(((x17642*x17643))+(((-1.0)*r22*x17650))+(((-1.0)*r20*x17652))+(((-1.0)*r21*x17651))+(((-1.0)*x17645*x17649)));
evalcond[2]=(((r12*x17644))+((x17641*x17655))+((r10*x17648))+((r11*x17647))+x17653+x17654+(((-1.0)*x17646*x17656)));
evalcond[3]=(((x17641*x17658))+((r01*x17647))+((r02*x17644))+((r00*x17648))+(((-1.0)*x17641*x17659))+x17657);
evalcond[4]=((((-1.0)*x17649*x17656))+(((-1.0)*r10*x17652))+((x17643*x17655))+(((-1.0)*r12*x17650))+(((-1.0)*r11*x17651))+x17657);
evalcond[5]=((((-1.0)*x17654))+(((-1.0)*x17643*x17659))+(((-1.0)*r00*x17652))+(((-1.0)*x17653))+((x17643*x17658))+(((-1.0)*r01*x17651))+(((-1.0)*r02*x17650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17660=((1.0)*sj15);
IkReal x17661=(cj10*sj12);
IkReal x17662=((1.0)*r22*sj15);
IkReal x17663=(cj12*sj10);
IkReal x17664=(cj16*r21);
IkReal x17665=((1.0)*cj10*cj15*sj12);
IkReal x17666=(r20*sj16);
IkReal x17667=((1.0)*cj12*cj15*sj10);
IkReal x17668=(cj16*r20);
IkReal x17669=((1.0)*r21*sj16);
CheckValue<IkReal> x17670 = IKatan2WithCheck(IkReal(((((-1.0)*x17664*x17667))+(((-1.0)*x17664*x17665))+(((-1.0)*x17661*x17662))+(((-1.0)*x17666*x17667))+(((-1.0)*x17662*x17663))+(((-1.0)*x17665*x17666)))),IkReal((((x17663*x17668))+(((-1.0)*x17663*x17669))+((x17661*x17668))+(((-1.0)*x17661*x17669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17670.valid){
continue;
}
CheckValue<IkReal> x17671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x17660))+((cj15*r02))+(((-1.0)*cj16*r01*x17660)))),-1);
if(!x17671.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17670.value)+(((1.5707963267949)*(x17671.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17672=IKsin(j14);
IkReal x17673=(cj16*r20);
IkReal x17674=IKcos(j14);
IkReal x17675=(sj15*x17674);
IkReal x17676=(r21*sj16);
IkReal x17677=((1.0)*x17672);
IkReal x17678=(cj15*cj16*x17674);
IkReal x17679=(cj15*sj16*x17674);
IkReal x17680=((1.0)*x17674);
IkReal x17681=((1.0)*sj15*x17672);
IkReal x17682=((1.0)*cj15*cj16*x17672);
IkReal x17683=((1.0)*cj15*sj16*x17672);
IkReal x17684=(cj10*sj12);
IkReal x17685=(cj12*sj10);
IkReal x17686=(cj16*r10);
IkReal x17687=(r11*sj16);
IkReal x17688=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x17689=(cj16*r00);
IkReal x17690=((1.0)*r01*sj16);
evalcond[0]=(((r22*x17675))+((x17672*x17673))+(((-1.0)*x17676*x17677))+((r21*x17678))+((r20*x17679)));
evalcond[1]=((((-1.0)*r21*x17682))+(((-1.0)*r20*x17683))+((x17673*x17674))+(((-1.0)*r22*x17681))+(((-1.0)*x17676*x17680)));
evalcond[2]=(x17684+x17685+(((-1.0)*x17677*x17687))+((r11*x17678))+((x17672*x17686))+((r12*x17675))+((r10*x17679)));
evalcond[3]=(x17688+(((-1.0)*x17672*x17690))+((r01*x17678))+((r02*x17675))+((r00*x17679))+((x17672*x17689)));
evalcond[4]=((((-1.0)*r10*x17683))+x17688+((x17674*x17686))+(((-1.0)*x17680*x17687))+(((-1.0)*r11*x17682))+(((-1.0)*r12*x17681)));
evalcond[5]=((((-1.0)*r02*x17681))+(((-1.0)*x17685))+(((-1.0)*x17684))+(((-1.0)*r01*x17682))+(((-1.0)*x17674*x17690))+(((-1.0)*r00*x17683))+((x17674*x17689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17691=(r22*sj15);
IkReal x17692=(sj10*sj12);
IkReal x17693=((1.0)*cj10*cj12);
IkReal x17694=(cj16*r21);
IkReal x17695=(cj15*sj10*sj12);
IkReal x17696=(r20*sj16);
IkReal x17697=((1.0)*cj10*cj12*cj15);
IkReal x17698=(r21*sj16);
CheckValue<IkReal> x17699=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x17699.valid){
continue;
}
CheckValue<IkReal> x17700 = IKatan2WithCheck(IkReal((((x17695*x17696))+(((-1.0)*x17696*x17697))+((x17694*x17695))+((x17691*x17692))+(((-1.0)*x17691*x17693))+(((-1.0)*x17694*x17697)))),IkReal(((((-1.0)*cj16*r20*x17692))+((x17692*x17698))+(((-1.0)*x17693*x17698))+((((cj10*cj12))*((cj16*r20)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x17700.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17699.value)))+(x17700.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17701=IKsin(j14);
IkReal x17702=(cj16*r20);
IkReal x17703=IKcos(j14);
IkReal x17704=(sj15*x17703);
IkReal x17705=(r21*sj16);
IkReal x17706=((1.0)*x17701);
IkReal x17707=(cj15*cj16*x17703);
IkReal x17708=(cj15*sj16*x17703);
IkReal x17709=((1.0)*x17703);
IkReal x17710=((1.0)*sj15*x17701);
IkReal x17711=((1.0)*cj15*cj16*x17701);
IkReal x17712=((1.0)*cj15*sj16*x17701);
IkReal x17713=(cj10*sj12);
IkReal x17714=(cj12*sj10);
IkReal x17715=(cj16*r10);
IkReal x17716=(r11*sj16);
IkReal x17717=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x17718=(cj16*r00);
IkReal x17719=((1.0)*r01*sj16);
evalcond[0]=(((x17701*x17702))+((r20*x17708))+(((-1.0)*x17705*x17706))+((r22*x17704))+((r21*x17707)));
evalcond[1]=((((-1.0)*r20*x17712))+(((-1.0)*x17705*x17709))+(((-1.0)*r22*x17710))+(((-1.0)*r21*x17711))+((x17702*x17703)));
evalcond[2]=(((x17701*x17715))+(((-1.0)*x17706*x17716))+((r11*x17707))+((r12*x17704))+x17714+x17713+((r10*x17708)));
evalcond[3]=(((r01*x17707))+((r00*x17708))+((x17701*x17718))+x17717+(((-1.0)*x17701*x17719))+((r02*x17704)));
evalcond[4]=((((-1.0)*r11*x17711))+(((-1.0)*x17709*x17716))+x17717+(((-1.0)*r10*x17712))+(((-1.0)*r12*x17710))+((x17703*x17715)));
evalcond[5]=((((-1.0)*x17713))+(((-1.0)*r01*x17711))+(((-1.0)*r02*x17710))+(((-1.0)*x17703*x17719))+((x17703*x17718))+(((-1.0)*r00*x17712))+(((-1.0)*x17714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17720=(r21*sj16);
IkReal x17721=(cj16*r20);
IkReal x17722=((1.0)*cj11*cj12);
IkReal x17723=(r22*sj15);
IkReal x17724=((1.0)*cj11*sj12);
IkReal x17725=(cj16*r21);
IkReal x17726=((1.0)*cj11*cj15*sj12);
IkReal x17727=(r20*sj16);
IkReal x17728=((1.0)*cj11*cj12*cj15);
IkReal x17729=r21*r21;
IkReal x17730=((1.0)*x17729);
IkReal x17731=r22*r22;
IkReal x17732=((2.0)*r21*sj16*x17721);
IkReal x17733=cj15*cj15;
IkReal x17734=cj16*cj16;
IkReal x17735=((2.0)*cj15*r22*sj15);
IkReal x17736=r20*r20;
IkReal x17737=((1.0)*x17736);
IkReal x17738=(x17733*x17734);
CheckValue<IkReal> x17739 = IKatan2WithCheck(IkReal(((((-1.0)*x17723*x17724))+((cj11*cj12*x17720))+(((-1.0)*x17721*x17722))+(((-1.0)*x17726*x17727))+(((-1.0)*x17725*x17726)))),IkReal(((((-1.0)*x17720*x17724))+((cj11*sj12*x17721))+(((-1.0)*x17727*x17728))+(((-1.0)*x17725*x17728))+(((-1.0)*x17722*x17723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17739.valid){
continue;
}
CheckValue<IkReal> x17740=IKPowWithIntegerCheck(IKsign((((x17736*x17738))+((x17731*x17733))+(((-1.0)*x17733*x17737))+((x17729*x17734))+(((-1.0)*x17731))+(((-1.0)*x17727*x17735))+x17732+(((-1.0)*x17730))+(((-1.0)*x17730*x17738))+(((-1.0)*x17732*x17733))+(((-1.0)*x17734*x17737))+(((-1.0)*x17725*x17735)))),-1);
if(!x17740.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17739.value)+(((1.5707963267949)*(x17740.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17741=((1.0)*cj12);
IkReal x17742=IKsin(j14);
IkReal x17743=(cj16*r20);
IkReal x17744=IKcos(j14);
IkReal x17745=(sj15*x17744);
IkReal x17746=(r21*sj16);
IkReal x17747=((1.0)*x17742);
IkReal x17748=(cj15*cj16*x17744);
IkReal x17749=(cj15*sj16*x17744);
IkReal x17750=((1.0)*x17744);
IkReal x17751=((1.0)*sj15*x17742);
IkReal x17752=((1.0)*cj15*cj16*x17742);
IkReal x17753=((1.0)*cj15*sj16*x17742);
IkReal x17754=(cj10*sj12);
IkReal x17755=(sj10*x17741);
IkReal x17756=(cj16*r10);
IkReal x17757=(r11*sj16);
IkReal x17758=(sj10*sj12);
IkReal x17759=(cj10*cj12);
IkReal x17760=(cj16*r00);
IkReal x17761=((1.0)*r01*sj16);
evalcond[0]=(((r22*x17745))+((r20*x17749))+((r21*x17748))+(((-1.0)*x17746*x17747))+(((-1.0)*cj11*x17741))+((x17742*x17743)));
evalcond[1]=(((x17743*x17744))+(((-1.0)*r20*x17753))+(((-1.0)*r22*x17751))+((cj11*sj12))+(((-1.0)*x17746*x17750))+(((-1.0)*r21*x17752)));
evalcond[2]=(x17754+(((-1.0)*sj11*x17755))+((r11*x17748))+((r10*x17749))+(((-1.0)*x17747*x17757))+((r12*x17745))+((x17742*x17756)));
evalcond[3]=(((r00*x17749))+((x17742*x17760))+(((-1.0)*sj11*x17759))+((r02*x17745))+((r01*x17748))+(((-1.0)*x17742*x17761))+(((-1.0)*x17758)));
evalcond[4]=(x17759+(((-1.0)*r11*x17752))+(((-1.0)*r12*x17751))+((x17744*x17756))+(((-1.0)*x17750*x17757))+((sj11*x17758))+(((-1.0)*r10*x17753)));
evalcond[5]=((((-1.0)*x17755))+(((-1.0)*r02*x17751))+(((-1.0)*r00*x17753))+((sj11*x17754))+((x17744*x17760))+(((-1.0)*r01*x17752))+(((-1.0)*x17744*x17761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17762=((1.0)*sj15);
IkReal x17763=(cj12*sj10*sj11);
IkReal x17764=((1.0)*cj15);
IkReal x17765=(cj15*r20);
IkReal x17766=((1.0)*cj10*sj12*sj16);
IkReal x17767=((1.0)*cj11*cj12*sj16);
IkReal x17768=(cj12*r21*sj10*sj11);
CheckValue<IkReal> x17769 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r22*sj12*sj15))+((cj12*sj10*sj11*sj16*x17765))+(((-1.0)*cj15*r10*x17767))+(((-1.0)*cj11*cj12*cj16*r11*x17764))+(((-1.0)*x17765*x17766))+(((-1.0)*cj11*cj12*r12*sj15))+(((-1.0)*cj10*cj16*r21*sj12*x17764))+((cj15*cj16*x17768))+((r22*sj15*x17763)))),IkReal(((((-1.0)*r21*x17766))+(((-1.0)*cj16*r20*x17763))+(((-1.0)*r11*x17767))+((r20*((cj10*cj16*sj12))))+((sj16*x17768))+((r10*((cj11*cj12*cj16)))))),IKFAST_ATAN2_MAGTHRESH);
if(!x17769.valid){
continue;
}
CheckValue<IkReal> x17770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x17762))+(((-1.0)*cj16*r01*x17762))+((cj15*r02)))),-1);
if(!x17770.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17769.value)+(((1.5707963267949)*(x17770.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17771=((1.0)*cj12);
IkReal x17772=IKsin(j14);
IkReal x17773=(cj16*r20);
IkReal x17774=IKcos(j14);
IkReal x17775=(sj15*x17774);
IkReal x17776=(r21*sj16);
IkReal x17777=((1.0)*x17772);
IkReal x17778=(cj15*cj16*x17774);
IkReal x17779=(cj15*sj16*x17774);
IkReal x17780=((1.0)*x17774);
IkReal x17781=((1.0)*sj15*x17772);
IkReal x17782=((1.0)*cj15*cj16*x17772);
IkReal x17783=((1.0)*cj15*sj16*x17772);
IkReal x17784=(cj10*sj12);
IkReal x17785=(sj10*x17771);
IkReal x17786=(cj16*r10);
IkReal x17787=(r11*sj16);
IkReal x17788=(sj10*sj12);
IkReal x17789=(cj10*cj12);
IkReal x17790=(cj16*r00);
IkReal x17791=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x17776*x17777))+((x17772*x17773))+((r21*x17778))+(((-1.0)*cj11*x17771))+((r20*x17779))+((r22*x17775)));
evalcond[1]=((((-1.0)*r22*x17781))+(((-1.0)*r20*x17783))+(((-1.0)*x17776*x17780))+(((-1.0)*r21*x17782))+((cj11*sj12))+((x17773*x17774)));
evalcond[2]=((((-1.0)*sj11*x17785))+((r11*x17778))+(((-1.0)*x17777*x17787))+((x17772*x17786))+x17784+((r12*x17775))+((r10*x17779)));
evalcond[3]=(((x17772*x17790))+(((-1.0)*x17772*x17791))+(((-1.0)*x17788))+((r00*x17779))+(((-1.0)*sj11*x17789))+((r01*x17778))+((r02*x17775)));
evalcond[4]=((((-1.0)*r10*x17783))+(((-1.0)*r11*x17782))+((sj11*x17788))+(((-1.0)*x17780*x17787))+(((-1.0)*r12*x17781))+x17789+((x17774*x17786)));
evalcond[5]=(((sj11*x17784))+(((-1.0)*x17785))+(((-1.0)*r02*x17781))+(((-1.0)*x17774*x17791))+((x17774*x17790))+(((-1.0)*r00*x17783))+(((-1.0)*r01*x17782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17792=(r22*sj15);
IkReal x17793=(sj10*sj12);
IkReal x17794=((1.0)*cj11*cj12);
IkReal x17795=(cj10*cj12*sj11);
IkReal x17796=(cj15*r21);
IkReal x17797=(cj16*sj10*sj12);
IkReal x17798=(cj15*r20*sj16);
IkReal x17799=(cj11*cj12*cj16);
IkReal x17800=(cj10*cj12*cj16*sj11);
IkReal x17801=(r21*sj16);
IkReal x17802=((1.0)*r20);
CheckValue<IkReal> x17803=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x17803.valid){
continue;
}
CheckValue<IkReal> x17804 = IKatan2WithCheck(IkReal((((x17796*x17800))+((x17793*x17798))+((x17796*x17797))+((x17792*x17793))+((x17795*x17798))+(((-1.0)*cj11*cj12*cj15*r00*sj16))+(((-1.0)*r02*sj15*x17794))+((x17792*x17795))+(((-1.0)*cj15*r01*x17799)))),IkReal((((r00*x17799))+(((-1.0)*x17797*x17802))+(((-1.0)*r01*sj16*x17794))+((x17795*x17801))+((x17793*x17801))+(((-1.0)*x17800*x17802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17804.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17803.value)))+(x17804.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x17805=((1.0)*cj12);
IkReal x17806=IKsin(j14);
IkReal x17807=(cj16*r20);
IkReal x17808=IKcos(j14);
IkReal x17809=(sj15*x17808);
IkReal x17810=(r21*sj16);
IkReal x17811=((1.0)*x17806);
IkReal x17812=(cj15*cj16*x17808);
IkReal x17813=(cj15*sj16*x17808);
IkReal x17814=((1.0)*x17808);
IkReal x17815=((1.0)*sj15*x17806);
IkReal x17816=((1.0)*cj15*cj16*x17806);
IkReal x17817=((1.0)*cj15*sj16*x17806);
IkReal x17818=(cj10*sj12);
IkReal x17819=(sj10*x17805);
IkReal x17820=(cj16*r10);
IkReal x17821=(r11*sj16);
IkReal x17822=(sj10*sj12);
IkReal x17823=(cj10*cj12);
IkReal x17824=(cj16*r00);
IkReal x17825=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x17810*x17811))+(((-1.0)*cj11*x17805))+((r22*x17809))+((r21*x17812))+((r20*x17813))+((x17806*x17807)));
evalcond[1]=((((-1.0)*r20*x17817))+(((-1.0)*x17810*x17814))+((x17807*x17808))+(((-1.0)*r21*x17816))+(((-1.0)*r22*x17815))+((cj11*sj12)));
evalcond[2]=((((-1.0)*sj11*x17819))+((x17806*x17820))+((r12*x17809))+(((-1.0)*x17811*x17821))+x17818+((r11*x17812))+((r10*x17813)));
evalcond[3]=(((r02*x17809))+(((-1.0)*x17822))+((x17806*x17824))+((r00*x17813))+(((-1.0)*x17806*x17825))+(((-1.0)*sj11*x17823))+((r01*x17812)));
evalcond[4]=(x17823+(((-1.0)*r12*x17815))+(((-1.0)*r11*x17816))+((x17808*x17820))+(((-1.0)*r10*x17817))+(((-1.0)*x17814*x17821))+((sj11*x17822)));
evalcond[5]=((((-1.0)*x17819))+(((-1.0)*r02*x17815))+((sj11*x17818))+(((-1.0)*r00*x17817))+((x17808*x17824))+(((-1.0)*r01*x17816))+(((-1.0)*x17808*x17825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x17826=(r21*sj16);
IkReal x17827=(cj16*r20);
IkReal x17828=((1.0)*cj11*cj12);
IkReal x17829=(r22*sj15);
IkReal x17830=((1.0)*cj11*sj12);
IkReal x17831=(cj16*r21);
IkReal x17832=((1.0)*cj11*cj15*sj12);
IkReal x17833=(r20*sj16);
IkReal x17834=((1.0)*cj11*cj12*cj15);
IkReal x17835=r21*r21;
IkReal x17836=((1.0)*x17835);
IkReal x17837=r22*r22;
IkReal x17838=((2.0)*r21*sj16*x17827);
IkReal x17839=cj15*cj15;
IkReal x17840=cj16*cj16;
IkReal x17841=((2.0)*cj15*r22*sj15);
IkReal x17842=r20*r20;
IkReal x17843=((1.0)*x17842);
IkReal x17844=(x17839*x17840);
CheckValue<IkReal> x17845 = IKatan2WithCheck(IkReal(((((-1.0)*x17827*x17828))+(((-1.0)*x17832*x17833))+((cj11*cj12*x17826))+(((-1.0)*x17829*x17830))+(((-1.0)*x17831*x17832)))),IkReal(((((-1.0)*x17828*x17829))+(((-1.0)*x17826*x17830))+(((-1.0)*x17831*x17834))+((cj11*sj12*x17827))+(((-1.0)*x17833*x17834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17845.valid){
continue;
}
CheckValue<IkReal> x17846=IKPowWithIntegerCheck(IKsign(((((-1.0)*x17836))+(((-1.0)*x17839*x17843))+((x17842*x17844))+((x17835*x17840))+x17838+(((-1.0)*x17840*x17843))+((x17837*x17839))+(((-1.0)*x17836*x17844))+(((-1.0)*x17833*x17841))+(((-1.0)*x17831*x17841))+(((-1.0)*x17838*x17839))+(((-1.0)*x17837)))),-1);
if(!x17846.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x17845.value)+(((1.5707963267949)*(x17846.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x17847=IKsin(j14);
IkReal x17848=(cj16*r20);
IkReal x17849=IKcos(j14);
IkReal x17850=(r22*sj15);
IkReal x17851=((1.0)*r21*sj16);
IkReal x17852=(cj16*r21);
IkReal x17853=(cj15*x17849);
IkReal x17854=(r20*sj16);
IkReal x17855=((1.0)*cj15*x17847);
evalcond[0]=(((x17852*x17853))+((x17847*x17848))+(((-1.0)*x17847*x17851))+((x17849*x17850))+(((-1.0)*(1.0)*cj11*cj12))+((x17853*x17854)));
evalcond[1]=(((x17848*x17849))+(((-1.0)*x17847*x17850))+((cj11*sj12))+(((-1.0)*x17852*x17855))+(((-1.0)*x17854*x17855))+(((-1.0)*x17849*x17851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x17856=((1.0)*cj15);
IkReal x17857=(cj16*sj15);
IkReal x17858=(sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs(((((-1.0)*r02*x17856))+((r00*x17858))+((r01*x17857)))))+(IKabs((((r11*x17857))+(((-1.0)*r12*x17856))+((r10*x17858))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=cj11;
j10eval[1]=sj12;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j10eval[0]=cj11;
j10eval[1]=cj12;
j10eval[2]=sj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17859=(cj12*cj14*sj15);
IkReal x17860=(cj12*cj16*sj14);
IkReal x17861=(cj14*sj12*sj15);
IkReal x17862=(cj16*sj12*sj14);
IkReal x17863=(r11*sj16);
IkReal x17864=((1.0)*cj12*sj14);
IkReal x17865=(r01*sj16);
IkReal x17866=(cj12*cj14*cj15*cj16);
IkReal x17867=(cj12*cj14*cj15*sj16);
IkReal x17868=(cj14*cj15*cj16*sj12);
IkReal x17869=(cj14*cj15*sj12*sj16);
IkReal x17870=((1.0)*r10);
if( IKabs((((r10*x17860))+((r00*x17869))+((r12*x17859))+((r10*x17867))+((r01*x17868))+((r00*x17862))+(((-1.0)*sj12*sj14*x17865))+((r02*x17861))+(((-1.0)*x17863*x17864))+((r11*x17866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x17861))+((r00*x17867))+(((-1.0)*x17864*x17865))+(((-1.0)*x17869*x17870))+((sj12*sj14*x17863))+(((-1.0)*x17862*x17870))+((r00*x17860))+((r01*x17866))+((r02*x17859))+(((-1.0)*r11*x17868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x17860))+((r00*x17869))+((r12*x17859))+((r10*x17867))+((r01*x17868))+((r00*x17862))+(((-1.0)*sj12*sj14*x17865))+((r02*x17861))+(((-1.0)*x17863*x17864))+((r11*x17866))))+IKsqr(((((-1.0)*r12*x17861))+((r00*x17867))+(((-1.0)*x17864*x17865))+(((-1.0)*x17869*x17870))+((sj12*sj14*x17863))+(((-1.0)*x17862*x17870))+((r00*x17860))+((r01*x17866))+((r02*x17859))+(((-1.0)*r11*x17868))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r10*x17860))+((r00*x17869))+((r12*x17859))+((r10*x17867))+((r01*x17868))+((r00*x17862))+(((-1.0)*sj12*sj14*x17865))+((r02*x17861))+(((-1.0)*x17863*x17864))+((r11*x17866))), ((((-1.0)*r12*x17861))+((r00*x17867))+(((-1.0)*x17864*x17865))+(((-1.0)*x17869*x17870))+((sj12*sj14*x17863))+(((-1.0)*x17862*x17870))+((r00*x17860))+((r01*x17866))+((r02*x17859))+(((-1.0)*r11*x17868))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x17871=IKcos(j10);
IkReal x17872=(sj12*x17871);
IkReal x17873=IKsin(j10);
IkReal x17874=((((-1.0)*cj12*x17873))+x17872);
IkReal x17875=(cj14*sj15);
IkReal x17876=(cj16*sj14);
IkReal x17877=((1.0)*sj14*sj16);
IkReal x17878=(cj14*cj15*cj16);
IkReal x17879=(cj14*cj15*sj16);
IkReal x17880=(cj12*x17871);
IkReal x17881=(sj12*x17873);
IkReal x17882=(cj14*cj16);
IkReal x17883=((1.0)*cj14*sj16);
IkReal x17884=((1.0)*sj14*sj15);
IkReal x17885=((1.0)*cj15*cj16*sj14);
IkReal x17886=((1.0)*cj15*sj14*sj16);
IkReal x17887=((0.37429)*cj15);
IkReal x17888=((0.01)*sj15);
IkReal x17889=((0.01)*cj15*cj16);
IkReal x17890=((0.01)*cj15*sj16);
IkReal x17891=((0.37429)*cj16*sj15);
IkReal x17892=((0.37429)*sj15*sj16);
IkReal x17893=((0.069)*x17873);
evalcond[0]=(((r10*x17876))+((r12*x17875))+x17874+((r11*x17878))+((r10*x17879))+(((-1.0)*r11*x17877)));
evalcond[1]=((((-1.0)*r01*x17877))+((r00*x17879))+(((-1.0)*x17881))+((r01*x17878))+((r00*x17876))+(((-1.0)*x17880))+((r02*x17875)));
evalcond[2]=((((-1.0)*r11*x17885))+((r10*x17882))+(((-1.0)*r10*x17886))+(((-1.0)*r11*x17883))+(((-1.0)*r12*x17884))+x17880+x17881);
evalcond[3]=(((r00*x17882))+x17874+(((-1.0)*r01*x17883))+(((-1.0)*r02*x17884))+(((-1.0)*r00*x17886))+(((-1.0)*r01*x17885)));
evalcond[4]=((((-1.0)*r00*x17892))+(((-1.0)*r01*x17891))+(((-1.0)*(1.0)*px))+((r02*x17888))+((r00*x17890))+(((-0.069)*x17880))+((r02*x17887))+((r01*x17889))+(((-0.069)*x17881))+(((0.069)*x17871)));
evalcond[5]=(((r12*x17888))+(((-1.0)*(1.0)*py))+((r10*x17890))+((r11*x17889))+((r12*x17887))+(((-1.0)*r10*x17892))+(((-1.0)*cj12*x17893))+x17893+(((0.069)*x17872))+(((-1.0)*r11*x17891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17894=(cj12*sj14*sj16);
IkReal x17895=(cj14*r02*sj15);
IkReal x17896=(cj16*r00);
IkReal x17897=((1.0)*cj12);
IkReal x17898=(cj14*r12*sj15);
IkReal x17899=(cj16*r10);
IkReal x17900=((1.0)*cj12*sj14);
IkReal x17901=(sj12*sj14*sj16);
IkReal x17902=(cj16*r01);
IkReal x17903=(cj14*cj15*sj12);
IkReal x17904=(r00*sj16);
IkReal x17905=(cj16*r11);
IkReal x17906=((1.0)*cj12*cj14*cj15);
IkReal x17907=(r10*sj16);
IkReal x17908=((1.0)*cj14*cj15*sj12);
if( IKabs((((x17902*x17903))+(((-1.0)*r01*x17901))+((sj12*sj14*x17896))+((sj12*x17895))+(((-1.0)*x17906*x17907))+((r11*x17894))+(((-1.0)*x17905*x17906))+((x17903*x17904))+(((-1.0)*x17897*x17898))+(((-1.0)*x17899*x17900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x17905*x17908))+(((-1.0)*x17895*x17897))+(((-1.0)*x17907*x17908))+(((-1.0)*x17904*x17906))+(((-1.0)*x17902*x17906))+(((-1.0)*sj12*sj14*x17899))+(((-1.0)*sj12*x17898))+((r11*x17901))+((r01*x17894))+(((-1.0)*x17896*x17900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x17902*x17903))+(((-1.0)*r01*x17901))+((sj12*sj14*x17896))+((sj12*x17895))+(((-1.0)*x17906*x17907))+((r11*x17894))+(((-1.0)*x17905*x17906))+((x17903*x17904))+(((-1.0)*x17897*x17898))+(((-1.0)*x17899*x17900))))+IKsqr(((((-1.0)*x17905*x17908))+(((-1.0)*x17895*x17897))+(((-1.0)*x17907*x17908))+(((-1.0)*x17904*x17906))+(((-1.0)*x17902*x17906))+(((-1.0)*sj12*sj14*x17899))+(((-1.0)*sj12*x17898))+((r11*x17901))+((r01*x17894))+(((-1.0)*x17896*x17900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x17902*x17903))+(((-1.0)*r01*x17901))+((sj12*sj14*x17896))+((sj12*x17895))+(((-1.0)*x17906*x17907))+((r11*x17894))+(((-1.0)*x17905*x17906))+((x17903*x17904))+(((-1.0)*x17897*x17898))+(((-1.0)*x17899*x17900))), ((((-1.0)*x17905*x17908))+(((-1.0)*x17895*x17897))+(((-1.0)*x17907*x17908))+(((-1.0)*x17904*x17906))+(((-1.0)*x17902*x17906))+(((-1.0)*sj12*sj14*x17899))+(((-1.0)*sj12*x17898))+((r11*x17901))+((r01*x17894))+(((-1.0)*x17896*x17900))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x17909=IKsin(j10);
IkReal x17910=(cj12*x17909);
IkReal x17911=IKcos(j10);
IkReal x17912=(sj12*x17911);
IkReal x17913=(cj14*sj15);
IkReal x17914=(cj16*sj14);
IkReal x17915=((1.0)*sj14*sj16);
IkReal x17916=(cj14*cj15*cj16);
IkReal x17917=(cj14*cj15*sj16);
IkReal x17918=(cj12*x17911);
IkReal x17919=((((-1.0)*sj12*x17909))+x17918);
IkReal x17920=(cj14*cj16);
IkReal x17921=((1.0)*cj14*sj16);
IkReal x17922=((1.0)*sj14*sj15);
IkReal x17923=((1.0)*cj15*cj16*sj14);
IkReal x17924=((1.0)*cj15*sj14*sj16);
IkReal x17925=((0.37429)*cj15);
IkReal x17926=((0.01)*sj15);
IkReal x17927=((0.069)*x17909);
IkReal x17928=((0.01)*cj15*cj16);
IkReal x17929=((0.01)*cj15*sj16);
IkReal x17930=((0.37429)*cj16*sj15);
IkReal x17931=((0.37429)*sj15*sj16);
evalcond[0]=(((r11*x17916))+((r10*x17914))+((r10*x17917))+((r12*x17913))+x17910+x17912+(((-1.0)*r11*x17915)));
evalcond[1]=(((r00*x17917))+(((-1.0)*r01*x17915))+((r02*x17913))+x17919+((r01*x17916))+((r00*x17914)));
evalcond[2]=((((-1.0)*r10*x17924))+(((-1.0)*r11*x17923))+((r10*x17920))+(((-1.0)*r12*x17922))+x17919+(((-1.0)*r11*x17921)));
evalcond[3]=((((-1.0)*r00*x17924))+(((-1.0)*r01*x17923))+(((-1.0)*x17912))+(((-1.0)*r01*x17921))+((r00*x17920))+(((-1.0)*x17910))+(((-1.0)*r02*x17922)));
evalcond[4]=(((r01*x17928))+(((-1.0)*(1.0)*px))+(((0.069)*x17918))+((r02*x17926))+((r02*x17925))+((r00*x17929))+(((0.069)*x17911))+(((-1.0)*r01*x17930))+(((-1.0)*sj12*x17927))+(((-1.0)*r00*x17931)));
evalcond[5]=(((r10*x17929))+(((0.069)*x17912))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x17931))+(((0.069)*x17910))+x17927+((r11*x17928))+(((-1.0)*r11*x17930))+((r12*x17925))+((r12*x17926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x17932=((1.0)*cj15);
IkReal x17933=(cj16*sj15);
IkReal x17934=(sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs(((((-1.0)*r12*x17932))+((r11*x17933))+((r10*x17934)))))+(IKabs(((((-1.0)*r02*x17932))+((r01*x17933))+((r00*x17934))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j10eval[0]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17935=(cj15*sj14);
CheckValue<IkReal> x17936=IKPowWithIntegerCheck(sj11,-1);
if(!x17936.valid){
continue;
}
CheckValue<IkReal> x17937=IKPowWithIntegerCheck(cj11,-1);
if(!x17937.valid){
continue;
}
if( IKabs(((x17936.value)*((((r10*sj16*x17935))+((r12*sj14*sj15))+((cj16*r11*x17935))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17937.value)*((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x17936.value)*((((r10*sj16*x17935))+((r12*sj14*sj15))+((cj16*r11*x17935))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16))))))+IKsqr(((x17937.value)*((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x17936.value)*((((r10*sj16*x17935))+((r12*sj14*sj15))+((cj16*r11*x17935))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16))))), ((x17937.value)*((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x17938=(cj15*r02);
IkReal x17939=(cj16*sj15);
IkReal x17940=(r01*x17939);
IkReal x17941=(sj15*sj16);
IkReal x17942=(r00*x17941);
IkReal x17943=IKcos(j10);
IkReal x17944=(cj15*r12);
IkReal x17945=(r11*x17939);
IkReal x17946=(r10*x17941);
IkReal x17947=IKsin(j10);
IkReal x17948=((1.0)*x17947);
IkReal x17949=(cj14*sj15);
IkReal x17950=(cj16*sj14);
IkReal x17951=((1.0)*sj14*sj16);
IkReal x17952=(cj14*cj15*cj16);
IkReal x17953=(cj14*cj15*sj16);
IkReal x17954=(cj14*cj16);
IkReal x17955=((1.0)*cj14*sj16);
IkReal x17956=((1.0)*sj14*sj15);
IkReal x17957=((1.0)*cj15*cj16*sj14);
IkReal x17958=((1.0)*cj15*sj14*sj16);
IkReal x17959=((0.01)*sj15);
IkReal x17960=((0.069)*x17947);
IkReal x17961=((0.069)*x17943);
IkReal x17962=((0.36442)*cj11);
IkReal x17963=((0.01)*cj15*cj16);
IkReal x17964=((0.01)*cj15*sj16);
evalcond[0]=(x17940+x17942+(((-1.0)*cj11*x17943))+(((-1.0)*x17938)));
evalcond[1]=(x17946+x17945+(((-1.0)*cj11*x17948))+(((-1.0)*x17944)));
evalcond[2]=((((-1.0)*r11*x17951))+((r11*x17952))+((r12*x17949))+((r10*x17950))+x17943+((r10*x17953)));
evalcond[3]=(((r02*x17949))+((r00*x17953))+((r00*x17950))+((r01*x17952))+(((-1.0)*x17948))+(((-1.0)*r01*x17951)));
evalcond[4]=((((-1.0)*r11*x17957))+(((-1.0)*r10*x17958))+((r10*x17954))+(((-1.0)*r12*x17956))+(((-1.0)*r11*x17955))+((sj11*x17947)));
evalcond[5]=((((-1.0)*r01*x17957))+(((-1.0)*r01*x17955))+(((-1.0)*r02*x17956))+(((-1.0)*r00*x17958))+((sj11*x17943))+((r00*x17954)));
evalcond[6]=(((r00*x17964))+(((-1.0)*(1.0)*px))+(((-1.0)*x17960))+((r01*x17963))+((r02*x17959))+(((0.37429)*x17938))+(((-0.37429)*x17942))+((x17943*x17962))+x17961+(((-0.37429)*x17940)));
evalcond[7]=((((-1.0)*(1.0)*py))+((x17947*x17962))+(((-0.37429)*x17946))+((r11*x17963))+(((0.37429)*x17944))+((r10*x17964))+((r12*x17959))+(((-0.37429)*x17945))+x17960+x17961);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17965=(cj14*cj15);
IkReal x17966=(cj16*r01);
IkReal x17967=(r00*sj16);
CheckValue<IkReal> x17968=IKPowWithIntegerCheck(cj11,-1);
if(!x17968.valid){
continue;
}
if( IKabs((((x17965*x17966))+((x17965*x17967))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((cj16*r00*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17968.value)*((((sj15*x17967))+((sj15*x17966))+(((-1.0)*(1.0)*cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x17965*x17966))+((x17965*x17967))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((cj16*r00*sj14))))+IKsqr(((x17968.value)*((((sj15*x17967))+((sj15*x17966))+(((-1.0)*(1.0)*cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((x17965*x17966))+((x17965*x17967))+(((-1.0)*(1.0)*r01*sj14*sj16))+((cj14*r02*sj15))+((cj16*r00*sj14))), ((x17968.value)*((((sj15*x17967))+((sj15*x17966))+(((-1.0)*(1.0)*cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x17969=(cj15*r02);
IkReal x17970=(cj16*sj15);
IkReal x17971=(r01*x17970);
IkReal x17972=(sj15*sj16);
IkReal x17973=(r00*x17972);
IkReal x17974=IKcos(j10);
IkReal x17975=(cj15*r12);
IkReal x17976=(r11*x17970);
IkReal x17977=(r10*x17972);
IkReal x17978=IKsin(j10);
IkReal x17979=((1.0)*x17978);
IkReal x17980=(cj14*sj15);
IkReal x17981=(cj16*sj14);
IkReal x17982=((1.0)*sj14*sj16);
IkReal x17983=(cj14*cj15*cj16);
IkReal x17984=(cj14*cj15*sj16);
IkReal x17985=(cj14*cj16);
IkReal x17986=((1.0)*cj14*sj16);
IkReal x17987=((1.0)*sj14*sj15);
IkReal x17988=((1.0)*cj15*cj16*sj14);
IkReal x17989=((1.0)*cj15*sj14*sj16);
IkReal x17990=((0.01)*sj15);
IkReal x17991=((0.069)*x17978);
IkReal x17992=((0.069)*x17974);
IkReal x17993=((0.36442)*cj11);
IkReal x17994=((0.01)*cj15*cj16);
IkReal x17995=((0.01)*cj15*sj16);
evalcond[0]=(x17973+x17971+(((-1.0)*cj11*x17974))+(((-1.0)*x17969)));
evalcond[1]=(x17977+x17976+(((-1.0)*cj11*x17979))+(((-1.0)*x17975)));
evalcond[2]=(x17974+((r10*x17984))+((r11*x17983))+(((-1.0)*r11*x17982))+((r12*x17980))+((r10*x17981)));
evalcond[3]=(((r00*x17984))+(((-1.0)*x17979))+((r00*x17981))+((r01*x17983))+(((-1.0)*r01*x17982))+((r02*x17980)));
evalcond[4]=((((-1.0)*r12*x17987))+(((-1.0)*r11*x17988))+(((-1.0)*r10*x17989))+(((-1.0)*r11*x17986))+((r10*x17985))+((sj11*x17978)));
evalcond[5]=((((-1.0)*r01*x17986))+((r00*x17985))+(((-1.0)*r01*x17988))+((sj11*x17974))+(((-1.0)*r00*x17989))+(((-1.0)*r02*x17987)));
evalcond[6]=(((x17974*x17993))+(((-1.0)*(1.0)*px))+(((-0.37429)*x17973))+(((-1.0)*x17991))+((r02*x17990))+(((0.37429)*x17969))+((r01*x17994))+x17992+(((-0.37429)*x17971))+((r00*x17995)));
evalcond[7]=(((r10*x17995))+(((-1.0)*(1.0)*py))+(((0.37429)*x17975))+((r12*x17990))+(((-0.37429)*x17977))+((x17978*x17993))+x17992+x17991+((r11*x17994))+(((-0.37429)*x17976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x17996=((1.0)*cj15);
IkReal x17997=(cj16*sj15);
IkReal x17998=(sj15*sj16);
CheckValue<IkReal> x17999 = IKatan2WithCheck(IkReal((((r11*x17997))+(((-1.0)*r12*x17996))+((r10*x17998)))),IkReal(((((-1.0)*r02*x17996))+((r01*x17997))+((r00*x17998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x17999.valid){
continue;
}
CheckValue<IkReal> x18000=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x18000.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x17999.value)+(((1.5707963267949)*(x18000.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18001=(cj15*r02);
IkReal x18002=(cj16*sj15);
IkReal x18003=(r01*x18002);
IkReal x18004=(sj15*sj16);
IkReal x18005=(r00*x18004);
IkReal x18006=IKcos(j10);
IkReal x18007=(cj15*r12);
IkReal x18008=(r11*x18002);
IkReal x18009=(r10*x18004);
IkReal x18010=IKsin(j10);
IkReal x18011=((1.0)*x18010);
IkReal x18012=(cj14*sj15);
IkReal x18013=(cj16*sj14);
IkReal x18014=((1.0)*sj14*sj16);
IkReal x18015=(cj14*cj15*cj16);
IkReal x18016=(cj14*cj15*sj16);
IkReal x18017=(cj14*cj16);
IkReal x18018=((1.0)*cj14*sj16);
IkReal x18019=((1.0)*sj14*sj15);
IkReal x18020=((1.0)*cj15*cj16*sj14);
IkReal x18021=((1.0)*cj15*sj14*sj16);
IkReal x18022=((0.01)*sj15);
IkReal x18023=((0.069)*x18010);
IkReal x18024=((0.069)*x18006);
IkReal x18025=((0.36442)*cj11);
IkReal x18026=((0.01)*cj15*cj16);
IkReal x18027=((0.01)*cj15*sj16);
evalcond[0]=(x18003+x18005+(((-1.0)*cj11*x18006))+(((-1.0)*x18001)));
evalcond[1]=(x18009+x18008+(((-1.0)*x18007))+(((-1.0)*cj11*x18011)));
evalcond[2]=(x18006+((r12*x18012))+((r10*x18016))+(((-1.0)*r11*x18014))+((r11*x18015))+((r10*x18013)));
evalcond[3]=(((r00*x18013))+((r01*x18015))+(((-1.0)*x18011))+((r00*x18016))+(((-1.0)*r01*x18014))+((r02*x18012)));
evalcond[4]=((((-1.0)*r11*x18018))+((r10*x18017))+(((-1.0)*r12*x18019))+((sj11*x18010))+(((-1.0)*r10*x18021))+(((-1.0)*r11*x18020)));
evalcond[5]=(((sj11*x18006))+(((-1.0)*r01*x18018))+(((-1.0)*r00*x18021))+(((-1.0)*r01*x18020))+(((-1.0)*r02*x18019))+((r00*x18017)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r01*x18026))+(((-0.37429)*x18005))+((r02*x18022))+(((-0.37429)*x18003))+((x18006*x18025))+x18024+((r00*x18027))+(((0.37429)*x18001))+(((-1.0)*x18023)));
evalcond[7]=(((x18010*x18025))+(((0.37429)*x18007))+(((-1.0)*(1.0)*py))+(((-0.37429)*x18008))+(((-0.37429)*x18009))+x18023+x18024+((r10*x18027))+((r11*x18026))+((r12*x18022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x18028=((1.0)*cj15);
IkReal x18029=(cj16*sj15);
IkReal x18030=(sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs((((r00*x18030))+(((-1.0)*r02*x18028))+((r01*x18029)))))+(IKabs(((((-1.0)*r12*x18028))+((r10*x18030))+((r11*x18029))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j10eval[0]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18031=((1.0)*cj15*sj14);
CheckValue<IkReal> x18032=IKPowWithIntegerCheck(sj11,-1);
if(!x18032.valid){
continue;
}
CheckValue<IkReal> x18033=IKPowWithIntegerCheck(cj11,-1);
if(!x18033.valid){
continue;
}
if( IKabs(((x18032.value)*((((cj14*cj16*r10))+(((-1.0)*(1.0)*r12*sj14*sj15))+(((-1.0)*r10*sj16*x18031))+(((-1.0)*cj16*r11*x18031))+(((-1.0)*(1.0)*cj14*r11*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x18033.value)*(((((-1.0)*cj15*r02))+((r00*sj15*sj16))+((cj16*r01*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x18032.value)*((((cj14*cj16*r10))+(((-1.0)*(1.0)*r12*sj14*sj15))+(((-1.0)*r10*sj16*x18031))+(((-1.0)*cj16*r11*x18031))+(((-1.0)*(1.0)*cj14*r11*sj16))))))+IKsqr(((x18033.value)*(((((-1.0)*cj15*r02))+((r00*sj15*sj16))+((cj16*r01*sj15))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x18032.value)*((((cj14*cj16*r10))+(((-1.0)*(1.0)*r12*sj14*sj15))+(((-1.0)*r10*sj16*x18031))+(((-1.0)*cj16*r11*x18031))+(((-1.0)*(1.0)*cj14*r11*sj16))))), ((x18033.value)*(((((-1.0)*cj15*r02))+((r00*sj15*sj16))+((cj16*r01*sj15))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18034=(cj15*r02);
IkReal x18035=(cj16*sj15);
IkReal x18036=(r01*x18035);
IkReal x18037=(sj15*sj16);
IkReal x18038=(r00*x18037);
IkReal x18039=IKcos(j10);
IkReal x18040=((1.0)*x18039);
IkReal x18041=(cj15*r12);
IkReal x18042=(r11*x18035);
IkReal x18043=(r10*x18037);
IkReal x18044=IKsin(j10);
IkReal x18045=(cj11*x18044);
IkReal x18046=(cj14*sj15);
IkReal x18047=(cj16*sj14);
IkReal x18048=((1.0)*sj14*sj16);
IkReal x18049=(cj14*cj15*cj16);
IkReal x18050=(cj14*cj15*sj16);
IkReal x18051=(cj14*cj16);
IkReal x18052=((1.0)*cj14*sj16);
IkReal x18053=((1.0)*sj14*sj15);
IkReal x18054=((1.0)*cj15*cj16*sj14);
IkReal x18055=((1.0)*cj15*sj14*sj16);
IkReal x18056=((0.01)*sj15);
IkReal x18057=((0.069)*x18044);
IkReal x18058=((0.069)*x18039);
IkReal x18059=((0.01)*cj15*cj16);
IkReal x18060=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*cj11*x18040))+x18038+x18036+(((-1.0)*x18034)));
evalcond[1]=((((-1.0)*x18045))+x18042+x18043+(((-1.0)*x18041)));
evalcond[2]=(((r00*x18050))+((r01*x18049))+(((-1.0)*r01*x18048))+((r00*x18047))+x18044+((r02*x18046)));
evalcond[3]=(((r10*x18050))+((r12*x18046))+(((-1.0)*r11*x18048))+(((-1.0)*x18040))+((r10*x18047))+((r11*x18049)));
evalcond[4]=((((-1.0)*sj11*x18044))+(((-1.0)*r11*x18052))+(((-1.0)*r11*x18054))+(((-1.0)*r12*x18053))+(((-1.0)*r10*x18055))+((r10*x18051)));
evalcond[5]=((((-1.0)*r01*x18054))+(((-1.0)*sj11*x18040))+(((-1.0)*r00*x18055))+(((-1.0)*r02*x18053))+(((-1.0)*r01*x18052))+((r00*x18051)));
evalcond[6]=((((-1.0)*(1.0)*px))+x18058+x18057+(((0.36442)*cj11*x18039))+(((-0.37429)*x18038))+((r00*x18060))+((r01*x18059))+(((-0.37429)*x18036))+((r02*x18056))+(((0.37429)*x18034)));
evalcond[7]=((((-1.0)*x18058))+(((-1.0)*(1.0)*py))+((r12*x18056))+((r10*x18060))+x18057+(((-0.37429)*x18043))+(((0.37429)*x18041))+(((0.36442)*x18045))+((r11*x18059))+(((-0.37429)*x18042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18061=(cj16*r11);
IkReal x18062=(r10*sj16);
IkReal x18063=(cj14*cj15);
CheckValue<IkReal> x18064=IKPowWithIntegerCheck(cj11,-1);
if(!x18064.valid){
continue;
}
if( IKabs(((x18064.value)*((((sj15*x18062))+((sj15*x18061))+(((-1.0)*(1.0)*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12*sj15))+((x18061*x18063))+((cj16*r10*sj14))+((x18062*x18063))+(((-1.0)*(1.0)*r11*sj14*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x18064.value)*((((sj15*x18062))+((sj15*x18061))+(((-1.0)*(1.0)*cj15*r12))))))+IKsqr((((cj14*r12*sj15))+((x18061*x18063))+((cj16*r10*sj14))+((x18062*x18063))+(((-1.0)*(1.0)*r11*sj14*sj16))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x18064.value)*((((sj15*x18062))+((sj15*x18061))+(((-1.0)*(1.0)*cj15*r12))))), (((cj14*r12*sj15))+((x18061*x18063))+((cj16*r10*sj14))+((x18062*x18063))+(((-1.0)*(1.0)*r11*sj14*sj16))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18065=(cj15*r02);
IkReal x18066=(cj16*sj15);
IkReal x18067=(r01*x18066);
IkReal x18068=(sj15*sj16);
IkReal x18069=(r00*x18068);
IkReal x18070=IKcos(j10);
IkReal x18071=((1.0)*x18070);
IkReal x18072=(cj15*r12);
IkReal x18073=(r11*x18066);
IkReal x18074=(r10*x18068);
IkReal x18075=IKsin(j10);
IkReal x18076=(cj11*x18075);
IkReal x18077=(cj14*sj15);
IkReal x18078=(cj16*sj14);
IkReal x18079=((1.0)*sj14*sj16);
IkReal x18080=(cj14*cj15*cj16);
IkReal x18081=(cj14*cj15*sj16);
IkReal x18082=(cj14*cj16);
IkReal x18083=((1.0)*cj14*sj16);
IkReal x18084=((1.0)*sj14*sj15);
IkReal x18085=((1.0)*cj15*cj16*sj14);
IkReal x18086=((1.0)*cj15*sj14*sj16);
IkReal x18087=((0.01)*sj15);
IkReal x18088=((0.069)*x18075);
IkReal x18089=((0.069)*x18070);
IkReal x18090=((0.01)*cj15*cj16);
IkReal x18091=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*cj11*x18071))+x18067+x18069+(((-1.0)*x18065)));
evalcond[1]=((((-1.0)*x18076))+x18074+x18073+(((-1.0)*x18072)));
evalcond[2]=(((r01*x18080))+(((-1.0)*r01*x18079))+((r02*x18077))+x18075+((r00*x18081))+((r00*x18078)));
evalcond[3]=(((r10*x18081))+((r11*x18080))+((r12*x18077))+((r10*x18078))+(((-1.0)*x18071))+(((-1.0)*r11*x18079)));
evalcond[4]=((((-1.0)*r10*x18086))+(((-1.0)*r11*x18085))+((r10*x18082))+(((-1.0)*r11*x18083))+(((-1.0)*r12*x18084))+(((-1.0)*sj11*x18075)));
evalcond[5]=((((-1.0)*sj11*x18071))+(((-1.0)*r02*x18084))+(((-1.0)*r00*x18086))+((r00*x18082))+(((-1.0)*r01*x18083))+(((-1.0)*r01*x18085)));
evalcond[6]=((((-1.0)*(1.0)*px))+x18089+x18088+(((0.37429)*x18065))+((r01*x18090))+(((0.36442)*cj11*x18070))+((r02*x18087))+(((-0.37429)*x18067))+((r00*x18091))+(((-0.37429)*x18069)));
evalcond[7]=((((-1.0)*x18089))+x18088+(((-1.0)*(1.0)*py))+((r12*x18087))+(((-0.37429)*x18074))+(((0.36442)*x18076))+(((-0.37429)*x18073))+(((0.37429)*x18072))+((r11*x18090))+((r10*x18091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18092=((1.0)*cj15);
IkReal x18093=(cj16*sj15);
IkReal x18094=(sj15*sj16);
CheckValue<IkReal> x18095=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x18095.valid){
continue;
}
CheckValue<IkReal> x18096 = IKatan2WithCheck(IkReal((((r10*x18094))+(((-1.0)*r12*x18092))+((r11*x18093)))),IkReal((((r01*x18093))+((r00*x18094))+(((-1.0)*r02*x18092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18096.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18095.value)))+(x18096.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18097=(cj15*r02);
IkReal x18098=(cj16*sj15);
IkReal x18099=(r01*x18098);
IkReal x18100=(sj15*sj16);
IkReal x18101=(r00*x18100);
IkReal x18102=IKcos(j10);
IkReal x18103=((1.0)*x18102);
IkReal x18104=(cj15*r12);
IkReal x18105=(r11*x18098);
IkReal x18106=(r10*x18100);
IkReal x18107=IKsin(j10);
IkReal x18108=(cj11*x18107);
IkReal x18109=(cj14*sj15);
IkReal x18110=(cj16*sj14);
IkReal x18111=((1.0)*sj14*sj16);
IkReal x18112=(cj14*cj15*cj16);
IkReal x18113=(cj14*cj15*sj16);
IkReal x18114=(cj14*cj16);
IkReal x18115=((1.0)*cj14*sj16);
IkReal x18116=((1.0)*sj14*sj15);
IkReal x18117=((1.0)*cj15*cj16*sj14);
IkReal x18118=((1.0)*cj15*sj14*sj16);
IkReal x18119=((0.01)*sj15);
IkReal x18120=((0.069)*x18107);
IkReal x18121=((0.069)*x18102);
IkReal x18122=((0.01)*cj15*cj16);
IkReal x18123=((0.01)*cj15*sj16);
evalcond[0]=(x18099+(((-1.0)*x18097))+x18101+(((-1.0)*cj11*x18103)));
evalcond[1]=((((-1.0)*x18108))+(((-1.0)*x18104))+x18106+x18105);
evalcond[2]=(((r02*x18109))+(((-1.0)*r01*x18111))+((r00*x18113))+x18107+((r00*x18110))+((r01*x18112)));
evalcond[3]=(((r12*x18109))+((r11*x18112))+((r10*x18110))+((r10*x18113))+(((-1.0)*x18103))+(((-1.0)*r11*x18111)));
evalcond[4]=(((r10*x18114))+(((-1.0)*r11*x18115))+(((-1.0)*r11*x18117))+(((-1.0)*r10*x18118))+(((-1.0)*sj11*x18107))+(((-1.0)*r12*x18116)));
evalcond[5]=((((-1.0)*r01*x18115))+((r00*x18114))+(((-1.0)*r02*x18116))+(((-1.0)*r00*x18118))+(((-1.0)*r01*x18117))+(((-1.0)*sj11*x18103)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r02*x18119))+(((-0.37429)*x18099))+((r01*x18122))+(((0.36442)*cj11*x18102))+x18120+x18121+(((-0.37429)*x18101))+(((0.37429)*x18097))+((r00*x18123)));
evalcond[7]=((((0.37429)*x18104))+(((-1.0)*(1.0)*py))+(((-1.0)*x18121))+(((0.36442)*x18108))+((r11*x18122))+((r12*x18119))+x18120+(((-0.37429)*x18106))+(((-0.37429)*x18105))+((r10*x18123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18124=((1.0)*cj15);
IkReal x18125=(cj16*sj15);
IkReal x18126=(sj15*sj16);
if( IKabs((((r11*x18125))+((r10*x18126))+(((-1.0)*r12*x18124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x18124))+((r00*x18126))+((r01*x18125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x18125))+((r10*x18126))+(((-1.0)*r12*x18124))))+IKsqr(((((-1.0)*r02*x18124))+((r00*x18126))+((r01*x18125))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r11*x18125))+((r10*x18126))+(((-1.0)*r12*x18124))), ((((-1.0)*r02*x18124))+((r00*x18126))+((r01*x18125))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18127=(cj15*r02);
IkReal x18128=(cj16*sj15);
IkReal x18129=(r01*x18128);
IkReal x18130=(sj15*sj16);
IkReal x18131=(r00*x18130);
IkReal x18132=IKcos(j10);
IkReal x18133=(cj15*r12);
IkReal x18134=(r11*x18128);
IkReal x18135=(r10*x18130);
IkReal x18136=IKsin(j10);
IkReal x18137=((1.0)*x18136);
IkReal x18138=(sj12*x18132);
IkReal x18139=(cj14*sj15);
IkReal x18140=(cj16*sj14);
IkReal x18141=((1.0)*sj14*sj16);
IkReal x18142=(cj14*cj15*cj16);
IkReal x18143=(cj14*cj15*sj16);
IkReal x18144=(cj14*cj16);
IkReal x18145=((1.0)*cj14*sj16);
IkReal x18146=((1.0)*sj14*sj15);
IkReal x18147=((1.0)*cj15*cj16*sj14);
IkReal x18148=((1.0)*cj15*sj14*sj16);
IkReal x18149=((0.01)*sj15);
IkReal x18150=((0.01)*cj15*cj16);
IkReal x18151=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x18132))+(((-1.0)*x18127))+x18129+x18131);
evalcond[1]=((((-1.0)*x18137))+(((-1.0)*x18133))+x18134+x18135);
evalcond[2]=(((r11*x18142))+(((-1.0)*r11*x18141))+((r12*x18139))+x18138+((r10*x18143))+((r10*x18140)));
evalcond[3]=(((r00*x18140))+((r00*x18143))+(((-1.0)*sj12*x18137))+((r02*x18139))+(((-1.0)*r01*x18141))+((r01*x18142)));
evalcond[4]=((((-1.0)*r11*x18147))+((r10*x18144))+(((-1.0)*r11*x18145))+(((-1.0)*r10*x18148))+(((-1.0)*r12*x18146))+((cj12*x18132)));
evalcond[5]=((((-1.0)*r01*x18147))+(((-1.0)*r00*x18148))+(((-1.0)*cj12*x18137))+(((-1.0)*r02*x18146))+((r00*x18144))+(((-1.0)*r01*x18145)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((0.37429)*x18127))+(((-0.37429)*x18129))+(((-0.37429)*x18131))+(((-0.069)*sj12*x18136))+((r00*x18151))+(((0.43342)*x18132))+((r01*x18150))+((r02*x18149)));
evalcond[7]=((((0.43342)*x18136))+(((-1.0)*(1.0)*py))+((r12*x18149))+(((-0.37429)*x18134))+(((0.37429)*x18133))+(((-0.37429)*x18135))+(((0.069)*x18138))+((r11*x18150))+((r10*x18151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18152=((1.0)*cj16*sj15);
IkReal x18153=((1.0)*sj15*sj16);
if( IKabs(((((-1.0)*r11*x18152))+(((-1.0)*r10*x18153))+((cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x18152))+((cj15*r02))+(((-1.0)*r00*x18153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x18152))+(((-1.0)*r10*x18153))+((cj15*r12))))+IKsqr(((((-1.0)*r01*x18152))+((cj15*r02))+(((-1.0)*r00*x18153))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r11*x18152))+(((-1.0)*r10*x18153))+((cj15*r12))), ((((-1.0)*r01*x18152))+((cj15*r02))+(((-1.0)*r00*x18153))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18154=IKcos(j10);
IkReal x18155=(cj15*r02);
IkReal x18156=(cj16*sj15);
IkReal x18157=(r01*x18156);
IkReal x18158=(sj15*sj16);
IkReal x18159=(r00*x18158);
IkReal x18160=IKsin(j10);
IkReal x18161=(cj15*r12);
IkReal x18162=(r11*x18156);
IkReal x18163=(r10*x18158);
IkReal x18164=(sj12*x18154);
IkReal x18165=(cj14*sj15);
IkReal x18166=(cj16*sj14);
IkReal x18167=((1.0)*sj14*sj16);
IkReal x18168=(cj14*cj15*cj16);
IkReal x18169=(cj14*cj15*sj16);
IkReal x18170=((1.0)*x18160);
IkReal x18171=(cj14*cj16);
IkReal x18172=((1.0)*cj14*sj16);
IkReal x18173=((1.0)*sj14*sj15);
IkReal x18174=((1.0)*cj15*cj16*sj14);
IkReal x18175=((1.0)*cj15*sj14*sj16);
IkReal x18176=((0.01)*sj15);
IkReal x18177=((0.01)*cj15*cj16);
IkReal x18178=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x18155))+x18157+x18154+x18159);
evalcond[1]=((((-1.0)*x18161))+x18163+x18162+x18160);
evalcond[2]=(((r12*x18165))+((r10*x18166))+((r11*x18168))+((r10*x18169))+(((-1.0)*r11*x18167))+x18164);
evalcond[3]=(((r00*x18166))+((r00*x18169))+(((-1.0)*r01*x18167))+((r01*x18168))+(((-1.0)*sj12*x18170))+((r02*x18165)));
evalcond[4]=(((cj12*x18154))+(((-1.0)*r10*x18175))+((r10*x18171))+(((-1.0)*r12*x18173))+(((-1.0)*r11*x18174))+(((-1.0)*r11*x18172)));
evalcond[5]=((((-1.0)*cj12*x18170))+(((-1.0)*r00*x18175))+(((-1.0)*r01*x18172))+(((-1.0)*r02*x18173))+((r00*x18171))+(((-1.0)*r01*x18174)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x18159))+(((-0.37429)*x18157))+((r02*x18176))+(((-0.069)*sj12*x18160))+(((0.37429)*x18155))+(((-0.29542)*x18154))+((r00*x18178))+((r01*x18177)));
evalcond[7]=((((0.069)*x18164))+(((-1.0)*(1.0)*py))+((r12*x18176))+(((-0.29542)*x18160))+((r11*x18177))+(((0.37429)*x18161))+(((-0.37429)*x18163))+((r10*x18178))+(((-0.37429)*x18162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
IkReal x18179=((1.0)*cj15);
IkReal x18180=(cj16*sj15);
IkReal x18181=(sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs((((r11*x18180))+(((-1.0)*r12*x18179))+((r10*x18181)))))+(IKabs((((r01*x18180))+((r00*x18181))+(((-1.0)*r02*x18179))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
j10eval[0]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18182=(cj14*cj15);
CheckValue<IkReal> x18183=IKPowWithIntegerCheck(sj11,-1);
if(!x18183.valid){
continue;
}
CheckValue<IkReal> x18184=IKPowWithIntegerCheck(cj11,-1);
if(!x18184.valid){
continue;
}
if( IKabs(((x18183.value)*((((cj14*r12*sj15))+((cj16*r11*x18182))+((cj16*r10*sj14))+((r10*sj16*x18182))+(((-1.0)*(1.0)*r11*sj14*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x18184.value)*((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x18183.value)*((((cj14*r12*sj15))+((cj16*r11*x18182))+((cj16*r10*sj14))+((r10*sj16*x18182))+(((-1.0)*(1.0)*r11*sj14*sj16))))))+IKsqr(((x18184.value)*((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x18183.value)*((((cj14*r12*sj15))+((cj16*r11*x18182))+((cj16*r10*sj14))+((r10*sj16*x18182))+(((-1.0)*(1.0)*r11*sj14*sj16))))), ((x18184.value)*((((r00*sj15*sj16))+((cj16*r01*sj15))+(((-1.0)*(1.0)*cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18185=(cj15*r02);
IkReal x18186=(cj16*sj15);
IkReal x18187=(r01*x18186);
IkReal x18188=(sj15*sj16);
IkReal x18189=(r00*x18188);
IkReal x18190=IKcos(j10);
IkReal x18191=((1.0)*x18190);
IkReal x18192=(cj15*r12);
IkReal x18193=(r11*x18186);
IkReal x18194=(r10*x18188);
IkReal x18195=IKsin(j10);
IkReal x18196=((1.0)*x18195);
IkReal x18197=(cj14*cj16);
IkReal x18198=((1.0)*cj14*sj16);
IkReal x18199=((1.0)*sj14*sj15);
IkReal x18200=((1.0)*cj15*cj16*sj14);
IkReal x18201=((1.0)*cj15*sj14*sj16);
IkReal x18202=(cj14*sj15);
IkReal x18203=(cj16*sj14);
IkReal x18204=((1.0)*sj14*sj16);
IkReal x18205=(cj14*cj15*cj16);
IkReal x18206=(cj14*cj15*sj16);
IkReal x18207=((0.01)*sj15);
IkReal x18208=((0.069)*x18190);
IkReal x18209=((0.36442)*cj11);
IkReal x18210=((0.01)*cj15*cj16);
IkReal x18211=((0.01)*cj15*sj16);
IkReal x18212=((0.069)*x18195);
evalcond[0]=((((-1.0)*cj11*x18191))+x18187+x18189+(((-1.0)*x18185)));
evalcond[1]=((((-1.0)*cj11*x18196))+(((-1.0)*x18192))+x18194+x18193);
evalcond[2]=((((-1.0)*r12*x18199))+(((-1.0)*r10*x18201))+(((-1.0)*r11*x18198))+x18190+(((-1.0)*r11*x18200))+((r10*x18197)));
evalcond[3]=((((-1.0)*r11*x18204))+(((-1.0)*sj11*x18196))+((r12*x18202))+((r10*x18203))+((r10*x18206))+((r11*x18205)));
evalcond[4]=(((r02*x18202))+((r00*x18206))+(((-1.0)*sj11*x18191))+((r00*x18203))+(((-1.0)*r01*x18204))+((r01*x18205)));
evalcond[5]=((((-1.0)*r00*x18201))+(((-1.0)*r01*x18198))+(((-1.0)*x18196))+((r00*x18197))+(((-1.0)*r02*x18199))+(((-1.0)*r01*x18200)));
evalcond[6]=((((-1.0)*sj11*x18208))+(((-1.0)*(1.0)*px))+((r01*x18210))+(((0.37429)*x18185))+(((-0.37429)*x18187))+((r00*x18211))+((r02*x18207))+((x18190*x18209))+x18208+(((-0.37429)*x18189)));
evalcond[7]=(((r11*x18210))+(((-1.0)*sj11*x18212))+(((-1.0)*(1.0)*py))+(((-0.37429)*x18194))+((r12*x18207))+(((-0.37429)*x18193))+((r10*x18211))+(((0.37429)*x18192))+x18212+((x18195*x18209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18213=(cj16*r11);
IkReal x18214=(r10*sj16);
IkReal x18215=(cj15*sj14);
CheckValue<IkReal> x18216=IKPowWithIntegerCheck(cj11,-1);
if(!x18216.valid){
continue;
}
if( IKabs(((x18216.value)*((((sj15*x18213))+((sj15*x18214))+(((-1.0)*(1.0)*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*sj14*sj15))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16))+((x18214*x18215))+((x18213*x18215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x18216.value)*((((sj15*x18213))+((sj15*x18214))+(((-1.0)*(1.0)*cj15*r12))))))+IKsqr((((r12*sj14*sj15))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16))+((x18214*x18215))+((x18213*x18215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x18216.value)*((((sj15*x18213))+((sj15*x18214))+(((-1.0)*(1.0)*cj15*r12))))), (((r12*sj14*sj15))+(((-1.0)*(1.0)*cj14*cj16*r10))+((cj14*r11*sj16))+((x18214*x18215))+((x18213*x18215))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18217=(cj15*r02);
IkReal x18218=(cj16*sj15);
IkReal x18219=(r01*x18218);
IkReal x18220=(sj15*sj16);
IkReal x18221=(r00*x18220);
IkReal x18222=IKcos(j10);
IkReal x18223=((1.0)*x18222);
IkReal x18224=(cj15*r12);
IkReal x18225=(r11*x18218);
IkReal x18226=(r10*x18220);
IkReal x18227=IKsin(j10);
IkReal x18228=((1.0)*x18227);
IkReal x18229=(cj14*cj16);
IkReal x18230=((1.0)*cj14*sj16);
IkReal x18231=((1.0)*sj14*sj15);
IkReal x18232=((1.0)*cj15*cj16*sj14);
IkReal x18233=((1.0)*cj15*sj14*sj16);
IkReal x18234=(cj14*sj15);
IkReal x18235=(cj16*sj14);
IkReal x18236=((1.0)*sj14*sj16);
IkReal x18237=(cj14*cj15*cj16);
IkReal x18238=(cj14*cj15*sj16);
IkReal x18239=((0.01)*sj15);
IkReal x18240=((0.069)*x18222);
IkReal x18241=((0.36442)*cj11);
IkReal x18242=((0.01)*cj15*cj16);
IkReal x18243=((0.01)*cj15*sj16);
IkReal x18244=((0.069)*x18227);
evalcond[0]=((((-1.0)*x18217))+(((-1.0)*cj11*x18223))+x18221+x18219);
evalcond[1]=((((-1.0)*x18224))+(((-1.0)*cj11*x18228))+x18226+x18225);
evalcond[2]=((((-1.0)*r12*x18231))+(((-1.0)*r11*x18230))+((r10*x18229))+(((-1.0)*r11*x18232))+x18222+(((-1.0)*r10*x18233)));
evalcond[3]=(((r12*x18234))+(((-1.0)*r11*x18236))+(((-1.0)*sj11*x18228))+((r10*x18235))+((r11*x18237))+((r10*x18238)));
evalcond[4]=(((r00*x18235))+((r01*x18237))+(((-1.0)*r01*x18236))+((r00*x18238))+(((-1.0)*sj11*x18223))+((r02*x18234)));
evalcond[5]=((((-1.0)*r02*x18231))+(((-1.0)*r01*x18232))+(((-1.0)*x18228))+((r00*x18229))+(((-1.0)*r01*x18230))+(((-1.0)*r00*x18233)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.37429)*x18221))+(((-0.37429)*x18219))+x18240+((r01*x18242))+(((0.37429)*x18217))+(((-1.0)*sj11*x18240))+((r00*x18243))+((r02*x18239))+((x18222*x18241)));
evalcond[7]=(((r10*x18243))+(((-1.0)*(1.0)*py))+x18244+(((0.37429)*x18224))+((r12*x18239))+((r11*x18242))+(((-1.0)*sj11*x18244))+((x18227*x18241))+(((-0.37429)*x18226))+(((-0.37429)*x18225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18245=((1.0)*cj15);
IkReal x18246=(cj16*sj15);
IkReal x18247=(sj15*sj16);
CheckValue<IkReal> x18248=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x18248.valid){
continue;
}
CheckValue<IkReal> x18249 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x18245))+((r11*x18246))+((r10*x18247)))),IkReal((((r01*x18246))+(((-1.0)*r02*x18245))+((r00*x18247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18249.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18248.value)))+(x18249.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18250=(cj15*r02);
IkReal x18251=(cj16*sj15);
IkReal x18252=(r01*x18251);
IkReal x18253=(sj15*sj16);
IkReal x18254=(r00*x18253);
IkReal x18255=IKcos(j10);
IkReal x18256=((1.0)*x18255);
IkReal x18257=(cj15*r12);
IkReal x18258=(r11*x18251);
IkReal x18259=(r10*x18253);
IkReal x18260=IKsin(j10);
IkReal x18261=((1.0)*x18260);
IkReal x18262=(cj14*cj16);
IkReal x18263=((1.0)*cj14*sj16);
IkReal x18264=((1.0)*sj14*sj15);
IkReal x18265=((1.0)*cj15*cj16*sj14);
IkReal x18266=((1.0)*cj15*sj14*sj16);
IkReal x18267=(cj14*sj15);
IkReal x18268=(cj16*sj14);
IkReal x18269=((1.0)*sj14*sj16);
IkReal x18270=(cj14*cj15*cj16);
IkReal x18271=(cj14*cj15*sj16);
IkReal x18272=((0.01)*sj15);
IkReal x18273=((0.069)*x18255);
IkReal x18274=((0.36442)*cj11);
IkReal x18275=((0.01)*cj15*cj16);
IkReal x18276=((0.01)*cj15*sj16);
IkReal x18277=((0.069)*x18260);
evalcond[0]=((((-1.0)*x18250))+(((-1.0)*cj11*x18256))+x18252+x18254);
evalcond[1]=((((-1.0)*x18257))+(((-1.0)*cj11*x18261))+x18259+x18258);
evalcond[2]=((((-1.0)*r11*x18265))+((r10*x18262))+(((-1.0)*r12*x18264))+(((-1.0)*r11*x18263))+(((-1.0)*r10*x18266))+x18255);
evalcond[3]=(((r12*x18267))+((r11*x18270))+(((-1.0)*sj11*x18261))+((r10*x18268))+((r10*x18271))+(((-1.0)*r11*x18269)));
evalcond[4]=(((r00*x18271))+((r00*x18268))+((r02*x18267))+((r01*x18270))+(((-1.0)*sj11*x18256))+(((-1.0)*r01*x18269)));
evalcond[5]=(((r00*x18262))+(((-1.0)*x18261))+(((-1.0)*r02*x18264))+(((-1.0)*r01*x18265))+(((-1.0)*r01*x18263))+(((-1.0)*r00*x18266)));
evalcond[6]=((((-1.0)*(1.0)*px))+((r01*x18275))+((r02*x18272))+x18273+(((-1.0)*sj11*x18273))+((r00*x18276))+(((-0.37429)*x18252))+((x18255*x18274))+(((-0.37429)*x18254))+(((0.37429)*x18250)));
evalcond[7]=((((-1.0)*(1.0)*py))+x18277+(((-1.0)*sj11*x18277))+(((0.37429)*x18257))+((x18260*x18274))+(((-0.37429)*x18259))+((r10*x18276))+(((-0.37429)*x18258))+((r12*x18272))+((r11*x18275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x18278=((1.0)*cj15);
IkReal x18279=(cj16*sj15);
IkReal x18280=(sj15*sj16);
j10eval[0]=cj11;
j10eval[1]=((IKabs(((((-1.0)*r02*x18278))+((r00*x18280))+((r01*x18279)))))+(IKabs((((r11*x18279))+(((-1.0)*r12*x18278))+((r10*x18280))))));
j10eval[2]=IKsign(cj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j10eval[0]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j10eval[0]=sj11;
j10eval[1]=cj11;
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18281=((1.0)*cj14*cj15);
CheckValue<IkReal> x18282=IKPowWithIntegerCheck(sj11,-1);
if(!x18282.valid){
continue;
}
CheckValue<IkReal> x18283=IKPowWithIntegerCheck(cj11,-1);
if(!x18283.valid){
continue;
}
if( IKabs(((x18282.value)*(((((-1.0)*(1.0)*cj16*r10*sj14))+(((-1.0)*r10*sj16*x18281))+(((-1.0)*cj16*r11*x18281))+((r11*sj14*sj16))+(((-1.0)*(1.0)*cj14*r12*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x18283.value)*(((((-1.0)*cj15*r02))+((r00*sj15*sj16))+((cj16*r01*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x18282.value)*(((((-1.0)*(1.0)*cj16*r10*sj14))+(((-1.0)*r10*sj16*x18281))+(((-1.0)*cj16*r11*x18281))+((r11*sj14*sj16))+(((-1.0)*(1.0)*cj14*r12*sj15))))))+IKsqr(((x18283.value)*(((((-1.0)*cj15*r02))+((r00*sj15*sj16))+((cj16*r01*sj15))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x18282.value)*(((((-1.0)*(1.0)*cj16*r10*sj14))+(((-1.0)*r10*sj16*x18281))+(((-1.0)*cj16*r11*x18281))+((r11*sj14*sj16))+(((-1.0)*(1.0)*cj14*r12*sj15))))), ((x18283.value)*(((((-1.0)*cj15*r02))+((r00*sj15*sj16))+((cj16*r01*sj15))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18284=(cj15*r02);
IkReal x18285=(cj16*sj15);
IkReal x18286=(r01*x18285);
IkReal x18287=(sj15*sj16);
IkReal x18288=(r00*x18287);
IkReal x18289=IKcos(j10);
IkReal x18290=((1.0)*x18289);
IkReal x18291=(cj15*r12);
IkReal x18292=(r11*x18285);
IkReal x18293=(r10*x18287);
IkReal x18294=IKsin(j10);
IkReal x18295=(cj11*x18294);
IkReal x18296=(sj11*x18294);
IkReal x18297=(cj14*sj15);
IkReal x18298=(cj16*sj14);
IkReal x18299=((1.0)*sj14*sj16);
IkReal x18300=(cj14*cj15*cj16);
IkReal x18301=(cj14*cj15*sj16);
IkReal x18302=(sj11*x18289);
IkReal x18303=(cj14*cj16);
IkReal x18304=((1.0)*cj14*sj16);
IkReal x18305=((1.0)*sj14*sj15);
IkReal x18306=((1.0)*cj15*cj16*sj14);
IkReal x18307=((1.0)*cj15*sj14*sj16);
IkReal x18308=((0.01)*sj15);
IkReal x18309=((0.01)*cj15*cj16);
IkReal x18310=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*cj11*x18290))+(((-1.0)*x18284))+x18288+x18286);
evalcond[1]=((((-1.0)*x18295))+x18293+x18292+(((-1.0)*x18291)));
evalcond[2]=(((r10*x18298))+(((-1.0)*r11*x18299))+((r12*x18297))+x18296+((r11*x18300))+((r10*x18301)));
evalcond[3]=((((-1.0)*r01*x18299))+((r00*x18298))+((r02*x18297))+((r01*x18300))+x18302+((r00*x18301)));
evalcond[4]=(((r00*x18303))+(((-1.0)*r02*x18305))+(((-1.0)*r00*x18307))+(((-1.0)*r01*x18306))+x18294+(((-1.0)*r01*x18304)));
evalcond[5]=(((r10*x18303))+(((-1.0)*r11*x18304))+(((-1.0)*x18290))+(((-1.0)*r11*x18306))+(((-1.0)*r10*x18307))+(((-1.0)*r12*x18305)));
evalcond[6]=((((0.069)*x18302))+(((-1.0)*(1.0)*px))+((r02*x18308))+((r00*x18310))+(((-0.37429)*x18288))+(((-0.37429)*x18286))+(((0.069)*x18289))+((r01*x18309))+(((0.36442)*cj11*x18289))+(((0.37429)*x18284)));
evalcond[7]=((((-1.0)*(1.0)*py))+((r12*x18308))+((r10*x18310))+((r11*x18309))+(((0.37429)*x18291))+(((0.36442)*x18295))+(((0.069)*x18296))+(((-0.37429)*x18292))+(((0.069)*x18294))+(((-0.37429)*x18293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18311=(cj15*sj14);
IkReal x18312=(cj16*r01);
IkReal x18313=(r00*sj16);
CheckValue<IkReal> x18314=IKPowWithIntegerCheck(cj11,-1);
if(!x18314.valid){
continue;
}
if( IKabs((((r02*sj14*sj15))+((x18311*x18312))+(((-1.0)*(1.0)*cj14*cj16*r00))+((cj14*r01*sj16))+((x18311*x18313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x18314.value)*((((sj15*x18312))+((sj15*x18313))+(((-1.0)*(1.0)*cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj14*sj15))+((x18311*x18312))+(((-1.0)*(1.0)*cj14*cj16*r00))+((cj14*r01*sj16))+((x18311*x18313))))+IKsqr(((x18314.value)*((((sj15*x18312))+((sj15*x18313))+(((-1.0)*(1.0)*cj15*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r02*sj14*sj15))+((x18311*x18312))+(((-1.0)*(1.0)*cj14*cj16*r00))+((cj14*r01*sj16))+((x18311*x18313))), ((x18314.value)*((((sj15*x18312))+((sj15*x18313))+(((-1.0)*(1.0)*cj15*r02))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18315=(cj15*r02);
IkReal x18316=(cj16*sj15);
IkReal x18317=(r01*x18316);
IkReal x18318=(sj15*sj16);
IkReal x18319=(r00*x18318);
IkReal x18320=IKcos(j10);
IkReal x18321=((1.0)*x18320);
IkReal x18322=(cj15*r12);
IkReal x18323=(r11*x18316);
IkReal x18324=(r10*x18318);
IkReal x18325=IKsin(j10);
IkReal x18326=(cj11*x18325);
IkReal x18327=(sj11*x18325);
IkReal x18328=(cj14*sj15);
IkReal x18329=(cj16*sj14);
IkReal x18330=((1.0)*sj14*sj16);
IkReal x18331=(cj14*cj15*cj16);
IkReal x18332=(cj14*cj15*sj16);
IkReal x18333=(sj11*x18320);
IkReal x18334=(cj14*cj16);
IkReal x18335=((1.0)*cj14*sj16);
IkReal x18336=((1.0)*sj14*sj15);
IkReal x18337=((1.0)*cj15*cj16*sj14);
IkReal x18338=((1.0)*cj15*sj14*sj16);
IkReal x18339=((0.01)*sj15);
IkReal x18340=((0.01)*cj15*cj16);
IkReal x18341=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x18315))+(((-1.0)*cj11*x18321))+x18319+x18317);
evalcond[1]=(x18324+x18323+(((-1.0)*x18326))+(((-1.0)*x18322)));
evalcond[2]=(x18327+((r10*x18329))+((r10*x18332))+((r12*x18328))+((r11*x18331))+(((-1.0)*r11*x18330)));
evalcond[3]=(((r01*x18331))+(((-1.0)*r01*x18330))+((r00*x18332))+((r00*x18329))+((r02*x18328))+x18333);
evalcond[4]=(x18325+(((-1.0)*r02*x18336))+((r00*x18334))+(((-1.0)*r01*x18337))+(((-1.0)*r00*x18338))+(((-1.0)*r01*x18335)));
evalcond[5]=((((-1.0)*r10*x18338))+((r10*x18334))+(((-1.0)*r11*x18335))+(((-1.0)*x18321))+(((-1.0)*r11*x18337))+(((-1.0)*r12*x18336)));
evalcond[6]=((((0.069)*x18333))+(((-1.0)*(1.0)*px))+(((0.36442)*cj11*x18320))+((r02*x18339))+(((-0.37429)*x18319))+(((0.37429)*x18315))+((r01*x18340))+(((0.069)*x18320))+(((-0.37429)*x18317))+((r00*x18341)));
evalcond[7]=((((-0.37429)*x18324))+(((-1.0)*(1.0)*py))+(((0.069)*x18325))+(((0.069)*x18327))+(((-0.37429)*x18323))+(((0.37429)*x18322))+((r12*x18339))+((r11*x18340))+(((0.36442)*x18326))+((r10*x18341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18342=((1.0)*cj15);
IkReal x18343=(cj16*sj15);
IkReal x18344=(sj15*sj16);
CheckValue<IkReal> x18345=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x18345.valid){
continue;
}
CheckValue<IkReal> x18346 = IKatan2WithCheck(IkReal((((r11*x18343))+((r10*x18344))+(((-1.0)*r12*x18342)))),IkReal(((((-1.0)*r02*x18342))+((r01*x18343))+((r00*x18344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18346.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18345.value)))+(x18346.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18347=(cj15*r02);
IkReal x18348=(cj16*sj15);
IkReal x18349=(r01*x18348);
IkReal x18350=(sj15*sj16);
IkReal x18351=(r00*x18350);
IkReal x18352=IKcos(j10);
IkReal x18353=((1.0)*x18352);
IkReal x18354=(cj15*r12);
IkReal x18355=(r11*x18348);
IkReal x18356=(r10*x18350);
IkReal x18357=IKsin(j10);
IkReal x18358=(cj11*x18357);
IkReal x18359=(sj11*x18357);
IkReal x18360=(cj14*sj15);
IkReal x18361=(cj16*sj14);
IkReal x18362=((1.0)*sj14*sj16);
IkReal x18363=(cj14*cj15*cj16);
IkReal x18364=(cj14*cj15*sj16);
IkReal x18365=(sj11*x18352);
IkReal x18366=(cj14*cj16);
IkReal x18367=((1.0)*cj14*sj16);
IkReal x18368=((1.0)*sj14*sj15);
IkReal x18369=((1.0)*cj15*cj16*sj14);
IkReal x18370=((1.0)*cj15*sj14*sj16);
IkReal x18371=((0.01)*sj15);
IkReal x18372=((0.01)*cj15*cj16);
IkReal x18373=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*cj11*x18353))+x18349+(((-1.0)*x18347))+x18351);
evalcond[1]=((((-1.0)*x18358))+(((-1.0)*x18354))+x18355+x18356);
evalcond[2]=(((r10*x18364))+((r10*x18361))+(((-1.0)*r11*x18362))+((r12*x18360))+((r11*x18363))+x18359);
evalcond[3]=(((r00*x18364))+x18365+((r00*x18361))+((r01*x18363))+((r02*x18360))+(((-1.0)*r01*x18362)));
evalcond[4]=((((-1.0)*r00*x18370))+(((-1.0)*r01*x18367))+(((-1.0)*r01*x18369))+((r00*x18366))+(((-1.0)*r02*x18368))+x18357);
evalcond[5]=((((-1.0)*x18353))+(((-1.0)*r11*x18369))+(((-1.0)*r11*x18367))+(((-1.0)*r12*x18368))+(((-1.0)*r10*x18370))+((r10*x18366)));
evalcond[6]=((((-0.37429)*x18349))+(((-1.0)*(1.0)*px))+(((0.36442)*cj11*x18352))+((r01*x18372))+(((0.37429)*x18347))+(((0.069)*x18365))+(((-0.37429)*x18351))+((r02*x18371))+((r00*x18373))+(((0.069)*x18352)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((0.069)*x18359))+(((-0.37429)*x18356))+(((0.069)*x18357))+((r11*x18372))+((r10*x18373))+(((0.37429)*x18354))+((r12*x18371))+(((-0.37429)*x18355))+(((0.36442)*x18358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x18380=IKPowWithIntegerCheck(cj11,-1);
if(!x18380.valid){
continue;
}
IkReal x18374=x18380.value;
IkReal x18375=((1.0)*cj15*r02);
IkReal x18376=(cj11*sj14);
IkReal x18377=(cj16*r01*sj15);
IkReal x18378=(r00*sj15*sj16);
IkReal x18379=(cj11*cj14*cj15);
CheckValue<IkReal> x18381=IKPowWithIntegerCheck(cj12,-1);
if(!x18381.valid){
continue;
}
CheckValue<IkReal> x18382=IKPowWithIntegerCheck(sj11,-1);
if(!x18382.valid){
continue;
}
if( IKabs((x18374*(x18381.value)*(x18382.value)*((((r10*sj16*x18379))+((((r12*sj15))*((cj11*cj14))))+((sj12*x18377))+(((-1.0)*r11*sj16*x18376))+((sj12*x18378))+((cj16*r10*x18376))+((cj16*r11*x18379))+(((-1.0)*sj12*x18375)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x18374*(((((-1.0)*x18375))+x18378+x18377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x18374*(x18381.value)*(x18382.value)*((((r10*sj16*x18379))+((((r12*sj15))*((cj11*cj14))))+((sj12*x18377))+(((-1.0)*r11*sj16*x18376))+((sj12*x18378))+((cj16*r10*x18376))+((cj16*r11*x18379))+(((-1.0)*sj12*x18375))))))+IKsqr((x18374*(((((-1.0)*x18375))+x18378+x18377))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x18374*(x18381.value)*(x18382.value)*((((r10*sj16*x18379))+((((r12*sj15))*((cj11*cj14))))+((sj12*x18377))+(((-1.0)*r11*sj16*x18376))+((sj12*x18378))+((cj16*r10*x18376))+((cj16*r11*x18379))+(((-1.0)*sj12*x18375))))), (x18374*(((((-1.0)*x18375))+x18378+x18377))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18383=(cj15*r02);
IkReal x18384=(cj16*sj15);
IkReal x18385=(r01*x18384);
IkReal x18386=(sj15*sj16);
IkReal x18387=(r00*x18386);
IkReal x18388=IKcos(j10);
IkReal x18389=(cj11*x18388);
IkReal x18390=(cj15*r12);
IkReal x18391=(r11*x18384);
IkReal x18392=(r10*x18386);
IkReal x18393=IKsin(j10);
IkReal x18394=(cj11*x18393);
IkReal x18395=(sj12*x18388);
IkReal x18396=(cj14*sj15);
IkReal x18397=(cj16*sj14);
IkReal x18398=((1.0)*sj14*sj16);
IkReal x18399=(cj14*cj15*cj16);
IkReal x18400=(cj14*cj15*sj16);
IkReal x18401=((1.0)*x18393);
IkReal x18402=(cj12*x18401);
IkReal x18403=(cj12*sj11*x18388);
IkReal x18404=(cj14*cj16);
IkReal x18405=((1.0)*cj14*sj16);
IkReal x18406=((1.0)*sj14*sj15);
IkReal x18407=((1.0)*cj15*cj16*sj14);
IkReal x18408=((1.0)*cj15*sj14*sj16);
IkReal x18409=((0.01)*sj15);
IkReal x18410=((0.069)*x18393);
IkReal x18411=((0.01)*cj15*cj16);
IkReal x18412=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x18389))+(((-1.0)*x18383))+x18387+x18385);
evalcond[1]=(x18391+x18392+(((-1.0)*x18390))+(((-1.0)*x18394)));
evalcond[2]=(x18395+((r11*x18399))+((r10*x18400))+(((-1.0)*sj11*x18402))+((r12*x18396))+(((-1.0)*r11*x18398))+((r10*x18397)));
evalcond[3]=((((-1.0)*r01*x18398))+((r02*x18396))+((r00*x18397))+(((-1.0)*x18403))+((r00*x18400))+(((-1.0)*sj12*x18401))+((r01*x18399)));
evalcond[4]=(((cj12*x18388))+(((-1.0)*r12*x18406))+(((-1.0)*r11*x18407))+(((-1.0)*r10*x18408))+(((-1.0)*r11*x18405))+((r10*x18404))+((sj11*sj12*x18393)));
evalcond[5]=((((-1.0)*r01*x18405))+(((-1.0)*r00*x18408))+(((-1.0)*x18402))+((r00*x18404))+(((-1.0)*r01*x18407))+(((-1.0)*r02*x18406))+((sj11*x18395)));
evalcond[6]=(((r01*x18411))+(((-1.0)*(1.0)*px))+(((0.36442)*x18389))+((r02*x18409))+(((0.37429)*x18383))+(((0.069)*x18388))+((r00*x18412))+(((-0.37429)*x18387))+(((-0.37429)*x18385))+(((-0.069)*x18403))+(((-1.0)*sj12*x18410)));
evalcond[7]=(((r10*x18412))+(((-0.37429)*x18391))+(((-1.0)*(1.0)*py))+(((0.37429)*x18390))+(((-0.37429)*x18392))+(((0.069)*x18395))+((r12*x18409))+x18410+(((0.36442)*x18394))+((r11*x18411))+(((-1.0)*cj12*sj11*x18410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x18422=IKPowWithIntegerCheck(cj11,-1);
if(!x18422.valid){
continue;
}
IkReal x18413=x18422.value;
IkReal x18414=(cj11*sj14);
IkReal x18415=(cj15*r02);
IkReal x18416=(cj16*r01);
IkReal x18417=(cj11*cj14*cj15);
IkReal x18418=(r00*sj16);
IkReal x18419=((1.0)*cj12*sj11);
IkReal x18420=(sj15*x18416);
IkReal x18421=(sj15*x18418);
CheckValue<IkReal> x18423=IKPowWithIntegerCheck(sj12,-1);
if(!x18423.valid){
continue;
}
if( IKabs((x18413*(x18423.value)*((((x18417*x18418))+(((-1.0)*r01*sj16*x18414))+((x18416*x18417))+((((r02*sj15))*((cj11*cj14))))+(((-1.0)*x18419*x18421))+((cj16*r00*x18414))+(((-1.0)*x18419*x18420))+((cj12*sj11*x18415)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x18413*(((((-1.0)*x18415))+x18421+x18420)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x18413*(x18423.value)*((((x18417*x18418))+(((-1.0)*r01*sj16*x18414))+((x18416*x18417))+((((r02*sj15))*((cj11*cj14))))+(((-1.0)*x18419*x18421))+((cj16*r00*x18414))+(((-1.0)*x18419*x18420))+((cj12*sj11*x18415))))))+IKsqr((x18413*(((((-1.0)*x18415))+x18421+x18420))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((x18413*(x18423.value)*((((x18417*x18418))+(((-1.0)*r01*sj16*x18414))+((x18416*x18417))+((((r02*sj15))*((cj11*cj14))))+(((-1.0)*x18419*x18421))+((cj16*r00*x18414))+(((-1.0)*x18419*x18420))+((cj12*sj11*x18415))))), (x18413*(((((-1.0)*x18415))+x18421+x18420))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18424=(cj15*r02);
IkReal x18425=(cj16*sj15);
IkReal x18426=(r01*x18425);
IkReal x18427=(sj15*sj16);
IkReal x18428=(r00*x18427);
IkReal x18429=IKcos(j10);
IkReal x18430=(cj11*x18429);
IkReal x18431=(cj15*r12);
IkReal x18432=(r11*x18425);
IkReal x18433=(r10*x18427);
IkReal x18434=IKsin(j10);
IkReal x18435=(cj11*x18434);
IkReal x18436=(sj12*x18429);
IkReal x18437=(cj14*sj15);
IkReal x18438=(cj16*sj14);
IkReal x18439=((1.0)*sj14*sj16);
IkReal x18440=(cj14*cj15*cj16);
IkReal x18441=(cj14*cj15*sj16);
IkReal x18442=((1.0)*x18434);
IkReal x18443=(cj12*x18442);
IkReal x18444=(cj12*sj11*x18429);
IkReal x18445=(cj14*cj16);
IkReal x18446=((1.0)*cj14*sj16);
IkReal x18447=((1.0)*sj14*sj15);
IkReal x18448=((1.0)*cj15*cj16*sj14);
IkReal x18449=((1.0)*cj15*sj14*sj16);
IkReal x18450=((0.01)*sj15);
IkReal x18451=((0.069)*x18434);
IkReal x18452=((0.01)*cj15*cj16);
IkReal x18453=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x18424))+x18428+x18426+(((-1.0)*x18430)));
evalcond[1]=((((-1.0)*x18431))+(((-1.0)*x18435))+x18432+x18433);
evalcond[2]=(((r11*x18440))+((r10*x18438))+(((-1.0)*r11*x18439))+x18436+(((-1.0)*sj11*x18443))+((r10*x18441))+((r12*x18437)));
evalcond[3]=(((r00*x18441))+((r02*x18437))+(((-1.0)*r01*x18439))+(((-1.0)*sj12*x18442))+(((-1.0)*x18444))+((r01*x18440))+((r00*x18438)));
evalcond[4]=(((cj12*x18429))+(((-1.0)*r12*x18447))+(((-1.0)*r10*x18449))+((r10*x18445))+(((-1.0)*r11*x18446))+((sj11*sj12*x18434))+(((-1.0)*r11*x18448)));
evalcond[5]=((((-1.0)*r01*x18448))+(((-1.0)*r00*x18449))+(((-1.0)*r01*x18446))+((sj11*x18436))+(((-1.0)*x18443))+(((-1.0)*r02*x18447))+((r00*x18445)));
evalcond[6]=((((-1.0)*sj12*x18451))+(((-1.0)*(1.0)*px))+((r01*x18452))+((r02*x18450))+(((0.37429)*x18424))+(((0.36442)*x18430))+((r00*x18453))+(((0.069)*x18429))+(((-0.37429)*x18426))+(((-0.37429)*x18428))+(((-0.069)*x18444)));
evalcond[7]=((((-0.37429)*x18432))+(((-1.0)*(1.0)*py))+(((0.37429)*x18431))+(((0.36442)*x18435))+((r11*x18452))+((r10*x18453))+(((-0.37429)*x18433))+(((0.069)*x18436))+(((-1.0)*cj12*sj11*x18451))+((r12*x18450))+x18451);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18454=((1.0)*cj15);
IkReal x18455=(cj16*sj15);
IkReal x18456=(sj15*sj16);
CheckValue<IkReal> x18457 = IKatan2WithCheck(IkReal((((r11*x18455))+((r10*x18456))+(((-1.0)*r12*x18454)))),IkReal((((r01*x18455))+((r00*x18456))+(((-1.0)*r02*x18454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18457.valid){
continue;
}
CheckValue<IkReal> x18458=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x18458.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x18457.value)+(((1.5707963267949)*(x18458.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x18459=(cj15*r02);
IkReal x18460=(cj16*sj15);
IkReal x18461=(r01*x18460);
IkReal x18462=(sj15*sj16);
IkReal x18463=(r00*x18462);
IkReal x18464=IKcos(j10);
IkReal x18465=(cj11*x18464);
IkReal x18466=(cj15*r12);
IkReal x18467=(r11*x18460);
IkReal x18468=(r10*x18462);
IkReal x18469=IKsin(j10);
IkReal x18470=(cj11*x18469);
IkReal x18471=(sj12*x18464);
IkReal x18472=(cj14*sj15);
IkReal x18473=(cj16*sj14);
IkReal x18474=((1.0)*sj14*sj16);
IkReal x18475=(cj14*cj15*cj16);
IkReal x18476=(cj14*cj15*sj16);
IkReal x18477=((1.0)*x18469);
IkReal x18478=(cj12*x18477);
IkReal x18479=(cj12*sj11*x18464);
IkReal x18480=(cj14*cj16);
IkReal x18481=((1.0)*cj14*sj16);
IkReal x18482=((1.0)*sj14*sj15);
IkReal x18483=((1.0)*cj15*cj16*sj14);
IkReal x18484=((1.0)*cj15*sj14*sj16);
IkReal x18485=((0.01)*sj15);
IkReal x18486=((0.069)*x18469);
IkReal x18487=((0.01)*cj15*cj16);
IkReal x18488=((0.01)*cj15*sj16);
evalcond[0]=((((-1.0)*x18459))+(((-1.0)*x18465))+x18463+x18461);
evalcond[1]=((((-1.0)*x18470))+x18467+x18468+(((-1.0)*x18466)));
evalcond[2]=(((r11*x18475))+((r10*x18476))+(((-1.0)*r11*x18474))+((r10*x18473))+((r12*x18472))+x18471+(((-1.0)*sj11*x18478)));
evalcond[3]=(((r02*x18472))+((r00*x18476))+(((-1.0)*r01*x18474))+(((-1.0)*x18479))+((r01*x18475))+(((-1.0)*sj12*x18477))+((r00*x18473)));
evalcond[4]=(((sj11*sj12*x18469))+(((-1.0)*r10*x18484))+(((-1.0)*r12*x18482))+((r10*x18480))+(((-1.0)*r11*x18483))+((cj12*x18464))+(((-1.0)*r11*x18481)));
evalcond[5]=((((-1.0)*r00*x18484))+((r00*x18480))+(((-1.0)*r02*x18482))+(((-1.0)*r01*x18481))+((sj11*x18471))+(((-1.0)*x18478))+(((-1.0)*r01*x18483)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((0.37429)*x18459))+((r02*x18485))+(((-0.37429)*x18461))+(((-0.069)*x18479))+(((-0.37429)*x18463))+(((0.069)*x18464))+(((-1.0)*sj12*x18486))+((r01*x18487))+(((0.36442)*x18465))+((r00*x18488)));
evalcond[7]=((((-0.37429)*x18467))+x18486+((r10*x18488))+((r12*x18485))+((r11*x18487))+(((-1.0)*(1.0)*py))+(((0.37429)*x18466))+(((-1.0)*cj12*sj11*x18486))+(((-0.37429)*x18468))+(((0.069)*x18471))+(((0.36442)*x18470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18489=((1.0)*cj15);
IkReal x18490=(cj16*sj15);
IkReal x18491=(sj15*sj16);
CheckValue<IkReal> x18492=IKPowWithIntegerCheck(IKsign(cj11),-1);
if(!x18492.valid){
continue;
}
CheckValue<IkReal> x18493 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x18489))+((r11*x18490))+((r10*x18491)))),IkReal((((r01*x18490))+(((-1.0)*r02*x18489))+((r00*x18491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18493.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18492.value)))+(x18493.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x18494=(cj15*r02);
IkReal x18495=(cj16*sj15);
IkReal x18496=(r01*x18495);
IkReal x18497=(sj15*sj16);
IkReal x18498=(r00*x18497);
IkReal x18499=IKcos(j10);
IkReal x18500=(cj11*x18499);
IkReal x18501=(cj15*r12);
IkReal x18502=(r11*x18495);
IkReal x18503=(r10*x18497);
IkReal x18504=IKsin(j10);
IkReal x18505=(cj11*x18504);
IkReal x18506=((0.01)*sj15);
IkReal x18507=((0.069)*x18499);
IkReal x18508=((0.069)*x18504);
IkReal x18509=((0.01)*cj15*cj16);
IkReal x18510=((0.01)*cj15*sj16);
IkReal x18511=(cj12*sj11);
evalcond[0]=((((-1.0)*x18494))+(((-1.0)*x18500))+x18498+x18496);
evalcond[1]=((((-1.0)*x18501))+(((-1.0)*x18505))+x18503+x18502);
evalcond[2]=((((-1.0)*(1.0)*px))+((r01*x18509))+(((0.37429)*x18494))+((r02*x18506))+(((-0.37429)*x18496))+(((0.36442)*x18500))+((r00*x18510))+(((-1.0)*sj12*x18508))+(((-1.0)*x18507*x18511))+(((-0.37429)*x18498))+x18507);
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.37429)*x18503))+(((-0.37429)*x18502))+((sj12*x18507))+((r11*x18509))+((r12*x18506))+(((0.36442)*x18505))+((r10*x18510))+(((-1.0)*x18508*x18511))+(((0.37429)*x18501))+x18508);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x18512=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x18512;
j14eval[1]=IKsign(x18512);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x18513=((1.0)*sj15);
IkReal x18514=((((-1.0)*r00*sj16*x18513))+((cj15*r02))+(((-1.0)*cj16*r01*x18513)));
j14eval[0]=x18514;
j14eval[1]=IKsign(x18514);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x18515=r21*r21;
IkReal x18516=((1.0)*x18515);
IkReal x18517=r22*r22;
IkReal x18518=(cj16*r20);
IkReal x18519=((2.0)*r21*sj16*x18518);
IkReal x18520=cj15*cj15;
IkReal x18521=cj16*cj16;
IkReal x18522=(cj16*r21);
IkReal x18523=((2.0)*cj15*r22*sj15);
IkReal x18524=(r20*sj16);
IkReal x18525=r20*r20;
IkReal x18526=((1.0)*x18525);
IkReal x18527=(x18520*x18521);
IkReal x18528=((((-1.0)*x18522*x18523))+((x18525*x18527))+(((-1.0)*x18516*x18527))+(((-1.0)*x18521*x18526))+(((-1.0)*x18520*x18526))+((x18515*x18521))+(((-1.0)*x18523*x18524))+(((-1.0)*x18516))+((x18517*x18520))+x18519+(((-1.0)*x18519*x18520))+(((-1.0)*x18517)));
IkReal x18529=(r21*sj16);
IkReal x18530=((1.0)*cj11*cj12);
IkReal x18531=(r22*sj15);
IkReal x18532=((1.0)*cj11*sj12);
IkReal x18533=((1.0)*cj11*cj15*sj12);
IkReal x18534=((1.0)*cj11*cj12*cj15);
j14eval[0]=x18528;
j14eval[1]=IKsign(x18528);
j14eval[2]=((IKabs(((((-1.0)*x18524*x18533))+(((-1.0)*x18518*x18530))+((cj11*cj12*x18529))+(((-1.0)*x18522*x18533))+(((-1.0)*x18531*x18532)))))+(IKabs((((cj11*sj12*x18518))+(((-1.0)*x18529*x18532))+(((-1.0)*x18524*x18534))+(((-1.0)*x18530*x18531))+(((-1.0)*x18522*x18534))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x18535=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x18535;
j14eval[1]=IKsign(x18535);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x18536=((1.0)*sj15);
IkReal x18537=((((-1.0)*cj16*r01*x18536))+(((-1.0)*r00*sj16*x18536))+((cj15*r02)));
j14eval[0]=x18537;
j14eval[1]=IKsign(x18537);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x18538=(r01*r21);
IkReal x18539=((1.0)*x18538);
IkReal x18540=(r02*r22);
IkReal x18541=(cj16*sj16);
IkReal x18542=(r00*r21*x18541);
IkReal x18543=(r01*r20*x18541);
IkReal x18544=cj15*cj15;
IkReal x18545=cj16*cj16;
IkReal x18546=((1.0)*r00*r20);
IkReal x18547=((1.0)*cj15*cj16*sj15);
IkReal x18548=((1.0)*cj15*sj15*sj16);
IkReal x18549=(x18544*x18545);
IkReal x18550=((1.0)*x18544);
IkReal x18551=((((-1.0)*x18539))+x18542+x18543+(((-1.0)*r02*r21*x18547))+(((-1.0)*r00*r22*x18548))+(((-1.0)*r01*r22*x18547))+((x18538*x18545))+(((-1.0)*x18539*x18549))+(((-1.0)*x18545*x18546))+(((-1.0)*x18542*x18550))+((r00*r20*x18549))+((x18540*x18544))+(((-1.0)*x18544*x18546))+(((-1.0)*x18543*x18550))+(((-1.0)*r02*r20*x18548))+(((-1.0)*x18540)));
j14eval[0]=x18551;
j14eval[1]=IKsign(x18551);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18552=(cj12*sj10);
IkReal x18553=(r22*sj15);
IkReal x18554=((1.0)*cj10*sj12);
IkReal x18555=(cj16*r21);
IkReal x18556=(cj12*cj15*sj10);
IkReal x18557=(r20*sj16);
IkReal x18558=((1.0)*cj10*cj15*sj12);
IkReal x18559=(cj16*r20);
IkReal x18560=(r21*sj16);
IkReal x18561=(r01*r21);
IkReal x18562=((1.0)*x18561);
IkReal x18563=(r02*r22);
IkReal x18564=(cj16*r00*x18560);
IkReal x18565=(r01*sj16*x18559);
IkReal x18566=cj15*cj15;
IkReal x18567=cj16*cj16;
IkReal x18568=((1.0)*r00*r20);
IkReal x18569=((1.0)*cj15*r22*sj15);
IkReal x18570=((1.0)*cj15*r02*sj15);
IkReal x18571=(x18566*x18567);
IkReal x18572=((1.0)*x18566);
CheckValue<IkReal> x18573 = IKatan2WithCheck(IkReal((((x18552*x18553))+(((-1.0)*x18553*x18554))+(((-1.0)*x18557*x18558))+(((-1.0)*x18555*x18558))+((x18555*x18556))+((x18556*x18557)))),IkReal(((((-1.0)*cj16*r20*x18552))+(((-1.0)*x18554*x18560))+((cj10*sj12*x18559))+((x18552*x18560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18573.valid){
continue;
}
CheckValue<IkReal> x18574=IKPowWithIntegerCheck(IKsign(((((-1.0)*x18557*x18570))+((x18561*x18567))+(((-1.0)*x18555*x18570))+(((-1.0)*r00*sj16*x18569))+((x18563*x18566))+(((-1.0)*x18567*x18568))+(((-1.0)*x18565*x18572))+((r00*r20*x18571))+(((-1.0)*x18564*x18572))+(((-1.0)*x18562*x18571))+x18564+x18565+(((-1.0)*x18566*x18568))+(((-1.0)*x18562))+(((-1.0)*cj16*r01*x18569))+(((-1.0)*x18563)))),-1);
if(!x18574.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x18573.value)+(((1.5707963267949)*(x18574.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x18575=IKsin(j14);
IkReal x18576=(cj16*r20);
IkReal x18577=IKcos(j14);
IkReal x18578=(sj15*x18577);
IkReal x18579=(r21*sj16);
IkReal x18580=((1.0)*x18575);
IkReal x18581=(cj15*cj16*x18577);
IkReal x18582=(cj15*sj16*x18577);
IkReal x18583=((1.0)*x18577);
IkReal x18584=((1.0)*sj15*x18575);
IkReal x18585=((1.0)*cj15*cj16*x18575);
IkReal x18586=((1.0)*cj15*sj16*x18575);
IkReal x18587=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x18588=(cj16*r10);
IkReal x18589=(r11*sj16);
IkReal x18590=(cj10*cj12);
IkReal x18591=(sj10*sj12);
IkReal x18592=(cj16*r00);
IkReal x18593=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x18579*x18580))+((r22*x18578))+((r20*x18582))+((x18575*x18576))+((r21*x18581)));
evalcond[1]=(((x18576*x18577))+(((-1.0)*x18579*x18583))+(((-1.0)*r20*x18586))+(((-1.0)*r21*x18585))+(((-1.0)*r22*x18584)));
evalcond[2]=(((x18575*x18588))+(((-1.0)*x18580*x18589))+((r12*x18578))+((r11*x18581))+((r10*x18582))+x18587);
evalcond[3]=(((r02*x18578))+((r00*x18582))+(((-1.0)*x18590))+(((-1.0)*x18575*x18593))+((r01*x18581))+(((-1.0)*x18591))+((x18575*x18592)));
evalcond[4]=(x18590+x18591+(((-1.0)*r10*x18586))+(((-1.0)*r11*x18585))+(((-1.0)*x18583*x18589))+((x18577*x18588))+(((-1.0)*r12*x18584)));
evalcond[5]=((((-1.0)*x18577*x18593))+(((-1.0)*r00*x18586))+((x18577*x18592))+(((-1.0)*r02*x18584))+(((-1.0)*r01*x18585))+x18587);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18594=((1.0)*sj15);
IkReal x18595=(cj12*sj10);
IkReal x18596=(cj10*sj12);
IkReal x18597=(cj16*r21);
IkReal x18598=(cj12*cj15*sj10);
IkReal x18599=(r20*sj16);
IkReal x18600=((1.0)*cj10*cj15*sj12);
IkReal x18601=(r21*sj16);
CheckValue<IkReal> x18602=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x18594))+((cj15*r02))+(((-1.0)*r00*sj16*x18594)))),-1);
if(!x18602.valid){
continue;
}
CheckValue<IkReal> x18603 = IKatan2WithCheck(IkReal(((((-1.0)*x18597*x18600))+((r22*sj15*x18595))+(((-1.0)*x18599*x18600))+(((-1.0)*r22*sj15*x18596))+((x18598*x18599))+((x18597*x18598)))),IkReal(((((-1.0)*cj10*sj12*x18601))+(((-1.0)*cj16*r20*x18595))+((x18595*x18601))+((cj16*r20*x18596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18603.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18602.value)))+(x18603.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x18604=IKsin(j14);
IkReal x18605=(cj16*r20);
IkReal x18606=IKcos(j14);
IkReal x18607=(sj15*x18606);
IkReal x18608=(r21*sj16);
IkReal x18609=((1.0)*x18604);
IkReal x18610=(cj15*cj16*x18606);
IkReal x18611=(cj15*sj16*x18606);
IkReal x18612=((1.0)*x18606);
IkReal x18613=((1.0)*sj15*x18604);
IkReal x18614=((1.0)*cj15*cj16*x18604);
IkReal x18615=((1.0)*cj15*sj16*x18604);
IkReal x18616=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x18617=(cj16*r10);
IkReal x18618=(r11*sj16);
IkReal x18619=(cj10*cj12);
IkReal x18620=(sj10*sj12);
IkReal x18621=(cj16*r00);
IkReal x18622=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x18608*x18609))+((r22*x18607))+((r21*x18610))+((r20*x18611))+((x18604*x18605)));
evalcond[1]=((((-1.0)*r21*x18614))+(((-1.0)*r22*x18613))+((x18605*x18606))+(((-1.0)*r20*x18615))+(((-1.0)*x18608*x18612)));
evalcond[2]=(((r10*x18611))+((r12*x18607))+(((-1.0)*x18609*x18618))+((r11*x18610))+x18616+((x18604*x18617)));
evalcond[3]=((((-1.0)*x18619))+(((-1.0)*x18604*x18622))+((r00*x18611))+(((-1.0)*x18620))+((r02*x18607))+((r01*x18610))+((x18604*x18621)));
evalcond[4]=((((-1.0)*r11*x18614))+(((-1.0)*r12*x18613))+(((-1.0)*x18612*x18618))+((x18606*x18617))+(((-1.0)*r10*x18615))+x18620+x18619);
evalcond[5]=((((-1.0)*r01*x18614))+((x18606*x18621))+(((-1.0)*r02*x18613))+(((-1.0)*r00*x18615))+x18616+(((-1.0)*x18606*x18622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18623=(cj10*cj12);
IkReal x18624=(r22*sj15);
IkReal x18625=(sj10*sj12);
IkReal x18626=(cj16*r21);
IkReal x18627=(cj10*cj12*cj15);
IkReal x18628=(r20*sj16);
IkReal x18629=(cj15*sj10*sj12);
IkReal x18630=(r21*sj16);
IkReal x18631=((1.0)*cj16*r20);
CheckValue<IkReal> x18632 = IKatan2WithCheck(IkReal((((x18627*x18628))+((x18626*x18629))+((x18624*x18625))+((x18623*x18624))+((x18626*x18627))+((x18628*x18629)))),IkReal(((((-1.0)*x18625*x18631))+((x18625*x18630))+(((-1.0)*x18623*x18631))+((x18623*x18630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18632.valid){
continue;
}
CheckValue<IkReal> x18633=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)))),-1);
if(!x18633.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x18632.value)+(((1.5707963267949)*(x18633.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x18634=IKsin(j14);
IkReal x18635=(cj16*r20);
IkReal x18636=IKcos(j14);
IkReal x18637=(sj15*x18636);
IkReal x18638=(r21*sj16);
IkReal x18639=((1.0)*x18634);
IkReal x18640=(cj15*cj16*x18636);
IkReal x18641=(cj15*sj16*x18636);
IkReal x18642=((1.0)*x18636);
IkReal x18643=((1.0)*sj15*x18634);
IkReal x18644=((1.0)*cj15*cj16*x18634);
IkReal x18645=((1.0)*cj15*sj16*x18634);
IkReal x18646=(((cj10*sj12))+(((-1.0)*(1.0)*cj12*sj10)));
IkReal x18647=(cj16*r10);
IkReal x18648=(r11*sj16);
IkReal x18649=(cj10*cj12);
IkReal x18650=(sj10*sj12);
IkReal x18651=(cj16*r00);
IkReal x18652=((1.0)*r01*sj16);
evalcond[0]=(((r21*x18640))+(((-1.0)*x18638*x18639))+((r20*x18641))+((r22*x18637))+((x18634*x18635)));
evalcond[1]=(((x18635*x18636))+(((-1.0)*r20*x18645))+(((-1.0)*r22*x18643))+(((-1.0)*x18638*x18642))+(((-1.0)*r21*x18644)));
evalcond[2]=(x18646+((r10*x18641))+((x18634*x18647))+(((-1.0)*x18639*x18648))+((r12*x18637))+((r11*x18640)));
evalcond[3]=((((-1.0)*x18650))+(((-1.0)*x18634*x18652))+((r02*x18637))+((x18634*x18651))+((r00*x18641))+(((-1.0)*x18649))+((r01*x18640)));
evalcond[4]=(x18650+x18649+(((-1.0)*r10*x18645))+(((-1.0)*r11*x18644))+(((-1.0)*x18642*x18648))+((x18636*x18647))+(((-1.0)*r12*x18643)));
evalcond[5]=((((-1.0)*r02*x18643))+(((-1.0)*x18636*x18652))+x18646+((x18636*x18651))+(((-1.0)*r00*x18645))+(((-1.0)*r01*x18644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x18653=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x18653;
j14eval[1]=IKsign(x18653);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x18654=((1.0)*sj15);
IkReal x18655=((((-1.0)*cj16*r01*x18654))+(((-1.0)*r00*sj16*x18654))+((cj15*r02)));
j14eval[0]=x18655;
j14eval[1]=IKsign(x18655);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x18656=(r12*r22);
IkReal x18657=cj15*cj15;
IkReal x18658=(r10*r20);
IkReal x18659=(x18657*x18658);
IkReal x18660=cj16*cj16;
IkReal x18661=(r10*r21);
IkReal x18662=((1.0)*cj16*sj16);
IkReal x18663=(r11*r20);
IkReal x18664=(cj15*cj16*sj15);
IkReal x18665=(cj15*sj15*sj16);
IkReal x18666=(r11*r21*x18660);
IkReal x18667=(cj16*sj16*x18657);
IkReal x18668=(((x18657*x18666))+x18659+x18656+((x18661*x18667))+((r11*r22*x18664))+((x18663*x18667))+(((-1.0)*x18661*x18662))+((r10*r22*x18665))+(((-1.0)*x18656*x18657))+((x18658*x18660))+(((-1.0)*x18662*x18663))+(((-1.0)*x18666))+((r12*r20*x18665))+(((-1.0)*x18659*x18660))+((r12*r21*x18664))+((r11*r21)));
j14eval[0]=x18668;
j14eval[1]=IKsign(x18668);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18669=(r21*sj16);
IkReal x18670=(cj16*r20);
IkReal x18671=((1.0)*cj10*sj12);
IkReal x18672=((1.0)*cj12*sj10);
IkReal x18673=(r22*sj15);
IkReal x18674=(cj15*cj16*r21);
IkReal x18675=(cj15*r20*sj16);
IkReal x18676=(r12*r22);
IkReal x18677=cj15*cj15;
IkReal x18678=(r10*r20);
IkReal x18679=(x18677*x18678);
IkReal x18680=cj16*cj16;
IkReal x18681=(cj16*r10*r21*sj16);
IkReal x18682=(cj16*r11*r20*sj16);
IkReal x18683=(r12*sj15);
IkReal x18684=(r11*r21*x18680);
CheckValue<IkReal> x18685=IKPowWithIntegerCheck(IKsign((((x18677*x18682))+(((-1.0)*x18682))+((((r11*r22*sj15))*((cj15*cj16))))+((x18675*x18683))+((x18678*x18680))+(((-1.0)*x18676*x18677))+(((-1.0)*x18681))+((x18674*x18683))+(((-1.0)*x18679*x18680))+(((-1.0)*x18684))+((x18677*x18684))+((x18677*x18681))+((r11*r21))+x18676+x18679+((((r10*r22*sj15))*((cj15*sj16)))))),-1);
if(!x18685.valid){
continue;
}
CheckValue<IkReal> x18686 = IKatan2WithCheck(IkReal(((((-1.0)*x18670*x18672))+((cj12*sj10*x18669))+(((-1.0)*x18670*x18671))+((cj10*sj12*x18669)))),IkReal(((((-1.0)*x18672*x18674))+(((-1.0)*x18672*x18675))+(((-1.0)*x18671*x18675))+(((-1.0)*x18671*x18674))+(((-1.0)*x18672*x18673))+(((-1.0)*x18671*x18673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18686.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18685.value)))+(x18686.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x18687=IKsin(j14);
IkReal x18688=(cj16*r20);
IkReal x18689=IKcos(j14);
IkReal x18690=(sj15*x18689);
IkReal x18691=(r21*sj16);
IkReal x18692=((1.0)*x18687);
IkReal x18693=(cj15*cj16*x18689);
IkReal x18694=(cj15*sj16*x18689);
IkReal x18695=((1.0)*x18689);
IkReal x18696=((1.0)*sj15*x18687);
IkReal x18697=((1.0)*cj15*cj16*x18687);
IkReal x18698=((1.0)*cj15*sj16*x18687);
IkReal x18699=(cj10*sj12);
IkReal x18700=(cj12*sj10);
IkReal x18701=(cj16*r10);
IkReal x18702=(r11*sj16);
IkReal x18703=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x18704=(cj16*r00);
IkReal x18705=((1.0)*r01*sj16);
evalcond[0]=(((x18687*x18688))+((r21*x18693))+((r22*x18690))+((r20*x18694))+(((-1.0)*x18691*x18692)));
evalcond[1]=((((-1.0)*r22*x18696))+(((-1.0)*r21*x18697))+((x18688*x18689))+(((-1.0)*x18691*x18695))+(((-1.0)*r20*x18698)));
evalcond[2]=((((-1.0)*x18692*x18702))+x18699+((r12*x18690))+((r10*x18694))+x18700+((r11*x18693))+((x18687*x18701)));
evalcond[3]=(((r01*x18693))+(((-1.0)*x18687*x18705))+((r02*x18690))+((x18687*x18704))+x18703+((r00*x18694)));
evalcond[4]=((((-1.0)*r12*x18696))+(((-1.0)*r11*x18697))+((x18689*x18701))+(((-1.0)*x18695*x18702))+x18703+(((-1.0)*r10*x18698)));
evalcond[5]=((((-1.0)*r01*x18697))+(((-1.0)*x18700))+(((-1.0)*x18699))+((x18689*x18704))+(((-1.0)*x18689*x18705))+(((-1.0)*r02*x18696))+(((-1.0)*r00*x18698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18706=((1.0)*sj15);
IkReal x18707=(cj10*sj12);
IkReal x18708=((1.0)*r22*sj15);
IkReal x18709=(cj12*sj10);
IkReal x18710=(cj16*r21);
IkReal x18711=((1.0)*cj10*cj15*sj12);
IkReal x18712=(r20*sj16);
IkReal x18713=((1.0)*cj12*cj15*sj10);
IkReal x18714=(cj16*r20);
IkReal x18715=((1.0)*r21*sj16);
CheckValue<IkReal> x18716=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x18706))+((cj15*r02))+(((-1.0)*r00*sj16*x18706)))),-1);
if(!x18716.valid){
continue;
}
CheckValue<IkReal> x18717 = IKatan2WithCheck(IkReal(((((-1.0)*x18708*x18709))+(((-1.0)*x18710*x18711))+(((-1.0)*x18707*x18708))+(((-1.0)*x18712*x18713))+(((-1.0)*x18710*x18713))+(((-1.0)*x18711*x18712)))),IkReal(((((-1.0)*x18709*x18715))+((x18709*x18714))+((x18707*x18714))+(((-1.0)*x18707*x18715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18717.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18716.value)))+(x18717.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x18718=IKsin(j14);
IkReal x18719=(cj16*r20);
IkReal x18720=IKcos(j14);
IkReal x18721=(sj15*x18720);
IkReal x18722=(r21*sj16);
IkReal x18723=((1.0)*x18718);
IkReal x18724=(cj15*cj16*x18720);
IkReal x18725=(cj15*sj16*x18720);
IkReal x18726=((1.0)*x18720);
IkReal x18727=((1.0)*sj15*x18718);
IkReal x18728=((1.0)*cj15*cj16*x18718);
IkReal x18729=((1.0)*cj15*sj16*x18718);
IkReal x18730=(cj10*sj12);
IkReal x18731=(cj12*sj10);
IkReal x18732=(cj16*r10);
IkReal x18733=(r11*sj16);
IkReal x18734=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x18735=(cj16*r00);
IkReal x18736=((1.0)*r01*sj16);
evalcond[0]=(((r20*x18725))+(((-1.0)*x18722*x18723))+((r21*x18724))+((r22*x18721))+((x18718*x18719)));
evalcond[1]=((((-1.0)*r20*x18729))+((x18719*x18720))+(((-1.0)*r22*x18727))+(((-1.0)*r21*x18728))+(((-1.0)*x18722*x18726)));
evalcond[2]=(x18731+x18730+((r10*x18725))+((x18718*x18732))+(((-1.0)*x18723*x18733))+((r12*x18721))+((r11*x18724)));
evalcond[3]=((((-1.0)*x18718*x18736))+((r01*x18724))+x18734+((r02*x18721))+((r00*x18725))+((x18718*x18735)));
evalcond[4]=((((-1.0)*r10*x18729))+(((-1.0)*r12*x18727))+(((-1.0)*r11*x18728))+x18734+((x18720*x18732))+(((-1.0)*x18726*x18733)));
evalcond[5]=(((x18720*x18735))+(((-1.0)*x18730))+(((-1.0)*r01*x18728))+(((-1.0)*r00*x18729))+(((-1.0)*x18731))+(((-1.0)*r02*x18727))+(((-1.0)*x18720*x18736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18737=(r22*sj15);
IkReal x18738=(sj10*sj12);
IkReal x18739=((1.0)*cj10*cj12);
IkReal x18740=(cj16*r21);
IkReal x18741=(cj15*sj10*sj12);
IkReal x18742=(r20*sj16);
IkReal x18743=((1.0)*cj10*cj12*cj15);
IkReal x18744=(r21*sj16);
CheckValue<IkReal> x18745 = IKatan2WithCheck(IkReal(((((-1.0)*x18742*x18743))+(((-1.0)*x18737*x18739))+((x18740*x18741))+((x18737*x18738))+(((-1.0)*x18740*x18743))+((x18741*x18742)))),IkReal((((x18738*x18744))+(((-1.0)*x18739*x18744))+((((cj10*cj12))*((cj16*r20))))+(((-1.0)*cj16*r20*x18738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18745.valid){
continue;
}
CheckValue<IkReal> x18746=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x18746.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x18745.value)+(((1.5707963267949)*(x18746.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x18747=IKsin(j14);
IkReal x18748=(cj16*r20);
IkReal x18749=IKcos(j14);
IkReal x18750=(sj15*x18749);
IkReal x18751=(r21*sj16);
IkReal x18752=((1.0)*x18747);
IkReal x18753=(cj15*cj16*x18749);
IkReal x18754=(cj15*sj16*x18749);
IkReal x18755=((1.0)*x18749);
IkReal x18756=((1.0)*sj15*x18747);
IkReal x18757=((1.0)*cj15*cj16*x18747);
IkReal x18758=((1.0)*cj15*sj16*x18747);
IkReal x18759=(cj10*sj12);
IkReal x18760=(cj12*sj10);
IkReal x18761=(cj16*r10);
IkReal x18762=(r11*sj16);
IkReal x18763=((((-1.0)*(1.0)*sj10*sj12))+((cj10*cj12)));
IkReal x18764=(cj16*r00);
IkReal x18765=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x18751*x18752))+((r22*x18750))+((r21*x18753))+((r20*x18754))+((x18747*x18748)));
evalcond[1]=((((-1.0)*x18751*x18755))+((x18748*x18749))+(((-1.0)*r20*x18758))+(((-1.0)*r22*x18756))+(((-1.0)*r21*x18757)));
evalcond[2]=(x18759+((x18747*x18761))+((r11*x18753))+((r12*x18750))+(((-1.0)*x18752*x18762))+((r10*x18754))+x18760);
evalcond[3]=(((r01*x18753))+(((-1.0)*x18747*x18765))+((r02*x18750))+((x18747*x18764))+x18763+((r00*x18754)));
evalcond[4]=((((-1.0)*r12*x18756))+((x18749*x18761))+(((-1.0)*r11*x18757))+(((-1.0)*r10*x18758))+x18763+(((-1.0)*x18755*x18762)));
evalcond[5]=((((-1.0)*x18760))+(((-1.0)*x18759))+((x18749*x18764))+(((-1.0)*x18749*x18765))+(((-1.0)*r01*x18757))+(((-1.0)*r02*x18756))+(((-1.0)*r00*x18758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18766=(r21*sj16);
IkReal x18767=(cj16*r20);
IkReal x18768=((1.0)*cj11*cj12);
IkReal x18769=(r22*sj15);
IkReal x18770=((1.0)*cj11*sj12);
IkReal x18771=(cj16*r21);
IkReal x18772=((1.0)*cj11*cj15*sj12);
IkReal x18773=(r20*sj16);
IkReal x18774=((1.0)*cj11*cj12*cj15);
IkReal x18775=r21*r21;
IkReal x18776=((1.0)*x18775);
IkReal x18777=r22*r22;
IkReal x18778=((2.0)*r21*sj16*x18767);
IkReal x18779=cj15*cj15;
IkReal x18780=cj16*cj16;
IkReal x18781=((2.0)*cj15*r22*sj15);
IkReal x18782=r20*r20;
IkReal x18783=((1.0)*x18782);
IkReal x18784=(x18779*x18780);
CheckValue<IkReal> x18785 = IKatan2WithCheck(IkReal(((((-1.0)*x18771*x18772))+((cj11*cj12*x18766))+(((-1.0)*x18769*x18770))+(((-1.0)*x18767*x18768))+(((-1.0)*x18772*x18773)))),IkReal(((((-1.0)*x18768*x18769))+(((-1.0)*x18771*x18774))+(((-1.0)*x18773*x18774))+((cj11*sj12*x18767))+(((-1.0)*x18766*x18770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18785.valid){
continue;
}
CheckValue<IkReal> x18786=IKPowWithIntegerCheck(IKsign((((x18775*x18780))+(((-1.0)*x18779*x18783))+(((-1.0)*x18776*x18784))+(((-1.0)*x18777))+(((-1.0)*x18773*x18781))+(((-1.0)*x18771*x18781))+(((-1.0)*x18776))+((x18782*x18784))+((x18777*x18779))+(((-1.0)*x18780*x18783))+(((-1.0)*x18778*x18779))+x18778)),-1);
if(!x18786.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x18785.value)+(((1.5707963267949)*(x18786.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x18787=((1.0)*cj12);
IkReal x18788=IKsin(j14);
IkReal x18789=(cj16*r20);
IkReal x18790=IKcos(j14);
IkReal x18791=(sj15*x18790);
IkReal x18792=(r21*sj16);
IkReal x18793=((1.0)*x18788);
IkReal x18794=(cj15*cj16*x18790);
IkReal x18795=(cj15*sj16*x18790);
IkReal x18796=((1.0)*x18790);
IkReal x18797=((1.0)*sj15*x18788);
IkReal x18798=((1.0)*cj15*cj16*x18788);
IkReal x18799=((1.0)*cj15*sj16*x18788);
IkReal x18800=(cj10*sj12);
IkReal x18801=(sj10*x18787);
IkReal x18802=(cj16*r10);
IkReal x18803=(r11*sj16);
IkReal x18804=(sj10*sj12);
IkReal x18805=(cj10*cj12);
IkReal x18806=(cj16*r00);
IkReal x18807=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*x18792*x18793))+((r21*x18794))+((r20*x18795))+((r22*x18791))+((x18788*x18789))+(((-1.0)*cj11*x18787)));
evalcond[1]=((((-1.0)*r22*x18797))+(((-1.0)*x18792*x18796))+((x18789*x18790))+((cj11*sj12))+(((-1.0)*r21*x18798))+(((-1.0)*r20*x18799)));
evalcond[2]=((((-1.0)*x18793*x18803))+((r12*x18791))+(((-1.0)*sj11*x18801))+((r10*x18795))+((r11*x18794))+((x18788*x18802))+x18800);
evalcond[3]=(((x18788*x18806))+((r01*x18794))+(((-1.0)*sj11*x18805))+((r02*x18791))+((r00*x18795))+(((-1.0)*x18788*x18807))+(((-1.0)*x18804)));
evalcond[4]=((((-1.0)*r10*x18799))+((sj11*x18804))+(((-1.0)*r12*x18797))+((x18790*x18802))+(((-1.0)*r11*x18798))+(((-1.0)*x18796*x18803))+x18805);
evalcond[5]=((((-1.0)*r00*x18799))+(((-1.0)*x18790*x18807))+((x18790*x18806))+(((-1.0)*r01*x18798))+(((-1.0)*r02*x18797))+(((-1.0)*x18801))+((sj11*x18800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18808=((1.0)*sj15);
IkReal x18809=(cj12*sj10*sj11);
IkReal x18810=((1.0)*cj15);
IkReal x18811=(cj15*r20);
IkReal x18812=((1.0)*cj10*sj12*sj16);
IkReal x18813=((1.0)*cj11*cj12*sj16);
IkReal x18814=(cj12*r21*sj10*sj11);
CheckValue<IkReal> x18815=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r01*x18808))+((cj15*r02))+(((-1.0)*r00*sj16*x18808)))),-1);
if(!x18815.valid){
continue;
}
CheckValue<IkReal> x18816 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r10*x18813))+(((-1.0)*cj10*r22*sj12*sj15))+(((-1.0)*cj10*cj16*r21*sj12*x18810))+((r22*sj15*x18809))+(((-1.0)*cj11*cj12*cj16*r11*x18810))+((cj12*sj10*sj11*sj16*x18811))+(((-1.0)*cj11*cj12*r12*sj15))+((cj15*cj16*x18814))+(((-1.0)*x18811*x18812)))),IkReal(((((-1.0)*cj16*r20*x18809))+((sj16*x18814))+(((-1.0)*r21*x18812))+((r20*((cj10*cj16*sj12))))+((r10*((cj11*cj12*cj16))))+(((-1.0)*r11*x18813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18816.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18815.value)))+(x18816.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x18817=((1.0)*cj12);
IkReal x18818=IKsin(j14);
IkReal x18819=(cj16*r20);
IkReal x18820=IKcos(j14);
IkReal x18821=(sj15*x18820);
IkReal x18822=(r21*sj16);
IkReal x18823=((1.0)*x18818);
IkReal x18824=(cj15*cj16*x18820);
IkReal x18825=(cj15*sj16*x18820);
IkReal x18826=((1.0)*x18820);
IkReal x18827=((1.0)*sj15*x18818);
IkReal x18828=((1.0)*cj15*cj16*x18818);
IkReal x18829=((1.0)*cj15*sj16*x18818);
IkReal x18830=(cj10*sj12);
IkReal x18831=(sj10*x18817);
IkReal x18832=(cj16*r10);
IkReal x18833=(r11*sj16);
IkReal x18834=(sj10*sj12);
IkReal x18835=(cj10*cj12);
IkReal x18836=(cj16*r00);
IkReal x18837=((1.0)*r01*sj16);
evalcond[0]=(((x18818*x18819))+((r20*x18825))+(((-1.0)*cj11*x18817))+((r21*x18824))+(((-1.0)*x18822*x18823))+((r22*x18821)));
evalcond[1]=((((-1.0)*r22*x18827))+(((-1.0)*x18822*x18826))+((x18819*x18820))+(((-1.0)*r21*x18828))+((cj11*sj12))+(((-1.0)*r20*x18829)));
evalcond[2]=((((-1.0)*sj11*x18831))+((r12*x18821))+((r11*x18824))+((x18818*x18832))+x18830+((r10*x18825))+(((-1.0)*x18823*x18833)));
evalcond[3]=((((-1.0)*sj11*x18835))+((r00*x18825))+(((-1.0)*x18818*x18837))+((r01*x18824))+((x18818*x18836))+((r02*x18821))+(((-1.0)*x18834)));
evalcond[4]=(((x18820*x18832))+(((-1.0)*x18826*x18833))+(((-1.0)*r10*x18829))+(((-1.0)*r11*x18828))+x18835+((sj11*x18834))+(((-1.0)*r12*x18827)));
evalcond[5]=(((x18820*x18836))+(((-1.0)*r01*x18828))+(((-1.0)*x18820*x18837))+(((-1.0)*x18831))+((sj11*x18830))+(((-1.0)*r02*x18827))+(((-1.0)*r00*x18829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18838=(r22*sj15);
IkReal x18839=(sj10*sj12);
IkReal x18840=((1.0)*cj11*cj12);
IkReal x18841=(cj10*cj12*sj11);
IkReal x18842=(cj15*r21);
IkReal x18843=(cj16*sj10*sj12);
IkReal x18844=(cj15*r20*sj16);
IkReal x18845=(cj11*cj12*cj16);
IkReal x18846=(cj10*cj12*cj16*sj11);
IkReal x18847=(r21*sj16);
IkReal x18848=((1.0)*r20);
CheckValue<IkReal> x18849 = IKatan2WithCheck(IkReal((((x18838*x18839))+(((-1.0)*r02*sj15*x18840))+((x18838*x18841))+((x18842*x18843))+(((-1.0)*cj15*r01*x18845))+((x18839*x18844))+((x18841*x18844))+(((-1.0)*cj11*cj12*cj15*r00*sj16))+((x18842*x18846)))),IkReal(((((-1.0)*x18846*x18848))+(((-1.0)*x18843*x18848))+((x18839*x18847))+((x18841*x18847))+(((-1.0)*r01*sj16*x18840))+((r00*x18845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18849.valid){
continue;
}
CheckValue<IkReal> x18850=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x18850.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x18849.value)+(((1.5707963267949)*(x18850.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x18851=((1.0)*cj12);
IkReal x18852=IKsin(j14);
IkReal x18853=(cj16*r20);
IkReal x18854=IKcos(j14);
IkReal x18855=(sj15*x18854);
IkReal x18856=(r21*sj16);
IkReal x18857=((1.0)*x18852);
IkReal x18858=(cj15*cj16*x18854);
IkReal x18859=(cj15*sj16*x18854);
IkReal x18860=((1.0)*x18854);
IkReal x18861=((1.0)*sj15*x18852);
IkReal x18862=((1.0)*cj15*cj16*x18852);
IkReal x18863=((1.0)*cj15*sj16*x18852);
IkReal x18864=(cj10*sj12);
IkReal x18865=(sj10*x18851);
IkReal x18866=(cj16*r10);
IkReal x18867=(r11*sj16);
IkReal x18868=(sj10*sj12);
IkReal x18869=(cj10*cj12);
IkReal x18870=(cj16*r00);
IkReal x18871=((1.0)*r01*sj16);
evalcond[0]=((((-1.0)*cj11*x18851))+(((-1.0)*x18856*x18857))+((r21*x18858))+((x18852*x18853))+((r22*x18855))+((r20*x18859)));
evalcond[1]=(((x18853*x18854))+(((-1.0)*r22*x18861))+(((-1.0)*x18856*x18860))+(((-1.0)*r20*x18863))+((cj11*sj12))+(((-1.0)*r21*x18862)));
evalcond[2]=((((-1.0)*sj11*x18865))+(((-1.0)*x18857*x18867))+((r10*x18859))+((r11*x18858))+((r12*x18855))+((x18852*x18866))+x18864);
evalcond[3]=((((-1.0)*sj11*x18869))+(((-1.0)*x18852*x18871))+((x18852*x18870))+((r01*x18858))+((r00*x18859))+((r02*x18855))+(((-1.0)*x18868)));
evalcond[4]=(((x18854*x18866))+((sj11*x18868))+(((-1.0)*x18860*x18867))+(((-1.0)*r12*x18861))+x18869+(((-1.0)*r10*x18863))+(((-1.0)*r11*x18862)));
evalcond[5]=(((x18854*x18870))+(((-1.0)*x18854*x18871))+(((-1.0)*r00*x18863))+(((-1.0)*r02*x18861))+(((-1.0)*r01*x18862))+((sj11*x18864))+(((-1.0)*x18865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x18872=((50289.96)*cj11);
IkReal x18873=(cj12*sj11);
IkReal x18874=cj11*cj11;
IkReal x18875=((69000.0)*py);
IkReal x18876=((364420.0)*cj11);
IkReal x18877=((25826.01)*cj15);
IkReal x18878=(r12*x18877);
IkReal x18879=((69000.0)*px);
IkReal x18880=((690.0)*sj15);
IkReal x18881=(r12*x18880);
IkReal x18882=((136398.7618)*cj11*cj15);
IkReal x18883=((3644.2)*cj11*sj15);
IkReal x18884=((690.0)*cj15*cj16);
IkReal x18885=(r11*x18884);
IkReal x18886=(r02*x18877);
IkReal x18887=((690.0)*cj15*sj16);
IkReal x18888=(r10*x18887);
IkReal x18889=((25826.01)*cj16*sj15);
IkReal x18890=(r11*x18889);
IkReal x18891=(r02*x18880);
IkReal x18892=((25826.01)*sj15*sj16);
IkReal x18893=(r10*x18892);
IkReal x18894=((3644.2)*cj11*cj15*cj16);
IkReal x18895=((3644.2)*cj11*cj15*sj16);
IkReal x18896=((136398.7618)*cj11*cj16*sj15);
IkReal x18897=((136398.7618)*cj11*sj15*sj16);
IkReal x18898=(r01*x18884);
IkReal x18899=(r00*x18887);
IkReal x18900=(r01*x18889);
IkReal x18901=(r00*x18892);
CheckValue<IkReal> x18902=IKPowWithIntegerCheck(IKsign(((9522.0)+x18872+(((-4761.0)*x18874*(cj12*cj12)))+(((-9522.0)*x18873))+(((-1.0)*x18872*x18873))+(((132801.9364)*x18874)))),-1);
if(!x18902.valid){
continue;
}
CheckValue<IkReal> x18903 = IKatan2WithCheck(IkReal((x18875+(((-1.0)*x18881))+(((-1.0)*sj12*x18900))+((sj12*x18898))+(((-1.0)*x18873*x18893))+(((-1.0)*r12*x18882))+(((-1.0)*sj12*x18901))+(((-1.0)*r12*x18883))+((sj12*x18899))+(((-1.0)*x18873*x18890))+((r11*x18896))+(((-1.0)*x18873*x18875))+((x18873*x18878))+(((-1.0)*x18888))+x18890+x18893+(((-1.0)*sj12*x18879))+((x18873*x18888))+((sj12*x18886))+(((-1.0)*r10*x18895))+((r10*x18897))+(((-1.0)*r11*x18894))+((sj12*x18891))+(((-1.0)*x18878))+((py*x18876))+((x18873*x18881))+((x18873*x18885))+(((-1.0)*x18885)))),IkReal(((((-1.0)*sj12*x18881))+x18879+(((-1.0)*x18873*x18879))+(((-1.0)*r02*x18883))+((x18873*x18898))+((r00*x18897))+((sj12*x18875))+(((-1.0)*r02*x18882))+x18901+x18900+(((-1.0)*sj12*x18885))+(((-1.0)*x18898))+(((-1.0)*r01*x18894))+((sj12*x18890))+((sj12*x18893))+((px*x18876))+(((-1.0)*x18899))+(((-1.0)*r00*x18895))+(((-1.0)*sj12*x18878))+(((-1.0)*sj12*x18888))+((x18873*x18891))+((r01*x18896))+(((-1.0)*x18873*x18901))+(((-1.0)*x18891))+(((-1.0)*x18886))+(((-1.0)*x18873*x18900))+((x18873*x18899))+((x18873*x18886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18903.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18902.value)))+(x18903.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x18904=((0.37429)*cj15);
IkReal x18905=((0.01)*sj15);
IkReal x18906=IKcos(j10);
IkReal x18907=((0.069)*x18906);
IkReal x18908=((0.36442)*cj11);
IkReal x18909=IKsin(j10);
IkReal x18910=((0.069)*x18909);
IkReal x18911=((0.01)*cj15*cj16);
IkReal x18912=((0.01)*cj15*sj16);
IkReal x18913=((0.37429)*cj16*sj15);
IkReal x18914=((0.37429)*sj15*sj16);
IkReal x18915=(cj12*sj11);
evalcond[0]=((((-1.0)*(1.0)*px))+((r02*x18905))+((r02*x18904))+(((-1.0)*x18907*x18915))+((r01*x18911))+x18907+(((-1.0)*r01*x18913))+(((-1.0)*sj12*x18910))+((x18906*x18908))+((r00*x18912))+(((-1.0)*r00*x18914)));
evalcond[1]=((((-1.0)*r11*x18913))+(((-1.0)*x18910*x18915))+(((-1.0)*(1.0)*py))+((r10*x18912))+((r11*x18911))+((x18908*x18909))+x18910+((r12*x18905))+((r12*x18904))+(((-1.0)*r10*x18914))+((sj12*x18907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[2];
IkReal x18916=(((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*(1.0)*cj15*r12)));
j14eval[0]=x18916;
j14eval[1]=IKsign(x18916);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x18917=((1.0)*sj15);
IkReal x18918=((((-1.0)*r00*sj16*x18917))+((cj15*r02))+(((-1.0)*cj16*r01*x18917)));
j14eval[0]=x18918;
j14eval[1]=IKsign(x18918);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x18919=((1.0)*sj15);
IkReal x18920=((((-1.0)*cj16*r21*x18919))+((cj15*r22))+(((-1.0)*r20*sj16*x18919)));
j14eval[0]=x18920;
j14eval[1]=IKsign(x18920);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18921=((1.0)*sj15);
IkReal x18922=(cj10*cj12*cj16);
IkReal x18923=(cj12*cj16*sj10);
IkReal x18924=(cj10*cj12);
IkReal x18925=((1.0)*r01*sj16);
IkReal x18926=(cj16*sj10*sj11*sj12);
IkReal x18927=((1.0)*cj16);
IkReal x18928=(cj10*r10*sj11*sj12);
IkReal x18929=(sj10*sj11*sj12);
IkReal x18930=(r02*sj15);
IkReal x18931=(cj15*r01);
IkReal x18932=(cj15*r00*sj16);
CheckValue<IkReal> x18933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x18921))+(((-1.0)*cj16*r21*x18921))+((cj15*r22)))),-1);
if(!x18933.valid){
continue;
}
CheckValue<IkReal> x18934 = IKatan2WithCheck(IkReal((((sj16*((cj10*r11*sj11*sj12))))+((r00*x18922))+(((-1.0)*cj12*r11*sj10*sj16))+((r00*x18926))+(((-1.0)*x18924*x18925))+((r10*x18923))+(((-1.0)*x18927*x18928))+(((-1.0)*x18925*x18929)))),IkReal((((x18926*x18931))+(((-1.0)*cj10*cj15*r11*sj11*sj12*x18927))+((x18924*x18930))+(((-1.0)*cj15*sj16*x18928))+((((r12*sj15))*((cj12*sj10))))+((x18929*x18930))+((cj15*r11*x18923))+((x18922*x18931))+((x18929*x18932))+((((cj12*r10*sj10))*((cj15*sj16))))+(((-1.0)*cj10*r12*sj11*sj12*sj15))+((x18924*x18932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18934.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18933.value)))+(x18934.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x18935=IKcos(j14);
IkReal x18936=(cj16*x18935);
IkReal x18937=((1.0)*sj16*x18935);
IkReal x18938=IKsin(j14);
IkReal x18939=((1.0)*sj15*x18938);
IkReal x18940=((1.0)*cj15*cj16*x18938);
IkReal x18941=((1.0)*cj15*sj16*x18938);
IkReal x18942=(cj10*cj12);
IkReal x18943=((1.0)*sj10);
IkReal x18944=(cj12*x18943);
IkReal x18945=(cj10*sj12);
IkReal x18946=(cj13*cj15);
IkReal x18947=((1.0)*cj13*cj16*sj15);
IkReal x18948=((1.0)*cj13*sj15*sj16);
IkReal x18949=(sj13*sj16*x18938);
IkReal x18950=((1.0)*cj16*sj13*x18938);
IkReal x18951=((1.0)*sj13*sj15*x18935);
IkReal x18952=((1.0)*cj15*cj16*sj13*x18935);
IkReal x18953=((1.0)*cj15*sj13*sj16*x18935);
IkReal x18954=((1.0)*cj11);
IkReal x18955=((1.0)*cj15*sj13);
IkReal x18956=(cj16*sj13*sj15);
IkReal x18957=(sj13*sj15*sj16);
IkReal x18958=(cj13*sj16*x18938);
IkReal x18959=((1.0)*cj13*cj16*x18938);
IkReal x18960=((1.0)*cj13*sj15*x18935);
IkReal x18961=((1.0)*cj13*cj15*cj16*x18935);
IkReal x18962=((1.0)*cj13*cj15*sj16*x18935);
evalcond[0]=(((r20*x18936))+(((-1.0)*r21*x18940))+(((-1.0)*r20*x18941))+(((-1.0)*r21*x18937))+((cj11*sj12))+(((-1.0)*r22*x18939)));
evalcond[1]=(x18942+(((-1.0)*r10*x18941))+((r10*x18936))+(((-1.0)*r11*x18940))+(((-1.0)*r12*x18939))+(((-1.0)*r11*x18937))+((sj10*sj11*sj12)));
evalcond[2]=((((-1.0)*r01*x18940))+(((-1.0)*r02*x18939))+(((-1.0)*x18944))+(((-1.0)*r00*x18941))+((r00*x18936))+(((-1.0)*r01*x18937))+((sj11*x18945)));
evalcond[3]=((((-1.0)*r20*x18948))+(((-1.0)*r21*x18947))+(((-1.0)*r22*x18951))+sj11+(((-1.0)*r20*x18950))+((r21*x18949))+(((-1.0)*r21*x18952))+((r22*x18946))+(((-1.0)*r20*x18953)));
evalcond[4]=(((r21*x18956))+(((-1.0)*r22*x18955))+(((-1.0)*r22*x18960))+(((-1.0)*cj12*x18954))+(((-1.0)*r21*x18961))+((r21*x18958))+(((-1.0)*r20*x18962))+((r20*x18957))+(((-1.0)*r20*x18959)));
evalcond[5]=((((-1.0)*cj10*x18954))+(((-1.0)*r00*x18953))+((r01*x18949))+(((-1.0)*r02*x18951))+((r02*x18946))+(((-1.0)*r01*x18952))+(((-1.0)*r00*x18948))+(((-1.0)*r00*x18950))+(((-1.0)*r01*x18947)));
evalcond[6]=((((-1.0)*r10*x18950))+(((-1.0)*r11*x18947))+(((-1.0)*r11*x18952))+((r11*x18949))+(((-1.0)*r10*x18948))+(((-1.0)*r10*x18953))+(((-1.0)*sj10*x18954))+(((-1.0)*r12*x18951))+((r12*x18946)));
evalcond[7]=(x18945+((r11*x18958))+((r10*x18957))+(((-1.0)*r12*x18955))+(((-1.0)*r12*x18960))+(((-1.0)*r10*x18962))+(((-1.0)*sj11*x18944))+(((-1.0)*r11*x18961))+(((-1.0)*r10*x18959))+((r11*x18956)));
evalcond[8]=(((r01*x18958))+(((-1.0)*r00*x18962))+(((-1.0)*r00*x18959))+(((-1.0)*r02*x18960))+(((-1.0)*sj12*x18943))+(((-1.0)*sj11*x18942))+(((-1.0)*r02*x18955))+((r01*x18956))+((r00*x18957))+(((-1.0)*r01*x18961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x18963=((1.0)*sj15);
IkReal x18964=(cj10*cj12);
IkReal x18965=(r21*sj16);
IkReal x18966=(cj11*cj16*sj12);
IkReal x18967=((1.0)*cj10*cj12*cj16);
IkReal x18968=(cj11*sj12*sj16);
IkReal x18969=(sj10*sj11*sj12);
IkReal x18970=(cj16*sj10*sj11*sj12);
IkReal x18971=((1.0)*r22*sj15);
IkReal x18972=((1.0)*cj15*r20*sj16);
CheckValue<IkReal> x18973=IKPowWithIntegerCheck(IKsign((((cj15*r02))+(((-1.0)*r00*sj16*x18963))+(((-1.0)*cj16*r01*x18963)))),-1);
if(!x18973.valid){
continue;
}
CheckValue<IkReal> x18974 = IKatan2WithCheck(IkReal((((x18964*x18965))+(((-1.0)*r20*x18967))+((x18965*x18969))+(((-1.0)*r20*x18970))+((r10*x18966))+(((-1.0)*r11*x18968)))),IkReal((((cj15*r10*x18968))+((((r12*sj15))*((cj11*sj12))))+(((-1.0)*cj15*r21*x18967))+(((-1.0)*x18969*x18972))+((cj15*r11*x18966))+(((-1.0)*x18969*x18971))+(((-1.0)*x18964*x18972))+(((-1.0)*cj15*r21*x18970))+(((-1.0)*x18964*x18971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x18974.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18973.value)))+(x18974.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x18975=IKcos(j14);
IkReal x18976=(cj16*x18975);
IkReal x18977=((1.0)*sj16*x18975);
IkReal x18978=IKsin(j14);
IkReal x18979=((1.0)*sj15*x18978);
IkReal x18980=((1.0)*cj15*cj16*x18978);
IkReal x18981=((1.0)*cj15*sj16*x18978);
IkReal x18982=(cj10*cj12);
IkReal x18983=((1.0)*sj10);
IkReal x18984=(cj12*x18983);
IkReal x18985=(cj10*sj12);
IkReal x18986=(cj13*cj15);
IkReal x18987=((1.0)*cj13*cj16*sj15);
IkReal x18988=((1.0)*cj13*sj15*sj16);
IkReal x18989=(sj13*sj16*x18978);
IkReal x18990=((1.0)*cj16*sj13*x18978);
IkReal x18991=((1.0)*sj13*sj15*x18975);
IkReal x18992=((1.0)*cj15*cj16*sj13*x18975);
IkReal x18993=((1.0)*cj15*sj13*sj16*x18975);
IkReal x18994=((1.0)*cj11);
IkReal x18995=((1.0)*cj15*sj13);
IkReal x18996=(cj16*sj13*sj15);
IkReal x18997=(sj13*sj15*sj16);
IkReal x18998=(cj13*sj16*x18978);
IkReal x18999=((1.0)*cj13*cj16*x18978);
IkReal x19000=((1.0)*cj13*sj15*x18975);
IkReal x19001=((1.0)*cj13*cj15*cj16*x18975);
IkReal x19002=((1.0)*cj13*cj15*sj16*x18975);
evalcond[0]=((((-1.0)*r22*x18979))+((r20*x18976))+((cj11*sj12))+(((-1.0)*r21*x18977))+(((-1.0)*r21*x18980))+(((-1.0)*r20*x18981)));
evalcond[1]=((((-1.0)*r11*x18977))+(((-1.0)*r12*x18979))+((r10*x18976))+x18982+(((-1.0)*r11*x18980))+(((-1.0)*r10*x18981))+((sj10*sj11*sj12)));
evalcond[2]=(((sj11*x18985))+(((-1.0)*r02*x18979))+(((-1.0)*r01*x18977))+((r00*x18976))+(((-1.0)*x18984))+(((-1.0)*r00*x18981))+(((-1.0)*r01*x18980)));
evalcond[3]=((((-1.0)*r20*x18988))+(((-1.0)*r21*x18987))+sj11+((r22*x18986))+(((-1.0)*r20*x18993))+(((-1.0)*r20*x18990))+((r21*x18989))+(((-1.0)*r21*x18992))+(((-1.0)*r22*x18991)));
evalcond[4]=((((-1.0)*r22*x19000))+((r21*x18996))+(((-1.0)*r20*x19002))+(((-1.0)*cj12*x18994))+(((-1.0)*r22*x18995))+(((-1.0)*r20*x18999))+((r21*x18998))+(((-1.0)*r21*x19001))+((r20*x18997)));
evalcond[5]=((((-1.0)*r00*x18993))+(((-1.0)*r00*x18988))+(((-1.0)*r00*x18990))+(((-1.0)*r01*x18992))+((r02*x18986))+(((-1.0)*r01*x18987))+(((-1.0)*r02*x18991))+(((-1.0)*cj10*x18994))+((r01*x18989)));
evalcond[6]=((((-1.0)*r11*x18987))+(((-1.0)*r11*x18992))+(((-1.0)*sj10*x18994))+((r12*x18986))+(((-1.0)*r10*x18990))+(((-1.0)*r12*x18991))+(((-1.0)*r10*x18993))+(((-1.0)*r10*x18988))+((r11*x18989)));
evalcond[7]=(((r11*x18996))+(((-1.0)*r12*x18995))+(((-1.0)*r11*x19001))+((r11*x18998))+((r10*x18997))+x18985+(((-1.0)*r12*x19000))+(((-1.0)*r10*x19002))+(((-1.0)*r10*x18999))+(((-1.0)*sj11*x18984)));
evalcond[8]=((((-1.0)*r00*x18999))+((r00*x18997))+(((-1.0)*r02*x18995))+(((-1.0)*sj11*x18982))+((r01*x18998))+(((-1.0)*r02*x19000))+(((-1.0)*r00*x19002))+(((-1.0)*sj12*x18983))+((r01*x18996))+(((-1.0)*r01*x19001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x19003=(cj11*cj16*sj12);
IkReal x19004=(cj12*cj16*sj10);
IkReal x19005=((1.0)*sj16);
IkReal x19006=(cj10*r21*sj11*sj12);
IkReal x19007=((1.0)*cj10*sj11*sj12);
IkReal x19008=(r22*sj15);
IkReal x19009=(cj15*sj16);
CheckValue<IkReal> x19010 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*r20*x19007))+((sj16*x19006))+((r20*x19004))+(((-1.0)*cj11*r01*sj12*x19005))+((r00*x19003))+(((-1.0)*cj12*r21*sj10*x19005)))),IkReal(((((-1.0)*x19007*x19008))+((cj11*r00*sj12*x19009))+(((-1.0)*cj10*cj15*r20*sj11*sj12*sj16))+((cj12*sj10*x19008))+(((-1.0)*cj15*cj16*x19006))+((((r02*sj15))*((cj11*sj12))))+((cj15*r01*x19003))+((cj15*r21*x19004))+((cj12*r20*sj10*x19009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x19010.valid){
continue;
}
CheckValue<IkReal> x19011=IKPowWithIntegerCheck(IKsign((((cj16*r11*sj15))+((r10*sj15*sj16))+(((-1.0)*cj15*r12)))),-1);
if(!x19011.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x19010.value)+(((1.5707963267949)*(x19011.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x19012=IKcos(j14);
IkReal x19013=(cj16*x19012);
IkReal x19014=((1.0)*sj16*x19012);
IkReal x19015=IKsin(j14);
IkReal x19016=((1.0)*sj15*x19015);
IkReal x19017=((1.0)*cj15*cj16*x19015);
IkReal x19018=((1.0)*cj15*sj16*x19015);
IkReal x19019=(cj10*cj12);
IkReal x19020=((1.0)*sj10);
IkReal x19021=(cj12*x19020);
IkReal x19022=(cj10*sj12);
IkReal x19023=(cj13*cj15);
IkReal x19024=((1.0)*cj13*cj16*sj15);
IkReal x19025=((1.0)*cj13*sj15*sj16);
IkReal x19026=(sj13*sj16*x19015);
IkReal x19027=((1.0)*cj16*sj13*x19015);
IkReal x19028=((1.0)*sj13*sj15*x19012);
IkReal x19029=((1.0)*cj15*cj16*sj13*x19012);
IkReal x19030=((1.0)*cj15*sj13*sj16*x19012);
IkReal x19031=((1.0)*cj11);
IkReal x19032=((1.0)*cj15*sj13);
IkReal x19033=(cj16*sj13*sj15);
IkReal x19034=(sj13*sj15*sj16);
IkReal x19035=(cj13*sj16*x19015);
IkReal x19036=((1.0)*cj13*cj16*x19015);
IkReal x19037=((1.0)*cj13*sj15*x19012);
IkReal x19038=((1.0)*cj13*cj15*cj16*x19012);
IkReal x19039=((1.0)*cj13*cj15*sj16*x19012);
evalcond[0]=((((-1.0)*r22*x19016))+((r20*x19013))+((cj11*sj12))+(((-1.0)*r20*x19018))+(((-1.0)*r21*x19014))+(((-1.0)*r21*x19017)));
evalcond[1]=((((-1.0)*r11*x19014))+(((-1.0)*r10*x19018))+(((-1.0)*r11*x19017))+(((-1.0)*r12*x19016))+x19019+((r10*x19013))+((sj10*sj11*sj12)));
evalcond[2]=((((-1.0)*r00*x19018))+(((-1.0)*r01*x19017))+(((-1.0)*r01*x19014))+((sj11*x19022))+((r00*x19013))+(((-1.0)*r02*x19016))+(((-1.0)*x19021)));
evalcond[3]=((((-1.0)*r22*x19028))+((r21*x19026))+sj11+((r22*x19023))+(((-1.0)*r20*x19027))+(((-1.0)*r21*x19024))+(((-1.0)*r20*x19025))+(((-1.0)*r20*x19030))+(((-1.0)*r21*x19029)));
evalcond[4]=((((-1.0)*cj12*x19031))+(((-1.0)*r22*x19032))+((r21*x19035))+((r21*x19033))+(((-1.0)*r22*x19037))+(((-1.0)*r21*x19038))+(((-1.0)*r20*x19039))+(((-1.0)*r20*x19036))+((r20*x19034)));
evalcond[5]=(((r01*x19026))+(((-1.0)*r00*x19030))+(((-1.0)*r02*x19028))+(((-1.0)*cj10*x19031))+(((-1.0)*r00*x19027))+(((-1.0)*r01*x19029))+(((-1.0)*r00*x19025))+(((-1.0)*r01*x19024))+((r02*x19023)));
evalcond[6]=((((-1.0)*r10*x19025))+(((-1.0)*r10*x19030))+((r12*x19023))+(((-1.0)*r11*x19024))+(((-1.0)*sj10*x19031))+((r11*x19026))+(((-1.0)*r11*x19029))+(((-1.0)*r12*x19028))+(((-1.0)*r10*x19027)));
evalcond[7]=(((r11*x19033))+((r11*x19035))+((r10*x19034))+(((-1.0)*r12*x19032))+(((-1.0)*r10*x19039))+(((-1.0)*sj11*x19021))+(((-1.0)*r10*x19036))+(((-1.0)*r11*x19038))+x19022+(((-1.0)*r12*x19037)));
evalcond[8]=((((-1.0)*r00*x19036))+((r00*x19034))+(((-1.0)*sj12*x19020))+(((-1.0)*r01*x19038))+((r01*x19033))+(((-1.0)*r02*x19032))+(((-1.0)*sj11*x19019))+((r01*x19035))+(((-1.0)*r00*x19039))+(((-1.0)*r02*x19037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x19040=((1.0)*cj13);
IkReal x19041=r21*r21;
IkReal x19042=(x19040*x19041);
IkReal x19043=r22*r22;
IkReal x19044=((2.0)*cj13*cj16);
IkReal x19045=(r20*r21*sj16*x19044);
IkReal x19046=cj15*cj15;
IkReal x19047=(cj13*x19046);
IkReal x19048=cj16*cj16;
IkReal x19049=(x19041*x19048);
IkReal x19050=(cj15*r20*sj16);
IkReal x19051=r20*r20;
IkReal x19052=((1.0)*cj13*x19051);
IkReal x19053=(cj11*cj12*cj16);
IkReal x19054=(r20*sj13);
IkReal x19055=(r22*sj15);
IkReal x19056=((1.0)*cj11*cj13*sj12);
IkReal x19057=((1.0)*r22*sj16);
IkReal x19058=(cj16*sj13*sj15);
IkReal x19059=((2.0)*r20*r21*sj13*sj15);
IkReal x19060=(cj11*cj12);
IkReal x19061=(cj16*r21*r22*sj13);
IkReal x19062=(cj15*sj13*sj15*x19051);
IkReal x19063=((2.0)*x19046);
CheckValue<IkReal> x19064 = IKatan2WithCheck(IkReal(((((-1.0)*x19055*x19056))+((cj15*cj16*r22*x19054))+(((-1.0)*cj15*r21*sj13*x19057))+((r20*x19053))+(((-1.0)*cj15*cj16*r21*x19056))+(((-1.0)*x19050*x19056))+((((r20*sj15))*((r21*sj13))))+(((-1.0)*x19048*x19059))+(((-1.0)*sj16*x19051*x19058))+(((-1.0)*cj11*cj12*r21*sj16))+((sj16*x19041*x19058)))),IkReal(((((-1.0)*x19062))+((x19050*x19060))+((x19055*x19060))+(((-1.0)*r21*sj16*x19056))+(((-1.0)*cj15*cj16*sj16*x19059))+((x19061*x19063))+(((-1.0)*cj15*sj13*sj15*x19049))+(((-1.0)*x19054*x19057))+((((cj11*r20*sj12))*((cj13*cj16))))+((cj15*sj13*sj15*x19043))+((cj15*r21*x19053))+((x19048*x19062))+((r20*r22*sj13*sj16*x19063))+(((-1.0)*x19061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x19064.valid){
continue;
}
CheckValue<IkReal> x19065=IKPowWithIntegerCheck(IKsign((((cj13*x19049))+(((-1.0)*x19040*x19043))+((x19047*x19048*x19051))+((x19043*x19047))+x19045+(((-1.0)*x19045*x19046))+(((-1.0)*x19042))+(((-2.0)*cj13*r22*sj15*x19050))+(((-1.0)*x19042*x19046*x19048))+(((-1.0)*cj15*r21*r22*sj15*x19044))+(((-1.0)*x19048*x19052))+(((-1.0)*x19046*x19052)))),-1);
if(!x19065.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x19064.value)+(((1.5707963267949)*(x19065.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x19066=IKcos(j14);
IkReal x19067=(cj16*r20);
IkReal x19068=IKsin(j14);
IkReal x19069=(cj16*r21);
IkReal x19070=((1.0)*cj15*x19068);
IkReal x19071=(r20*sj16);
IkReal x19072=(cj15*r22);
IkReal x19073=((1.0)*cj13*sj15);
IkReal x19074=(r21*sj16*x19068);
IkReal x19075=(r22*sj15);
IkReal x19076=((1.0)*cj15*sj13*x19066);
IkReal x19077=(sj13*sj15);
IkReal x19078=((1.0)*cj13*cj15*x19066);
evalcond[0]=((((-1.0)*r22*sj15*x19068))+(((-1.0)*x19069*x19070))+((cj11*sj12))+(((-1.0)*r21*sj16*x19066))+((x19066*x19067))+(((-1.0)*x19070*x19071)));
evalcond[1]=((((-1.0)*x19069*x19073))+(((-1.0)*x19069*x19076))+(((-1.0)*sj13*x19067*x19068))+(((-1.0)*x19071*x19076))+((cj13*x19072))+sj11+(((-1.0)*x19071*x19073))+((sj13*x19074))+(((-1.0)*sj13*x19066*x19075)));
evalcond[2]=(((x19069*x19077))+(((-1.0)*x19071*x19078))+((x19071*x19077))+(((-1.0)*x19069*x19078))+(((-1.0)*cj13*cj16*r20*x19068))+((cj13*x19074))+(((-1.0)*cj13*x19066*x19075))+(((-1.0)*(1.0)*cj11*cj12))+(((-1.0)*sj13*x19072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[2];
IkReal x19079=cj11*cj11;
IkReal x19080=((1.0)+((x19079*(cj12*cj12)))+(((-1.0)*x19079)));
j10eval[0]=x19080;
j10eval[1]=IKsign(x19080);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x19081=(cj11*cj12);
j10eval[0]=(cj12+(((-1.0)*(1.0)*sj11))+(((5.28144927536232)*x19081)));
j10eval[1]=IKsign(((((364.42)*x19081))+(((-1.0)*(69.0)*sj11))+(((69.0)*cj12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x19082=(sj11*sj12);
IkReal x19083=((5.28144927536232)*cj11);
IkReal x19084=(cj12*(cj11*cj11));
j10eval[0]=(((sj12*x19084))+((x19082*x19083))+x19082);
j10eval[1]=(((sj11*x19083))+sj11+x19084);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19085=(cj14*cj16);
IkReal x19086=((1.0)*r01);
IkReal x19087=(cj14*sj16);
IkReal x19088=(sj14*sj15);
IkReal x19089=(cj15*cj16*sj14);
IkReal x19090=(cj15*sj14*sj16);
if( IKabs(((((-1.0)*x19086*x19089))+(((-1.0)*r02*x19088))+(((-1.0)*r00*x19090))+(((-1.0)*x19086*x19087))+((r00*x19085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x19089))+((r12*x19088))+(((-1.0)*r10*x19085))+((r11*x19087))+((r10*x19090)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x19086*x19089))+(((-1.0)*r02*x19088))+(((-1.0)*r00*x19090))+(((-1.0)*x19086*x19087))+((r00*x19085))))+IKsqr((((r11*x19089))+((r12*x19088))+(((-1.0)*r10*x19085))+((r11*x19087))+((r10*x19090))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x19086*x19089))+(((-1.0)*r02*x19088))+(((-1.0)*r00*x19090))+(((-1.0)*x19086*x19087))+((r00*x19085))), (((r11*x19089))+((r12*x19088))+(((-1.0)*r10*x19085))+((r11*x19087))+((r10*x19090))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19091=IKcos(j10);
IkReal x19092=(cj14*cj16);
IkReal x19093=((1.0)*cj14*sj16);
IkReal x19094=((1.0)*sj14*sj15);
IkReal x19095=((1.0)*cj15*cj16*sj14);
IkReal x19096=((1.0)*cj15*sj14*sj16);
IkReal x19097=IKsin(j10);
IkReal x19098=((1.0)*x19097);
IkReal x19099=((0.37429)*cj15);
IkReal x19100=((0.01)*sj15);
IkReal x19101=((0.069)*x19091);
IkReal x19102=((0.36442)*cj11);
IkReal x19103=((0.01)*cj15*cj16);
IkReal x19104=((0.01)*cj15*sj16);
IkReal x19105=((0.37429)*cj16*sj15);
IkReal x19106=((0.37429)*sj15*sj16);
IkReal x19107=((0.069)*x19097);
IkReal x19108=((1.0)*cj15*sj13);
IkReal x19109=(cj13*sj14*sj16);
IkReal x19110=(cj16*sj13*sj15);
IkReal x19111=(sj13*sj15*sj16);
IkReal x19112=((1.0)*cj13*cj14*sj15);
IkReal x19113=((1.0)*cj13*cj16*sj14);
IkReal x19114=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19115=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19116=((1.0)*x19091);
IkReal x19117=(cj13*cj15);
IkReal x19118=(sj13*sj14*sj16);
IkReal x19119=((1.0)*cj13*cj16*sj15);
IkReal x19120=((1.0)*cj13*sj15*sj16);
IkReal x19121=((1.0)*cj14*sj13*sj15);
IkReal x19122=((1.0)*cj16*sj13*sj14);
IkReal x19123=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19124=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*r12*x19094))+(((-1.0)*r10*x19096))+x19091+(((-1.0)*r11*x19095))+(((-1.0)*r11*x19093))+((r10*x19092)));
evalcond[1]=((((-1.0)*r01*x19093))+((r00*x19092))+(((-1.0)*r00*x19096))+(((-1.0)*x19098))+(((-1.0)*r02*x19094))+(((-1.0)*r01*x19095)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x19105))+x19101+((r00*x19104))+(((-1.0)*sj11*x19101))+((r02*x19100))+((x19091*x19102))+((r01*x19103))+(((-1.0)*r00*x19106))+((r02*x19099)));
evalcond[3]=(((r12*x19099))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x19106))+((r11*x19103))+((r12*x19100))+x19107+((r10*x19104))+(((-1.0)*r11*x19105))+((x19097*x19102))+(((-1.0)*sj11*x19107)));
evalcond[4]=(((r10*x19111))+(((-1.0)*r10*x19115))+((r11*x19110))+(((-1.0)*r12*x19112))+((r11*x19109))+(((-1.0)*sj11*x19098))+(((-1.0)*r10*x19113))+(((-1.0)*r12*x19108))+(((-1.0)*r11*x19114)));
evalcond[5]=((((-1.0)*sj11*x19116))+((r01*x19109))+(((-1.0)*r02*x19108))+(((-1.0)*r00*x19115))+(((-1.0)*r02*x19112))+((r01*x19110))+((r00*x19111))+(((-1.0)*r01*x19114))+(((-1.0)*r00*x19113)));
evalcond[6]=(((r01*x19118))+(((-1.0)*r01*x19119))+(((-1.0)*r00*x19122))+(((-1.0)*r00*x19120))+(((-1.0)*r01*x19123))+(((-1.0)*cj11*x19116))+((r02*x19117))+(((-1.0)*r02*x19121))+(((-1.0)*r00*x19124)));
evalcond[7]=((((-1.0)*r12*x19121))+(((-1.0)*r10*x19124))+(((-1.0)*cj11*x19098))+(((-1.0)*r11*x19123))+(((-1.0)*r10*x19120))+((r11*x19118))+(((-1.0)*r10*x19122))+(((-1.0)*r11*x19119))+((r12*x19117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19125=(cj14*sj16);
IkReal x19126=(sj14*sj15);
IkReal x19127=(cj14*cj16);
IkReal x19128=(cj15*cj16*sj14);
IkReal x19129=(cj15*sj14*sj16);
IkReal x19130=((1.0)*r11);
if( IKabs((((r01*x19128))+((r02*x19126))+(((-1.0)*r00*x19127))+((r01*x19125))+((r00*x19129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x19125*x19130))+(((-1.0)*r10*x19129))+(((-1.0)*x19128*x19130))+(((-1.0)*r12*x19126))+((r10*x19127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x19128))+((r02*x19126))+(((-1.0)*r00*x19127))+((r01*x19125))+((r00*x19129))))+IKsqr(((((-1.0)*x19125*x19130))+(((-1.0)*r10*x19129))+(((-1.0)*x19128*x19130))+(((-1.0)*r12*x19126))+((r10*x19127))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x19128))+((r02*x19126))+(((-1.0)*r00*x19127))+((r01*x19125))+((r00*x19129))), ((((-1.0)*x19125*x19130))+(((-1.0)*r10*x19129))+(((-1.0)*x19128*x19130))+(((-1.0)*r12*x19126))+((r10*x19127))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19131=IKsin(j10);
IkReal x19132=(cj14*cj16);
IkReal x19133=((1.0)*cj14*sj16);
IkReal x19134=((1.0)*sj14*sj15);
IkReal x19135=((1.0)*cj15*cj16*sj14);
IkReal x19136=((1.0)*cj15*sj14*sj16);
IkReal x19137=IKcos(j10);
IkReal x19138=((1.0)*x19137);
IkReal x19139=((0.37429)*cj15);
IkReal x19140=((0.01)*sj15);
IkReal x19141=(sj11*x19137);
IkReal x19142=((0.01)*cj15*cj16);
IkReal x19143=((0.01)*cj15*sj16);
IkReal x19144=((0.37429)*cj16*sj15);
IkReal x19145=((0.37429)*sj15*sj16);
IkReal x19146=(cj11*x19131);
IkReal x19147=(sj11*x19131);
IkReal x19148=((1.0)*cj15*sj13);
IkReal x19149=(cj13*sj14*sj16);
IkReal x19150=(cj16*sj13*sj15);
IkReal x19151=(sj13*sj15*sj16);
IkReal x19152=((1.0)*cj13*cj14*sj15);
IkReal x19153=((1.0)*cj13*cj16*sj14);
IkReal x19154=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19155=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19156=(cj13*cj15);
IkReal x19157=(sj13*sj14*sj16);
IkReal x19158=((1.0)*cj13*cj16*sj15);
IkReal x19159=((1.0)*cj13*sj15*sj16);
IkReal x19160=((1.0)*cj14*sj13*sj15);
IkReal x19161=((1.0)*cj16*sj13*sj14);
IkReal x19162=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19163=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*r02*x19134))+(((-1.0)*r01*x19133))+x19131+(((-1.0)*r00*x19136))+((r00*x19132))+(((-1.0)*r01*x19135)));
evalcond[1]=(((r10*x19132))+(((-1.0)*x19138))+(((-1.0)*r11*x19133))+(((-1.0)*r12*x19134))+(((-1.0)*r10*x19136))+(((-1.0)*r11*x19135)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((0.069)*x19141))+(((0.36442)*cj11*x19137))+(((-1.0)*r01*x19144))+((r01*x19142))+(((0.069)*x19137))+((r02*x19140))+((r02*x19139))+((r00*x19143))+(((-1.0)*r00*x19145)));
evalcond[3]=((((0.36442)*x19146))+(((0.069)*x19147))+(((-1.0)*(1.0)*py))+((r12*x19140))+(((-1.0)*r10*x19145))+(((0.069)*x19131))+((r10*x19143))+((r12*x19139))+((r11*x19142))+(((-1.0)*r11*x19144)));
evalcond[4]=((((-1.0)*r10*x19153))+((r10*x19151))+((r11*x19150))+(((-1.0)*r11*x19154))+(((-1.0)*r12*x19152))+x19147+(((-1.0)*r10*x19155))+((r11*x19149))+(((-1.0)*r12*x19148)));
evalcond[5]=(((r01*x19150))+((r00*x19151))+((r01*x19149))+(((-1.0)*r02*x19152))+(((-1.0)*r02*x19148))+(((-1.0)*r00*x19155))+(((-1.0)*r01*x19154))+x19141+(((-1.0)*r00*x19153)));
evalcond[6]=((((-1.0)*r00*x19159))+(((-1.0)*r01*x19158))+((r01*x19157))+(((-1.0)*r01*x19162))+(((-1.0)*cj11*x19138))+(((-1.0)*r02*x19160))+(((-1.0)*r00*x19163))+((r02*x19156))+(((-1.0)*r00*x19161)));
evalcond[7]=((((-1.0)*r10*x19163))+((r12*x19156))+(((-1.0)*r10*x19159))+(((-1.0)*r10*x19161))+(((-1.0)*r12*x19160))+(((-1.0)*x19146))+((r11*x19157))+(((-1.0)*r11*x19162))+(((-1.0)*r11*x19158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19164=(cj15*r02);
IkReal x19165=(cj15*r12);
IkReal x19166=(r02*sj15);
IkReal x19167=(r12*sj15);
IkReal x19168=(cj15*cj16*r01);
IkReal x19169=(cj15*cj16*r11);
IkReal x19170=(cj15*r00*sj16);
IkReal x19171=(cj15*r10*sj16);
IkReal x19172=(cj16*r01*sj15);
IkReal x19173=(cj16*r11*sj15);
IkReal x19174=(r00*sj15*sj16);
IkReal x19175=(r10*sj15*sj16);
if( IKabs(((((0.842227766698146)*x19175))+(((-0.134081758807097)*x19174))+(((0.00358229604870815)*x19166))+(((0.842227766698146)*x19173))+(((2.25020109192911)*py))+(((-1.0)*(0.358229604870815)*px))+(((-0.0225020109192911)*x19171))+(((-0.0225020109192911)*x19169))+(((0.00358229604870815)*x19170))+(((0.00358229604870815)*x19168))+(((0.134081758807097)*x19164))+(((-0.0225020109192911)*x19167))+(((-0.842227766698146)*x19165))+(((-0.134081758807097)*x19172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.842227766698146)*x19174))+(((0.134081758807097)*x19173))+(((-0.134081758807097)*x19165))+(((2.25020109192911)*px))+(((-0.00358229604870815)*x19167))+(((0.842227766698146)*x19172))+(((-0.0225020109192911)*x19168))+(((0.358229604870815)*py))+(((-0.0225020109192911)*x19170))+(((-0.0225020109192911)*x19166))+(((-0.842227766698146)*x19164))+(((0.134081758807097)*x19175))+(((-0.00358229604870815)*x19171))+(((-0.00358229604870815)*x19169)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.842227766698146)*x19175))+(((-0.134081758807097)*x19174))+(((0.00358229604870815)*x19166))+(((0.842227766698146)*x19173))+(((2.25020109192911)*py))+(((-1.0)*(0.358229604870815)*px))+(((-0.0225020109192911)*x19171))+(((-0.0225020109192911)*x19169))+(((0.00358229604870815)*x19170))+(((0.00358229604870815)*x19168))+(((0.134081758807097)*x19164))+(((-0.0225020109192911)*x19167))+(((-0.842227766698146)*x19165))+(((-0.134081758807097)*x19172))))+IKsqr(((((0.842227766698146)*x19174))+(((0.134081758807097)*x19173))+(((-0.134081758807097)*x19165))+(((2.25020109192911)*px))+(((-0.00358229604870815)*x19167))+(((0.842227766698146)*x19172))+(((-0.0225020109192911)*x19168))+(((0.358229604870815)*py))+(((-0.0225020109192911)*x19170))+(((-0.0225020109192911)*x19166))+(((-0.842227766698146)*x19164))+(((0.134081758807097)*x19175))+(((-0.00358229604870815)*x19171))+(((-0.00358229604870815)*x19169))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((0.842227766698146)*x19175))+(((-0.134081758807097)*x19174))+(((0.00358229604870815)*x19166))+(((0.842227766698146)*x19173))+(((2.25020109192911)*py))+(((-1.0)*(0.358229604870815)*px))+(((-0.0225020109192911)*x19171))+(((-0.0225020109192911)*x19169))+(((0.00358229604870815)*x19170))+(((0.00358229604870815)*x19168))+(((0.134081758807097)*x19164))+(((-0.0225020109192911)*x19167))+(((-0.842227766698146)*x19165))+(((-0.134081758807097)*x19172))), ((((0.842227766698146)*x19174))+(((0.134081758807097)*x19173))+(((-0.134081758807097)*x19165))+(((2.25020109192911)*px))+(((-0.00358229604870815)*x19167))+(((0.842227766698146)*x19172))+(((-0.0225020109192911)*x19168))+(((0.358229604870815)*py))+(((-0.0225020109192911)*x19170))+(((-0.0225020109192911)*x19166))+(((-0.842227766698146)*x19164))+(((0.134081758807097)*x19175))+(((-0.00358229604870815)*x19171))+(((-0.00358229604870815)*x19169))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x19176=((0.37429)*cj15);
IkReal x19177=((0.01)*sj15);
IkReal x19178=IKsin(j10);
IkReal x19179=IKcos(j10);
IkReal x19180=((0.01)*cj15*cj16);
IkReal x19181=((0.01)*cj15*sj16);
IkReal x19182=((0.37429)*cj16*sj15);
IkReal x19183=((0.37429)*sj15*sj16);
IkReal x19184=((1.0)*cj15*sj13);
IkReal x19185=(cj13*sj14*sj16);
IkReal x19186=(cj16*sj13*sj15);
IkReal x19187=(sj13*sj15*sj16);
IkReal x19188=((1.0)*cj13*cj14*sj15);
IkReal x19189=((1.0)*cj13*cj16*sj14);
IkReal x19190=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19191=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19192=((-1.0)*x19178);
IkReal x19193=(cj13*cj15);
IkReal x19194=(sj13*sj14*sj16);
IkReal x19195=((1.0)*cj13*cj16*sj15);
IkReal x19196=((1.0)*cj13*sj15*sj16);
IkReal x19197=((1.0)*cj14*sj13*sj15);
IkReal x19198=((1.0)*cj16*sj13*sj14);
IkReal x19199=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19200=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=(((r02*x19176))+(((-1.0)*r01*x19182))+(((-1.0)*(1.0)*px))+((r01*x19180))+((r02*x19177))+(((-0.069)*x19178))+(((-1.0)*r00*x19183))+((r00*x19181))+(((0.43342)*x19179)));
evalcond[1]=((((0.069)*x19179))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x19183))+((r10*x19181))+((r11*x19180))+((r12*x19177))+((r12*x19176))+(((-1.0)*r11*x19182))+(((0.43342)*x19178)));
evalcond[2]=(((r11*x19186))+(((-1.0)*r10*x19189))+((r11*x19185))+(((-1.0)*r12*x19184))+(((-1.0)*r10*x19191))+(((-1.0)*r12*x19188))+((r10*x19187))+x19179+(((-1.0)*r11*x19190)));
evalcond[3]=(((r00*x19187))+x19192+(((-1.0)*r00*x19189))+(((-1.0)*r02*x19188))+((r01*x19186))+(((-1.0)*r00*x19191))+(((-1.0)*r01*x19190))+((r01*x19185))+(((-1.0)*r02*x19184)));
evalcond[4]=(((r01*x19194))+((r02*x19193))+(((-1.0)*r00*x19198))+(((-1.0)*r01*x19199))+(((-1.0)*x19179))+(((-1.0)*r00*x19200))+(((-1.0)*r00*x19196))+(((-1.0)*r02*x19197))+(((-1.0)*r01*x19195)));
evalcond[5]=((((-1.0)*r10*x19200))+x19192+((r12*x19193))+(((-1.0)*r11*x19199))+(((-1.0)*r10*x19196))+(((-1.0)*r10*x19198))+(((-1.0)*r12*x19197))+((r11*x19194))+(((-1.0)*r11*x19195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19201=(cj15*r02);
IkReal x19202=(cj15*r12);
IkReal x19203=(r02*sj15);
IkReal x19204=(r12*sj15);
IkReal x19205=(cj15*cj16*r01);
IkReal x19206=(cj15*cj16*r11);
IkReal x19207=(cj15*r00*sj16);
IkReal x19208=(cj15*r10*sj16);
IkReal x19209=(cj16*r01*sj15);
IkReal x19210=(cj16*r11*sj15);
IkReal x19211=(r00*sj15*sj16);
IkReal x19212=(r10*sj15*sj16);
if( IKabs(((((0.842227766698146)*x19210))+(((0.134081758807097)*x19209))+(((-0.0225020109192911)*x19208))+(((-0.00358229604870815)*x19205))+(((2.25020109192911)*py))+(((0.358229604870815)*px))+(((-0.0225020109192911)*x19204))+(((-0.134081758807097)*x19201))+(((0.134081758807097)*x19211))+(((-0.0225020109192911)*x19206))+(((-0.00358229604870815)*x19203))+(((0.842227766698146)*x19212))+(((-0.842227766698146)*x19202))+(((-0.00358229604870815)*x19207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.00358229604870815)*x19208))+(((0.00358229604870815)*x19206))+(((0.842227766698146)*x19209))+(((-0.0225020109192911)*x19203))+(((-0.0225020109192911)*x19207))+(((2.25020109192911)*px))+(((-1.0)*(0.358229604870815)*py))+(((-0.842227766698146)*x19201))+(((-0.134081758807097)*x19212))+(((0.134081758807097)*x19202))+(((0.00358229604870815)*x19204))+(((0.842227766698146)*x19211))+(((-0.0225020109192911)*x19205))+(((-0.134081758807097)*x19210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.842227766698146)*x19210))+(((0.134081758807097)*x19209))+(((-0.0225020109192911)*x19208))+(((-0.00358229604870815)*x19205))+(((2.25020109192911)*py))+(((0.358229604870815)*px))+(((-0.0225020109192911)*x19204))+(((-0.134081758807097)*x19201))+(((0.134081758807097)*x19211))+(((-0.0225020109192911)*x19206))+(((-0.00358229604870815)*x19203))+(((0.842227766698146)*x19212))+(((-0.842227766698146)*x19202))+(((-0.00358229604870815)*x19207))))+IKsqr(((((0.00358229604870815)*x19208))+(((0.00358229604870815)*x19206))+(((0.842227766698146)*x19209))+(((-0.0225020109192911)*x19203))+(((-0.0225020109192911)*x19207))+(((2.25020109192911)*px))+(((-1.0)*(0.358229604870815)*py))+(((-0.842227766698146)*x19201))+(((-0.134081758807097)*x19212))+(((0.134081758807097)*x19202))+(((0.00358229604870815)*x19204))+(((0.842227766698146)*x19211))+(((-0.0225020109192911)*x19205))+(((-0.134081758807097)*x19210))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((0.842227766698146)*x19210))+(((0.134081758807097)*x19209))+(((-0.0225020109192911)*x19208))+(((-0.00358229604870815)*x19205))+(((2.25020109192911)*py))+(((0.358229604870815)*px))+(((-0.0225020109192911)*x19204))+(((-0.134081758807097)*x19201))+(((0.134081758807097)*x19211))+(((-0.0225020109192911)*x19206))+(((-0.00358229604870815)*x19203))+(((0.842227766698146)*x19212))+(((-0.842227766698146)*x19202))+(((-0.00358229604870815)*x19207))), ((((0.00358229604870815)*x19208))+(((0.00358229604870815)*x19206))+(((0.842227766698146)*x19209))+(((-0.0225020109192911)*x19203))+(((-0.0225020109192911)*x19207))+(((2.25020109192911)*px))+(((-1.0)*(0.358229604870815)*py))+(((-0.842227766698146)*x19201))+(((-0.134081758807097)*x19212))+(((0.134081758807097)*x19202))+(((0.00358229604870815)*x19204))+(((0.842227766698146)*x19211))+(((-0.0225020109192911)*x19205))+(((-0.134081758807097)*x19210))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x19213=((0.37429)*cj15);
IkReal x19214=((0.01)*sj15);
IkReal x19215=IKsin(j10);
IkReal x19216=IKcos(j10);
IkReal x19217=((0.01)*cj15*cj16);
IkReal x19218=((0.01)*cj15*sj16);
IkReal x19219=((0.37429)*cj16*sj15);
IkReal x19220=((0.37429)*sj15*sj16);
IkReal x19221=((1.0)*cj15*sj13);
IkReal x19222=(cj13*sj14*sj16);
IkReal x19223=(cj16*sj13*sj15);
IkReal x19224=(sj13*sj15*sj16);
IkReal x19225=((1.0)*cj13*cj14*sj15);
IkReal x19226=((1.0)*cj13*cj16*sj14);
IkReal x19227=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19228=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19229=((-1.0)*x19216);
IkReal x19230=(cj13*cj15);
IkReal x19231=(sj13*sj14*sj16);
IkReal x19232=((1.0)*cj13*cj16*sj15);
IkReal x19233=((1.0)*cj13*sj15*sj16);
IkReal x19234=((1.0)*cj14*sj13*sj15);
IkReal x19235=((1.0)*cj16*sj13*sj14);
IkReal x19236=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19237=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+(((0.069)*x19215))+((r01*x19217))+((r02*x19214))+((r00*x19218))+(((0.43342)*x19216))+(((-1.0)*r01*x19219))+(((-1.0)*r00*x19220))+((r02*x19213)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r11*x19217))+(((-1.0)*r11*x19219))+(((0.43342)*x19215))+((r10*x19218))+(((-1.0)*r10*x19220))+(((-0.069)*x19216))+((r12*x19213))+((r12*x19214)));
evalcond[2]=(((r01*x19223))+x19215+(((-1.0)*r01*x19227))+(((-1.0)*r00*x19226))+((r01*x19222))+(((-1.0)*r00*x19228))+((r00*x19224))+(((-1.0)*r02*x19221))+(((-1.0)*r02*x19225)));
evalcond[3]=((((-1.0)*r11*x19227))+((r10*x19224))+(((-1.0)*r10*x19228))+((r11*x19223))+(((-1.0)*r12*x19225))+((r11*x19222))+(((-1.0)*r12*x19221))+x19229+(((-1.0)*r10*x19226)));
evalcond[4]=(((r02*x19230))+(((-1.0)*r02*x19234))+(((-1.0)*r00*x19233))+((r01*x19231))+(((-1.0)*r01*x19232))+(((-1.0)*r00*x19235))+x19229+(((-1.0)*r00*x19237))+(((-1.0)*r01*x19236)));
evalcond[5]=((((-1.0)*r11*x19232))+(((-1.0)*r10*x19235))+(((-1.0)*x19215))+((r12*x19230))+((r11*x19231))+(((-1.0)*r10*x19233))+(((-1.0)*r10*x19237))+(((-1.0)*r11*x19236))+(((-1.0)*r12*x19234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19238=(cj15*r02);
IkReal x19239=(cj15*r12);
IkReal x19240=(r02*sj15);
IkReal x19241=(r12*sj15);
IkReal x19242=(cj15*cj16*r01);
IkReal x19243=(cj15*cj16*r11);
IkReal x19244=(cj15*r00*sj16);
IkReal x19245=(cj15*r10*sj16);
IkReal x19246=(cj16*r01*sj15);
IkReal x19247=(cj16*r11*sj15);
IkReal x19248=(r00*sj15*sj16);
IkReal x19249=(r10*sj15*sj16);
if( IKabs(((((-1.0)*(0.749723120732182)*px))+(((0.280613866858848)*x19238))+(((0.0320990151198118)*x19243))+(((0.00749723120732182)*x19240))+(((0.00749723120732182)*x19242))+(((-1.20143403691943)*x19247))+(((-1.20143403691943)*x19249))+(((0.00749723120732182)*x19244))+(((1.20143403691943)*x19239))+(((-0.280613866858848)*x19248))+(((-0.280613866858848)*x19246))+(((0.0320990151198118)*x19245))+(((0.0320990151198118)*x19241))+(((-1.0)*(3.20990151198118)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0320990151198118)*x19240))+(((0.0320990151198118)*x19242))+(((-1.20143403691943)*x19246))+(((0.280613866858848)*x19247))+(((-0.00749723120732182)*x19243))+(((0.749723120732182)*py))+(((-1.20143403691943)*x19248))+(((-0.00749723120732182)*x19245))+(((0.280613866858848)*x19249))+(((-0.00749723120732182)*x19241))+(((1.20143403691943)*x19238))+(((0.0320990151198118)*x19244))+(((-1.0)*(3.20990151198118)*px))+(((-0.280613866858848)*x19239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(0.749723120732182)*px))+(((0.280613866858848)*x19238))+(((0.0320990151198118)*x19243))+(((0.00749723120732182)*x19240))+(((0.00749723120732182)*x19242))+(((-1.20143403691943)*x19247))+(((-1.20143403691943)*x19249))+(((0.00749723120732182)*x19244))+(((1.20143403691943)*x19239))+(((-0.280613866858848)*x19248))+(((-0.280613866858848)*x19246))+(((0.0320990151198118)*x19245))+(((0.0320990151198118)*x19241))+(((-1.0)*(3.20990151198118)*py))))+IKsqr(((((0.0320990151198118)*x19240))+(((0.0320990151198118)*x19242))+(((-1.20143403691943)*x19246))+(((0.280613866858848)*x19247))+(((-0.00749723120732182)*x19243))+(((0.749723120732182)*py))+(((-1.20143403691943)*x19248))+(((-0.00749723120732182)*x19245))+(((0.280613866858848)*x19249))+(((-0.00749723120732182)*x19241))+(((1.20143403691943)*x19238))+(((0.0320990151198118)*x19244))+(((-1.0)*(3.20990151198118)*px))+(((-0.280613866858848)*x19239))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*(0.749723120732182)*px))+(((0.280613866858848)*x19238))+(((0.0320990151198118)*x19243))+(((0.00749723120732182)*x19240))+(((0.00749723120732182)*x19242))+(((-1.20143403691943)*x19247))+(((-1.20143403691943)*x19249))+(((0.00749723120732182)*x19244))+(((1.20143403691943)*x19239))+(((-0.280613866858848)*x19248))+(((-0.280613866858848)*x19246))+(((0.0320990151198118)*x19245))+(((0.0320990151198118)*x19241))+(((-1.0)*(3.20990151198118)*py))), ((((0.0320990151198118)*x19240))+(((0.0320990151198118)*x19242))+(((-1.20143403691943)*x19246))+(((0.280613866858848)*x19247))+(((-0.00749723120732182)*x19243))+(((0.749723120732182)*py))+(((-1.20143403691943)*x19248))+(((-0.00749723120732182)*x19245))+(((0.280613866858848)*x19249))+(((-0.00749723120732182)*x19241))+(((1.20143403691943)*x19238))+(((0.0320990151198118)*x19244))+(((-1.0)*(3.20990151198118)*px))+(((-0.280613866858848)*x19239))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x19250=((0.37429)*cj15);
IkReal x19251=((0.01)*sj15);
IkReal x19252=IKsin(j10);
IkReal x19253=IKcos(j10);
IkReal x19254=((0.01)*cj15*cj16);
IkReal x19255=((0.01)*cj15*sj16);
IkReal x19256=((0.37429)*cj16*sj15);
IkReal x19257=((0.37429)*sj15*sj16);
IkReal x19258=((1.0)*cj15*sj13);
IkReal x19259=(cj13*sj14*sj16);
IkReal x19260=(cj16*sj13*sj15);
IkReal x19261=(sj13*sj15*sj16);
IkReal x19262=((1.0)*cj13*cj14*sj15);
IkReal x19263=((1.0)*cj13*cj16*sj14);
IkReal x19264=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19265=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19266=(cj13*cj15);
IkReal x19267=(sj13*sj14*sj16);
IkReal x19268=((1.0)*cj13*cj16*sj15);
IkReal x19269=((1.0)*cj13*sj15*sj16);
IkReal x19270=((1.0)*cj14*sj13*sj15);
IkReal x19271=((1.0)*cj16*sj13*sj14);
IkReal x19272=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19273=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-0.069)*x19252))+((r00*x19255))+((r01*x19254))+(((-1.0)*r01*x19256))+((r02*x19251))+((r02*x19250))+(((-0.29542)*x19253))+(((-1.0)*r00*x19257)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r10*x19255))+(((-1.0)*r11*x19256))+((r12*x19250))+((r12*x19251))+(((0.069)*x19253))+(((-1.0)*r10*x19257))+(((-0.29542)*x19252))+((r11*x19254)));
evalcond[2]=(((r10*x19261))+((r11*x19259))+(((-1.0)*r10*x19263))+(((-1.0)*r12*x19262))+((r11*x19260))+(((-1.0)*r10*x19265))+(((-1.0)*r11*x19264))+(((-1.0)*r12*x19258))+x19253);
evalcond[3]=((((-1.0)*r01*x19268))+(((-1.0)*r00*x19269))+((r02*x19266))+(((-1.0)*r00*x19273))+(((-1.0)*r02*x19270))+((r01*x19267))+x19253+(((-1.0)*r01*x19272))+(((-1.0)*r00*x19271)));
evalcond[4]=((((-1.0)*r12*x19270))+(((-1.0)*r11*x19268))+((r12*x19266))+(((-1.0)*r10*x19271))+(((-1.0)*r10*x19273))+(((-1.0)*r10*x19269))+(((-1.0)*r11*x19272))+((r11*x19267))+x19252);
evalcond[5]=(((r01*x19260))+(((-1.0)*x19252))+(((-1.0)*r02*x19258))+(((-1.0)*r00*x19263))+((r00*x19261))+((r01*x19259))+(((-1.0)*r00*x19265))+(((-1.0)*r01*x19264))+(((-1.0)*r02*x19262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19274=(cj15*r02);
IkReal x19275=(cj15*r12);
IkReal x19276=(r02*sj15);
IkReal x19277=(r12*sj15);
IkReal x19278=(cj15*cj16*r01);
IkReal x19279=(cj15*cj16*r11);
IkReal x19280=(cj15*r00*sj16);
IkReal x19281=(cj15*r10*sj16);
IkReal x19282=(cj16*r01*sj15);
IkReal x19283=(cj16*r11*sj15);
IkReal x19284=(r00*sj15*sj16);
IkReal x19285=(r10*sj15*sj16);
if( IKabs(((((0.280613866858848)*x19284))+(((-0.00749723120732182)*x19278))+(((-0.00749723120732182)*x19276))+(((0.0320990151198118)*x19277))+(((0.0320990151198118)*x19279))+(((0.280613866858848)*x19282))+(((-1.20143403691943)*x19283))+(((0.749723120732182)*px))+(((-0.280613866858848)*x19274))+(((-0.00749723120732182)*x19280))+(((0.0320990151198118)*x19281))+(((1.20143403691943)*x19275))+(((-1.20143403691943)*x19285))+(((-1.0)*(3.20990151198118)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.20143403691943)*x19274))+(((-0.280613866858848)*x19285))+(((0.0320990151198118)*x19278))+(((0.00749723120732182)*x19281))+(((0.280613866858848)*x19275))+(((-1.20143403691943)*x19284))+(((0.0320990151198118)*x19280))+(((-0.280613866858848)*x19283))+(((0.0320990151198118)*x19276))+(((-1.20143403691943)*x19282))+(((0.00749723120732182)*x19277))+(((-1.0)*(3.20990151198118)*px))+(((-1.0)*(0.749723120732182)*py))+(((0.00749723120732182)*x19279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.280613866858848)*x19284))+(((-0.00749723120732182)*x19278))+(((-0.00749723120732182)*x19276))+(((0.0320990151198118)*x19277))+(((0.0320990151198118)*x19279))+(((0.280613866858848)*x19282))+(((-1.20143403691943)*x19283))+(((0.749723120732182)*px))+(((-0.280613866858848)*x19274))+(((-0.00749723120732182)*x19280))+(((0.0320990151198118)*x19281))+(((1.20143403691943)*x19275))+(((-1.20143403691943)*x19285))+(((-1.0)*(3.20990151198118)*py))))+IKsqr(((((1.20143403691943)*x19274))+(((-0.280613866858848)*x19285))+(((0.0320990151198118)*x19278))+(((0.00749723120732182)*x19281))+(((0.280613866858848)*x19275))+(((-1.20143403691943)*x19284))+(((0.0320990151198118)*x19280))+(((-0.280613866858848)*x19283))+(((0.0320990151198118)*x19276))+(((-1.20143403691943)*x19282))+(((0.00749723120732182)*x19277))+(((-1.0)*(3.20990151198118)*px))+(((-1.0)*(0.749723120732182)*py))+(((0.00749723120732182)*x19279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((0.280613866858848)*x19284))+(((-0.00749723120732182)*x19278))+(((-0.00749723120732182)*x19276))+(((0.0320990151198118)*x19277))+(((0.0320990151198118)*x19279))+(((0.280613866858848)*x19282))+(((-1.20143403691943)*x19283))+(((0.749723120732182)*px))+(((-0.280613866858848)*x19274))+(((-0.00749723120732182)*x19280))+(((0.0320990151198118)*x19281))+(((1.20143403691943)*x19275))+(((-1.20143403691943)*x19285))+(((-1.0)*(3.20990151198118)*py))), ((((1.20143403691943)*x19274))+(((-0.280613866858848)*x19285))+(((0.0320990151198118)*x19278))+(((0.00749723120732182)*x19281))+(((0.280613866858848)*x19275))+(((-1.20143403691943)*x19284))+(((0.0320990151198118)*x19280))+(((-0.280613866858848)*x19283))+(((0.0320990151198118)*x19276))+(((-1.20143403691943)*x19282))+(((0.00749723120732182)*x19277))+(((-1.0)*(3.20990151198118)*px))+(((-1.0)*(0.749723120732182)*py))+(((0.00749723120732182)*x19279))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x19286=((0.37429)*cj15);
IkReal x19287=((0.01)*sj15);
IkReal x19288=IKsin(j10);
IkReal x19289=IKcos(j10);
IkReal x19290=((0.01)*cj15*cj16);
IkReal x19291=((0.01)*cj15*sj16);
IkReal x19292=((0.37429)*cj16*sj15);
IkReal x19293=((0.37429)*sj15*sj16);
IkReal x19294=((1.0)*cj15*sj13);
IkReal x19295=(cj13*sj14*sj16);
IkReal x19296=(cj16*sj13*sj15);
IkReal x19297=(sj13*sj15*sj16);
IkReal x19298=((1.0)*cj13*cj14*sj15);
IkReal x19299=((1.0)*cj13*cj16*sj14);
IkReal x19300=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19301=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19302=(cj13*cj15);
IkReal x19303=(sj13*sj14*sj16);
IkReal x19304=((1.0)*cj13*cj16*sj15);
IkReal x19305=((1.0)*cj13*sj15*sj16);
IkReal x19306=((1.0)*cj14*sj13*sj15);
IkReal x19307=((1.0)*cj16*sj13*sj14);
IkReal x19308=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19309=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+((r00*x19291))+((r02*x19287))+((r02*x19286))+(((0.069)*x19288))+((r01*x19290))+(((-1.0)*r00*x19293))+(((-0.29542)*x19289))+(((-1.0)*r01*x19292)));
evalcond[1]=((((-1.0)*(1.0)*py))+((r10*x19291))+((r11*x19290))+((r12*x19286))+(((-1.0)*r10*x19293))+((r12*x19287))+(((-1.0)*r11*x19292))+(((-0.069)*x19289))+(((-0.29542)*x19288)));
evalcond[2]=((((-1.0)*r02*x19298))+((r01*x19296))+((r00*x19297))+((r01*x19295))+(((-1.0)*r02*x19294))+(((-1.0)*r00*x19301))+x19288+(((-1.0)*r01*x19300))+(((-1.0)*r00*x19299)));
evalcond[3]=((((-1.0)*r01*x19304))+((r01*x19303))+(((-1.0)*r02*x19306))+(((-1.0)*r00*x19309))+((r02*x19302))+(((-1.0)*r01*x19308))+(((-1.0)*r00*x19307))+x19289+(((-1.0)*r00*x19305)));
evalcond[4]=((((-1.0)*r11*x19304))+(((-1.0)*r10*x19307))+((r11*x19303))+(((-1.0)*r10*x19305))+(((-1.0)*r12*x19306))+((r12*x19302))+(((-1.0)*r11*x19308))+x19288+(((-1.0)*r10*x19309)));
evalcond[5]=((((-1.0)*x19289))+(((-1.0)*r12*x19298))+(((-1.0)*r10*x19301))+(((-1.0)*r11*x19300))+((r10*x19297))+(((-1.0)*r12*x19294))+(((-1.0)*r10*x19299))+((r11*x19296))+((r11*x19295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19310=((69.0)*sj11);
IkReal x19311=((364.42)*cj11*sj11);
IkReal x19312=((69.0)*cj12*(cj11*cj11));
IkReal x19313=((69.0)*cj14);
IkReal x19314=(cj16*r10);
IkReal x19315=(r11*sj16);
IkReal x19316=(r12*sj14*sj15);
IkReal x19317=(cj16*r11);
IkReal x19318=((69.0)*cj15*sj14);
IkReal x19319=(r10*sj16);
IkReal x19320=(((x19318*x19319))+(((-1.0)*x19313*x19314))+((x19313*x19315))+((x19317*x19318))+(((69.0)*x19316)));
IkReal x19321=((1000.0)*px);
IkReal x19322=((374.29)*cj15);
IkReal x19323=(cj12*r02);
IkReal x19324=((10.0)*sj15);
IkReal x19325=((364.42)*cj11*cj14);
IkReal x19326=(cj16*r01);
IkReal x19327=((10.0)*cj12*cj15);
IkReal x19328=(r00*sj16);
IkReal x19329=((374.29)*cj12*sj15);
IkReal x19330=((364.42)*cj11*cj15*sj14);
IkReal x19331=((69.0)*cj12*cj14*sj11);
IkReal x19332=((69.0)*cj12*cj15*sj11*sj14);
IkReal x19333=(r02*sj11);
IkReal x19334=((10.0)*cj15*sj11);
IkReal x19335=((374.29)*sj11*sj15);
CheckValue<IkReal> x19336=IKPowWithIntegerCheck((((sj12*x19312))+((sj12*x19311))+((sj12*x19310))),-1);
if(!x19336.valid){
continue;
}
CheckValue<IkReal> x19337=IKPowWithIntegerCheck((x19311+x19312+x19310),-1);
if(!x19337.valid){
continue;
}
if( IKabs(((x19336.value)*((((x19327*x19328))+(((-1.0)*x19317*x19332))+((x19322*x19323))+(((-1.0)*x19315*x19331))+((x19323*x19324))+(((-1.0)*cj12*x19321))+(((364.42)*cj11*x19316))+((x19326*x19327))+((x19317*x19330))+(((-1.0)*x19314*x19325))+(((-69.0)*cj12*sj11*x19316))+((x19315*x19325))+((x19319*x19330))+((x19314*x19331))+(((-1.0)*x19326*x19329))+x19320+(((-1.0)*x19328*x19329))+(((-1.0)*x19319*x19332)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x19337.value)*((((sj11*x19321))+(((-1.0)*x19326*x19334))+((x19328*x19335))+((x19326*x19335))+(((-1.0)*x19328*x19334))+x19320+(((-1.0)*x19324*x19333))+(((-1.0)*x19322*x19333)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x19336.value)*((((x19327*x19328))+(((-1.0)*x19317*x19332))+((x19322*x19323))+(((-1.0)*x19315*x19331))+((x19323*x19324))+(((-1.0)*cj12*x19321))+(((364.42)*cj11*x19316))+((x19326*x19327))+((x19317*x19330))+(((-1.0)*x19314*x19325))+(((-69.0)*cj12*sj11*x19316))+((x19315*x19325))+((x19319*x19330))+((x19314*x19331))+(((-1.0)*x19326*x19329))+x19320+(((-1.0)*x19328*x19329))+(((-1.0)*x19319*x19332))))))+IKsqr(((x19337.value)*((((sj11*x19321))+(((-1.0)*x19326*x19334))+((x19328*x19335))+((x19326*x19335))+(((-1.0)*x19328*x19334))+x19320+(((-1.0)*x19324*x19333))+(((-1.0)*x19322*x19333))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x19336.value)*((((x19327*x19328))+(((-1.0)*x19317*x19332))+((x19322*x19323))+(((-1.0)*x19315*x19331))+((x19323*x19324))+(((-1.0)*cj12*x19321))+(((364.42)*cj11*x19316))+((x19326*x19327))+((x19317*x19330))+(((-1.0)*x19314*x19325))+(((-69.0)*cj12*sj11*x19316))+((x19315*x19325))+((x19319*x19330))+((x19314*x19331))+(((-1.0)*x19326*x19329))+x19320+(((-1.0)*x19328*x19329))+(((-1.0)*x19319*x19332))))), ((x19337.value)*((((sj11*x19321))+(((-1.0)*x19326*x19334))+((x19328*x19335))+((x19326*x19335))+(((-1.0)*x19328*x19334))+x19320+(((-1.0)*x19324*x19333))+(((-1.0)*x19322*x19333))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19338=IKcos(j10);
IkReal x19339=(cj14*cj16);
IkReal x19340=((1.0)*cj14*sj16);
IkReal x19341=((1.0)*sj14*sj15);
IkReal x19342=IKsin(j10);
IkReal x19343=((1.0)*cj15*cj16*sj14);
IkReal x19344=((1.0)*cj15*sj14*sj16);
IkReal x19345=((1.0)*x19342);
IkReal x19346=(cj12*x19345);
IkReal x19347=(sj12*x19338);
IkReal x19348=(cj13*cj15);
IkReal x19349=(cj11*x19338);
IkReal x19350=(sj13*sj14*sj16);
IkReal x19351=((1.0)*cj13*cj16*sj15);
IkReal x19352=((1.0)*cj13*sj15*sj16);
IkReal x19353=((1.0)*cj14*sj13*sj15);
IkReal x19354=((1.0)*cj16*sj13*sj14);
IkReal x19355=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19356=((1.0)*cj14*cj15*sj13*sj16);
IkReal x19357=(cj11*x19342);
IkReal x19358=((0.37429)*cj15);
IkReal x19359=((0.01)*sj15);
IkReal x19360=((0.069)*x19342);
IkReal x19361=((0.01)*cj15*cj16);
IkReal x19362=((0.01)*cj15*sj16);
IkReal x19363=((0.37429)*cj16*sj15);
IkReal x19364=((0.37429)*sj15*sj16);
IkReal x19365=(cj12*sj11*x19338);
IkReal x19366=((1.0)*cj15*sj13);
IkReal x19367=(cj13*sj14*sj16);
IkReal x19368=(cj16*sj13*sj15);
IkReal x19369=(sj13*sj15*sj16);
IkReal x19370=((1.0)*cj13*cj14*sj15);
IkReal x19371=((1.0)*cj13*cj16*sj14);
IkReal x19372=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19373=((1.0)*cj13*cj14*cj15*sj16);
evalcond[0]=((((-1.0)*r11*x19340))+(((-1.0)*r11*x19343))+((r10*x19339))+(((-1.0)*r12*x19341))+((sj11*sj12*x19342))+(((-1.0)*r10*x19344))+((cj12*x19338)));
evalcond[1]=(((r00*x19339))+(((-1.0)*r02*x19341))+(((-1.0)*r00*x19344))+(((-1.0)*r01*x19343))+(((-1.0)*r01*x19340))+(((-1.0)*x19346))+((sj11*x19347)));
evalcond[2]=((((-1.0)*r00*x19354))+((r01*x19350))+(((-1.0)*r00*x19356))+(((-1.0)*r01*x19351))+(((-1.0)*r01*x19355))+(((-1.0)*x19349))+(((-1.0)*r02*x19353))+((r02*x19348))+(((-1.0)*r00*x19352)));
evalcond[3]=((((-1.0)*x19357))+(((-1.0)*r10*x19354))+(((-1.0)*r10*x19356))+((r12*x19348))+((r11*x19350))+(((-1.0)*r12*x19353))+(((-1.0)*r11*x19355))+(((-1.0)*r11*x19351))+(((-1.0)*r10*x19352)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r02*x19358))+(((-0.069)*x19365))+((r02*x19359))+((r01*x19361))+((r00*x19362))+(((0.069)*x19338))+(((0.36442)*x19349))+(((-1.0)*sj12*x19360))+(((-1.0)*r00*x19364))+(((-1.0)*r01*x19363)));
evalcond[5]=(((r12*x19358))+x19360+(((-1.0)*(1.0)*py))+(((0.36442)*x19357))+(((0.069)*x19347))+((r11*x19361))+(((-1.0)*r10*x19364))+(((-1.0)*r11*x19363))+(((-1.0)*cj12*sj11*x19360))+((r10*x19362))+((r12*x19359)));
evalcond[6]=((((-1.0)*r12*x19366))+(((-1.0)*r11*x19372))+(((-1.0)*r12*x19370))+((r10*x19369))+(((-1.0)*r10*x19373))+((r11*x19368))+(((-1.0)*r10*x19371))+(((-1.0)*sj11*x19346))+x19347+((r11*x19367)));
evalcond[7]=((((-1.0)*sj12*x19345))+(((-1.0)*r02*x19370))+((r00*x19369))+((r01*x19367))+((r01*x19368))+(((-1.0)*r01*x19372))+(((-1.0)*r00*x19373))+(((-1.0)*x19365))+(((-1.0)*r00*x19371))+(((-1.0)*r02*x19366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19374=((364.42)*cj11);
IkReal x19375=((1000.0)*py);
IkReal x19376=((374.29)*cj15);
IkReal x19377=(cj12*r12);
IkReal x19378=((10.0)*sj15);
IkReal x19379=(cj16*r11);
IkReal x19380=((10.0)*cj12*cj15);
IkReal x19381=(r10*sj16);
IkReal x19382=((374.29)*cj12*sj15);
IkReal x19383=((69.0)*cj14);
IkReal x19384=(cj16*r10);
IkReal x19385=(x19383*x19384);
IkReal x19386=(r11*sj16);
IkReal x19387=(x19383*x19386);
IkReal x19388=(r12*sj14*sj15);
IkReal x19389=((69.0)*x19388);
IkReal x19390=((69.0)*cj15*sj14);
IkReal x19391=(x19379*x19390);
IkReal x19392=(x19381*x19390);
IkReal x19393=((364.42)*cj11*cj14);
IkReal x19394=(r12*sj11*sj12);
IkReal x19395=((364.42)*cj11*cj15*sj14);
IkReal x19396=((69.0)*cj12*cj14*sj11);
IkReal x19397=((10.0)*cj15*sj11*sj12);
IkReal x19398=((374.29)*sj11*sj12*sj15);
IkReal x19399=((69.0)*cj12*cj15*sj11*sj14);
CheckValue<IkReal> x19400 = IKatan2WithCheck(IkReal(((((-1.0)*x19380*x19381))+(((-1.0)*sj12*x19389))+(((-1.0)*x19377*x19378))+(((-1.0)*sj12*x19387))+((x19381*x19382))+(((-1.0)*sj12*x19392))+((sj12*x19385))+((cj12*x19375))+(((-1.0)*x19379*x19380))+((x19379*x19382))+(((-1.0)*x19376*x19377))+(((-1.0)*sj12*x19391)))),IkReal(((((-1.0)*x19384*x19393))+(((-1.0)*x19385))+x19391+x19392+((x19384*x19396))+((x19378*x19394))+(((-1.0)*sj11*sj12*x19375))+((x19381*x19395))+(((-1.0)*x19379*x19399))+(((-1.0)*x19381*x19398))+((x19379*x19397))+(((-69.0)*cj12*sj11*x19388))+(((-1.0)*x19379*x19398))+(((-1.0)*x19381*x19399))+((x19376*x19394))+((x19374*x19388))+((x19381*x19397))+((x19386*x19393))+((x19379*x19395))+x19389+x19387+(((-1.0)*x19386*x19396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x19400.valid){
continue;
}
CheckValue<IkReal> x19401=IKPowWithIntegerCheck(IKsign(((((-1.0)*(69.0)*sj11))+(((69.0)*cj12))+((cj12*x19374)))),-1);
if(!x19401.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x19400.value)+(((1.5707963267949)*(x19401.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19402=IKcos(j10);
IkReal x19403=(cj14*cj16);
IkReal x19404=((1.0)*cj14*sj16);
IkReal x19405=((1.0)*sj14*sj15);
IkReal x19406=IKsin(j10);
IkReal x19407=((1.0)*cj15*cj16*sj14);
IkReal x19408=((1.0)*cj15*sj14*sj16);
IkReal x19409=((1.0)*x19406);
IkReal x19410=(cj12*x19409);
IkReal x19411=(sj12*x19402);
IkReal x19412=(cj13*cj15);
IkReal x19413=(cj11*x19402);
IkReal x19414=(sj13*sj14*sj16);
IkReal x19415=((1.0)*cj13*cj16*sj15);
IkReal x19416=((1.0)*cj13*sj15*sj16);
IkReal x19417=((1.0)*cj14*sj13*sj15);
IkReal x19418=((1.0)*cj16*sj13*sj14);
IkReal x19419=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19420=((1.0)*cj14*cj15*sj13*sj16);
IkReal x19421=(cj11*x19406);
IkReal x19422=((0.37429)*cj15);
IkReal x19423=((0.01)*sj15);
IkReal x19424=((0.069)*x19406);
IkReal x19425=((0.01)*cj15*cj16);
IkReal x19426=((0.01)*cj15*sj16);
IkReal x19427=((0.37429)*cj16*sj15);
IkReal x19428=((0.37429)*sj15*sj16);
IkReal x19429=(cj12*sj11*x19402);
IkReal x19430=((1.0)*cj15*sj13);
IkReal x19431=(cj13*sj14*sj16);
IkReal x19432=(cj16*sj13*sj15);
IkReal x19433=(sj13*sj15*sj16);
IkReal x19434=((1.0)*cj13*cj14*sj15);
IkReal x19435=((1.0)*cj13*cj16*sj14);
IkReal x19436=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19437=((1.0)*cj13*cj14*cj15*sj16);
evalcond[0]=((((-1.0)*r11*x19407))+(((-1.0)*r11*x19404))+((cj12*x19402))+(((-1.0)*r12*x19405))+((sj11*sj12*x19406))+((r10*x19403))+(((-1.0)*r10*x19408)));
evalcond[1]=((((-1.0)*x19410))+(((-1.0)*r01*x19407))+(((-1.0)*r01*x19404))+(((-1.0)*r00*x19408))+(((-1.0)*r02*x19405))+((sj11*x19411))+((r00*x19403)));
evalcond[2]=((((-1.0)*r02*x19417))+(((-1.0)*r01*x19415))+((r01*x19414))+(((-1.0)*r01*x19419))+(((-1.0)*r00*x19418))+(((-1.0)*r00*x19416))+(((-1.0)*x19413))+(((-1.0)*r00*x19420))+((r02*x19412)));
evalcond[3]=((((-1.0)*r12*x19417))+(((-1.0)*r11*x19415))+(((-1.0)*r10*x19418))+(((-1.0)*r10*x19416))+((r11*x19414))+((r12*x19412))+(((-1.0)*r11*x19419))+(((-1.0)*r10*x19420))+(((-1.0)*x19421)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r02*x19423))+(((-1.0)*sj12*x19424))+((r02*x19422))+(((-1.0)*r01*x19427))+((r01*x19425))+(((-1.0)*r00*x19428))+((r00*x19426))+(((-0.069)*x19429))+(((0.36442)*x19413))+(((0.069)*x19402)));
evalcond[5]=(x19424+(((-1.0)*(1.0)*py))+(((0.36442)*x19421))+(((-1.0)*cj12*sj11*x19424))+((r10*x19426))+(((-1.0)*r10*x19428))+((r12*x19423))+(((0.069)*x19411))+((r12*x19422))+((r11*x19425))+(((-1.0)*r11*x19427)));
evalcond[6]=(x19411+(((-1.0)*r11*x19436))+(((-1.0)*r12*x19430))+((r11*x19432))+((r11*x19431))+(((-1.0)*r10*x19435))+(((-1.0)*r12*x19434))+((r10*x19433))+(((-1.0)*r10*x19437))+(((-1.0)*sj11*x19410)));
evalcond[7]=((((-1.0)*r02*x19434))+(((-1.0)*r02*x19430))+((r01*x19431))+((r00*x19433))+(((-1.0)*r01*x19436))+(((-1.0)*x19429))+(((-1.0)*sj12*x19409))+(((-1.0)*r00*x19435))+((r01*x19432))+(((-1.0)*r00*x19437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19438=cj11*cj11;
IkReal x19439=(cj12*cj14*cj16);
IkReal x19440=((1.0)*r01);
IkReal x19441=(cj12*cj14*sj16);
IkReal x19442=(cj12*sj14*sj15);
IkReal x19443=(cj14*sj11*sj12*sj16);
IkReal x19444=(sj11*sj12*sj14*sj15);
IkReal x19445=(cj12*cj15*cj16*sj14);
IkReal x19446=((1.0)*r00);
IkReal x19447=(cj12*cj15*sj14*sj16);
IkReal x19448=((1.0)*r10);
IkReal x19449=(cj14*cj16*sj11*sj12);
IkReal x19450=(cj15*cj16*sj11*sj12*sj14);
IkReal x19451=(cj15*sj11*sj12*sj14*sj16);
CheckValue<IkReal> x19452 = IKatan2WithCheck(IkReal((((r10*x19451))+((r11*x19450))+(((-1.0)*r02*x19442))+(((-1.0)*x19440*x19445))+(((-1.0)*x19448*x19449))+(((-1.0)*x19446*x19447))+((r11*x19443))+(((-1.0)*x19440*x19441))+((r00*x19439))+((r12*x19444)))),IkReal((((r11*x19445))+(((-1.0)*x19446*x19449))+((r10*x19447))+((r02*x19444))+((r01*x19450))+((r01*x19443))+(((-1.0)*x19439*x19448))+((r00*x19451))+((r12*x19442))+((r11*x19441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x19452.valid){
continue;
}
CheckValue<IkReal> x19453=IKPowWithIntegerCheck(IKsign(((1.0)+((x19438*(cj12*cj12)))+(((-1.0)*x19438)))),-1);
if(!x19453.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x19452.value)+(((1.5707963267949)*(x19453.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19454=IKcos(j10);
IkReal x19455=(cj14*cj16);
IkReal x19456=((1.0)*cj14*sj16);
IkReal x19457=((1.0)*sj14*sj15);
IkReal x19458=IKsin(j10);
IkReal x19459=((1.0)*cj15*cj16*sj14);
IkReal x19460=((1.0)*cj15*sj14*sj16);
IkReal x19461=((1.0)*x19458);
IkReal x19462=(cj12*x19461);
IkReal x19463=(sj12*x19454);
IkReal x19464=(cj13*cj15);
IkReal x19465=(cj11*x19454);
IkReal x19466=(sj13*sj14*sj16);
IkReal x19467=((1.0)*cj13*cj16*sj15);
IkReal x19468=((1.0)*cj13*sj15*sj16);
IkReal x19469=((1.0)*cj14*sj13*sj15);
IkReal x19470=((1.0)*cj16*sj13*sj14);
IkReal x19471=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19472=((1.0)*cj14*cj15*sj13*sj16);
IkReal x19473=(cj11*x19458);
IkReal x19474=((0.37429)*cj15);
IkReal x19475=((0.01)*sj15);
IkReal x19476=((0.069)*x19458);
IkReal x19477=((0.01)*cj15*cj16);
IkReal x19478=((0.01)*cj15*sj16);
IkReal x19479=((0.37429)*cj16*sj15);
IkReal x19480=((0.37429)*sj15*sj16);
IkReal x19481=(cj12*sj11*x19454);
IkReal x19482=((1.0)*cj15*sj13);
IkReal x19483=(cj13*sj14*sj16);
IkReal x19484=(cj16*sj13*sj15);
IkReal x19485=(sj13*sj15*sj16);
IkReal x19486=((1.0)*cj13*cj14*sj15);
IkReal x19487=((1.0)*cj13*cj16*sj14);
IkReal x19488=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19489=((1.0)*cj13*cj14*cj15*sj16);
evalcond[0]=(((sj11*sj12*x19458))+(((-1.0)*r10*x19460))+((cj12*x19454))+((r10*x19455))+(((-1.0)*r12*x19457))+(((-1.0)*r11*x19456))+(((-1.0)*r11*x19459)));
evalcond[1]=((((-1.0)*r01*x19456))+(((-1.0)*x19462))+(((-1.0)*r01*x19459))+((r00*x19455))+((sj11*x19463))+(((-1.0)*r00*x19460))+(((-1.0)*r02*x19457)));
evalcond[2]=((((-1.0)*r00*x19468))+(((-1.0)*r02*x19469))+(((-1.0)*x19465))+((r02*x19464))+((r01*x19466))+(((-1.0)*r00*x19470))+(((-1.0)*r01*x19467))+(((-1.0)*r00*x19472))+(((-1.0)*r01*x19471)));
evalcond[3]=(((r12*x19464))+((r11*x19466))+(((-1.0)*r11*x19467))+(((-1.0)*x19473))+(((-1.0)*r10*x19468))+(((-1.0)*r11*x19471))+(((-1.0)*r10*x19470))+(((-1.0)*r12*x19469))+(((-1.0)*r10*x19472)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.069)*x19454))+(((-1.0)*r01*x19479))+((r01*x19477))+(((-0.069)*x19481))+(((0.36442)*x19465))+((r02*x19474))+((r02*x19475))+(((-1.0)*r00*x19480))+((r00*x19478))+(((-1.0)*sj12*x19476)));
evalcond[5]=((((0.069)*x19463))+((r10*x19478))+((r12*x19474))+(((-1.0)*(1.0)*py))+((r12*x19475))+((r11*x19477))+(((-1.0)*r11*x19479))+(((-1.0)*r10*x19480))+(((0.36442)*x19473))+(((-1.0)*cj12*sj11*x19476))+x19476);
evalcond[6]=((((-1.0)*r12*x19482))+(((-1.0)*r10*x19489))+((r11*x19483))+(((-1.0)*r12*x19486))+((r11*x19484))+((r10*x19485))+(((-1.0)*r10*x19487))+(((-1.0)*r11*x19488))+x19463+(((-1.0)*sj11*x19462)));
evalcond[7]=(((r01*x19484))+(((-1.0)*r02*x19486))+(((-1.0)*r00*x19489))+(((-1.0)*sj12*x19461))+(((-1.0)*r02*x19482))+(((-1.0)*x19481))+((r01*x19483))+(((-1.0)*r01*x19488))+((r00*x19485))+(((-1.0)*r00*x19487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x19490=r21*r21;
IkReal x19491=((1.0)*sj13);
IkReal x19492=(x19490*x19491);
IkReal x19493=r22*r22;
IkReal x19494=((2.0)*cj16*sj13);
IkReal x19495=(r20*r21*sj16*x19494);
IkReal x19496=cj15*cj15;
IkReal x19497=(sj13*x19496);
IkReal x19498=cj16*cj16;
IkReal x19499=(x19490*x19498);
IkReal x19500=r20*r20;
IkReal x19501=((1.0)*sj13*x19500);
IkReal x19502=(x19498*x19500);
IkReal x19503=(r21*sj11);
IkReal x19504=((1.0)*r20*sj11);
IkReal x19505=(cj15*sj16);
IkReal x19506=(cj13*r21*r22);
IkReal x19507=(r22*sj15);
IkReal x19508=((1.0)*cj15*cj16);
IkReal x19509=(cj13*r20*r22);
IkReal x19510=(cj16*sj16);
IkReal x19511=(cj13*sj15*x19500);
IkReal x19512=((1.0)*cj11*r21*sj12*sj13);
IkReal x19513=(cj11*r20*sj12);
IkReal x19514=(cj13*r20*r21*sj15);
IkReal x19515=(cj16*x19506);
IkReal x19516=(sj16*x19509);
IkReal x19517=((1.0)*cj13*cj15*sj15);
IkReal x19518=((2.0)*x19496);
CheckValue<IkReal> x19519=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21*r22*sj15*x19494))+x19495+(((-1.0)*x19496*x19501))+((sj13*x19499))+((x19493*x19497))+(((-2.0)*cj15*r20*r22*sj13*sj15*sj16))+(((-1.0)*x19495*x19496))+(((-1.0)*x19492*x19496*x19498))+(((-1.0)*x19492))+(((-1.0)*x19491*x19493))+((x19497*x19502))+(((-1.0)*x19498*x19501)))),-1);
if(!x19519.valid){
continue;
}
CheckValue<IkReal> x19520 = IKatan2WithCheck(IkReal(((((-1.0)*cj13*r20*r21*sj15))+(((-1.0)*cj15*cj16*x19512))+(((-1.0)*cj11*sj12*sj13*x19507))+(((-1.0)*cj16*x19504))+(((-1.0)*cj13*sj15*x19490*x19510))+((x19505*x19506))+(((-1.0)*cj15*sj13*sj16*x19513))+(((-1.0)*x19508*x19509))+(((2.0)*x19498*x19514))+((x19510*x19511))+((sj16*x19503)))),IkReal(((((-1.0)*x19515*x19518))+((cj13*cj15*sj15*x19499))+(((-1.0)*x19503*x19508))+(((-1.0)*x19516*x19518))+((cj15*x19511))+(((-1.0)*x19504*x19505))+((cj16*sj13*x19513))+(((-1.0)*x19502*x19517))+(((-1.0)*sj11*x19507))+(((2.0)*cj15*cj16*sj16*x19514))+(((-1.0)*x19493*x19517))+(((-1.0)*sj16*x19512))+x19516+x19515)),IKFAST_ATAN2_MAGTHRESH);
if(!x19520.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x19519.value)))+(x19520.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break;
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x19521=IKcos(j14);
IkReal x19522=(cj16*r20);
IkReal x19523=IKsin(j14);
IkReal x19524=(cj16*r21);
IkReal x19525=((1.0)*cj15*x19523);
IkReal x19526=(r20*sj16);
IkReal x19527=(cj15*r22);
IkReal x19528=((1.0)*cj13*sj15);
IkReal x19529=(r21*sj16*x19523);
IkReal x19530=(r22*sj15);
IkReal x19531=((1.0)*cj15*sj13*x19521);
IkReal x19532=(sj13*sj15);
IkReal x19533=((1.0)*cj13*cj15*x19521);
evalcond[0]=((((-1.0)*r21*sj16*x19521))+(((-1.0)*r22*sj15*x19523))+(((-1.0)*x19525*x19526))+(((-1.0)*x19524*x19525))+((x19521*x19522))+((cj11*sj12)));
evalcond[1]=((((-1.0)*sj13*x19521*x19530))+(((-1.0)*sj13*x19522*x19523))+(((-1.0)*x19526*x19528))+(((-1.0)*x19526*x19531))+((cj13*x19527))+(((-1.0)*x19524*x19531))+sj11+((sj13*x19529))+(((-1.0)*x19524*x19528)));
evalcond[2]=(((x19526*x19532))+(((-1.0)*sj13*x19527))+((cj13*x19529))+(((-1.0)*x19524*x19533))+((x19524*x19532))+(((-1.0)*cj13*x19521*x19530))+(((-1.0)*(1.0)*cj11*cj12))+(((-1.0)*x19526*x19533))+(((-1.0)*cj13*cj16*r20*x19523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10eval[2];
IkReal x19534=cj11*cj11;
IkReal x19535=((1.0)+((x19534*(cj12*cj12)))+(((-1.0)*x19534)));
j10eval[0]=x19535;
j10eval[1]=IKsign(x19535);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x19536=(cj11*cj12);
j10eval[0]=((((5.28144927536232)*x19536))+cj12+(((-1.0)*(1.0)*sj11)));
j10eval[1]=IKsign(((((364.42)*x19536))+(((-1.0)*(69.0)*sj11))+(((69.0)*cj12))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x19537=(sj11*sj12);
IkReal x19538=((5.28144927536232)*cj11);
IkReal x19539=(cj12*(cj11*cj11));
j10eval[0]=(((sj12*x19539))+x19537+((x19537*x19538)));
j10eval[1]=(((sj11*x19538))+x19539+sj11);
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19540=(cj14*cj16);
IkReal x19541=((1.0)*r01);
IkReal x19542=(cj14*sj16);
IkReal x19543=(sj14*sj15);
IkReal x19544=(cj15*cj16*sj14);
IkReal x19545=(cj15*sj14*sj16);
if( IKabs(((((-1.0)*x19541*x19544))+(((-1.0)*r00*x19545))+((r00*x19540))+(((-1.0)*x19541*x19542))+(((-1.0)*r02*x19543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x19542))+(((-1.0)*r10*x19540))+((r11*x19544))+((r10*x19545))+((r12*x19543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x19541*x19544))+(((-1.0)*r00*x19545))+((r00*x19540))+(((-1.0)*x19541*x19542))+(((-1.0)*r02*x19543))))+IKsqr((((r11*x19542))+(((-1.0)*r10*x19540))+((r11*x19544))+((r10*x19545))+((r12*x19543))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*x19541*x19544))+(((-1.0)*r00*x19545))+((r00*x19540))+(((-1.0)*x19541*x19542))+(((-1.0)*r02*x19543))), (((r11*x19542))+(((-1.0)*r10*x19540))+((r11*x19544))+((r10*x19545))+((r12*x19543))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19546=IKcos(j10);
IkReal x19547=(cj14*cj16);
IkReal x19548=((1.0)*cj14*sj16);
IkReal x19549=((1.0)*sj14*sj15);
IkReal x19550=((1.0)*cj15*cj16*sj14);
IkReal x19551=((1.0)*cj15*sj14*sj16);
IkReal x19552=IKsin(j10);
IkReal x19553=((1.0)*x19552);
IkReal x19554=((0.37429)*cj15);
IkReal x19555=((0.01)*sj15);
IkReal x19556=((0.069)*x19546);
IkReal x19557=((0.36442)*cj11);
IkReal x19558=((0.01)*cj15*cj16);
IkReal x19559=((0.01)*cj15*sj16);
IkReal x19560=((0.37429)*cj16*sj15);
IkReal x19561=((0.37429)*sj15*sj16);
IkReal x19562=((0.069)*x19552);
IkReal x19563=((1.0)*cj15*sj13);
IkReal x19564=(cj13*sj14*sj16);
IkReal x19565=(cj16*sj13*sj15);
IkReal x19566=(sj13*sj15*sj16);
IkReal x19567=((1.0)*cj13*cj14*sj15);
IkReal x19568=((1.0)*cj13*cj16*sj14);
IkReal x19569=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19570=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19571=((1.0)*x19546);
IkReal x19572=(cj13*cj15);
IkReal x19573=(sj13*sj14*sj16);
IkReal x19574=((1.0)*cj13*cj16*sj15);
IkReal x19575=((1.0)*cj13*sj15*sj16);
IkReal x19576=((1.0)*cj14*sj13*sj15);
IkReal x19577=((1.0)*cj16*sj13*sj14);
IkReal x19578=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19579=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=(x19546+(((-1.0)*r11*x19550))+((r10*x19547))+(((-1.0)*r12*x19549))+(((-1.0)*r10*x19551))+(((-1.0)*r11*x19548)));
evalcond[1]=((((-1.0)*r02*x19549))+(((-1.0)*r01*x19550))+((r00*x19547))+(((-1.0)*x19553))+(((-1.0)*r00*x19551))+(((-1.0)*r01*x19548)));
evalcond[2]=((((-1.0)*(1.0)*px))+((r01*x19558))+((r02*x19555))+((r02*x19554))+(((-1.0)*sj11*x19556))+x19556+((x19546*x19557))+(((-1.0)*r01*x19560))+(((-1.0)*r00*x19561))+((r00*x19559)));
evalcond[3]=(((r11*x19558))+(((-1.0)*r10*x19561))+(((-1.0)*(1.0)*py))+((r10*x19559))+(((-1.0)*r11*x19560))+x19562+((x19552*x19557))+((r12*x19555))+(((-1.0)*sj11*x19562))+((r12*x19554)));
evalcond[4]=(((r10*x19566))+(((-1.0)*r12*x19563))+(((-1.0)*sj11*x19553))+((r11*x19565))+((r11*x19564))+(((-1.0)*r12*x19567))+(((-1.0)*r10*x19568))+(((-1.0)*r10*x19570))+(((-1.0)*r11*x19569)));
evalcond[5]=((((-1.0)*r02*x19567))+((r01*x19565))+((r00*x19566))+(((-1.0)*r01*x19569))+((r01*x19564))+(((-1.0)*r00*x19568))+(((-1.0)*r02*x19563))+(((-1.0)*r00*x19570))+(((-1.0)*sj11*x19571)));
evalcond[6]=((((-1.0)*r00*x19577))+(((-1.0)*r00*x19575))+((r02*x19572))+(((-1.0)*r01*x19578))+((r01*x19573))+(((-1.0)*r00*x19579))+(((-1.0)*cj11*x19571))+(((-1.0)*r01*x19574))+(((-1.0)*r02*x19576)));
evalcond[7]=(((r12*x19572))+((r11*x19573))+(((-1.0)*r11*x19574))+(((-1.0)*r10*x19579))+(((-1.0)*r10*x19577))+(((-1.0)*r11*x19578))+(((-1.0)*r12*x19576))+(((-1.0)*r10*x19575))+(((-1.0)*cj11*x19553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19580=(cj14*sj16);
IkReal x19581=(sj14*sj15);
IkReal x19582=(cj14*cj16);
IkReal x19583=(cj15*cj16*sj14);
IkReal x19584=(cj15*sj14*sj16);
IkReal x19585=((1.0)*r11);
if( IKabs((((r01*x19580))+((r02*x19581))+(((-1.0)*r00*x19582))+((r00*x19584))+((r01*x19583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x19580*x19585))+((r10*x19582))+(((-1.0)*x19583*x19585))+(((-1.0)*r10*x19584))+(((-1.0)*r12*x19581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x19580))+((r02*x19581))+(((-1.0)*r00*x19582))+((r00*x19584))+((r01*x19583))))+IKsqr(((((-1.0)*x19580*x19585))+((r10*x19582))+(((-1.0)*x19583*x19585))+(((-1.0)*r10*x19584))+(((-1.0)*r12*x19581))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x19580))+((r02*x19581))+(((-1.0)*r00*x19582))+((r00*x19584))+((r01*x19583))), ((((-1.0)*x19580*x19585))+((r10*x19582))+(((-1.0)*x19583*x19585))+(((-1.0)*r10*x19584))+(((-1.0)*r12*x19581))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19586=IKsin(j10);
IkReal x19587=(cj14*cj16);
IkReal x19588=((1.0)*cj14*sj16);
IkReal x19589=((1.0)*sj14*sj15);
IkReal x19590=((1.0)*cj15*cj16*sj14);
IkReal x19591=((1.0)*cj15*sj14*sj16);
IkReal x19592=IKcos(j10);
IkReal x19593=((1.0)*x19592);
IkReal x19594=((0.37429)*cj15);
IkReal x19595=((0.01)*sj15);
IkReal x19596=(sj11*x19592);
IkReal x19597=((0.01)*cj15*cj16);
IkReal x19598=((0.01)*cj15*sj16);
IkReal x19599=((0.37429)*cj16*sj15);
IkReal x19600=((0.37429)*sj15*sj16);
IkReal x19601=(cj11*x19586);
IkReal x19602=(sj11*x19586);
IkReal x19603=((1.0)*cj15*sj13);
IkReal x19604=(cj13*sj14*sj16);
IkReal x19605=(cj16*sj13*sj15);
IkReal x19606=(sj13*sj15*sj16);
IkReal x19607=((1.0)*cj13*cj14*sj15);
IkReal x19608=((1.0)*cj13*cj16*sj14);
IkReal x19609=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19610=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19611=(cj13*cj15);
IkReal x19612=(sj13*sj14*sj16);
IkReal x19613=((1.0)*cj13*cj16*sj15);
IkReal x19614=((1.0)*cj13*sj15*sj16);
IkReal x19615=((1.0)*cj14*sj13*sj15);
IkReal x19616=((1.0)*cj16*sj13*sj14);
IkReal x19617=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19618=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*r02*x19589))+x19586+(((-1.0)*r01*x19590))+(((-1.0)*r00*x19591))+(((-1.0)*r01*x19588))+((r00*x19587)));
evalcond[1]=(((r10*x19587))+(((-1.0)*r12*x19589))+(((-1.0)*r11*x19588))+(((-1.0)*r10*x19591))+(((-1.0)*r11*x19590))+(((-1.0)*x19593)));
evalcond[2]=((((-1.0)*(1.0)*px))+((r02*x19595))+(((0.36442)*cj11*x19592))+((r01*x19597))+(((0.069)*x19596))+((r00*x19598))+(((-1.0)*r00*x19600))+(((-1.0)*r01*x19599))+((r02*x19594))+(((0.069)*x19592)));
evalcond[3]=((((0.069)*x19602))+((r11*x19597))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x19600))+((r10*x19598))+(((0.36442)*x19601))+(((-1.0)*r11*x19599))+(((0.069)*x19586))+((r12*x19595))+((r12*x19594)));
evalcond[4]=(((r11*x19604))+((r11*x19605))+(((-1.0)*r10*x19610))+(((-1.0)*r11*x19609))+((r10*x19606))+x19602+(((-1.0)*r12*x19607))+(((-1.0)*r10*x19608))+(((-1.0)*r12*x19603)));
evalcond[5]=(x19596+(((-1.0)*r00*x19608))+((r01*x19605))+(((-1.0)*r01*x19609))+((r00*x19606))+((r01*x19604))+(((-1.0)*r02*x19603))+(((-1.0)*r02*x19607))+(((-1.0)*r00*x19610)));
evalcond[6]=((((-1.0)*cj11*x19593))+((r01*x19612))+(((-1.0)*r02*x19615))+(((-1.0)*r01*x19617))+(((-1.0)*r00*x19616))+(((-1.0)*r01*x19613))+((r02*x19611))+(((-1.0)*r00*x19614))+(((-1.0)*r00*x19618)));
evalcond[7]=(((r12*x19611))+(((-1.0)*r11*x19613))+(((-1.0)*r10*x19616))+(((-1.0)*r10*x19614))+(((-1.0)*r11*x19617))+((r11*x19612))+(((-1.0)*r12*x19615))+(((-1.0)*x19601))+(((-1.0)*r10*x19618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19619=(cj15*r02);
IkReal x19620=(cj15*r12);
IkReal x19621=(r02*sj15);
IkReal x19622=(r12*sj15);
IkReal x19623=(cj15*cj16*r01);
IkReal x19624=(cj15*cj16*r11);
IkReal x19625=(cj15*r00*sj16);
IkReal x19626=(cj15*r10*sj16);
IkReal x19627=(cj16*r01*sj15);
IkReal x19628=(cj16*r11*sj15);
IkReal x19629=(r00*sj15*sj16);
IkReal x19630=(r10*sj15*sj16);
if( IKabs(((((0.00358229604870815)*x19621))+(((-0.0225020109192911)*x19626))+(((0.842227766698146)*x19628))+(((-0.134081758807097)*x19629))+(((-0.134081758807097)*x19627))+(((2.25020109192911)*py))+(((-1.0)*(0.358229604870815)*px))+(((-0.842227766698146)*x19620))+(((-0.0225020109192911)*x19624))+(((0.00358229604870815)*x19623))+(((-0.0225020109192911)*x19622))+(((0.00358229604870815)*x19625))+(((0.134081758807097)*x19619))+(((0.842227766698146)*x19630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.00358229604870815)*x19624))+(((-0.842227766698146)*x19619))+(((-0.0225020109192911)*x19621))+(((2.25020109192911)*px))+(((0.842227766698146)*x19627))+(((0.134081758807097)*x19630))+(((-0.0225020109192911)*x19623))+(((0.358229604870815)*py))+(((-0.00358229604870815)*x19626))+(((0.842227766698146)*x19629))+(((0.134081758807097)*x19628))+(((-0.0225020109192911)*x19625))+(((-0.134081758807097)*x19620))+(((-0.00358229604870815)*x19622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.00358229604870815)*x19621))+(((-0.0225020109192911)*x19626))+(((0.842227766698146)*x19628))+(((-0.134081758807097)*x19629))+(((-0.134081758807097)*x19627))+(((2.25020109192911)*py))+(((-1.0)*(0.358229604870815)*px))+(((-0.842227766698146)*x19620))+(((-0.0225020109192911)*x19624))+(((0.00358229604870815)*x19623))+(((-0.0225020109192911)*x19622))+(((0.00358229604870815)*x19625))+(((0.134081758807097)*x19619))+(((0.842227766698146)*x19630))))+IKsqr(((((-0.00358229604870815)*x19624))+(((-0.842227766698146)*x19619))+(((-0.0225020109192911)*x19621))+(((2.25020109192911)*px))+(((0.842227766698146)*x19627))+(((0.134081758807097)*x19630))+(((-0.0225020109192911)*x19623))+(((0.358229604870815)*py))+(((-0.00358229604870815)*x19626))+(((0.842227766698146)*x19629))+(((0.134081758807097)*x19628))+(((-0.0225020109192911)*x19625))+(((-0.134081758807097)*x19620))+(((-0.00358229604870815)*x19622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((0.00358229604870815)*x19621))+(((-0.0225020109192911)*x19626))+(((0.842227766698146)*x19628))+(((-0.134081758807097)*x19629))+(((-0.134081758807097)*x19627))+(((2.25020109192911)*py))+(((-1.0)*(0.358229604870815)*px))+(((-0.842227766698146)*x19620))+(((-0.0225020109192911)*x19624))+(((0.00358229604870815)*x19623))+(((-0.0225020109192911)*x19622))+(((0.00358229604870815)*x19625))+(((0.134081758807097)*x19619))+(((0.842227766698146)*x19630))), ((((-0.00358229604870815)*x19624))+(((-0.842227766698146)*x19619))+(((-0.0225020109192911)*x19621))+(((2.25020109192911)*px))+(((0.842227766698146)*x19627))+(((0.134081758807097)*x19630))+(((-0.0225020109192911)*x19623))+(((0.358229604870815)*py))+(((-0.00358229604870815)*x19626))+(((0.842227766698146)*x19629))+(((0.134081758807097)*x19628))+(((-0.0225020109192911)*x19625))+(((-0.134081758807097)*x19620))+(((-0.00358229604870815)*x19622))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x19631=((0.37429)*cj15);
IkReal x19632=((0.01)*sj15);
IkReal x19633=IKsin(j10);
IkReal x19634=IKcos(j10);
IkReal x19635=((0.01)*cj15*cj16);
IkReal x19636=((0.01)*cj15*sj16);
IkReal x19637=((0.37429)*cj16*sj15);
IkReal x19638=((0.37429)*sj15*sj16);
IkReal x19639=((1.0)*cj15*sj13);
IkReal x19640=(cj13*sj14*sj16);
IkReal x19641=(cj16*sj13*sj15);
IkReal x19642=(sj13*sj15*sj16);
IkReal x19643=((1.0)*cj13*cj14*sj15);
IkReal x19644=((1.0)*cj13*cj16*sj14);
IkReal x19645=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19646=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19647=((-1.0)*x19633);
IkReal x19648=(cj13*cj15);
IkReal x19649=(sj13*sj14*sj16);
IkReal x19650=((1.0)*cj13*cj16*sj15);
IkReal x19651=((1.0)*cj13*sj15*sj16);
IkReal x19652=((1.0)*cj14*sj13*sj15);
IkReal x19653=((1.0)*cj16*sj13*sj14);
IkReal x19654=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19655=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+((r02*x19631))+((r01*x19635))+((r02*x19632))+(((-0.069)*x19633))+(((-1.0)*r01*x19637))+((r00*x19636))+(((0.43342)*x19634))+(((-1.0)*r00*x19638)));
evalcond[1]=(((r12*x19631))+((r12*x19632))+(((-1.0)*(1.0)*py))+(((0.43342)*x19633))+(((0.069)*x19634))+(((-1.0)*r10*x19638))+((r11*x19635))+(((-1.0)*r11*x19637))+((r10*x19636)));
evalcond[2]=((((-1.0)*r10*x19646))+(((-1.0)*r10*x19644))+x19634+((r10*x19642))+(((-1.0)*r11*x19645))+((r11*x19641))+(((-1.0)*r12*x19643))+(((-1.0)*r12*x19639))+((r11*x19640)));
evalcond[3]=(((r01*x19641))+((r01*x19640))+(((-1.0)*r02*x19643))+((r00*x19642))+x19647+(((-1.0)*r02*x19639))+(((-1.0)*r01*x19645))+(((-1.0)*r00*x19646))+(((-1.0)*r00*x19644)));
evalcond[4]=(((r01*x19649))+((r02*x19648))+(((-1.0)*r01*x19650))+(((-1.0)*r00*x19655))+(((-1.0)*r02*x19652))+(((-1.0)*r01*x19654))+(((-1.0)*r00*x19651))+(((-1.0)*x19634))+(((-1.0)*r00*x19653)));
evalcond[5]=((((-1.0)*r10*x19655))+((r11*x19649))+(((-1.0)*r10*x19651))+(((-1.0)*r11*x19650))+((r12*x19648))+(((-1.0)*r12*x19652))+x19647+(((-1.0)*r10*x19653))+(((-1.0)*r11*x19654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19656=(cj15*r02);
IkReal x19657=(cj15*r12);
IkReal x19658=(r02*sj15);
IkReal x19659=(r12*sj15);
IkReal x19660=(cj15*cj16*r01);
IkReal x19661=(cj15*cj16*r11);
IkReal x19662=(cj15*r00*sj16);
IkReal x19663=(cj15*r10*sj16);
IkReal x19664=(cj16*r01*sj15);
IkReal x19665=(cj16*r11*sj15);
IkReal x19666=(r00*sj15*sj16);
IkReal x19667=(r10*sj15*sj16);
if( IKabs(((((-0.0225020109192911)*x19661))+(((-0.134081758807097)*x19656))+(((-0.842227766698146)*x19657))+(((-0.00358229604870815)*x19660))+(((0.842227766698146)*x19665))+(((2.25020109192911)*py))+(((-0.00358229604870815)*x19662))+(((0.842227766698146)*x19667))+(((0.358229604870815)*px))+(((-0.00358229604870815)*x19658))+(((0.134081758807097)*x19664))+(((0.134081758807097)*x19666))+(((-0.0225020109192911)*x19663))+(((-0.0225020109192911)*x19659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.0225020109192911)*x19658))+(((-0.0225020109192911)*x19662))+(((0.134081758807097)*x19657))+(((-0.842227766698146)*x19656))+(((0.00358229604870815)*x19663))+(((0.842227766698146)*x19664))+(((2.25020109192911)*px))+(((-1.0)*(0.358229604870815)*py))+(((0.00358229604870815)*x19659))+(((-0.134081758807097)*x19667))+(((0.00358229604870815)*x19661))+(((0.842227766698146)*x19666))+(((-0.134081758807097)*x19665))+(((-0.0225020109192911)*x19660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.0225020109192911)*x19661))+(((-0.134081758807097)*x19656))+(((-0.842227766698146)*x19657))+(((-0.00358229604870815)*x19660))+(((0.842227766698146)*x19665))+(((2.25020109192911)*py))+(((-0.00358229604870815)*x19662))+(((0.842227766698146)*x19667))+(((0.358229604870815)*px))+(((-0.00358229604870815)*x19658))+(((0.134081758807097)*x19664))+(((0.134081758807097)*x19666))+(((-0.0225020109192911)*x19663))+(((-0.0225020109192911)*x19659))))+IKsqr(((((-0.0225020109192911)*x19658))+(((-0.0225020109192911)*x19662))+(((0.134081758807097)*x19657))+(((-0.842227766698146)*x19656))+(((0.00358229604870815)*x19663))+(((0.842227766698146)*x19664))+(((2.25020109192911)*px))+(((-1.0)*(0.358229604870815)*py))+(((0.00358229604870815)*x19659))+(((-0.134081758807097)*x19667))+(((0.00358229604870815)*x19661))+(((0.842227766698146)*x19666))+(((-0.134081758807097)*x19665))+(((-0.0225020109192911)*x19660))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-0.0225020109192911)*x19661))+(((-0.134081758807097)*x19656))+(((-0.842227766698146)*x19657))+(((-0.00358229604870815)*x19660))+(((0.842227766698146)*x19665))+(((2.25020109192911)*py))+(((-0.00358229604870815)*x19662))+(((0.842227766698146)*x19667))+(((0.358229604870815)*px))+(((-0.00358229604870815)*x19658))+(((0.134081758807097)*x19664))+(((0.134081758807097)*x19666))+(((-0.0225020109192911)*x19663))+(((-0.0225020109192911)*x19659))), ((((-0.0225020109192911)*x19658))+(((-0.0225020109192911)*x19662))+(((0.134081758807097)*x19657))+(((-0.842227766698146)*x19656))+(((0.00358229604870815)*x19663))+(((0.842227766698146)*x19664))+(((2.25020109192911)*px))+(((-1.0)*(0.358229604870815)*py))+(((0.00358229604870815)*x19659))+(((-0.134081758807097)*x19667))+(((0.00358229604870815)*x19661))+(((0.842227766698146)*x19666))+(((-0.134081758807097)*x19665))+(((-0.0225020109192911)*x19660))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x19668=((0.37429)*cj15);
IkReal x19669=((0.01)*sj15);
IkReal x19670=IKsin(j10);
IkReal x19671=IKcos(j10);
IkReal x19672=((0.01)*cj15*cj16);
IkReal x19673=((0.01)*cj15*sj16);
IkReal x19674=((0.37429)*cj16*sj15);
IkReal x19675=((0.37429)*sj15*sj16);
IkReal x19676=((1.0)*cj15*sj13);
IkReal x19677=(cj13*sj14*sj16);
IkReal x19678=(cj16*sj13*sj15);
IkReal x19679=(sj13*sj15*sj16);
IkReal x19680=((1.0)*cj13*cj14*sj15);
IkReal x19681=((1.0)*cj13*cj16*sj14);
IkReal x19682=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19683=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19684=((-1.0)*x19671);
IkReal x19685=(cj13*cj15);
IkReal x19686=(sj13*sj14*sj16);
IkReal x19687=((1.0)*cj13*cj16*sj15);
IkReal x19688=((1.0)*cj13*sj15*sj16);
IkReal x19689=((1.0)*cj14*sj13*sj15);
IkReal x19690=((1.0)*cj16*sj13*sj14);
IkReal x19691=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19692=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+(((0.43342)*x19671))+(((-1.0)*r01*x19674))+((r02*x19668))+(((-1.0)*r00*x19675))+((r00*x19673))+(((0.069)*x19670))+((r02*x19669))+((r01*x19672)));
evalcond[1]=(((r12*x19669))+((r11*x19672))+(((-1.0)*(1.0)*py))+((r10*x19673))+(((-1.0)*r10*x19675))+(((-1.0)*r11*x19674))+(((-0.069)*x19671))+(((0.43342)*x19670))+((r12*x19668)));
evalcond[2]=((((-1.0)*r02*x19680))+x19670+((r01*x19678))+(((-1.0)*r02*x19676))+(((-1.0)*r01*x19682))+((r00*x19679))+(((-1.0)*r00*x19683))+((r01*x19677))+(((-1.0)*r00*x19681)));
evalcond[3]=((((-1.0)*r10*x19681))+((r10*x19679))+(((-1.0)*r12*x19676))+((r11*x19678))+(((-1.0)*r12*x19680))+x19684+(((-1.0)*r11*x19682))+(((-1.0)*r10*x19683))+((r11*x19677)));
evalcond[4]=((((-1.0)*r01*x19691))+x19684+(((-1.0)*r00*x19688))+((r01*x19686))+(((-1.0)*r02*x19689))+(((-1.0)*r00*x19690))+((r02*x19685))+(((-1.0)*r01*x19687))+(((-1.0)*r00*x19692)));
evalcond[5]=((((-1.0)*r10*x19690))+(((-1.0)*r10*x19692))+(((-1.0)*r11*x19691))+(((-1.0)*r10*x19688))+((r11*x19686))+((r12*x19685))+(((-1.0)*r12*x19689))+(((-1.0)*x19670))+(((-1.0)*r11*x19687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19693=(cj15*r02);
IkReal x19694=(cj15*r12);
IkReal x19695=(r02*sj15);
IkReal x19696=(r12*sj15);
IkReal x19697=(cj15*cj16*r01);
IkReal x19698=(cj15*cj16*r11);
IkReal x19699=(cj15*r00*sj16);
IkReal x19700=(cj15*r10*sj16);
IkReal x19701=(cj16*r01*sj15);
IkReal x19702=(cj16*r11*sj15);
IkReal x19703=(r00*sj15*sj16);
IkReal x19704=(r10*sj15*sj16);
if( IKabs(((((-1.0)*(0.749723120732182)*px))+(((1.20143403691943)*x19694))+(((-1.20143403691943)*x19702))+(((-1.20143403691943)*x19704))+(((-0.280613866858848)*x19703))+(((0.280613866858848)*x19693))+(((0.00749723120732182)*x19699))+(((-0.280613866858848)*x19701))+(((0.0320990151198118)*x19698))+(((0.00749723120732182)*x19697))+(((0.0320990151198118)*x19700))+(((0.00749723120732182)*x19695))+(((0.0320990151198118)*x19696))+(((-1.0)*(3.20990151198118)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0320990151198118)*x19695))+(((-0.00749723120732182)*x19700))+(((-1.20143403691943)*x19701))+(((-0.280613866858848)*x19694))+(((0.280613866858848)*x19704))+(((-0.00749723120732182)*x19696))+(((0.280613866858848)*x19702))+(((0.749723120732182)*py))+(((-0.00749723120732182)*x19698))+(((0.0320990151198118)*x19699))+(((1.20143403691943)*x19693))+(((0.0320990151198118)*x19697))+(((-1.20143403691943)*x19703))+(((-1.0)*(3.20990151198118)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(0.749723120732182)*px))+(((1.20143403691943)*x19694))+(((-1.20143403691943)*x19702))+(((-1.20143403691943)*x19704))+(((-0.280613866858848)*x19703))+(((0.280613866858848)*x19693))+(((0.00749723120732182)*x19699))+(((-0.280613866858848)*x19701))+(((0.0320990151198118)*x19698))+(((0.00749723120732182)*x19697))+(((0.0320990151198118)*x19700))+(((0.00749723120732182)*x19695))+(((0.0320990151198118)*x19696))+(((-1.0)*(3.20990151198118)*py))))+IKsqr(((((0.0320990151198118)*x19695))+(((-0.00749723120732182)*x19700))+(((-1.20143403691943)*x19701))+(((-0.280613866858848)*x19694))+(((0.280613866858848)*x19704))+(((-0.00749723120732182)*x19696))+(((0.280613866858848)*x19702))+(((0.749723120732182)*py))+(((-0.00749723120732182)*x19698))+(((0.0320990151198118)*x19699))+(((1.20143403691943)*x19693))+(((0.0320990151198118)*x19697))+(((-1.20143403691943)*x19703))+(((-1.0)*(3.20990151198118)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*(0.749723120732182)*px))+(((1.20143403691943)*x19694))+(((-1.20143403691943)*x19702))+(((-1.20143403691943)*x19704))+(((-0.280613866858848)*x19703))+(((0.280613866858848)*x19693))+(((0.00749723120732182)*x19699))+(((-0.280613866858848)*x19701))+(((0.0320990151198118)*x19698))+(((0.00749723120732182)*x19697))+(((0.0320990151198118)*x19700))+(((0.00749723120732182)*x19695))+(((0.0320990151198118)*x19696))+(((-1.0)*(3.20990151198118)*py))), ((((0.0320990151198118)*x19695))+(((-0.00749723120732182)*x19700))+(((-1.20143403691943)*x19701))+(((-0.280613866858848)*x19694))+(((0.280613866858848)*x19704))+(((-0.00749723120732182)*x19696))+(((0.280613866858848)*x19702))+(((0.749723120732182)*py))+(((-0.00749723120732182)*x19698))+(((0.0320990151198118)*x19699))+(((1.20143403691943)*x19693))+(((0.0320990151198118)*x19697))+(((-1.20143403691943)*x19703))+(((-1.0)*(3.20990151198118)*px))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x19705=((0.37429)*cj15);
IkReal x19706=((0.01)*sj15);
IkReal x19707=IKsin(j10);
IkReal x19708=IKcos(j10);
IkReal x19709=((0.01)*cj15*cj16);
IkReal x19710=((0.01)*cj15*sj16);
IkReal x19711=((0.37429)*cj16*sj15);
IkReal x19712=((0.37429)*sj15*sj16);
IkReal x19713=((1.0)*cj15*sj13);
IkReal x19714=(cj13*sj14*sj16);
IkReal x19715=(cj16*sj13*sj15);
IkReal x19716=(sj13*sj15*sj16);
IkReal x19717=((1.0)*cj13*cj14*sj15);
IkReal x19718=((1.0)*cj13*cj16*sj14);
IkReal x19719=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19720=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19721=(cj13*cj15);
IkReal x19722=(sj13*sj14*sj16);
IkReal x19723=((1.0)*cj13*cj16*sj15);
IkReal x19724=((1.0)*cj13*sj15*sj16);
IkReal x19725=((1.0)*cj14*sj13*sj15);
IkReal x19726=((1.0)*cj16*sj13*sj14);
IkReal x19727=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19728=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+(((-0.069)*x19707))+((r00*x19710))+(((-1.0)*r00*x19712))+(((-1.0)*r01*x19711))+((r02*x19705))+((r02*x19706))+((r01*x19709))+(((-0.29542)*x19708)));
evalcond[1]=(((r10*x19710))+(((-0.29542)*x19707))+(((-1.0)*(1.0)*py))+((r12*x19705))+(((-1.0)*r10*x19712))+(((-1.0)*r11*x19711))+((r11*x19709))+(((0.069)*x19708))+((r12*x19706)));
evalcond[2]=((((-1.0)*r12*x19713))+(((-1.0)*r12*x19717))+(((-1.0)*r10*x19718))+(((-1.0)*r10*x19720))+((r11*x19714))+((r11*x19715))+x19708+(((-1.0)*r11*x19719))+((r10*x19716)));
evalcond[3]=(((r02*x19721))+((r01*x19722))+(((-1.0)*r01*x19723))+(((-1.0)*r00*x19724))+(((-1.0)*r02*x19725))+(((-1.0)*r00*x19726))+(((-1.0)*r00*x19728))+(((-1.0)*r01*x19727))+x19708);
evalcond[4]=((((-1.0)*r10*x19726))+(((-1.0)*r11*x19723))+(((-1.0)*r11*x19727))+((r11*x19722))+(((-1.0)*r12*x19725))+(((-1.0)*r10*x19724))+((r12*x19721))+x19707+(((-1.0)*r10*x19728)));
evalcond[5]=(((r01*x19714))+(((-1.0)*r00*x19720))+((r00*x19716))+(((-1.0)*r01*x19719))+(((-1.0)*x19707))+((r01*x19715))+(((-1.0)*r02*x19717))+(((-1.0)*r00*x19718))+(((-1.0)*r02*x19713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19729=(cj15*r02);
IkReal x19730=(cj15*r12);
IkReal x19731=(r02*sj15);
IkReal x19732=(r12*sj15);
IkReal x19733=(cj15*cj16*r01);
IkReal x19734=(cj15*cj16*r11);
IkReal x19735=(cj15*r00*sj16);
IkReal x19736=(cj15*r10*sj16);
IkReal x19737=(cj16*r01*sj15);
IkReal x19738=(cj16*r11*sj15);
IkReal x19739=(r00*sj15*sj16);
IkReal x19740=(r10*sj15*sj16);
if( IKabs(((((0.280613866858848)*x19739))+(((-0.280613866858848)*x19729))+(((-0.00749723120732182)*x19733))+(((-1.20143403691943)*x19738))+(((-0.00749723120732182)*x19731))+(((0.0320990151198118)*x19736))+(((0.749723120732182)*px))+(((0.280613866858848)*x19737))+(((1.20143403691943)*x19730))+(((-0.00749723120732182)*x19735))+(((-1.20143403691943)*x19740))+(((0.0320990151198118)*x19732))+(((0.0320990151198118)*x19734))+(((-1.0)*(3.20990151198118)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.00749723120732182)*x19732))+(((-1.20143403691943)*x19737))+(((0.280613866858848)*x19730))+(((0.00749723120732182)*x19734))+(((-1.20143403691943)*x19739))+(((-0.280613866858848)*x19740))+(((0.0320990151198118)*x19735))+(((1.20143403691943)*x19729))+(((0.00749723120732182)*x19736))+(((0.0320990151198118)*x19731))+(((-1.0)*(3.20990151198118)*px))+(((-1.0)*(0.749723120732182)*py))+(((-0.280613866858848)*x19738))+(((0.0320990151198118)*x19733)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.280613866858848)*x19739))+(((-0.280613866858848)*x19729))+(((-0.00749723120732182)*x19733))+(((-1.20143403691943)*x19738))+(((-0.00749723120732182)*x19731))+(((0.0320990151198118)*x19736))+(((0.749723120732182)*px))+(((0.280613866858848)*x19737))+(((1.20143403691943)*x19730))+(((-0.00749723120732182)*x19735))+(((-1.20143403691943)*x19740))+(((0.0320990151198118)*x19732))+(((0.0320990151198118)*x19734))+(((-1.0)*(3.20990151198118)*py))))+IKsqr(((((0.00749723120732182)*x19732))+(((-1.20143403691943)*x19737))+(((0.280613866858848)*x19730))+(((0.00749723120732182)*x19734))+(((-1.20143403691943)*x19739))+(((-0.280613866858848)*x19740))+(((0.0320990151198118)*x19735))+(((1.20143403691943)*x19729))+(((0.00749723120732182)*x19736))+(((0.0320990151198118)*x19731))+(((-1.0)*(3.20990151198118)*px))+(((-1.0)*(0.749723120732182)*py))+(((-0.280613866858848)*x19738))+(((0.0320990151198118)*x19733))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((0.280613866858848)*x19739))+(((-0.280613866858848)*x19729))+(((-0.00749723120732182)*x19733))+(((-1.20143403691943)*x19738))+(((-0.00749723120732182)*x19731))+(((0.0320990151198118)*x19736))+(((0.749723120732182)*px))+(((0.280613866858848)*x19737))+(((1.20143403691943)*x19730))+(((-0.00749723120732182)*x19735))+(((-1.20143403691943)*x19740))+(((0.0320990151198118)*x19732))+(((0.0320990151198118)*x19734))+(((-1.0)*(3.20990151198118)*py))), ((((0.00749723120732182)*x19732))+(((-1.20143403691943)*x19737))+(((0.280613866858848)*x19730))+(((0.00749723120732182)*x19734))+(((-1.20143403691943)*x19739))+(((-0.280613866858848)*x19740))+(((0.0320990151198118)*x19735))+(((1.20143403691943)*x19729))+(((0.00749723120732182)*x19736))+(((0.0320990151198118)*x19731))+(((-1.0)*(3.20990151198118)*px))+(((-1.0)*(0.749723120732182)*py))+(((-0.280613866858848)*x19738))+(((0.0320990151198118)*x19733))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x19741=((0.37429)*cj15);
IkReal x19742=((0.01)*sj15);
IkReal x19743=IKsin(j10);
IkReal x19744=IKcos(j10);
IkReal x19745=((0.01)*cj15*cj16);
IkReal x19746=((0.01)*cj15*sj16);
IkReal x19747=((0.37429)*cj16*sj15);
IkReal x19748=((0.37429)*sj15*sj16);
IkReal x19749=((1.0)*cj15*sj13);
IkReal x19750=(cj13*sj14*sj16);
IkReal x19751=(cj16*sj13*sj15);
IkReal x19752=(sj13*sj15*sj16);
IkReal x19753=((1.0)*cj13*cj14*sj15);
IkReal x19754=((1.0)*cj13*cj16*sj14);
IkReal x19755=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19756=((1.0)*cj13*cj14*cj15*sj16);
IkReal x19757=(cj13*cj15);
IkReal x19758=(sj13*sj14*sj16);
IkReal x19759=((1.0)*cj13*cj16*sj15);
IkReal x19760=((1.0)*cj13*sj15*sj16);
IkReal x19761=((1.0)*cj14*sj13*sj15);
IkReal x19762=((1.0)*cj16*sj13*sj14);
IkReal x19763=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19764=((1.0)*cj14*cj15*sj13*sj16);
evalcond[0]=((((-1.0)*(1.0)*px))+((r01*x19745))+(((-1.0)*r01*x19747))+((r02*x19741))+(((-1.0)*r00*x19748))+(((-0.29542)*x19744))+((r00*x19746))+(((0.069)*x19743))+((r02*x19742)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-0.29542)*x19743))+(((-1.0)*r11*x19747))+((r12*x19741))+((r11*x19745))+(((-1.0)*r10*x19748))+((r10*x19746))+((r12*x19742))+(((-0.069)*x19744)));
evalcond[2]=(((r01*x19751))+(((-1.0)*r01*x19755))+(((-1.0)*r00*x19756))+((r01*x19750))+((r00*x19752))+x19743+(((-1.0)*r02*x19753))+(((-1.0)*r00*x19754))+(((-1.0)*r02*x19749)));
evalcond[3]=((((-1.0)*r00*x19760))+(((-1.0)*r02*x19761))+(((-1.0)*r00*x19762))+((r01*x19758))+((r02*x19757))+x19744+(((-1.0)*r01*x19759))+(((-1.0)*r01*x19763))+(((-1.0)*r00*x19764)));
evalcond[4]=(((r11*x19758))+(((-1.0)*r11*x19763))+(((-1.0)*r10*x19760))+(((-1.0)*r10*x19762))+(((-1.0)*r10*x19764))+x19743+((r12*x19757))+(((-1.0)*r11*x19759))+(((-1.0)*r12*x19761)));
evalcond[5]=((((-1.0)*r10*x19756))+(((-1.0)*r11*x19755))+(((-1.0)*r10*x19754))+((r11*x19750))+((r10*x19752))+((r11*x19751))+(((-1.0)*r12*x19753))+(((-1.0)*x19744))+(((-1.0)*r12*x19749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19765=((69.0)*sj11);
IkReal x19766=((364.42)*cj11*sj11);
IkReal x19767=((69.0)*cj12*(cj11*cj11));
IkReal x19768=((69.0)*cj14);
IkReal x19769=(cj16*r10);
IkReal x19770=(r11*sj16);
IkReal x19771=(r12*sj14*sj15);
IkReal x19772=(cj16*r11);
IkReal x19773=((69.0)*cj15*sj14);
IkReal x19774=(r10*sj16);
IkReal x19775=(((x19772*x19773))+(((-1.0)*x19768*x19769))+((x19773*x19774))+((x19768*x19770))+(((69.0)*x19771)));
IkReal x19776=((1000.0)*px);
IkReal x19777=((374.29)*cj15);
IkReal x19778=(cj12*r02);
IkReal x19779=((10.0)*sj15);
IkReal x19780=((364.42)*cj11*cj14);
IkReal x19781=(cj16*r01);
IkReal x19782=((10.0)*cj12*cj15);
IkReal x19783=(r00*sj16);
IkReal x19784=((374.29)*cj12*sj15);
IkReal x19785=((364.42)*cj11*cj15*sj14);
IkReal x19786=((69.0)*cj12*cj14*sj11);
IkReal x19787=((69.0)*cj12*cj15*sj11*sj14);
IkReal x19788=(r02*sj11);
IkReal x19789=((10.0)*cj15*sj11);
IkReal x19790=((374.29)*sj11*sj15);
CheckValue<IkReal> x19791=IKPowWithIntegerCheck((((sj12*x19765))+((sj12*x19766))+((sj12*x19767))),-1);
if(!x19791.valid){
continue;
}
CheckValue<IkReal> x19792=IKPowWithIntegerCheck((x19766+x19767+x19765),-1);
if(!x19792.valid){
continue;
}
if( IKabs(((x19791.value)*(((((-1.0)*x19770*x19786))+(((-1.0)*x19772*x19787))+((x19778*x19779))+(((-69.0)*cj12*sj11*x19771))+x19775+((x19772*x19785))+(((-1.0)*x19783*x19784))+(((-1.0)*x19774*x19787))+(((-1.0)*x19781*x19784))+(((364.42)*cj11*x19771))+((x19769*x19786))+((x19770*x19780))+((x19774*x19785))+((x19777*x19778))+((x19781*x19782))+(((-1.0)*x19769*x19780))+(((-1.0)*cj12*x19776))+((x19782*x19783)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x19792.value)*((((x19783*x19790))+((sj11*x19776))+(((-1.0)*x19779*x19788))+x19775+(((-1.0)*x19783*x19789))+((x19781*x19790))+(((-1.0)*x19777*x19788))+(((-1.0)*x19781*x19789)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x19791.value)*(((((-1.0)*x19770*x19786))+(((-1.0)*x19772*x19787))+((x19778*x19779))+(((-69.0)*cj12*sj11*x19771))+x19775+((x19772*x19785))+(((-1.0)*x19783*x19784))+(((-1.0)*x19774*x19787))+(((-1.0)*x19781*x19784))+(((364.42)*cj11*x19771))+((x19769*x19786))+((x19770*x19780))+((x19774*x19785))+((x19777*x19778))+((x19781*x19782))+(((-1.0)*x19769*x19780))+(((-1.0)*cj12*x19776))+((x19782*x19783))))))+IKsqr(((x19792.value)*((((x19783*x19790))+((sj11*x19776))+(((-1.0)*x19779*x19788))+x19775+(((-1.0)*x19783*x19789))+((x19781*x19790))+(((-1.0)*x19777*x19788))+(((-1.0)*x19781*x19789))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x19791.value)*(((((-1.0)*x19770*x19786))+(((-1.0)*x19772*x19787))+((x19778*x19779))+(((-69.0)*cj12*sj11*x19771))+x19775+((x19772*x19785))+(((-1.0)*x19783*x19784))+(((-1.0)*x19774*x19787))+(((-1.0)*x19781*x19784))+(((364.42)*cj11*x19771))+((x19769*x19786))+((x19770*x19780))+((x19774*x19785))+((x19777*x19778))+((x19781*x19782))+(((-1.0)*x19769*x19780))+(((-1.0)*cj12*x19776))+((x19782*x19783))))), ((x19792.value)*((((x19783*x19790))+((sj11*x19776))+(((-1.0)*x19779*x19788))+x19775+(((-1.0)*x19783*x19789))+((x19781*x19790))+(((-1.0)*x19777*x19788))+(((-1.0)*x19781*x19789))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19793=IKcos(j10);
IkReal x19794=(cj14*cj16);
IkReal x19795=((1.0)*cj14*sj16);
IkReal x19796=((1.0)*sj14*sj15);
IkReal x19797=IKsin(j10);
IkReal x19798=((1.0)*cj15*cj16*sj14);
IkReal x19799=((1.0)*cj15*sj14*sj16);
IkReal x19800=((1.0)*x19797);
IkReal x19801=(cj12*x19800);
IkReal x19802=(sj12*x19793);
IkReal x19803=(cj13*cj15);
IkReal x19804=(cj11*x19793);
IkReal x19805=(sj13*sj14*sj16);
IkReal x19806=((1.0)*cj13*cj16*sj15);
IkReal x19807=((1.0)*cj13*sj15*sj16);
IkReal x19808=((1.0)*cj14*sj13*sj15);
IkReal x19809=((1.0)*cj16*sj13*sj14);
IkReal x19810=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19811=((1.0)*cj14*cj15*sj13*sj16);
IkReal x19812=(cj11*x19797);
IkReal x19813=((0.37429)*cj15);
IkReal x19814=((0.01)*sj15);
IkReal x19815=((0.069)*x19797);
IkReal x19816=((0.01)*cj15*cj16);
IkReal x19817=((0.01)*cj15*sj16);
IkReal x19818=((0.37429)*cj16*sj15);
IkReal x19819=((0.37429)*sj15*sj16);
IkReal x19820=(cj12*sj11*x19793);
IkReal x19821=((1.0)*cj15*sj13);
IkReal x19822=(cj13*sj14*sj16);
IkReal x19823=(cj16*sj13*sj15);
IkReal x19824=(sj13*sj15*sj16);
IkReal x19825=((1.0)*cj13*cj14*sj15);
IkReal x19826=((1.0)*cj13*cj16*sj14);
IkReal x19827=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19828=((1.0)*cj13*cj14*cj15*sj16);
evalcond[0]=((((-1.0)*r12*x19796))+((cj12*x19793))+(((-1.0)*r11*x19798))+(((-1.0)*r11*x19795))+((sj11*sj12*x19797))+(((-1.0)*r10*x19799))+((r10*x19794)));
evalcond[1]=((((-1.0)*r01*x19795))+(((-1.0)*r01*x19798))+(((-1.0)*r00*x19799))+(((-1.0)*r02*x19796))+(((-1.0)*x19801))+((r00*x19794))+((sj11*x19802)));
evalcond[2]=((((-1.0)*r00*x19809))+((r01*x19805))+(((-1.0)*r01*x19810))+(((-1.0)*x19804))+(((-1.0)*r00*x19811))+(((-1.0)*r00*x19807))+(((-1.0)*r01*x19806))+(((-1.0)*r02*x19808))+((r02*x19803)));
evalcond[3]=((((-1.0)*x19812))+((r11*x19805))+(((-1.0)*r10*x19809))+(((-1.0)*r11*x19810))+((r12*x19803))+(((-1.0)*r11*x19806))+(((-1.0)*r10*x19807))+(((-1.0)*r12*x19808))+(((-1.0)*r10*x19811)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r02*x19814))+((r01*x19816))+(((-1.0)*sj12*x19815))+(((-0.069)*x19820))+(((0.36442)*x19804))+(((0.069)*x19793))+((r00*x19817))+(((-1.0)*r01*x19818))+(((-1.0)*r00*x19819))+((r02*x19813)));
evalcond[5]=((((-1.0)*cj12*sj11*x19815))+(((-1.0)*(1.0)*py))+(((0.36442)*x19812))+(((-1.0)*r10*x19819))+(((-1.0)*r11*x19818))+((r12*x19814))+((r10*x19817))+(((0.069)*x19802))+((r11*x19816))+((r12*x19813))+x19815);
evalcond[6]=(x19802+(((-1.0)*r12*x19825))+(((-1.0)*sj11*x19801))+((r11*x19822))+(((-1.0)*r12*x19821))+((r11*x19823))+(((-1.0)*r10*x19828))+((r10*x19824))+(((-1.0)*r11*x19827))+(((-1.0)*r10*x19826)));
evalcond[7]=((((-1.0)*r01*x19827))+((r00*x19824))+((r01*x19823))+(((-1.0)*sj12*x19800))+((r01*x19822))+(((-1.0)*r00*x19826))+(((-1.0)*r02*x19821))+(((-1.0)*x19820))+(((-1.0)*r00*x19828))+(((-1.0)*r02*x19825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19829=((364.42)*cj11);
IkReal x19830=((1000.0)*py);
IkReal x19831=((374.29)*cj15);
IkReal x19832=(cj12*r12);
IkReal x19833=((10.0)*sj15);
IkReal x19834=(cj16*r11);
IkReal x19835=((10.0)*cj12*cj15);
IkReal x19836=(r10*sj16);
IkReal x19837=((374.29)*cj12*sj15);
IkReal x19838=((69.0)*cj14);
IkReal x19839=(cj16*r10);
IkReal x19840=(x19838*x19839);
IkReal x19841=(r11*sj16);
IkReal x19842=(x19838*x19841);
IkReal x19843=(r12*sj14*sj15);
IkReal x19844=((69.0)*x19843);
IkReal x19845=((69.0)*cj15*sj14);
IkReal x19846=(x19834*x19845);
IkReal x19847=(x19836*x19845);
IkReal x19848=((364.42)*cj11*cj14);
IkReal x19849=(r12*sj11*sj12);
IkReal x19850=((364.42)*cj11*cj15*sj14);
IkReal x19851=((69.0)*cj12*cj14*sj11);
IkReal x19852=((10.0)*cj15*sj11*sj12);
IkReal x19853=((374.29)*sj11*sj12*sj15);
IkReal x19854=((69.0)*cj12*cj15*sj11*sj14);
CheckValue<IkReal> x19855 = IKatan2WithCheck(IkReal(((((-1.0)*sj12*x19842))+(((-1.0)*x19831*x19832))+(((-1.0)*sj12*x19844))+((cj12*x19830))+(((-1.0)*x19834*x19835))+((x19834*x19837))+(((-1.0)*sj12*x19846))+(((-1.0)*sj12*x19847))+((sj12*x19840))+(((-1.0)*x19835*x19836))+(((-1.0)*x19832*x19833))+((x19836*x19837)))),IkReal(((((-1.0)*sj11*sj12*x19830))+((x19836*x19850))+((x19834*x19850))+(((-1.0)*x19834*x19854))+(((-1.0)*x19841*x19851))+((x19834*x19852))+((x19839*x19851))+(((-1.0)*x19839*x19848))+((x19841*x19848))+((x19829*x19843))+(((-1.0)*x19834*x19853))+(((-1.0)*x19840))+((x19833*x19849))+(((-1.0)*x19836*x19854))+(((-1.0)*x19836*x19853))+x19842+x19847+x19846+x19844+(((-69.0)*cj12*sj11*x19843))+((x19831*x19849))+((x19836*x19852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x19855.valid){
continue;
}
CheckValue<IkReal> x19856=IKPowWithIntegerCheck(IKsign(((((-1.0)*(69.0)*sj11))+(((69.0)*cj12))+((cj12*x19829)))),-1);
if(!x19856.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x19855.value)+(((1.5707963267949)*(x19856.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19857=IKcos(j10);
IkReal x19858=(cj14*cj16);
IkReal x19859=((1.0)*cj14*sj16);
IkReal x19860=((1.0)*sj14*sj15);
IkReal x19861=IKsin(j10);
IkReal x19862=((1.0)*cj15*cj16*sj14);
IkReal x19863=((1.0)*cj15*sj14*sj16);
IkReal x19864=((1.0)*x19861);
IkReal x19865=(cj12*x19864);
IkReal x19866=(sj12*x19857);
IkReal x19867=(cj13*cj15);
IkReal x19868=(cj11*x19857);
IkReal x19869=(sj13*sj14*sj16);
IkReal x19870=((1.0)*cj13*cj16*sj15);
IkReal x19871=((1.0)*cj13*sj15*sj16);
IkReal x19872=((1.0)*cj14*sj13*sj15);
IkReal x19873=((1.0)*cj16*sj13*sj14);
IkReal x19874=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19875=((1.0)*cj14*cj15*sj13*sj16);
IkReal x19876=(cj11*x19861);
IkReal x19877=((0.37429)*cj15);
IkReal x19878=((0.01)*sj15);
IkReal x19879=((0.069)*x19861);
IkReal x19880=((0.01)*cj15*cj16);
IkReal x19881=((0.01)*cj15*sj16);
IkReal x19882=((0.37429)*cj16*sj15);
IkReal x19883=((0.37429)*sj15*sj16);
IkReal x19884=(cj12*sj11*x19857);
IkReal x19885=((1.0)*cj15*sj13);
IkReal x19886=(cj13*sj14*sj16);
IkReal x19887=(cj16*sj13*sj15);
IkReal x19888=(sj13*sj15*sj16);
IkReal x19889=((1.0)*cj13*cj14*sj15);
IkReal x19890=((1.0)*cj13*cj16*sj14);
IkReal x19891=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19892=((1.0)*cj13*cj14*cj15*sj16);
evalcond[0]=((((-1.0)*r12*x19860))+(((-1.0)*r11*x19862))+(((-1.0)*r11*x19859))+((sj11*sj12*x19861))+(((-1.0)*r10*x19863))+((cj12*x19857))+((r10*x19858)));
evalcond[1]=((((-1.0)*r00*x19863))+(((-1.0)*r02*x19860))+(((-1.0)*x19865))+((r00*x19858))+(((-1.0)*r01*x19862))+((sj11*x19866))+(((-1.0)*r01*x19859)));
evalcond[2]=((((-1.0)*r02*x19872))+((r01*x19869))+(((-1.0)*r01*x19870))+(((-1.0)*x19868))+(((-1.0)*r01*x19874))+(((-1.0)*r00*x19871))+(((-1.0)*r00*x19873))+((r02*x19867))+(((-1.0)*r00*x19875)));
evalcond[3]=(((r12*x19867))+(((-1.0)*r11*x19874))+(((-1.0)*r10*x19873))+(((-1.0)*r12*x19872))+(((-1.0)*r11*x19870))+(((-1.0)*r10*x19875))+((r11*x19869))+(((-1.0)*r10*x19871))+(((-1.0)*x19876)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r00*x19881))+((r02*x19878))+(((-0.069)*x19884))+((r02*x19877))+(((-1.0)*r01*x19882))+((r01*x19880))+(((0.069)*x19857))+(((-1.0)*r00*x19883))+(((0.36442)*x19868))+(((-1.0)*sj12*x19879)));
evalcond[5]=(((r10*x19881))+(((-1.0)*(1.0)*py))+((r12*x19878))+(((0.069)*x19866))+((r11*x19880))+(((0.36442)*x19876))+(((-1.0)*r11*x19882))+x19879+(((-1.0)*r10*x19883))+(((-1.0)*cj12*sj11*x19879))+((r12*x19877)));
evalcond[6]=((((-1.0)*r10*x19890))+(((-1.0)*r10*x19892))+(((-1.0)*sj11*x19865))+((r11*x19886))+x19866+(((-1.0)*r11*x19891))+(((-1.0)*r12*x19885))+((r11*x19887))+((r10*x19888))+(((-1.0)*r12*x19889)));
evalcond[7]=(((r01*x19887))+(((-1.0)*r01*x19891))+(((-1.0)*r02*x19889))+(((-1.0)*x19884))+((r00*x19888))+(((-1.0)*r00*x19890))+(((-1.0)*r02*x19885))+(((-1.0)*sj12*x19864))+((r01*x19886))+(((-1.0)*r00*x19892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x19893=cj11*cj11;
IkReal x19894=(cj12*cj14*cj16);
IkReal x19895=((1.0)*r01);
IkReal x19896=(cj12*cj14*sj16);
IkReal x19897=(cj12*sj14*sj15);
IkReal x19898=(cj14*sj11*sj12*sj16);
IkReal x19899=(sj11*sj12*sj14*sj15);
IkReal x19900=(cj12*cj15*cj16*sj14);
IkReal x19901=((1.0)*r00);
IkReal x19902=(cj12*cj15*sj14*sj16);
IkReal x19903=((1.0)*r10);
IkReal x19904=(cj14*cj16*sj11*sj12);
IkReal x19905=(cj15*cj16*sj11*sj12*sj14);
IkReal x19906=(cj15*sj11*sj12*sj14*sj16);
CheckValue<IkReal> x19907=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x19893))+((x19893*(cj12*cj12))))),-1);
if(!x19907.valid){
continue;
}
CheckValue<IkReal> x19908 = IKatan2WithCheck(IkReal(((((-1.0)*x19903*x19904))+((r11*x19898))+(((-1.0)*x19901*x19902))+((r12*x19899))+((r00*x19894))+((r11*x19905))+((r10*x19906))+(((-1.0)*x19895*x19900))+(((-1.0)*r02*x19897))+(((-1.0)*x19895*x19896)))),IkReal((((r11*x19900))+(((-1.0)*x19894*x19903))+((r11*x19896))+((r01*x19905))+((r01*x19898))+(((-1.0)*x19901*x19904))+((r00*x19906))+((r10*x19902))+((r02*x19899))+((r12*x19897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x19908.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x19907.value)))+(x19908.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break;
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x19909=IKcos(j10);
IkReal x19910=(cj14*cj16);
IkReal x19911=((1.0)*cj14*sj16);
IkReal x19912=((1.0)*sj14*sj15);
IkReal x19913=IKsin(j10);
IkReal x19914=((1.0)*cj15*cj16*sj14);
IkReal x19915=((1.0)*cj15*sj14*sj16);
IkReal x19916=((1.0)*x19913);
IkReal x19917=(cj12*x19916);
IkReal x19918=(sj12*x19909);
IkReal x19919=(cj13*cj15);
IkReal x19920=(cj11*x19909);
IkReal x19921=(sj13*sj14*sj16);
IkReal x19922=((1.0)*cj13*cj16*sj15);
IkReal x19923=((1.0)*cj13*sj15*sj16);
IkReal x19924=((1.0)*cj14*sj13*sj15);
IkReal x19925=((1.0)*cj16*sj13*sj14);
IkReal x19926=((1.0)*cj14*cj15*cj16*sj13);
IkReal x19927=((1.0)*cj14*cj15*sj13*sj16);
IkReal x19928=(cj11*x19913);
IkReal x19929=((0.37429)*cj15);
IkReal x19930=((0.01)*sj15);
IkReal x19931=((0.069)*x19913);
IkReal x19932=((0.01)*cj15*cj16);
IkReal x19933=((0.01)*cj15*sj16);
IkReal x19934=((0.37429)*cj16*sj15);
IkReal x19935=((0.37429)*sj15*sj16);
IkReal x19936=(cj12*sj11*x19909);
IkReal x19937=((1.0)*cj15*sj13);
IkReal x19938=(cj13*sj14*sj16);
IkReal x19939=(cj16*sj13*sj15);
IkReal x19940=(sj13*sj15*sj16);
IkReal x19941=((1.0)*cj13*cj14*sj15);
IkReal x19942=((1.0)*cj13*cj16*sj14);
IkReal x19943=((1.0)*cj13*cj14*cj15*cj16);
IkReal x19944=((1.0)*cj13*cj14*cj15*sj16);
evalcond[0]=(((sj11*sj12*x19913))+(((-1.0)*r12*x19912))+((cj12*x19909))+(((-1.0)*r10*x19915))+(((-1.0)*r11*x19914))+(((-1.0)*r11*x19911))+((r10*x19910)));
evalcond[1]=((((-1.0)*r00*x19915))+((sj11*x19918))+((r00*x19910))+(((-1.0)*r02*x19912))+(((-1.0)*r01*x19911))+(((-1.0)*r01*x19914))+(((-1.0)*x19917)));
evalcond[2]=((((-1.0)*r01*x19926))+(((-1.0)*r00*x19927))+(((-1.0)*x19920))+(((-1.0)*r00*x19925))+(((-1.0)*r02*x19924))+((r01*x19921))+(((-1.0)*r01*x19922))+(((-1.0)*r00*x19923))+((r02*x19919)));
evalcond[3]=(((r11*x19921))+(((-1.0)*r11*x19926))+(((-1.0)*r10*x19927))+((r12*x19919))+(((-1.0)*r10*x19925))+(((-1.0)*x19928))+(((-1.0)*r12*x19924))+(((-1.0)*r10*x19923))+(((-1.0)*r11*x19922)));
evalcond[4]=((((-1.0)*(1.0)*px))+((r02*x19930))+(((0.36442)*x19920))+(((0.069)*x19909))+((r00*x19933))+((r01*x19932))+(((-1.0)*r00*x19935))+(((-0.069)*x19936))+(((-1.0)*sj12*x19931))+((r02*x19929))+(((-1.0)*r01*x19934)));
evalcond[5]=(((r12*x19930))+(((-1.0)*(1.0)*py))+x19931+(((-1.0)*r11*x19934))+((r11*x19932))+(((-1.0)*cj12*sj11*x19931))+((r10*x19933))+(((-1.0)*r10*x19935))+(((0.069)*x19918))+(((0.36442)*x19928))+((r12*x19929)));
evalcond[6]=((((-1.0)*r12*x19937))+(((-1.0)*sj11*x19917))+((r10*x19940))+x19918+((r11*x19939))+(((-1.0)*r10*x19944))+(((-1.0)*r11*x19943))+((r11*x19938))+(((-1.0)*r12*x19941))+(((-1.0)*r10*x19942)));
evalcond[7]=(((r01*x19939))+(((-1.0)*r00*x19944))+((r00*x19940))+(((-1.0)*r00*x19942))+((r01*x19938))+(((-1.0)*r02*x19937))+(((-1.0)*r02*x19941))+(((-1.0)*x19936))+(((-1.0)*r01*x19943))+(((-1.0)*sj12*x19916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - baxter (759845bd189e0dd2300e96cbc76792f1)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
