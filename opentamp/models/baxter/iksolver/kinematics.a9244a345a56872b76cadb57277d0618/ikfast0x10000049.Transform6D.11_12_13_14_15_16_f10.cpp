/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-03-31 17:15:29.972193
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[3]);
x1=IKcos(j[4]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[4]);
x5=IKcos(j[6]);
x6=IKcos(j[5]);
x7=IKsin(j[1]);
x8=IKsin(j[3]);
x9=IKsin(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[6]);
x12=IKcos(j[0]);
x13=IKsin(j[0]);
x14=((0.069)*x2);
x15=((0.38722)*x1);
x16=((1.0)*x3);
x17=((1.0)*x5);
x18=((1.0)*x9);
x19=((0.38722)*x3);
x20=((0.37429)*x3);
x21=((1.0)*x11);
x22=((1.0)*x4);
x23=((1.0)*x6);
x24=(x10*x8);
x25=(x3*x4);
x26=(x7*x8);
x27=(x2*x8);
x28=(x10*x3);
x29=(x0*x7);
x30=(x0*x10);
x31=(x1*x2);
x32=((1.0)*x30);
x33=((0.01)*x25);
x34=((0.37429)*x27);
x35=(x10*x2*x4);
x36=(x0*x31);
x37=(x2*x4*x7);
x38=((1.0)*x31*x7);
x39=(x18*x27);
x40=((0.01)*x36);
x41=((0.38722)*x27*x6);
x42=(x10*x2*x22);
x43=((((-1.0)*x32))+((x26*x3)));
x44=(x36+x25);
x45=(((x0*x28))+(((-1.0)*x26)));
x46=((((-1.0)*x0*x2*x22))+((x1*x16)));
x47=((((-1.0)*x24))+(((-1.0)*x16*x29)));
x48=(((x19*x4))+((x0*x15*x2)));
x49=(x1*x45);
x50=((((-1.0)*x29))+(((-1.0)*x16*x24)));
x51=(x43*x9);
x52=(x44*x6);
x53=(x48*x9);
x54=((((-1.0)*x39))+x52);
x55=(((x10*x31))+((x4*x45)));
x56=(x39+(((-1.0)*x23*x44)));
x57=(x37+((x1*x47)));
x58=(x11*x56);
x59=(x33+x34+x40+x41+x14);
x60=(((x57*x9))+((x6*(((((-1.0)*x16*x26))+x32)))));
x61=(((x5*((((x57*x6))+x51))))+((x11*(((((-1.0)*x22*x47))+x38)))));
x62=(((x11*(((((-1.0)*x18*x43))+(((-1.0)*x23*x57))))))+((x5*(((((-1.0)*x4*x47))+x38)))));
IkReal x64=((1.0)*x26);
x63=((((0.37429)*x30))+((x6*(((((-1.0)*x19*x64))+(((0.38722)*x30))))))+((x1*(((((-0.01)*x24))+(((-0.01)*x29*x3))))))+(((-1.0)*x20*x64))+(((0.01)*x37))+((x9*((((x15*x47))+(((0.38722)*x37))))))+(((-0.069)*x3*x7))+(((0.36442)*x10)));
eerot[0]=(((x13*(((((-1.0)*x21*x46))+(((-1.0)*x17*x54))))))+((x12*x61)));
eerot[1]=(((x12*x62))+((x13*(((((-1.0)*x17*x46))+(((-1.0)*x21*x56)))))));
eerot[2]=(((x12*x60))+((x13*(((((-1.0)*x18*x44))+(((-1.0)*x23*x27)))))));
eetrans[0]=((0.0557)+((x12*x63))+((x13*(((((-1.0)*x18*x48))+(((-1.0)*x59))))))+(((0.069)*x12)));
eerot[3]=(((x13*x61))+((x12*((((x11*x46))+((x5*x54)))))));
eerot[4]=(((x13*x62))+((x12*((((x46*x5))+x58)))));
eerot[5]=(((x12*((((x27*x6))+((x44*x9))))))+((x13*x60)));
eetrans[1]=(((x13*x63))+(((0.069)*x13))+((x12*((x59+x53)))));
eerot[6]=((((-1.0)*x5*((((x18*x50))+((x23*(((((-1.0)*x42))+x49))))))))+((x11*x55)));
eerot[7]=(((x11*((((x50*x9))+((x6*(((((-1.0)*x35))+x49))))))))+((x5*x55)));
eerot[8]=(((x50*x6))+((x9*(((((-1.0)*x49))+x42)))));
IkReal x65=((1.0)*x24);
eetrans[2]=((0.28139)+((x9*(((((-1.0)*x15*x45))+(((0.38722)*x35))))))+((x6*(((((-1.0)*x19*x65))+(((-0.38722)*x29))))))+(((-0.37429)*x29))+(((-1.0)*x20*x65))+(((-0.36442)*x7))+(((-0.069)*x28))+(((0.01)*x35))+((x1*(((((-0.01)*x0*x28))+(((0.01)*x26)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j10,cj10,sj10,htj10,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij10[2], _nj10;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1;  _ij10[0] = -1; _ij10[1] = -1; _nj10 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j10=pfree[0]; cj10=cos(pfree[0]); sj10=sin(pfree[0]), htj10=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-1.0)*r11*(IKsin(j10))))+(((-1.0)*r01*(IKcos(j10)))));
new_r01=(((r10*(IKsin(j10))))+((r00*(IKcos(j10)))));
new_r02=(((r12*(IKsin(j10))))+((r02*(IKcos(j10)))));
IkReal x66=IKcos(j10);
IkReal x67=IKsin(j10);
new_px=((-0.069)+(((-0.0557)*x66))+((px*x66))+(((-0.38722)*r02*x66))+(((-0.38722)*r12*x67))+((py*x67)));
new_r10=r21;
new_r11=((-1.0)*r20);
new_r12=((-1.0)*r22);
new_py=((0.28139)+(((-1.0)*pz))+(((0.38722)*r22)));
new_r20=((((-1.0)*r11*(IKcos(j10))))+((r01*(IKsin(j10)))));
new_r21=(((r10*(IKcos(j10))))+(((-1.0)*r00*(IKsin(j10)))));
new_r22=(((r12*(IKcos(j10))))+(((-1.0)*r02*(IKsin(j10)))));
IkReal x68=IKsin(j10);
IkReal x69=IKcos(j10);
new_pz=((((0.38722)*r02*x68))+(((0.0557)*x68))+(((-1.0)*px*x68))+(((-0.38722)*r12*x69))+((py*x69)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x70=((1.0)*px);
IkReal x71=((1.0)*pz);
IkReal x72=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x72))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x71)));
rxp0_2=((((-1.0)*r10*x70))+((py*r00)));
rxp1_0=((((-1.0)*r21*x72))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x71)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x70)));
rxp2_0=((((-1.0)*r22*x72))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x71)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x70)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x73=((3.47000724e-5)*r00);
IkReal x74=((0.00347000724)*rxp2_0);
IkReal x75=((1.15695523197e-5)*r22);
IkReal x76=((3.47000724e-5)*r10);
IkReal x77=((0.00347000724)*rxp2_1);
IkReal x78=((0.00356398938)*pz);
IkReal x79=((9.522e-5)*rxp0_2);
IkReal x80=((3.56398938e-5)*r21);
IkReal x81=((6.94001448e-5)*r11);
IkReal x82=((0.00019044)*rxp1_2);
IkReal x83=((7.12797876e-5)*r20);
IkReal x84=((1.33586256645916)*pp);
IkReal x85=((0.0267172513291833)*npy);
IkReal x86=((1.0)*npz);
IkReal x87=((7.12797876e-5)*r22);
IkReal x88=((2.31391046394e-5)*r21);
IkReal x89=((0.00694001448)*rxp1_1);
IkReal x90=((0.01388002896)*rxp0_1);
IkReal x91=((4.62782092788e-5)*r20);
IkReal x92=((0.00694001448)*rxp1_0);
IkReal x93=((4.0)*npx);
IkReal x94=((2.0)*npy);
IkReal x95=((0.0534345026583665)*npz);
IkReal x96=((6.94001448e-5)*r01);
IkReal x97=((0.0534345026583665)*npx);
IkReal x98=((0.009522)*npz*pz);
IkReal x99=((0.004761)*pp*r22);
IkReal x100=((-0.0534345026583665)*npx);
IkReal x101=((0.019044)*npy*pz);
IkReal x102=((0.009522)*pp*r21);
IkReal x103=((-0.00694001448)*rxp1_0);
IkReal x104=((0.038088)*npx*pz);
IkReal x105=((0.019044)*pp*r20);
IkReal x106=(x94+(((-1.0)*x95)));
IkReal x107=((((-1.0)*x73))+x74);
IkReal x108=((((-1.0)*x74))+x73);
IkReal x109=((-6.94001448e-5)*r01);
IkReal x110=((0.00351340898768335)+x84);
IkReal x111=(x74+x73);
IkReal x112=((((-1.0)*x94))+(((-1.0)*x95)));
IkReal x113=((-1.0)*x111);
IkReal x114=(x79+x80);
IkReal x115=(x82+x81);
IkReal x116=(npz+x110);
IkReal x117=(x79+x78);
IkReal x118=(x77+x76);
IkReal x119=(x78+x80);
IkReal x120=(x116+(((-1.0)*x85)));
IkReal x121=(x75+x98);
IkReal x122=(x104+x91);
IkReal x123=(x79+x99);
IkReal x124=(x102+x87);
IkReal x125=(x101+x88);
IkReal x126=(x78+x99);
IkReal x127=(x80+x99);
IkReal x128=(x110+(((-1.0)*x86))+(((-1.0)*x85)));
IkReal x129=(x110+x85+(((-1.0)*x86)));
IkReal x130=(x116+x85);
op[0]=x113;
op[1]=((((-1.0)*x118))+(((-1.0)*x126))+x121+x114);
op[2]=x96;
op[3]=(x83+x81+(((-1.0)*x82)));
op[4]=x108;
op[5]=((((-1.0)*x77))+(((-1.0)*x114))+(((-1.0)*x126))+x121+x76);
op[6]=((((-1.0)*x114))+(((-1.0)*x118))+(((-1.0)*x121))+x126);
op[7]=x111;
op[8]=(x115+(((-1.0)*x83)));
op[9]=x109;
op[10]=((((-1.0)*x77))+(((-1.0)*x121))+x126+x114+x76);
op[11]=x107;
op[12]=x128;
op[13]=x128;
op[14]=x100;
op[15]=x100;
op[16]=x129;
op[17]=x129;
op[18]=0;
op[19]=x128;
op[20]=0;
op[21]=x100;
op[22]=0;
op[23]=x129;
op[24]=x92;
op[25]=((((-1.0)*x125))+x124+x89);
op[26]=((0.01388002896)*rxp0_0);
op[27]=((((-1.0)*x122))+x105+x90);
op[28]=x103;
op[29]=((((-1.0)*x102))+x125+x87+(((-1.0)*x89)));
op[30]=((((-1.0)*x124))+x125+x89);
op[31]=x103;
op[32]=((((-1.0)*x105))+x122+x90);
op[33]=((-0.01388002896)*rxp0_0);
op[34]=((((-1.0)*x125))+x102+(((-1.0)*x89))+(((-1.0)*x87)));
op[35]=x92;
op[36]=x106;
op[37]=x106;
op[38]=x93;
op[39]=x93;
op[40]=x112;
op[41]=x112;
op[42]=0;
op[43]=x106;
op[44]=0;
op[45]=x93;
op[46]=0;
op[47]=x112;
op[48]=x107;
op[49]=((((-1.0)*x76))+(((-1.0)*x119))+(((-1.0)*x121))+x123+x77);
op[50]=x96;
op[51]=(x81+(((-1.0)*x83))+(((-1.0)*x82)));
op[52]=x111;
op[53]=((((-1.0)*x117))+(((-1.0)*x121))+x127+x118);
op[54]=((((-1.0)*x76))+(((-1.0)*x123))+x121+x119+x77);
op[55]=x108;
op[56]=(x115+x83);
op[57]=x109;
op[58]=((((-1.0)*x127))+x121+x117+x118);
op[59]=x113;
op[60]=x130;
op[61]=x130;
op[62]=x97;
op[63]=x97;
op[64]=x120;
op[65]=x120;
op[66]=0;
op[67]=x130;
op[68]=0;
op[69]=x97;
op[70]=0;
op[71]=x120;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j15array[16], cj15array[16], sj15array[16], j16array[16], cj16array[16], sj16array[16], j11array[16], cj11array[16], sj11array[16];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ij15 += 3)
{
IkReal htj15 = zeror[ij15+0], htj16 = zeror[ij15+1], htj11 = zeror[ij15+2];
if(isnan(htj15)||isnan(htj16)||isnan(htj11)){
continue;
}
j15array[numsolutions]=((2.0)*(atan(htj15)));
j16array[numsolutions]=((2.0)*(atan(htj16)));
j11array[numsolutions]=((2.0)*(atan(htj11)));
if(isinf(htj15)){
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
}
else{
IkReal x131=htj15*htj15;
CheckValue<IkReal> x132=IKPowWithIntegerCheck(((1.0)+x131),-1);
if(!x132.valid){
continue;
}
cj15array[numsolutions]=((x132.value)*(((1.0)+(((-1.0)*x131)))));
CheckValue<IkReal> x133=IKPowWithIntegerCheck(((1.0)+(htj15*htj15)),-1);
if(!x133.valid){
continue;
}
sj15array[numsolutions]=((2.0)*htj15*(x133.value));
}
if(isinf(htj16)){
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
}
else{
IkReal x134=htj16*htj16;
CheckValue<IkReal> x135=IKPowWithIntegerCheck(((1.0)+x134),-1);
if(!x135.valid){
continue;
}
cj16array[numsolutions]=((x135.value)*(((1.0)+(((-1.0)*x134)))));
CheckValue<IkReal> x136=IKPowWithIntegerCheck(((1.0)+(htj16*htj16)),-1);
if(!x136.valid){
continue;
}
sj16array[numsolutions]=((2.0)*htj16*(x136.value));
}
if(isinf(htj11)){
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
}
else{
IkReal x137=htj11*htj11;
CheckValue<IkReal> x138=IKPowWithIntegerCheck(((1.0)+x137),-1);
if(!x138.valid){
continue;
}
cj11array[numsolutions]=((x138.value)*(((1.0)+(((-1.0)*x137)))));
CheckValue<IkReal> x139=IKPowWithIntegerCheck(((1.0)+(htj11*htj11)),-1);
if(!x139.valid){
continue;
}
sj11array[numsolutions]=((2.0)*htj11*(x139.value));
}
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j15valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj15 = 16;
_nj16 = 1;
_nj11 = 1;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
_ij16[0] = 0; _ij16[1] = -1;
_ij11[0] = 0; _ij11[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( !j15valid[iij15] ) { continue; }
if( IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(cj16array[ij15]-cj16array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij15]-sj16array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(cj11array[ij15]-cj11array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij15]-sj11array[iij15]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j15valid[iij15]=false; _ij15[1] = iij15; _ij16[1] = 0; _ij11[1] = 0;  break; 
}
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

    j16 = j16array[ij15]; cj16 = cj16array[ij15]; sj16 = sj16array[ij15];

    j11 = j11array[ij15]; cj11 = cj11array[ij15]; sj11 = sj11array[ij15];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j14eval[1];
IkReal x140=((16.0)*cj11);
IkReal x141=(r02*sj15);
IkReal x142=((8.0)*cj15);
IkReal x143=(r10*sj11);
IkReal x144=(cj16*r01);
IkReal x145=((16.0)*sj11);
IkReal x146=(cj16*r11);
IkReal x147=((4.0)*cj16);
IkReal x148=(r00*sj16);
IkReal x149=(r12*sj15);
IkReal x150=((4.0)*sj16);
IkReal x151=(((r11*sj11*x150))+((cj11*r01*x150)));
IkReal x152=(((cj11*r00*x147))+((x143*x147)));
j14eval[0]=((((0.5)*(IKabs(((((-1.0)*x151))+x152)))))+(((0.5)*(IKabs(((((-1.0)*x140*x141))+(((-16.0)*cj15*sj16*x143))+(((-1.0)*x145*x149))+(((-1.0)*cj15*x145*x146))+(((-1.0)*cj15*x140*x144))+(((-1.0)*cj15*x140*x148)))))))+(IKabs(((((-8.0)*sj11*x149))+(((-1.0)*cj11*x142*x144))+(((-1.0)*cj11*x142*x148))+(((-1.0)*sj11*x142*x146))+(((-8.0)*cj11*x141))+(((-1.0)*sj16*x142*x143)))))+(IKabs(((((-1.0)*x152))+x151))));
if( IKabs(j14eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x153=((8.0)*sj11);
IkReal x154=(r12*sj15);
IkReal x155=(cj15*sj16);
IkReal x156=((8.0)*cj11);
IkReal x157=(cj15*cj16);
IkReal x158=((16.0)*cj11);
IkReal x159=((16.0)*sj11);
IkReal x160=((4.0)*sj11);
IkReal x161=((4.0)*cj11);
IkReal x162=(cj11*r02*sj15);
IkReal x163=(((cj16*r10*x160))+((cj16*r00*x161)));
IkReal x164=(((r11*sj16*x160))+((r01*sj16*x161)));
IkReal x165=((((-1.0)*x163))+x164);
IkReal x166=((((-1.0)*x164))+x163);
IkReal x167=((((-1.0)*r02*sj15*x156))+(((-1.0)*x153*x154))+(((-1.0)*r01*x156*x157))+(((-1.0)*r10*x153*x155))+(((-1.0)*r11*x153*x157))+(((-1.0)*r00*x155*x156)));
op[0]=x165;
op[1]=x167;
op[2]=x165;
op[3]=((((-1.0)*x154*x159))+(((-1.0)*r02*sj15*x158))+(((-1.0)*r10*x155*x159))+(((-1.0)*r11*x157*x159))+(((-1.0)*r01*x157*x158))+(((-1.0)*r00*x155*x158)));
op[4]=x166;
op[5]=x167;
op[6]=x166;
polyroots6(op,zeror,numroots);
IkReal j14array[6], cj14array[6], sj14array[6], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IkReal htj14 = zeror[ij14];
tempj14array[0]=((2.0)*(atan(htj14)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
numsolutions++;
}
}
bool j14valid[6]={true,true,true,true,true,true};
_nj14 = 6;
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
if( !j14valid[ij14] )
{
    continue;
}
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
htj14 = IKtan(j14/2);

_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < numsolutions; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
{
IkReal j12eval[1];
j12eval[0]=sj11;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
j12eval[0]=cj11;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x168=((1.0)*sj15);
IkReal x169=(cj16*r11);
IkReal x170=((1.0)*r10);
IkReal x171=(cj14*cj15);
if( IKabs((((r11*sj14*sj16))+(((-1.0)*x169*x171))+(((-1.0)*cj16*sj14*x170))+(((-1.0)*cj14*r12*x168))+(((-1.0)*sj16*x170*x171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj16*x168))+((cj15*r12))+(((-1.0)*x168*x169)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj14*sj16))+(((-1.0)*x169*x171))+(((-1.0)*cj16*sj14*x170))+(((-1.0)*cj14*r12*x168))+(((-1.0)*sj16*x170*x171))))+IKsqr(((((-1.0)*r10*sj16*x168))+((cj15*r12))+(((-1.0)*x168*x169))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r11*sj14*sj16))+(((-1.0)*x169*x171))+(((-1.0)*cj16*sj14*x170))+(((-1.0)*cj14*r12*x168))+(((-1.0)*sj16*x170*x171))), ((((-1.0)*r10*sj16*x168))+((cj15*r12))+(((-1.0)*x168*x169))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x172=IKcos(j13);
IkReal x173=(r12*sj15);
IkReal x174=((1.0)*cj14);
IkReal x175=((0.01)*cj15);
IkReal x176=(cj16*r11);
IkReal x177=(r10*sj16);
evalcond[0]=(((sj15*x177))+((sj15*x176))+x172+(((-1.0)*cj15*r12)));
evalcond[1]=((0.36442)+((x175*x176))+((x175*x177))+(((-1.0)*py))+(((0.01)*x173))+(((0.37429)*x172)));
evalcond[2]=(((r11*sj14*sj16))+(((-1.0)*cj16*r10*sj14))+(((-1.0)*(IKsin(j13))))+(((-1.0)*cj15*x174*x177))+(((-1.0)*cj15*x174*x176))+(((-1.0)*x173*x174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[3];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
IkReal x178=(sj15*sj16);
IkReal x179=(cj16*sj15);
j12eval[0]=sj13;
j12eval[1]=((IKabs(((((-1.0)*r20*x178))+((cj15*r22))+(((-1.0)*r21*x179)))))+(IKabs((((r00*x178))+((r01*x179))+(((-1.0)*cj15*r02))))));
j12eval[2]=IKsign(sj13);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j12eval[0]=sj13;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j12eval[0]=((1.0)+(((5.42449275362319)*sj13)));
j12eval[1]=sj13;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.184349034171364)+sj13)))+(IKabs(((-1.0)+(IKsign(cj13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x180=((5.42449275)*cj15);
IkReal x181=((5.42449275)*sj15*sj16);
IkReal x182=((5.42449275)*cj16*sj15);
if( IKabs(((((-1.0)*r22*x180))+((r20*x181))+((r21*x182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x182))+(((-1.0)*r00*x181))+((r02*x180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x180))+((r20*x181))+((r21*x182))))+IKsqr(((((-1.0)*r01*x182))+(((-1.0)*r00*x181))+((r02*x180))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x180))+((r20*x181))+((r21*x182))), ((((-1.0)*r01*x182))+(((-1.0)*r00*x181))+((r02*x180))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x183=IKsin(j12);
IkReal x184=IKcos(j12);
IkReal x185=(cj15*sj14);
IkReal x186=(r20*sj16);
IkReal x187=((0.01)*cj15);
IkReal x188=(cj16*r21);
IkReal x189=(r22*sj15);
IkReal x190=((1.0)*cj15);
IkReal x191=(r00*sj16);
IkReal x192=(cj16*r01);
IkReal x193=((1.0)*cj14);
IkReal x194=(r02*sj15);
IkReal x195=(r21*sj16);
IkReal x196=(r01*sj16);
IkReal x197=(cj16*x193);
IkReal x198=((1.0)*cj16*sj14);
evalcond[0]=((((-1.0)*r22*x190))+(((-0.184349034294497)*x183))+((sj15*x188))+((sj15*x186)));
evalcond[1]=(((sj15*x192))+((sj15*x191))+(((-1.0)*r02*x190))+(((0.184349034294497)*x184)));
evalcond[2]=((((-4.60872585736242e-11)*x183))+((x186*x187))+((x187*x188))+(((-1.0)*pz))+(((0.01)*x189)));
evalcond[3]=(((x187*x192))+((x187*x191))+(((4.60872585736242e-11)*x184))+(((-1.0)*px))+(((0.01)*x194)));
evalcond[4]=(((x185*x186))+((x185*x188))+(((-1.0)*x184))+((sj14*x189))+(((-1.0)*r20*x197))+((cj14*x195)));
evalcond[5]=((((-1.0)*r00*x197))+(((-1.0)*x183))+((x185*x191))+((x185*x192))+((sj14*x194))+((cj14*x196)));
evalcond[6]=((((-1.0)*cj14*x188*x190))+(((-1.0)*x189*x193))+(((0.98286084)*x183))+((sj14*x195))+(((-1.0)*cj14*x186*x190))+(((-1.0)*r20*x198)));
evalcond[7]=((((-1.0)*r00*x198))+(((-1.0)*cj14*x190*x191))+(((-1.0)*cj14*x190*x192))+(((-0.98286084)*x184))+((sj14*x196))+(((-1.0)*x193*x194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj13)))))+(IKabs(((0.184349034171364)+sj13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x199=((5.42449275)*cj15);
IkReal x200=((5.42449275)*sj15*sj16);
IkReal x201=((5.42449275)*cj16*sj15);
if( IKabs(((((-1.0)*r22*x199))+((r20*x200))+((r21*x201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x201))+((r02*x199))+(((-1.0)*r00*x200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x199))+((r20*x200))+((r21*x201))))+IKsqr(((((-1.0)*r01*x201))+((r02*x199))+(((-1.0)*r00*x200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x199))+((r20*x200))+((r21*x201))), ((((-1.0)*r01*x201))+((r02*x199))+(((-1.0)*r00*x200))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x202=IKsin(j12);
IkReal x203=IKcos(j12);
IkReal x204=(cj15*sj14);
IkReal x205=(r20*sj16);
IkReal x206=((0.01)*cj15);
IkReal x207=(cj16*r21);
IkReal x208=(r22*sj15);
IkReal x209=((1.0)*cj15);
IkReal x210=(r00*sj16);
IkReal x211=(cj16*r01);
IkReal x212=((1.0)*cj14);
IkReal x213=(r02*sj15);
IkReal x214=(r21*sj16);
IkReal x215=(r01*sj16);
IkReal x216=(cj16*x212);
IkReal x217=((1.0)*cj16*sj14);
evalcond[0]=((((-1.0)*r22*x209))+(((-0.184349034294497)*x202))+((sj15*x207))+((sj15*x205)));
evalcond[1]=((((-1.0)*r02*x209))+(((0.184349034294497)*x203))+((sj15*x210))+((sj15*x211)));
evalcond[2]=(((x205*x206))+(((-4.60872585736242e-11)*x202))+(((-1.0)*pz))+(((0.01)*x208))+((x206*x207)));
evalcond[3]=(((x206*x211))+((x206*x210))+(((0.01)*x213))+(((-1.0)*px))+(((4.60872585736242e-11)*x203)));
evalcond[4]=((((-1.0)*r20*x216))+((sj14*x208))+((x204*x207))+((x204*x205))+((cj14*x214))+(((-1.0)*x203)));
evalcond[5]=(((x204*x210))+((x204*x211))+((sj14*x213))+((cj14*x215))+(((-1.0)*r00*x216))+(((-1.0)*x202)));
evalcond[6]=((((-1.0)*r20*x217))+((sj14*x214))+(((-1.0)*cj14*x207*x209))+(((-0.98286084)*x202))+(((-1.0)*cj14*x205*x209))+(((-1.0)*x208*x212)));
evalcond[7]=((((-1.0)*cj14*x209*x211))+(((-1.0)*cj14*x209*x210))+((sj14*x215))+(((-1.0)*r00*x217))+(((0.98286084)*x203))+(((-1.0)*x212*x213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x218=((0.144927536231884)*cj15);
IkReal x219=((0.144927536231884)*sj15);
if( IKabs(((((-1.0)*r20*sj16*x218))+(((-1.0)*r22*x219))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-14.4927536231884)*px))+((r00*sj16*x218))+((r02*x219))+((cj16*r01*x218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj16*x218))+(((-1.0)*r22*x219))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x218))))+IKsqr(((((-14.4927536231884)*px))+((r00*sj16*x218))+((r02*x219))+((cj16*r01*x218))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r20*sj16*x218))+(((-1.0)*r22*x219))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x218))), ((((-14.4927536231884)*px))+((r00*sj16*x218))+((r02*x219))+((cj16*r01*x218))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x220=IKcos(j12);
IkReal x221=IKsin(j12);
IkReal x222=(cj15*sj14);
IkReal x223=(r20*sj16);
IkReal x224=((1.0)*cj16);
IkReal x225=(cj14*r00);
IkReal x226=((0.01)*cj15);
IkReal x227=(cj16*r21);
IkReal x228=(r22*sj15);
IkReal x229=(cj16*r01);
IkReal x230=((1.0)*cj14);
IkReal x231=(r00*sj16);
IkReal x232=(cj14*r01);
IkReal x233=(cj14*r21);
IkReal x234=(r02*sj15);
IkReal x235=(sj14*sj16);
IkReal x236=((1.0)*x220);
evalcond[0]=((((0.069)*x221))+((x223*x226))+(((0.01)*x228))+(((-1.0)*pz))+((x226*x227)));
evalcond[1]=(((x226*x231))+(((-1.0)*px))+(((-0.069)*x220))+(((0.01)*x234))+((x226*x229)));
evalcond[2]=(((x222*x223))+((x222*x227))+(((-1.0)*x236))+(((-1.0)*cj14*r20*x224))+((sj16*x233))+((sj14*x228)));
evalcond[3]=((((-1.0)*x224*x225))+((x222*x229))+((sj14*x234))+((x222*x231))+((sj16*x232))+(((-1.0)*x221)));
evalcond[4]=((((-1.0)*cj15*x224*x233))+(((-1.0)*cj15*x223*x230))+x221+(((-1.0)*r20*sj14*x224))+((r21*x235))+(((-1.0)*x228*x230)));
evalcond[5]=((((-1.0)*cj15*x224*x232))+(((-1.0)*x230*x234))+(((-1.0)*x236))+((r01*x235))+(((-1.0)*r00*sj14*x224))+(((-1.0)*cj15*sj16*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x237=((0.144927536231884)*cj15);
IkReal x238=((0.144927536231884)*sj15);
if( IKabs(((((-1.0)*r22*x238))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x237))+(((-1.0)*r20*sj16*x237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-14.4927536231884)*px))+((r02*x238))+((cj16*r01*x237))+((r00*sj16*x237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x238))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x237))+(((-1.0)*r20*sj16*x237))))+IKsqr(((((-14.4927536231884)*px))+((r02*x238))+((cj16*r01*x237))+((r00*sj16*x237))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x238))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x237))+(((-1.0)*r20*sj16*x237))), ((((-14.4927536231884)*px))+((r02*x238))+((cj16*r01*x237))+((r00*sj16*x237))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x239=IKcos(j12);
IkReal x240=IKsin(j12);
IkReal x241=(cj15*sj14);
IkReal x242=(r20*sj16);
IkReal x243=((1.0)*cj16);
IkReal x244=(cj14*r00);
IkReal x245=((0.01)*cj15);
IkReal x246=(cj16*r21);
IkReal x247=(r22*sj15);
IkReal x248=(cj16*r01);
IkReal x249=((1.0)*cj14);
IkReal x250=(r00*sj16);
IkReal x251=(cj14*r01);
IkReal x252=(cj14*r21);
IkReal x253=(r02*sj15);
IkReal x254=(sj14*sj16);
IkReal x255=((1.0)*x240);
evalcond[0]=((((-1.0)*pz))+((x242*x245))+((x245*x246))+(((0.01)*x247))+(((0.069)*x240)));
evalcond[1]=(((x245*x250))+(((0.01)*x253))+(((-1.0)*px))+((x245*x248))+(((-0.069)*x239)));
evalcond[2]=(((sj14*x247))+((x241*x246))+((x241*x242))+((sj16*x252))+(((-1.0)*cj14*r20*x243))+(((-1.0)*x239)));
evalcond[3]=(((x241*x250))+(((-1.0)*x243*x244))+((x241*x248))+((sj16*x251))+((sj14*x253))+(((-1.0)*x255)));
evalcond[4]=(((r01*x254))+(((-1.0)*cj15*x243*x251))+x239+(((-1.0)*cj15*sj16*x244))+(((-1.0)*r00*sj14*x243))+(((-1.0)*x249*x253)));
evalcond[5]=(((r21*x254))+(((-1.0)*cj15*x242*x249))+(((-1.0)*cj15*x243*x252))+(((-1.0)*r20*sj14*x243))+(((-1.0)*x247*x249))+(((-1.0)*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x256=((0.01)*cj15);
CheckValue<IkReal> x257=IKPowWithIntegerCheck(((0.069)+(((0.37429)*sj13))),-1);
if(!x257.valid){
continue;
}
CheckValue<IkReal> x258=IKPowWithIntegerCheck(sj13,-1);
if(!x258.valid){
continue;
}
if( IKabs(((x257.value)*(((((-1.0)*cj16*r21*x256))+(((-1.0)*r20*sj16*x256))+(((-0.01)*r22*sj15))+pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x258.value)*((((r00*sj15*sj16))+(((-1.0)*cj15*r02))+((cj16*r01*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x257.value)*(((((-1.0)*cj16*r21*x256))+(((-1.0)*r20*sj16*x256))+(((-0.01)*r22*sj15))+pz))))+IKsqr(((x258.value)*((((r00*sj15*sj16))+(((-1.0)*cj15*r02))+((cj16*r01*sj15))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x257.value)*(((((-1.0)*cj16*r21*x256))+(((-1.0)*r20*sj16*x256))+(((-0.01)*r22*sj15))+pz))), ((x258.value)*((((r00*sj15*sj16))+(((-1.0)*cj15*r02))+((cj16*r01*sj15))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x259=IKsin(j12);
IkReal x260=IKcos(j12);
IkReal x261=(cj15*sj14);
IkReal x262=(r20*sj16);
IkReal x263=((1.0)*cj16);
IkReal x264=(cj14*r00);
IkReal x265=((0.01)*cj15);
IkReal x266=(cj16*r21);
IkReal x267=((1.0)*r22);
IkReal x268=(r00*sj16);
IkReal x269=(cj16*r01);
IkReal x270=(r22*sj15);
IkReal x271=(cj14*sj15);
IkReal x272=(cj14*r01);
IkReal x273=(cj14*cj15);
IkReal x274=(r02*sj15);
IkReal x275=((1.0)*cj15);
IkReal x276=(r21*sj16);
IkReal x277=((1.0)*x260);
IkReal x278=(sj13*x259);
evalcond[0]=(((sj15*x266))+((sj15*x262))+x278+(((-1.0)*cj15*x267)));
evalcond[1]=(((sj15*x269))+((sj15*x268))+(((-1.0)*r02*x275))+(((-1.0)*sj13*x277)));
evalcond[2]=((((0.069)*x259))+((x262*x265))+(((-1.0)*pz))+(((0.37429)*x278))+((x265*x266))+(((0.01)*x270)));
evalcond[3]=(((sj14*x270))+(((-1.0)*cj14*r20*x263))+(((-1.0)*x277))+((x261*x266))+((x261*x262))+((cj14*x276)));
evalcond[4]=((((-1.0)*x263*x264))+((sj14*x274))+((sj16*x272))+((x261*x269))+((x261*x268))+(((-1.0)*x259)));
evalcond[5]=((((-0.069)*x260))+(((-1.0)*px))+(((-0.37429)*sj13*x260))+((x265*x268))+((x265*x269))+(((0.01)*x274)));
evalcond[6]=(((sj14*x276))+(((-1.0)*r20*sj14*x263))+(((-1.0)*r21*x263*x273))+(((-1.0)*x262*x273))+((cj13*x259))+(((-1.0)*x267*x271)));
evalcond[7]=((((-1.0)*sj16*x264*x275))+(((-1.0)*cj15*x263*x272))+((r01*sj14*sj16))+(((-1.0)*r00*sj14*x263))+(((-1.0)*cj13*x277))+(((-1.0)*r02*x271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x279=(r20*sj16);
IkReal x280=(cj15*sj14);
IkReal x281=((1.0)*sj15);
IkReal x282=(cj16*r21);
CheckValue<IkReal> x283=IKPowWithIntegerCheck(sj13,-1);
if(!x283.valid){
continue;
}
if( IKabs(((x283.value)*((((cj15*r22))+(((-1.0)*x281*x282))+(((-1.0)*x279*x281)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x279*x280))+(((-1.0)*cj14*cj16*r20))+((cj14*r21*sj16))+((x280*x282))+((r22*sj14*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x283.value)*((((cj15*r22))+(((-1.0)*x281*x282))+(((-1.0)*x279*x281))))))+IKsqr((((x279*x280))+(((-1.0)*cj14*cj16*r20))+((cj14*r21*sj16))+((x280*x282))+((r22*sj14*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x283.value)*((((cj15*r22))+(((-1.0)*x281*x282))+(((-1.0)*x279*x281))))), (((x279*x280))+(((-1.0)*cj14*cj16*r20))+((cj14*r21*sj16))+((x280*x282))+((r22*sj14*sj15))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x284=IKsin(j12);
IkReal x285=IKcos(j12);
IkReal x286=(cj15*sj14);
IkReal x287=(r20*sj16);
IkReal x288=((1.0)*cj16);
IkReal x289=(cj14*r00);
IkReal x290=((0.01)*cj15);
IkReal x291=(cj16*r21);
IkReal x292=((1.0)*r22);
IkReal x293=(r00*sj16);
IkReal x294=(cj16*r01);
IkReal x295=(r22*sj15);
IkReal x296=(cj14*sj15);
IkReal x297=(cj14*r01);
IkReal x298=(cj14*cj15);
IkReal x299=(r02*sj15);
IkReal x300=((1.0)*cj15);
IkReal x301=(r21*sj16);
IkReal x302=((1.0)*x285);
IkReal x303=(sj13*x284);
evalcond[0]=(((sj15*x287))+x303+((sj15*x291))+(((-1.0)*cj15*x292)));
evalcond[1]=((((-1.0)*r02*x300))+((sj15*x293))+((sj15*x294))+(((-1.0)*sj13*x302)));
evalcond[2]=(((x290*x291))+((x287*x290))+(((-1.0)*pz))+(((0.01)*x295))+(((0.069)*x284))+(((0.37429)*x303)));
evalcond[3]=(((x286*x287))+((cj14*x301))+(((-1.0)*cj14*r20*x288))+((x286*x291))+((sj14*x295))+(((-1.0)*x302)));
evalcond[4]=((((-1.0)*x288*x289))+((sj16*x297))+((x286*x293))+((x286*x294))+(((-1.0)*x284))+((sj14*x299)));
evalcond[5]=(((x290*x294))+((x290*x293))+(((-0.069)*x285))+(((-1.0)*px))+(((0.01)*x299))+(((-0.37429)*sj13*x285)));
evalcond[6]=(((cj13*x284))+(((-1.0)*r20*sj14*x288))+((sj14*x301))+(((-1.0)*r21*x288*x298))+(((-1.0)*x287*x298))+(((-1.0)*x292*x296)));
evalcond[7]=((((-1.0)*sj16*x289*x300))+(((-1.0)*r02*x296))+((r01*sj14*sj16))+(((-1.0)*r00*sj14*x288))+(((-1.0)*cj13*x302))+(((-1.0)*cj15*x288*x297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x304=((1.0)*sj15);
CheckValue<IkReal> x305=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x305.valid){
continue;
}
CheckValue<IkReal> x306 = IKatan2WithCheck(IkReal((((cj15*r22))+(((-1.0)*r20*sj16*x304))+(((-1.0)*cj16*r21*x304)))),IkReal((((r00*sj15*sj16))+(((-1.0)*cj15*r02))+((cj16*r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x306.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x305.value)))+(x306.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x307=IKsin(j12);
IkReal x308=IKcos(j12);
IkReal x309=(cj15*sj14);
IkReal x310=(r20*sj16);
IkReal x311=((1.0)*cj16);
IkReal x312=(cj14*r00);
IkReal x313=((0.01)*cj15);
IkReal x314=(cj16*r21);
IkReal x315=((1.0)*r22);
IkReal x316=(r00*sj16);
IkReal x317=(cj16*r01);
IkReal x318=(r22*sj15);
IkReal x319=(cj14*sj15);
IkReal x320=(cj14*r01);
IkReal x321=(cj14*cj15);
IkReal x322=(r02*sj15);
IkReal x323=((1.0)*cj15);
IkReal x324=(r21*sj16);
IkReal x325=((1.0)*x308);
IkReal x326=(sj13*x307);
evalcond[0]=(((sj15*x314))+((sj15*x310))+x326+(((-1.0)*cj15*x315)));
evalcond[1]=((((-1.0)*sj13*x325))+((sj15*x317))+((sj15*x316))+(((-1.0)*r02*x323)));
evalcond[2]=(((x310*x313))+(((0.01)*x318))+(((0.37429)*x326))+(((-1.0)*pz))+(((0.069)*x307))+((x313*x314)));
evalcond[3]=((((-1.0)*x325))+((sj14*x318))+((x309*x314))+((x309*x310))+(((-1.0)*cj14*r20*x311))+((cj14*x324)));
evalcond[4]=((((-1.0)*x307))+((x309*x317))+((x309*x316))+((sj14*x322))+((sj16*x320))+(((-1.0)*x311*x312)));
evalcond[5]=((((-1.0)*px))+(((0.01)*x322))+(((-0.37429)*sj13*x308))+(((-0.069)*x308))+((x313*x317))+((x313*x316)));
evalcond[6]=((((-1.0)*r21*x311*x321))+(((-1.0)*x310*x321))+(((-1.0)*r20*sj14*x311))+((sj14*x324))+(((-1.0)*x315*x319))+((cj13*x307)));
evalcond[7]=((((-1.0)*r02*x319))+(((-1.0)*cj15*x311*x320))+(((-1.0)*sj16*x312*x323))+((r01*sj14*sj16))+(((-1.0)*r00*sj14*x311))+(((-1.0)*cj13*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x327=(cj14*cj15);
IkReal x328=(cj16*r11);
IkReal x329=(r10*sj16);
if( IKabs((((x327*x328))+((x327*x329))+(((-1.0)*r11*sj14*sj16))+((cj16*r10*sj14))+((cj14*r12*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj15*r12))+((sj15*x328))+((sj15*x329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x327*x328))+((x327*x329))+(((-1.0)*r11*sj14*sj16))+((cj16*r10*sj14))+((cj14*r12*sj15))))+IKsqr(((((-1.0)*cj15*r12))+((sj15*x328))+((sj15*x329))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((x327*x328))+((x327*x329))+(((-1.0)*r11*sj14*sj16))+((cj16*r10*sj14))+((cj14*r12*sj15))), ((((-1.0)*cj15*r12))+((sj15*x328))+((sj15*x329))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x330=IKcos(j13);
IkReal x331=((1.0)*r12);
IkReal x332=((0.01)*cj15);
IkReal x333=(r10*sj16);
IkReal x334=((1.0)*cj16);
IkReal x335=(cj16*r11);
IkReal x336=(cj14*cj15);
evalcond[0]=(((sj15*x335))+((sj15*x333))+(((-1.0)*x330))+(((-1.0)*cj15*x331)));
evalcond[1]=((-0.36442)+(((-0.37429)*x330))+((x332*x333))+((x332*x335))+(((-1.0)*py))+(((0.01)*r12*sj15)));
evalcond[2]=((IKsin(j13))+((r11*sj14*sj16))+(((-1.0)*r10*sj14*x334))+(((-1.0)*x333*x336))+(((-1.0)*r11*x334*x336))+(((-1.0)*cj14*sj15*x331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[3];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
IkReal x337=((1.0)*sj15*sj16);
IkReal x338=((1.0)*cj16*sj15);
j12eval[0]=sj13;
j12eval[1]=IKsign(sj13);
j12eval[2]=((IKabs(((((-1.0)*r21*x338))+((cj15*r22))+(((-1.0)*r20*x337)))))+(IKabs((((cj15*r02))+(((-1.0)*r01*x338))+(((-1.0)*r00*x337))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j12eval[0]=sj13;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j12eval[0]=sj13;
j12eval[1]=((1.0)+(((5.42449275362319)*sj13)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x339=((0.144927536231884)*cj15);
IkReal x340=((0.144927536231884)*sj15);
if( IKabs(((((-1.0)*r22*x340))+(((-1.0)*cj16*r21*x339))+(((-1.0)*r20*sj16*x339))+(((14.4927536231884)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x340))+(((-1.0)*cj16*r01*x339))+(((14.4927536231884)*px))+(((-1.0)*r00*sj16*x339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x340))+(((-1.0)*cj16*r21*x339))+(((-1.0)*r20*sj16*x339))+(((14.4927536231884)*pz))))+IKsqr(((((-1.0)*r02*x340))+(((-1.0)*cj16*r01*x339))+(((14.4927536231884)*px))+(((-1.0)*r00*sj16*x339))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x340))+(((-1.0)*cj16*r21*x339))+(((-1.0)*r20*sj16*x339))+(((14.4927536231884)*pz))), ((((-1.0)*r02*x340))+(((-1.0)*cj16*r01*x339))+(((14.4927536231884)*px))+(((-1.0)*r00*sj16*x339))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x341=IKsin(j12);
IkReal x342=IKcos(j12);
IkReal x343=(cj15*sj14);
IkReal x344=(r20*sj16);
IkReal x345=((1.0)*cj16);
IkReal x346=(cj14*r00);
IkReal x347=((0.01)*cj15);
IkReal x348=(cj16*r21);
IkReal x349=(r22*sj15);
IkReal x350=(cj16*r01);
IkReal x351=((1.0)*cj14);
IkReal x352=(r00*sj16);
IkReal x353=(cj14*r01);
IkReal x354=(cj14*r21);
IkReal x355=(r02*sj15);
IkReal x356=(sj14*sj16);
evalcond[0]=((((0.069)*x341))+(((0.01)*x349))+(((-1.0)*pz))+((x344*x347))+((x347*x348)));
evalcond[1]=((((0.069)*x342))+(((-1.0)*px))+((x347*x350))+((x347*x352))+(((0.01)*x355)));
evalcond[2]=(x341+(((-1.0)*x345*x346))+((x343*x350))+((x343*x352))+((sj14*x355))+((sj16*x353)));
evalcond[3]=(((sj14*x349))+(((-1.0)*cj14*r20*x345))+((sj16*x354))+((x343*x344))+((x343*x348))+(((-1.0)*x342)));
evalcond[4]=(((r21*x356))+(((-1.0)*r20*sj14*x345))+(((-1.0)*x349*x351))+(((-1.0)*cj15*x345*x354))+x341+(((-1.0)*cj15*x344*x351)));
evalcond[5]=(((r01*x356))+(((-1.0)*cj15*sj16*x346))+(((-1.0)*cj15*x345*x353))+x342+(((-1.0)*r00*sj14*x345))+(((-1.0)*x351*x355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x357=((0.144927536231884)*cj15);
IkReal x358=((0.144927536231884)*sj15);
if( IKabs(((((-1.0)*r22*x358))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x357))+(((-1.0)*r20*sj16*x357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj16*x357))+(((-1.0)*cj16*r01*x357))+(((14.4927536231884)*px))+(((-1.0)*r02*x358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x358))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x357))+(((-1.0)*r20*sj16*x357))))+IKsqr(((((-1.0)*r00*sj16*x357))+(((-1.0)*cj16*r01*x357))+(((14.4927536231884)*px))+(((-1.0)*r02*x358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x358))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x357))+(((-1.0)*r20*sj16*x357))), ((((-1.0)*r00*sj16*x357))+(((-1.0)*cj16*r01*x357))+(((14.4927536231884)*px))+(((-1.0)*r02*x358))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x359=IKsin(j12);
IkReal x360=IKcos(j12);
IkReal x361=(cj15*sj14);
IkReal x362=(r20*sj16);
IkReal x363=((1.0)*cj16);
IkReal x364=(cj14*r00);
IkReal x365=((0.01)*cj15);
IkReal x366=(cj16*r21);
IkReal x367=(r22*sj15);
IkReal x368=(cj16*r01);
IkReal x369=((1.0)*cj14);
IkReal x370=(r00*sj16);
IkReal x371=(cj14*r01);
IkReal x372=(cj14*r21);
IkReal x373=(r02*sj15);
IkReal x374=(sj14*sj16);
IkReal x375=((1.0)*x360);
evalcond[0]=((((0.069)*x359))+(((0.01)*x367))+((x365*x366))+(((-1.0)*pz))+((x362*x365)));
evalcond[1]=(((x365*x370))+(((0.01)*x373))+((x365*x368))+(((-1.0)*px))+(((0.069)*x360)));
evalcond[2]=(((sj14*x373))+((x361*x368))+((sj16*x371))+(((-1.0)*x363*x364))+x359+((x361*x370)));
evalcond[3]=(((x361*x362))+((x361*x366))+((sj14*x367))+((sj16*x372))+(((-1.0)*cj14*r20*x363))+(((-1.0)*x375)));
evalcond[4]=((((-1.0)*cj15*x362*x369))+(((-1.0)*cj15*x363*x372))+(((-1.0)*r20*sj14*x363))+(((-1.0)*x367*x369))+(((-1.0)*x359))+((r21*x374)));
evalcond[5]=((((-1.0)*r00*sj14*x363))+(((-1.0)*cj15*x363*x371))+((r01*x374))+(((-1.0)*x375))+(((-1.0)*x369*x373))+(((-1.0)*cj15*sj16*x364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.184349034171364)+sj13)))+(IKabs(((-1.0)+(IKsign(cj13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x376=((5.42449275)*cj15);
IkReal x377=((5.42449275)*sj15*sj16);
IkReal x378=((5.42449275)*cj16*sj15);
if( IKabs((((r20*x377))+((r21*x378))+(((-1.0)*r22*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x377))+((r01*x378))+(((-1.0)*r02*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x377))+((r21*x378))+(((-1.0)*r22*x376))))+IKsqr((((r00*x377))+((r01*x378))+(((-1.0)*r02*x376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r20*x377))+((r21*x378))+(((-1.0)*r22*x376))), (((r00*x377))+((r01*x378))+(((-1.0)*r02*x376))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x379=IKsin(j12);
IkReal x380=IKcos(j12);
IkReal x381=(cj15*cj16);
IkReal x382=(r22*sj15);
IkReal x383=((1.0)*cj15);
IkReal x384=(r00*sj16);
IkReal x385=(r01*sj14);
IkReal x386=((1.0)*cj14);
IkReal x387=(cj14*sj16);
IkReal x388=(r21*sj14);
IkReal x389=(cj16*sj15);
IkReal x390=(r02*sj15);
IkReal x391=(cj15*r20*sj16);
IkReal x392=(cj16*x386);
IkReal x393=((1.0)*cj16*sj14);
evalcond[0]=((((-1.0)*r22*x383))+((r20*sj15*sj16))+(((-0.184349034294497)*x379))+((r21*x389)));
evalcond[1]=(((sj15*x384))+(((-1.0)*r02*x383))+(((-0.184349034294497)*x380))+((r01*x389)));
evalcond[2]=((((0.01)*x391))+(((0.01)*r21*x381))+(((-1.0)*pz))+(((0.01)*x382))+(((-4.60872585736242e-11)*x379)));
evalcond[3]=((((0.01)*cj15*x384))+(((0.01)*x390))+(((-4.60872585736242e-11)*x380))+(((-1.0)*px))+(((0.01)*r01*x381)));
evalcond[4]=(((sj14*x390))+(((-1.0)*r00*x392))+((cj15*sj14*x384))+x379+((x381*x385))+((r01*x387)));
evalcond[5]=(((sj14*x391))+(((-1.0)*r20*x392))+((r21*x387))+(((-1.0)*x380))+((sj14*x382))+((x381*x388)));
evalcond[6]=((((-1.0)*r20*x393))+(((-1.0)*r20*x383*x387))+((sj16*x388))+(((0.98286084)*x379))+(((-1.0)*r21*x381*x386))+(((-1.0)*x382*x386)));
evalcond[7]=((((-1.0)*cj14*x383*x384))+(((-1.0)*x386*x390))+(((0.98286084)*x380))+(((-1.0)*r01*x381*x386))+(((-1.0)*r00*x393))+((sj16*x385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj13)))))+(IKabs(((0.184349034171364)+sj13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x394=((5.42449275)*cj15);
IkReal x395=((5.42449275)*sj15*sj16);
IkReal x396=((5.42449275)*cj16*sj15);
if( IKabs((((r20*x395))+((r21*x396))+(((-1.0)*r22*x394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x395))+(((-1.0)*r02*x394))+((r01*x396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x395))+((r21*x396))+(((-1.0)*r22*x394))))+IKsqr((((r00*x395))+(((-1.0)*r02*x394))+((r01*x396))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r20*x395))+((r21*x396))+(((-1.0)*r22*x394))), (((r00*x395))+(((-1.0)*r02*x394))+((r01*x396))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x397=IKsin(j12);
IkReal x398=IKcos(j12);
IkReal x399=(cj15*cj16);
IkReal x400=(r22*sj15);
IkReal x401=((1.0)*cj15);
IkReal x402=(r00*sj16);
IkReal x403=(r01*sj14);
IkReal x404=((1.0)*cj14);
IkReal x405=(cj14*sj16);
IkReal x406=(r21*sj14);
IkReal x407=(cj16*sj15);
IkReal x408=(r02*sj15);
IkReal x409=(cj15*r20*sj16);
IkReal x410=(cj16*x404);
IkReal x411=((1.0)*cj16*sj14);
evalcond[0]=(((r20*sj15*sj16))+(((-0.184349034294497)*x397))+((r21*x407))+(((-1.0)*r22*x401)));
evalcond[1]=((((-1.0)*r02*x401))+(((-0.184349034294497)*x398))+((r01*x407))+((sj15*x402)));
evalcond[2]=((((0.01)*x400))+(((0.01)*x409))+(((-1.0)*pz))+(((0.01)*r21*x399))+(((-4.60872585736242e-11)*x397)));
evalcond[3]=((((0.01)*r01*x399))+(((0.01)*cj15*x402))+(((0.01)*x408))+(((-1.0)*px))+(((-4.60872585736242e-11)*x398)));
evalcond[4]=(((cj15*sj14*x402))+x397+((r01*x405))+((x399*x403))+(((-1.0)*r00*x410))+((sj14*x408)));
evalcond[5]=((((-1.0)*x398))+(((-1.0)*r20*x410))+((r21*x405))+((x399*x406))+((sj14*x409))+((sj14*x400)));
evalcond[6]=((((-1.0)*r20*x411))+(((-1.0)*r20*x401*x405))+(((-1.0)*x400*x404))+((sj16*x406))+(((-0.98286084)*x397))+(((-1.0)*r21*x399*x404)));
evalcond[7]=((((-1.0)*r01*x399*x404))+(((-1.0)*x404*x408))+(((-1.0)*cj14*x401*x402))+((sj16*x403))+(((-1.0)*r00*x411))+(((-0.98286084)*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x412=((0.01)*cj15);
IkReal x413=((1.0)*sj15);
CheckValue<IkReal> x414=IKPowWithIntegerCheck(sj13,-1);
if(!x414.valid){
continue;
}
CheckValue<IkReal> x415=IKPowWithIntegerCheck(((0.069)+(((0.37429)*sj13))),-1);
if(!x415.valid){
continue;
}
if( IKabs(((x414.value)*((((cj15*r22))+(((-1.0)*cj16*r21*x413))+(((-1.0)*r20*sj16*x413)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x415.value)*(((((-1.0)*r00*sj16*x412))+(((-0.01)*r02*sj15))+px+(((-1.0)*cj16*r01*x412)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x414.value)*((((cj15*r22))+(((-1.0)*cj16*r21*x413))+(((-1.0)*r20*sj16*x413))))))+IKsqr(((x415.value)*(((((-1.0)*r00*sj16*x412))+(((-0.01)*r02*sj15))+px+(((-1.0)*cj16*r01*x412))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x414.value)*((((cj15*r22))+(((-1.0)*cj16*r21*x413))+(((-1.0)*r20*sj16*x413))))), ((x415.value)*(((((-1.0)*r00*sj16*x412))+(((-0.01)*r02*sj15))+px+(((-1.0)*cj16*r01*x412))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x416=IKsin(j12);
IkReal x417=IKcos(j12);
IkReal x418=(cj15*sj14);
IkReal x419=(r20*sj16);
IkReal x420=((1.0)*cj16);
IkReal x421=(cj14*r00);
IkReal x422=((0.01)*cj15);
IkReal x423=(cj16*r21);
IkReal x424=((1.0)*r22);
IkReal x425=(r00*sj16);
IkReal x426=(cj16*r01);
IkReal x427=(r22*sj15);
IkReal x428=(cj14*sj15);
IkReal x429=(cj14*r01);
IkReal x430=(cj14*cj15);
IkReal x431=(r02*sj15);
IkReal x432=((1.0)*cj15);
IkReal x433=(sj14*sj16);
IkReal x434=(sj13*x417);
IkReal x435=(sj13*x416);
evalcond[0]=(((sj15*x423))+((sj15*x419))+x435+(((-1.0)*cj15*x424)));
evalcond[1]=(((sj15*x426))+((sj15*x425))+x434+(((-1.0)*r02*x432)));
evalcond[2]=((((-1.0)*x420*x421))+((x418*x426))+((x418*x425))+x416+((sj14*x431))+((sj16*x429)));
evalcond[3]=((((0.069)*x416))+(((0.37429)*x435))+((x419*x422))+(((-1.0)*pz))+((x422*x423))+(((0.01)*x427)));
evalcond[4]=(((x418*x423))+((sj14*x427))+((cj14*r21*sj16))+(((-1.0)*cj14*r20*x420))+((x418*x419))+(((-1.0)*x417)));
evalcond[5]=((((0.069)*x417))+(((0.37429)*x434))+(((-1.0)*px))+(((0.01)*x431))+((x422*x425))+((x422*x426)));
evalcond[6]=((((-1.0)*r21*x420*x430))+((r21*x433))+(((-1.0)*r20*sj14*x420))+(((-1.0)*x424*x428))+(((-1.0)*x419*x430))+((cj13*x416)));
evalcond[7]=((((-1.0)*r02*x428))+(((-1.0)*sj16*x421*x432))+((r01*x433))+((cj13*x417))+(((-1.0)*r00*sj14*x420))+(((-1.0)*cj15*x420*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x436=((1.0)*r01);
IkReal x437=(cj15*sj14);
IkReal x438=((1.0)*sj15);
IkReal x439=(r00*sj16);
CheckValue<IkReal> x440=IKPowWithIntegerCheck(sj13,-1);
if(!x440.valid){
continue;
}
if( IKabs((((cj14*cj16*r00))+(((-1.0)*cj14*sj16*x436))+(((-1.0)*x437*x439))+(((-1.0)*r02*sj14*x438))+(((-1.0)*cj16*x436*x437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x440.value)*((((cj15*r02))+(((-1.0)*x438*x439))+(((-1.0)*cj16*sj15*x436)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj14*cj16*r00))+(((-1.0)*cj14*sj16*x436))+(((-1.0)*x437*x439))+(((-1.0)*r02*sj14*x438))+(((-1.0)*cj16*x436*x437))))+IKsqr(((x440.value)*((((cj15*r02))+(((-1.0)*x438*x439))+(((-1.0)*cj16*sj15*x436))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((cj14*cj16*r00))+(((-1.0)*cj14*sj16*x436))+(((-1.0)*x437*x439))+(((-1.0)*r02*sj14*x438))+(((-1.0)*cj16*x436*x437))), ((x440.value)*((((cj15*r02))+(((-1.0)*x438*x439))+(((-1.0)*cj16*sj15*x436))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x441=IKsin(j12);
IkReal x442=IKcos(j12);
IkReal x443=(cj15*sj14);
IkReal x444=(r20*sj16);
IkReal x445=((1.0)*cj16);
IkReal x446=(cj14*r00);
IkReal x447=((0.01)*cj15);
IkReal x448=(cj16*r21);
IkReal x449=((1.0)*r22);
IkReal x450=(r00*sj16);
IkReal x451=(cj16*r01);
IkReal x452=(r22*sj15);
IkReal x453=(cj14*sj15);
IkReal x454=(cj14*r01);
IkReal x455=(cj14*cj15);
IkReal x456=(r02*sj15);
IkReal x457=((1.0)*cj15);
IkReal x458=(sj14*sj16);
IkReal x459=(sj13*x442);
IkReal x460=(sj13*x441);
evalcond[0]=(x460+(((-1.0)*cj15*x449))+((sj15*x448))+((sj15*x444)));
evalcond[1]=(((sj15*x450))+((sj15*x451))+x459+(((-1.0)*r02*x457)));
evalcond[2]=((((-1.0)*x445*x446))+((sj14*x456))+((sj16*x454))+x441+((x443*x450))+((x443*x451)));
evalcond[3]=((((0.069)*x441))+((x447*x448))+(((0.01)*x452))+(((-1.0)*pz))+((x444*x447))+(((0.37429)*x460)));
evalcond[4]=(((sj14*x452))+(((-1.0)*x442))+((cj14*r21*sj16))+((x443*x448))+((x443*x444))+(((-1.0)*cj14*r20*x445)));
evalcond[5]=((((0.069)*x442))+(((0.01)*x456))+((x447*x450))+((x447*x451))+(((-1.0)*px))+(((0.37429)*x459)));
evalcond[6]=(((cj13*x441))+(((-1.0)*r20*sj14*x445))+(((-1.0)*x444*x455))+(((-1.0)*x449*x453))+((r21*x458))+(((-1.0)*r21*x445*x455)));
evalcond[7]=((((-1.0)*cj15*x445*x454))+((cj13*x442))+(((-1.0)*r02*x453))+(((-1.0)*sj16*x446*x457))+(((-1.0)*r00*sj14*x445))+((r01*x458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x461=((1.0)*sj15);
CheckValue<IkReal> x462=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x462.valid){
continue;
}
CheckValue<IkReal> x463 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*r21*x461))+((cj15*r22))+(((-1.0)*r20*sj16*x461)))),IkReal((((cj15*r02))+(((-1.0)*cj16*r01*x461))+(((-1.0)*r00*sj16*x461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x463.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x462.value)))+(x463.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x464=IKsin(j12);
IkReal x465=IKcos(j12);
IkReal x466=(cj15*sj14);
IkReal x467=(r20*sj16);
IkReal x468=((1.0)*cj16);
IkReal x469=(cj14*r00);
IkReal x470=((0.01)*cj15);
IkReal x471=(cj16*r21);
IkReal x472=((1.0)*r22);
IkReal x473=(r00*sj16);
IkReal x474=(cj16*r01);
IkReal x475=(r22*sj15);
IkReal x476=(cj14*sj15);
IkReal x477=(cj14*r01);
IkReal x478=(cj14*cj15);
IkReal x479=(r02*sj15);
IkReal x480=((1.0)*cj15);
IkReal x481=(sj14*sj16);
IkReal x482=(sj13*x465);
IkReal x483=(sj13*x464);
evalcond[0]=(((sj15*x471))+((sj15*x467))+(((-1.0)*cj15*x472))+x483);
evalcond[1]=(((sj15*x473))+((sj15*x474))+x482+(((-1.0)*r02*x480)));
evalcond[2]=(((sj16*x477))+((x466*x474))+((x466*x473))+(((-1.0)*x468*x469))+((sj14*x479))+x464);
evalcond[3]=((((0.01)*x475))+(((0.37429)*x483))+((x470*x471))+(((-1.0)*pz))+((x467*x470))+(((0.069)*x464)));
evalcond[4]=(((x466*x467))+(((-1.0)*x465))+((x466*x471))+((sj14*x475))+(((-1.0)*cj14*r20*x468))+((cj14*r21*sj16)));
evalcond[5]=((((0.01)*x479))+(((0.37429)*x482))+((x470*x473))+((x470*x474))+(((-1.0)*px))+(((0.069)*x465)));
evalcond[6]=((((-1.0)*r21*x468*x478))+((cj13*x464))+(((-1.0)*r20*sj14*x468))+(((-1.0)*x472*x476))+(((-1.0)*x467*x478))+((r21*x481)));
evalcond[7]=((((-1.0)*r00*sj14*x468))+(((-1.0)*sj16*x469*x480))+((cj13*x465))+(((-1.0)*r02*x476))+((r01*x481))+(((-1.0)*cj15*x468*x477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x484=((1.0)*r00);
IkReal x485=(cj14*cj15);
IkReal x486=((1.0)*cj16*r01);
if( IKabs((((r01*sj14*sj16))+(((-1.0)*sj16*x484*x485))+(((-1.0)*cj16*sj14*x484))+(((-1.0)*cj14*r02*sj15))+(((-1.0)*x485*x486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj15*x486))+((cj15*r02))+(((-1.0)*sj15*sj16*x484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj14*sj16))+(((-1.0)*sj16*x484*x485))+(((-1.0)*cj16*sj14*x484))+(((-1.0)*cj14*r02*sj15))+(((-1.0)*x485*x486))))+IKsqr(((((-1.0)*sj15*x486))+((cj15*r02))+(((-1.0)*sj15*sj16*x484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r01*sj14*sj16))+(((-1.0)*sj16*x484*x485))+(((-1.0)*cj16*sj14*x484))+(((-1.0)*cj14*r02*sj15))+(((-1.0)*x485*x486))), ((((-1.0)*sj15*x486))+((cj15*r02))+(((-1.0)*sj15*sj16*x484))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x487=IKcos(j13);
IkReal x488=(cj16*r01);
IkReal x489=((0.01)*cj15);
IkReal x490=((1.0)*r00);
IkReal x491=(r00*sj16);
IkReal x492=(r02*sj15);
IkReal x493=((1.0)*cj15);
evalcond[0]=((((-1.0)*r02*x493))+x487+((sj15*x491))+((sj15*x488)));
evalcond[1]=((0.36442)+(((0.01)*x492))+(((0.37429)*x487))+((x489*x491))+((x488*x489))+(((-1.0)*px)));
evalcond[2]=((((-1.0)*cj14*x488*x493))+(((-1.0)*cj14*x492))+(((-1.0)*(IKsin(j13))))+((r01*sj14*sj16))+(((-1.0)*cj14*cj15*sj16*x490))+(((-1.0)*cj16*sj14*x490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[3];
sj11=0;
cj11=1.0;
j11=0;
IkReal x494=((1.0)*sj15);
j12eval[0]=sj13;
j12eval[1]=((IKabs(((((-1.0)*cj16*r11*x494))+((cj15*r12))+(((-1.0)*r10*sj16*x494)))))+(IKabs((((cj15*r22))+(((-1.0)*r20*sj16*x494))+(((-1.0)*cj16*r21*x494))))));
j12eval[2]=IKsign(sj13);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj11=0;
cj11=1.0;
j11=0;
j12eval[0]=sj13;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj11=0;
cj11=1.0;
j11=0;
j12eval[0]=sj13;
j12eval[1]=((1.0)+(((5.42449275362319)*sj13)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x495=((0.144927536231884)*cj15);
IkReal x496=((0.144927536231884)*sj15);
if( IKabs(((((-1.0)*r22*x496))+(((-1.0)*r20*sj16*x495))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x495)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj16*r11*x495))+(((-1.0)*r10*sj16*x495))+(((14.4927536231884)*py))+(((-1.0)*r12*x496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x496))+(((-1.0)*r20*sj16*x495))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x495))))+IKsqr(((((-1.0)*cj16*r11*x495))+(((-1.0)*r10*sj16*x495))+(((14.4927536231884)*py))+(((-1.0)*r12*x496))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x496))+(((-1.0)*r20*sj16*x495))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x495))), ((((-1.0)*cj16*r11*x495))+(((-1.0)*r10*sj16*x495))+(((14.4927536231884)*py))+(((-1.0)*r12*x496))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x497=IKsin(j12);
IkReal x498=IKcos(j12);
IkReal x499=(r12*sj15);
IkReal x500=((1.0)*cj14);
IkReal x501=(cj15*sj14);
IkReal x502=(r20*sj16);
IkReal x503=(cj16*r10);
IkReal x504=((1.0)*sj14);
IkReal x505=(cj16*r11);
IkReal x506=((0.01)*cj15);
IkReal x507=(cj16*r21);
IkReal x508=(r22*sj15);
IkReal x509=(r10*sj16);
IkReal x510=(r11*sj16);
IkReal x511=(cj16*r20);
IkReal x512=(r21*sj16);
evalcond[0]=((((0.01)*x508))+((x506*x507))+(((-1.0)*pz))+(((0.069)*x497))+((x502*x506)));
evalcond[1]=((((0.01)*x499))+((x506*x509))+((x505*x506))+(((-1.0)*py))+(((0.069)*x498)));
evalcond[2]=(((cj14*x510))+((x501*x509))+((x501*x505))+x497+((sj14*x499))+(((-1.0)*x500*x503)));
evalcond[3]=(((cj14*x512))+(((-1.0)*x500*x511))+(((-1.0)*x498))+((x501*x507))+((x501*x502))+((sj14*x508)));
evalcond[4]=((((-1.0)*cj15*x500*x502))+(((-1.0)*cj15*x500*x507))+(((-1.0)*x504*x511))+((sj14*x512))+x497+(((-1.0)*x500*x508)));
evalcond[5]=((((-1.0)*x499*x500))+(((-1.0)*cj15*x500*x509))+(((-1.0)*cj15*x500*x505))+((sj14*x510))+(((-1.0)*x503*x504))+x498);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x513=((0.144927536231884)*cj15);
IkReal x514=((0.144927536231884)*sj15);
if( IKabs(((((-1.0)*cj16*r21*x513))+(((-1.0)*r22*x514))+(((14.4927536231884)*pz))+(((-1.0)*r20*sj16*x513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj16*r11*x513))+(((-1.0)*r10*sj16*x513))+(((-1.0)*r12*x514))+(((14.4927536231884)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*r21*x513))+(((-1.0)*r22*x514))+(((14.4927536231884)*pz))+(((-1.0)*r20*sj16*x513))))+IKsqr(((((-1.0)*cj16*r11*x513))+(((-1.0)*r10*sj16*x513))+(((-1.0)*r12*x514))+(((14.4927536231884)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*cj16*r21*x513))+(((-1.0)*r22*x514))+(((14.4927536231884)*pz))+(((-1.0)*r20*sj16*x513))), ((((-1.0)*cj16*r11*x513))+(((-1.0)*r10*sj16*x513))+(((-1.0)*r12*x514))+(((14.4927536231884)*py))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x515=IKsin(j12);
IkReal x516=IKcos(j12);
IkReal x517=(r12*sj15);
IkReal x518=((1.0)*cj14);
IkReal x519=(cj15*sj14);
IkReal x520=(r20*sj16);
IkReal x521=(cj16*r10);
IkReal x522=((1.0)*sj14);
IkReal x523=(cj16*r11);
IkReal x524=((0.01)*cj15);
IkReal x525=(cj16*r21);
IkReal x526=(r22*sj15);
IkReal x527=(r10*sj16);
IkReal x528=(r11*sj16);
IkReal x529=(cj16*r20);
IkReal x530=(r21*sj16);
IkReal x531=((1.0)*x516);
evalcond[0]=((((0.01)*x526))+(((-1.0)*pz))+(((0.069)*x515))+((x520*x524))+((x524*x525)));
evalcond[1]=((((-1.0)*py))+(((0.069)*x516))+((x524*x527))+((x523*x524))+(((0.01)*x517)));
evalcond[2]=(((x519*x527))+((x519*x523))+((sj14*x517))+((cj14*x528))+(((-1.0)*x518*x521))+x515);
evalcond[3]=(((x519*x525))+((x519*x520))+(((-1.0)*x531))+((cj14*x530))+(((-1.0)*x518*x529))+((sj14*x526)));
evalcond[4]=((((-1.0)*x515))+(((-1.0)*x518*x526))+((sj14*x530))+(((-1.0)*cj15*x518*x520))+(((-1.0)*cj15*x518*x525))+(((-1.0)*x522*x529)));
evalcond[5]=((((-1.0)*x521*x522))+(((-1.0)*x531))+(((-1.0)*x517*x518))+(((-1.0)*cj15*x518*x523))+(((-1.0)*cj15*x518*x527))+((sj14*x528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.184349034171364)+sj13)))+(IKabs(((-1.0)+(IKsign(cj13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x532=((5.42449275)*sj15);
IkReal x533=((5.42449275)*cj15);
if( IKabs(((((-1.0)*r22*x533))+((r20*sj16*x532))+((cj16*r21*x532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj16*r11*x532))+((r10*sj16*x532))+(((-1.0)*r12*x533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x533))+((r20*sj16*x532))+((cj16*r21*x532))))+IKsqr((((cj16*r11*x532))+((r10*sj16*x532))+(((-1.0)*r12*x533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x533))+((r20*sj16*x532))+((cj16*r21*x532))), (((cj16*r11*x532))+((r10*sj16*x532))+(((-1.0)*r12*x533))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x534=IKsin(j12);
IkReal x535=IKcos(j12);
IkReal x536=(r12*sj15);
IkReal x537=((1.0)*cj14);
IkReal x538=(cj15*sj14);
IkReal x539=(r20*sj16);
IkReal x540=(cj16*r10);
IkReal x541=((1.0)*sj14);
IkReal x542=(cj16*r11);
IkReal x543=(r10*sj16);
IkReal x544=((0.01)*cj15);
IkReal x545=(cj16*r21);
IkReal x546=(r22*sj15);
IkReal x547=((1.0)*cj15);
IkReal x548=(r11*sj16);
IkReal x549=(cj16*r20);
IkReal x550=(r21*sj16);
evalcond[0]=((((-1.0)*r22*x547))+((sj15*x539))+((sj15*x545))+(((-0.184349034294497)*x534)));
evalcond[1]=(((sj15*x542))+((sj15*x543))+(((-0.184349034294497)*x535))+(((-1.0)*r12*x547)));
evalcond[2]=(((x539*x544))+((x544*x545))+(((-4.60872585736242e-11)*x534))+(((0.01)*x546))+(((-1.0)*pz)));
evalcond[3]=(((x542*x544))+(((-4.60872585736242e-11)*x535))+(((0.01)*x536))+((x543*x544))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*x537*x540))+((cj14*x548))+x534+((sj14*x536))+((x538*x543))+((x538*x542)));
evalcond[5]=((((-1.0)*x537*x549))+(((-1.0)*x535))+((cj14*x550))+((sj14*x546))+((x538*x545))+((x538*x539)));
evalcond[6]=((((-1.0)*x541*x549))+(((-1.0)*x537*x546))+(((-1.0)*cj15*x537*x545))+(((-1.0)*cj15*x537*x539))+((sj14*x550))+(((0.98286084)*x534)));
evalcond[7]=((((-1.0)*cj15*x537*x542))+(((-1.0)*cj15*x537*x543))+(((-1.0)*x540*x541))+((sj14*x548))+(((0.98286084)*x535))+(((-1.0)*x536*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj13)))))+(IKabs(((0.184349034171364)+sj13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x551=((5.42449275)*sj15);
IkReal x552=((5.42449275)*cj15);
if( IKabs(((((-1.0)*r22*x552))+((r20*sj16*x551))+((cj16*r21*x551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x552))+((r10*sj16*x551))+((cj16*r11*x551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x552))+((r20*sj16*x551))+((cj16*r21*x551))))+IKsqr(((((-1.0)*r12*x552))+((r10*sj16*x551))+((cj16*r11*x551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x552))+((r20*sj16*x551))+((cj16*r21*x551))), ((((-1.0)*r12*x552))+((r10*sj16*x551))+((cj16*r11*x551))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x553=IKsin(j12);
IkReal x554=IKcos(j12);
IkReal x555=(r12*sj15);
IkReal x556=((1.0)*cj14);
IkReal x557=(cj15*sj14);
IkReal x558=(r20*sj16);
IkReal x559=(cj16*r10);
IkReal x560=((1.0)*sj14);
IkReal x561=(cj16*r11);
IkReal x562=(r10*sj16);
IkReal x563=((0.01)*cj15);
IkReal x564=(cj16*r21);
IkReal x565=(r22*sj15);
IkReal x566=((1.0)*cj15);
IkReal x567=(r11*sj16);
IkReal x568=(cj16*r20);
IkReal x569=(r21*sj16);
evalcond[0]=(((sj15*x564))+((sj15*x558))+(((-0.184349034294497)*x553))+(((-1.0)*r22*x566)));
evalcond[1]=(((sj15*x561))+((sj15*x562))+(((-0.184349034294497)*x554))+(((-1.0)*r12*x566)));
evalcond[2]=(((x558*x563))+(((0.01)*x565))+(((-4.60872585736242e-11)*x553))+((x563*x564))+(((-1.0)*pz)));
evalcond[3]=((((-4.60872585736242e-11)*x554))+((x562*x563))+((x561*x563))+(((-1.0)*py))+(((0.01)*x555)));
evalcond[4]=((((-1.0)*x556*x559))+((sj14*x555))+x553+((cj14*x567))+((x557*x562))+((x557*x561)));
evalcond[5]=(((sj14*x565))+(((-1.0)*x554))+((x557*x558))+(((-1.0)*x556*x568))+((cj14*x569))+((x557*x564)));
evalcond[6]=(((sj14*x569))+(((-1.0)*cj15*x556*x564))+(((-1.0)*x556*x565))+(((-1.0)*cj15*x556*x558))+(((-0.98286084)*x553))+(((-1.0)*x560*x568)));
evalcond[7]=((((-1.0)*x555*x556))+((sj14*x567))+(((-1.0)*cj15*x556*x561))+(((-1.0)*cj15*x556*x562))+(((-0.98286084)*x554))+(((-1.0)*x559*x560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x570=((1.0)*sj15);
IkReal x571=((0.01)*cj15);
CheckValue<IkReal> x572=IKPowWithIntegerCheck(sj13,-1);
if(!x572.valid){
continue;
}
CheckValue<IkReal> x573=IKPowWithIntegerCheck(((0.069)+(((0.37429)*sj13))),-1);
if(!x573.valid){
continue;
}
if( IKabs(((x572.value)*(((((-1.0)*r20*sj16*x570))+((cj15*r22))+(((-1.0)*cj16*r21*x570)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x573.value)*(((((-1.0)*cj16*r11*x571))+(((-1.0)*r10*sj16*x571))+(((-0.01)*r12*sj15))+py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x572.value)*(((((-1.0)*r20*sj16*x570))+((cj15*r22))+(((-1.0)*cj16*r21*x570))))))+IKsqr(((x573.value)*(((((-1.0)*cj16*r11*x571))+(((-1.0)*r10*sj16*x571))+(((-0.01)*r12*sj15))+py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x572.value)*(((((-1.0)*r20*sj16*x570))+((cj15*r22))+(((-1.0)*cj16*r21*x570))))), ((x573.value)*(((((-1.0)*cj16*r11*x571))+(((-1.0)*r10*sj16*x571))+(((-0.01)*r12*sj15))+py))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x574=IKsin(j12);
IkReal x575=IKcos(j12);
IkReal x576=(r12*sj15);
IkReal x577=((1.0)*cj14);
IkReal x578=(cj15*sj14);
IkReal x579=(r20*sj16);
IkReal x580=(cj16*r10);
IkReal x581=((1.0)*sj14);
IkReal x582=(cj16*r11);
IkReal x583=(r10*sj16);
IkReal x584=((0.01)*cj15);
IkReal x585=(cj16*r21);
IkReal x586=((1.0)*cj15);
IkReal x587=(r11*sj16);
IkReal x588=(r22*sj15);
IkReal x589=(cj16*r20);
IkReal x590=(r21*sj16);
IkReal x591=(sj13*x575);
IkReal x592=(sj13*x574);
evalcond[0]=((((-1.0)*r22*x586))+((sj15*x585))+((sj15*x579))+x592);
evalcond[1]=(((sj15*x582))+((sj15*x583))+x591+(((-1.0)*r12*x586)));
evalcond[2]=(((x578*x582))+((x578*x583))+(((-1.0)*x577*x580))+((sj14*x576))+x574+((cj14*x587)));
evalcond[3]=(((x584*x585))+((x579*x584))+(((0.01)*x588))+(((0.37429)*x592))+(((-1.0)*pz))+(((0.069)*x574)));
evalcond[4]=(((x578*x585))+((x578*x579))+(((-1.0)*x577*x589))+(((-1.0)*x575))+((sj14*x588))+((cj14*x590)));
evalcond[5]=(((x583*x584))+((x582*x584))+(((0.37429)*x591))+(((-1.0)*py))+(((0.069)*x575))+(((0.01)*x576)));
evalcond[6]=((((-1.0)*cj15*x577*x579))+(((-1.0)*cj15*x577*x585))+(((-1.0)*x577*x588))+((cj13*x574))+(((-1.0)*x581*x589))+((sj14*x590)));
evalcond[7]=((((-1.0)*x580*x581))+(((-1.0)*cj15*x577*x582))+(((-1.0)*cj15*x577*x583))+(((-1.0)*x576*x577))+((cj13*x575))+((sj14*x587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x593=((1.0)*sj14);
IkReal x594=(r10*sj16);
IkReal x595=(cj16*r11);
IkReal x596=((1.0)*sj15);
CheckValue<IkReal> x597=IKPowWithIntegerCheck(sj13,-1);
if(!x597.valid){
continue;
}
if( IKabs((((cj14*cj16*r10))+(((-1.0)*r12*sj15*x593))+(((-1.0)*cj15*x593*x594))+(((-1.0)*cj15*x593*x595))+(((-1.0)*cj14*r11*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x597.value)*((((cj15*r12))+(((-1.0)*x594*x596))+(((-1.0)*x595*x596)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj14*cj16*r10))+(((-1.0)*r12*sj15*x593))+(((-1.0)*cj15*x593*x594))+(((-1.0)*cj15*x593*x595))+(((-1.0)*cj14*r11*sj16))))+IKsqr(((x597.value)*((((cj15*r12))+(((-1.0)*x594*x596))+(((-1.0)*x595*x596))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((cj14*cj16*r10))+(((-1.0)*r12*sj15*x593))+(((-1.0)*cj15*x593*x594))+(((-1.0)*cj15*x593*x595))+(((-1.0)*cj14*r11*sj16))), ((x597.value)*((((cj15*r12))+(((-1.0)*x594*x596))+(((-1.0)*x595*x596))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x598=IKsin(j12);
IkReal x599=IKcos(j12);
IkReal x600=(r12*sj15);
IkReal x601=((1.0)*cj14);
IkReal x602=(cj15*sj14);
IkReal x603=(r20*sj16);
IkReal x604=(cj16*r10);
IkReal x605=((1.0)*sj14);
IkReal x606=(cj16*r11);
IkReal x607=(r10*sj16);
IkReal x608=((0.01)*cj15);
IkReal x609=(cj16*r21);
IkReal x610=((1.0)*cj15);
IkReal x611=(r11*sj16);
IkReal x612=(r22*sj15);
IkReal x613=(cj16*r20);
IkReal x614=(r21*sj16);
IkReal x615=(sj13*x599);
IkReal x616=(sj13*x598);
evalcond[0]=((((-1.0)*r22*x610))+x616+((sj15*x609))+((sj15*x603)));
evalcond[1]=((((-1.0)*r12*x610))+x615+((sj15*x607))+((sj15*x606)));
evalcond[2]=(((cj14*x611))+((sj14*x600))+x598+((x602*x606))+((x602*x607))+(((-1.0)*x601*x604)));
evalcond[3]=(((x608*x609))+(((0.37429)*x616))+(((-1.0)*pz))+(((0.069)*x598))+((x603*x608))+(((0.01)*x612)));
evalcond[4]=(((cj14*x614))+(((-1.0)*x599))+((sj14*x612))+((x602*x603))+((x602*x609))+(((-1.0)*x601*x613)));
evalcond[5]=((((0.01)*x600))+(((0.37429)*x615))+(((-1.0)*py))+(((0.069)*x599))+((x607*x608))+((x606*x608)));
evalcond[6]=(((cj13*x598))+(((-1.0)*x605*x613))+((sj14*x614))+(((-1.0)*x601*x612))+(((-1.0)*cj15*x601*x609))+(((-1.0)*cj15*x601*x603)));
evalcond[7]=((((-1.0)*x604*x605))+((cj13*x599))+(((-1.0)*x600*x601))+((sj14*x611))+(((-1.0)*cj15*x601*x606))+(((-1.0)*cj15*x601*x607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x617=((1.0)*sj15);
CheckValue<IkReal> x618 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*r21*x617))+((cj15*r22))+(((-1.0)*r20*sj16*x617)))),IkReal((((cj15*r12))+(((-1.0)*cj16*r11*x617))+(((-1.0)*r10*sj16*x617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x618.valid){
continue;
}
CheckValue<IkReal> x619=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x619.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x618.value)+(((1.5707963267949)*(x619.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x620=IKsin(j12);
IkReal x621=IKcos(j12);
IkReal x622=(r12*sj15);
IkReal x623=((1.0)*cj14);
IkReal x624=(cj15*sj14);
IkReal x625=(r20*sj16);
IkReal x626=(cj16*r10);
IkReal x627=((1.0)*sj14);
IkReal x628=(cj16*r11);
IkReal x629=(r10*sj16);
IkReal x630=((0.01)*cj15);
IkReal x631=(cj16*r21);
IkReal x632=((1.0)*cj15);
IkReal x633=(r11*sj16);
IkReal x634=(r22*sj15);
IkReal x635=(cj16*r20);
IkReal x636=(r21*sj16);
IkReal x637=(sj13*x621);
IkReal x638=(sj13*x620);
evalcond[0]=(((sj15*x631))+((sj15*x625))+x638+(((-1.0)*r22*x632)));
evalcond[1]=((((-1.0)*r12*x632))+((sj15*x629))+((sj15*x628))+x637);
evalcond[2]=((((-1.0)*x623*x626))+x620+((x624*x628))+((x624*x629))+((cj14*x633))+((sj14*x622)));
evalcond[3]=((((0.069)*x620))+((x625*x630))+(((0.01)*x634))+(((-1.0)*pz))+((x630*x631))+(((0.37429)*x638)));
evalcond[4]=(((sj14*x634))+(((-1.0)*x623*x635))+((x624*x631))+((x624*x625))+(((-1.0)*x621))+((cj14*x636)));
evalcond[5]=((((0.069)*x621))+((x628*x630))+((x629*x630))+(((0.01)*x622))+(((-1.0)*py))+(((0.37429)*x637)));
evalcond[6]=(((sj14*x636))+((cj13*x620))+(((-1.0)*x623*x634))+(((-1.0)*x627*x635))+(((-1.0)*cj15*x623*x631))+(((-1.0)*cj15*x623*x625)));
evalcond[7]=(((sj14*x633))+((cj13*x621))+(((-1.0)*x622*x623))+(((-1.0)*x626*x627))+(((-1.0)*cj15*x623*x628))+(((-1.0)*cj15*x623*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x639=(cj16*r01);
IkReal x640=(cj14*cj15);
IkReal x641=(r00*sj16);
if( IKabs((((x639*x640))+((cj14*r02*sj15))+((x640*x641))+(((-1.0)*r01*sj14*sj16))+((cj16*r00*sj14)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj15*x639))+(((-1.0)*cj15*r02))+((sj15*x641)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x639*x640))+((cj14*r02*sj15))+((x640*x641))+(((-1.0)*r01*sj14*sj16))+((cj16*r00*sj14))))+IKsqr((((sj15*x639))+(((-1.0)*cj15*r02))+((sj15*x641))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((x639*x640))+((cj14*r02*sj15))+((x640*x641))+(((-1.0)*r01*sj14*sj16))+((cj16*r00*sj14))), (((sj15*x639))+(((-1.0)*cj15*r02))+((sj15*x641))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x642=IKcos(j13);
IkReal x643=(cj16*r01);
IkReal x644=((0.01)*cj15);
IkReal x645=((1.0)*r00);
IkReal x646=(r00*sj16);
IkReal x647=(r02*sj15);
IkReal x648=((1.0)*cj15);
evalcond[0]=((((-1.0)*x642))+(((-1.0)*r02*x648))+((sj15*x646))+((sj15*x643)));
evalcond[1]=((-0.36442)+((x643*x644))+((x644*x646))+(((-1.0)*px))+(((-0.37429)*x642))+(((0.01)*x647)));
evalcond[2]=((IKsin(j13))+(((-1.0)*cj16*sj14*x645))+(((-1.0)*cj14*x643*x648))+((r01*sj14*sj16))+(((-1.0)*cj14*cj15*sj16*x645))+(((-1.0)*cj14*x647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[3];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x649=(sj15*sj16);
IkReal x650=(cj16*sj15);
j12eval[0]=sj13;
j12eval[1]=((IKabs((((r11*x650))+(((-1.0)*cj15*r12))+((r10*x649)))))+(IKabs((((cj15*r22))+(((-1.0)*r20*x649))+(((-1.0)*r21*x650))))));
j12eval[2]=IKsign(sj13);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j12eval[0]=sj13;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j12eval[0]=((1.0)+(((5.42449275362319)*sj13)));
j12eval[1]=sj13;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.184349034171364)+sj13)))+(IKabs(((-1.0)+(IKsign(cj13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x651=((5.42449275)*sj15);
IkReal x652=((5.42449275)*cj15);
if( IKabs(((((-1.0)*r22*x652))+((cj16*r21*x651))+((r20*sj16*x651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj16*r11*x651))+(((-1.0)*r10*sj16*x651))+((r12*x652)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x652))+((cj16*r21*x651))+((r20*sj16*x651))))+IKsqr(((((-1.0)*cj16*r11*x651))+(((-1.0)*r10*sj16*x651))+((r12*x652))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x652))+((cj16*r21*x651))+((r20*sj16*x651))), ((((-1.0)*cj16*r11*x651))+(((-1.0)*r10*sj16*x651))+((r12*x652))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x653=IKsin(j12);
IkReal x654=IKcos(j12);
IkReal x655=(r12*sj15);
IkReal x656=((1.0)*cj14);
IkReal x657=(cj15*sj14);
IkReal x658=(r20*sj16);
IkReal x659=(cj16*r10);
IkReal x660=((1.0)*sj14);
IkReal x661=(cj16*r11);
IkReal x662=(r10*sj16);
IkReal x663=((0.01)*cj15);
IkReal x664=(cj16*r21);
IkReal x665=(r22*sj15);
IkReal x666=((1.0)*cj15);
IkReal x667=(r11*sj16);
IkReal x668=(cj16*r20);
IkReal x669=(r21*sj16);
evalcond[0]=((((-1.0)*r22*x666))+(((-0.184349034294497)*x653))+((sj15*x658))+((sj15*x664)));
evalcond[1]=((((-1.0)*r12*x666))+((sj15*x661))+((sj15*x662))+(((0.184349034294497)*x654)));
evalcond[2]=((((-4.60872585736242e-11)*x653))+((x663*x664))+(((-1.0)*pz))+((x658*x663))+(((0.01)*x665)));
evalcond[3]=((((4.60872585736242e-11)*x654))+((x662*x663))+(((-1.0)*py))+(((0.01)*x655))+((x661*x663)));
evalcond[4]=((((-1.0)*x654))+((x657*x664))+((cj14*x669))+(((-1.0)*x656*x668))+((x657*x658))+((sj14*x665)));
evalcond[5]=((((-1.0)*x653))+((x657*x662))+((x657*x661))+(((-1.0)*x656*x659))+((cj14*x667))+((sj14*x655)));
evalcond[6]=((((-1.0)*x660*x668))+(((-1.0)*x656*x665))+((sj14*x669))+(((0.98286084)*x653))+(((-1.0)*cj15*x656*x664))+(((-1.0)*cj15*x656*x658)));
evalcond[7]=((((-1.0)*x659*x660))+(((-1.0)*x655*x656))+(((-0.98286084)*x654))+((sj14*x667))+(((-1.0)*cj15*x656*x661))+(((-1.0)*cj15*x656*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj13)))))+(IKabs(((0.184349034171364)+sj13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x670=((5.42449275)*sj15);
IkReal x671=((5.42449275)*cj15);
if( IKabs(((((-1.0)*r22*x671))+((cj16*r21*x670))+((r20*sj16*x670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj16*r11*x670))+((r12*x671))+(((-1.0)*r10*sj16*x670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x671))+((cj16*r21*x670))+((r20*sj16*x670))))+IKsqr(((((-1.0)*cj16*r11*x670))+((r12*x671))+(((-1.0)*r10*sj16*x670))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r22*x671))+((cj16*r21*x670))+((r20*sj16*x670))), ((((-1.0)*cj16*r11*x670))+((r12*x671))+(((-1.0)*r10*sj16*x670))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x672=IKsin(j12);
IkReal x673=IKcos(j12);
IkReal x674=(r12*sj15);
IkReal x675=((1.0)*cj14);
IkReal x676=(cj15*sj14);
IkReal x677=(r20*sj16);
IkReal x678=(cj16*r10);
IkReal x679=((1.0)*sj14);
IkReal x680=(cj16*r11);
IkReal x681=(r10*sj16);
IkReal x682=((0.01)*cj15);
IkReal x683=(cj16*r21);
IkReal x684=(r22*sj15);
IkReal x685=((1.0)*cj15);
IkReal x686=(r11*sj16);
IkReal x687=(cj16*r20);
IkReal x688=(r21*sj16);
evalcond[0]=(((sj15*x683))+((sj15*x677))+(((-1.0)*r22*x685))+(((-0.184349034294497)*x672)));
evalcond[1]=((((-1.0)*r12*x685))+((sj15*x681))+((sj15*x680))+(((0.184349034294497)*x673)));
evalcond[2]=(((x682*x683))+(((0.01)*x684))+((x677*x682))+(((-1.0)*pz))+(((-4.60872585736242e-11)*x672)));
evalcond[3]=((((0.01)*x674))+(((-1.0)*py))+(((4.60872585736242e-11)*x673))+((x681*x682))+((x680*x682)));
evalcond[4]=(((cj14*x688))+((sj14*x684))+((x676*x677))+(((-1.0)*x675*x687))+((x676*x683))+(((-1.0)*x673)));
evalcond[5]=(((cj14*x686))+(((-1.0)*x675*x678))+((sj14*x674))+((x676*x681))+((x676*x680))+(((-1.0)*x672)));
evalcond[6]=((((-0.98286084)*x672))+(((-1.0)*cj15*x675*x683))+((sj14*x688))+(((-1.0)*x675*x684))+(((-1.0)*x679*x687))+(((-1.0)*cj15*x675*x677)));
evalcond[7]=((((-1.0)*cj15*x675*x681))+(((-1.0)*cj15*x675*x680))+((sj14*x686))+(((-1.0)*x678*x679))+(((0.98286084)*x673))+(((-1.0)*x674*x675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x689=((0.144927536231884)*cj15);
IkReal x690=((0.144927536231884)*sj15);
if( IKabs(((((-1.0)*r20*sj16*x689))+(((14.4927536231884)*pz))+(((-1.0)*r22*x690))+(((-1.0)*cj16*r21*x689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-14.4927536231884)*py))+((cj16*r11*x689))+((r10*sj16*x689))+((r12*x690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj16*x689))+(((14.4927536231884)*pz))+(((-1.0)*r22*x690))+(((-1.0)*cj16*r21*x689))))+IKsqr(((((-14.4927536231884)*py))+((cj16*r11*x689))+((r10*sj16*x689))+((r12*x690))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r20*sj16*x689))+(((14.4927536231884)*pz))+(((-1.0)*r22*x690))+(((-1.0)*cj16*r21*x689))), ((((-14.4927536231884)*py))+((cj16*r11*x689))+((r10*sj16*x689))+((r12*x690))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x691=IKcos(j12);
IkReal x692=IKsin(j12);
IkReal x693=(r12*sj15);
IkReal x694=((1.0)*cj14);
IkReal x695=(cj15*sj14);
IkReal x696=(r20*sj16);
IkReal x697=(cj16*r10);
IkReal x698=((1.0)*sj14);
IkReal x699=(cj16*r11);
IkReal x700=((0.01)*cj15);
IkReal x701=(cj16*r21);
IkReal x702=(r22*sj15);
IkReal x703=(r10*sj16);
IkReal x704=(r11*sj16);
IkReal x705=(cj16*r20);
IkReal x706=(r21*sj16);
IkReal x707=((1.0)*x691);
evalcond[0]=(((x700*x701))+(((0.01)*x702))+(((-1.0)*pz))+((x696*x700))+(((0.069)*x692)));
evalcond[1]=(((x700*x703))+(((-1.0)*py))+(((0.01)*x693))+(((-0.069)*x691))+((x699*x700)));
evalcond[2]=(((sj14*x702))+((cj14*x706))+((x695*x696))+(((-1.0)*x694*x705))+((x695*x701))+(((-1.0)*x707)));
evalcond[3]=(((cj14*x704))+((x695*x699))+((x695*x703))+((sj14*x693))+(((-1.0)*x694*x697))+(((-1.0)*x692)));
evalcond[4]=(((sj14*x706))+(((-1.0)*x694*x702))+(((-1.0)*cj15*x694*x701))+x692+(((-1.0)*cj15*x694*x696))+(((-1.0)*x698*x705)));
evalcond[5]=(((sj14*x704))+(((-1.0)*x697*x698))+(((-1.0)*x693*x694))+(((-1.0)*cj15*x694*x703))+(((-1.0)*x707))+(((-1.0)*cj15*x694*x699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x708=((0.144927536231884)*cj15);
IkReal x709=((0.144927536231884)*sj15);
if( IKabs(((((-1.0)*r20*sj16*x708))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x708))+(((-1.0)*r22*x709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-14.4927536231884)*py))+((cj16*r11*x708))+((r12*x709))+((r10*sj16*x708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj16*x708))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x708))+(((-1.0)*r22*x709))))+IKsqr(((((-14.4927536231884)*py))+((cj16*r11*x708))+((r12*x709))+((r10*sj16*x708))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r20*sj16*x708))+(((14.4927536231884)*pz))+(((-1.0)*cj16*r21*x708))+(((-1.0)*r22*x709))), ((((-14.4927536231884)*py))+((cj16*r11*x708))+((r12*x709))+((r10*sj16*x708))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x710=IKcos(j12);
IkReal x711=IKsin(j12);
IkReal x712=(r12*sj15);
IkReal x713=((1.0)*cj14);
IkReal x714=(cj15*sj14);
IkReal x715=(r20*sj16);
IkReal x716=(cj16*r10);
IkReal x717=((1.0)*sj14);
IkReal x718=(cj16*r11);
IkReal x719=((0.01)*cj15);
IkReal x720=(cj16*r21);
IkReal x721=(r22*sj15);
IkReal x722=(r10*sj16);
IkReal x723=(r11*sj16);
IkReal x724=(cj16*r20);
IkReal x725=(r21*sj16);
IkReal x726=((1.0)*x711);
evalcond[0]=(((x715*x719))+(((0.01)*x721))+(((-1.0)*pz))+((x719*x720))+(((0.069)*x711)));
evalcond[1]=((((0.01)*x712))+(((-1.0)*py))+(((-0.069)*x710))+((x719*x722))+((x718*x719)));
evalcond[2]=((((-1.0)*x713*x724))+((x714*x715))+((sj14*x721))+((cj14*x725))+(((-1.0)*x710))+((x714*x720)));
evalcond[3]=(((x714*x718))+((cj14*x723))+(((-1.0)*x726))+(((-1.0)*x713*x716))+((x714*x722))+((sj14*x712)));
evalcond[4]=(((sj14*x723))+(((-1.0)*cj15*x713*x722))+(((-1.0)*cj15*x713*x718))+(((-1.0)*x716*x717))+(((-1.0)*x712*x713))+x710);
evalcond[5]=((((-1.0)*x713*x721))+((sj14*x725))+(((-1.0)*cj15*x713*x720))+(((-1.0)*x717*x724))+(((-1.0)*cj15*x713*x715))+(((-1.0)*x726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x727=((0.01)*cj15);
CheckValue<IkReal> x728=IKPowWithIntegerCheck(((0.069)+(((0.37429)*sj13))),-1);
if(!x728.valid){
continue;
}
CheckValue<IkReal> x729=IKPowWithIntegerCheck(sj13,-1);
if(!x729.valid){
continue;
}
if( IKabs(((x728.value)*(((((-1.0)*r20*sj16*x727))+(((-0.01)*r22*sj15))+pz+(((-1.0)*cj16*r21*x727)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x729.value)*((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x728.value)*(((((-1.0)*r20*sj16*x727))+(((-0.01)*r22*sj15))+pz+(((-1.0)*cj16*r21*x727))))))+IKsqr(((x729.value)*((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x728.value)*(((((-1.0)*r20*sj16*x727))+(((-0.01)*r22*sj15))+pz+(((-1.0)*cj16*r21*x727))))), ((x729.value)*((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x730=IKsin(j12);
IkReal x731=IKcos(j12);
IkReal x732=(r12*sj15);
IkReal x733=((1.0)*cj14);
IkReal x734=(cj15*sj14);
IkReal x735=(r20*sj16);
IkReal x736=(cj16*r10);
IkReal x737=((1.0)*sj14);
IkReal x738=(cj16*r11);
IkReal x739=(r10*sj16);
IkReal x740=((0.01)*cj15);
IkReal x741=(cj16*r21);
IkReal x742=((1.0)*cj15);
IkReal x743=(r11*sj16);
IkReal x744=(r22*sj15);
IkReal x745=(cj16*r20);
IkReal x746=(r21*sj16);
IkReal x747=((1.0)*x731);
IkReal x748=(sj13*x730);
evalcond[0]=(((sj15*x735))+((sj15*x741))+(((-1.0)*r22*x742))+x748);
evalcond[1]=((((-1.0)*r12*x742))+((sj15*x739))+((sj15*x738))+(((-1.0)*sj13*x747)));
evalcond[2]=(((x740*x741))+(((-1.0)*pz))+(((0.01)*x744))+(((0.37429)*x748))+(((0.069)*x730))+((x735*x740)));
evalcond[3]=(((x734*x741))+((x734*x735))+(((-1.0)*x733*x745))+((sj14*x744))+(((-1.0)*x747))+((cj14*x746)));
evalcond[4]=(((sj14*x732))+((x734*x738))+((x734*x739))+(((-1.0)*x733*x736))+(((-1.0)*x730))+((cj14*x743)));
evalcond[5]=(((x738*x740))+(((0.01)*x732))+((x739*x740))+(((-1.0)*py))+(((-0.069)*x731))+(((-0.37429)*sj13*x731)));
evalcond[6]=((((-1.0)*cj15*x733*x735))+((cj13*x730))+(((-1.0)*x737*x745))+(((-1.0)*cj15*x733*x741))+(((-1.0)*x733*x744))+((sj14*x746)));
evalcond[7]=((((-1.0)*cj15*x733*x738))+(((-1.0)*cj15*x733*x739))+(((-1.0)*x732*x733))+(((-1.0)*x736*x737))+((sj14*x743))+(((-1.0)*cj13*x747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x749=(r20*sj16);
IkReal x750=(cj15*sj14);
IkReal x751=((1.0)*sj15);
IkReal x752=(cj16*r21);
CheckValue<IkReal> x753=IKPowWithIntegerCheck(sj13,-1);
if(!x753.valid){
continue;
}
if( IKabs(((x753.value)*((((cj15*r22))+(((-1.0)*x751*x752))+(((-1.0)*x749*x751)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj14*cj16*r20))+((cj14*r21*sj16))+((x749*x750))+((x750*x752))+((r22*sj14*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x753.value)*((((cj15*r22))+(((-1.0)*x751*x752))+(((-1.0)*x749*x751))))))+IKsqr(((((-1.0)*cj14*cj16*r20))+((cj14*r21*sj16))+((x749*x750))+((x750*x752))+((r22*sj14*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x753.value)*((((cj15*r22))+(((-1.0)*x751*x752))+(((-1.0)*x749*x751))))), ((((-1.0)*cj14*cj16*r20))+((cj14*r21*sj16))+((x749*x750))+((x750*x752))+((r22*sj14*sj15))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x754=IKsin(j12);
IkReal x755=IKcos(j12);
IkReal x756=(r12*sj15);
IkReal x757=((1.0)*cj14);
IkReal x758=(cj15*sj14);
IkReal x759=(r20*sj16);
IkReal x760=(cj16*r10);
IkReal x761=((1.0)*sj14);
IkReal x762=(cj16*r11);
IkReal x763=(r10*sj16);
IkReal x764=((0.01)*cj15);
IkReal x765=(cj16*r21);
IkReal x766=((1.0)*cj15);
IkReal x767=(r11*sj16);
IkReal x768=(r22*sj15);
IkReal x769=(cj16*r20);
IkReal x770=(r21*sj16);
IkReal x771=((1.0)*x755);
IkReal x772=(sj13*x754);
evalcond[0]=(((sj15*x765))+((sj15*x759))+x772+(((-1.0)*r22*x766)));
evalcond[1]=((((-1.0)*sj13*x771))+((sj15*x762))+((sj15*x763))+(((-1.0)*r12*x766)));
evalcond[2]=(((x759*x764))+(((0.37429)*x772))+(((-1.0)*pz))+(((0.069)*x754))+(((0.01)*x768))+((x764*x765)));
evalcond[3]=(((x758*x759))+((x758*x765))+(((-1.0)*x757*x769))+(((-1.0)*x771))+((sj14*x768))+((cj14*x770)));
evalcond[4]=(((cj14*x767))+((x758*x763))+((x758*x762))+(((-1.0)*x757*x760))+(((-1.0)*x754))+((sj14*x756)));
evalcond[5]=((((-0.37429)*sj13*x755))+((x763*x764))+((x762*x764))+(((-1.0)*py))+(((0.01)*x756))+(((-0.069)*x755)));
evalcond[6]=(((cj13*x754))+(((-1.0)*cj15*x757*x759))+(((-1.0)*x757*x768))+(((-1.0)*cj15*x757*x765))+((sj14*x770))+(((-1.0)*x761*x769)));
evalcond[7]=((((-1.0)*cj13*x771))+(((-1.0)*x756*x757))+(((-1.0)*cj15*x757*x763))+(((-1.0)*cj15*x757*x762))+((sj14*x767))+(((-1.0)*x760*x761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x773=((1.0)*sj15);
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*r21*x773))+((cj15*r22))+(((-1.0)*r20*sj16*x773)))),IkReal((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
CheckValue<IkReal> x775=IKPowWithIntegerCheck(IKsign(sj13),-1);
if(!x775.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x774.value)+(((1.5707963267949)*(x775.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x776=IKsin(j12);
IkReal x777=IKcos(j12);
IkReal x778=(r12*sj15);
IkReal x779=((1.0)*cj14);
IkReal x780=(cj15*sj14);
IkReal x781=(r20*sj16);
IkReal x782=(cj16*r10);
IkReal x783=((1.0)*sj14);
IkReal x784=(cj16*r11);
IkReal x785=(r10*sj16);
IkReal x786=((0.01)*cj15);
IkReal x787=(cj16*r21);
IkReal x788=((1.0)*cj15);
IkReal x789=(r11*sj16);
IkReal x790=(r22*sj15);
IkReal x791=(cj16*r20);
IkReal x792=(r21*sj16);
IkReal x793=((1.0)*x777);
IkReal x794=(sj13*x776);
evalcond[0]=(((sj15*x781))+((sj15*x787))+(((-1.0)*r22*x788))+x794);
evalcond[1]=(((sj15*x785))+((sj15*x784))+(((-1.0)*sj13*x793))+(((-1.0)*r12*x788)));
evalcond[2]=(((x781*x786))+(((0.37429)*x794))+((x786*x787))+(((-1.0)*pz))+(((0.069)*x776))+(((0.01)*x790)));
evalcond[3]=((((-1.0)*x779*x791))+(((-1.0)*x793))+((cj14*x792))+((x780*x781))+((x780*x787))+((sj14*x790)));
evalcond[4]=(((cj14*x789))+((x780*x785))+((x780*x784))+(((-1.0)*x776))+((sj14*x778))+(((-1.0)*x779*x782)));
evalcond[5]=(((x785*x786))+(((-0.37429)*sj13*x777))+((x784*x786))+(((-1.0)*py))+(((0.01)*x778))+(((-0.069)*x777)));
evalcond[6]=((((-1.0)*x779*x790))+(((-1.0)*x783*x791))+((cj13*x776))+(((-1.0)*cj15*x779*x787))+(((-1.0)*cj15*x779*x781))+((sj14*x792)));
evalcond[7]=((((-1.0)*cj13*x793))+(((-1.0)*x778*x779))+(((-1.0)*cj15*x779*x784))+(((-1.0)*cj15*x779*x785))+(((-1.0)*x782*x783))+((sj14*x789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x795=(sj14*sj15);
IkReal x796=(cj15*sj14);
IkReal x797=((1.0)*sj16);
IkReal x798=((1.0)*cj16);
CheckValue<IkReal> x799=IKPowWithIntegerCheck(cj11,-1);
if(!x799.valid){
continue;
}
if( IKabs(((x799.value)*(((((-1.0)*cj14*r11*x797))+(((-1.0)*r12*x795))+((cj14*cj16*r10))+(((-1.0)*r11*x796*x798))+(((-1.0)*r10*x796*x797)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj14*r20*x798))+((r20*sj16*x796))+((cj14*r21*sj16))+((r22*x795))+((cj16*r21*x796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x799.value)*(((((-1.0)*cj14*r11*x797))+(((-1.0)*r12*x795))+((cj14*cj16*r10))+(((-1.0)*r11*x796*x798))+(((-1.0)*r10*x796*x797))))))+IKsqr(((((-1.0)*cj14*r20*x798))+((r20*sj16*x796))+((cj14*r21*sj16))+((r22*x795))+((cj16*r21*x796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x799.value)*(((((-1.0)*cj14*r11*x797))+(((-1.0)*r12*x795))+((cj14*cj16*r10))+(((-1.0)*r11*x796*x798))+(((-1.0)*r10*x796*x797))))), ((((-1.0)*cj14*r20*x798))+((r20*sj16*x796))+((cj14*r21*sj16))+((r22*x795))+((cj16*r21*x796))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x800=IKsin(j12);
IkReal x801=(sj14*sj15);
IkReal x802=(cj14*sj16);
IkReal x803=(cj15*sj14*sj16);
IkReal x804=((1.0)*cj14*cj16);
IkReal x805=(cj15*cj16*sj14);
evalcond[0]=(((r21*x802))+((r21*x805))+(((-1.0)*(IKcos(j12))))+((r22*x801))+(((-1.0)*r20*x804))+((r20*x803)));
evalcond[1]=(((r12*x801))+((r11*x805))+((r11*x802))+((r10*x803))+((cj11*x800))+(((-1.0)*r10*x804)));
evalcond[2]=((((-1.0)*sj11*x800))+(((-1.0)*r00*x804))+((r02*x801))+((r01*x802))+((r01*x805))+((r00*x803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
j13eval[0]=sj12;
j13eval[1]=sj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
j13eval[0]=sj12;
j13eval[1]=cj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x806=(cj15*r12);
IkReal x807=(sj11*sj15);
IkReal x808=(cj15*r02);
IkReal x809=((1.0)*cj11*cj16*sj15);
IkReal x810=((1.0)*cj11*sj15*sj16);
if( IKabs(((((-1.0)*r11*x809))+(((-1.0)*sj11*x808))+((r00*sj16*x807))+(((-1.0)*r10*x810))+((cj11*x806))+((cj16*r01*x807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x809))+(((-1.0)*cj16*r11*x807))+((sj11*x806))+(((-1.0)*r10*sj16*x807))+(((-1.0)*r00*x810))+((cj11*x808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x809))+(((-1.0)*sj11*x808))+((r00*sj16*x807))+(((-1.0)*r10*x810))+((cj11*x806))+((cj16*r01*x807))))+IKsqr(((((-1.0)*r01*x809))+(((-1.0)*cj16*r11*x807))+((sj11*x806))+(((-1.0)*r10*sj16*x807))+(((-1.0)*r00*x810))+((cj11*x808))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r11*x809))+(((-1.0)*sj11*x808))+((r00*sj16*x807))+(((-1.0)*r10*x810))+((cj11*x806))+((cj16*r01*x807))), ((((-1.0)*r01*x809))+(((-1.0)*cj16*r11*x807))+((sj11*x806))+(((-1.0)*r10*sj16*x807))+(((-1.0)*r00*x810))+((cj11*x808))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x811=IKcos(j13);
IkReal x812=IKsin(j13);
IkReal x813=((1.0)*cj16);
IkReal x814=(sj15*sj16);
IkReal x815=(sj14*sj16);
IkReal x816=((0.01)*cj15);
IkReal x817=(r00*sj16);
IkReal x818=(cj14*cj15);
IkReal x819=(cj16*r01);
IkReal x820=((0.37429)*cj11);
IkReal x821=((1.0)*cj15);
IkReal x822=(cj16*r11);
IkReal x823=((0.01)*sj15);
IkReal x824=(r10*sj16);
IkReal x825=(cj11*x811);
IkReal x826=((1.0)*cj14*sj15);
IkReal x827=(sj11*x812);
IkReal x828=(sj11*x811);
IkReal x829=(cj11*x812);
IkReal x830=((1.0)*x827);
evalcond[0]=((((-1.0)*r12*x821))+((r10*x814))+((sj15*x822))+x829+x828);
evalcond[1]=((((-1.0)*r02*x821))+((r00*x814))+(((-1.0)*x830))+x825+((sj15*x819)));
evalcond[2]=(((x816*x817))+((x816*x819))+((x811*x820))+(((0.36442)*cj11))+(((-1.0)*px))+(((-0.069)*sj11))+(((-0.37429)*x827))+((r02*x823)));
evalcond[3]=((((0.37429)*x828))+((x812*x820))+((r12*x823))+(((0.069)*cj11))+((x816*x824))+((x816*x822))+(((-1.0)*py))+(((0.36442)*sj11)));
evalcond[4]=(((r11*x815))+(((-1.0)*x818*x824))+(((-1.0)*r12*x826))+(((-1.0)*r11*x813*x818))+(((-1.0)*x830))+(((-1.0)*r10*sj14*x813))+x825);
evalcond[5]=((((-1.0)*r02*x826))+(((-1.0)*r00*sj14*x813))+(((-1.0)*x817*x818))+((r01*x815))+(((-1.0)*x828))+(((-1.0)*x829))+(((-1.0)*r01*x813*x818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x831=((1.0)*cj11);
IkReal x832=(cj15*r12);
IkReal x833=(sj15*sj16);
IkReal x834=((1.0)*sj11);
IkReal x835=(cj16*sj15);
IkReal x836=(cj15*r02);
if( IKabs(((((-1.0)*r01*x834*x835))+(((-1.0)*r00*x833*x834))+((cj11*r10*x833))+((cj11*r11*x835))+((sj11*x836))+(((-1.0)*x831*x832)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*x836))+(((-1.0)*r10*x833*x834))+(((-1.0)*r00*x831*x833))+(((-1.0)*r01*x831*x835))+(((-1.0)*r11*x834*x835))+((sj11*x832)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x834*x835))+(((-1.0)*r00*x833*x834))+((cj11*r10*x833))+((cj11*r11*x835))+((sj11*x836))+(((-1.0)*x831*x832))))+IKsqr((((cj11*x836))+(((-1.0)*r10*x833*x834))+(((-1.0)*r00*x831*x833))+(((-1.0)*r01*x831*x835))+(((-1.0)*r11*x834*x835))+((sj11*x832))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r01*x834*x835))+(((-1.0)*r00*x833*x834))+((cj11*r10*x833))+((cj11*r11*x835))+((sj11*x836))+(((-1.0)*x831*x832))), (((cj11*x836))+(((-1.0)*r10*x833*x834))+(((-1.0)*r00*x831*x833))+(((-1.0)*r01*x831*x835))+(((-1.0)*r11*x834*x835))+((sj11*x832))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x837=IKcos(j13);
IkReal x838=IKsin(j13);
IkReal x839=(r12*sj15);
IkReal x840=((1.0)*cj14);
IkReal x841=(sj15*sj16);
IkReal x842=(r02*sj15);
IkReal x843=(sj14*sj16);
IkReal x844=((0.01)*cj15);
IkReal x845=(r00*sj16);
IkReal x846=(cj16*r11);
IkReal x847=(cj16*r01);
IkReal x848=((1.0)*cj15);
IkReal x849=(r10*sj16);
IkReal x850=(sj11*x837);
IkReal x851=((1.0)*cj16*sj14);
IkReal x852=(sj11*x838);
IkReal x853=(cj11*x837);
IkReal x854=(cj11*x838);
IkReal x855=((1.0)*x854);
evalcond[0]=((((-1.0)*r02*x848))+((sj15*x847))+((r00*x841))+x852+x853);
evalcond[1]=((((-1.0)*x855))+((sj15*x846))+((r10*x841))+(((-1.0)*r12*x848))+x850);
evalcond[2]=((((0.01)*x842))+(((0.36442)*cj11))+(((-1.0)*px))+(((0.069)*sj11))+(((0.37429)*x853))+(((0.37429)*x852))+((x844*x845))+((x844*x847)));
evalcond[3]=((((0.01)*x839))+(((-1.0)*py))+(((-0.069)*cj11))+(((0.36442)*sj11))+(((-0.37429)*x854))+(((0.37429)*x850))+((x844*x846))+((x844*x849)));
evalcond[4]=((((-1.0)*x855))+(((-1.0)*r00*x851))+(((-1.0)*cj15*x840*x847))+(((-1.0)*cj15*x840*x845))+(((-1.0)*x840*x842))+((r01*x843))+x850);
evalcond[5]=((((-1.0)*x852))+(((-1.0)*x853))+(((-1.0)*cj15*x840*x849))+(((-1.0)*cj15*x840*x846))+(((-1.0)*x839*x840))+(((-1.0)*r10*x851))+((r11*x843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j13eval[0]=sj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x856=(cj16*sj15);
IkReal x857=(sj15*sj16);
if( IKabs((((r00*x857))+(((-1.0)*cj15*r02))+((r01*x856)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*r11*x856))+(((-1.0)*r10*x857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x857))+(((-1.0)*cj15*r02))+((r01*x856))))+IKsqr((((cj15*r12))+(((-1.0)*r11*x856))+(((-1.0)*r10*x857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r00*x857))+(((-1.0)*cj15*r02))+((r01*x856))), (((cj15*r12))+(((-1.0)*r11*x856))+(((-1.0)*r10*x857))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x858=IKsin(j13);
IkReal x859=IKcos(j13);
IkReal x860=(r12*sj15);
IkReal x861=((1.0)*cj14);
IkReal x862=(sj15*sj16);
IkReal x863=(r02*sj15);
IkReal x864=(sj14*sj16);
IkReal x865=((0.01)*cj15);
IkReal x866=(r00*sj16);
IkReal x867=(cj15*cj16);
IkReal x868=(cj16*r01);
IkReal x869=((1.0)*cj15);
IkReal x870=(cj16*r11);
IkReal x871=(r10*sj16);
IkReal x872=((1.0)*x858);
IkReal x873=((1.0)*cj16*sj14);
evalcond[0]=(((r10*x862))+((sj15*x870))+x859+(((-1.0)*r12*x869)));
evalcond[1]=(((r00*x862))+((sj15*x868))+(((-1.0)*r02*x869))+(((-1.0)*x872)));
evalcond[2]=((-0.069)+(((0.01)*x863))+(((-1.0)*px))+((x865*x866))+((x865*x868))+(((-0.37429)*x858)));
evalcond[3]=((0.36442)+(((0.01)*x860))+(((-1.0)*py))+(((0.37429)*x859))+((x865*x871))+((x865*x870)));
evalcond[4]=(((r11*x864))+(((-1.0)*r11*x861*x867))+(((-1.0)*cj15*x861*x871))+(((-1.0)*x860*x861))+(((-1.0)*r10*x873))+(((-1.0)*x872)));
evalcond[5]=(((r01*x864))+(((-1.0)*x859))+(((-1.0)*cj15*x861*x866))+(((-1.0)*r00*x873))+(((-1.0)*x861*x863))+(((-1.0)*r01*x861*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x874=((1.0)*sj15);
if( IKabs(((((-1.0)*cj16*r01*x874))+(((-1.0)*r00*sj16*x874))+((cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*r10*sj16*x874))+(((-1.0)*cj16*r11*x874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*r01*x874))+(((-1.0)*r00*sj16*x874))+((cj15*r02))))+IKsqr((((cj15*r12))+(((-1.0)*r10*sj16*x874))+(((-1.0)*cj16*r11*x874))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*cj16*r01*x874))+(((-1.0)*r00*sj16*x874))+((cj15*r02))), (((cj15*r12))+(((-1.0)*r10*sj16*x874))+(((-1.0)*cj16*r11*x874))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x875=IKsin(j13);
IkReal x876=IKcos(j13);
IkReal x877=(r12*sj15);
IkReal x878=((1.0)*cj14);
IkReal x879=(sj15*sj16);
IkReal x880=(r02*sj15);
IkReal x881=(sj14*sj16);
IkReal x882=((0.01)*cj15);
IkReal x883=(r00*sj16);
IkReal x884=(cj16*r11);
IkReal x885=(cj16*r01);
IkReal x886=((1.0)*cj15);
IkReal x887=(r10*sj16);
IkReal x888=((1.0)*cj16*sj14);
evalcond[0]=(((r10*x879))+(((-1.0)*r12*x886))+x876+((sj15*x884)));
evalcond[1]=(((r00*x879))+x875+(((-1.0)*r02*x886))+((sj15*x885)));
evalcond[2]=((0.069)+((x882*x885))+((x882*x883))+(((-1.0)*px))+(((0.37429)*x875))+(((0.01)*x880)));
evalcond[3]=((0.36442)+((x882*x884))+((x882*x887))+(((0.01)*x877))+(((-1.0)*py))+(((0.37429)*x876)));
evalcond[4]=(((r01*x881))+(((-1.0)*cj15*x878*x883))+(((-1.0)*cj15*x878*x885))+x876+(((-1.0)*r00*x888))+(((-1.0)*x878*x880)));
evalcond[5]=((((-1.0)*x877*x878))+((r11*x881))+(((-1.0)*x875))+(((-1.0)*cj15*x878*x884))+(((-1.0)*cj15*x878*x887))+(((-1.0)*r10*x888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x889=((1.0)*sj15);
if( IKabs((((cj15*r22))+(((-1.0)*cj16*r21*x889))+(((-1.0)*r20*sj16*x889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*cj16*r11*x889))+(((-1.0)*r10*sj16*x889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r22))+(((-1.0)*cj16*r21*x889))+(((-1.0)*r20*sj16*x889))))+IKsqr((((cj15*r12))+(((-1.0)*cj16*r11*x889))+(((-1.0)*r10*sj16*x889))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r22))+(((-1.0)*cj16*r21*x889))+(((-1.0)*r20*sj16*x889))), (((cj15*r12))+(((-1.0)*cj16*r11*x889))+(((-1.0)*r10*sj16*x889))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x890=IKsin(j13);
IkReal x891=IKcos(j13);
IkReal x892=(r12*sj15);
IkReal x893=((1.0)*cj14);
IkReal x894=(r10*sj16);
IkReal x895=((0.01)*cj15);
IkReal x896=(cj16*r21);
IkReal x897=(r22*sj15);
IkReal x898=((1.0)*cj15);
IkReal x899=(sj14*sj16);
IkReal x900=(r20*sj16);
IkReal x901=(cj16*r11);
IkReal x902=((1.0)*cj16*sj14);
evalcond[0]=(((sj15*x900))+(((-1.0)*r22*x898))+x890+((sj15*x896)));
evalcond[1]=(((sj15*x901))+(((-1.0)*r12*x898))+x891+((sj15*x894)));
evalcond[2]=((0.069)+(((0.37429)*x890))+((x895*x900))+((x895*x896))+(((-1.0)*pz))+(((0.01)*x897)));
evalcond[3]=((0.36442)+(((0.37429)*x891))+((x895*x901))+((x894*x895))+(((-1.0)*py))+(((0.01)*x892)));
evalcond[4]=((((-1.0)*r20*x902))+(((-1.0)*cj15*x893*x896))+(((-1.0)*x893*x897))+(((-1.0)*cj15*x893*x900))+((r21*x899))+x891);
evalcond[5]=((((-1.0)*x892*x893))+((r11*x899))+(((-1.0)*x890))+(((-1.0)*cj15*x893*x894))+(((-1.0)*cj15*x893*x901))+(((-1.0)*r10*x902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x903=(cj16*sj15);
IkReal x904=(sj15*sj16);
if( IKabs((((r21*x903))+((r20*x904))+(((-1.0)*cj15*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*r11*x903))+(((-1.0)*r10*x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x903))+((r20*x904))+(((-1.0)*cj15*r22))))+IKsqr((((cj15*r12))+(((-1.0)*r11*x903))+(((-1.0)*r10*x904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r21*x903))+((r20*x904))+(((-1.0)*cj15*r22))), (((cj15*r12))+(((-1.0)*r11*x903))+(((-1.0)*r10*x904))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x905=IKsin(j13);
IkReal x906=IKcos(j13);
IkReal x907=(r12*sj15);
IkReal x908=((1.0)*cj14);
IkReal x909=(r10*sj16);
IkReal x910=((0.01)*cj15);
IkReal x911=(cj16*r21);
IkReal x912=(r22*sj15);
IkReal x913=((1.0)*cj15);
IkReal x914=(sj14*sj16);
IkReal x915=(r20*sj16);
IkReal x916=(cj16*r11);
IkReal x917=((1.0)*x905);
IkReal x918=((1.0)*cj16*sj14);
evalcond[0]=(((sj15*x909))+((sj15*x916))+(((-1.0)*r12*x913))+x906);
evalcond[1]=((((-1.0)*r22*x913))+((sj15*x911))+((sj15*x915))+(((-1.0)*x917)));
evalcond[2]=((-0.069)+((x910*x911))+((x910*x915))+(((-1.0)*pz))+(((-0.37429)*x905))+(((0.01)*x912)));
evalcond[3]=((0.36442)+((x910*x916))+((x909*x910))+(((0.37429)*x906))+(((0.01)*x907))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*x908*x912))+(((-1.0)*r20*x918))+(((-1.0)*x906))+(((-1.0)*cj15*x908*x915))+(((-1.0)*cj15*x908*x911))+((r21*x914)));
evalcond[5]=((((-1.0)*x917))+((r11*x914))+(((-1.0)*cj15*x908*x916))+(((-1.0)*r10*x918))+(((-1.0)*cj15*x908*x909))+(((-1.0)*x907*x908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x919=((1.0)*sj15);
CheckValue<IkReal> x920=IKPowWithIntegerCheck(sj12,-1);
if(!x920.valid){
continue;
}
if( IKabs(((x920.value)*((((cj15*r22))+(((-1.0)*r20*sj16*x919))+(((-1.0)*cj16*r21*x919)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*r10*sj16*x919))+(((-1.0)*cj16*r11*x919)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x920.value)*((((cj15*r22))+(((-1.0)*r20*sj16*x919))+(((-1.0)*cj16*r21*x919))))))+IKsqr((((cj15*r12))+(((-1.0)*r10*sj16*x919))+(((-1.0)*cj16*r11*x919))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x920.value)*((((cj15*r22))+(((-1.0)*r20*sj16*x919))+(((-1.0)*cj16*r21*x919))))), (((cj15*r12))+(((-1.0)*r10*sj16*x919))+(((-1.0)*cj16*r11*x919))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x921=IKsin(j13);
IkReal x922=IKcos(j13);
IkReal x923=(r12*sj15);
IkReal x924=((1.0)*cj14);
IkReal x925=(sj15*sj16);
IkReal x926=((0.01)*cj15);
IkReal x927=(cj16*r21);
IkReal x928=(r22*sj15);
IkReal x929=((1.0)*cj15);
IkReal x930=(sj14*sj16);
IkReal x931=(r00*sj16);
IkReal x932=(r02*sj15);
IkReal x933=(r20*sj16);
IkReal x934=(cj16*r01);
IkReal x935=(cj16*r11);
IkReal x936=(r10*sj16);
IkReal x937=(sj12*x921);
IkReal x938=((1.0)*cj16*sj14);
IkReal x939=(cj12*x921);
evalcond[0]=((((-1.0)*r12*x929))+((r10*x925))+((sj15*x935))+x922);
evalcond[1]=((((-1.0)*r22*x929))+((sj15*x927))+((r20*x925))+x937);
evalcond[2]=((((-1.0)*r02*x929))+(((-1.0)*x939))+((sj15*x934))+((r00*x925)));
evalcond[3]=((0.36442)+(((0.37429)*x922))+(((0.01)*x923))+(((-1.0)*py))+((x926*x936))+((x926*x935)));
evalcond[4]=((((0.37429)*x937))+(((0.01)*x928))+(((-1.0)*pz))+(((0.069)*sj12))+((x926*x927))+((x926*x933)));
evalcond[5]=((((0.01)*x932))+(((-1.0)*px))+(((-0.069)*cj12))+(((-0.37429)*x939))+((x926*x931))+((x926*x934)));
evalcond[6]=((((-1.0)*r20*x938))+((r21*x930))+(((-1.0)*cj15*x924*x933))+(((-1.0)*cj15*x924*x927))+((sj12*x922))+(((-1.0)*x924*x928)));
evalcond[7]=((((-1.0)*r10*x938))+(((-1.0)*cj15*x924*x935))+(((-1.0)*cj15*x924*x936))+(((-1.0)*x921))+((r11*x930))+(((-1.0)*x923*x924)));
evalcond[8]=((((-1.0)*cj15*x924*x934))+(((-1.0)*cj15*x924*x931))+(((-1.0)*x924*x932))+(((-1.0)*cj12*x922))+((r01*x930))+(((-1.0)*r00*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x940=(cj16*sj15);
IkReal x941=(sj15*sj16);
CheckValue<IkReal> x942=IKPowWithIntegerCheck(cj12,-1);
if(!x942.valid){
continue;
}
if( IKabs(((x942.value)*((((r01*x940))+(((-1.0)*cj15*r02))+((r00*x941)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*r11*x940))+(((-1.0)*r10*x941)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x942.value)*((((r01*x940))+(((-1.0)*cj15*r02))+((r00*x941))))))+IKsqr((((cj15*r12))+(((-1.0)*r11*x940))+(((-1.0)*r10*x941))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x942.value)*((((r01*x940))+(((-1.0)*cj15*r02))+((r00*x941))))), (((cj15*r12))+(((-1.0)*r11*x940))+(((-1.0)*r10*x941))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x943=IKsin(j13);
IkReal x944=IKcos(j13);
IkReal x945=(r12*sj15);
IkReal x946=((1.0)*cj14);
IkReal x947=(sj15*sj16);
IkReal x948=((0.01)*cj15);
IkReal x949=(cj16*r21);
IkReal x950=(r22*sj15);
IkReal x951=((1.0)*cj15);
IkReal x952=(sj14*sj16);
IkReal x953=(r00*sj16);
IkReal x954=(r02*sj15);
IkReal x955=(r20*sj16);
IkReal x956=(cj16*r01);
IkReal x957=(cj16*r11);
IkReal x958=(r10*sj16);
IkReal x959=(sj12*x943);
IkReal x960=((1.0)*cj16*sj14);
IkReal x961=(cj12*x943);
evalcond[0]=(((sj15*x957))+(((-1.0)*r12*x951))+x944+((r10*x947)));
evalcond[1]=(((sj15*x949))+(((-1.0)*r22*x951))+x959+((r20*x947)));
evalcond[2]=((((-1.0)*x961))+((r00*x947))+((sj15*x956))+(((-1.0)*r02*x951)));
evalcond[3]=((0.36442)+(((0.37429)*x944))+((x948*x958))+((x948*x957))+(((-1.0)*py))+(((0.01)*x945)));
evalcond[4]=((((0.01)*x950))+((x948*x949))+((x948*x955))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.37429)*x959)));
evalcond[5]=((((0.01)*x954))+((x948*x956))+((x948*x953))+(((-1.0)*px))+(((-0.069)*cj12))+(((-0.37429)*x961)));
evalcond[6]=((((-1.0)*r20*x960))+((r21*x952))+((sj12*x944))+(((-1.0)*x946*x950))+(((-1.0)*cj15*x946*x949))+(((-1.0)*cj15*x946*x955)));
evalcond[7]=((((-1.0)*r10*x960))+(((-1.0)*x945*x946))+(((-1.0)*x943))+((r11*x952))+(((-1.0)*cj15*x946*x957))+(((-1.0)*cj15*x946*x958)));
evalcond[8]=((((-1.0)*r00*x960))+(((-1.0)*cj12*x944))+((r01*x952))+(((-1.0)*x946*x954))+(((-1.0)*cj15*x946*x956))+(((-1.0)*cj15*x946*x953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j13eval[0]=sj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x962=(sj15*sj16);
IkReal x963=(cj16*sj15);
if( IKabs(((((-1.0)*r20*x962))+((cj15*r22))+(((-1.0)*r21*x963)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x963))+(((-1.0)*cj15*r12))+((r10*x962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x962))+((cj15*r22))+(((-1.0)*r21*x963))))+IKsqr((((r11*x963))+(((-1.0)*cj15*r12))+((r10*x962))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r20*x962))+((cj15*r22))+(((-1.0)*r21*x963))), (((r11*x963))+(((-1.0)*cj15*r12))+((r10*x962))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x964=IKsin(j13);
IkReal x965=IKcos(j13);
IkReal x966=(r12*sj15);
IkReal x967=((1.0)*cj14);
IkReal x968=(r10*sj16);
IkReal x969=(cj15*cj16);
IkReal x970=(r22*sj15);
IkReal x971=((1.0)*cj15);
IkReal x972=((0.01)*cj15);
IkReal x973=(sj14*sj16);
IkReal x974=(r20*sj16);
IkReal x975=(cj16*sj15);
IkReal x976=((1.0)*cj16*sj14);
evalcond[0]=(((r21*x975))+((sj15*x974))+x964+(((-1.0)*r22*x971)));
evalcond[1]=((((-1.0)*x965))+((sj15*x968))+((r11*x975))+(((-1.0)*r12*x971)));
evalcond[2]=((0.069)+(((0.37429)*x964))+(((0.01)*x970))+(((-1.0)*pz))+(((0.01)*r21*x969))+((x972*x974)));
evalcond[3]=((-0.36442)+(((0.01)*x966))+(((0.01)*r11*x969))+((x968*x972))+(((-1.0)*py))+(((-0.37429)*x965)));
evalcond[4]=((((-1.0)*r20*x976))+((r21*x973))+(((-1.0)*r21*x967*x969))+(((-1.0)*x967*x970))+(((-1.0)*cj15*x967*x974))+x965);
evalcond[5]=((((-1.0)*r11*x967*x969))+(((-1.0)*x966*x967))+(((-1.0)*cj15*x967*x968))+((r11*x973))+x964+(((-1.0)*r10*x976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x977=(sj15*sj16);
IkReal x978=((1.0)*cj15);
IkReal x979=(cj16*sj15);
if( IKabs((((r21*x979))+((r20*x977))+(((-1.0)*r22*x978)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x977))+((r11*x979))+(((-1.0)*r12*x978)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x979))+((r20*x977))+(((-1.0)*r22*x978))))+IKsqr((((r10*x977))+((r11*x979))+(((-1.0)*r12*x978))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r21*x979))+((r20*x977))+(((-1.0)*r22*x978))), (((r10*x977))+((r11*x979))+(((-1.0)*r12*x978))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x980=IKsin(j13);
IkReal x981=IKcos(j13);
IkReal x982=(r12*sj15);
IkReal x983=((1.0)*cj14);
IkReal x984=(r10*sj16);
IkReal x985=((0.01)*cj15);
IkReal x986=(cj16*r21);
IkReal x987=(r22*sj15);
IkReal x988=((1.0)*cj15);
IkReal x989=(sj14*sj16);
IkReal x990=(cj16*r11);
IkReal x991=(r20*sj16);
IkReal x992=((1.0)*x981);
IkReal x993=((1.0)*cj16*sj14);
evalcond[0]=((((-1.0)*x980))+((sj15*x991))+((sj15*x986))+(((-1.0)*r22*x988)));
evalcond[1]=(((sj15*x990))+(((-1.0)*x992))+(((-1.0)*r12*x988))+((sj15*x984)));
evalcond[2]=((-0.069)+(((0.01)*x987))+(((-1.0)*pz))+(((-0.37429)*x980))+((x985*x986))+((x985*x991)));
evalcond[3]=((-0.36442)+(((0.01)*x982))+(((-1.0)*py))+(((-0.37429)*x981))+((x984*x985))+((x985*x990)));
evalcond[4]=((((-1.0)*cj15*x983*x990))+(((-1.0)*r10*x993))+(((-1.0)*x982*x983))+(((-1.0)*cj15*x983*x984))+((r11*x989))+x980);
evalcond[5]=((((-1.0)*cj15*x983*x991))+((r21*x989))+(((-1.0)*x992))+(((-1.0)*cj15*x983*x986))+(((-1.0)*r20*x993))+(((-1.0)*x983*x987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x994=((1.0)*sj15);
if( IKabs(((((-1.0)*r00*sj16*x994))+((cj15*r02))+(((-1.0)*cj16*r01*x994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj16*x994))+((cj15*r02))+(((-1.0)*cj16*r01*x994))))+IKsqr((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r00*sj16*x994))+((cj15*r02))+(((-1.0)*cj16*r01*x994))), (((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x995=IKsin(j13);
IkReal x996=IKcos(j13);
IkReal x997=(r12*sj15);
IkReal x998=((1.0)*cj14);
IkReal x999=(sj15*sj16);
IkReal x1000=(r02*sj15);
IkReal x1001=(sj14*sj16);
IkReal x1002=((0.01)*cj15);
IkReal x1003=(r00*sj16);
IkReal x1004=(cj16*r11);
IkReal x1005=(cj16*r01);
IkReal x1006=((1.0)*cj15);
IkReal x1007=(r10*sj16);
IkReal x1008=((1.0)*cj16*sj14);
evalcond[0]=(((r00*x999))+((sj15*x1005))+(((-1.0)*r02*x1006))+x995);
evalcond[1]=((((-1.0)*x996))+((sj15*x1004))+(((-1.0)*r12*x1006))+((r10*x999)));
evalcond[2]=((0.069)+(((0.01)*x1000))+(((-1.0)*px))+(((0.37429)*x995))+((x1002*x1005))+((x1002*x1003)));
evalcond[3]=((-0.36442)+(((-0.37429)*x996))+(((-1.0)*py))+((x1002*x1007))+((x1002*x1004))+(((0.01)*x997)));
evalcond[4]=((((-1.0)*r10*x1008))+(((-1.0)*cj15*x1004*x998))+(((-1.0)*x997*x998))+(((-1.0)*cj15*x1007*x998))+((r11*x1001))+x995);
evalcond[5]=((((-1.0)*cj15*x1003*x998))+((r01*x1001))+(((-1.0)*x1000*x998))+(((-1.0)*r00*x1008))+x996+(((-1.0)*cj15*x1005*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1009=(sj15*sj16);
IkReal x1010=(cj16*sj15);
IkReal x1011=((1.0)*cj15);
if( IKabs(((((-1.0)*r02*x1011))+((r01*x1010))+((r00*x1009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1011))+((r11*x1010))+((r10*x1009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1011))+((r01*x1010))+((r00*x1009))))+IKsqr(((((-1.0)*r12*x1011))+((r11*x1010))+((r10*x1009))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r02*x1011))+((r01*x1010))+((r00*x1009))), ((((-1.0)*r12*x1011))+((r11*x1010))+((r10*x1009))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1012=IKsin(j13);
IkReal x1013=IKcos(j13);
IkReal x1014=(r12*sj15);
IkReal x1015=((1.0)*cj14);
IkReal x1016=(sj15*sj16);
IkReal x1017=(r02*sj15);
IkReal x1018=(sj14*sj16);
IkReal x1019=((0.01)*cj15);
IkReal x1020=(r00*sj16);
IkReal x1021=(cj15*cj16);
IkReal x1022=(cj16*r01);
IkReal x1023=((1.0)*cj15);
IkReal x1024=(cj16*r11);
IkReal x1025=(r10*sj16);
IkReal x1026=((1.0)*x1013);
IkReal x1027=((1.0)*cj16*sj14);
evalcond[0]=((((-1.0)*r12*x1023))+(((-1.0)*x1026))+((sj15*x1024))+((r10*x1016)));
evalcond[1]=((((-1.0)*r02*x1023))+((sj15*x1022))+((r00*x1016))+(((-1.0)*x1012)));
evalcond[2]=((-0.069)+(((0.01)*x1017))+(((-0.37429)*x1012))+(((-1.0)*px))+((x1019*x1022))+((x1019*x1020)));
evalcond[3]=((-0.36442)+(((0.01)*x1014))+(((-0.37429)*x1013))+(((-1.0)*py))+((x1019*x1025))+((x1019*x1024)));
evalcond[4]=(x1012+(((-1.0)*x1014*x1015))+(((-1.0)*r11*x1015*x1021))+(((-1.0)*cj15*x1015*x1025))+(((-1.0)*r10*x1027))+((r11*x1018)));
evalcond[5]=((((-1.0)*r01*x1015*x1021))+(((-1.0)*x1015*x1017))+(((-1.0)*x1026))+(((-1.0)*cj15*x1015*x1020))+(((-1.0)*r00*x1027))+((r01*x1018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1028=((1.0)*sj15);
CheckValue<IkReal> x1029=IKPowWithIntegerCheck(cj12,-1);
if(!x1029.valid){
continue;
}
if( IKabs(((x1029.value)*((((cj15*r02))+(((-1.0)*r00*sj16*x1028))+(((-1.0)*cj16*r01*x1028)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1029.value)*((((cj15*r02))+(((-1.0)*r00*sj16*x1028))+(((-1.0)*cj16*r01*x1028))))))+IKsqr((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1029.value)*((((cj15*r02))+(((-1.0)*r00*sj16*x1028))+(((-1.0)*cj16*r01*x1028))))), (((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1030=IKsin(j13);
IkReal x1031=IKcos(j13);
IkReal x1032=(r12*sj15);
IkReal x1033=((1.0)*cj14);
IkReal x1034=(sj15*sj16);
IkReal x1035=((0.01)*cj15);
IkReal x1036=(cj16*r21);
IkReal x1037=(r22*sj15);
IkReal x1038=((1.0)*cj15);
IkReal x1039=(sj14*sj16);
IkReal x1040=(r00*sj16);
IkReal x1041=(cj15*cj16);
IkReal x1042=(r02*sj15);
IkReal x1043=(r20*sj16);
IkReal x1044=(cj16*r01);
IkReal x1045=(cj16*r11);
IkReal x1046=(r10*sj16);
IkReal x1047=(sj12*x1030);
IkReal x1048=((1.0)*cj16*sj14);
IkReal x1049=(cj12*x1030);
evalcond[0]=(x1047+((sj15*x1036))+((r20*x1034))+(((-1.0)*r22*x1038)));
evalcond[1]=(((r10*x1034))+((sj15*x1045))+(((-1.0)*x1031))+(((-1.0)*r12*x1038)));
evalcond[2]=(((r00*x1034))+((sj15*x1044))+x1049+(((-1.0)*r02*x1038)));
evalcond[3]=((-0.36442)+(((0.01)*x1032))+((x1035*x1046))+((x1035*x1045))+(((-0.37429)*x1031))+(((-1.0)*py)));
evalcond[4]=((((0.01)*x1037))+((x1035*x1043))+(((-1.0)*pz))+(((0.069)*sj12))+((x1035*x1036))+(((0.37429)*x1047)));
evalcond[5]=(((x1035*x1040))+((x1035*x1044))+(((0.069)*cj12))+(((-1.0)*px))+(((0.37429)*x1049))+(((0.01)*x1042)));
evalcond[6]=(x1030+(((-1.0)*x1032*x1033))+(((-1.0)*r10*x1048))+(((-1.0)*r11*x1033*x1041))+(((-1.0)*cj15*x1033*x1046))+((r11*x1039)));
evalcond[7]=((((-1.0)*x1033*x1037))+(((-1.0)*cj15*x1033*x1036))+((r21*x1039))+(((-1.0)*cj15*x1033*x1043))+((sj12*x1031))+(((-1.0)*r20*x1048)));
evalcond[8]=(((cj12*x1031))+(((-1.0)*r00*x1048))+(((-1.0)*x1033*x1042))+(((-1.0)*r01*x1033*x1041))+(((-1.0)*cj15*x1033*x1040))+((r01*x1039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1050=(sj15*sj16);
IkReal x1051=(cj16*sj15);
CheckValue<IkReal> x1052=IKPowWithIntegerCheck(sj12,-1);
if(!x1052.valid){
continue;
}
if( IKabs(((x1052.value)*((((cj15*r22))+(((-1.0)*r21*x1051))+(((-1.0)*r20*x1050)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1051))+((r10*x1050))+(((-1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1052.value)*((((cj15*r22))+(((-1.0)*r21*x1051))+(((-1.0)*r20*x1050))))))+IKsqr((((r11*x1051))+((r10*x1050))+(((-1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1052.value)*((((cj15*r22))+(((-1.0)*r21*x1051))+(((-1.0)*r20*x1050))))), (((r11*x1051))+((r10*x1050))+(((-1.0)*cj15*r12))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1053=IKsin(j13);
IkReal x1054=IKcos(j13);
IkReal x1055=(r12*sj15);
IkReal x1056=((1.0)*cj14);
IkReal x1057=(sj15*sj16);
IkReal x1058=((0.01)*cj15);
IkReal x1059=(cj16*r21);
IkReal x1060=(r22*sj15);
IkReal x1061=((1.0)*cj15);
IkReal x1062=(sj14*sj16);
IkReal x1063=(r00*sj16);
IkReal x1064=(cj15*cj16);
IkReal x1065=(r02*sj15);
IkReal x1066=(r20*sj16);
IkReal x1067=(cj16*r01);
IkReal x1068=(cj16*r11);
IkReal x1069=(r10*sj16);
IkReal x1070=(sj12*x1053);
IkReal x1071=((1.0)*cj16*sj14);
IkReal x1072=(cj12*x1053);
evalcond[0]=(x1070+(((-1.0)*r22*x1061))+((sj15*x1059))+((r20*x1057)));
evalcond[1]=((((-1.0)*r12*x1061))+((r10*x1057))+(((-1.0)*x1054))+((sj15*x1068)));
evalcond[2]=(x1072+(((-1.0)*r02*x1061))+((r00*x1057))+((sj15*x1067)));
evalcond[3]=((-0.36442)+(((-0.37429)*x1054))+(((-1.0)*py))+(((0.01)*x1055))+((x1058*x1068))+((x1058*x1069)));
evalcond[4]=((((-1.0)*pz))+(((0.069)*sj12))+(((0.37429)*x1070))+(((0.01)*x1060))+((x1058*x1059))+((x1058*x1066)));
evalcond[5]=((((0.069)*cj12))+(((-1.0)*px))+(((0.37429)*x1072))+(((0.01)*x1065))+((x1058*x1063))+((x1058*x1067)));
evalcond[6]=(x1053+(((-1.0)*r10*x1071))+(((-1.0)*x1055*x1056))+(((-1.0)*r11*x1056*x1064))+(((-1.0)*cj15*x1056*x1069))+((r11*x1062)));
evalcond[7]=((((-1.0)*r20*x1071))+(((-1.0)*x1056*x1060))+((sj12*x1054))+((r21*x1062))+(((-1.0)*cj15*x1056*x1066))+(((-1.0)*cj15*x1056*x1059)));
evalcond[8]=((((-1.0)*r01*x1056*x1064))+(((-1.0)*r00*x1071))+(((-1.0)*x1056*x1065))+((r01*x1062))+(((-1.0)*cj15*x1056*x1063))+((cj12*x1054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj11=0;
cj11=1.0;
j11=0;
j13eval[0]=sj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj11=0;
cj11=1.0;
j11=0;
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1073=((1.0)*sj15*sj16);
IkReal x1074=((1.0)*cj16*sj15);
if( IKabs(((((-1.0)*r20*x1073))+(((-1.0)*r21*x1074))+((cj15*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r02))+(((-1.0)*r00*x1073))+(((-1.0)*r01*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1073))+(((-1.0)*r21*x1074))+((cj15*r22))))+IKsqr((((cj15*r02))+(((-1.0)*r00*x1073))+(((-1.0)*r01*x1074))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r20*x1073))+(((-1.0)*r21*x1074))+((cj15*r22))), (((cj15*r02))+(((-1.0)*r00*x1073))+(((-1.0)*r01*x1074))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1075=IKsin(j13);
IkReal x1076=IKcos(j13);
IkReal x1077=((0.01)*cj15);
IkReal x1078=(cj16*r21);
IkReal x1079=(r22*sj15);
IkReal x1080=((1.0)*cj15);
IkReal x1081=(r00*sj16);
IkReal x1082=((1.0)*cj14);
IkReal x1083=(r20*sj16);
IkReal x1084=(cj16*r01);
IkReal x1085=(sj14*sj16);
IkReal x1086=(r02*sj15);
IkReal x1087=((1.0)*cj16*sj14);
evalcond[0]=(((sj15*x1078))+x1075+((sj15*x1083))+(((-1.0)*r22*x1080)));
evalcond[1]=(x1076+(((-1.0)*r02*x1080))+((sj15*x1081))+((sj15*x1084)));
evalcond[2]=((0.069)+((x1077*x1078))+(((-1.0)*pz))+((x1077*x1083))+(((0.37429)*x1075))+(((0.01)*x1079)));
evalcond[3]=((0.36442)+(((-1.0)*px))+(((0.01)*x1086))+((x1077*x1081))+((x1077*x1084))+(((0.37429)*x1076)));
evalcond[4]=((((-1.0)*cj14*x1080*x1083))+x1076+(((-1.0)*cj14*x1078*x1080))+(((-1.0)*x1079*x1082))+(((-1.0)*r20*x1087))+((r21*x1085)));
evalcond[5]=((((-1.0)*cj14*x1080*x1081))+(((-1.0)*cj14*x1080*x1084))+((r01*x1085))+(((-1.0)*r00*x1087))+(((-1.0)*x1082*x1086))+(((-1.0)*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1088=(sj15*sj16);
IkReal x1089=(cj16*sj15);
if( IKabs(((((-1.0)*cj15*r22))+((r20*x1088))+((r21*x1089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1088))+(((-1.0)*r01*x1089))+((cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj15*r22))+((r20*x1088))+((r21*x1089))))+IKsqr(((((-1.0)*r00*x1088))+(((-1.0)*r01*x1089))+((cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*cj15*r22))+((r20*x1088))+((r21*x1089))), ((((-1.0)*r00*x1088))+(((-1.0)*r01*x1089))+((cj15*r02))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1090=IKsin(j13);
IkReal x1091=IKcos(j13);
IkReal x1092=((0.01)*cj15);
IkReal x1093=(cj16*r21);
IkReal x1094=(r22*sj15);
IkReal x1095=((1.0)*cj15);
IkReal x1096=(r00*sj16);
IkReal x1097=((1.0)*cj14);
IkReal x1098=(r20*sj16);
IkReal x1099=(cj16*r01);
IkReal x1100=(sj14*sj16);
IkReal x1101=(r02*sj15);
IkReal x1102=((1.0)*x1090);
IkReal x1103=((1.0)*cj16*sj14);
evalcond[0]=(x1091+(((-1.0)*r02*x1095))+((sj15*x1099))+((sj15*x1096)));
evalcond[1]=(((sj15*x1093))+((sj15*x1098))+(((-1.0)*x1102))+(((-1.0)*r22*x1095)));
evalcond[2]=((-0.069)+(((-0.37429)*x1090))+(((0.01)*x1094))+(((-1.0)*pz))+((x1092*x1098))+((x1092*x1093)));
evalcond[3]=((0.36442)+(((0.37429)*x1091))+(((-1.0)*px))+((x1092*x1096))+((x1092*x1099))+(((0.01)*x1101)));
evalcond[4]=((((-1.0)*cj14*x1093*x1095))+(((-1.0)*x1091))+(((-1.0)*cj14*x1095*x1098))+(((-1.0)*r20*x1103))+(((-1.0)*x1094*x1097))+((r21*x1100)));
evalcond[5]=((((-1.0)*r00*x1103))+((r01*x1100))+(((-1.0)*cj14*x1095*x1099))+(((-1.0)*cj14*x1095*x1096))+(((-1.0)*x1102))+(((-1.0)*x1097*x1101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1104=((1.0)*sj15);
if( IKabs((((cj15*r12))+(((-1.0)*r10*sj16*x1104))+(((-1.0)*cj16*r11*x1104)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r02))+(((-1.0)*cj16*r01*x1104))+(((-1.0)*r00*sj16*x1104)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r12))+(((-1.0)*r10*sj16*x1104))+(((-1.0)*cj16*r11*x1104))))+IKsqr((((cj15*r02))+(((-1.0)*cj16*r01*x1104))+(((-1.0)*r00*sj16*x1104))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r12))+(((-1.0)*r10*sj16*x1104))+(((-1.0)*cj16*r11*x1104))), (((cj15*r02))+(((-1.0)*cj16*r01*x1104))+(((-1.0)*r00*sj16*x1104))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1105=IKcos(j13);
IkReal x1106=IKsin(j13);
IkReal x1107=(r12*sj15);
IkReal x1108=((1.0)*cj14);
IkReal x1109=(sj15*sj16);
IkReal x1110=(r02*sj15);
IkReal x1111=(sj14*sj16);
IkReal x1112=((0.01)*cj15);
IkReal x1113=(r00*sj16);
IkReal x1114=(cj16*r11);
IkReal x1115=(cj16*r01);
IkReal x1116=((1.0)*cj15);
IkReal x1117=(r10*sj16);
IkReal x1118=((1.0)*cj16*sj14);
evalcond[0]=(x1106+(((-1.0)*r12*x1116))+((sj15*x1114))+((r10*x1109)));
evalcond[1]=(x1105+((r00*x1109))+((sj15*x1115))+(((-1.0)*r02*x1116)));
evalcond[2]=((0.36442)+((x1112*x1115))+((x1112*x1113))+(((0.37429)*x1105))+(((-1.0)*px))+(((0.01)*x1110)));
evalcond[3]=((0.069)+((x1112*x1117))+((x1112*x1114))+(((0.37429)*x1106))+(((-1.0)*py))+(((0.01)*x1107)));
evalcond[4]=(x1105+(((-1.0)*cj15*x1108*x1114))+(((-1.0)*cj15*x1108*x1117))+(((-1.0)*x1107*x1108))+((r11*x1111))+(((-1.0)*r10*x1118)));
evalcond[5]=((((-1.0)*r00*x1118))+(((-1.0)*cj15*x1108*x1113))+(((-1.0)*cj15*x1108*x1115))+(((-1.0)*x1106))+((r01*x1111))+(((-1.0)*x1108*x1110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1119=((1.0)*sj15);
if( IKabs((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r02))+(((-1.0)*cj16*r01*x1119))+(((-1.0)*r00*sj16*x1119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))))+IKsqr((((cj15*r02))+(((-1.0)*cj16*r01*x1119))+(((-1.0)*r00*sj16*x1119))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))), (((cj15*r02))+(((-1.0)*cj16*r01*x1119))+(((-1.0)*r00*sj16*x1119))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1120=IKcos(j13);
IkReal x1121=IKsin(j13);
IkReal x1122=(r12*sj15);
IkReal x1123=((1.0)*cj14);
IkReal x1124=(sj15*sj16);
IkReal x1125=(r02*sj15);
IkReal x1126=(sj14*sj16);
IkReal x1127=((0.01)*cj15);
IkReal x1128=(r00*sj16);
IkReal x1129=(cj15*cj16);
IkReal x1130=(cj16*r01);
IkReal x1131=((1.0)*cj15);
IkReal x1132=(cj16*r11);
IkReal x1133=(r10*sj16);
IkReal x1134=((1.0)*x1121);
IkReal x1135=((1.0)*cj16*sj14);
evalcond[0]=(x1120+((r00*x1124))+((sj15*x1130))+(((-1.0)*r02*x1131)));
evalcond[1]=(((r10*x1124))+(((-1.0)*r12*x1131))+((sj15*x1132))+(((-1.0)*x1134)));
evalcond[2]=((0.36442)+(((0.01)*x1125))+((x1127*x1128))+(((0.37429)*x1120))+(((-1.0)*px))+((x1127*x1130)));
evalcond[3]=((-0.069)+(((0.01)*x1122))+(((-0.37429)*x1121))+(((-1.0)*py))+((x1127*x1132))+((x1127*x1133)));
evalcond[4]=((((-1.0)*r10*x1135))+(((-1.0)*x1122*x1123))+(((-1.0)*cj15*x1123*x1133))+(((-1.0)*x1120))+(((-1.0)*r11*x1123*x1129))+((r11*x1126)));
evalcond[5]=(((r01*x1126))+(((-1.0)*cj15*x1123*x1128))+(((-1.0)*r01*x1123*x1129))+(((-1.0)*x1123*x1125))+(((-1.0)*x1134))+(((-1.0)*r00*x1135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1136=((1.0)*sj15);
CheckValue<IkReal> x1137=IKPowWithIntegerCheck(cj12,-1);
if(!x1137.valid){
continue;
}
if( IKabs(((x1137.value)*((((cj15*r12))+(((-1.0)*r10*sj16*x1136))+(((-1.0)*cj16*r11*x1136)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r02))+(((-1.0)*r00*sj16*x1136))+(((-1.0)*cj16*r01*x1136)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1137.value)*((((cj15*r12))+(((-1.0)*r10*sj16*x1136))+(((-1.0)*cj16*r11*x1136))))))+IKsqr((((cj15*r02))+(((-1.0)*r00*sj16*x1136))+(((-1.0)*cj16*r01*x1136))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1137.value)*((((cj15*r12))+(((-1.0)*r10*sj16*x1136))+(((-1.0)*cj16*r11*x1136))))), (((cj15*r02))+(((-1.0)*r00*sj16*x1136))+(((-1.0)*cj16*r01*x1136))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1138=IKsin(j13);
IkReal x1139=IKcos(j13);
IkReal x1140=(r12*sj15);
IkReal x1141=((1.0)*cj14);
IkReal x1142=(sj15*sj16);
IkReal x1143=(cj15*cj16);
IkReal x1144=(r22*sj15);
IkReal x1145=((1.0)*cj15);
IkReal x1146=(sj14*sj16);
IkReal x1147=(r02*sj15);
IkReal x1148=(cj16*sj15);
IkReal x1149=(cj15*sj16);
IkReal x1150=(sj12*x1138);
IkReal x1151=(cj12*x1138);
IkReal x1152=((1.0)*cj16*sj14);
IkReal x1153=((0.01)*x1149);
evalcond[0]=(x1139+(((-1.0)*r02*x1145))+((r01*x1148))+((r00*x1142)));
evalcond[1]=(x1150+((r20*x1142))+((r21*x1148))+(((-1.0)*r22*x1145)));
evalcond[2]=(x1151+((r11*x1148))+(((-1.0)*r12*x1145))+((r10*x1142)));
evalcond[3]=((0.36442)+((r00*x1153))+(((0.37429)*x1139))+(((-1.0)*px))+(((0.01)*x1147))+(((0.01)*r01*x1143)));
evalcond[4]=(((r20*x1153))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.01)*r21*x1143))+(((0.01)*x1144))+(((0.37429)*x1150)));
evalcond[5]=((((0.01)*r11*x1143))+(((0.069)*cj12))+(((-1.0)*py))+(((0.01)*x1140))+(((0.37429)*x1151))+((r10*x1153)));
evalcond[6]=((((-1.0)*r21*x1141*x1143))+(((-1.0)*x1141*x1144))+(((-1.0)*r20*x1141*x1149))+(((-1.0)*r20*x1152))+((r21*x1146))+((sj12*x1139)));
evalcond[7]=((((-1.0)*x1140*x1141))+((r11*x1146))+(((-1.0)*r11*x1141*x1143))+(((-1.0)*r10*x1152))+((cj12*x1139))+(((-1.0)*r10*x1141*x1149)));
evalcond[8]=((((-1.0)*r01*x1141*x1143))+(((-1.0)*x1141*x1147))+(((-1.0)*r00*x1152))+(((-1.0)*r00*x1141*x1149))+(((-1.0)*x1138))+((r01*x1146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1154=((1.0)*sj15*sj16);
IkReal x1155=((1.0)*cj16*sj15);
CheckValue<IkReal> x1156=IKPowWithIntegerCheck(sj12,-1);
if(!x1156.valid){
continue;
}
if( IKabs(((x1156.value)*((((cj15*r22))+(((-1.0)*r21*x1155))+(((-1.0)*r20*x1154)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r02))+(((-1.0)*r01*x1155))+(((-1.0)*r00*x1154)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1156.value)*((((cj15*r22))+(((-1.0)*r21*x1155))+(((-1.0)*r20*x1154))))))+IKsqr((((cj15*r02))+(((-1.0)*r01*x1155))+(((-1.0)*r00*x1154))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1156.value)*((((cj15*r22))+(((-1.0)*r21*x1155))+(((-1.0)*r20*x1154))))), (((cj15*r02))+(((-1.0)*r01*x1155))+(((-1.0)*r00*x1154))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1157=IKsin(j13);
IkReal x1158=IKcos(j13);
IkReal x1159=(r12*sj15);
IkReal x1160=((1.0)*cj14);
IkReal x1161=(sj15*sj16);
IkReal x1162=(cj15*cj16);
IkReal x1163=(r22*sj15);
IkReal x1164=((1.0)*cj15);
IkReal x1165=(sj14*sj16);
IkReal x1166=(r02*sj15);
IkReal x1167=(cj16*sj15);
IkReal x1168=(cj15*sj16);
IkReal x1169=(sj12*x1157);
IkReal x1170=(cj12*x1157);
IkReal x1171=((1.0)*cj16*sj14);
IkReal x1172=((0.01)*x1168);
evalcond[0]=(x1158+(((-1.0)*r02*x1164))+((r00*x1161))+((r01*x1167)));
evalcond[1]=(x1169+((r20*x1161))+((r21*x1167))+(((-1.0)*r22*x1164)));
evalcond[2]=(x1170+((r10*x1161))+(((-1.0)*r12*x1164))+((r11*x1167)));
evalcond[3]=((0.36442)+(((0.01)*x1166))+((r00*x1172))+(((0.01)*r01*x1162))+(((-1.0)*px))+(((0.37429)*x1158)));
evalcond[4]=(((r20*x1172))+(((0.01)*r21*x1162))+(((0.01)*x1163))+(((-1.0)*pz))+(((0.37429)*x1169))+(((0.069)*sj12)));
evalcond[5]=(((r10*x1172))+(((0.069)*cj12))+(((0.37429)*x1170))+(((-1.0)*py))+(((0.01)*r11*x1162))+(((0.01)*x1159)));
evalcond[6]=((((-1.0)*r20*x1160*x1168))+(((-1.0)*r20*x1171))+(((-1.0)*r21*x1160*x1162))+((r21*x1165))+((sj12*x1158))+(((-1.0)*x1160*x1163)));
evalcond[7]=((((-1.0)*r11*x1160*x1162))+(((-1.0)*x1159*x1160))+((cj12*x1158))+((r11*x1165))+(((-1.0)*r10*x1160*x1168))+(((-1.0)*r10*x1171)));
evalcond[8]=((((-1.0)*r01*x1160*x1162))+(((-1.0)*r00*x1160*x1168))+((r01*x1165))+(((-1.0)*x1157))+(((-1.0)*r00*x1171))+(((-1.0)*x1160*x1166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j13eval[0]=sj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1173=(sj15*sj16);
IkReal x1174=(cj16*sj15);
IkReal x1175=((1.0)*cj15);
if( IKabs((((r10*x1173))+(((-1.0)*r12*x1175))+((r11*x1174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1175))+((r01*x1174))+((r00*x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1173))+(((-1.0)*r12*x1175))+((r11*x1174))))+IKsqr(((((-1.0)*r02*x1175))+((r01*x1174))+((r00*x1173))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r10*x1173))+(((-1.0)*r12*x1175))+((r11*x1174))), ((((-1.0)*r02*x1175))+((r01*x1174))+((r00*x1173))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1176=IKcos(j13);
IkReal x1177=IKsin(j13);
IkReal x1178=(r12*sj15);
IkReal x1179=((1.0)*cj14);
IkReal x1180=(sj15*sj16);
IkReal x1181=(r02*sj15);
IkReal x1182=(sj14*sj16);
IkReal x1183=((0.01)*cj15);
IkReal x1184=(r00*sj16);
IkReal x1185=(cj15*cj16);
IkReal x1186=(cj16*r01);
IkReal x1187=((1.0)*cj15);
IkReal x1188=(cj16*r11);
IkReal x1189=(r10*sj16);
IkReal x1190=((1.0)*x1176);
IkReal x1191=((1.0)*cj16*sj14);
evalcond[0]=(((r10*x1180))+((sj15*x1188))+(((-1.0)*r12*x1187))+(((-1.0)*x1177)));
evalcond[1]=(((r00*x1180))+((sj15*x1186))+(((-1.0)*x1190))+(((-1.0)*r02*x1187)));
evalcond[2]=((-0.36442)+((x1183*x1186))+((x1183*x1184))+(((-1.0)*px))+(((0.01)*x1181))+(((-0.37429)*x1176)));
evalcond[3]=((-0.069)+((x1183*x1189))+((x1183*x1188))+(((0.01)*x1178))+(((-1.0)*py))+(((-0.37429)*x1177)));
evalcond[4]=((((-1.0)*r00*x1191))+x1177+((r01*x1182))+(((-1.0)*x1179*x1181))+(((-1.0)*r01*x1179*x1185))+(((-1.0)*cj15*x1179*x1184)));
evalcond[5]=((((-1.0)*r10*x1191))+(((-1.0)*x1178*x1179))+(((-1.0)*x1190))+((r11*x1182))+(((-1.0)*cj15*x1179*x1189))+(((-1.0)*r11*x1179*x1185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1192=(cj16*sj15);
IkReal x1193=(sj15*sj16);
if( IKabs((((cj15*r12))+(((-1.0)*r10*x1193))+(((-1.0)*r11*x1192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1192))+((r00*x1193))+(((-1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r12))+(((-1.0)*r10*x1193))+(((-1.0)*r11*x1192))))+IKsqr((((r01*x1192))+((r00*x1193))+(((-1.0)*cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r12))+(((-1.0)*r10*x1193))+(((-1.0)*r11*x1192))), (((r01*x1192))+((r00*x1193))+(((-1.0)*cj15*r02))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1194=IKcos(j13);
IkReal x1195=IKsin(j13);
IkReal x1196=(r12*sj15);
IkReal x1197=((1.0)*cj14);
IkReal x1198=(sj15*sj16);
IkReal x1199=(r02*sj15);
IkReal x1200=(sj14*sj16);
IkReal x1201=((0.01)*cj15);
IkReal x1202=(r00*sj16);
IkReal x1203=(cj16*r11);
IkReal x1204=(cj16*r01);
IkReal x1205=((1.0)*cj15);
IkReal x1206=(r10*sj16);
IkReal x1207=((1.0)*cj16*sj14);
evalcond[0]=(x1195+((r10*x1198))+((sj15*x1203))+(((-1.0)*r12*x1205)));
evalcond[1]=(((r00*x1198))+(((-1.0)*r02*x1205))+((sj15*x1204))+(((-1.0)*x1194)));
evalcond[2]=((-0.36442)+(((-0.37429)*x1194))+(((-1.0)*px))+((x1201*x1202))+((x1201*x1204))+(((0.01)*x1199)));
evalcond[3]=((0.069)+(((0.37429)*x1195))+(((-1.0)*py))+((x1201*x1203))+((x1201*x1206))+(((0.01)*x1196)));
evalcond[4]=(x1194+(((-1.0)*r10*x1207))+((r11*x1200))+(((-1.0)*x1196*x1197))+(((-1.0)*cj15*x1197*x1203))+(((-1.0)*cj15*x1197*x1206)));
evalcond[5]=(x1195+(((-1.0)*x1197*x1199))+(((-1.0)*r00*x1207))+(((-1.0)*cj15*x1197*x1202))+(((-1.0)*cj15*x1197*x1204))+((r01*x1200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1208=(sj15*sj16);
IkReal x1209=(cj16*sj15);
if( IKabs(((((-1.0)*r21*x1209))+((cj15*r22))+(((-1.0)*r20*x1208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj15*r02))+((r01*x1209))+((r00*x1208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1209))+((cj15*r22))+(((-1.0)*r20*x1208))))+IKsqr(((((-1.0)*cj15*r02))+((r01*x1209))+((r00*x1208))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r21*x1209))+((cj15*r22))+(((-1.0)*r20*x1208))), ((((-1.0)*cj15*r02))+((r01*x1209))+((r00*x1208))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1210=IKsin(j13);
IkReal x1211=IKcos(j13);
IkReal x1212=((0.01)*cj15);
IkReal x1213=(cj16*r21);
IkReal x1214=(r22*sj15);
IkReal x1215=((1.0)*cj15);
IkReal x1216=(r00*sj16);
IkReal x1217=((1.0)*cj14);
IkReal x1218=(r20*sj16);
IkReal x1219=(cj16*r01);
IkReal x1220=(sj14*sj16);
IkReal x1221=(r02*sj15);
IkReal x1222=((1.0)*cj16*sj14);
evalcond[0]=(x1210+((sj15*x1218))+((sj15*x1213))+(((-1.0)*r22*x1215)));
evalcond[1]=(((sj15*x1219))+((sj15*x1216))+(((-1.0)*r02*x1215))+(((-1.0)*x1211)));
evalcond[2]=((0.069)+(((0.01)*x1214))+((x1212*x1213))+((x1212*x1218))+(((0.37429)*x1210))+(((-1.0)*pz)));
evalcond[3]=((-0.36442)+((x1212*x1216))+((x1212*x1219))+(((-0.37429)*x1211))+(((-1.0)*px))+(((0.01)*x1221)));
evalcond[4]=(x1211+(((-1.0)*x1214*x1217))+(((-1.0)*r20*x1222))+(((-1.0)*cj14*x1213*x1215))+((r21*x1220))+(((-1.0)*cj14*x1215*x1218)));
evalcond[5]=(x1210+(((-1.0)*r00*x1222))+((r01*x1220))+(((-1.0)*x1217*x1221))+(((-1.0)*cj14*x1215*x1219))+(((-1.0)*cj14*x1215*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1223=(sj15*sj16);
IkReal x1224=(cj16*sj15);
IkReal x1225=((1.0)*cj15);
if( IKabs((((r20*x1223))+((r21*x1224))+(((-1.0)*r22*x1225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1224))+((r00*x1223))+(((-1.0)*r02*x1225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1223))+((r21*x1224))+(((-1.0)*r22*x1225))))+IKsqr((((r01*x1224))+((r00*x1223))+(((-1.0)*r02*x1225))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r20*x1223))+((r21*x1224))+(((-1.0)*r22*x1225))), (((r01*x1224))+((r00*x1223))+(((-1.0)*r02*x1225))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1226=IKsin(j13);
IkReal x1227=IKcos(j13);
IkReal x1228=((0.01)*cj15);
IkReal x1229=(cj16*r21);
IkReal x1230=(r22*sj15);
IkReal x1231=((1.0)*cj15);
IkReal x1232=(r00*sj16);
IkReal x1233=((1.0)*cj14);
IkReal x1234=(r20*sj16);
IkReal x1235=(cj16*r01);
IkReal x1236=(sj14*sj16);
IkReal x1237=(r02*sj15);
IkReal x1238=((1.0)*x1227);
IkReal x1239=((1.0)*cj16*sj14);
evalcond[0]=((((-1.0)*x1226))+((sj15*x1229))+((sj15*x1234))+(((-1.0)*r22*x1231)));
evalcond[1]=((((-1.0)*x1238))+((sj15*x1232))+((sj15*x1235))+(((-1.0)*r02*x1231)));
evalcond[2]=((-0.069)+(((-0.37429)*x1226))+(((-1.0)*pz))+((x1228*x1234))+(((0.01)*x1230))+((x1228*x1229)));
evalcond[3]=((-0.36442)+(((-0.37429)*x1227))+(((-1.0)*px))+((x1228*x1235))+((x1228*x1232))+(((0.01)*x1237)));
evalcond[4]=((((-1.0)*r00*x1239))+x1226+((r01*x1236))+(((-1.0)*cj14*x1231*x1232))+(((-1.0)*cj14*x1231*x1235))+(((-1.0)*x1233*x1237)));
evalcond[5]=((((-1.0)*x1238))+(((-1.0)*x1230*x1233))+(((-1.0)*r20*x1239))+(((-1.0)*cj14*x1231*x1234))+(((-1.0)*cj14*x1229*x1231))+((r21*x1236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1240=(sj15*sj16);
IkReal x1241=(cj16*sj15);
CheckValue<IkReal> x1242=IKPowWithIntegerCheck(sj12,-1);
if(!x1242.valid){
continue;
}
if( IKabs(((x1242.value)*(((((-1.0)*r20*x1240))+((cj15*r22))+(((-1.0)*r21*x1241)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1241))+((r00*x1240))+(((-1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1242.value)*(((((-1.0)*r20*x1240))+((cj15*r22))+(((-1.0)*r21*x1241))))))+IKsqr((((r01*x1241))+((r00*x1240))+(((-1.0)*cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1242.value)*(((((-1.0)*r20*x1240))+((cj15*r22))+(((-1.0)*r21*x1241))))), (((r01*x1241))+((r00*x1240))+(((-1.0)*cj15*r02))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1243=IKsin(j13);
IkReal x1244=IKcos(j13);
IkReal x1245=(r12*sj15);
IkReal x1246=((1.0)*cj14);
IkReal x1247=(sj15*sj16);
IkReal x1248=(cj15*cj16);
IkReal x1249=(r22*sj15);
IkReal x1250=((1.0)*cj15);
IkReal x1251=(sj14*sj16);
IkReal x1252=(cj16*sj15);
IkReal x1253=(cj15*sj16);
IkReal x1254=(r02*sj15);
IkReal x1255=(sj12*x1243);
IkReal x1256=((1.0)*cj16*sj14);
IkReal x1257=(cj12*x1243);
IkReal x1258=((1.0)*x1244);
IkReal x1259=((0.01)*x1253);
evalcond[0]=(x1255+(((-1.0)*r22*x1250))+((r21*x1252))+((r20*x1247)));
evalcond[1]=((((-1.0)*x1258))+((r00*x1247))+(((-1.0)*r02*x1250))+((r01*x1252)));
evalcond[2]=(((r11*x1252))+(((-1.0)*r12*x1250))+(((-1.0)*x1257))+((r10*x1247)));
evalcond[3]=((-0.36442)+(((0.01)*x1254))+(((-1.0)*px))+(((0.01)*r01*x1248))+((r00*x1259))+(((-0.37429)*x1244)));
evalcond[4]=((((0.01)*x1249))+(((0.37429)*x1255))+(((-1.0)*pz))+(((0.01)*r21*x1248))+(((0.069)*sj12))+((r20*x1259)));
evalcond[5]=((((0.01)*r11*x1248))+(((0.01)*x1245))+((r10*x1259))+(((-0.37429)*x1257))+(((-1.0)*py))+(((-0.069)*cj12)));
evalcond[6]=(x1243+(((-1.0)*r00*x1256))+(((-1.0)*x1246*x1254))+(((-1.0)*r01*x1246*x1248))+(((-1.0)*r00*x1246*x1253))+((r01*x1251)));
evalcond[7]=((((-1.0)*r20*x1256))+((sj12*x1244))+(((-1.0)*r20*x1246*x1253))+(((-1.0)*r21*x1246*x1248))+((r21*x1251))+(((-1.0)*x1246*x1249)));
evalcond[8]=(((r11*x1251))+(((-1.0)*x1245*x1246))+(((-1.0)*r10*x1246*x1253))+(((-1.0)*r11*x1246*x1248))+(((-1.0)*cj12*x1258))+(((-1.0)*r10*x1256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1260=(sj15*sj16);
IkReal x1261=(cj16*sj15);
IkReal x1262=((1.0)*cj15);
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(cj12,-1);
if(!x1263.valid){
continue;
}
if( IKabs(((x1263.value)*(((((-1.0)*r12*x1262))+((r11*x1261))+((r10*x1260)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1262))+((r00*x1260))+((r01*x1261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1263.value)*(((((-1.0)*r12*x1262))+((r11*x1261))+((r10*x1260))))))+IKsqr(((((-1.0)*r02*x1262))+((r00*x1260))+((r01*x1261))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1263.value)*(((((-1.0)*r12*x1262))+((r11*x1261))+((r10*x1260))))), ((((-1.0)*r02*x1262))+((r00*x1260))+((r01*x1261))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1264=IKsin(j13);
IkReal x1265=IKcos(j13);
IkReal x1266=(r12*sj15);
IkReal x1267=((1.0)*cj14);
IkReal x1268=(sj15*sj16);
IkReal x1269=(cj15*cj16);
IkReal x1270=(r22*sj15);
IkReal x1271=((1.0)*cj15);
IkReal x1272=(sj14*sj16);
IkReal x1273=(cj16*sj15);
IkReal x1274=(cj15*sj16);
IkReal x1275=(r02*sj15);
IkReal x1276=(sj12*x1264);
IkReal x1277=((1.0)*cj16*sj14);
IkReal x1278=(cj12*x1264);
IkReal x1279=((1.0)*x1265);
IkReal x1280=((0.01)*x1274);
evalcond[0]=(x1276+((r21*x1273))+(((-1.0)*r22*x1271))+((r20*x1268)));
evalcond[1]=((((-1.0)*x1279))+(((-1.0)*r02*x1271))+((r01*x1273))+((r00*x1268)));
evalcond[2]=(((r11*x1273))+(((-1.0)*r12*x1271))+((r10*x1268))+(((-1.0)*x1278)));
evalcond[3]=((-0.36442)+(((0.01)*r01*x1269))+((r00*x1280))+(((-0.37429)*x1265))+(((-1.0)*px))+(((0.01)*x1275)));
evalcond[4]=((((0.01)*r21*x1269))+(((0.37429)*x1276))+(((-1.0)*pz))+(((0.069)*sj12))+((r20*x1280))+(((0.01)*x1270)));
evalcond[5]=((((-0.37429)*x1278))+(((0.01)*r11*x1269))+((r10*x1280))+(((-1.0)*py))+(((0.01)*x1266))+(((-0.069)*cj12)));
evalcond[6]=(x1264+(((-1.0)*r01*x1267*x1269))+(((-1.0)*x1267*x1275))+(((-1.0)*r00*x1277))+((r01*x1272))+(((-1.0)*r00*x1267*x1274)));
evalcond[7]=((((-1.0)*r20*x1267*x1274))+((r21*x1272))+(((-1.0)*x1267*x1270))+((sj12*x1265))+(((-1.0)*r21*x1267*x1269))+(((-1.0)*r20*x1277)));
evalcond[8]=((((-1.0)*r10*x1267*x1274))+((r11*x1272))+(((-1.0)*r11*x1267*x1269))+(((-1.0)*x1266*x1267))+(((-1.0)*cj12*x1279))+(((-1.0)*r10*x1277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j13eval[0]=sj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j13eval[0]=cj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1281=((1.0)*sj15*sj16);
IkReal x1282=((1.0)*cj16*sj15);
CheckValue<IkReal> x1283=IKPowWithIntegerCheck(cj11,-1);
if(!x1283.valid){
continue;
}
if( IKabs((((cj15*r22))+(((-1.0)*r21*x1282))+(((-1.0)*r20*x1281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1283.value)*((((cj15*r02))+(((-1.0)*r01*x1282))+(((-1.0)*r00*x1281)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r22))+(((-1.0)*r21*x1282))+(((-1.0)*r20*x1281))))+IKsqr(((x1283.value)*((((cj15*r02))+(((-1.0)*r01*x1282))+(((-1.0)*r00*x1281))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r22))+(((-1.0)*r21*x1282))+(((-1.0)*r20*x1281))), ((x1283.value)*((((cj15*r02))+(((-1.0)*r01*x1282))+(((-1.0)*r00*x1281))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1284=IKcos(j13);
IkReal x1285=IKsin(j13);
IkReal x1286=(r12*sj15);
IkReal x1287=((1.0)*cj14);
IkReal x1288=(sj15*sj16);
IkReal x1289=(cj15*cj16);
IkReal x1290=(r22*sj15);
IkReal x1291=((1.0)*cj15);
IkReal x1292=(sj14*sj16);
IkReal x1293=(r02*sj15);
IkReal x1294=(cj16*sj15);
IkReal x1295=(cj15*sj16);
IkReal x1296=((1.0)*cj16*sj14);
IkReal x1297=((1.0)*x1285);
IkReal x1298=((0.01)*x1295);
IkReal x1299=((0.37429)*x1284);
evalcond[0]=(x1285+((r21*x1294))+((r20*x1288))+(((-1.0)*r22*x1291)));
evalcond[1]=(((r10*x1288))+(((-1.0)*r12*x1291))+((r11*x1294))+((sj11*x1284)));
evalcond[2]=(((cj11*x1284))+((r00*x1288))+(((-1.0)*r02*x1291))+((r01*x1294)));
evalcond[3]=((0.069)+((r20*x1298))+(((0.37429)*x1285))+(((-1.0)*pz))+(((0.01)*r21*x1289))+(((0.01)*x1290)));
evalcond[4]=((((0.36442)*cj11))+(((-1.0)*px))+(((0.01)*r01*x1289))+(((0.01)*x1293))+((r00*x1298))+((cj11*x1299)));
evalcond[5]=((((0.01)*x1286))+((sj11*x1299))+(((0.01)*r11*x1289))+(((-1.0)*py))+(((0.36442)*sj11))+((r10*x1298)));
evalcond[6]=(x1284+(((-1.0)*x1287*x1290))+((r21*x1292))+(((-1.0)*r20*x1296))+(((-1.0)*r21*x1287*x1289))+(((-1.0)*r20*x1287*x1295)));
evalcond[7]=((((-1.0)*r10*x1287*x1295))+(((-1.0)*sj11*x1297))+((r11*x1292))+(((-1.0)*x1286*x1287))+(((-1.0)*r11*x1287*x1289))+(((-1.0)*r10*x1296)));
evalcond[8]=((((-1.0)*r00*x1296))+(((-1.0)*x1287*x1293))+(((-1.0)*r00*x1287*x1295))+((r01*x1292))+(((-1.0)*r01*x1287*x1289))+(((-1.0)*cj11*x1297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1300=((1.0)*sj15);
CheckValue<IkReal> x1301=IKPowWithIntegerCheck(sj11,-1);
if(!x1301.valid){
continue;
}
if( IKabs((((cj15*r22))+(((-1.0)*cj16*r21*x1300))+(((-1.0)*r20*sj16*x1300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1301.value)*(((((-1.0)*cj16*r11*x1300))+((cj15*r12))+(((-1.0)*r10*sj16*x1300)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r22))+(((-1.0)*cj16*r21*x1300))+(((-1.0)*r20*sj16*x1300))))+IKsqr(((x1301.value)*(((((-1.0)*cj16*r11*x1300))+((cj15*r12))+(((-1.0)*r10*sj16*x1300))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r22))+(((-1.0)*cj16*r21*x1300))+(((-1.0)*r20*sj16*x1300))), ((x1301.value)*(((((-1.0)*cj16*r11*x1300))+((cj15*r12))+(((-1.0)*r10*sj16*x1300))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1302=IKcos(j13);
IkReal x1303=IKsin(j13);
IkReal x1304=(r12*sj15);
IkReal x1305=((1.0)*cj14);
IkReal x1306=(sj15*sj16);
IkReal x1307=(cj15*cj16);
IkReal x1308=(r22*sj15);
IkReal x1309=((1.0)*cj15);
IkReal x1310=(sj14*sj16);
IkReal x1311=(r02*sj15);
IkReal x1312=(cj16*sj15);
IkReal x1313=(cj15*sj16);
IkReal x1314=((1.0)*cj16*sj14);
IkReal x1315=((1.0)*x1303);
IkReal x1316=((0.01)*x1313);
IkReal x1317=((0.37429)*x1302);
evalcond[0]=(x1303+(((-1.0)*r22*x1309))+((r21*x1312))+((r20*x1306)));
evalcond[1]=(((r10*x1306))+((r11*x1312))+(((-1.0)*r12*x1309))+((sj11*x1302)));
evalcond[2]=(((r01*x1312))+(((-1.0)*r02*x1309))+((cj11*x1302))+((r00*x1306)));
evalcond[3]=((0.069)+(((0.01)*r21*x1307))+(((0.37429)*x1303))+(((0.01)*x1308))+(((-1.0)*pz))+((r20*x1316)));
evalcond[4]=(((r00*x1316))+(((0.01)*x1311))+(((0.36442)*cj11))+(((-1.0)*px))+((cj11*x1317))+(((0.01)*r01*x1307)));
evalcond[5]=(((r10*x1316))+(((0.01)*x1304))+(((-1.0)*py))+(((0.01)*r11*x1307))+(((0.36442)*sj11))+((sj11*x1317)));
evalcond[6]=(x1302+(((-1.0)*r20*x1305*x1313))+(((-1.0)*r21*x1305*x1307))+(((-1.0)*r20*x1314))+(((-1.0)*x1305*x1308))+((r21*x1310)));
evalcond[7]=((((-1.0)*sj11*x1315))+(((-1.0)*r11*x1305*x1307))+((r11*x1310))+(((-1.0)*r10*x1305*x1313))+(((-1.0)*r10*x1314))+(((-1.0)*x1304*x1305)));
evalcond[8]=(((r01*x1310))+(((-1.0)*r00*x1314))+(((-1.0)*r01*x1305*x1307))+(((-1.0)*cj11*x1315))+(((-1.0)*x1305*x1311))+(((-1.0)*r00*x1305*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j13eval[0]=sj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j13eval[0]=cj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1318=(sj15*sj16);
IkReal x1319=(cj16*sj15);
CheckValue<IkReal> x1320=IKPowWithIntegerCheck(cj11,-1);
if(!x1320.valid){
continue;
}
if( IKabs(((((-1.0)*cj15*r22))+((r21*x1319))+((r20*x1318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1320.value)*((((cj15*r02))+(((-1.0)*r01*x1319))+(((-1.0)*r00*x1318)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj15*r22))+((r21*x1319))+((r20*x1318))))+IKsqr(((x1320.value)*((((cj15*r02))+(((-1.0)*r01*x1319))+(((-1.0)*r00*x1318))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*cj15*r22))+((r21*x1319))+((r20*x1318))), ((x1320.value)*((((cj15*r02))+(((-1.0)*r01*x1319))+(((-1.0)*r00*x1318))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1321=IKcos(j13);
IkReal x1322=IKsin(j13);
IkReal x1323=(r12*sj15);
IkReal x1324=((1.0)*cj14);
IkReal x1325=(sj15*sj16);
IkReal x1326=((0.01)*cj15);
IkReal x1327=(cj16*r21);
IkReal x1328=(r22*sj15);
IkReal x1329=((1.0)*cj15);
IkReal x1330=(sj14*sj16);
IkReal x1331=(r00*sj16);
IkReal x1332=(r02*sj15);
IkReal x1333=(r20*sj16);
IkReal x1334=(cj16*r01);
IkReal x1335=(cj16*r11);
IkReal x1336=(r10*sj16);
IkReal x1337=((1.0)*cj16*sj14);
IkReal x1338=((1.0)*x1322);
IkReal x1339=((0.37429)*x1321);
evalcond[0]=((((-1.0)*r22*x1329))+((sj15*x1327))+((r20*x1325))+(((-1.0)*x1338)));
evalcond[1]=(((r10*x1325))+(((-1.0)*r12*x1329))+((sj11*x1321))+((sj15*x1335)));
evalcond[2]=(((r00*x1325))+(((-1.0)*r02*x1329))+((cj11*x1321))+((sj15*x1334)));
evalcond[3]=((-0.069)+(((-0.37429)*x1322))+(((0.01)*x1328))+(((-1.0)*pz))+((x1326*x1327))+((x1326*x1333)));
evalcond[4]=((((0.36442)*cj11))+(((0.01)*x1332))+(((-1.0)*px))+((cj11*x1339))+((x1326*x1334))+((x1326*x1331)));
evalcond[5]=((((0.01)*x1323))+(((-1.0)*py))+((x1326*x1336))+((x1326*x1335))+((sj11*x1339))+(((0.36442)*sj11)));
evalcond[6]=((((-1.0)*cj15*x1324*x1327))+(((-1.0)*x1324*x1328))+(((-1.0)*cj15*x1324*x1333))+(((-1.0)*x1321))+((r21*x1330))+(((-1.0)*r20*x1337)));
evalcond[7]=((((-1.0)*x1323*x1324))+((r11*x1330))+(((-1.0)*cj15*x1324*x1336))+(((-1.0)*cj15*x1324*x1335))+(((-1.0)*r10*x1337))+(((-1.0)*sj11*x1338)));
evalcond[8]=((((-1.0)*cj11*x1338))+(((-1.0)*x1324*x1332))+(((-1.0)*cj15*x1324*x1334))+(((-1.0)*cj15*x1324*x1331))+((r01*x1330))+(((-1.0)*r00*x1337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1340=((1.0)*sj15);
CheckValue<IkReal> x1341=IKPowWithIntegerCheck(sj11,-1);
if(!x1341.valid){
continue;
}
if( IKabs((((cj16*r21*sj15))+((r20*sj15*sj16))+(((-1.0)*cj15*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1341.value)*((((cj15*r12))+(((-1.0)*cj16*r11*x1340))+(((-1.0)*r10*sj16*x1340)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj16*r21*sj15))+((r20*sj15*sj16))+(((-1.0)*cj15*r22))))+IKsqr(((x1341.value)*((((cj15*r12))+(((-1.0)*cj16*r11*x1340))+(((-1.0)*r10*sj16*x1340))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj16*r21*sj15))+((r20*sj15*sj16))+(((-1.0)*cj15*r22))), ((x1341.value)*((((cj15*r12))+(((-1.0)*cj16*r11*x1340))+(((-1.0)*r10*sj16*x1340))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1342=IKcos(j13);
IkReal x1343=IKsin(j13);
IkReal x1344=(r12*sj15);
IkReal x1345=((1.0)*cj14);
IkReal x1346=(sj15*sj16);
IkReal x1347=((0.01)*cj15);
IkReal x1348=(cj16*r21);
IkReal x1349=(r22*sj15);
IkReal x1350=((1.0)*cj15);
IkReal x1351=(sj14*sj16);
IkReal x1352=(r00*sj16);
IkReal x1353=(r02*sj15);
IkReal x1354=(r20*sj16);
IkReal x1355=(cj16*r01);
IkReal x1356=(cj16*r11);
IkReal x1357=(r10*sj16);
IkReal x1358=((1.0)*cj16*sj14);
IkReal x1359=((1.0)*x1343);
IkReal x1360=((0.37429)*x1342);
evalcond[0]=((((-1.0)*x1359))+(((-1.0)*r22*x1350))+((sj15*x1348))+((r20*x1346)));
evalcond[1]=((((-1.0)*r12*x1350))+((sj11*x1342))+((sj15*x1356))+((r10*x1346)));
evalcond[2]=(((cj11*x1342))+(((-1.0)*r02*x1350))+((sj15*x1355))+((r00*x1346)));
evalcond[3]=((-0.069)+(((0.01)*x1349))+(((-0.37429)*x1343))+((x1347*x1348))+(((-1.0)*pz))+((x1347*x1354)));
evalcond[4]=((((0.36442)*cj11))+(((-1.0)*px))+((x1347*x1352))+((x1347*x1355))+(((0.01)*x1353))+((cj11*x1360)));
evalcond[5]=((((0.01)*x1344))+((sj11*x1360))+(((-1.0)*py))+((x1347*x1357))+((x1347*x1356))+(((0.36442)*sj11)));
evalcond[6]=((((-1.0)*cj15*x1345*x1348))+(((-1.0)*r20*x1358))+((r21*x1351))+(((-1.0)*x1342))+(((-1.0)*x1345*x1349))+(((-1.0)*cj15*x1345*x1354)));
evalcond[7]=((((-1.0)*r10*x1358))+((r11*x1351))+(((-1.0)*sj11*x1359))+(((-1.0)*x1344*x1345))+(((-1.0)*cj15*x1345*x1356))+(((-1.0)*cj15*x1345*x1357)));
evalcond[8]=((((-1.0)*x1345*x1353))+(((-1.0)*r00*x1358))+(((-1.0)*cj11*x1359))+((r01*x1351))+(((-1.0)*cj15*x1345*x1352))+(((-1.0)*cj15*x1345*x1355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(sj12,-1);
if(!x1366.valid){
continue;
}
IkReal x1361=x1366.value;
IkReal x1362=(cj12*sj11);
IkReal x1363=(cj15*r22);
IkReal x1364=((1.0)*sj15*sj16);
IkReal x1365=((1.0)*cj16*sj15);
CheckValue<IkReal> x1367=IKPowWithIntegerCheck(cj11,-1);
if(!x1367.valid){
continue;
}
if( IKabs((x1361*((x1363+(((-1.0)*r21*x1365))+(((-1.0)*r20*x1364)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1361*(x1367.value)*(((((-1.0)*r20*x1362*x1364))+(((-1.0)*r01*sj12*x1365))+((cj15*r02*sj12))+(((-1.0)*r21*x1362*x1365))+(((-1.0)*r00*sj12*x1364))+((x1362*x1363)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1361*((x1363+(((-1.0)*r21*x1365))+(((-1.0)*r20*x1364))))))+IKsqr((x1361*(x1367.value)*(((((-1.0)*r20*x1362*x1364))+(((-1.0)*r01*sj12*x1365))+((cj15*r02*sj12))+(((-1.0)*r21*x1362*x1365))+(((-1.0)*r00*sj12*x1364))+((x1362*x1363))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((x1361*((x1363+(((-1.0)*r21*x1365))+(((-1.0)*r20*x1364))))), (x1361*(x1367.value)*(((((-1.0)*r20*x1362*x1364))+(((-1.0)*r01*sj12*x1365))+((cj15*r02*sj12))+(((-1.0)*r21*x1362*x1365))+(((-1.0)*r00*sj12*x1364))+((x1362*x1363))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1368=IKsin(j13);
IkReal x1369=IKcos(j13);
IkReal x1370=(r12*sj15);
IkReal x1371=((1.0)*cj14);
IkReal x1372=((0.37429)*cj12);
IkReal x1373=(cj11*cj12);
IkReal x1374=(cj15*sj16);
IkReal x1375=(sj15*sj16);
IkReal x1376=(cj15*cj16);
IkReal x1377=(r22*sj15);
IkReal x1378=((1.0)*cj15);
IkReal x1379=(sj14*sj16);
IkReal x1380=((1.0)*cj12);
IkReal x1381=(r02*sj15);
IkReal x1382=(cj16*sj15);
IkReal x1383=(sj11*x1368);
IkReal x1384=(sj12*x1368);
IkReal x1385=((1.0)*cj16*sj14);
IkReal x1386=(cj11*x1369);
IkReal x1387=(sj11*x1369);
IkReal x1388=(cj11*x1368);
evalcond[0]=(x1384+(((-1.0)*r22*x1378))+((r21*x1382))+((r20*x1375)));
evalcond[1]=(x1387+((r10*x1375))+(((-1.0)*r12*x1378))+((x1368*x1373))+((r11*x1382)));
evalcond[2]=(x1386+(((-1.0)*r02*x1378))+(((-1.0)*x1380*x1383))+((r01*x1382))+((r00*x1375)));
evalcond[3]=((((0.01)*r21*x1376))+(((0.01)*x1377))+(((0.01)*r20*x1374))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.37429)*x1384)));
evalcond[4]=((((-1.0)*r21*x1371*x1376))+(((-1.0)*r20*x1385))+(((-1.0)*x1371*x1377))+(((-1.0)*r20*x1371*x1374))+((r21*x1379))+((sj12*x1369)));
evalcond[5]=((((-1.0)*x1372*x1383))+(((0.36442)*cj11))+(((-1.0)*px))+(((0.01)*x1381))+(((-0.069)*cj12*sj11))+(((0.37429)*x1386))+(((0.01)*r01*x1376))+(((0.01)*r00*x1374)));
evalcond[6]=((((0.01)*x1370))+(((0.01)*r10*x1374))+(((-1.0)*py))+((x1372*x1388))+(((0.01)*r11*x1376))+(((0.37429)*x1387))+(((0.069)*x1373))+(((0.36442)*sj11)));
evalcond[7]=((((-1.0)*r10*x1371*x1374))+(((-1.0)*x1370*x1371))+((r11*x1379))+(((-1.0)*r11*x1371*x1376))+(((-1.0)*r10*x1385))+((x1369*x1373))+(((-1.0)*x1383)));
evalcond[8]=((((-1.0)*r00*x1371*x1374))+(((-1.0)*r00*x1385))+(((-1.0)*x1380*x1387))+(((-1.0)*r01*x1371*x1376))+(((-1.0)*x1371*x1381))+(((-1.0)*x1388))+((r01*x1379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(sj12,-1);
if(!x1394.valid){
continue;
}
IkReal x1389=x1394.value;
IkReal x1390=(cj11*cj12);
IkReal x1391=(cj16*sj15);
IkReal x1392=(cj15*r22);
IkReal x1393=((1.0)*sj15*sj16);
CheckValue<IkReal> x1395=IKPowWithIntegerCheck(sj11,-1);
if(!x1395.valid){
continue;
}
if( IKabs((x1389*((x1392+(((-1.0)*r20*x1393))+(((-1.0)*r21*x1391)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1389*(x1395.value)*(((((-1.0)*x1390*x1392))+(((-1.0)*r10*sj12*x1393))+((r20*sj15*sj16*x1390))+((r21*x1390*x1391))+((cj15*r12*sj12))+(((-1.0)*r11*sj12*x1391)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1389*((x1392+(((-1.0)*r20*x1393))+(((-1.0)*r21*x1391))))))+IKsqr((x1389*(x1395.value)*(((((-1.0)*x1390*x1392))+(((-1.0)*r10*sj12*x1393))+((r20*sj15*sj16*x1390))+((r21*x1390*x1391))+((cj15*r12*sj12))+(((-1.0)*r11*sj12*x1391))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((x1389*((x1392+(((-1.0)*r20*x1393))+(((-1.0)*r21*x1391))))), (x1389*(x1395.value)*(((((-1.0)*x1390*x1392))+(((-1.0)*r10*sj12*x1393))+((r20*sj15*sj16*x1390))+((r21*x1390*x1391))+((cj15*r12*sj12))+(((-1.0)*r11*sj12*x1391))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1396=IKsin(j13);
IkReal x1397=IKcos(j13);
IkReal x1398=(r12*sj15);
IkReal x1399=((1.0)*cj14);
IkReal x1400=((0.37429)*cj12);
IkReal x1401=(cj11*cj12);
IkReal x1402=(cj15*sj16);
IkReal x1403=(sj15*sj16);
IkReal x1404=(cj15*cj16);
IkReal x1405=(r22*sj15);
IkReal x1406=((1.0)*cj15);
IkReal x1407=(sj14*sj16);
IkReal x1408=((1.0)*cj12);
IkReal x1409=(r02*sj15);
IkReal x1410=(cj16*sj15);
IkReal x1411=(sj11*x1396);
IkReal x1412=(sj12*x1396);
IkReal x1413=((1.0)*cj16*sj14);
IkReal x1414=(cj11*x1397);
IkReal x1415=(sj11*x1397);
IkReal x1416=(cj11*x1396);
evalcond[0]=(((r21*x1410))+(((-1.0)*r22*x1406))+((r20*x1403))+x1412);
evalcond[1]=((((-1.0)*r12*x1406))+((x1396*x1401))+((r11*x1410))+x1415+((r10*x1403)));
evalcond[2]=(((r00*x1403))+(((-1.0)*r02*x1406))+(((-1.0)*x1408*x1411))+((r01*x1410))+x1414);
evalcond[3]=((((0.01)*r20*x1402))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.01)*r21*x1404))+(((0.37429)*x1412))+(((0.01)*x1405)));
evalcond[4]=((((-1.0)*r20*x1399*x1402))+(((-1.0)*x1399*x1405))+(((-1.0)*r21*x1399*x1404))+((sj12*x1397))+((r21*x1407))+(((-1.0)*r20*x1413)));
evalcond[5]=((((0.01)*r01*x1404))+(((0.01)*r00*x1402))+(((-1.0)*x1400*x1411))+(((0.36442)*cj11))+(((-1.0)*px))+(((-0.069)*cj12*sj11))+(((0.37429)*x1414))+(((0.01)*x1409)));
evalcond[6]=((((0.069)*x1401))+((x1400*x1416))+(((-1.0)*py))+(((0.01)*x1398))+(((0.01)*r10*x1402))+(((0.37429)*x1415))+(((0.36442)*sj11))+(((0.01)*r11*x1404)));
evalcond[7]=((((-1.0)*r10*x1413))+(((-1.0)*r11*x1399*x1404))+((x1397*x1401))+((r11*x1407))+(((-1.0)*r10*x1399*x1402))+(((-1.0)*x1398*x1399))+(((-1.0)*x1411)));
evalcond[8]=((((-1.0)*r01*x1399*x1404))+(((-1.0)*x1399*x1409))+(((-1.0)*x1408*x1415))+((r01*x1407))+(((-1.0)*r00*x1413))+(((-1.0)*r00*x1399*x1402))+(((-1.0)*x1416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1417=(cj15*r12);
IkReal x1418=(sj11*sj15);
IkReal x1419=(cj15*r02);
IkReal x1420=((1.0)*cj11*cj16*sj15);
IkReal x1421=((1.0)*cj11*sj15*sj16);
CheckValue<IkReal> x1422=IKPowWithIntegerCheck(cj12,-1);
if(!x1422.valid){
continue;
}
if( IKabs(((x1422.value)*(((((-1.0)*sj11*x1419))+(((-1.0)*r10*x1421))+((r00*sj16*x1418))+(((-1.0)*r11*x1420))+((cj16*r01*x1418))+((cj11*x1417)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x1417))+(((-1.0)*cj16*r11*x1418))+(((-1.0)*r10*sj16*x1418))+(((-1.0)*r01*x1420))+((cj11*x1419))+(((-1.0)*r00*x1421)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1422.value)*(((((-1.0)*sj11*x1419))+(((-1.0)*r10*x1421))+((r00*sj16*x1418))+(((-1.0)*r11*x1420))+((cj16*r01*x1418))+((cj11*x1417))))))+IKsqr((((sj11*x1417))+(((-1.0)*cj16*r11*x1418))+(((-1.0)*r10*sj16*x1418))+(((-1.0)*r01*x1420))+((cj11*x1419))+(((-1.0)*r00*x1421))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1422.value)*(((((-1.0)*sj11*x1419))+(((-1.0)*r10*x1421))+((r00*sj16*x1418))+(((-1.0)*r11*x1420))+((cj16*r01*x1418))+((cj11*x1417))))), (((sj11*x1417))+(((-1.0)*cj16*r11*x1418))+(((-1.0)*r10*sj16*x1418))+(((-1.0)*r01*x1420))+((cj11*x1419))+(((-1.0)*r00*x1421))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1423=IKsin(j13);
IkReal x1424=IKcos(j13);
IkReal x1425=(r12*sj15);
IkReal x1426=((1.0)*cj14);
IkReal x1427=((0.37429)*cj12);
IkReal x1428=(cj11*cj12);
IkReal x1429=(cj15*sj16);
IkReal x1430=(sj15*sj16);
IkReal x1431=(cj15*cj16);
IkReal x1432=(r22*sj15);
IkReal x1433=((1.0)*cj15);
IkReal x1434=(sj14*sj16);
IkReal x1435=((1.0)*cj12);
IkReal x1436=(r02*sj15);
IkReal x1437=(cj16*sj15);
IkReal x1438=(sj11*x1423);
IkReal x1439=(sj12*x1423);
IkReal x1440=((1.0)*cj16*sj14);
IkReal x1441=(cj11*x1424);
IkReal x1442=(sj11*x1424);
IkReal x1443=(cj11*x1423);
evalcond[0]=((((-1.0)*r22*x1433))+((r20*x1430))+((r21*x1437))+x1439);
evalcond[1]=((((-1.0)*r12*x1433))+((x1423*x1428))+((r11*x1437))+x1442+((r10*x1430)));
evalcond[2]=((((-1.0)*x1435*x1438))+(((-1.0)*r02*x1433))+((r01*x1437))+((r00*x1430))+x1441);
evalcond[3]=((((0.37429)*x1439))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.01)*r21*x1431))+(((0.01)*r20*x1429))+(((0.01)*x1432)));
evalcond[4]=((((-1.0)*r20*x1440))+((sj12*x1424))+((r21*x1434))+(((-1.0)*x1426*x1432))+(((-1.0)*r20*x1426*x1429))+(((-1.0)*r21*x1426*x1431)));
evalcond[5]=((((0.37429)*x1441))+(((0.01)*r01*x1431))+(((0.36442)*cj11))+(((-1.0)*px))+(((-0.069)*cj12*sj11))+(((0.01)*r00*x1429))+(((-1.0)*x1427*x1438))+(((0.01)*x1436)));
evalcond[6]=((((0.01)*r11*x1431))+(((0.01)*r10*x1429))+((x1427*x1443))+(((0.37429)*x1442))+(((0.01)*x1425))+(((-1.0)*py))+(((0.069)*x1428))+(((0.36442)*sj11)));
evalcond[7]=(((x1424*x1428))+(((-1.0)*x1438))+(((-1.0)*x1425*x1426))+(((-1.0)*r10*x1440))+((r11*x1434))+(((-1.0)*r10*x1426*x1429))+(((-1.0)*r11*x1426*x1431)));
evalcond[8]=((((-1.0)*r00*x1440))+(((-1.0)*r00*x1426*x1429))+(((-1.0)*x1443))+((r01*x1434))+(((-1.0)*r01*x1426*x1431))+(((-1.0)*x1435*x1442))+(((-1.0)*x1426*x1436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1444=(sj14*sj15);
IkReal x1445=(cj15*sj14);
IkReal x1446=(cj14*sj16);
IkReal x1447=((1.0)*cj14*cj16);
CheckValue<IkReal> x1448=IKPowWithIntegerCheck(sj11,-1);
if(!x1448.valid){
continue;
}
if( IKabs(((x1448.value)*(((((-1.0)*r00*x1447))+((r02*x1444))+((cj16*r01*x1445))+((r00*sj16*x1445))+((r01*x1446)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1447))+((r22*x1444))+((r21*x1446))+((r20*sj16*x1445))+((cj16*r21*x1445)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1448.value)*(((((-1.0)*r00*x1447))+((r02*x1444))+((cj16*r01*x1445))+((r00*sj16*x1445))+((r01*x1446))))))+IKsqr(((((-1.0)*r20*x1447))+((r22*x1444))+((r21*x1446))+((r20*sj16*x1445))+((cj16*r21*x1445))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x1448.value)*(((((-1.0)*r00*x1447))+((r02*x1444))+((cj16*r01*x1445))+((r00*sj16*x1445))+((r01*x1446))))), ((((-1.0)*r20*x1447))+((r22*x1444))+((r21*x1446))+((r20*sj16*x1445))+((cj16*r21*x1445))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[3];
IkReal x1449=IKsin(j12);
IkReal x1450=(sj14*sj15);
IkReal x1451=(cj14*sj16);
IkReal x1452=(cj15*sj14*sj16);
IkReal x1453=((1.0)*cj14*cj16);
IkReal x1454=(cj15*cj16*sj14);
evalcond[0]=((((-1.0)*r20*x1453))+((r20*x1452))+(((-1.0)*(IKcos(j12))))+((r21*x1454))+((r21*x1451))+((r22*x1450)));
evalcond[1]=(((r10*x1452))+((r11*x1451))+((r11*x1454))+((r12*x1450))+((cj11*x1449))+(((-1.0)*r10*x1453)));
evalcond[2]=((((-1.0)*sj11*x1449))+(((-1.0)*r00*x1453))+((r01*x1451))+((r01*x1454))+((r00*x1452))+((r02*x1450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
j13eval[0]=sj12;
j13eval[1]=sj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
j13eval[0]=sj12;
j13eval[1]=cj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1455=(cj15*r12);
IkReal x1456=(sj11*sj15);
IkReal x1457=(cj15*r02);
IkReal x1458=((1.0)*cj11*cj16*sj15);
IkReal x1459=((1.0)*cj11*sj15*sj16);
if( IKabs(((((-1.0)*sj11*x1457))+((r00*sj16*x1456))+((cj16*r01*x1456))+((cj11*x1455))+(((-1.0)*r10*x1459))+(((-1.0)*r11*x1458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x1455))+(((-1.0)*cj16*r11*x1456))+(((-1.0)*r01*x1458))+((cj11*x1457))+(((-1.0)*r00*x1459))+(((-1.0)*r10*sj16*x1456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj11*x1457))+((r00*sj16*x1456))+((cj16*r01*x1456))+((cj11*x1455))+(((-1.0)*r10*x1459))+(((-1.0)*r11*x1458))))+IKsqr((((sj11*x1455))+(((-1.0)*cj16*r11*x1456))+(((-1.0)*r01*x1458))+((cj11*x1457))+(((-1.0)*r00*x1459))+(((-1.0)*r10*sj16*x1456))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*sj11*x1457))+((r00*sj16*x1456))+((cj16*r01*x1456))+((cj11*x1455))+(((-1.0)*r10*x1459))+(((-1.0)*r11*x1458))), (((sj11*x1455))+(((-1.0)*cj16*r11*x1456))+(((-1.0)*r01*x1458))+((cj11*x1457))+(((-1.0)*r00*x1459))+(((-1.0)*r10*sj16*x1456))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1460=IKcos(j13);
IkReal x1461=IKsin(j13);
IkReal x1462=((1.0)*cj16);
IkReal x1463=(sj15*sj16);
IkReal x1464=(sj14*sj16);
IkReal x1465=((0.01)*cj15);
IkReal x1466=(r00*sj16);
IkReal x1467=(cj14*cj15);
IkReal x1468=(cj16*r01);
IkReal x1469=((0.37429)*cj11);
IkReal x1470=((1.0)*cj15);
IkReal x1471=(cj16*r11);
IkReal x1472=((0.01)*sj15);
IkReal x1473=(r10*sj16);
IkReal x1474=(cj11*x1460);
IkReal x1475=((1.0)*cj14*sj15);
IkReal x1476=(sj11*x1461);
IkReal x1477=(sj11*x1460);
IkReal x1478=(cj11*x1461);
IkReal x1479=((1.0)*x1476);
evalcond[0]=((((-1.0)*r12*x1470))+x1477+x1478+((sj15*x1471))+((r10*x1463)));
evalcond[1]=(((sj15*x1468))+((r00*x1463))+x1474+(((-1.0)*x1479))+(((-1.0)*r02*x1470)));
evalcond[2]=(((x1465*x1466))+((x1465*x1468))+((r02*x1472))+(((0.36442)*cj11))+(((-1.0)*px))+(((-0.069)*sj11))+((x1460*x1469))+(((-0.37429)*x1476)));
evalcond[3]=(((r12*x1472))+(((0.37429)*x1477))+(((0.069)*cj11))+((x1461*x1469))+(((-1.0)*py))+((x1465*x1473))+((x1465*x1471))+(((0.36442)*sj11)));
evalcond[4]=((((-1.0)*x1467*x1473))+(((-1.0)*r12*x1475))+x1474+(((-1.0)*x1479))+(((-1.0)*r11*x1462*x1467))+((r11*x1464))+(((-1.0)*r10*sj14*x1462)));
evalcond[5]=((((-1.0)*r00*sj14*x1462))+(((-1.0)*r01*x1462*x1467))+((r01*x1464))+(((-1.0)*x1477))+(((-1.0)*x1478))+(((-1.0)*x1466*x1467))+(((-1.0)*r02*x1475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1480=((1.0)*cj11);
IkReal x1481=(cj15*r12);
IkReal x1482=(sj15*sj16);
IkReal x1483=((1.0)*sj11);
IkReal x1484=(cj16*sj15);
IkReal x1485=(cj15*r02);
if( IKabs(((((-1.0)*r00*x1482*x1483))+((sj11*x1485))+(((-1.0)*x1480*x1481))+(((-1.0)*r01*x1483*x1484))+((cj11*r11*x1484))+((cj11*r10*x1482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x1481))+(((-1.0)*r00*x1480*x1482))+(((-1.0)*r11*x1483*x1484))+((cj11*x1485))+(((-1.0)*r10*x1482*x1483))+(((-1.0)*r01*x1480*x1484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1482*x1483))+((sj11*x1485))+(((-1.0)*x1480*x1481))+(((-1.0)*r01*x1483*x1484))+((cj11*r11*x1484))+((cj11*r10*x1482))))+IKsqr((((sj11*x1481))+(((-1.0)*r00*x1480*x1482))+(((-1.0)*r11*x1483*x1484))+((cj11*x1485))+(((-1.0)*r10*x1482*x1483))+(((-1.0)*r01*x1480*x1484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r00*x1482*x1483))+((sj11*x1485))+(((-1.0)*x1480*x1481))+(((-1.0)*r01*x1483*x1484))+((cj11*r11*x1484))+((cj11*r10*x1482))), (((sj11*x1481))+(((-1.0)*r00*x1480*x1482))+(((-1.0)*r11*x1483*x1484))+((cj11*x1485))+(((-1.0)*r10*x1482*x1483))+(((-1.0)*r01*x1480*x1484))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1486=IKcos(j13);
IkReal x1487=IKsin(j13);
IkReal x1488=(r12*sj15);
IkReal x1489=((1.0)*cj14);
IkReal x1490=(sj15*sj16);
IkReal x1491=(r02*sj15);
IkReal x1492=(sj14*sj16);
IkReal x1493=((0.01)*cj15);
IkReal x1494=(r00*sj16);
IkReal x1495=(cj16*r11);
IkReal x1496=(cj16*r01);
IkReal x1497=((1.0)*cj15);
IkReal x1498=(r10*sj16);
IkReal x1499=(sj11*x1486);
IkReal x1500=((1.0)*cj16*sj14);
IkReal x1501=(sj11*x1487);
IkReal x1502=(cj11*x1486);
IkReal x1503=(cj11*x1487);
IkReal x1504=((1.0)*x1503);
evalcond[0]=(((r00*x1490))+((sj15*x1496))+x1502+x1501+(((-1.0)*r02*x1497)));
evalcond[1]=((((-1.0)*x1504))+((r10*x1490))+(((-1.0)*r12*x1497))+((sj15*x1495))+x1499);
evalcond[2]=((((0.01)*x1491))+(((0.37429)*x1501))+(((0.37429)*x1502))+(((0.36442)*cj11))+(((-1.0)*px))+(((0.069)*sj11))+((x1493*x1494))+((x1493*x1496)));
evalcond[3]=((((0.01)*x1488))+(((-0.37429)*x1503))+(((-1.0)*py))+((x1493*x1495))+((x1493*x1498))+(((-0.069)*cj11))+(((0.36442)*sj11))+(((0.37429)*x1499)));
evalcond[4]=((((-1.0)*x1504))+((r01*x1492))+(((-1.0)*r00*x1500))+(((-1.0)*cj15*x1489*x1494))+(((-1.0)*cj15*x1489*x1496))+x1499+(((-1.0)*x1489*x1491)));
evalcond[5]=((((-1.0)*x1501))+(((-1.0)*x1502))+((r11*x1492))+(((-1.0)*cj15*x1489*x1498))+(((-1.0)*cj15*x1489*x1495))+(((-1.0)*x1488*x1489))+(((-1.0)*r10*x1500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj11=1.0;
cj11=0;
j11=1.5707963267949;
j13eval[0]=sj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1505=(cj16*sj15);
IkReal x1506=(sj15*sj16);
if( IKabs((((r01*x1505))+((r00*x1506))+(((-1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*r10*x1506))+(((-1.0)*r11*x1505)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1505))+((r00*x1506))+(((-1.0)*cj15*r02))))+IKsqr((((cj15*r12))+(((-1.0)*r10*x1506))+(((-1.0)*r11*x1505))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r01*x1505))+((r00*x1506))+(((-1.0)*cj15*r02))), (((cj15*r12))+(((-1.0)*r10*x1506))+(((-1.0)*r11*x1505))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1507=IKsin(j13);
IkReal x1508=IKcos(j13);
IkReal x1509=(r12*sj15);
IkReal x1510=((1.0)*cj14);
IkReal x1511=(sj15*sj16);
IkReal x1512=(r02*sj15);
IkReal x1513=(sj14*sj16);
IkReal x1514=((0.01)*cj15);
IkReal x1515=(r00*sj16);
IkReal x1516=(cj15*cj16);
IkReal x1517=(cj16*r01);
IkReal x1518=((1.0)*cj15);
IkReal x1519=(cj16*r11);
IkReal x1520=(r10*sj16);
IkReal x1521=((1.0)*x1507);
IkReal x1522=((1.0)*cj16*sj14);
evalcond[0]=(((r10*x1511))+x1508+((sj15*x1519))+(((-1.0)*r12*x1518)));
evalcond[1]=((((-1.0)*x1521))+((r00*x1511))+(((-1.0)*r02*x1518))+((sj15*x1517)));
evalcond[2]=((-0.069)+((x1514*x1517))+((x1514*x1515))+(((0.01)*x1512))+(((-0.37429)*x1507))+(((-1.0)*px)));
evalcond[3]=((0.36442)+((x1514*x1519))+(((0.37429)*x1508))+(((0.01)*x1509))+(((-1.0)*py))+((x1514*x1520)));
evalcond[4]=(((r11*x1513))+(((-1.0)*x1521))+(((-1.0)*cj15*x1510*x1520))+(((-1.0)*x1509*x1510))+(((-1.0)*r11*x1510*x1516))+(((-1.0)*r10*x1522)));
evalcond[5]=((((-1.0)*r00*x1522))+(((-1.0)*x1508))+(((-1.0)*cj15*x1510*x1515))+(((-1.0)*x1510*x1512))+((r01*x1513))+(((-1.0)*r01*x1510*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1523=((1.0)*sj15);
if( IKabs((((cj15*r02))+(((-1.0)*r00*sj16*x1523))+(((-1.0)*cj16*r01*x1523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj16*x1523))+((cj15*r12))+(((-1.0)*cj16*r11*x1523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r02))+(((-1.0)*r00*sj16*x1523))+(((-1.0)*cj16*r01*x1523))))+IKsqr(((((-1.0)*r10*sj16*x1523))+((cj15*r12))+(((-1.0)*cj16*r11*x1523))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r02))+(((-1.0)*r00*sj16*x1523))+(((-1.0)*cj16*r01*x1523))), ((((-1.0)*r10*sj16*x1523))+((cj15*r12))+(((-1.0)*cj16*r11*x1523))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1524=IKsin(j13);
IkReal x1525=IKcos(j13);
IkReal x1526=(r12*sj15);
IkReal x1527=((1.0)*cj14);
IkReal x1528=(sj15*sj16);
IkReal x1529=(r02*sj15);
IkReal x1530=(sj14*sj16);
IkReal x1531=((0.01)*cj15);
IkReal x1532=(r00*sj16);
IkReal x1533=(cj16*r11);
IkReal x1534=(cj16*r01);
IkReal x1535=((1.0)*cj15);
IkReal x1536=(r10*sj16);
IkReal x1537=((1.0)*cj16*sj14);
evalcond[0]=(((sj15*x1533))+(((-1.0)*r12*x1535))+((r10*x1528))+x1525);
evalcond[1]=(((sj15*x1534))+((r00*x1528))+(((-1.0)*r02*x1535))+x1524);
evalcond[2]=((0.069)+(((0.37429)*x1524))+((x1531*x1534))+((x1531*x1532))+(((-1.0)*px))+(((0.01)*x1529)));
evalcond[3]=((0.36442)+(((0.37429)*x1525))+((x1531*x1536))+((x1531*x1533))+(((-1.0)*py))+(((0.01)*x1526)));
evalcond[4]=((((-1.0)*cj15*x1527*x1532))+(((-1.0)*cj15*x1527*x1534))+(((-1.0)*r00*x1537))+((r01*x1530))+x1525+(((-1.0)*x1527*x1529)));
evalcond[5]=((((-1.0)*cj15*x1527*x1536))+(((-1.0)*cj15*x1527*x1533))+((r11*x1530))+(((-1.0)*x1526*x1527))+(((-1.0)*r10*x1537))+(((-1.0)*x1524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1538=((1.0)*sj15);
if( IKabs(((((-1.0)*r20*sj16*x1538))+(((-1.0)*cj16*r21*x1538))+((cj15*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj16*x1538))+((cj15*r12))+(((-1.0)*cj16*r11*x1538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj16*x1538))+(((-1.0)*cj16*r21*x1538))+((cj15*r22))))+IKsqr(((((-1.0)*r10*sj16*x1538))+((cj15*r12))+(((-1.0)*cj16*r11*x1538))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r20*sj16*x1538))+(((-1.0)*cj16*r21*x1538))+((cj15*r22))), ((((-1.0)*r10*sj16*x1538))+((cj15*r12))+(((-1.0)*cj16*r11*x1538))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1539=IKsin(j13);
IkReal x1540=IKcos(j13);
IkReal x1541=(r12*sj15);
IkReal x1542=((1.0)*cj14);
IkReal x1543=(r10*sj16);
IkReal x1544=((0.01)*cj15);
IkReal x1545=(cj16*r21);
IkReal x1546=(r22*sj15);
IkReal x1547=((1.0)*cj15);
IkReal x1548=(sj14*sj16);
IkReal x1549=(r20*sj16);
IkReal x1550=(cj16*r11);
IkReal x1551=((1.0)*cj16*sj14);
evalcond[0]=(((sj15*x1549))+((sj15*x1545))+(((-1.0)*r22*x1547))+x1539);
evalcond[1]=(((sj15*x1543))+x1540+(((-1.0)*r12*x1547))+((sj15*x1550)));
evalcond[2]=((0.069)+((x1544*x1545))+((x1544*x1549))+(((0.37429)*x1539))+(((-1.0)*pz))+(((0.01)*x1546)));
evalcond[3]=((0.36442)+((x1544*x1550))+(((0.37429)*x1540))+(((-1.0)*py))+(((0.01)*x1541))+((x1543*x1544)));
evalcond[4]=((((-1.0)*cj15*x1542*x1549))+(((-1.0)*cj15*x1542*x1545))+x1540+((r21*x1548))+(((-1.0)*r20*x1551))+(((-1.0)*x1542*x1546)));
evalcond[5]=((((-1.0)*x1539))+(((-1.0)*cj15*x1542*x1543))+((r11*x1548))+(((-1.0)*cj15*x1542*x1550))+(((-1.0)*x1541*x1542))+(((-1.0)*r10*x1551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1552=(cj16*sj15);
IkReal x1553=(sj15*sj16);
if( IKabs(((((-1.0)*cj15*r22))+((r21*x1552))+((r20*x1553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*r10*x1553))+(((-1.0)*r11*x1552)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj15*r22))+((r21*x1552))+((r20*x1553))))+IKsqr((((cj15*r12))+(((-1.0)*r10*x1553))+(((-1.0)*r11*x1552))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*cj15*r22))+((r21*x1552))+((r20*x1553))), (((cj15*r12))+(((-1.0)*r10*x1553))+(((-1.0)*r11*x1552))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1554=IKsin(j13);
IkReal x1555=IKcos(j13);
IkReal x1556=(r12*sj15);
IkReal x1557=((1.0)*cj14);
IkReal x1558=(r10*sj16);
IkReal x1559=((0.01)*cj15);
IkReal x1560=(cj16*r21);
IkReal x1561=(r22*sj15);
IkReal x1562=((1.0)*cj15);
IkReal x1563=(sj14*sj16);
IkReal x1564=(r20*sj16);
IkReal x1565=(cj16*r11);
IkReal x1566=((1.0)*x1554);
IkReal x1567=((1.0)*cj16*sj14);
evalcond[0]=(((sj15*x1565))+x1555+(((-1.0)*r12*x1562))+((sj15*x1558)));
evalcond[1]=(((sj15*x1564))+((sj15*x1560))+(((-1.0)*r22*x1562))+(((-1.0)*x1566)));
evalcond[2]=((-0.069)+(((0.01)*x1561))+(((-1.0)*pz))+(((-0.37429)*x1554))+((x1559*x1560))+((x1559*x1564)));
evalcond[3]=((0.36442)+(((0.37429)*x1555))+(((0.01)*x1556))+(((-1.0)*py))+((x1558*x1559))+((x1559*x1565)));
evalcond[4]=((((-1.0)*x1555))+(((-1.0)*cj15*x1557*x1564))+(((-1.0)*cj15*x1557*x1560))+(((-1.0)*x1557*x1561))+(((-1.0)*r20*x1567))+((r21*x1563)));
evalcond[5]=((((-1.0)*cj15*x1557*x1565))+(((-1.0)*cj15*x1557*x1558))+((r11*x1563))+(((-1.0)*x1556*x1557))+(((-1.0)*r10*x1567))+(((-1.0)*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1568=((1.0)*sj15);
CheckValue<IkReal> x1569=IKPowWithIntegerCheck(sj12,-1);
if(!x1569.valid){
continue;
}
if( IKabs(((x1569.value)*((((cj15*r22))+(((-1.0)*r20*sj16*x1568))+(((-1.0)*cj16*r21*x1568)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r12))+(((-1.0)*r10*sj16*x1568))+(((-1.0)*cj16*r11*x1568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1569.value)*((((cj15*r22))+(((-1.0)*r20*sj16*x1568))+(((-1.0)*cj16*r21*x1568))))))+IKsqr((((cj15*r12))+(((-1.0)*r10*sj16*x1568))+(((-1.0)*cj16*r11*x1568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1569.value)*((((cj15*r22))+(((-1.0)*r20*sj16*x1568))+(((-1.0)*cj16*r21*x1568))))), (((cj15*r12))+(((-1.0)*r10*sj16*x1568))+(((-1.0)*cj16*r11*x1568))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1570=IKsin(j13);
IkReal x1571=IKcos(j13);
IkReal x1572=(r12*sj15);
IkReal x1573=((1.0)*cj14);
IkReal x1574=(sj15*sj16);
IkReal x1575=((0.01)*cj15);
IkReal x1576=(cj16*r21);
IkReal x1577=(r22*sj15);
IkReal x1578=((1.0)*cj15);
IkReal x1579=(sj14*sj16);
IkReal x1580=(r00*sj16);
IkReal x1581=(r02*sj15);
IkReal x1582=(r20*sj16);
IkReal x1583=(cj16*r01);
IkReal x1584=(cj16*r11);
IkReal x1585=(r10*sj16);
IkReal x1586=(sj12*x1570);
IkReal x1587=((1.0)*cj16*sj14);
IkReal x1588=(cj12*x1570);
evalcond[0]=(x1571+(((-1.0)*r12*x1578))+((r10*x1574))+((sj15*x1584)));
evalcond[1]=(((r20*x1574))+((sj15*x1576))+(((-1.0)*r22*x1578))+x1586);
evalcond[2]=((((-1.0)*r02*x1578))+(((-1.0)*x1588))+((r00*x1574))+((sj15*x1583)));
evalcond[3]=((0.36442)+(((0.37429)*x1571))+((x1575*x1585))+((x1575*x1584))+(((-1.0)*py))+(((0.01)*x1572)));
evalcond[4]=((((0.37429)*x1586))+((x1575*x1576))+((x1575*x1582))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.01)*x1577)));
evalcond[5]=((((0.01)*x1581))+((x1575*x1580))+((x1575*x1583))+(((-1.0)*px))+(((-0.37429)*x1588))+(((-0.069)*cj12)));
evalcond[6]=((((-1.0)*cj15*x1573*x1576))+(((-1.0)*x1573*x1577))+((sj12*x1571))+((r21*x1579))+(((-1.0)*cj15*x1573*x1582))+(((-1.0)*r20*x1587)));
evalcond[7]=((((-1.0)*x1572*x1573))+((r11*x1579))+(((-1.0)*cj15*x1573*x1584))+(((-1.0)*cj15*x1573*x1585))+(((-1.0)*x1570))+(((-1.0)*r10*x1587)));
evalcond[8]=((((-1.0)*x1573*x1581))+(((-1.0)*r00*x1587))+(((-1.0)*cj12*x1571))+(((-1.0)*cj15*x1573*x1583))+(((-1.0)*cj15*x1573*x1580))+((r01*x1579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1589=(cj16*sj15);
IkReal x1590=(sj15*sj16);
CheckValue<IkReal> x1591=IKPowWithIntegerCheck(cj12,-1);
if(!x1591.valid){
continue;
}
if( IKabs(((x1591.value)*((((r00*x1590))+((r01*x1589))+(((-1.0)*cj15*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1589))+((cj15*r12))+(((-1.0)*r10*x1590)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1591.value)*((((r00*x1590))+((r01*x1589))+(((-1.0)*cj15*r02))))))+IKsqr(((((-1.0)*r11*x1589))+((cj15*r12))+(((-1.0)*r10*x1590))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1591.value)*((((r00*x1590))+((r01*x1589))+(((-1.0)*cj15*r02))))), ((((-1.0)*r11*x1589))+((cj15*r12))+(((-1.0)*r10*x1590))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1592=IKsin(j13);
IkReal x1593=IKcos(j13);
IkReal x1594=(r12*sj15);
IkReal x1595=((1.0)*cj14);
IkReal x1596=(sj15*sj16);
IkReal x1597=((0.01)*cj15);
IkReal x1598=(cj16*r21);
IkReal x1599=(r22*sj15);
IkReal x1600=((1.0)*cj15);
IkReal x1601=(sj14*sj16);
IkReal x1602=(r00*sj16);
IkReal x1603=(r02*sj15);
IkReal x1604=(r20*sj16);
IkReal x1605=(cj16*r01);
IkReal x1606=(cj16*r11);
IkReal x1607=(r10*sj16);
IkReal x1608=(sj12*x1592);
IkReal x1609=((1.0)*cj16*sj14);
IkReal x1610=(cj12*x1592);
evalcond[0]=(x1593+((sj15*x1606))+(((-1.0)*r12*x1600))+((r10*x1596)));
evalcond[1]=(((r20*x1596))+x1608+(((-1.0)*r22*x1600))+((sj15*x1598)));
evalcond[2]=(((r00*x1596))+(((-1.0)*x1610))+((sj15*x1605))+(((-1.0)*r02*x1600)));
evalcond[3]=((0.36442)+(((0.37429)*x1593))+(((0.01)*x1594))+(((-1.0)*py))+((x1597*x1607))+((x1597*x1606)));
evalcond[4]=((((0.37429)*x1608))+(((0.01)*x1599))+(((-1.0)*pz))+(((0.069)*sj12))+((x1597*x1598))+((x1597*x1604)));
evalcond[5]=((((0.01)*x1603))+(((-1.0)*px))+(((-0.069)*cj12))+(((-0.37429)*x1610))+((x1597*x1602))+((x1597*x1605)));
evalcond[6]=((((-1.0)*r20*x1609))+(((-1.0)*cj15*x1595*x1598))+(((-1.0)*x1595*x1599))+((r21*x1601))+((sj12*x1593))+(((-1.0)*cj15*x1595*x1604)));
evalcond[7]=((((-1.0)*x1594*x1595))+((r11*x1601))+(((-1.0)*cj15*x1595*x1607))+(((-1.0)*cj15*x1595*x1606))+(((-1.0)*r10*x1609))+(((-1.0)*x1592)));
evalcond[8]=((((-1.0)*x1595*x1603))+((r01*x1601))+(((-1.0)*r00*x1609))+(((-1.0)*cj15*x1595*x1602))+(((-1.0)*cj15*x1595*x1605))+(((-1.0)*cj12*x1593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j13eval[0]=sj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj11=-1.0;
cj11=0;
j11=-1.5707963267949;
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1611=(sj15*sj16);
IkReal x1612=(cj16*sj15);
if( IKabs(((((-1.0)*r20*x1611))+((cj15*r22))+(((-1.0)*r21*x1612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1612))+(((-1.0)*cj15*r12))+((r10*x1611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1611))+((cj15*r22))+(((-1.0)*r21*x1612))))+IKsqr((((r11*x1612))+(((-1.0)*cj15*r12))+((r10*x1611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r20*x1611))+((cj15*r22))+(((-1.0)*r21*x1612))), (((r11*x1612))+(((-1.0)*cj15*r12))+((r10*x1611))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1613=IKsin(j13);
IkReal x1614=IKcos(j13);
IkReal x1615=(r12*sj15);
IkReal x1616=((1.0)*cj14);
IkReal x1617=(r10*sj16);
IkReal x1618=(cj15*cj16);
IkReal x1619=(r22*sj15);
IkReal x1620=((1.0)*cj15);
IkReal x1621=((0.01)*cj15);
IkReal x1622=(sj14*sj16);
IkReal x1623=(r20*sj16);
IkReal x1624=(cj16*sj15);
IkReal x1625=((1.0)*cj16*sj14);
evalcond[0]=(((r21*x1624))+x1613+(((-1.0)*r22*x1620))+((sj15*x1623)));
evalcond[1]=((((-1.0)*r12*x1620))+(((-1.0)*x1614))+((r11*x1624))+((sj15*x1617)));
evalcond[2]=((0.069)+(((0.37429)*x1613))+(((-1.0)*pz))+(((0.01)*x1619))+(((0.01)*r21*x1618))+((x1621*x1623)));
evalcond[3]=((-0.36442)+((x1617*x1621))+(((-1.0)*py))+(((0.01)*x1615))+(((0.01)*r11*x1618))+(((-0.37429)*x1614)));
evalcond[4]=((((-1.0)*r20*x1625))+(((-1.0)*x1616*x1619))+((r21*x1622))+x1614+(((-1.0)*cj15*x1616*x1623))+(((-1.0)*r21*x1616*x1618)));
evalcond[5]=((((-1.0)*r11*x1616*x1618))+x1613+(((-1.0)*cj15*x1616*x1617))+((r11*x1622))+(((-1.0)*r10*x1625))+(((-1.0)*x1615*x1616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1626=(sj15*sj16);
IkReal x1627=((1.0)*cj15);
IkReal x1628=(cj16*sj15);
if( IKabs((((r20*x1626))+((r21*x1628))+(((-1.0)*r22*x1627)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1627))+((r11*x1628))+((r10*x1626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1626))+((r21*x1628))+(((-1.0)*r22*x1627))))+IKsqr(((((-1.0)*r12*x1627))+((r11*x1628))+((r10*x1626))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r20*x1626))+((r21*x1628))+(((-1.0)*r22*x1627))), ((((-1.0)*r12*x1627))+((r11*x1628))+((r10*x1626))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1629=IKsin(j13);
IkReal x1630=IKcos(j13);
IkReal x1631=(r12*sj15);
IkReal x1632=((1.0)*cj14);
IkReal x1633=(r10*sj16);
IkReal x1634=((0.01)*cj15);
IkReal x1635=(cj16*r21);
IkReal x1636=(r22*sj15);
IkReal x1637=((1.0)*cj15);
IkReal x1638=(sj14*sj16);
IkReal x1639=(cj16*r11);
IkReal x1640=(r20*sj16);
IkReal x1641=((1.0)*x1630);
IkReal x1642=((1.0)*cj16*sj14);
evalcond[0]=((((-1.0)*x1629))+(((-1.0)*r22*x1637))+((sj15*x1635))+((sj15*x1640)));
evalcond[1]=((((-1.0)*r12*x1637))+(((-1.0)*x1641))+((sj15*x1633))+((sj15*x1639)));
evalcond[2]=((-0.069)+(((-1.0)*pz))+(((-0.37429)*x1629))+(((0.01)*x1636))+((x1634*x1635))+((x1634*x1640)));
evalcond[3]=((-0.36442)+(((-1.0)*py))+(((-0.37429)*x1630))+(((0.01)*x1631))+((x1634*x1639))+((x1633*x1634)));
evalcond[4]=(((r11*x1638))+x1629+(((-1.0)*r10*x1642))+(((-1.0)*cj15*x1632*x1639))+(((-1.0)*cj15*x1632*x1633))+(((-1.0)*x1631*x1632)));
evalcond[5]=(((r21*x1638))+(((-1.0)*x1641))+(((-1.0)*r20*x1642))+(((-1.0)*cj15*x1632*x1640))+(((-1.0)*cj15*x1632*x1635))+(((-1.0)*x1632*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1643=((1.0)*sj15);
if( IKabs((((cj15*r02))+(((-1.0)*cj16*r01*x1643))+(((-1.0)*r00*sj16*x1643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r02))+(((-1.0)*cj16*r01*x1643))+(((-1.0)*r00*sj16*x1643))))+IKsqr((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r02))+(((-1.0)*cj16*r01*x1643))+(((-1.0)*r00*sj16*x1643))), (((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1644=IKsin(j13);
IkReal x1645=IKcos(j13);
IkReal x1646=(r12*sj15);
IkReal x1647=((1.0)*cj14);
IkReal x1648=(sj15*sj16);
IkReal x1649=(r02*sj15);
IkReal x1650=(sj14*sj16);
IkReal x1651=((0.01)*cj15);
IkReal x1652=(r00*sj16);
IkReal x1653=(cj16*r11);
IkReal x1654=(cj16*r01);
IkReal x1655=((1.0)*cj15);
IkReal x1656=(r10*sj16);
IkReal x1657=((1.0)*cj16*sj14);
evalcond[0]=(x1644+((r00*x1648))+(((-1.0)*r02*x1655))+((sj15*x1654)));
evalcond[1]=(((r10*x1648))+(((-1.0)*r12*x1655))+(((-1.0)*x1645))+((sj15*x1653)));
evalcond[2]=((0.069)+(((-1.0)*px))+(((0.37429)*x1644))+(((0.01)*x1649))+((x1651*x1654))+((x1651*x1652)));
evalcond[3]=((-0.36442)+(((-1.0)*py))+(((-0.37429)*x1645))+(((0.01)*x1646))+((x1651*x1656))+((x1651*x1653)));
evalcond[4]=((((-1.0)*x1646*x1647))+x1644+(((-1.0)*r10*x1657))+((r11*x1650))+(((-1.0)*cj15*x1647*x1656))+(((-1.0)*cj15*x1647*x1653)));
evalcond[5]=((((-1.0)*x1647*x1649))+(((-1.0)*r00*x1657))+x1645+(((-1.0)*cj15*x1647*x1654))+(((-1.0)*cj15*x1647*x1652))+((r01*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1658=(sj15*sj16);
IkReal x1659=(cj16*sj15);
IkReal x1660=((1.0)*cj15);
if( IKabs((((r01*x1659))+((r00*x1658))+(((-1.0)*r02*x1660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1658))+(((-1.0)*r12*x1660))+((r11*x1659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1659))+((r00*x1658))+(((-1.0)*r02*x1660))))+IKsqr((((r10*x1658))+(((-1.0)*r12*x1660))+((r11*x1659))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r01*x1659))+((r00*x1658))+(((-1.0)*r02*x1660))), (((r10*x1658))+(((-1.0)*r12*x1660))+((r11*x1659))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1661=IKsin(j13);
IkReal x1662=IKcos(j13);
IkReal x1663=(r12*sj15);
IkReal x1664=((1.0)*cj14);
IkReal x1665=(sj15*sj16);
IkReal x1666=(r02*sj15);
IkReal x1667=(sj14*sj16);
IkReal x1668=((0.01)*cj15);
IkReal x1669=(r00*sj16);
IkReal x1670=(cj15*cj16);
IkReal x1671=(cj16*r01);
IkReal x1672=((1.0)*cj15);
IkReal x1673=(cj16*r11);
IkReal x1674=(r10*sj16);
IkReal x1675=((1.0)*x1662);
IkReal x1676=((1.0)*cj16*sj14);
evalcond[0]=(((r10*x1665))+(((-1.0)*r12*x1672))+((sj15*x1673))+(((-1.0)*x1675)));
evalcond[1]=((((-1.0)*r02*x1672))+(((-1.0)*x1661))+((r00*x1665))+((sj15*x1671)));
evalcond[2]=((-0.069)+((x1668*x1671))+(((-0.37429)*x1661))+((x1668*x1669))+(((-1.0)*px))+(((0.01)*x1666)));
evalcond[3]=((-0.36442)+((x1668*x1673))+((x1668*x1674))+(((-0.37429)*x1662))+(((-1.0)*py))+(((0.01)*x1663)));
evalcond[4]=(x1661+((r11*x1667))+(((-1.0)*cj15*x1664*x1674))+(((-1.0)*x1663*x1664))+(((-1.0)*r10*x1676))+(((-1.0)*r11*x1664*x1670)));
evalcond[5]=(((r01*x1667))+(((-1.0)*cj15*x1664*x1669))+(((-1.0)*r01*x1664*x1670))+(((-1.0)*r00*x1676))+(((-1.0)*x1675))+(((-1.0)*x1664*x1666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1677=((1.0)*sj15);
CheckValue<IkReal> x1678=IKPowWithIntegerCheck(cj12,-1);
if(!x1678.valid){
continue;
}
if( IKabs(((x1678.value)*(((((-1.0)*cj16*r01*x1677))+((cj15*r02))+(((-1.0)*r00*sj16*x1677)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1678.value)*(((((-1.0)*cj16*r01*x1677))+((cj15*r02))+(((-1.0)*r00*sj16*x1677))))))+IKsqr((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1678.value)*(((((-1.0)*cj16*r01*x1677))+((cj15*r02))+(((-1.0)*r00*sj16*x1677))))), (((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1679=IKsin(j13);
IkReal x1680=IKcos(j13);
IkReal x1681=(r12*sj15);
IkReal x1682=((1.0)*cj14);
IkReal x1683=(sj15*sj16);
IkReal x1684=((0.01)*cj15);
IkReal x1685=(cj16*r21);
IkReal x1686=(r22*sj15);
IkReal x1687=((1.0)*cj15);
IkReal x1688=(sj14*sj16);
IkReal x1689=(r00*sj16);
IkReal x1690=(cj15*cj16);
IkReal x1691=(r02*sj15);
IkReal x1692=(r20*sj16);
IkReal x1693=(cj16*r01);
IkReal x1694=(cj16*r11);
IkReal x1695=(r10*sj16);
IkReal x1696=(sj12*x1679);
IkReal x1697=((1.0)*cj16*sj14);
IkReal x1698=(cj12*x1679);
evalcond[0]=(((sj15*x1685))+x1696+(((-1.0)*r22*x1687))+((r20*x1683)));
evalcond[1]=((((-1.0)*r12*x1687))+((sj15*x1694))+((r10*x1683))+(((-1.0)*x1680)));
evalcond[2]=(((r00*x1683))+((sj15*x1693))+x1698+(((-1.0)*r02*x1687)));
evalcond[3]=((-0.36442)+(((-0.37429)*x1680))+(((0.01)*x1681))+(((-1.0)*py))+((x1684*x1694))+((x1684*x1695)));
evalcond[4]=((((0.01)*x1686))+(((-1.0)*pz))+(((0.069)*sj12))+((x1684*x1685))+((x1684*x1692))+(((0.37429)*x1696)));
evalcond[5]=((((0.069)*cj12))+(((-1.0)*px))+((x1684*x1689))+(((0.01)*x1691))+((x1684*x1693))+(((0.37429)*x1698)));
evalcond[6]=(((r11*x1688))+(((-1.0)*x1681*x1682))+x1679+(((-1.0)*r10*x1697))+(((-1.0)*cj15*x1682*x1695))+(((-1.0)*r11*x1682*x1690)));
evalcond[7]=((((-1.0)*r20*x1697))+(((-1.0)*x1682*x1686))+((r21*x1688))+((sj12*x1680))+(((-1.0)*cj15*x1682*x1685))+(((-1.0)*cj15*x1682*x1692)));
evalcond[8]=((((-1.0)*r01*x1682*x1690))+((cj12*x1680))+((r01*x1688))+(((-1.0)*x1682*x1691))+(((-1.0)*cj15*x1682*x1689))+(((-1.0)*r00*x1697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1699=(sj15*sj16);
IkReal x1700=(cj16*sj15);
CheckValue<IkReal> x1701=IKPowWithIntegerCheck(sj12,-1);
if(!x1701.valid){
continue;
}
if( IKabs(((x1701.value)*((((cj15*r22))+(((-1.0)*r21*x1700))+(((-1.0)*r20*x1699)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1699))+((r11*x1700))+(((-1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1701.value)*((((cj15*r22))+(((-1.0)*r21*x1700))+(((-1.0)*r20*x1699))))))+IKsqr((((r10*x1699))+((r11*x1700))+(((-1.0)*cj15*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1701.value)*((((cj15*r22))+(((-1.0)*r21*x1700))+(((-1.0)*r20*x1699))))), (((r10*x1699))+((r11*x1700))+(((-1.0)*cj15*r12))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1702=IKsin(j13);
IkReal x1703=IKcos(j13);
IkReal x1704=(r12*sj15);
IkReal x1705=((1.0)*cj14);
IkReal x1706=(sj15*sj16);
IkReal x1707=((0.01)*cj15);
IkReal x1708=(cj16*r21);
IkReal x1709=(r22*sj15);
IkReal x1710=((1.0)*cj15);
IkReal x1711=(sj14*sj16);
IkReal x1712=(r00*sj16);
IkReal x1713=(cj15*cj16);
IkReal x1714=(r02*sj15);
IkReal x1715=(r20*sj16);
IkReal x1716=(cj16*r01);
IkReal x1717=(cj16*r11);
IkReal x1718=(r10*sj16);
IkReal x1719=(sj12*x1702);
IkReal x1720=((1.0)*cj16*sj14);
IkReal x1721=(cj12*x1702);
evalcond[0]=(x1719+((r20*x1706))+(((-1.0)*r22*x1710))+((sj15*x1708)));
evalcond[1]=((((-1.0)*x1703))+((r10*x1706))+(((-1.0)*r12*x1710))+((sj15*x1717)));
evalcond[2]=(x1721+((r00*x1706))+(((-1.0)*r02*x1710))+((sj15*x1716)));
evalcond[3]=((-0.36442)+(((0.01)*x1704))+(((-1.0)*py))+((x1707*x1717))+((x1707*x1718))+(((-0.37429)*x1703)));
evalcond[4]=((((0.37429)*x1719))+(((0.01)*x1709))+(((-1.0)*pz))+(((0.069)*sj12))+((x1707*x1715))+((x1707*x1708)));
evalcond[5]=((((0.01)*x1714))+(((0.069)*cj12))+(((-1.0)*px))+(((0.37429)*x1721))+((x1707*x1712))+((x1707*x1716)));
evalcond[6]=(((r11*x1711))+x1702+(((-1.0)*r10*x1720))+(((-1.0)*x1704*x1705))+(((-1.0)*cj15*x1705*x1718))+(((-1.0)*r11*x1705*x1713)));
evalcond[7]=(((sj12*x1703))+(((-1.0)*x1705*x1709))+((r21*x1711))+(((-1.0)*cj15*x1705*x1715))+(((-1.0)*r20*x1720))+(((-1.0)*cj15*x1705*x1708)));
evalcond[8]=(((cj12*x1703))+(((-1.0)*r00*x1720))+((r01*x1711))+(((-1.0)*x1705*x1714))+(((-1.0)*cj15*x1705*x1712))+(((-1.0)*r01*x1705*x1713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj11=0;
cj11=1.0;
j11=0;
j13eval[0]=sj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj11=0;
cj11=1.0;
j11=0;
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1722=((1.0)*sj15*sj16);
IkReal x1723=((1.0)*cj16*sj15);
if( IKabs((((cj15*r22))+(((-1.0)*r21*x1723))+(((-1.0)*r20*x1722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r02))+(((-1.0)*r01*x1723))+(((-1.0)*r00*x1722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r22))+(((-1.0)*r21*x1723))+(((-1.0)*r20*x1722))))+IKsqr((((cj15*r02))+(((-1.0)*r01*x1723))+(((-1.0)*r00*x1722))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r22))+(((-1.0)*r21*x1723))+(((-1.0)*r20*x1722))), (((cj15*r02))+(((-1.0)*r01*x1723))+(((-1.0)*r00*x1722))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1724=IKsin(j13);
IkReal x1725=IKcos(j13);
IkReal x1726=((0.01)*cj15);
IkReal x1727=(cj16*r21);
IkReal x1728=(r22*sj15);
IkReal x1729=((1.0)*cj15);
IkReal x1730=(r00*sj16);
IkReal x1731=((1.0)*cj14);
IkReal x1732=(r20*sj16);
IkReal x1733=(cj16*r01);
IkReal x1734=(sj14*sj16);
IkReal x1735=(r02*sj15);
IkReal x1736=((1.0)*cj16*sj14);
evalcond[0]=((((-1.0)*r22*x1729))+x1724+((sj15*x1732))+((sj15*x1727)));
evalcond[1]=(x1725+((sj15*x1733))+((sj15*x1730))+(((-1.0)*r02*x1729)));
evalcond[2]=((0.069)+((x1726*x1727))+((x1726*x1732))+(((-1.0)*pz))+(((0.37429)*x1724))+(((0.01)*x1728)));
evalcond[3]=((0.36442)+((x1726*x1730))+((x1726*x1733))+(((-1.0)*px))+(((0.37429)*x1725))+(((0.01)*x1735)));
evalcond[4]=((((-1.0)*x1728*x1731))+x1725+((r21*x1734))+(((-1.0)*cj14*x1729*x1732))+(((-1.0)*cj14*x1727*x1729))+(((-1.0)*r20*x1736)));
evalcond[5]=((((-1.0)*x1731*x1735))+((r01*x1734))+(((-1.0)*r00*x1736))+(((-1.0)*cj14*x1729*x1733))+(((-1.0)*cj14*x1729*x1730))+(((-1.0)*x1724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1737=(sj15*sj16);
IkReal x1738=(cj16*sj15);
if( IKabs((((r21*x1738))+(((-1.0)*cj15*r22))+((r20*x1737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r02))+(((-1.0)*r01*x1738))+(((-1.0)*r00*x1737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x1738))+(((-1.0)*cj15*r22))+((r20*x1737))))+IKsqr((((cj15*r02))+(((-1.0)*r01*x1738))+(((-1.0)*r00*x1737))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r21*x1738))+(((-1.0)*cj15*r22))+((r20*x1737))), (((cj15*r02))+(((-1.0)*r01*x1738))+(((-1.0)*r00*x1737))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1739=IKsin(j13);
IkReal x1740=IKcos(j13);
IkReal x1741=((0.01)*cj15);
IkReal x1742=(cj16*r21);
IkReal x1743=(r22*sj15);
IkReal x1744=((1.0)*cj15);
IkReal x1745=(r00*sj16);
IkReal x1746=((1.0)*cj14);
IkReal x1747=(r20*sj16);
IkReal x1748=(cj16*r01);
IkReal x1749=(sj14*sj16);
IkReal x1750=(r02*sj15);
IkReal x1751=((1.0)*x1739);
IkReal x1752=((1.0)*cj16*sj14);
evalcond[0]=(((sj15*x1745))+((sj15*x1748))+x1740+(((-1.0)*r02*x1744)));
evalcond[1]=(((sj15*x1742))+((sj15*x1747))+(((-1.0)*r22*x1744))+(((-1.0)*x1751)));
evalcond[2]=((-0.069)+(((-0.37429)*x1739))+(((-1.0)*pz))+(((0.01)*x1743))+((x1741*x1747))+((x1741*x1742)));
evalcond[3]=((0.36442)+(((0.37429)*x1740))+(((-1.0)*px))+(((0.01)*x1750))+((x1741*x1748))+((x1741*x1745)));
evalcond[4]=((((-1.0)*cj14*x1742*x1744))+((r21*x1749))+(((-1.0)*x1740))+(((-1.0)*r20*x1752))+(((-1.0)*cj14*x1744*x1747))+(((-1.0)*x1743*x1746)));
evalcond[5]=((((-1.0)*x1746*x1750))+(((-1.0)*x1751))+(((-1.0)*r00*x1752))+((r01*x1749))+(((-1.0)*cj14*x1744*x1748))+(((-1.0)*cj14*x1744*x1745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1753=((1.0)*sj15);
if( IKabs((((cj15*r12))+(((-1.0)*cj16*r11*x1753))+(((-1.0)*r10*sj16*x1753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj16*x1753))+((cj15*r02))+(((-1.0)*cj16*r01*x1753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r12))+(((-1.0)*cj16*r11*x1753))+(((-1.0)*r10*sj16*x1753))))+IKsqr(((((-1.0)*r00*sj16*x1753))+((cj15*r02))+(((-1.0)*cj16*r01*x1753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r12))+(((-1.0)*cj16*r11*x1753))+(((-1.0)*r10*sj16*x1753))), ((((-1.0)*r00*sj16*x1753))+((cj15*r02))+(((-1.0)*cj16*r01*x1753))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1754=IKcos(j13);
IkReal x1755=IKsin(j13);
IkReal x1756=(r12*sj15);
IkReal x1757=((1.0)*cj14);
IkReal x1758=(sj15*sj16);
IkReal x1759=(r02*sj15);
IkReal x1760=(sj14*sj16);
IkReal x1761=((0.01)*cj15);
IkReal x1762=(r00*sj16);
IkReal x1763=(cj16*r11);
IkReal x1764=(cj16*r01);
IkReal x1765=((1.0)*cj15);
IkReal x1766=(r10*sj16);
IkReal x1767=((1.0)*cj16*sj14);
evalcond[0]=(x1755+((sj15*x1763))+(((-1.0)*r12*x1765))+((r10*x1758)));
evalcond[1]=(x1754+(((-1.0)*r02*x1765))+((sj15*x1764))+((r00*x1758)));
evalcond[2]=((0.36442)+(((0.37429)*x1754))+(((-1.0)*px))+(((0.01)*x1759))+((x1761*x1762))+((x1761*x1764)));
evalcond[3]=((0.069)+(((0.37429)*x1755))+(((-1.0)*py))+(((0.01)*x1756))+((x1761*x1763))+((x1761*x1766)));
evalcond[4]=((((-1.0)*x1756*x1757))+x1754+(((-1.0)*cj15*x1757*x1763))+(((-1.0)*cj15*x1757*x1766))+((r11*x1760))+(((-1.0)*r10*x1767)));
evalcond[5]=((((-1.0)*r00*x1767))+(((-1.0)*x1757*x1759))+((r01*x1760))+(((-1.0)*cj15*x1757*x1764))+(((-1.0)*cj15*x1757*x1762))+(((-1.0)*x1755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1768=((1.0)*sj15);
if( IKabs((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj16*r01*x1768))+((cj15*r02))+(((-1.0)*r00*sj16*x1768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))))+IKsqr(((((-1.0)*cj16*r01*x1768))+((cj15*r02))+(((-1.0)*r00*sj16*x1768))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r10*sj15*sj16))+((cj16*r11*sj15))+(((-1.0)*cj15*r12))), ((((-1.0)*cj16*r01*x1768))+((cj15*r02))+(((-1.0)*r00*sj16*x1768))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1769=IKcos(j13);
IkReal x1770=IKsin(j13);
IkReal x1771=(r12*sj15);
IkReal x1772=((1.0)*cj14);
IkReal x1773=(sj15*sj16);
IkReal x1774=(r02*sj15);
IkReal x1775=(sj14*sj16);
IkReal x1776=((0.01)*cj15);
IkReal x1777=(r00*sj16);
IkReal x1778=(cj15*cj16);
IkReal x1779=(cj16*r01);
IkReal x1780=((1.0)*cj15);
IkReal x1781=(cj16*r11);
IkReal x1782=(r10*sj16);
IkReal x1783=((1.0)*x1770);
IkReal x1784=((1.0)*cj16*sj14);
evalcond[0]=(x1769+((r00*x1773))+(((-1.0)*r02*x1780))+((sj15*x1779)));
evalcond[1]=((((-1.0)*x1783))+(((-1.0)*r12*x1780))+((sj15*x1781))+((r10*x1773)));
evalcond[2]=((0.36442)+((x1776*x1777))+((x1776*x1779))+(((0.01)*x1774))+(((-1.0)*px))+(((0.37429)*x1769)));
evalcond[3]=((-0.069)+(((0.01)*x1771))+(((-1.0)*py))+((x1776*x1781))+((x1776*x1782))+(((-0.37429)*x1770)));
evalcond[4]=((((-1.0)*cj15*x1772*x1782))+(((-1.0)*x1769))+(((-1.0)*r10*x1784))+((r11*x1775))+(((-1.0)*x1771*x1772))+(((-1.0)*r11*x1772*x1778)));
evalcond[5]=((((-1.0)*x1783))+(((-1.0)*r01*x1772*x1778))+(((-1.0)*x1772*x1774))+(((-1.0)*r00*x1784))+((r01*x1775))+(((-1.0)*cj15*x1772*x1777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1785=((1.0)*sj15);
CheckValue<IkReal> x1786=IKPowWithIntegerCheck(cj12,-1);
if(!x1786.valid){
continue;
}
if( IKabs(((x1786.value)*(((((-1.0)*r10*sj16*x1785))+((cj15*r12))+(((-1.0)*cj16*r11*x1785)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r02))+(((-1.0)*cj16*r01*x1785))+(((-1.0)*r00*sj16*x1785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1786.value)*(((((-1.0)*r10*sj16*x1785))+((cj15*r12))+(((-1.0)*cj16*r11*x1785))))))+IKsqr((((cj15*r02))+(((-1.0)*cj16*r01*x1785))+(((-1.0)*r00*sj16*x1785))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1786.value)*(((((-1.0)*r10*sj16*x1785))+((cj15*r12))+(((-1.0)*cj16*r11*x1785))))), (((cj15*r02))+(((-1.0)*cj16*r01*x1785))+(((-1.0)*r00*sj16*x1785))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1787=IKsin(j13);
IkReal x1788=IKcos(j13);
IkReal x1789=(r12*sj15);
IkReal x1790=((1.0)*cj14);
IkReal x1791=(sj15*sj16);
IkReal x1792=(cj15*cj16);
IkReal x1793=(r22*sj15);
IkReal x1794=((1.0)*cj15);
IkReal x1795=(sj14*sj16);
IkReal x1796=(r02*sj15);
IkReal x1797=(cj16*sj15);
IkReal x1798=(cj15*sj16);
IkReal x1799=(sj12*x1787);
IkReal x1800=(cj12*x1787);
IkReal x1801=((1.0)*cj16*sj14);
IkReal x1802=((0.01)*x1798);
evalcond[0]=(((r00*x1791))+x1788+(((-1.0)*r02*x1794))+((r01*x1797)));
evalcond[1]=((((-1.0)*r22*x1794))+((r21*x1797))+x1799+((r20*x1791)));
evalcond[2]=(((r10*x1791))+(((-1.0)*r12*x1794))+x1800+((r11*x1797)));
evalcond[3]=((0.36442)+(((-1.0)*px))+(((0.01)*r01*x1792))+((r00*x1802))+(((0.37429)*x1788))+(((0.01)*x1796)));
evalcond[4]=((((-1.0)*pz))+(((0.069)*sj12))+(((0.01)*r21*x1792))+(((0.37429)*x1799))+(((0.01)*x1793))+((r20*x1802)));
evalcond[5]=((((0.069)*cj12))+(((-1.0)*py))+(((0.01)*r11*x1792))+(((0.37429)*x1800))+(((0.01)*x1789))+((r10*x1802)));
evalcond[6]=(((sj12*x1788))+(((-1.0)*r20*x1801))+(((-1.0)*r20*x1790*x1798))+(((-1.0)*x1790*x1793))+((r21*x1795))+(((-1.0)*r21*x1790*x1792)));
evalcond[7]=((((-1.0)*r10*x1801))+(((-1.0)*r10*x1790*x1798))+(((-1.0)*x1789*x1790))+((cj12*x1788))+(((-1.0)*r11*x1790*x1792))+((r11*x1795)));
evalcond[8]=((((-1.0)*r00*x1801))+(((-1.0)*r01*x1790*x1792))+(((-1.0)*x1790*x1796))+(((-1.0)*x1787))+(((-1.0)*r00*x1790*x1798))+((r01*x1795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1803=((1.0)*sj15*sj16);
IkReal x1804=((1.0)*cj16*sj15);
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(sj12,-1);
if(!x1805.valid){
continue;
}
if( IKabs(((x1805.value)*(((((-1.0)*r20*x1803))+(((-1.0)*r21*x1804))+((cj15*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1803))+(((-1.0)*r01*x1804))+((cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1805.value)*(((((-1.0)*r20*x1803))+(((-1.0)*r21*x1804))+((cj15*r22))))))+IKsqr(((((-1.0)*r00*x1803))+(((-1.0)*r01*x1804))+((cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1805.value)*(((((-1.0)*r20*x1803))+(((-1.0)*r21*x1804))+((cj15*r22))))), ((((-1.0)*r00*x1803))+(((-1.0)*r01*x1804))+((cj15*r02))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1806=IKsin(j13);
IkReal x1807=IKcos(j13);
IkReal x1808=(r12*sj15);
IkReal x1809=((1.0)*cj14);
IkReal x1810=(sj15*sj16);
IkReal x1811=(cj15*cj16);
IkReal x1812=(r22*sj15);
IkReal x1813=((1.0)*cj15);
IkReal x1814=(sj14*sj16);
IkReal x1815=(r02*sj15);
IkReal x1816=(cj16*sj15);
IkReal x1817=(cj15*sj16);
IkReal x1818=(sj12*x1806);
IkReal x1819=(cj12*x1806);
IkReal x1820=((1.0)*cj16*sj14);
IkReal x1821=((0.01)*x1817);
evalcond[0]=((((-1.0)*r02*x1813))+((r01*x1816))+x1807+((r00*x1810)));
evalcond[1]=(((r20*x1810))+x1818+((r21*x1816))+(((-1.0)*r22*x1813)));
evalcond[2]=((((-1.0)*r12*x1813))+x1819+((r11*x1816))+((r10*x1810)));
evalcond[3]=((0.36442)+(((0.01)*x1815))+((r00*x1821))+(((-1.0)*px))+(((0.01)*r01*x1811))+(((0.37429)*x1807)));
evalcond[4]=((((0.01)*x1812))+(((0.37429)*x1818))+(((0.01)*r21*x1811))+(((-1.0)*pz))+(((0.069)*sj12))+((r20*x1821)));
evalcond[5]=(((r10*x1821))+(((0.37429)*x1819))+(((0.069)*cj12))+(((-1.0)*py))+(((0.01)*r11*x1811))+(((0.01)*x1808)));
evalcond[6]=(((sj12*x1807))+(((-1.0)*r21*x1809*x1811))+(((-1.0)*r20*x1809*x1817))+(((-1.0)*x1809*x1812))+((r21*x1814))+(((-1.0)*r20*x1820)));
evalcond[7]=((((-1.0)*r11*x1809*x1811))+(((-1.0)*r10*x1809*x1817))+(((-1.0)*x1808*x1809))+((cj12*x1807))+((r11*x1814))+(((-1.0)*r10*x1820)));
evalcond[8]=((((-1.0)*x1809*x1815))+(((-1.0)*r00*x1820))+(((-1.0)*r00*x1809*x1817))+((r01*x1814))+(((-1.0)*r01*x1809*x1811))+(((-1.0)*x1806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j13eval[0]=sj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1822=(sj15*sj16);
IkReal x1823=(cj16*sj15);
IkReal x1824=((1.0)*cj15);
if( IKabs((((r10*x1822))+(((-1.0)*r12*x1824))+((r11*x1823)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1822))+((r01*x1823))+(((-1.0)*r02*x1824)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1822))+(((-1.0)*r12*x1824))+((r11*x1823))))+IKsqr((((r00*x1822))+((r01*x1823))+(((-1.0)*r02*x1824))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r10*x1822))+(((-1.0)*r12*x1824))+((r11*x1823))), (((r00*x1822))+((r01*x1823))+(((-1.0)*r02*x1824))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1825=IKcos(j13);
IkReal x1826=IKsin(j13);
IkReal x1827=(r12*sj15);
IkReal x1828=((1.0)*cj14);
IkReal x1829=(sj15*sj16);
IkReal x1830=(r02*sj15);
IkReal x1831=(sj14*sj16);
IkReal x1832=((0.01)*cj15);
IkReal x1833=(r00*sj16);
IkReal x1834=(cj15*cj16);
IkReal x1835=(cj16*r01);
IkReal x1836=((1.0)*cj15);
IkReal x1837=(cj16*r11);
IkReal x1838=(r10*sj16);
IkReal x1839=((1.0)*x1825);
IkReal x1840=((1.0)*cj16*sj14);
evalcond[0]=(((r10*x1829))+(((-1.0)*x1826))+((sj15*x1837))+(((-1.0)*r12*x1836)));
evalcond[1]=(((r00*x1829))+(((-1.0)*x1839))+((sj15*x1835))+(((-1.0)*r02*x1836)));
evalcond[2]=((-0.36442)+(((0.01)*x1830))+(((-1.0)*px))+((x1832*x1835))+((x1832*x1833))+(((-0.37429)*x1825)));
evalcond[3]=((-0.069)+(((0.01)*x1827))+(((-1.0)*py))+((x1832*x1838))+((x1832*x1837))+(((-0.37429)*x1826)));
evalcond[4]=(((r01*x1831))+(((-1.0)*r01*x1828*x1834))+(((-1.0)*r00*x1840))+(((-1.0)*x1828*x1830))+(((-1.0)*cj15*x1828*x1833))+x1826);
evalcond[5]=((((-1.0)*x1839))+(((-1.0)*r10*x1840))+(((-1.0)*r11*x1828*x1834))+(((-1.0)*x1827*x1828))+((r11*x1831))+(((-1.0)*cj15*x1828*x1838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1841=(cj16*sj15);
IkReal x1842=(sj15*sj16);
if( IKabs(((((-1.0)*r10*x1842))+((cj15*r12))+(((-1.0)*r11*x1841)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1842))+((r01*x1841))+(((-1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1842))+((cj15*r12))+(((-1.0)*r11*x1841))))+IKsqr((((r00*x1842))+((r01*x1841))+(((-1.0)*cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r10*x1842))+((cj15*r12))+(((-1.0)*r11*x1841))), (((r00*x1842))+((r01*x1841))+(((-1.0)*cj15*r02))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1843=IKcos(j13);
IkReal x1844=IKsin(j13);
IkReal x1845=(r12*sj15);
IkReal x1846=((1.0)*cj14);
IkReal x1847=(sj15*sj16);
IkReal x1848=(r02*sj15);
IkReal x1849=(sj14*sj16);
IkReal x1850=((0.01)*cj15);
IkReal x1851=(r00*sj16);
IkReal x1852=(cj16*r11);
IkReal x1853=(cj16*r01);
IkReal x1854=((1.0)*cj15);
IkReal x1855=(r10*sj16);
IkReal x1856=((1.0)*cj16*sj14);
evalcond[0]=(((r10*x1847))+x1844+(((-1.0)*r12*x1854))+((sj15*x1852)));
evalcond[1]=(((r00*x1847))+(((-1.0)*r02*x1854))+(((-1.0)*x1843))+((sj15*x1853)));
evalcond[2]=((-0.36442)+((x1850*x1853))+((x1850*x1851))+(((0.01)*x1848))+(((-0.37429)*x1843))+(((-1.0)*px)));
evalcond[3]=((0.069)+((x1850*x1855))+((x1850*x1852))+(((0.01)*x1845))+(((-1.0)*py))+(((0.37429)*x1844)));
evalcond[4]=((((-1.0)*cj15*x1846*x1855))+(((-1.0)*cj15*x1846*x1852))+x1843+(((-1.0)*x1845*x1846))+(((-1.0)*r10*x1856))+((r11*x1849)));
evalcond[5]=((((-1.0)*cj15*x1846*x1853))+(((-1.0)*cj15*x1846*x1851))+(((-1.0)*r00*x1856))+((r01*x1849))+x1844+(((-1.0)*x1846*x1848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1857=(sj15*sj16);
IkReal x1858=(cj16*sj15);
if( IKabs((((cj15*r22))+(((-1.0)*r20*x1857))+(((-1.0)*r21*x1858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1858))+((r00*x1857))+(((-1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r22))+(((-1.0)*r20*x1857))+(((-1.0)*r21*x1858))))+IKsqr((((r01*x1858))+((r00*x1857))+(((-1.0)*cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r22))+(((-1.0)*r20*x1857))+(((-1.0)*r21*x1858))), (((r01*x1858))+((r00*x1857))+(((-1.0)*cj15*r02))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1859=IKsin(j13);
IkReal x1860=IKcos(j13);
IkReal x1861=((0.01)*cj15);
IkReal x1862=(cj16*r21);
IkReal x1863=(r22*sj15);
IkReal x1864=((1.0)*cj15);
IkReal x1865=(r00*sj16);
IkReal x1866=((1.0)*cj14);
IkReal x1867=(r20*sj16);
IkReal x1868=(cj16*r01);
IkReal x1869=(sj14*sj16);
IkReal x1870=(r02*sj15);
IkReal x1871=((1.0)*cj16*sj14);
evalcond[0]=(((sj15*x1862))+((sj15*x1867))+x1859+(((-1.0)*r22*x1864)));
evalcond[1]=((((-1.0)*r02*x1864))+((sj15*x1868))+((sj15*x1865))+(((-1.0)*x1860)));
evalcond[2]=((0.069)+(((0.37429)*x1859))+(((0.01)*x1863))+(((-1.0)*pz))+((x1861*x1862))+((x1861*x1867)));
evalcond[3]=((-0.36442)+(((-0.37429)*x1860))+(((0.01)*x1870))+(((-1.0)*px))+((x1861*x1868))+((x1861*x1865)));
evalcond[4]=((((-1.0)*cj14*x1862*x1864))+(((-1.0)*x1863*x1866))+x1860+(((-1.0)*r20*x1871))+(((-1.0)*cj14*x1864*x1867))+((r21*x1869)));
evalcond[5]=((((-1.0)*r00*x1871))+(((-1.0)*x1866*x1870))+x1859+(((-1.0)*cj14*x1864*x1865))+(((-1.0)*cj14*x1864*x1868))+((r01*x1869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1872=(sj15*sj16);
IkReal x1873=(cj16*sj15);
IkReal x1874=((1.0)*cj15);
if( IKabs(((((-1.0)*r22*x1874))+((r20*x1872))+((r21*x1873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1874))+((r01*x1873))+((r00*x1872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1874))+((r20*x1872))+((r21*x1873))))+IKsqr(((((-1.0)*r02*x1874))+((r01*x1873))+((r00*x1872))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r22*x1874))+((r20*x1872))+((r21*x1873))), ((((-1.0)*r02*x1874))+((r01*x1873))+((r00*x1872))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1875=IKsin(j13);
IkReal x1876=IKcos(j13);
IkReal x1877=((0.01)*cj15);
IkReal x1878=(cj16*r21);
IkReal x1879=(r22*sj15);
IkReal x1880=((1.0)*cj15);
IkReal x1881=(r00*sj16);
IkReal x1882=((1.0)*cj14);
IkReal x1883=(r20*sj16);
IkReal x1884=(cj16*r01);
IkReal x1885=(sj14*sj16);
IkReal x1886=(r02*sj15);
IkReal x1887=((1.0)*x1876);
IkReal x1888=((1.0)*cj16*sj14);
evalcond[0]=(((sj15*x1878))+(((-1.0)*r22*x1880))+(((-1.0)*x1875))+((sj15*x1883)));
evalcond[1]=((((-1.0)*r02*x1880))+(((-1.0)*x1887))+((sj15*x1881))+((sj15*x1884)));
evalcond[2]=((-0.069)+((x1877*x1883))+((x1877*x1878))+(((0.01)*x1879))+(((-0.37429)*x1875))+(((-1.0)*pz)));
evalcond[3]=((-0.36442)+((x1877*x1884))+((x1877*x1881))+(((-0.37429)*x1876))+(((-1.0)*px))+(((0.01)*x1886)));
evalcond[4]=((((-1.0)*x1882*x1886))+((r01*x1885))+x1875+(((-1.0)*r00*x1888))+(((-1.0)*cj14*x1880*x1884))+(((-1.0)*cj14*x1880*x1881)));
evalcond[5]=(((r21*x1885))+(((-1.0)*x1879*x1882))+(((-1.0)*r20*x1888))+(((-1.0)*x1887))+(((-1.0)*cj14*x1880*x1883))+(((-1.0)*cj14*x1878*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1889=(sj15*sj16);
IkReal x1890=(cj16*sj15);
CheckValue<IkReal> x1891=IKPowWithIntegerCheck(sj12,-1);
if(!x1891.valid){
continue;
}
if( IKabs(((x1891.value)*(((((-1.0)*r20*x1889))+((cj15*r22))+(((-1.0)*r21*x1890)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1890))+((r00*x1889))+(((-1.0)*cj15*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1891.value)*(((((-1.0)*r20*x1889))+((cj15*r22))+(((-1.0)*r21*x1890))))))+IKsqr((((r01*x1890))+((r00*x1889))+(((-1.0)*cj15*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1891.value)*(((((-1.0)*r20*x1889))+((cj15*r22))+(((-1.0)*r21*x1890))))), (((r01*x1890))+((r00*x1889))+(((-1.0)*cj15*r02))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1892=IKsin(j13);
IkReal x1893=IKcos(j13);
IkReal x1894=(r12*sj15);
IkReal x1895=((1.0)*cj14);
IkReal x1896=(sj15*sj16);
IkReal x1897=(cj15*cj16);
IkReal x1898=(r22*sj15);
IkReal x1899=((1.0)*cj15);
IkReal x1900=(sj14*sj16);
IkReal x1901=(cj16*sj15);
IkReal x1902=(cj15*sj16);
IkReal x1903=(r02*sj15);
IkReal x1904=(sj12*x1892);
IkReal x1905=((1.0)*cj16*sj14);
IkReal x1906=(cj12*x1892);
IkReal x1907=((1.0)*x1893);
IkReal x1908=((0.01)*x1902);
evalcond[0]=(((r20*x1896))+((r21*x1901))+(((-1.0)*r22*x1899))+x1904);
evalcond[1]=((((-1.0)*r02*x1899))+((r01*x1901))+((r00*x1896))+(((-1.0)*x1907)));
evalcond[2]=(((r10*x1896))+(((-1.0)*x1906))+(((-1.0)*r12*x1899))+((r11*x1901)));
evalcond[3]=((-0.36442)+((r00*x1908))+(((-1.0)*px))+(((0.01)*r01*x1897))+(((-0.37429)*x1893))+(((0.01)*x1903)));
evalcond[4]=((((0.01)*x1898))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.01)*r21*x1897))+((r20*x1908))+(((0.37429)*x1904)));
evalcond[5]=((((0.01)*r11*x1897))+(((0.01)*x1894))+(((-1.0)*py))+(((-0.37429)*x1906))+(((-0.069)*cj12))+((r10*x1908)));
evalcond[6]=(((r01*x1900))+(((-1.0)*r00*x1895*x1902))+(((-1.0)*r01*x1895*x1897))+x1892+(((-1.0)*x1895*x1903))+(((-1.0)*r00*x1905)));
evalcond[7]=(((sj12*x1893))+((r21*x1900))+(((-1.0)*r20*x1895*x1902))+(((-1.0)*x1895*x1898))+(((-1.0)*r20*x1905))+(((-1.0)*r21*x1895*x1897)));
evalcond[8]=((((-1.0)*r10*x1895*x1902))+(((-1.0)*r10*x1905))+(((-1.0)*x1894*x1895))+(((-1.0)*r11*x1895*x1897))+((r11*x1900))+(((-1.0)*cj12*x1907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1909=(sj15*sj16);
IkReal x1910=(cj16*sj15);
IkReal x1911=((1.0)*cj15);
CheckValue<IkReal> x1912=IKPowWithIntegerCheck(cj12,-1);
if(!x1912.valid){
continue;
}
if( IKabs(((x1912.value)*(((((-1.0)*r12*x1911))+((r11*x1910))+((r10*x1909)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1911))+((r00*x1909))+((r01*x1910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1912.value)*(((((-1.0)*r12*x1911))+((r11*x1910))+((r10*x1909))))))+IKsqr(((((-1.0)*r02*x1911))+((r00*x1909))+((r01*x1910))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1912.value)*(((((-1.0)*r12*x1911))+((r11*x1910))+((r10*x1909))))), ((((-1.0)*r02*x1911))+((r00*x1909))+((r01*x1910))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1913=IKsin(j13);
IkReal x1914=IKcos(j13);
IkReal x1915=(r12*sj15);
IkReal x1916=((1.0)*cj14);
IkReal x1917=(sj15*sj16);
IkReal x1918=(cj15*cj16);
IkReal x1919=(r22*sj15);
IkReal x1920=((1.0)*cj15);
IkReal x1921=(sj14*sj16);
IkReal x1922=(cj16*sj15);
IkReal x1923=(cj15*sj16);
IkReal x1924=(r02*sj15);
IkReal x1925=(sj12*x1913);
IkReal x1926=((1.0)*cj16*sj14);
IkReal x1927=(cj12*x1913);
IkReal x1928=((1.0)*x1914);
IkReal x1929=((0.01)*x1923);
evalcond[0]=((((-1.0)*r22*x1920))+x1925+((r20*x1917))+((r21*x1922)));
evalcond[1]=(((r01*x1922))+((r00*x1917))+(((-1.0)*x1928))+(((-1.0)*r02*x1920)));
evalcond[2]=(((r10*x1917))+(((-1.0)*r12*x1920))+(((-1.0)*x1927))+((r11*x1922)));
evalcond[3]=((-0.36442)+((r00*x1929))+(((0.01)*r01*x1918))+(((-1.0)*px))+(((0.01)*x1924))+(((-0.37429)*x1914)));
evalcond[4]=((((0.37429)*x1925))+((r20*x1929))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.01)*x1919))+(((0.01)*r21*x1918)));
evalcond[5]=((((-0.37429)*x1927))+(((-1.0)*py))+(((-0.069)*cj12))+(((0.01)*r11*x1918))+(((0.01)*x1915))+((r10*x1929)));
evalcond[6]=(((r01*x1921))+(((-1.0)*x1916*x1924))+(((-1.0)*r00*x1926))+x1913+(((-1.0)*r01*x1916*x1918))+(((-1.0)*r00*x1916*x1923)));
evalcond[7]=((((-1.0)*r20*x1916*x1923))+((sj12*x1914))+(((-1.0)*r20*x1926))+(((-1.0)*r21*x1916*x1918))+(((-1.0)*x1916*x1919))+((r21*x1921)));
evalcond[8]=((((-1.0)*r10*x1916*x1923))+(((-1.0)*r11*x1916*x1918))+(((-1.0)*x1915*x1916))+(((-1.0)*cj12*x1928))+((r11*x1921))+(((-1.0)*r10*x1926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j13eval[0]=sj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j13eval[0]=cj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1930=((1.0)*sj15*sj16);
IkReal x1931=((1.0)*cj16*sj15);
CheckValue<IkReal> x1932=IKPowWithIntegerCheck(cj11,-1);
if(!x1932.valid){
continue;
}
if( IKabs((((cj15*r22))+(((-1.0)*r20*x1930))+(((-1.0)*r21*x1931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1932.value)*(((((-1.0)*r01*x1931))+((cj15*r02))+(((-1.0)*r00*x1930)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r22))+(((-1.0)*r20*x1930))+(((-1.0)*r21*x1931))))+IKsqr(((x1932.value)*(((((-1.0)*r01*x1931))+((cj15*r02))+(((-1.0)*r00*x1930))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*r22))+(((-1.0)*r20*x1930))+(((-1.0)*r21*x1931))), ((x1932.value)*(((((-1.0)*r01*x1931))+((cj15*r02))+(((-1.0)*r00*x1930))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1933=IKcos(j13);
IkReal x1934=IKsin(j13);
IkReal x1935=(r12*sj15);
IkReal x1936=((1.0)*cj14);
IkReal x1937=(sj15*sj16);
IkReal x1938=(cj15*cj16);
IkReal x1939=(r22*sj15);
IkReal x1940=((1.0)*cj15);
IkReal x1941=(sj14*sj16);
IkReal x1942=(r02*sj15);
IkReal x1943=(cj16*sj15);
IkReal x1944=(cj15*sj16);
IkReal x1945=((1.0)*cj16*sj14);
IkReal x1946=((1.0)*x1934);
IkReal x1947=((0.01)*x1944);
IkReal x1948=((0.37429)*x1933);
evalcond[0]=((((-1.0)*r22*x1940))+x1934+((r21*x1943))+((r20*x1937)));
evalcond[1]=(((sj11*x1933))+((r11*x1943))+(((-1.0)*r12*x1940))+((r10*x1937)));
evalcond[2]=(((cj11*x1933))+((r00*x1937))+(((-1.0)*r02*x1940))+((r01*x1943)));
evalcond[3]=((0.069)+((r20*x1947))+(((-1.0)*pz))+(((0.01)*r21*x1938))+(((0.37429)*x1934))+(((0.01)*x1939)));
evalcond[4]=((((0.01)*r01*x1938))+(((0.36442)*cj11))+((cj11*x1948))+(((-1.0)*px))+((r00*x1947))+(((0.01)*x1942)));
evalcond[5]=(((r10*x1947))+(((-1.0)*py))+(((0.01)*r11*x1938))+(((0.36442)*sj11))+((sj11*x1948))+(((0.01)*x1935)));
evalcond[6]=((((-1.0)*r21*x1936*x1938))+(((-1.0)*r20*x1936*x1944))+x1933+((r21*x1941))+(((-1.0)*x1936*x1939))+(((-1.0)*r20*x1945)));
evalcond[7]=((((-1.0)*sj11*x1946))+((r11*x1941))+(((-1.0)*r10*x1936*x1944))+(((-1.0)*r11*x1936*x1938))+(((-1.0)*r10*x1945))+(((-1.0)*x1935*x1936)));
evalcond[8]=((((-1.0)*cj11*x1946))+(((-1.0)*r01*x1936*x1938))+(((-1.0)*r00*x1936*x1944))+(((-1.0)*r00*x1945))+((r01*x1941))+(((-1.0)*x1936*x1942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1949=((1.0)*sj15);
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(sj11,-1);
if(!x1950.valid){
continue;
}
if( IKabs(((((-1.0)*cj16*r21*x1949))+((cj15*r22))+(((-1.0)*r20*sj16*x1949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1950.value)*(((((-1.0)*cj16*r11*x1949))+((cj15*r12))+(((-1.0)*r10*sj16*x1949)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*r21*x1949))+((cj15*r22))+(((-1.0)*r20*sj16*x1949))))+IKsqr(((x1950.value)*(((((-1.0)*cj16*r11*x1949))+((cj15*r12))+(((-1.0)*r10*sj16*x1949))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*cj16*r21*x1949))+((cj15*r22))+(((-1.0)*r20*sj16*x1949))), ((x1950.value)*(((((-1.0)*cj16*r11*x1949))+((cj15*r12))+(((-1.0)*r10*sj16*x1949))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1951=IKcos(j13);
IkReal x1952=IKsin(j13);
IkReal x1953=(r12*sj15);
IkReal x1954=((1.0)*cj14);
IkReal x1955=(sj15*sj16);
IkReal x1956=(cj15*cj16);
IkReal x1957=(r22*sj15);
IkReal x1958=((1.0)*cj15);
IkReal x1959=(sj14*sj16);
IkReal x1960=(r02*sj15);
IkReal x1961=(cj16*sj15);
IkReal x1962=(cj15*sj16);
IkReal x1963=((1.0)*cj16*sj14);
IkReal x1964=((1.0)*x1952);
IkReal x1965=((0.01)*x1962);
IkReal x1966=((0.37429)*x1951);
evalcond[0]=((((-1.0)*r22*x1958))+((r20*x1955))+((r21*x1961))+x1952);
evalcond[1]=(((r11*x1961))+((r10*x1955))+(((-1.0)*r12*x1958))+((sj11*x1951)));
evalcond[2]=((((-1.0)*r02*x1958))+((cj11*x1951))+((r01*x1961))+((r00*x1955)));
evalcond[3]=((0.069)+((r20*x1965))+(((-1.0)*pz))+(((0.01)*r21*x1956))+(((0.37429)*x1952))+(((0.01)*x1957)));
evalcond[4]=((((0.01)*r01*x1956))+(((0.36442)*cj11))+((r00*x1965))+(((-1.0)*px))+((cj11*x1966))+(((0.01)*x1960)));
evalcond[5]=(((r10*x1965))+(((-1.0)*py))+(((0.36442)*sj11))+(((0.01)*x1953))+((sj11*x1966))+(((0.01)*r11*x1956)));
evalcond[6]=((((-1.0)*x1954*x1957))+(((-1.0)*r21*x1954*x1956))+((r21*x1959))+x1951+(((-1.0)*r20*x1954*x1962))+(((-1.0)*r20*x1963)));
evalcond[7]=((((-1.0)*r10*x1954*x1962))+((r11*x1959))+(((-1.0)*r10*x1963))+(((-1.0)*x1953*x1954))+(((-1.0)*sj11*x1964))+(((-1.0)*r11*x1954*x1956)));
evalcond[8]=((((-1.0)*r01*x1954*x1956))+(((-1.0)*cj11*x1964))+(((-1.0)*r00*x1963))+(((-1.0)*r00*x1954*x1962))+((r01*x1959))+(((-1.0)*x1954*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j13eval[0]=sj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j13eval[0]=cj11;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1967=(sj15*sj16);
IkReal x1968=(cj16*sj15);
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(cj11,-1);
if(!x1969.valid){
continue;
}
if( IKabs((((r20*x1967))+(((-1.0)*cj15*r22))+((r21*x1968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1969.value)*((((cj15*r02))+(((-1.0)*r00*x1967))+(((-1.0)*r01*x1968)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1967))+(((-1.0)*cj15*r22))+((r21*x1968))))+IKsqr(((x1969.value)*((((cj15*r02))+(((-1.0)*r00*x1967))+(((-1.0)*r01*x1968))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r20*x1967))+(((-1.0)*cj15*r22))+((r21*x1968))), ((x1969.value)*((((cj15*r02))+(((-1.0)*r00*x1967))+(((-1.0)*r01*x1968))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1970=IKcos(j13);
IkReal x1971=IKsin(j13);
IkReal x1972=(r12*sj15);
IkReal x1973=((1.0)*cj14);
IkReal x1974=(sj15*sj16);
IkReal x1975=((0.01)*cj15);
IkReal x1976=(cj16*r21);
IkReal x1977=(r22*sj15);
IkReal x1978=((1.0)*cj15);
IkReal x1979=(sj14*sj16);
IkReal x1980=(r00*sj16);
IkReal x1981=(r02*sj15);
IkReal x1982=(r20*sj16);
IkReal x1983=(cj16*r01);
IkReal x1984=(cj16*r11);
IkReal x1985=(r10*sj16);
IkReal x1986=((1.0)*cj16*sj14);
IkReal x1987=((1.0)*x1971);
IkReal x1988=((0.37429)*x1970);
evalcond[0]=(((sj15*x1976))+(((-1.0)*x1987))+((r20*x1974))+(((-1.0)*r22*x1978)));
evalcond[1]=(((r10*x1974))+(((-1.0)*r12*x1978))+((sj11*x1970))+((sj15*x1984)));
evalcond[2]=((((-1.0)*r02*x1978))+((r00*x1974))+((cj11*x1970))+((sj15*x1983)));
evalcond[3]=((-0.069)+((x1975*x1982))+((x1975*x1976))+(((-0.37429)*x1971))+(((-1.0)*pz))+(((0.01)*x1977)));
evalcond[4]=(((x1975*x1980))+((x1975*x1983))+(((0.36442)*cj11))+((cj11*x1988))+(((-1.0)*px))+(((0.01)*x1981)));
evalcond[5]=(((x1975*x1985))+((x1975*x1984))+(((-1.0)*py))+(((0.36442)*sj11))+((sj11*x1988))+(((0.01)*x1972)));
evalcond[6]=((((-1.0)*cj15*x1973*x1976))+(((-1.0)*cj15*x1973*x1982))+(((-1.0)*x1973*x1977))+(((-1.0)*x1970))+((r21*x1979))+(((-1.0)*r20*x1986)));
evalcond[7]=((((-1.0)*sj11*x1987))+((r11*x1979))+(((-1.0)*cj15*x1973*x1985))+(((-1.0)*cj15*x1973*x1984))+(((-1.0)*r10*x1986))+(((-1.0)*x1972*x1973)));
evalcond[8]=((((-1.0)*x1973*x1981))+(((-1.0)*cj15*x1973*x1980))+(((-1.0)*cj15*x1973*x1983))+(((-1.0)*cj11*x1987))+((r01*x1979))+(((-1.0)*r00*x1986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1989=((1.0)*sj15);
CheckValue<IkReal> x1990=IKPowWithIntegerCheck(sj11,-1);
if(!x1990.valid){
continue;
}
if( IKabs((((cj16*r21*sj15))+((r20*sj15*sj16))+(((-1.0)*cj15*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1990.value)*((((cj15*r12))+(((-1.0)*cj16*r11*x1989))+(((-1.0)*r10*sj16*x1989)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj16*r21*sj15))+((r20*sj15*sj16))+(((-1.0)*cj15*r22))))+IKsqr(((x1990.value)*((((cj15*r12))+(((-1.0)*cj16*r11*x1989))+(((-1.0)*r10*sj16*x1989))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj16*r21*sj15))+((r20*sj15*sj16))+(((-1.0)*cj15*r22))), ((x1990.value)*((((cj15*r12))+(((-1.0)*cj16*r11*x1989))+(((-1.0)*r10*sj16*x1989))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x1991=IKcos(j13);
IkReal x1992=IKsin(j13);
IkReal x1993=(r12*sj15);
IkReal x1994=((1.0)*cj14);
IkReal x1995=(sj15*sj16);
IkReal x1996=((0.01)*cj15);
IkReal x1997=(cj16*r21);
IkReal x1998=(r22*sj15);
IkReal x1999=((1.0)*cj15);
IkReal x2000=(sj14*sj16);
IkReal x2001=(r00*sj16);
IkReal x2002=(r02*sj15);
IkReal x2003=(r20*sj16);
IkReal x2004=(cj16*r01);
IkReal x2005=(cj16*r11);
IkReal x2006=(r10*sj16);
IkReal x2007=((1.0)*cj16*sj14);
IkReal x2008=((1.0)*x1992);
IkReal x2009=((0.37429)*x1991);
evalcond[0]=(((sj15*x1997))+((r20*x1995))+(((-1.0)*x2008))+(((-1.0)*r22*x1999)));
evalcond[1]=(((r10*x1995))+((sj11*x1991))+((sj15*x2005))+(((-1.0)*r12*x1999)));
evalcond[2]=((((-1.0)*r02*x1999))+((cj11*x1991))+((r00*x1995))+((sj15*x2004)));
evalcond[3]=((-0.069)+((x1996*x1997))+(((0.01)*x1998))+(((-1.0)*pz))+((x1996*x2003))+(((-0.37429)*x1992)));
evalcond[4]=((((0.01)*x2002))+((cj11*x2009))+(((0.36442)*cj11))+(((-1.0)*px))+((x1996*x2004))+((x1996*x2001)));
evalcond[5]=((((0.01)*x1993))+(((-1.0)*py))+((sj11*x2009))+(((0.36442)*sj11))+((x1996*x2005))+((x1996*x2006)));
evalcond[6]=(((r21*x2000))+(((-1.0)*cj15*x1994*x2003))+(((-1.0)*cj15*x1994*x1997))+(((-1.0)*x1994*x1998))+(((-1.0)*x1991))+(((-1.0)*r20*x2007)));
evalcond[7]=((((-1.0)*x1993*x1994))+((r11*x2000))+(((-1.0)*cj15*x1994*x2006))+(((-1.0)*cj15*x1994*x2005))+(((-1.0)*r10*x2007))+(((-1.0)*sj11*x2008)));
evalcond[8]=((((-1.0)*cj15*x1994*x2001))+(((-1.0)*cj15*x1994*x2004))+(((-1.0)*cj11*x2008))+((r01*x2000))+(((-1.0)*x1994*x2002))+(((-1.0)*r00*x2007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x2015=IKPowWithIntegerCheck(sj12,-1);
if(!x2015.valid){
continue;
}
IkReal x2010=x2015.value;
IkReal x2011=(cj12*sj11);
IkReal x2012=(cj15*r22);
IkReal x2013=((1.0)*sj15*sj16);
IkReal x2014=((1.0)*cj16*sj15);
CheckValue<IkReal> x2016=IKPowWithIntegerCheck(cj11,-1);
if(!x2016.valid){
continue;
}
if( IKabs((x2010*(((((-1.0)*r20*x2013))+(((-1.0)*r21*x2014))+x2012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2010*(x2016.value)*(((((-1.0)*r00*sj12*x2013))+(((-1.0)*r01*sj12*x2014))+(((-1.0)*r20*x2011*x2013))+((x2011*x2012))+((cj15*r02*sj12))+(((-1.0)*r21*x2011*x2014)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2010*(((((-1.0)*r20*x2013))+(((-1.0)*r21*x2014))+x2012))))+IKsqr((x2010*(x2016.value)*(((((-1.0)*r00*sj12*x2013))+(((-1.0)*r01*sj12*x2014))+(((-1.0)*r20*x2011*x2013))+((x2011*x2012))+((cj15*r02*sj12))+(((-1.0)*r21*x2011*x2014))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((x2010*(((((-1.0)*r20*x2013))+(((-1.0)*r21*x2014))+x2012))), (x2010*(x2016.value)*(((((-1.0)*r00*sj12*x2013))+(((-1.0)*r01*sj12*x2014))+(((-1.0)*r20*x2011*x2013))+((x2011*x2012))+((cj15*r02*sj12))+(((-1.0)*r21*x2011*x2014))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x2017=IKsin(j13);
IkReal x2018=IKcos(j13);
IkReal x2019=(r12*sj15);
IkReal x2020=((1.0)*cj14);
IkReal x2021=((0.37429)*cj12);
IkReal x2022=(cj11*cj12);
IkReal x2023=(cj15*sj16);
IkReal x2024=(sj15*sj16);
IkReal x2025=(cj15*cj16);
IkReal x2026=(r22*sj15);
IkReal x2027=((1.0)*cj15);
IkReal x2028=(sj14*sj16);
IkReal x2029=((1.0)*cj12);
IkReal x2030=(r02*sj15);
IkReal x2031=(cj16*sj15);
IkReal x2032=(sj11*x2017);
IkReal x2033=(sj12*x2017);
IkReal x2034=((1.0)*cj16*sj14);
IkReal x2035=(cj11*x2018);
IkReal x2036=(sj11*x2018);
IkReal x2037=(cj11*x2017);
evalcond[0]=(((r21*x2031))+(((-1.0)*r22*x2027))+x2033+((r20*x2024)));
evalcond[1]=(((r10*x2024))+((x2017*x2022))+x2036+(((-1.0)*r12*x2027))+((r11*x2031)));
evalcond[2]=(((r00*x2024))+((r01*x2031))+x2035+(((-1.0)*r02*x2027))+(((-1.0)*x2029*x2032)));
evalcond[3]=((((0.01)*x2026))+(((0.01)*r20*x2023))+(((-1.0)*pz))+(((0.01)*r21*x2025))+(((0.069)*sj12))+(((0.37429)*x2033)));
evalcond[4]=((((-1.0)*r21*x2020*x2025))+(((-1.0)*r20*x2020*x2023))+((sj12*x2018))+(((-1.0)*x2020*x2026))+(((-1.0)*r20*x2034))+((r21*x2028)));
evalcond[5]=((((0.01)*x2030))+(((0.36442)*cj11))+(((-1.0)*px))+(((0.01)*r00*x2023))+(((-0.069)*cj12*sj11))+(((0.01)*r01*x2025))+(((0.37429)*x2035))+(((-1.0)*x2021*x2032)));
evalcond[6]=((((0.01)*r10*x2023))+(((0.01)*x2019))+(((-1.0)*py))+(((0.069)*x2022))+(((0.37429)*x2036))+(((0.36442)*sj11))+((x2021*x2037))+(((0.01)*r11*x2025)));
evalcond[7]=((((-1.0)*r11*x2020*x2025))+((r11*x2028))+((x2018*x2022))+(((-1.0)*r10*x2034))+(((-1.0)*x2019*x2020))+(((-1.0)*x2032))+(((-1.0)*r10*x2020*x2023)));
evalcond[8]=(((r01*x2028))+(((-1.0)*x2020*x2030))+(((-1.0)*r00*x2034))+(((-1.0)*r00*x2020*x2023))+(((-1.0)*x2029*x2036))+(((-1.0)*x2037))+(((-1.0)*r01*x2020*x2025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
CheckValue<IkReal> x2043=IKPowWithIntegerCheck(sj12,-1);
if(!x2043.valid){
continue;
}
IkReal x2038=x2043.value;
IkReal x2039=(cj11*cj12);
IkReal x2040=(cj16*sj15);
IkReal x2041=(cj15*r22);
IkReal x2042=((1.0)*sj15*sj16);
CheckValue<IkReal> x2044=IKPowWithIntegerCheck(sj11,-1);
if(!x2044.valid){
continue;
}
if( IKabs((x2038*(((((-1.0)*r21*x2040))+x2041+(((-1.0)*r20*x2042)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2038*(x2044.value)*((((r21*x2039*x2040))+(((-1.0)*x2039*x2041))+(((-1.0)*r10*sj12*x2042))+((cj15*r12*sj12))+((r20*sj15*sj16*x2039))+(((-1.0)*r11*sj12*x2040)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2038*(((((-1.0)*r21*x2040))+x2041+(((-1.0)*r20*x2042))))))+IKsqr((x2038*(x2044.value)*((((r21*x2039*x2040))+(((-1.0)*x2039*x2041))+(((-1.0)*r10*sj12*x2042))+((cj15*r12*sj12))+((r20*sj15*sj16*x2039))+(((-1.0)*r11*sj12*x2040))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((x2038*(((((-1.0)*r21*x2040))+x2041+(((-1.0)*r20*x2042))))), (x2038*(x2044.value)*((((r21*x2039*x2040))+(((-1.0)*x2039*x2041))+(((-1.0)*r10*sj12*x2042))+((cj15*r12*sj12))+((r20*sj15*sj16*x2039))+(((-1.0)*r11*sj12*x2040))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x2045=IKsin(j13);
IkReal x2046=IKcos(j13);
IkReal x2047=(r12*sj15);
IkReal x2048=((1.0)*cj14);
IkReal x2049=((0.37429)*cj12);
IkReal x2050=(cj11*cj12);
IkReal x2051=(cj15*sj16);
IkReal x2052=(sj15*sj16);
IkReal x2053=(cj15*cj16);
IkReal x2054=(r22*sj15);
IkReal x2055=((1.0)*cj15);
IkReal x2056=(sj14*sj16);
IkReal x2057=((1.0)*cj12);
IkReal x2058=(r02*sj15);
IkReal x2059=(cj16*sj15);
IkReal x2060=(sj11*x2045);
IkReal x2061=(sj12*x2045);
IkReal x2062=((1.0)*cj16*sj14);
IkReal x2063=(cj11*x2046);
IkReal x2064=(sj11*x2046);
IkReal x2065=(cj11*x2045);
evalcond[0]=(x2061+(((-1.0)*r22*x2055))+((r20*x2052))+((r21*x2059)));
evalcond[1]=(((r10*x2052))+((r11*x2059))+x2064+(((-1.0)*r12*x2055))+((x2045*x2050)));
evalcond[2]=(((r01*x2059))+(((-1.0)*x2057*x2060))+x2063+(((-1.0)*r02*x2055))+((r00*x2052)));
evalcond[3]=((((0.01)*x2054))+(((0.01)*r20*x2051))+(((0.01)*r21*x2053))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.37429)*x2061)));
evalcond[4]=(((sj12*x2046))+(((-1.0)*r20*x2062))+(((-1.0)*x2048*x2054))+(((-1.0)*r20*x2048*x2051))+(((-1.0)*r21*x2048*x2053))+((r21*x2056)));
evalcond[5]=((((0.01)*x2058))+(((0.36442)*cj11))+(((-1.0)*px))+(((0.01)*r01*x2053))+(((-0.069)*cj12*sj11))+(((0.01)*r00*x2051))+(((-1.0)*x2049*x2060))+(((0.37429)*x2063)));
evalcond[6]=((((0.01)*x2047))+((x2049*x2065))+(((0.069)*x2050))+(((0.01)*r10*x2051))+(((-1.0)*py))+(((0.36442)*sj11))+(((0.37429)*x2064))+(((0.01)*r11*x2053)));
evalcond[7]=((((-1.0)*r10*x2062))+((r11*x2056))+(((-1.0)*x2060))+(((-1.0)*x2047*x2048))+((x2046*x2050))+(((-1.0)*r10*x2048*x2051))+(((-1.0)*r11*x2048*x2053)));
evalcond[8]=(((r01*x2056))+(((-1.0)*x2057*x2064))+(((-1.0)*x2065))+(((-1.0)*r00*x2048*x2051))+(((-1.0)*x2048*x2058))+(((-1.0)*r00*x2062))+(((-1.0)*r01*x2048*x2053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x2066=(cj15*r12);
IkReal x2067=(sj11*sj15);
IkReal x2068=(cj15*r02);
IkReal x2069=((1.0)*cj11*cj16*sj15);
IkReal x2070=((1.0)*cj11*sj15*sj16);
CheckValue<IkReal> x2071=IKPowWithIntegerCheck(cj12,-1);
if(!x2071.valid){
continue;
}
if( IKabs(((x2071.value)*(((((-1.0)*r10*x2070))+(((-1.0)*r11*x2069))+((r00*sj16*x2067))+(((-1.0)*sj11*x2068))+((cj16*r01*x2067))+((cj11*x2066)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj11*x2066))+(((-1.0)*r10*sj16*x2067))+(((-1.0)*r00*x2070))+(((-1.0)*r01*x2069))+(((-1.0)*cj16*r11*x2067))+((cj11*x2068)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2071.value)*(((((-1.0)*r10*x2070))+(((-1.0)*r11*x2069))+((r00*sj16*x2067))+(((-1.0)*sj11*x2068))+((cj16*r01*x2067))+((cj11*x2066))))))+IKsqr((((sj11*x2066))+(((-1.0)*r10*sj16*x2067))+(((-1.0)*r00*x2070))+(((-1.0)*r01*x2069))+(((-1.0)*cj16*r11*x2067))+((cj11*x2068))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x2071.value)*(((((-1.0)*r10*x2070))+(((-1.0)*r11*x2069))+((r00*sj16*x2067))+(((-1.0)*sj11*x2068))+((cj16*r01*x2067))+((cj11*x2066))))), (((sj11*x2066))+(((-1.0)*r10*sj16*x2067))+(((-1.0)*r00*x2070))+(((-1.0)*r01*x2069))+(((-1.0)*cj16*r11*x2067))+((cj11*x2068))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[9];
IkReal x2072=IKsin(j13);
IkReal x2073=IKcos(j13);
IkReal x2074=(r12*sj15);
IkReal x2075=((1.0)*cj14);
IkReal x2076=((0.37429)*cj12);
IkReal x2077=(cj11*cj12);
IkReal x2078=(cj15*sj16);
IkReal x2079=(sj15*sj16);
IkReal x2080=(cj15*cj16);
IkReal x2081=(r22*sj15);
IkReal x2082=((1.0)*cj15);
IkReal x2083=(sj14*sj16);
IkReal x2084=((1.0)*cj12);
IkReal x2085=(r02*sj15);
IkReal x2086=(cj16*sj15);
IkReal x2087=(sj11*x2072);
IkReal x2088=(sj12*x2072);
IkReal x2089=((1.0)*cj16*sj14);
IkReal x2090=(cj11*x2073);
IkReal x2091=(sj11*x2073);
IkReal x2092=(cj11*x2072);
evalcond[0]=((((-1.0)*r22*x2082))+x2088+((r20*x2079))+((r21*x2086)));
evalcond[1]=(x2091+((r10*x2079))+(((-1.0)*r12*x2082))+((x2072*x2077))+((r11*x2086)));
evalcond[2]=((((-1.0)*r02*x2082))+x2090+(((-1.0)*x2084*x2087))+((r01*x2086))+((r00*x2079)));
evalcond[3]=((((0.01)*x2081))+(((0.37429)*x2088))+(((-1.0)*pz))+(((0.069)*sj12))+(((0.01)*r21*x2080))+(((0.01)*r20*x2078)));
evalcond[4]=((((-1.0)*r20*x2089))+((sj12*x2073))+(((-1.0)*r21*x2075*x2080))+((r21*x2083))+(((-1.0)*x2075*x2081))+(((-1.0)*r20*x2075*x2078)));
evalcond[5]=((((0.37429)*x2090))+(((-1.0)*x2076*x2087))+(((0.01)*x2085))+(((0.36442)*cj11))+(((-1.0)*px))+(((-0.069)*cj12*sj11))+(((0.01)*r00*x2078))+(((0.01)*r01*x2080)));
evalcond[6]=((((0.37429)*x2091))+(((0.01)*x2074))+((x2076*x2092))+(((-1.0)*py))+(((0.01)*r10*x2078))+(((0.069)*x2077))+(((0.36442)*sj11))+(((0.01)*r11*x2080)));
evalcond[7]=((((-1.0)*x2087))+(((-1.0)*x2074*x2075))+(((-1.0)*r10*x2089))+(((-1.0)*r11*x2075*x2080))+((x2073*x2077))+((r11*x2083))+(((-1.0)*r10*x2075*x2078)));
evalcond[8]=((((-1.0)*r00*x2075*x2078))+(((-1.0)*r01*x2075*x2080))+(((-1.0)*x2084*x2091))+((r01*x2083))+(((-1.0)*x2075*x2085))+(((-1.0)*x2092))+(((-1.0)*r00*x2089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "a9244a345a56872b76cadb57277d0618"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
