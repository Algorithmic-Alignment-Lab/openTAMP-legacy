/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-03-31 17:19:02.742122
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[3]);
x1=IKcos(j[4]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[4]);
x5=IKcos(j[6]);
x6=IKcos(j[5]);
x7=IKsin(j[1]);
x8=IKsin(j[3]);
x9=IKsin(j[5]);
x10=IKcos(j[1]);
x11=IKsin(j[6]);
x12=IKcos(j[0]);
x13=IKsin(j[0]);
x14=((0.069)*x2);
x15=((0.38722)*x1);
x16=((1.0)*x3);
x17=((1.0)*x5);
x18=((1.0)*x9);
x19=((0.38722)*x3);
x20=((0.37429)*x3);
x21=((1.0)*x11);
x22=((1.0)*x4);
x23=((1.0)*x6);
x24=(x10*x8);
x25=(x3*x4);
x26=(x7*x8);
x27=(x2*x8);
x28=(x10*x3);
x29=(x0*x7);
x30=(x0*x10);
x31=(x1*x2);
x32=((1.0)*x30);
x33=((0.01)*x25);
x34=((0.37429)*x27);
x35=(x10*x2*x4);
x36=(x0*x31);
x37=(x2*x4*x7);
x38=((1.0)*x31*x7);
x39=(x18*x27);
x40=((0.01)*x36);
x41=((0.38722)*x27*x6);
x42=(x10*x2*x22);
x43=((((-1.0)*x32))+((x26*x3)));
x44=(x36+x25);
x45=(((x0*x28))+(((-1.0)*x26)));
x46=((((-1.0)*x0*x2*x22))+((x1*x16)));
x47=((((-1.0)*x24))+(((-1.0)*x16*x29)));
x48=(((x19*x4))+((x0*x15*x2)));
x49=(x1*x45);
x50=((((-1.0)*x29))+(((-1.0)*x16*x24)));
x51=(x43*x9);
x52=(x44*x6);
x53=(x48*x9);
x54=((((-1.0)*x39))+x52);
x55=(((x10*x31))+((x4*x45)));
x56=(x39+(((-1.0)*x23*x44)));
x57=(x37+((x1*x47)));
x58=(x11*x56);
x59=(x33+x34+x40+x41+x14);
x60=(((x57*x9))+((x6*(((((-1.0)*x16*x26))+x32)))));
x61=(((x5*((((x57*x6))+x51))))+((x11*(((((-1.0)*x22*x47))+x38)))));
x62=(((x11*(((((-1.0)*x18*x43))+(((-1.0)*x23*x57))))))+((x5*(((((-1.0)*x4*x47))+x38)))));
IkReal x64=((1.0)*x26);
x63=((((0.37429)*x30))+((x6*(((((-1.0)*x19*x64))+(((0.38722)*x30))))))+((x1*(((((-0.01)*x24))+(((-0.01)*x29*x3))))))+(((-1.0)*x20*x64))+(((0.01)*x37))+((x9*((((x15*x47))+(((0.38722)*x37))))))+(((-0.069)*x3*x7))+(((0.36442)*x10)));
eerot[0]=(((x13*(((((-1.0)*x21*x46))+(((-1.0)*x17*x54))))))+((x12*x61)));
eerot[1]=(((x12*x62))+((x13*(((((-1.0)*x17*x46))+(((-1.0)*x21*x56)))))));
eerot[2]=(((x12*x60))+((x13*(((((-1.0)*x18*x44))+(((-1.0)*x23*x27)))))));
eetrans[0]=((0.0557)+((x12*x63))+((x13*(((((-1.0)*x18*x48))+(((-1.0)*x59))))))+(((0.069)*x12)));
eerot[3]=(((x13*x61))+((x12*((((x11*x46))+((x5*x54)))))));
eerot[4]=(((x13*x62))+((x12*((((x46*x5))+x58)))));
eerot[5]=(((x12*((((x27*x6))+((x44*x9))))))+((x13*x60)));
eetrans[1]=(((x13*x63))+(((0.069)*x13))+((x12*((x59+x53)))));
eerot[6]=((((-1.0)*x5*((((x18*x50))+((x23*(((((-1.0)*x42))+x49))))))))+((x11*x55)));
eerot[7]=(((x11*((((x50*x9))+((x6*(((((-1.0)*x35))+x49))))))))+((x5*x55)));
eerot[8]=(((x50*x6))+((x9*(((((-1.0)*x49))+x42)))));
IkReal x65=((1.0)*x24);
eetrans[2]=((0.28139)+((x9*(((((-1.0)*x15*x45))+(((0.38722)*x35))))))+((x6*(((((-1.0)*x19*x65))+(((-0.38722)*x29))))))+(((-0.37429)*x29))+(((-1.0)*x20*x65))+(((-0.36442)*x7))+(((-0.069)*x28))+(((0.01)*x35))+((x1*(((((-0.01)*x0*x28))+(((0.01)*x26)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-1.0)*r01*(IKcos(j2))))+(((-1.0)*r11*(IKsin(j2)))));
new_r01=(((r10*(IKsin(j2))))+((r00*(IKcos(j2)))));
new_r02=(((r02*(IKcos(j2))))+((r12*(IKsin(j2)))));
IkReal x66=IKcos(j2);
IkReal x67=IKsin(j2);
new_px=((-0.069)+(((-0.0557)*x66))+((px*x66))+(((-0.38722)*r02*x66))+(((-0.38722)*r12*x67))+((py*x67)));
new_r10=r21;
new_r11=((-1.0)*r20);
new_r12=((-1.0)*r22);
new_py=((0.28139)+(((-1.0)*pz))+(((0.38722)*r22)));
new_r20=((((-1.0)*r11*(IKcos(j2))))+((r01*(IKsin(j2)))));
new_r21=((((-1.0)*r00*(IKsin(j2))))+((r10*(IKcos(j2)))));
new_r22=(((r12*(IKcos(j2))))+(((-1.0)*r02*(IKsin(j2)))));
IkReal x68=IKsin(j2);
IkReal x69=IKcos(j2);
new_pz=((((0.38722)*r02*x68))+(((0.0557)*x68))+(((-1.0)*px*x68))+(((-0.38722)*r12*x69))+((py*x69)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x70=((1.0)*px);
IkReal x71=((1.0)*pz);
IkReal x72=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x72))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x71)));
rxp0_2=((((-1.0)*r10*x70))+((py*r00)));
rxp1_0=((((-1.0)*r21*x72))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x71)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x70)));
rxp2_0=((((-1.0)*r22*x72))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x71)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x70)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x73=((3.47000724e-5)*r00);
IkReal x74=((0.00347000724)*rxp2_0);
IkReal x75=((1.15695523197e-5)*r22);
IkReal x76=((3.47000724e-5)*r10);
IkReal x77=((0.00347000724)*rxp2_1);
IkReal x78=((0.00356398938)*pz);
IkReal x79=((9.522e-5)*rxp0_2);
IkReal x80=((3.56398938e-5)*r21);
IkReal x81=((6.94001448e-5)*r11);
IkReal x82=((0.00019044)*rxp1_2);
IkReal x83=((7.12797876e-5)*r20);
IkReal x84=((1.33586256645916)*pp);
IkReal x85=((0.0267172513291833)*npy);
IkReal x86=((1.0)*npz);
IkReal x87=((7.12797876e-5)*r22);
IkReal x88=((2.31391046394e-5)*r21);
IkReal x89=((0.00694001448)*rxp1_1);
IkReal x90=((0.01388002896)*rxp0_1);
IkReal x91=((4.62782092788e-5)*r20);
IkReal x92=((0.00694001448)*rxp1_0);
IkReal x93=((4.0)*npx);
IkReal x94=((2.0)*npy);
IkReal x95=((0.0534345026583665)*npz);
IkReal x96=((6.94001448e-5)*r01);
IkReal x97=((0.0534345026583665)*npx);
IkReal x98=((0.009522)*npz*pz);
IkReal x99=((0.004761)*pp*r22);
IkReal x100=((-0.0534345026583665)*npx);
IkReal x101=((0.019044)*npy*pz);
IkReal x102=((0.009522)*pp*r21);
IkReal x103=((-0.00694001448)*rxp1_0);
IkReal x104=((0.038088)*npx*pz);
IkReal x105=((0.019044)*pp*r20);
IkReal x106=(x94+(((-1.0)*x95)));
IkReal x107=((((-1.0)*x73))+x74);
IkReal x108=((((-1.0)*x74))+x73);
IkReal x109=((-6.94001448e-5)*r01);
IkReal x110=((0.00351340898768335)+x84);
IkReal x111=(x74+x73);
IkReal x112=((((-1.0)*x94))+(((-1.0)*x95)));
IkReal x113=((-1.0)*x111);
IkReal x114=(x79+x80);
IkReal x115=(x82+x81);
IkReal x116=(npz+x110);
IkReal x117=(x79+x78);
IkReal x118=(x77+x76);
IkReal x119=(x78+x80);
IkReal x120=(x116+(((-1.0)*x85)));
IkReal x121=(x75+x98);
IkReal x122=(x104+x91);
IkReal x123=(x79+x99);
IkReal x124=(x102+x87);
IkReal x125=(x101+x88);
IkReal x126=(x78+x99);
IkReal x127=(x80+x99);
IkReal x128=(x110+(((-1.0)*x86))+(((-1.0)*x85)));
IkReal x129=(x110+x85+(((-1.0)*x86)));
IkReal x130=(x116+x85);
op[0]=x113;
op[1]=((((-1.0)*x118))+(((-1.0)*x126))+x121+x114);
op[2]=x96;
op[3]=(x83+x81+(((-1.0)*x82)));
op[4]=x108;
op[5]=((((-1.0)*x77))+(((-1.0)*x114))+(((-1.0)*x126))+x121+x76);
op[6]=((((-1.0)*x114))+(((-1.0)*x118))+(((-1.0)*x121))+x126);
op[7]=x111;
op[8]=(x115+(((-1.0)*x83)));
op[9]=x109;
op[10]=((((-1.0)*x77))+(((-1.0)*x121))+x126+x114+x76);
op[11]=x107;
op[12]=x128;
op[13]=x128;
op[14]=x100;
op[15]=x100;
op[16]=x129;
op[17]=x129;
op[18]=0;
op[19]=x128;
op[20]=0;
op[21]=x100;
op[22]=0;
op[23]=x129;
op[24]=x92;
op[25]=((((-1.0)*x125))+x124+x89);
op[26]=((0.01388002896)*rxp0_0);
op[27]=((((-1.0)*x122))+x105+x90);
op[28]=x103;
op[29]=((((-1.0)*x102))+x125+x87+(((-1.0)*x89)));
op[30]=((((-1.0)*x124))+x125+x89);
op[31]=x103;
op[32]=((((-1.0)*x105))+x122+x90);
op[33]=((-0.01388002896)*rxp0_0);
op[34]=((((-1.0)*x125))+x102+(((-1.0)*x89))+(((-1.0)*x87)));
op[35]=x92;
op[36]=x106;
op[37]=x106;
op[38]=x93;
op[39]=x93;
op[40]=x112;
op[41]=x112;
op[42]=0;
op[43]=x106;
op[44]=0;
op[45]=x93;
op[46]=0;
op[47]=x112;
op[48]=x107;
op[49]=((((-1.0)*x76))+(((-1.0)*x119))+(((-1.0)*x121))+x123+x77);
op[50]=x96;
op[51]=(x81+(((-1.0)*x83))+(((-1.0)*x82)));
op[52]=x111;
op[53]=((((-1.0)*x117))+(((-1.0)*x121))+x127+x118);
op[54]=((((-1.0)*x76))+(((-1.0)*x123))+x121+x119+x77);
op[55]=x108;
op[56]=(x115+x83);
op[57]=x109;
op[58]=((((-1.0)*x127))+x121+x117+x118);
op[59]=x113;
op[60]=x130;
op[61]=x130;
op[62]=x97;
op[63]=x97;
op[64]=x120;
op[65]=x120;
op[66]=0;
op[67]=x130;
op[68]=0;
op[69]=x97;
op[70]=0;
op[71]=x120;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ij7 += 3)
{
IkReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj3 = zeror[ij7+2];
if(isnan(htj7)||isnan(htj8)||isnan(htj3)){
continue;
}
j7array[numsolutions]=((2.0)*(atan(htj7)));
j8array[numsolutions]=((2.0)*(atan(htj8)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj7)){
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
}
else{
IkReal x131=htj7*htj7;
CheckValue<IkReal> x132=IKPowWithIntegerCheck(((1.0)+x131),-1);
if(!x132.valid){
continue;
}
cj7array[numsolutions]=((x132.value)*(((1.0)+(((-1.0)*x131)))));
CheckValue<IkReal> x133=IKPowWithIntegerCheck(((1.0)+(htj7*htj7)),-1);
if(!x133.valid){
continue;
}
sj7array[numsolutions]=((2.0)*htj7*(x133.value));
}
if(isinf(htj8)){
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
}
else{
IkReal x134=htj8*htj8;
CheckValue<IkReal> x135=IKPowWithIntegerCheck(((1.0)+x134),-1);
if(!x135.valid){
continue;
}
cj8array[numsolutions]=((x135.value)*(((1.0)+(((-1.0)*x134)))));
CheckValue<IkReal> x136=IKPowWithIntegerCheck(((1.0)+(htj8*htj8)),-1);
if(!x136.valid){
continue;
}
sj8array[numsolutions]=((2.0)*htj8*(x136.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x137=htj3*htj3;
CheckValue<IkReal> x138=IKPowWithIntegerCheck(((1.0)+x137),-1);
if(!x138.valid){
continue;
}
cj3array[numsolutions]=((x138.value)*(((1.0)+(((-1.0)*x137)))));
CheckValue<IkReal> x139=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x139.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x139.value));
}
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j7valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj7 = 16;
_nj8 = 1;
_nj3 = 1;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
_ij8[0] = 0; _ij8[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( !j7valid[iij7] ) { continue; }
if( IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj8array[ij7]-cj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij7]-sj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij7]-cj3array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij7]-sj3array[iij7]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j7valid[iij7]=false; _ij7[1] = iij7; _ij8[1] = 0; _ij3[1] = 0;  break; 
}
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

    j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

    j3 = j3array[ij7]; cj3 = cj3array[ij7]; sj3 = sj3array[ij7];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j6eval[1];
IkReal x140=((4.0)*cj8);
IkReal x141=(r10*sj3);
IkReal x142=(cj3*r00);
IkReal x143=((8.0)*sj3);
IkReal x144=(r12*sj7);
IkReal x145=((4.0)*sj8);
IkReal x146=((16.0)*sj3);
IkReal x147=(cj3*r02*sj7);
IkReal x148=(cj7*cj8*r11);
IkReal x149=((16.0)*cj7*sj8);
IkReal x150=((8.0)*cj7*sj8);
IkReal x151=(cj3*cj7*cj8*r01);
IkReal x152=(((cj3*r01*x145))+((r11*sj3*x145)));
IkReal x153=(((x140*x142))+((x140*x141)));
j6eval[0]=((IKabs(((((-1.0)*x142*x150))+(((-1.0)*x143*x144))+(((-1.0)*x143*x148))+(((-8.0)*x147))+(((-8.0)*x151))+(((-1.0)*x141*x150)))))+(IKabs(((((-1.0)*x153))+x152)))+(((0.5)*(IKabs(((((-1.0)*x142*x149))+(((-1.0)*x144*x146))+(((-1.0)*x141*x149))+(((-1.0)*x146*x148))+(((-16.0)*x151))+(((-16.0)*x147)))))))+(((0.5)*(IKabs(((((-1.0)*x152))+x153))))));
if( IKabs(j6eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j5, j6]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x154=((16.0)*cj3);
IkReal x155=(cj7*cj8);
IkReal x156=((4.0)*cj8);
IkReal x157=(r10*sj3);
IkReal x158=(r02*sj7);
IkReal x159=(cj3*r00);
IkReal x160=((8.0)*sj3);
IkReal x161=(r12*sj7);
IkReal x162=((16.0)*sj3);
IkReal x163=(cj7*sj8);
IkReal x164=((4.0)*sj8);
IkReal x165=(cj3*r01);
IkReal x166=(((x156*x159))+((x156*x157)));
IkReal x167=(((x164*x165))+((r11*sj3*x164)));
IkReal x168=((((-1.0)*x166))+x167);
IkReal x169=((((-1.0)*x167))+x166);
IkReal x170=((((-8.0)*x159*x163))+(((-1.0)*x160*x161))+(((-1.0)*r11*x155*x160))+(((-8.0)*x157*x163))+(((-8.0)*cj3*x158))+(((-8.0)*x155*x165)));
op[0]=x168;
op[1]=x170;
op[2]=x168;
op[3]=((((-1.0)*x154*x158))+(((-1.0)*r01*x154*x155))+(((-1.0)*x161*x162))+(((-1.0)*r11*x155*x162))+(((-16.0)*x157*x163))+(((-1.0)*r00*x154*x163)));
op[4]=x169;
op[5]=x170;
op[6]=x169;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x171=((1.0)*cj8);
IkReal x172=((1.0)*cj6);
IkReal x173=(r10*sj8);
if( IKabs(((((-1.0)*cj7*x172*x173))+(((-1.0)*r12*sj7*x172))+(((-1.0)*cj6*cj7*r11*x171))+((r11*sj6*sj8))+(((-1.0)*r10*sj6*x171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj7*x171))+(((-1.0)*sj7*x173))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*x172*x173))+(((-1.0)*r12*sj7*x172))+(((-1.0)*cj6*cj7*r11*x171))+((r11*sj6*sj8))+(((-1.0)*r10*sj6*x171))))+IKsqr(((((-1.0)*r11*sj7*x171))+(((-1.0)*sj7*x173))+((cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*x172*x173))+(((-1.0)*r12*sj7*x172))+(((-1.0)*cj6*cj7*r11*x171))+((r11*sj6*sj8))+(((-1.0)*r10*sj6*x171))), ((((-1.0)*r11*sj7*x171))+(((-1.0)*sj7*x173))+((cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x174=IKcos(j5);
IkReal x175=((1.0)*r10);
IkReal x176=(r10*sj8);
IkReal x177=((0.01)*cj7);
IkReal x178=(cj6*cj7);
IkReal x179=(cj8*r11);
IkReal x180=(r12*sj7);
evalcond[0]=(x174+(((-1.0)*cj7*r12))+((sj7*x176))+((sj7*x179)));
evalcond[1]=((0.36442)+((x176*x177))+(((-1.0)*py))+(((0.01)*x180))+(((0.37429)*x174))+((x177*x179)));
evalcond[2]=((((-1.0)*cj6*x180))+(((-1.0)*sj8*x175*x178))+(((-1.0)*x178*x179))+((r11*sj6*sj8))+(((-1.0)*cj8*sj6*x175))+(((-1.0)*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x181=(sj7*sj8);
IkReal x182=(cj8*sj7);
j4eval[0]=sj5;
j4eval[1]=((IKabs((((r01*x182))+((r00*x181))+(((-1.0)*cj7*r02)))))+(IKabs(((((-1.0)*r20*x181))+(((-1.0)*r21*x182))+((cj7*r22))))));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((1.0)+(((5.42449275362319)*sj5)));
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.184349034171364)+sj5)))+(IKabs(((-1.0)+(IKsign(cj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x183=((5.42449275)*sj7);
IkReal x184=((5.42449275)*cj7);
if( IKabs((((cj8*r21*x183))+((r20*sj8*x183))+(((-1.0)*r22*x184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj8*r01*x183))+(((-1.0)*r00*sj8*x183))+((r02*x184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj8*r21*x183))+((r20*sj8*x183))+(((-1.0)*r22*x184))))+IKsqr(((((-1.0)*cj8*r01*x183))+(((-1.0)*r00*sj8*x183))+((r02*x184))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj8*r21*x183))+((r20*sj8*x183))+(((-1.0)*r22*x184))), ((((-1.0)*cj8*r01*x183))+(((-1.0)*r00*sj8*x183))+((r02*x184))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x185=IKsin(j4);
IkReal x186=IKcos(j4);
IkReal x187=((1.0)*r22);
IkReal x188=(cj6*sj7);
IkReal x189=(cj6*r21);
IkReal x190=((1.0)*r02);
IkReal x191=(cj8*r21);
IkReal x192=((1.0)*cj8);
IkReal x193=(sj6*sj7);
IkReal x194=((1.0)*cj6);
IkReal x195=(cj6*r01);
IkReal x196=((0.01)*cj7);
IkReal x197=((0.01)*sj7);
IkReal x198=(r20*sj6);
IkReal x199=(r20*sj8);
IkReal x200=(sj6*sj8);
IkReal x201=(cj8*r01);
IkReal x202=(cj7*cj8*sj6);
IkReal x203=(cj7*r00*sj8);
evalcond[0]=((((-0.184349034294497)*x185))+((sj7*x199))+((sj7*x191))+(((-1.0)*cj7*x187)));
evalcond[1]=((((0.184349034294497)*x186))+(((-1.0)*cj7*x190))+((r00*sj7*sj8))+((sj7*x201)));
evalcond[2]=((((-4.60872585736242e-11)*x185))+((x196*x199))+(((-1.0)*pz))+((x191*x196))+((r22*x197)));
evalcond[3]=(((x196*x201))+(((4.60872585736242e-11)*x186))+(((-1.0)*px))+((r00*sj8*x196))+((r02*x197)));
evalcond[4]=(((cj7*sj6*x191))+(((-1.0)*x186))+((sj8*x189))+(((-1.0)*cj6*r20*x192))+((cj7*sj8*x198))+((r22*x193)));
evalcond[5]=(((cj7*sj6*x201))+(((-1.0)*cj6*r00*x192))+((cj7*r00*x200))+(((-1.0)*x185))+((sj8*x195))+((r02*x193)));
evalcond[6]=((((-1.0)*x192*x198))+(((-1.0)*cj7*x194*x199))+(((-1.0)*x187*x188))+(((0.98286084)*x185))+(((-1.0)*cj7*x189*x192))+((r21*x200)));
evalcond[7]=((((-1.0)*x188*x190))+(((-1.0)*x194*x203))+(((-1.0)*cj7*x192*x195))+(((-1.0)*r00*sj6*x192))+((r01*x200))+(((-0.98286084)*x186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj5)))))+(IKabs(((0.184349034171364)+sj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x204=((5.42449275)*sj7);
IkReal x205=((5.42449275)*cj7);
if( IKabs(((((-1.0)*r22*x205))+((r20*sj8*x204))+((cj8*r21*x204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj8*r01*x204))+(((-1.0)*r00*sj8*x204))+((r02*x205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x205))+((r20*sj8*x204))+((cj8*r21*x204))))+IKsqr(((((-1.0)*cj8*r01*x204))+(((-1.0)*r00*sj8*x204))+((r02*x205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r22*x205))+((r20*sj8*x204))+((cj8*r21*x204))), ((((-1.0)*cj8*r01*x204))+(((-1.0)*r00*sj8*x204))+((r02*x205))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x206=IKsin(j4);
IkReal x207=IKcos(j4);
IkReal x208=((1.0)*r22);
IkReal x209=(cj6*sj7);
IkReal x210=(cj6*r21);
IkReal x211=((1.0)*r02);
IkReal x212=(r01*sj8);
IkReal x213=(cj8*r21);
IkReal x214=((1.0)*cj8);
IkReal x215=(sj6*sj7);
IkReal x216=((1.0)*cj6);
IkReal x217=(cj7*r01);
IkReal x218=((0.01)*cj7);
IkReal x219=((0.01)*sj7);
IkReal x220=(r20*sj6);
IkReal x221=(r20*sj8);
IkReal x222=(cj7*cj8*sj6);
IkReal x223=(cj7*r00*sj8);
evalcond[0]=((((-0.184349034294497)*x206))+((sj7*x221))+(((-1.0)*cj7*x208))+((sj7*x213)));
evalcond[1]=((((0.184349034294497)*x207))+((cj8*r01*sj7))+((r00*sj7*sj8))+(((-1.0)*cj7*x211)));
evalcond[2]=(((x213*x218))+(((-4.60872585736242e-11)*x206))+(((-1.0)*pz))+((x218*x221))+((r22*x219)));
evalcond[3]=(((r00*sj8*x218))+(((0.01)*cj8*x217))+(((-1.0)*px))+((r02*x219))+(((4.60872585736242e-11)*x207)));
evalcond[4]=((((-1.0)*cj6*r20*x214))+((cj7*sj8*x220))+((cj7*sj6*x213))+((r22*x215))+((sj8*x210))+(((-1.0)*x207)));
evalcond[5]=(((sj6*x223))+((cj6*x212))+((cj8*sj6*x217))+(((-1.0)*cj6*r00*x214))+((r02*x215))+(((-1.0)*x206)));
evalcond[6]=(((r21*sj6*sj8))+(((-1.0)*cj7*x210*x214))+(((-1.0)*x214*x220))+(((-1.0)*x208*x209))+(((-1.0)*cj7*x216*x221))+(((-0.98286084)*x206)));
evalcond[7]=((((-1.0)*x216*x223))+(((-1.0)*r00*sj6*x214))+((sj6*x212))+(((0.98286084)*x207))+(((-1.0)*x209*x211))+(((-1.0)*cj6*x214*x217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x224=((0.144927536231884)*sj7);
IkReal x225=((0.144927536231884)*cj7);
if( IKabs(((((14.4927536231884)*pz))+(((-1.0)*r20*sj8*x225))+(((-1.0)*cj8*r21*x225))+(((-1.0)*r22*x224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-14.4927536231884)*px))+((r00*sj8*x225))+((cj8*r01*x225))+((r02*x224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((14.4927536231884)*pz))+(((-1.0)*r20*sj8*x225))+(((-1.0)*cj8*r21*x225))+(((-1.0)*r22*x224))))+IKsqr(((((-14.4927536231884)*px))+((r00*sj8*x225))+((cj8*r01*x225))+((r02*x224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((14.4927536231884)*pz))+(((-1.0)*r20*sj8*x225))+(((-1.0)*cj8*r21*x225))+(((-1.0)*r22*x224))), ((((-14.4927536231884)*px))+((r00*sj8*x225))+((cj8*r01*x225))+((r02*x224))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x226=IKcos(j4);
IkReal x227=IKsin(j4);
IkReal x228=((0.01)*cj7);
IkReal x229=(r00*sj8);
IkReal x230=(cj6*r21);
IkReal x231=(cj8*r01);
IkReal x232=((1.0)*cj7);
IkReal x233=(sj6*sj7);
IkReal x234=(r01*sj8);
IkReal x235=((0.01)*sj7);
IkReal x236=((1.0)*cj8);
IkReal x237=(r20*sj6);
IkReal x238=(r20*sj8);
IkReal x239=((1.0)*x226);
IkReal x240=(cj7*cj8*sj6);
IkReal x241=((1.0)*cj6*sj7);
evalcond[0]=(((x228*x238))+(((0.069)*x227))+(((-1.0)*pz))+((cj8*r21*x228))+((r22*x235)));
evalcond[1]=(((r02*x235))+((x228*x231))+((x228*x229))+(((-1.0)*px))+(((-0.069)*x226)));
evalcond[2]=(((sj8*x230))+(((-1.0)*cj6*r20*x236))+(((-1.0)*x239))+((r21*x240))+((cj7*sj8*x237))+((r22*x233)));
evalcond[3]=(((cj7*sj6*x229))+((cj6*x234))+((r02*x233))+(((-1.0)*cj6*r00*x236))+(((-1.0)*x227))+((cj7*sj6*x231)));
evalcond[4]=(((r21*sj6*sj8))+(((-1.0)*cj8*x230*x232))+x227+(((-1.0)*r22*x241))+(((-1.0)*x236*x237))+(((-1.0)*cj6*x232*x238)));
evalcond[5]=((((-1.0)*cj6*x231*x232))+(((-1.0)*x239))+(((-1.0)*r00*sj6*x236))+(((-1.0)*r02*x241))+(((-1.0)*cj6*x229*x232))+((sj6*x234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x242=((0.144927536231884)*sj7);
IkReal x243=((0.144927536231884)*cj7);
if( IKabs(((((-1.0)*r20*sj8*x243))+(((-1.0)*cj8*r21*x243))+(((-1.0)*r22*x242))+(((14.4927536231884)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-14.4927536231884)*px))+((r02*x242))+((cj8*r01*x243))+((r00*sj8*x243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj8*x243))+(((-1.0)*cj8*r21*x243))+(((-1.0)*r22*x242))+(((14.4927536231884)*pz))))+IKsqr(((((-14.4927536231884)*px))+((r02*x242))+((cj8*r01*x243))+((r00*sj8*x243))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r20*sj8*x243))+(((-1.0)*cj8*r21*x243))+(((-1.0)*r22*x242))+(((14.4927536231884)*pz))), ((((-14.4927536231884)*px))+((r02*x242))+((cj8*r01*x243))+((r00*sj8*x243))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x244=IKcos(j4);
IkReal x245=IKsin(j4);
IkReal x246=((0.01)*cj7);
IkReal x247=(r00*sj8);
IkReal x248=(cj6*r21);
IkReal x249=(cj8*r01);
IkReal x250=((1.0)*cj7);
IkReal x251=(sj6*sj7);
IkReal x252=(r01*sj8);
IkReal x253=((0.01)*sj7);
IkReal x254=((1.0)*cj8);
IkReal x255=(r20*sj6);
IkReal x256=(r20*sj8);
IkReal x257=((1.0)*x245);
IkReal x258=(cj7*cj8*sj6);
IkReal x259=((1.0)*cj6*sj7);
evalcond[0]=(((x246*x256))+(((-1.0)*pz))+((r22*x253))+((cj8*r21*x246))+(((0.069)*x245)));
evalcond[1]=((((-0.069)*x244))+(((-1.0)*px))+((r02*x253))+((x246*x247))+((x246*x249)));
evalcond[2]=(((r21*x258))+((sj8*x248))+((cj7*sj8*x255))+(((-1.0)*x244))+(((-1.0)*cj6*r20*x254))+((r22*x251)));
evalcond[3]=((((-1.0)*cj6*r00*x254))+((cj6*x252))+((cj7*sj6*x249))+((cj7*sj6*x247))+((r02*x251))+(((-1.0)*x257)));
evalcond[4]=((((-1.0)*r00*sj6*x254))+((sj6*x252))+(((-1.0)*r02*x259))+(((-1.0)*cj6*x247*x250))+x244+(((-1.0)*cj6*x249*x250)));
evalcond[5]=((((-1.0)*r22*x259))+((r21*sj6*sj8))+(((-1.0)*cj6*x250*x256))+(((-1.0)*cj8*x248*x250))+(((-1.0)*x254*x255))+(((-1.0)*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x260=((0.01)*cj7);
CheckValue<IkReal> x261=IKPowWithIntegerCheck(((0.069)+(((0.37429)*sj5))),-1);
if(!x261.valid){
continue;
}
CheckValue<IkReal> x262=IKPowWithIntegerCheck(sj5,-1);
if(!x262.valid){
continue;
}
if( IKabs(((x261.value)*(((((-1.0)*r20*sj8*x260))+(((-0.01)*r22*sj7))+pz+(((-1.0)*cj8*r21*x260)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x262.value)*((((cj8*r01*sj7))+(((-1.0)*cj7*r02))+((r00*sj7*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x261.value)*(((((-1.0)*r20*sj8*x260))+(((-0.01)*r22*sj7))+pz+(((-1.0)*cj8*r21*x260))))))+IKsqr(((x262.value)*((((cj8*r01*sj7))+(((-1.0)*cj7*r02))+((r00*sj7*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x261.value)*(((((-1.0)*r20*sj8*x260))+(((-0.01)*r22*sj7))+pz+(((-1.0)*cj8*r21*x260))))), ((x262.value)*((((cj8*r01*sj7))+(((-1.0)*cj7*r02))+((r00*sj7*sj8))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x263=IKsin(j4);
IkReal x264=IKcos(j4);
IkReal x265=((1.0)*cj7);
IkReal x266=((1.0)*cj6);
IkReal x267=(cj8*r20);
IkReal x268=(cj6*sj8);
IkReal x269=(r02*sj7);
IkReal x270=(cj8*r21);
IkReal x271=(cj8*r01);
IkReal x272=((0.01)*cj7);
IkReal x273=(r22*sj7);
IkReal x274=(cj8*r00);
IkReal x275=(r20*sj8);
IkReal x276=((1.0)*sj6);
IkReal x277=(r00*sj8);
IkReal x278=(sj6*sj8);
IkReal x279=(cj7*sj6);
IkReal x280=(cj8*x279);
IkReal x281=(sj5*x264);
IkReal x282=(sj5*x263);
IkReal x283=((1.0)*x264);
evalcond[0]=(x282+((sj7*x275))+((sj7*x270))+(((-1.0)*r22*x265)));
evalcond[1]=((((-1.0)*x281))+(((-1.0)*r02*x265))+((sj7*x277))+((sj7*x271)));
evalcond[2]=(((x272*x275))+((x270*x272))+(((-1.0)*pz))+(((0.37429)*x282))+(((0.069)*x263))+(((0.01)*x273)));
evalcond[3]=(((x275*x279))+((x270*x279))+((r21*x268))+((sj6*x273))+(((-1.0)*x283))+(((-1.0)*x266*x267)));
evalcond[4]=((((-1.0)*x263))+((x271*x279))+((x277*x279))+((sj6*x269))+(((-1.0)*x266*x274))+((r01*x268)));
evalcond[5]=(((x272*x277))+((x271*x272))+(((-0.069)*x264))+(((-1.0)*px))+(((-0.37429)*x281))+(((0.01)*x269)));
evalcond[6]=((((-1.0)*r20*x265*x268))+((cj5*x263))+((r21*x278))+(((-1.0)*x266*x273))+(((-1.0)*x267*x276))+(((-1.0)*cj6*x265*x270)));
evalcond[7]=((((-1.0)*x274*x276))+(((-1.0)*r00*x265*x268))+(((-1.0)*cj5*x283))+((r01*x278))+(((-1.0)*x266*x269))+(((-1.0)*cj6*x265*x271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x284=(cj7*sj6);
IkReal x285=(cj8*r21);
IkReal x286=((1.0)*r20);
CheckValue<IkReal> x287=IKPowWithIntegerCheck(sj5,-1);
if(!x287.valid){
continue;
}
if( IKabs(((x287.value)*(((((-1.0)*sj7*sj8*x286))+(((-1.0)*sj7*x285))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x284*x285))+((cj6*r21*sj8))+((r20*sj8*x284))+(((-1.0)*cj6*cj8*x286))+((r22*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x287.value)*(((((-1.0)*sj7*sj8*x286))+(((-1.0)*sj7*x285))+((cj7*r22))))))+IKsqr((((x284*x285))+((cj6*r21*sj8))+((r20*sj8*x284))+(((-1.0)*cj6*cj8*x286))+((r22*sj6*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x287.value)*(((((-1.0)*sj7*sj8*x286))+(((-1.0)*sj7*x285))+((cj7*r22))))), (((x284*x285))+((cj6*r21*sj8))+((r20*sj8*x284))+(((-1.0)*cj6*cj8*x286))+((r22*sj6*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x288=IKsin(j4);
IkReal x289=IKcos(j4);
IkReal x290=((1.0)*cj7);
IkReal x291=((1.0)*cj6);
IkReal x292=(cj8*r20);
IkReal x293=(cj6*sj8);
IkReal x294=(r02*sj7);
IkReal x295=(cj8*r21);
IkReal x296=(cj8*r01);
IkReal x297=((0.01)*cj7);
IkReal x298=(r22*sj7);
IkReal x299=(cj8*r00);
IkReal x300=(r20*sj8);
IkReal x301=((1.0)*sj6);
IkReal x302=(r00*sj8);
IkReal x303=(sj6*sj8);
IkReal x304=(cj7*sj6);
IkReal x305=(cj8*x304);
IkReal x306=(sj5*x289);
IkReal x307=(sj5*x288);
IkReal x308=((1.0)*x289);
evalcond[0]=(((sj7*x300))+x307+((sj7*x295))+(((-1.0)*r22*x290)));
evalcond[1]=(((sj7*x302))+(((-1.0)*x306))+(((-1.0)*r02*x290))+((sj7*x296)));
evalcond[2]=((((-1.0)*pz))+(((0.01)*x298))+((x297*x300))+((x295*x297))+(((0.069)*x288))+(((0.37429)*x307)));
evalcond[3]=((((-1.0)*x291*x292))+((x295*x304))+((sj6*x298))+((x300*x304))+((r21*x293))+(((-1.0)*x308)));
evalcond[4]=((((-1.0)*x291*x299))+(((-1.0)*x288))+((r01*x293))+((x296*x304))+((x302*x304))+((sj6*x294)));
evalcond[5]=((((-0.069)*x289))+(((-1.0)*px))+(((0.01)*x294))+((x297*x302))+((x296*x297))+(((-0.37429)*x306)));
evalcond[6]=((((-1.0)*cj6*x290*x295))+(((-1.0)*x292*x301))+(((-1.0)*x291*x298))+((r21*x303))+((cj5*x288))+(((-1.0)*r20*x290*x293)));
evalcond[7]=((((-1.0)*cj6*x290*x296))+(((-1.0)*x291*x294))+(((-1.0)*cj5*x308))+(((-1.0)*r00*x290*x293))+(((-1.0)*x299*x301))+((r01*x303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x309=(sj7*sj8);
IkReal x310=(cj8*sj7);
CheckValue<IkReal> x311 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x309))+(((-1.0)*r21*x310))+((cj7*r22)))),IkReal((((r01*x310))+(((-1.0)*cj7*r02))+((r00*x309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x311.valid){
continue;
}
CheckValue<IkReal> x312=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x311.value)+(((1.5707963267949)*(x312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x313=IKsin(j4);
IkReal x314=IKcos(j4);
IkReal x315=((1.0)*cj7);
IkReal x316=((1.0)*cj6);
IkReal x317=(cj8*r20);
IkReal x318=(cj6*sj8);
IkReal x319=(r02*sj7);
IkReal x320=(cj8*r21);
IkReal x321=(cj8*r01);
IkReal x322=((0.01)*cj7);
IkReal x323=(r22*sj7);
IkReal x324=(cj8*r00);
IkReal x325=(r20*sj8);
IkReal x326=((1.0)*sj6);
IkReal x327=(r00*sj8);
IkReal x328=(sj6*sj8);
IkReal x329=(cj7*sj6);
IkReal x330=(cj8*x329);
IkReal x331=(sj5*x314);
IkReal x332=(sj5*x313);
IkReal x333=((1.0)*x314);
evalcond[0]=(x332+((sj7*x325))+((sj7*x320))+(((-1.0)*r22*x315)));
evalcond[1]=((((-1.0)*r02*x315))+(((-1.0)*x331))+((sj7*x327))+((sj7*x321)));
evalcond[2]=(((x322*x325))+(((0.069)*x313))+((x320*x322))+(((-1.0)*pz))+(((0.37429)*x332))+(((0.01)*x323)));
evalcond[3]=(((x325*x329))+((x320*x329))+((sj6*x323))+(((-1.0)*x333))+((r21*x318))+(((-1.0)*x316*x317)));
evalcond[4]=(((x327*x329))+((sj6*x319))+((r01*x318))+(((-1.0)*x316*x324))+(((-1.0)*x313))+((x321*x329)));
evalcond[5]=(((x322*x327))+(((0.01)*x319))+(((-0.37429)*x331))+(((-1.0)*px))+(((-0.069)*x314))+((x321*x322)));
evalcond[6]=(((r21*x328))+(((-1.0)*x317*x326))+((cj5*x313))+(((-1.0)*r20*x315*x318))+(((-1.0)*cj6*x315*x320))+(((-1.0)*x316*x323)));
evalcond[7]=(((r01*x328))+(((-1.0)*cj5*x333))+(((-1.0)*cj6*x315*x321))+(((-1.0)*r00*x315*x318))+(((-1.0)*x324*x326))+(((-1.0)*x316*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x334=(r10*sj8);
IkReal x335=(cj6*cj7);
IkReal x336=(cj8*r11);
if( IKabs((((x335*x336))+((x334*x335))+((cj6*r12*sj7))+(((-1.0)*r11*sj6*sj8))+((cj8*r10*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r12))+((sj7*x336))+((sj7*x334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x335*x336))+((x334*x335))+((cj6*r12*sj7))+(((-1.0)*r11*sj6*sj8))+((cj8*r10*sj6))))+IKsqr(((((-1.0)*cj7*r12))+((sj7*x336))+((sj7*x334))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((x335*x336))+((x334*x335))+((cj6*r12*sj7))+(((-1.0)*r11*sj6*sj8))+((cj8*r10*sj6))), ((((-1.0)*cj7*r12))+((sj7*x336))+((sj7*x334))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x337=IKcos(j5);
IkReal x338=((1.0)*r10);
IkReal x339=(r10*sj8);
IkReal x340=((0.01)*cj7);
IkReal x341=(cj6*cj7);
IkReal x342=(cj8*r11);
IkReal x343=(r12*sj7);
evalcond[0]=((((-1.0)*cj7*r12))+(((-1.0)*x337))+((sj7*x342))+((sj7*x339)));
evalcond[1]=((-0.36442)+(((0.01)*x343))+(((-0.37429)*x337))+(((-1.0)*py))+((x340*x342))+((x339*x340)));
evalcond[2]=((((-1.0)*cj8*sj6*x338))+(((-1.0)*x341*x342))+(((-1.0)*sj8*x338*x341))+(IKsin(j5))+((r11*sj6*sj8))+(((-1.0)*cj6*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x344=((1.0)*sj7);
j4eval[0]=sj5;
j4eval[1]=((IKabs(((((-1.0)*r00*sj8*x344))+(((-1.0)*cj8*r01*x344))+((cj7*r02)))))+(IKabs(((((-1.0)*r20*sj8*x344))+(((-1.0)*cj8*r21*x344))+((cj7*r22))))));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj5;
j4eval[1]=((1.0)+(((5.42449275362319)*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x345=((0.144927536231884)*cj7);
IkReal x346=((0.144927536231884)*sj7);
if( IKabs(((((-1.0)*r22*x346))+(((-1.0)*r20*sj8*x345))+(((-1.0)*cj8*r21*x345))+(((14.4927536231884)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x346))+(((-1.0)*r00*sj8*x345))+(((-1.0)*cj8*r01*x345))+(((14.4927536231884)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x346))+(((-1.0)*r20*sj8*x345))+(((-1.0)*cj8*r21*x345))+(((14.4927536231884)*pz))))+IKsqr(((((-1.0)*r02*x346))+(((-1.0)*r00*sj8*x345))+(((-1.0)*cj8*r01*x345))+(((14.4927536231884)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r22*x346))+(((-1.0)*r20*sj8*x345))+(((-1.0)*cj8*r21*x345))+(((14.4927536231884)*pz))), ((((-1.0)*r02*x346))+(((-1.0)*r00*sj8*x345))+(((-1.0)*cj8*r01*x345))+(((14.4927536231884)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x347=IKsin(j4);
IkReal x348=IKcos(j4);
IkReal x349=(cj6*r21);
IkReal x350=(r02*sj7);
IkReal x351=((1.0)*cj6);
IkReal x352=(cj7*cj8);
IkReal x353=(r01*sj8);
IkReal x354=(r22*sj7);
IkReal x355=(cj8*r20);
IkReal x356=((1.0)*sj6);
IkReal x357=(sj6*sj8);
IkReal x358=(cj8*r00);
IkReal x359=(cj7*r00*sj8);
IkReal x360=(sj6*x352);
IkReal x361=(cj7*r20*sj8);
evalcond[0]=((((0.069)*x347))+(((0.01)*r21*x352))+(((0.01)*x361))+(((-1.0)*pz))+(((0.01)*x354)));
evalcond[1]=((((0.069)*x348))+(((0.01)*r01*x352))+(((-1.0)*px))+(((0.01)*x350))+(((0.01)*x359)));
evalcond[2]=(((r01*x360))+x347+((sj6*x350))+((cj7*r00*x357))+(((-1.0)*x351*x358))+((cj6*x353)));
evalcond[3]=(((sj8*x349))+((r21*x360))+((sj6*x354))+((cj7*r20*x357))+(((-1.0)*x351*x355))+(((-1.0)*x348)));
evalcond[4]=(((r21*x357))+x347+(((-1.0)*x351*x354))+(((-1.0)*x349*x352))+(((-1.0)*x355*x356))+(((-1.0)*x351*x361)));
evalcond[5]=((((-1.0)*x356*x358))+x348+(((-1.0)*r01*x351*x352))+((sj6*x353))+(((-1.0)*x351*x359))+(((-1.0)*x350*x351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x362=((0.144927536231884)*cj7);
IkReal x363=((0.144927536231884)*sj7);
if( IKabs(((((-1.0)*cj8*r21*x362))+(((14.4927536231884)*pz))+(((-1.0)*r20*sj8*x362))+(((-1.0)*r22*x363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj8*r01*x362))+(((-1.0)*r02*x363))+(((14.4927536231884)*px))+(((-1.0)*r00*sj8*x362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*r21*x362))+(((14.4927536231884)*pz))+(((-1.0)*r20*sj8*x362))+(((-1.0)*r22*x363))))+IKsqr(((((-1.0)*cj8*r01*x362))+(((-1.0)*r02*x363))+(((14.4927536231884)*px))+(((-1.0)*r00*sj8*x362))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj8*r21*x362))+(((14.4927536231884)*pz))+(((-1.0)*r20*sj8*x362))+(((-1.0)*r22*x363))), ((((-1.0)*cj8*r01*x362))+(((-1.0)*r02*x363))+(((14.4927536231884)*px))+(((-1.0)*r00*sj8*x362))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x364=IKsin(j4);
IkReal x365=IKcos(j4);
IkReal x366=(cj6*r21);
IkReal x367=(cj7*cj8);
IkReal x368=(sj6*sj7);
IkReal x369=((1.0)*cj6);
IkReal x370=(r01*sj8);
IkReal x371=((0.01)*sj7);
IkReal x372=(cj8*r20);
IkReal x373=((1.0)*sj6);
IkReal x374=(sj6*sj8);
IkReal x375=(cj8*r00);
IkReal x376=((1.0)*x365);
IkReal x377=(cj7*r00*sj8);
IkReal x378=(sj6*x367);
IkReal x379=(sj7*x369);
IkReal x380=(cj7*r20*sj8);
evalcond[0]=((((-1.0)*pz))+(((0.01)*x380))+((r22*x371))+(((0.01)*r21*x367))+(((0.069)*x364)));
evalcond[1]=((((0.01)*r01*x367))+((r02*x371))+(((0.01)*x377))+(((-1.0)*px))+(((0.069)*x365)));
evalcond[2]=(((r01*x378))+((cj7*r00*x374))+x364+((cj6*x370))+(((-1.0)*x369*x375))+((r02*x368)));
evalcond[3]=((((-1.0)*x376))+((sj8*x366))+(((-1.0)*x369*x372))+((r21*x378))+((r22*x368))+((cj7*r20*x374)));
evalcond[4]=((((-1.0)*x364))+(((-1.0)*x369*x380))+(((-1.0)*x372*x373))+(((-1.0)*x366*x367))+((r21*x374))+(((-1.0)*r22*x379)));
evalcond[5]=((((-1.0)*r02*x379))+(((-1.0)*x376))+(((-1.0)*r01*x367*x369))+(((-1.0)*x373*x375))+((sj6*x370))+(((-1.0)*x369*x377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.184349034171364)+sj5)))+(IKabs(((-1.0)+(IKsign(cj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x381=((5.42449275)*sj7);
IkReal x382=((5.42449275)*cj7);
if( IKabs(((((-1.0)*r22*x382))+((cj8*r21*x381))+((r20*sj8*x381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj8*x381))+(((-1.0)*r02*x382))+((cj8*r01*x381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x382))+((cj8*r21*x381))+((r20*sj8*x381))))+IKsqr((((r00*sj8*x381))+(((-1.0)*r02*x382))+((cj8*r01*x381))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r22*x382))+((cj8*r21*x381))+((r20*sj8*x381))), (((r00*sj8*x381))+(((-1.0)*r02*x382))+((cj8*r01*x381))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x383=IKsin(j4);
IkReal x384=IKcos(j4);
IkReal x385=((1.0)*cj7);
IkReal x386=(r02*sj7);
IkReal x387=(cj6*r21);
IkReal x388=((1.0)*cj6);
IkReal x389=(r01*sj8);
IkReal x390=(cj8*r21);
IkReal x391=(cj8*r01);
IkReal x392=((0.01)*cj7);
IkReal x393=(r22*sj7);
IkReal x394=(sj6*sj8);
IkReal x395=(r20*sj8);
IkReal x396=(cj7*cj8*sj6);
IkReal x397=(cj7*r00*sj8);
IkReal x398=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*r22*x385))+((sj7*x390))+((sj7*x395))+(((-0.184349034294497)*x383)));
evalcond[1]=(((sj7*x391))+(((-1.0)*r02*x385))+((r00*sj7*sj8))+(((-0.184349034294497)*x384)));
evalcond[2]=((((0.01)*x393))+(((-4.60872585736242e-11)*x383))+(((-1.0)*pz))+((x390*x392))+((x392*x395)));
evalcond[3]=(((r00*sj8*x392))+(((-4.60872585736242e-11)*x384))+((x391*x392))+(((-1.0)*px))+(((0.01)*x386)));
evalcond[4]=(((sj6*x386))+((cj7*sj6*x391))+((cj6*x389))+x383+(((-1.0)*cj8*r00*x388))+((cj7*r00*x394)));
evalcond[5]=((((-1.0)*cj8*r20*x388))+((cj7*sj6*x390))+((sj6*x393))+(((-1.0)*x384))+((sj8*x387))+((cj7*r20*x394)));
evalcond[6]=((((-1.0)*r20*x398))+(((0.98286084)*x383))+(((-1.0)*x388*x393))+(((-1.0)*cj6*x385*x395))+((r21*x394))+(((-1.0)*cj8*x385*x387)));
evalcond[7]=(((sj6*x389))+(((0.98286084)*x384))+(((-1.0)*r00*x398))+(((-1.0)*x386*x388))+(((-1.0)*cj6*x385*x391))+(((-1.0)*cj6*r00*sj8*x385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj5)))))+(IKabs(((0.184349034171364)+sj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x399=((5.42449275)*sj7);
IkReal x400=((5.42449275)*cj7);
if( IKabs((((cj8*r21*x399))+((r20*sj8*x399))+(((-1.0)*r22*x400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj8*x399))+(((-1.0)*r02*x400))+((cj8*r01*x399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj8*r21*x399))+((r20*sj8*x399))+(((-1.0)*r22*x400))))+IKsqr((((r00*sj8*x399))+(((-1.0)*r02*x400))+((cj8*r01*x399))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj8*r21*x399))+((r20*sj8*x399))+(((-1.0)*r22*x400))), (((r00*sj8*x399))+(((-1.0)*r02*x400))+((cj8*r01*x399))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x401=IKsin(j4);
IkReal x402=IKcos(j4);
IkReal x403=((1.0)*cj7);
IkReal x404=(r02*sj7);
IkReal x405=(cj6*r21);
IkReal x406=((1.0)*cj6);
IkReal x407=(cj8*r21);
IkReal x408=(cj6*r01);
IkReal x409=((0.01)*cj7);
IkReal x410=(r22*sj7);
IkReal x411=(sj6*sj8);
IkReal x412=(r20*sj8);
IkReal x413=(cj8*r01);
IkReal x414=(cj7*cj8*sj6);
IkReal x415=(cj7*r00*sj8);
IkReal x416=((1.0)*cj8*sj6);
evalcond[0]=(((sj7*x407))+((sj7*x412))+(((-0.184349034294497)*x401))+(((-1.0)*r22*x403)));
evalcond[1]=((((-1.0)*r02*x403))+((sj7*x413))+(((-0.184349034294497)*x402))+((r00*sj7*sj8)));
evalcond[2]=(((x407*x409))+((x409*x412))+(((-1.0)*pz))+(((0.01)*x410))+(((-4.60872585736242e-11)*x401)));
evalcond[3]=(((x409*x413))+(((0.01)*x404))+(((-1.0)*px))+((r00*sj8*x409))+(((-4.60872585736242e-11)*x402)));
evalcond[4]=(((cj7*r00*x411))+((sj8*x408))+((cj7*sj6*x413))+((sj6*x404))+x401+(((-1.0)*cj8*r00*x406)));
evalcond[5]=(((sj8*x405))+((cj7*sj6*x407))+((sj6*x410))+(((-1.0)*cj8*r20*x406))+((cj7*r20*x411))+(((-1.0)*x402)));
evalcond[6]=((((-1.0)*x406*x410))+(((-1.0)*cj6*x403*x412))+(((-1.0)*r20*x416))+((r21*x411))+(((-0.98286084)*x401))+(((-1.0)*cj8*x403*x405)));
evalcond[7]=(((r01*x411))+(((-1.0)*x404*x406))+(((-0.98286084)*x402))+(((-1.0)*r00*x416))+(((-1.0)*cj8*x403*x408))+(((-1.0)*cj6*r00*sj8*x403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x417=((0.01)*cj7);
IkReal x418=((1.0)*sj7);
CheckValue<IkReal> x419=IKPowWithIntegerCheck(sj5,-1);
if(!x419.valid){
continue;
}
CheckValue<IkReal> x420=IKPowWithIntegerCheck(((0.069)+(((0.37429)*sj5))),-1);
if(!x420.valid){
continue;
}
if( IKabs(((x419.value)*(((((-1.0)*cj8*r21*x418))+(((-1.0)*r20*sj8*x418))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x420.value)*(((((-1.0)*r00*sj8*x417))+px+(((-1.0)*cj8*r01*x417))+(((-0.01)*r02*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x419.value)*(((((-1.0)*cj8*r21*x418))+(((-1.0)*r20*sj8*x418))+((cj7*r22))))))+IKsqr(((x420.value)*(((((-1.0)*r00*sj8*x417))+px+(((-1.0)*cj8*r01*x417))+(((-0.01)*r02*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x419.value)*(((((-1.0)*cj8*r21*x418))+(((-1.0)*r20*sj8*x418))+((cj7*r22))))), ((x420.value)*(((((-1.0)*r00*sj8*x417))+px+(((-1.0)*cj8*r01*x417))+(((-0.01)*r02*sj7))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x421=IKsin(j4);
IkReal x422=IKcos(j4);
IkReal x423=((1.0)*cj7);
IkReal x424=((1.0)*cj6);
IkReal x425=(cj8*r20);
IkReal x426=(cj6*sj8);
IkReal x427=(r02*sj7);
IkReal x428=(sj6*sj8);
IkReal x429=(cj7*r00);
IkReal x430=(cj8*r21);
IkReal x431=(cj8*r01);
IkReal x432=((0.01)*cj7);
IkReal x433=(r22*sj7);
IkReal x434=(cj8*r00);
IkReal x435=(r20*sj8);
IkReal x436=((1.0)*sj6);
IkReal x437=(cj7*cj8*sj6);
IkReal x438=(sj5*x422);
IkReal x439=(sj5*x421);
evalcond[0]=(((sj7*x435))+((sj7*x430))+x439+(((-1.0)*r22*x423)));
evalcond[1]=(((sj7*x431))+(((-1.0)*r02*x423))+x438+((r00*sj7*sj8)));
evalcond[2]=(((cj7*sj6*x431))+((x428*x429))+((sj6*x427))+(((-1.0)*x424*x434))+((r01*x426))+x421);
evalcond[3]=((((0.069)*x421))+(((0.37429)*x439))+(((-1.0)*pz))+((x430*x432))+(((0.01)*x433))+((x432*x435)));
evalcond[4]=((((-1.0)*x422))+((cj7*r20*x428))+((r21*x426))+((sj6*x433))+((cj7*sj6*x430))+(((-1.0)*x424*x425)));
evalcond[5]=((((0.069)*x422))+(((0.37429)*x438))+(((-1.0)*px))+((x431*x432))+(((0.01)*x427))+(((0.01)*sj8*x429)));
evalcond[6]=(((r21*x428))+((cj5*x421))+(((-1.0)*cj6*x423*x430))+(((-1.0)*x424*x433))+(((-1.0)*r20*x423*x426))+(((-1.0)*x425*x436)));
evalcond[7]=((((-1.0)*x434*x436))+((cj5*x422))+(((-1.0)*cj6*x423*x431))+((r01*x428))+(((-1.0)*x424*x427))+(((-1.0)*r00*x423*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x440=((1.0)*r01);
IkReal x441=((1.0)*sj7);
IkReal x442=(r00*sj8);
IkReal x443=(cj7*sj6);
CheckValue<IkReal> x444=IKPowWithIntegerCheck(sj5,-1);
if(!x444.valid){
continue;
}
if( IKabs((((cj6*cj8*r00))+(((-1.0)*x442*x443))+(((-1.0)*cj6*sj8*x440))+(((-1.0)*cj8*x440*x443))+(((-1.0)*r02*sj6*x441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x444.value)*(((((-1.0)*cj8*sj7*x440))+((cj7*r02))+(((-1.0)*x441*x442)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*cj8*r00))+(((-1.0)*x442*x443))+(((-1.0)*cj6*sj8*x440))+(((-1.0)*cj8*x440*x443))+(((-1.0)*r02*sj6*x441))))+IKsqr(((x444.value)*(((((-1.0)*cj8*sj7*x440))+((cj7*r02))+(((-1.0)*x441*x442))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*cj8*r00))+(((-1.0)*x442*x443))+(((-1.0)*cj6*sj8*x440))+(((-1.0)*cj8*x440*x443))+(((-1.0)*r02*sj6*x441))), ((x444.value)*(((((-1.0)*cj8*sj7*x440))+((cj7*r02))+(((-1.0)*x441*x442))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x445=IKsin(j4);
IkReal x446=IKcos(j4);
IkReal x447=((1.0)*cj7);
IkReal x448=((1.0)*cj6);
IkReal x449=(cj8*r20);
IkReal x450=(cj6*sj8);
IkReal x451=(r02*sj7);
IkReal x452=(sj6*sj8);
IkReal x453=(cj7*r00);
IkReal x454=(cj8*r21);
IkReal x455=(cj8*r01);
IkReal x456=((0.01)*cj7);
IkReal x457=(r22*sj7);
IkReal x458=(cj8*r00);
IkReal x459=(r20*sj8);
IkReal x460=((1.0)*sj6);
IkReal x461=(cj7*cj8*sj6);
IkReal x462=(sj5*x446);
IkReal x463=(sj5*x445);
evalcond[0]=(((sj7*x454))+((sj7*x459))+x463+(((-1.0)*r22*x447)));
evalcond[1]=(((sj7*x455))+x462+(((-1.0)*r02*x447))+((r00*sj7*sj8)));
evalcond[2]=(((sj6*x451))+((cj7*sj6*x455))+((x452*x453))+x445+((r01*x450))+(((-1.0)*x448*x458)));
evalcond[3]=((((0.069)*x445))+((x454*x456))+(((0.01)*x457))+(((-1.0)*pz))+(((0.37429)*x463))+((x456*x459)));
evalcond[4]=(((sj6*x457))+((cj7*sj6*x454))+(((-1.0)*x446))+((cj7*r20*x452))+(((-1.0)*x448*x449))+((r21*x450)));
evalcond[5]=((((0.069)*x446))+((x455*x456))+(((0.01)*x451))+(((-1.0)*px))+(((0.01)*sj8*x453))+(((0.37429)*x462)));
evalcond[6]=((((-1.0)*cj6*x447*x454))+(((-1.0)*r20*x447*x450))+((cj5*x445))+(((-1.0)*x449*x460))+((r21*x452))+(((-1.0)*x448*x457)));
evalcond[7]=((((-1.0)*cj6*x447*x455))+(((-1.0)*r00*x447*x450))+((cj5*x446))+(((-1.0)*x458*x460))+((r01*x452))+(((-1.0)*x448*x451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x464=((1.0)*sj7);
CheckValue<IkReal> x465=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x465.valid){
continue;
}
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj8*x464))+(((-1.0)*cj8*r21*x464))+((cj7*r22)))),IkReal(((((-1.0)*cj8*r01*x464))+(((-1.0)*r00*sj8*x464))+((cj7*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x465.value)))+(x466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x467=IKsin(j4);
IkReal x468=IKcos(j4);
IkReal x469=((1.0)*cj7);
IkReal x470=((1.0)*cj6);
IkReal x471=(cj8*r20);
IkReal x472=(cj6*sj8);
IkReal x473=(r02*sj7);
IkReal x474=(sj6*sj8);
IkReal x475=(cj7*r00);
IkReal x476=(cj8*r21);
IkReal x477=(cj8*r01);
IkReal x478=((0.01)*cj7);
IkReal x479=(r22*sj7);
IkReal x480=(cj8*r00);
IkReal x481=(r20*sj8);
IkReal x482=((1.0)*sj6);
IkReal x483=(cj7*cj8*sj6);
IkReal x484=(sj5*x468);
IkReal x485=(sj5*x467);
evalcond[0]=(((sj7*x481))+x485+(((-1.0)*r22*x469))+((sj7*x476)));
evalcond[1]=(x484+(((-1.0)*r02*x469))+((r00*sj7*sj8))+((sj7*x477)));
evalcond[2]=(((sj6*x473))+((cj7*sj6*x477))+(((-1.0)*x470*x480))+x467+((x474*x475))+((r01*x472)));
evalcond[3]=((((0.01)*x479))+(((0.37429)*x485))+(((-1.0)*pz))+((x478*x481))+(((0.069)*x467))+((x476*x478)));
evalcond[4]=(((sj6*x479))+((r21*x472))+((cj7*sj6*x476))+((cj7*r20*x474))+(((-1.0)*x468))+(((-1.0)*x470*x471)));
evalcond[5]=((((0.01)*x473))+(((0.37429)*x484))+(((0.01)*sj8*x475))+(((-1.0)*px))+((x477*x478))+(((0.069)*x468)));
evalcond[6]=(((r21*x474))+((cj5*x467))+(((-1.0)*cj6*x469*x476))+(((-1.0)*r20*x469*x472))+(((-1.0)*x471*x482))+(((-1.0)*x470*x479)));
evalcond[7]=(((cj5*x468))+(((-1.0)*cj6*x469*x477))+(((-1.0)*r00*x469*x472))+(((-1.0)*x480*x482))+(((-1.0)*x470*x473))+((r01*x474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x486=((1.0)*sj7);
IkReal x487=(cj8*r01);
IkReal x488=(r00*sj8);
IkReal x489=((1.0)*cj6*cj7);
if( IKabs(((((-1.0)*cj8*r00*sj6))+(((-1.0)*x488*x489))+(((-1.0)*x487*x489))+((r01*sj6*sj8))+(((-1.0)*cj6*r02*x486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x486*x488))+(((-1.0)*x486*x487))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*r00*sj6))+(((-1.0)*x488*x489))+(((-1.0)*x487*x489))+((r01*sj6*sj8))+(((-1.0)*cj6*r02*x486))))+IKsqr(((((-1.0)*x486*x488))+(((-1.0)*x486*x487))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj8*r00*sj6))+(((-1.0)*x488*x489))+(((-1.0)*x487*x489))+((r01*sj6*sj8))+(((-1.0)*cj6*r02*x486))), ((((-1.0)*x486*x488))+(((-1.0)*x486*x487))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x490=IKcos(j5);
IkReal x491=((1.0)*cj6);
IkReal x492=(r02*sj7);
IkReal x493=(r00*sj8);
IkReal x494=((0.01)*cj7);
IkReal x495=(cj8*r01);
evalcond[0]=(x490+(((-1.0)*cj7*r02))+((sj7*x493))+((sj7*x495)));
evalcond[1]=((0.36442)+(((0.37429)*x490))+(((0.01)*x492))+((x493*x494))+((x494*x495))+(((-1.0)*px)));
evalcond[2]=((((-1.0)*x491*x492))+(((-1.0)*cj8*r00*sj6))+(((-1.0)*cj7*x491*x493))+(((-1.0)*cj7*x491*x495))+(((-1.0)*(IKsin(j5))))+((r01*sj6*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x496=((1.0)*sj7*sj8);
IkReal x497=((1.0)*cj8*sj7);
j4eval[0]=sj5;
j4eval[1]=((IKabs(((((-1.0)*r10*x496))+((cj7*r12))+(((-1.0)*r11*x497)))))+(IKabs(((((-1.0)*r21*x497))+((cj7*r22))+(((-1.0)*r20*x496))))));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=sj5;
j4eval[1]=((1.0)+(((5.42449275362319)*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x498=((0.144927536231884)*sj7);
IkReal x499=((0.144927536231884)*cj7);
if( IKabs(((((-1.0)*r20*sj8*x499))+(((-1.0)*cj8*r21*x499))+(((-1.0)*r22*x498))+(((14.4927536231884)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj8*r11*x499))+(((14.4927536231884)*py))+(((-1.0)*r12*x498))+(((-1.0)*r10*sj8*x499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj8*x499))+(((-1.0)*cj8*r21*x499))+(((-1.0)*r22*x498))+(((14.4927536231884)*pz))))+IKsqr(((((-1.0)*cj8*r11*x499))+(((14.4927536231884)*py))+(((-1.0)*r12*x498))+(((-1.0)*r10*sj8*x499))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r20*sj8*x499))+(((-1.0)*cj8*r21*x499))+(((-1.0)*r22*x498))+(((14.4927536231884)*pz))), ((((-1.0)*cj8*r11*x499))+(((14.4927536231884)*py))+(((-1.0)*r12*x498))+(((-1.0)*r10*sj8*x499))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x500=IKsin(j4);
IkReal x501=IKcos(j4);
IkReal x502=(cj7*r11);
IkReal x503=(cj8*sj6);
IkReal x504=(cj7*r21);
IkReal x505=(r21*sj8);
IkReal x506=(r12*sj7);
IkReal x507=((1.0)*cj6);
IkReal x508=((0.01)*cj8);
IkReal x509=(r22*sj7);
IkReal x510=(sj6*sj8);
IkReal x511=(cj7*r10);
IkReal x512=((0.01)*sj8);
IkReal x513=(cj7*r20);
IkReal x514=(cj8*x507);
evalcond[0]=((((0.069)*x500))+(((0.01)*x509))+(((-1.0)*pz))+((x512*x513))+((x504*x508)));
evalcond[1]=(((x511*x512))+(((0.069)*x501))+(((0.01)*x506))+(((-1.0)*py))+((x502*x508)));
evalcond[2]=(((sj6*x506))+((x510*x511))+x500+((cj6*r11*sj8))+((x502*x503))+(((-1.0)*r10*x514)));
evalcond[3]=(((sj6*x509))+((x510*x513))+((cj6*x505))+(((-1.0)*r20*x514))+((x503*x504))+(((-1.0)*x501)));
evalcond[4]=(((sj6*x505))+(((-1.0)*x504*x514))+(((-1.0)*x507*x509))+(((-1.0)*r20*x503))+x500+(((-1.0)*sj8*x507*x513)));
evalcond[5]=((((-1.0)*x502*x514))+(((-1.0)*x506*x507))+((r11*x510))+x501+(((-1.0)*sj8*x507*x511))+(((-1.0)*r10*x503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x515=((0.144927536231884)*sj7);
IkReal x516=((0.144927536231884)*cj7);
if( IKabs(((((-1.0)*r22*x515))+(((-1.0)*r20*sj8*x516))+(((-1.0)*cj8*r21*x516))+(((14.4927536231884)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj8*x516))+(((-1.0)*r12*x515))+(((-1.0)*cj8*r11*x516))+(((14.4927536231884)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x515))+(((-1.0)*r20*sj8*x516))+(((-1.0)*cj8*r21*x516))+(((14.4927536231884)*pz))))+IKsqr(((((-1.0)*r10*sj8*x516))+(((-1.0)*r12*x515))+(((-1.0)*cj8*r11*x516))+(((14.4927536231884)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r22*x515))+(((-1.0)*r20*sj8*x516))+(((-1.0)*cj8*r21*x516))+(((14.4927536231884)*pz))), ((((-1.0)*r10*sj8*x516))+(((-1.0)*r12*x515))+(((-1.0)*cj8*r11*x516))+(((14.4927536231884)*py))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x517=IKsin(j4);
IkReal x518=IKcos(j4);
IkReal x519=(cj7*r11);
IkReal x520=(cj8*sj6);
IkReal x521=(cj7*r21);
IkReal x522=(r21*sj8);
IkReal x523=(r12*sj7);
IkReal x524=((1.0)*cj6);
IkReal x525=((0.01)*cj8);
IkReal x526=(r22*sj7);
IkReal x527=(sj6*sj8);
IkReal x528=(cj7*r10);
IkReal x529=((0.01)*sj8);
IkReal x530=(cj7*r20);
IkReal x531=((1.0)*x518);
IkReal x532=(cj8*x524);
evalcond[0]=((((0.01)*x526))+(((-1.0)*pz))+((x521*x525))+(((0.069)*x517))+((x529*x530)));
evalcond[1]=(((x519*x525))+(((0.01)*x523))+(((-1.0)*py))+(((0.069)*x518))+((x528*x529)));
evalcond[2]=(((x519*x520))+(((-1.0)*r10*x532))+x517+((sj6*x523))+((cj6*r11*sj8))+((x527*x528)));
evalcond[3]=((((-1.0)*x531))+(((-1.0)*r20*x532))+((x520*x521))+((sj6*x526))+((x527*x530))+((cj6*x522)));
evalcond[4]=((((-1.0)*x524*x526))+(((-1.0)*r20*x520))+(((-1.0)*x521*x532))+(((-1.0)*x517))+((sj6*x522))+(((-1.0)*sj8*x524*x530)));
evalcond[5]=((((-1.0)*x523*x524))+((r11*x527))+(((-1.0)*x531))+(((-1.0)*sj8*x524*x528))+(((-1.0)*r10*x520))+(((-1.0)*x519*x532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.184349034171364)+sj5)))+(IKabs(((-1.0)+(IKsign(cj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x533=((5.42449275)*cj7);
IkReal x534=((5.42449275)*cj8*sj7);
IkReal x535=((5.42449275)*sj7*sj8);
if( IKabs(((((-1.0)*r22*x533))+((r20*x535))+((r21*x534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x534))+((r10*x535))+(((-1.0)*r12*x533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x533))+((r20*x535))+((r21*x534))))+IKsqr((((r11*x534))+((r10*x535))+(((-1.0)*r12*x533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r22*x533))+((r20*x535))+((r21*x534))), (((r11*x534))+((r10*x535))+(((-1.0)*r12*x533))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x536=IKsin(j4);
IkReal x537=IKcos(j4);
IkReal x538=(cj7*cj8);
IkReal x539=(r21*sj6);
IkReal x540=((1.0)*cj6);
IkReal x541=(cj8*r10);
IkReal x542=((1.0)*cj7);
IkReal x543=(cj8*r20);
IkReal x544=(r11*sj6);
IkReal x545=(cj8*sj7);
IkReal x546=(cj6*sj8);
IkReal x547=(r12*sj7);
IkReal x548=(r22*sj7);
IkReal x549=(cj7*sj8);
IkReal x550=((1.0)*sj6);
IkReal x551=(sj7*sj8);
evalcond[0]=(((r21*x545))+(((-1.0)*r22*x542))+((r20*x551))+(((-0.184349034294497)*x536)));
evalcond[1]=(((r11*x545))+((r10*x551))+(((-0.184349034294497)*x537))+(((-1.0)*r12*x542)));
evalcond[2]=((((-4.60872585736242e-11)*x536))+(((0.01)*r21*x538))+(((0.01)*x548))+(((-1.0)*pz))+(((0.01)*r20*x549)));
evalcond[3]=((((0.01)*r10*x549))+(((-4.60872585736242e-11)*x537))+(((0.01)*x547))+(((-1.0)*py))+(((0.01)*r11*x538)));
evalcond[4]=(((r11*x546))+((r10*sj6*x549))+(((-1.0)*x540*x541))+x536+((sj6*x547))+((x538*x544)));
evalcond[5]=(((r21*x546))+(((-1.0)*x537))+((r20*sj6*x549))+(((-1.0)*x540*x543))+((sj6*x548))+((x538*x539)));
evalcond[6]=(((sj8*x539))+(((-1.0)*r21*x538*x540))+(((-1.0)*x540*x548))+(((-1.0)*r20*x540*x549))+(((-1.0)*x543*x550))+(((0.98286084)*x536)));
evalcond[7]=((((-1.0)*x540*x547))+(((-1.0)*r10*x540*x549))+(((-1.0)*r11*x538*x540))+(((0.98286084)*x537))+(((-1.0)*x541*x550))+((sj8*x544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj5)))))+(IKabs(((0.184349034171364)+sj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x552=((5.42449275)*cj7);
IkReal x553=((5.42449275)*cj8*sj7);
IkReal x554=((5.42449275)*sj7*sj8);
if( IKabs(((((-1.0)*r22*x552))+((r20*x554))+((r21*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x552))+((r10*x554))+((r11*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x552))+((r20*x554))+((r21*x553))))+IKsqr(((((-1.0)*r12*x552))+((r10*x554))+((r11*x553))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r22*x552))+((r20*x554))+((r21*x553))), ((((-1.0)*r12*x552))+((r10*x554))+((r11*x553))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x555=IKsin(j4);
IkReal x556=IKcos(j4);
IkReal x557=(cj7*cj8);
IkReal x558=(r21*sj6);
IkReal x559=((1.0)*cj6);
IkReal x560=(cj8*r10);
IkReal x561=((1.0)*cj7);
IkReal x562=(cj8*r20);
IkReal x563=(r11*sj6);
IkReal x564=(cj8*sj7);
IkReal x565=(cj6*sj8);
IkReal x566=(r12*sj7);
IkReal x567=(r22*sj7);
IkReal x568=(cj7*sj8);
IkReal x569=((1.0)*sj6);
IkReal x570=(sj7*sj8);
evalcond[0]=(((r20*x570))+((r21*x564))+(((-0.184349034294497)*x555))+(((-1.0)*r22*x561)));
evalcond[1]=((((-0.184349034294497)*x556))+(((-1.0)*r12*x561))+((r10*x570))+((r11*x564)));
evalcond[2]=((((0.01)*r20*x568))+(((0.01)*x567))+(((-4.60872585736242e-11)*x555))+(((0.01)*r21*x557))+(((-1.0)*pz)));
evalcond[3]=((((0.01)*x566))+(((-4.60872585736242e-11)*x556))+(((-1.0)*py))+(((0.01)*r11*x557))+(((0.01)*r10*x568)));
evalcond[4]=(((sj6*x566))+(((-1.0)*x559*x560))+x555+((x557*x563))+((r11*x565))+((r10*sj6*x568)));
evalcond[5]=((((-1.0)*x556))+((sj6*x567))+((r21*x565))+((x557*x558))+(((-1.0)*x559*x562))+((r20*sj6*x568)));
evalcond[6]=((((-1.0)*r21*x557*x559))+((sj8*x558))+(((-1.0)*r20*x559*x568))+(((-1.0)*x562*x569))+(((-0.98286084)*x555))+(((-1.0)*x559*x567)));
evalcond[7]=((((-1.0)*r11*x557*x559))+(((-0.98286084)*x556))+(((-1.0)*x559*x566))+(((-1.0)*r10*x559*x568))+(((-1.0)*x560*x569))+((sj8*x563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x571=((1.0)*sj7);
IkReal x572=((0.01)*cj7);
CheckValue<IkReal> x573=IKPowWithIntegerCheck(sj5,-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574=IKPowWithIntegerCheck(((0.069)+(((0.37429)*sj5))),-1);
if(!x574.valid){
continue;
}
if( IKabs(((x573.value)*(((((-1.0)*r20*sj8*x571))+(((-1.0)*cj8*r21*x571))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x574.value)*(((((-1.0)*r10*sj8*x572))+(((-1.0)*cj8*r11*x572))+(((-0.01)*r12*sj7))+py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x573.value)*(((((-1.0)*r20*sj8*x571))+(((-1.0)*cj8*r21*x571))+((cj7*r22))))))+IKsqr(((x574.value)*(((((-1.0)*r10*sj8*x572))+(((-1.0)*cj8*r11*x572))+(((-0.01)*r12*sj7))+py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x573.value)*(((((-1.0)*r20*sj8*x571))+(((-1.0)*cj8*r21*x571))+((cj7*r22))))), ((x574.value)*(((((-1.0)*r10*sj8*x572))+(((-1.0)*cj8*r11*x572))+(((-0.01)*r12*sj7))+py))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x575=IKsin(j4);
IkReal x576=IKcos(j4);
IkReal x577=(cj7*cj8);
IkReal x578=(r21*sj6);
IkReal x579=((1.0)*cj6);
IkReal x580=(cj8*sj7);
IkReal x581=((1.0)*cj7);
IkReal x582=(cj8*r20);
IkReal x583=(r11*sj6);
IkReal x584=(cj8*r10);
IkReal x585=(cj6*sj8);
IkReal x586=(r12*sj7);
IkReal x587=(r22*sj7);
IkReal x588=(cj7*sj8);
IkReal x589=((1.0)*sj6);
IkReal x590=(sj7*sj8);
IkReal x591=(sj5*x576);
IkReal x592=(sj5*x575);
evalcond[0]=((((-1.0)*r22*x581))+x592+((r20*x590))+((r21*x580)));
evalcond[1]=(((r11*x580))+x591+(((-1.0)*r12*x581))+((r10*x590)));
evalcond[2]=(((r11*x585))+((x577*x583))+((r10*sj6*x588))+(((-1.0)*x579*x584))+x575+((sj6*x586)));
evalcond[3]=((((0.01)*r21*x577))+(((0.01)*x587))+(((0.37429)*x592))+(((-1.0)*pz))+(((0.069)*x575))+(((0.01)*r20*x588)));
evalcond[4]=(((r20*sj6*x588))+(((-1.0)*x579*x582))+(((-1.0)*x576))+((x577*x578))+((r21*x585))+((sj6*x587)));
evalcond[5]=((((0.01)*r10*x588))+(((0.01)*x586))+(((0.37429)*x591))+(((-1.0)*py))+(((0.069)*x576))+(((0.01)*r11*x577)));
evalcond[6]=(((cj5*x575))+(((-1.0)*x582*x589))+(((-1.0)*x579*x587))+(((-1.0)*r20*x579*x588))+(((-1.0)*r21*x577*x579))+((sj8*x578)));
evalcond[7]=(((cj5*x576))+((sj8*x583))+(((-1.0)*r10*x579*x588))+(((-1.0)*x584*x589))+(((-1.0)*x579*x586))+(((-1.0)*r11*x577*x579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x593=(cj7*sj6);
IkReal x594=((1.0)*cj8*r11);
IkReal x595=((1.0)*r10*sj8);
CheckValue<IkReal> x596=IKPowWithIntegerCheck(sj5,-1);
if(!x596.valid){
continue;
}
if( IKabs(((((-1.0)*cj6*r11*sj8))+((cj6*cj8*r10))+(((-1.0)*x593*x595))+(((-1.0)*x593*x594))+(((-1.0)*r12*sj6*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x596.value)*(((((-1.0)*sj7*x595))+(((-1.0)*sj7*x594))+((cj7*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r11*sj8))+((cj6*cj8*r10))+(((-1.0)*x593*x595))+(((-1.0)*x593*x594))+(((-1.0)*r12*sj6*sj7))))+IKsqr(((x596.value)*(((((-1.0)*sj7*x595))+(((-1.0)*sj7*x594))+((cj7*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*r11*sj8))+((cj6*cj8*r10))+(((-1.0)*x593*x595))+(((-1.0)*x593*x594))+(((-1.0)*r12*sj6*sj7))), ((x596.value)*(((((-1.0)*sj7*x595))+(((-1.0)*sj7*x594))+((cj7*r12))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x597=IKsin(j4);
IkReal x598=IKcos(j4);
IkReal x599=(cj7*cj8);
IkReal x600=(r21*sj6);
IkReal x601=((1.0)*cj6);
IkReal x602=(cj8*sj7);
IkReal x603=((1.0)*cj7);
IkReal x604=(cj8*r20);
IkReal x605=(r11*sj6);
IkReal x606=(cj8*r10);
IkReal x607=(cj6*sj8);
IkReal x608=(r12*sj7);
IkReal x609=(r22*sj7);
IkReal x610=(cj7*sj8);
IkReal x611=((1.0)*sj6);
IkReal x612=(sj7*sj8);
IkReal x613=(sj5*x598);
IkReal x614=(sj5*x597);
evalcond[0]=(((r20*x612))+(((-1.0)*r22*x603))+((r21*x602))+x614);
evalcond[1]=(((r11*x602))+(((-1.0)*r12*x603))+x613+((r10*x612)));
evalcond[2]=(((sj6*x608))+((r11*x607))+x597+((x599*x605))+((r10*sj6*x610))+(((-1.0)*x601*x606)));
evalcond[3]=((((0.01)*x609))+(((0.01)*r21*x599))+(((0.37429)*x614))+(((-1.0)*pz))+(((0.069)*x597))+(((0.01)*r20*x610)));
evalcond[4]=(((sj6*x609))+(((-1.0)*x598))+((r21*x607))+((r20*sj6*x610))+((x599*x600))+(((-1.0)*x601*x604)));
evalcond[5]=((((0.01)*x608))+(((0.01)*r10*x610))+(((0.01)*r11*x599))+(((0.37429)*x613))+(((-1.0)*py))+(((0.069)*x598)));
evalcond[6]=(((sj8*x600))+(((-1.0)*x604*x611))+(((-1.0)*r21*x599*x601))+(((-1.0)*r20*x601*x610))+((cj5*x597))+(((-1.0)*x601*x609)));
evalcond[7]=(((sj8*x605))+(((-1.0)*x606*x611))+(((-1.0)*r11*x599*x601))+(((-1.0)*r10*x601*x610))+((cj5*x598))+(((-1.0)*x601*x608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x615=((1.0)*sj7*sj8);
IkReal x616=((1.0)*cj8*sj7);
CheckValue<IkReal> x617=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x617.valid){
continue;
}
CheckValue<IkReal> x618 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x615))+(((-1.0)*r21*x616))+((cj7*r22)))),IkReal(((((-1.0)*r10*x615))+(((-1.0)*r11*x616))+((cj7*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x617.value)))+(x618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x619=IKsin(j4);
IkReal x620=IKcos(j4);
IkReal x621=(cj7*cj8);
IkReal x622=(r21*sj6);
IkReal x623=((1.0)*cj6);
IkReal x624=(cj8*sj7);
IkReal x625=((1.0)*cj7);
IkReal x626=(cj8*r20);
IkReal x627=(r11*sj6);
IkReal x628=(cj8*r10);
IkReal x629=(cj6*sj8);
IkReal x630=(r12*sj7);
IkReal x631=(r22*sj7);
IkReal x632=(cj7*sj8);
IkReal x633=((1.0)*sj6);
IkReal x634=(sj7*sj8);
IkReal x635=(sj5*x620);
IkReal x636=(sj5*x619);
evalcond[0]=(((r21*x624))+x636+((r20*x634))+(((-1.0)*r22*x625)));
evalcond[1]=((((-1.0)*r12*x625))+((r10*x634))+x635+((r11*x624)));
evalcond[2]=((((-1.0)*x623*x628))+((sj6*x630))+((r10*sj6*x632))+x619+((x621*x627))+((r11*x629)));
evalcond[3]=((((0.069)*x619))+(((0.01)*r20*x632))+(((0.01)*x631))+(((-1.0)*pz))+(((0.01)*r21*x621))+(((0.37429)*x636)));
evalcond[4]=(((r21*x629))+(((-1.0)*x623*x626))+((sj6*x631))+(((-1.0)*x620))+((x621*x622))+((r20*sj6*x632)));
evalcond[5]=((((0.069)*x620))+(((0.01)*x630))+(((0.01)*r10*x632))+(((-1.0)*py))+(((0.37429)*x635))+(((0.01)*r11*x621)));
evalcond[6]=((((-1.0)*x623*x631))+((sj8*x622))+(((-1.0)*x626*x633))+(((-1.0)*r21*x621*x623))+((cj5*x619))+(((-1.0)*r20*x623*x632)));
evalcond[7]=((((-1.0)*r10*x623*x632))+(((-1.0)*x623*x630))+(((-1.0)*x628*x633))+((cj5*x620))+(((-1.0)*r11*x621*x623))+((sj8*x627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x637=(r00*sj8);
IkReal x638=(cj8*r01);
IkReal x639=(cj6*cj7);
if( IKabs((((x638*x639))+((cj8*r00*sj6))+(((-1.0)*r01*sj6*sj8))+((cj6*r02*sj7))+((x637*x639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj7*x638))+((sj7*x637))+(((-1.0)*cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x638*x639))+((cj8*r00*sj6))+(((-1.0)*r01*sj6*sj8))+((cj6*r02*sj7))+((x637*x639))))+IKsqr((((sj7*x638))+((sj7*x637))+(((-1.0)*cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((x638*x639))+((cj8*r00*sj6))+(((-1.0)*r01*sj6*sj8))+((cj6*r02*sj7))+((x637*x639))), (((sj7*x638))+((sj7*x637))+(((-1.0)*cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x640=IKcos(j5);
IkReal x641=((1.0)*cj6);
IkReal x642=(r02*sj7);
IkReal x643=(r00*sj8);
IkReal x644=((0.01)*cj7);
IkReal x645=(cj8*r01);
evalcond[0]=((((-1.0)*x640))+((sj7*x645))+((sj7*x643))+(((-1.0)*cj7*r02)));
evalcond[1]=((-0.36442)+((x643*x644))+((x644*x645))+(((-1.0)*px))+(((-0.37429)*x640))+(((0.01)*x642)));
evalcond[2]=((((-1.0)*cj7*x641*x643))+(((-1.0)*cj7*x641*x645))+(((-1.0)*cj8*r00*sj6))+(((-1.0)*x641*x642))+(IKsin(j5))+((r01*sj6*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x646=(sj7*sj8);
IkReal x647=(cj8*sj7);
j4eval[0]=sj5;
j4eval[1]=((IKabs(((((-1.0)*r20*x646))+((cj7*r22))+(((-1.0)*r21*x647)))))+(IKabs(((((-1.0)*cj7*r12))+((r10*x646))+((r11*x647))))));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((1.0)+(((5.42449275362319)*sj5)));
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.184349034171364)+sj5)))+(IKabs(((-1.0)+(IKsign(cj5)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x648=((5.42449275)*cj7);
IkReal x649=((5.42449275)*cj8*sj7);
IkReal x650=((5.42449275)*sj7*sj8);
if( IKabs(((((-1.0)*r22*x648))+((r21*x649))+((r20*x650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x649))+(((-1.0)*r10*x650))+((r12*x648)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x648))+((r21*x649))+((r20*x650))))+IKsqr(((((-1.0)*r11*x649))+(((-1.0)*r10*x650))+((r12*x648))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r22*x648))+((r21*x649))+((r20*x650))), ((((-1.0)*r11*x649))+(((-1.0)*r10*x650))+((r12*x648))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x651=IKsin(j4);
IkReal x652=IKcos(j4);
IkReal x653=(cj7*cj8);
IkReal x654=(r21*sj6);
IkReal x655=((1.0)*cj6);
IkReal x656=(cj8*r10);
IkReal x657=((1.0)*cj7);
IkReal x658=(cj8*r20);
IkReal x659=(r11*sj6);
IkReal x660=(cj8*sj7);
IkReal x661=(cj6*sj8);
IkReal x662=(r12*sj7);
IkReal x663=(r22*sj7);
IkReal x664=(cj7*sj8);
IkReal x665=((1.0)*sj6);
IkReal x666=(sj7*sj8);
evalcond[0]=(((r20*x666))+(((-1.0)*r22*x657))+(((-0.184349034294497)*x651))+((r21*x660)));
evalcond[1]=((((-1.0)*r12*x657))+((r11*x660))+(((0.184349034294497)*x652))+((r10*x666)));
evalcond[2]=((((-4.60872585736242e-11)*x651))+(((0.01)*r21*x653))+(((-1.0)*pz))+(((0.01)*x663))+(((0.01)*r20*x664)));
evalcond[3]=((((4.60872585736242e-11)*x652))+(((0.01)*r10*x664))+(((0.01)*r11*x653))+(((-1.0)*py))+(((0.01)*x662)));
evalcond[4]=((((-1.0)*x652))+((r20*sj6*x664))+(((-1.0)*x655*x658))+((x653*x654))+((r21*x661))+((sj6*x663)));
evalcond[5]=(((r10*sj6*x664))+(((-1.0)*x651))+(((-1.0)*x655*x656))+((x653*x659))+((r11*x661))+((sj6*x662)));
evalcond[6]=((((-1.0)*r20*x655*x664))+((sj8*x654))+(((-1.0)*x658*x665))+(((-1.0)*r21*x653*x655))+(((-1.0)*x655*x663))+(((0.98286084)*x651)));
evalcond[7]=((((-1.0)*r10*x655*x664))+((sj8*x659))+(((-1.0)*r11*x653*x655))+(((-0.98286084)*x652))+(((-1.0)*x656*x665))+(((-1.0)*x655*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj5)))))+(IKabs(((0.184349034171364)+sj5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x667=((5.42449275)*cj7);
IkReal x668=((5.42449275)*cj8*sj7);
IkReal x669=((5.42449275)*sj7*sj8);
if( IKabs((((r20*x669))+(((-1.0)*r22*x667))+((r21*x668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x669))+(((-1.0)*r11*x668))+((r12*x667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x669))+(((-1.0)*r22*x667))+((r21*x668))))+IKsqr(((((-1.0)*r10*x669))+(((-1.0)*r11*x668))+((r12*x667))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r20*x669))+(((-1.0)*r22*x667))+((r21*x668))), ((((-1.0)*r10*x669))+(((-1.0)*r11*x668))+((r12*x667))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x670=IKsin(j4);
IkReal x671=IKcos(j4);
IkReal x672=(cj7*cj8);
IkReal x673=(r21*sj6);
IkReal x674=((1.0)*cj6);
IkReal x675=(cj8*r10);
IkReal x676=((1.0)*cj7);
IkReal x677=(cj8*r20);
IkReal x678=(r11*sj6);
IkReal x679=(cj8*sj7);
IkReal x680=(cj6*sj8);
IkReal x681=(r12*sj7);
IkReal x682=(r22*sj7);
IkReal x683=(cj7*sj8);
IkReal x684=((1.0)*sj6);
IkReal x685=(sj7*sj8);
evalcond[0]=(((r21*x679))+(((-1.0)*r22*x676))+((r20*x685))+(((-0.184349034294497)*x670)));
evalcond[1]=((((0.184349034294497)*x671))+((r11*x679))+((r10*x685))+(((-1.0)*r12*x676)));
evalcond[2]=((((0.01)*x682))+(((-1.0)*pz))+(((-4.60872585736242e-11)*x670))+(((0.01)*r20*x683))+(((0.01)*r21*x672)));
evalcond[3]=((((0.01)*r10*x683))+(((0.01)*x681))+(((-1.0)*py))+(((4.60872585736242e-11)*x671))+(((0.01)*r11*x672)));
evalcond[4]=(((x672*x673))+((r21*x680))+((sj6*x682))+(((-1.0)*x671))+(((-1.0)*x674*x677))+((r20*sj6*x683)));
evalcond[5]=(((x672*x678))+((sj6*x681))+((r10*sj6*x683))+(((-1.0)*x670))+(((-1.0)*x674*x675))+((r11*x680)));
evalcond[6]=((((-0.98286084)*x670))+(((-1.0)*r21*x672*x674))+(((-1.0)*x674*x682))+(((-1.0)*x677*x684))+((sj8*x673))+(((-1.0)*r20*x674*x683)));
evalcond[7]=((((0.98286084)*x671))+(((-1.0)*r11*x672*x674))+(((-1.0)*x675*x684))+(((-1.0)*r10*x674*x683))+(((-1.0)*x674*x681))+((sj8*x678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x686=((0.144927536231884)*sj7);
IkReal x687=((0.144927536231884)*cj7);
if( IKabs(((((-1.0)*cj8*r21*x687))+(((14.4927536231884)*pz))+(((-1.0)*r22*x686))+(((-1.0)*r20*sj8*x687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj8*x687))+(((-14.4927536231884)*py))+((cj8*r11*x687))+((r12*x686)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*r21*x687))+(((14.4927536231884)*pz))+(((-1.0)*r22*x686))+(((-1.0)*r20*sj8*x687))))+IKsqr((((r10*sj8*x687))+(((-14.4927536231884)*py))+((cj8*r11*x687))+((r12*x686))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj8*r21*x687))+(((14.4927536231884)*pz))+(((-1.0)*r22*x686))+(((-1.0)*r20*sj8*x687))), (((r10*sj8*x687))+(((-14.4927536231884)*py))+((cj8*r11*x687))+((r12*x686))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x688=IKcos(j4);
IkReal x689=IKsin(j4);
IkReal x690=(cj7*cj8);
IkReal x691=(r21*sj6);
IkReal x692=((1.0)*cj6);
IkReal x693=(cj8*r20);
IkReal x694=(r11*sj6);
IkReal x695=(cj8*r10);
IkReal x696=(cj6*sj8);
IkReal x697=(r12*sj7);
IkReal x698=(r22*sj7);
IkReal x699=(cj7*sj8);
IkReal x700=((1.0)*sj6);
IkReal x701=((1.0)*x688);
evalcond[0]=((((0.01)*r21*x690))+(((-1.0)*pz))+(((0.01)*x698))+(((0.01)*r20*x699))+(((0.069)*x689)));
evalcond[1]=((((0.01)*r11*x690))+(((-0.069)*x688))+(((-1.0)*py))+(((0.01)*x697))+(((0.01)*r10*x699)));
evalcond[2]=(((r20*sj6*x699))+((sj6*x698))+((x690*x691))+(((-1.0)*x692*x693))+(((-1.0)*x701))+((r21*x696)));
evalcond[3]=(((sj6*x697))+((x690*x694))+(((-1.0)*x692*x695))+((r11*x696))+((r10*sj6*x699))+(((-1.0)*x689)));
evalcond[4]=((((-1.0)*x693*x700))+((sj8*x691))+(((-1.0)*r20*x692*x699))+(((-1.0)*x692*x698))+x689+(((-1.0)*r21*x690*x692)));
evalcond[5]=((((-1.0)*r10*x692*x699))+(((-1.0)*x695*x700))+((sj8*x694))+(((-1.0)*x692*x697))+(((-1.0)*x701))+(((-1.0)*r11*x690*x692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x702=((0.144927536231884)*sj7);
IkReal x703=((0.144927536231884)*cj7);
if( IKabs(((((-1.0)*r20*sj8*x703))+(((14.4927536231884)*pz))+(((-1.0)*r22*x702))+(((-1.0)*cj8*r21*x703)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-14.4927536231884)*py))+((cj8*r11*x703))+((r10*sj8*x703))+((r12*x702)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj8*x703))+(((14.4927536231884)*pz))+(((-1.0)*r22*x702))+(((-1.0)*cj8*r21*x703))))+IKsqr(((((-14.4927536231884)*py))+((cj8*r11*x703))+((r10*sj8*x703))+((r12*x702))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r20*sj8*x703))+(((14.4927536231884)*pz))+(((-1.0)*r22*x702))+(((-1.0)*cj8*r21*x703))), ((((-14.4927536231884)*py))+((cj8*r11*x703))+((r10*sj8*x703))+((r12*x702))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x704=IKcos(j4);
IkReal x705=IKsin(j4);
IkReal x706=(cj7*cj8);
IkReal x707=(r21*sj6);
IkReal x708=((1.0)*cj6);
IkReal x709=(cj8*r20);
IkReal x710=(r11*sj6);
IkReal x711=(cj8*r10);
IkReal x712=(cj6*sj8);
IkReal x713=(r12*sj7);
IkReal x714=(r22*sj7);
IkReal x715=(cj7*sj8);
IkReal x716=((1.0)*sj6);
IkReal x717=((1.0)*x705);
evalcond[0]=((((0.01)*r20*x715))+(((0.01)*x714))+(((-1.0)*pz))+(((0.01)*r21*x706))+(((0.069)*x705)));
evalcond[1]=((((0.01)*r11*x706))+(((0.01)*x713))+(((-1.0)*py))+(((-0.069)*x704))+(((0.01)*r10*x715)));
evalcond[2]=(((x706*x707))+(((-1.0)*x704))+((r21*x712))+((r20*sj6*x715))+(((-1.0)*x708*x709))+((sj6*x714)));
evalcond[3]=(((r11*x712))+((x706*x710))+((r10*sj6*x715))+(((-1.0)*x717))+(((-1.0)*x708*x711))+((sj6*x713)));
evalcond[4]=((((-1.0)*x711*x716))+(((-1.0)*x708*x713))+x704+((sj8*x710))+(((-1.0)*r10*x708*x715))+(((-1.0)*r11*x706*x708)));
evalcond[5]=((((-1.0)*r21*x706*x708))+(((-1.0)*x709*x716))+(((-1.0)*r20*x708*x715))+(((-1.0)*x717))+(((-1.0)*x708*x714))+((sj8*x707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x718=((0.01)*cj7);
CheckValue<IkReal> x719=IKPowWithIntegerCheck(((0.069)+(((0.37429)*sj5))),-1);
if(!x719.valid){
continue;
}
CheckValue<IkReal> x720=IKPowWithIntegerCheck(sj5,-1);
if(!x720.valid){
continue;
}
if( IKabs(((x719.value)*(((((-1.0)*cj8*r21*x718))+(((-1.0)*r20*sj8*x718))+(((-0.01)*r22*sj7))+pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x720.value)*((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x719.value)*(((((-1.0)*cj8*r21*x718))+(((-1.0)*r20*sj8*x718))+(((-0.01)*r22*sj7))+pz))))+IKsqr(((x720.value)*((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x719.value)*(((((-1.0)*cj8*r21*x718))+(((-1.0)*r20*sj8*x718))+(((-0.01)*r22*sj7))+pz))), ((x720.value)*((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x721=IKsin(j4);
IkReal x722=IKcos(j4);
IkReal x723=(cj7*r11);
IkReal x724=((1.0)*r22);
IkReal x725=(cj8*sj6);
IkReal x726=(cj7*r21);
IkReal x727=(cj8*sj7);
IkReal x728=(r21*sj8);
IkReal x729=(r12*sj7);
IkReal x730=((1.0)*cj6);
IkReal x731=((0.01)*cj8);
IkReal x732=(r22*sj7);
IkReal x733=(sj6*sj8);
IkReal x734=(cj7*r10);
IkReal x735=((0.01)*sj8);
IkReal x736=(cj7*r20);
IkReal x737=(sj7*sj8);
IkReal x738=(cj8*x730);
IkReal x739=(sj5*x722);
IkReal x740=(sj5*x721);
IkReal x741=((1.0)*x722);
evalcond[0]=(((r20*x737))+x740+((r21*x727))+(((-1.0)*cj7*x724)));
evalcond[1]=(((r10*x737))+(((-1.0)*x739))+(((-1.0)*cj7*r12))+((r11*x727)));
evalcond[2]=(((x735*x736))+(((0.01)*x732))+((x726*x731))+(((-1.0)*pz))+(((0.37429)*x740))+(((0.069)*x721)));
evalcond[3]=(((x733*x736))+(((-1.0)*r20*x738))+((x725*x726))+((cj6*x728))+((sj6*x732))+(((-1.0)*x741)));
evalcond[4]=(((x723*x725))+(((-1.0)*x721))+((x733*x734))+((cj6*r11*sj8))+((sj6*x729))+(((-1.0)*r10*x738)));
evalcond[5]=(((x723*x731))+(((0.01)*x729))+((x734*x735))+(((-1.0)*py))+(((-0.069)*x722))+(((-0.37429)*x739)));
evalcond[6]=((((-1.0)*cj6*sj7*x724))+((cj5*x721))+(((-1.0)*r20*x725))+((sj6*x728))+(((-1.0)*x726*x738))+(((-1.0)*sj8*x730*x736)));
evalcond[7]=((((-1.0)*x723*x738))+(((-1.0)*cj5*x741))+((r11*x733))+(((-1.0)*sj8*x730*x734))+(((-1.0)*r10*x725))+(((-1.0)*x729*x730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x742=(cj7*sj6);
IkReal x743=(cj8*r21);
IkReal x744=((1.0)*r20);
CheckValue<IkReal> x745=IKPowWithIntegerCheck(sj5,-1);
if(!x745.valid){
continue;
}
if( IKabs(((x745.value)*(((((-1.0)*sj7*sj8*x744))+(((-1.0)*sj7*x743))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x742*x743))+(((-1.0)*cj6*cj8*x744))+((cj6*r21*sj8))+((r22*sj6*sj7))+((r20*sj8*x742)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x745.value)*(((((-1.0)*sj7*sj8*x744))+(((-1.0)*sj7*x743))+((cj7*r22))))))+IKsqr((((x742*x743))+(((-1.0)*cj6*cj8*x744))+((cj6*r21*sj8))+((r22*sj6*sj7))+((r20*sj8*x742))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x745.value)*(((((-1.0)*sj7*sj8*x744))+(((-1.0)*sj7*x743))+((cj7*r22))))), (((x742*x743))+(((-1.0)*cj6*cj8*x744))+((cj6*r21*sj8))+((r22*sj6*sj7))+((r20*sj8*x742))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x746=IKsin(j4);
IkReal x747=IKcos(j4);
IkReal x748=(cj7*r11);
IkReal x749=((1.0)*r22);
IkReal x750=(cj8*sj6);
IkReal x751=(cj7*r21);
IkReal x752=(cj8*sj7);
IkReal x753=(r21*sj8);
IkReal x754=(r12*sj7);
IkReal x755=((1.0)*cj6);
IkReal x756=((0.01)*cj8);
IkReal x757=(r22*sj7);
IkReal x758=(sj6*sj8);
IkReal x759=(cj7*r10);
IkReal x760=((0.01)*sj8);
IkReal x761=(cj7*r20);
IkReal x762=(sj7*sj8);
IkReal x763=(cj8*x755);
IkReal x764=(sj5*x747);
IkReal x765=(sj5*x746);
IkReal x766=((1.0)*x747);
evalcond[0]=(((r20*x762))+(((-1.0)*cj7*x749))+((r21*x752))+x765);
evalcond[1]=(((r10*x762))+(((-1.0)*cj7*r12))+(((-1.0)*x764))+((r11*x752)));
evalcond[2]=((((0.37429)*x765))+((x751*x756))+((x760*x761))+(((0.069)*x746))+(((-1.0)*pz))+(((0.01)*x757)));
evalcond[3]=((((-1.0)*x766))+(((-1.0)*r20*x763))+((cj6*x753))+((x758*x761))+((sj6*x757))+((x750*x751)));
evalcond[4]=(((x758*x759))+(((-1.0)*r10*x763))+((sj6*x754))+((cj6*r11*sj8))+(((-1.0)*x746))+((x748*x750)));
evalcond[5]=(((x759*x760))+(((-1.0)*py))+(((-0.37429)*x764))+(((0.01)*x754))+(((-0.069)*x747))+((x748*x756)));
evalcond[6]=((((-1.0)*x751*x763))+(((-1.0)*r20*x750))+(((-1.0)*cj6*sj7*x749))+(((-1.0)*sj8*x755*x761))+((sj6*x753))+((cj5*x746)));
evalcond[7]=((((-1.0)*x754*x755))+(((-1.0)*r10*x750))+((r11*x758))+(((-1.0)*sj8*x755*x759))+(((-1.0)*cj5*x766))+(((-1.0)*x748*x763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x767=(sj7*sj8);
IkReal x768=(cj8*sj7);
CheckValue<IkReal> x769=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x769.valid){
continue;
}
CheckValue<IkReal> x770 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x768))+(((-1.0)*r20*x767))+((cj7*r22)))),IkReal((((r10*x767))+(((-1.0)*cj7*r12))+((r11*x768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x769.value)))+(x770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x771=IKsin(j4);
IkReal x772=IKcos(j4);
IkReal x773=(cj7*r11);
IkReal x774=((1.0)*r22);
IkReal x775=(cj8*sj6);
IkReal x776=(cj7*r21);
IkReal x777=(cj8*sj7);
IkReal x778=(r21*sj8);
IkReal x779=(r12*sj7);
IkReal x780=((1.0)*cj6);
IkReal x781=((0.01)*cj8);
IkReal x782=(r22*sj7);
IkReal x783=(sj6*sj8);
IkReal x784=(cj7*r10);
IkReal x785=((0.01)*sj8);
IkReal x786=(cj7*r20);
IkReal x787=(sj7*sj8);
IkReal x788=(cj8*x780);
IkReal x789=(sj5*x772);
IkReal x790=(sj5*x771);
IkReal x791=((1.0)*x772);
evalcond[0]=(((r20*x787))+(((-1.0)*cj7*x774))+((r21*x777))+x790);
evalcond[1]=(((r10*x787))+(((-1.0)*cj7*r12))+((r11*x777))+(((-1.0)*x789)));
evalcond[2]=((((0.37429)*x790))+((x785*x786))+(((-1.0)*pz))+(((0.069)*x771))+(((0.01)*x782))+((x776*x781)));
evalcond[3]=((((-1.0)*x791))+((sj6*x782))+((x783*x786))+((cj6*x778))+(((-1.0)*r20*x788))+((x775*x776)));
evalcond[4]=(((x773*x775))+((x783*x784))+((sj6*x779))+(((-1.0)*r10*x788))+((cj6*r11*sj8))+(((-1.0)*x771)));
evalcond[5]=(((x773*x781))+((x784*x785))+(((-1.0)*py))+(((0.01)*x779))+(((-0.37429)*x789))+(((-0.069)*x772)));
evalcond[6]=((((-1.0)*r20*x775))+(((-1.0)*sj8*x780*x786))+(((-1.0)*cj6*sj7*x774))+((sj6*x778))+(((-1.0)*x776*x788))+((cj5*x771)));
evalcond[7]=((((-1.0)*x773*x788))+(((-1.0)*sj8*x780*x784))+(((-1.0)*r10*x775))+((r11*x783))+(((-1.0)*cj5*x791))+(((-1.0)*x779*x780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x792=(cj6*sj8);
IkReal x793=(cj6*cj8);
IkReal x794=((1.0)*r11);
IkReal x795=(sj6*sj7);
IkReal x796=(cj7*cj8*sj6);
IkReal x797=(cj7*sj6*sj8);
CheckValue<IkReal> x798=IKPowWithIntegerCheck(cj3,-1);
if(!x798.valid){
continue;
}
if( IKabs(((x798.value)*(((((-1.0)*x794*x796))+(((-1.0)*x792*x794))+((r10*x793))+(((-1.0)*r12*x795))+(((-1.0)*r10*x797)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x797))+(((-1.0)*r20*x793))+((r21*x796))+((r21*x792))+((r22*x795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x798.value)*(((((-1.0)*x794*x796))+(((-1.0)*x792*x794))+((r10*x793))+(((-1.0)*r12*x795))+(((-1.0)*r10*x797))))))+IKsqr((((r20*x797))+(((-1.0)*r20*x793))+((r21*x796))+((r21*x792))+((r22*x795))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x798.value)*(((((-1.0)*x794*x796))+(((-1.0)*x792*x794))+((r10*x793))+(((-1.0)*r12*x795))+(((-1.0)*r10*x797))))), (((r20*x797))+(((-1.0)*r20*x793))+((r21*x796))+((r21*x792))+((r22*x795))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x799=IKsin(j4);
IkReal x800=(cj6*sj8);
IkReal x801=(cj7*sj6);
IkReal x802=(sj6*sj7);
IkReal x803=((1.0)*cj6*cj8);
evalcond[0]=(((r21*x800))+((r22*x802))+((cj8*r21*x801))+(((-1.0)*r20*x803))+((r20*sj8*x801))+(((-1.0)*(IKcos(j4)))));
evalcond[1]=(((cj8*r11*x801))+((r12*x802))+((r11*x800))+((r10*sj8*x801))+((cj3*x799))+(((-1.0)*r10*x803)));
evalcond[2]=(((r00*sj8*x801))+(((-1.0)*sj3*x799))+((cj8*r01*x801))+(((-1.0)*r00*x803))+((r02*x802))+((r01*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x804=((1.0)*sj7);
IkReal x805=(cj3*sj8);
IkReal x806=(cj8*r11);
IkReal x807=(cj7*r02);
IkReal x808=(sj3*sj8);
IkReal x809=(cj8*r01);
IkReal x810=(cj7*r12);
if( IKabs(((((-1.0)*r10*x804*x805))+((cj3*x810))+(((-1.0)*cj3*x804*x806))+((sj3*sj7*x809))+(((-1.0)*sj3*x807))+((r00*sj7*x808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x804*x805))+(((-1.0)*r10*x804*x808))+(((-1.0)*cj3*x804*x809))+((cj3*x807))+((sj3*x810))+(((-1.0)*sj3*x804*x806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x804*x805))+((cj3*x810))+(((-1.0)*cj3*x804*x806))+((sj3*sj7*x809))+(((-1.0)*sj3*x807))+((r00*sj7*x808))))+IKsqr(((((-1.0)*r00*x804*x805))+(((-1.0)*r10*x804*x808))+(((-1.0)*cj3*x804*x809))+((cj3*x807))+((sj3*x810))+(((-1.0)*sj3*x804*x806))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r10*x804*x805))+((cj3*x810))+(((-1.0)*cj3*x804*x806))+((sj3*sj7*x809))+(((-1.0)*sj3*x807))+((r00*sj7*x808))), ((((-1.0)*r00*x804*x805))+(((-1.0)*r10*x804*x808))+(((-1.0)*cj3*x804*x809))+((cj3*x807))+((sj3*x810))+(((-1.0)*sj3*x804*x806))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x811=IKcos(j5);
IkReal x812=IKsin(j5);
IkReal x813=(cj8*r11);
IkReal x814=((1.0)*cj6);
IkReal x815=(r02*sj7);
IkReal x816=(r12*sj7);
IkReal x817=((1.0)*cj7);
IkReal x818=(cj8*r01);
IkReal x819=(sj6*sj8);
IkReal x820=(sj7*sj8);
IkReal x821=((0.01)*cj7);
IkReal x822=(r10*sj8);
IkReal x823=(cj3*x811);
IkReal x824=(cj7*r00*sj8);
IkReal x825=(sj3*x811);
IkReal x826=(cj3*x812);
IkReal x827=(sj3*x812);
IkReal x828=((1.0)*cj8*sj6);
IkReal x829=((1.0)*x827);
evalcond[0]=(((r10*x820))+(((-1.0)*r12*x817))+((sj7*x813))+x826+x825);
evalcond[1]=((((-1.0)*x829))+((r00*x820))+((sj7*x818))+x823+(((-1.0)*r02*x817)));
evalcond[2]=((((0.37429)*x823))+(((0.36442)*cj3))+(((-1.0)*px))+((r00*sj8*x821))+(((-0.069)*sj3))+(((-0.37429)*x827))+((x818*x821))+(((0.01)*x815)));
evalcond[3]=((((0.37429)*x825))+(((0.37429)*x826))+((x821*x822))+(((0.069)*cj3))+(((0.36442)*sj3))+((x813*x821))+(((-1.0)*py))+(((0.01)*x816)));
evalcond[4]=(((r11*x819))+(((-1.0)*x829))+(((-1.0)*x814*x816))+(((-1.0)*cj7*x813*x814))+(((-1.0)*r10*x828))+x823+(((-1.0)*cj7*x814*x822)));
evalcond[5]=((((-1.0)*cj7*x814*x818))+((r01*x819))+(((-1.0)*x814*x824))+(((-1.0)*x814*x815))+(((-1.0)*x825))+(((-1.0)*x826))+(((-1.0)*r00*x828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x830=((1.0)*cj3);
IkReal x831=(cj7*r12);
IkReal x832=(r00*sj8);
IkReal x833=(cj8*r11);
IkReal x834=(cj8*r01);
IkReal x835=(cj7*r02);
IkReal x836=(r10*sj8);
IkReal x837=(cj3*sj7);
IkReal x838=((1.0)*sj3*sj7);
if( IKabs(((((-1.0)*x832*x838))+((x833*x837))+((x836*x837))+(((-1.0)*x830*x831))+(((-1.0)*x834*x838))+((sj3*x835)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x836*x838))+(((-1.0)*x833*x838))+(((-1.0)*sj7*x830*x834))+(((-1.0)*sj7*x830*x832))+((cj3*x835))+((sj3*x831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x832*x838))+((x833*x837))+((x836*x837))+(((-1.0)*x830*x831))+(((-1.0)*x834*x838))+((sj3*x835))))+IKsqr(((((-1.0)*x836*x838))+(((-1.0)*x833*x838))+(((-1.0)*sj7*x830*x834))+(((-1.0)*sj7*x830*x832))+((cj3*x835))+((sj3*x831))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x832*x838))+((x833*x837))+((x836*x837))+(((-1.0)*x830*x831))+(((-1.0)*x834*x838))+((sj3*x835))), ((((-1.0)*x836*x838))+(((-1.0)*x833*x838))+(((-1.0)*sj7*x830*x834))+(((-1.0)*sj7*x830*x832))+((cj3*x835))+((sj3*x831))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x839=IKcos(j5);
IkReal x840=IKsin(j5);
IkReal x841=(cj8*r11);
IkReal x842=((1.0)*cj6);
IkReal x843=(r02*sj7);
IkReal x844=(r12*sj7);
IkReal x845=((1.0)*cj7);
IkReal x846=(cj8*r01);
IkReal x847=(sj6*sj8);
IkReal x848=(sj7*sj8);
IkReal x849=((0.01)*cj7);
IkReal x850=(r10*sj8);
IkReal x851=(sj3*x839);
IkReal x852=(cj7*r00*sj8);
IkReal x853=(cj3*x839);
IkReal x854=(sj3*x840);
IkReal x855=(cj3*x840);
IkReal x856=((1.0)*cj8*sj6);
IkReal x857=((1.0)*x855);
evalcond[0]=((((-1.0)*r02*x845))+((sj7*x846))+((r00*x848))+x853+x854);
evalcond[1]=((((-1.0)*x857))+((sj7*x841))+((r10*x848))+(((-1.0)*r12*x845))+x851);
evalcond[2]=((((0.01)*x843))+((x846*x849))+(((0.36442)*cj3))+(((-1.0)*px))+(((0.069)*sj3))+((r00*sj8*x849))+(((0.37429)*x854))+(((0.37429)*x853)));
evalcond[3]=((((0.01)*x844))+(((-0.069)*cj3))+(((0.36442)*sj3))+(((-1.0)*py))+(((-0.37429)*x855))+((x849*x850))+(((0.37429)*x851))+((x841*x849)));
evalcond[4]=((((-1.0)*cj7*x842*x846))+(((-1.0)*x857))+(((-1.0)*x842*x852))+(((-1.0)*r00*x856))+(((-1.0)*x842*x843))+((r01*x847))+x851);
evalcond[5]=((((-1.0)*x854))+(((-1.0)*x853))+(((-1.0)*cj7*x841*x842))+(((-1.0)*cj7*x842*x850))+(((-1.0)*x842*x844))+(((-1.0)*r10*x856))+((r11*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x858=(sj7*sj8);
IkReal x859=(cj8*sj7);
if( IKabs((((r00*x858))+(((-1.0)*cj7*r02))+((r01*x859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x859))+((cj7*r12))+(((-1.0)*r10*x858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x858))+(((-1.0)*cj7*r02))+((r01*x859))))+IKsqr(((((-1.0)*r11*x859))+((cj7*r12))+(((-1.0)*r10*x858))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r00*x858))+(((-1.0)*cj7*r02))+((r01*x859))), ((((-1.0)*r11*x859))+((cj7*r12))+(((-1.0)*r10*x858))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x860=IKsin(j5);
IkReal x861=IKcos(j5);
IkReal x862=((1.0)*cj8);
IkReal x863=(cj6*cj7);
IkReal x864=(r02*sj7);
IkReal x865=(cj8*sj7);
IkReal x866=((1.0)*cj6);
IkReal x867=(r12*sj7);
IkReal x868=((1.0)*cj7);
IkReal x869=(sj6*sj8);
IkReal x870=(sj7*sj8);
IkReal x871=((0.01)*cj7);
IkReal x872=(r10*sj8);
IkReal x873=((1.0)*x860);
IkReal x874=(cj7*r00*sj8);
evalcond[0]=(((r11*x865))+((r10*x870))+x861+(((-1.0)*r12*x868)));
evalcond[1]=(((r01*x865))+((r00*x870))+(((-1.0)*r02*x868))+(((-1.0)*x873)));
evalcond[2]=((-0.069)+((r00*sj8*x871))+(((0.01)*x864))+(((-1.0)*px))+((cj8*r01*x871))+(((-0.37429)*x860)));
evalcond[3]=((0.36442)+((x871*x872))+((cj8*r11*x871))+(((0.01)*x867))+(((-1.0)*py))+(((0.37429)*x861)));
evalcond[4]=(((r11*x869))+(((-1.0)*r10*sj6*x862))+(((-1.0)*x866*x867))+(((-1.0)*r11*x862*x863))+(((-1.0)*x863*x872))+(((-1.0)*x873)));
evalcond[5]=(((r01*x869))+(((-1.0)*x861))+(((-1.0)*x864*x866))+(((-1.0)*r01*x862*x863))+(((-1.0)*r00*sj8*x863))+(((-1.0)*r00*sj6*x862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x875=((1.0)*sj7);
if( IKabs(((((-1.0)*r00*sj8*x875))+((cj7*r02))+(((-1.0)*cj8*r01*x875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj8*x875))+(((-1.0)*cj8*r11*x875))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj8*x875))+((cj7*r02))+(((-1.0)*cj8*r01*x875))))+IKsqr(((((-1.0)*r10*sj8*x875))+(((-1.0)*cj8*r11*x875))+((cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r00*sj8*x875))+((cj7*r02))+(((-1.0)*cj8*r01*x875))), ((((-1.0)*r10*sj8*x875))+(((-1.0)*cj8*r11*x875))+((cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x876=IKsin(j5);
IkReal x877=IKcos(j5);
IkReal x878=((1.0)*cj8);
IkReal x879=(cj6*cj7);
IkReal x880=(r02*sj7);
IkReal x881=(cj8*sj7);
IkReal x882=((1.0)*cj6);
IkReal x883=(r12*sj7);
IkReal x884=((1.0)*cj7);
IkReal x885=(sj6*sj8);
IkReal x886=(sj7*sj8);
IkReal x887=((0.01)*cj7);
IkReal x888=(r10*sj8);
IkReal x889=(cj7*r00*sj8);
evalcond[0]=(((r11*x881))+((r10*x886))+(((-1.0)*r12*x884))+x877);
evalcond[1]=(((r00*x886))+((r01*x881))+x876+(((-1.0)*r02*x884)));
evalcond[2]=((0.069)+(((-1.0)*px))+(((0.37429)*x876))+((r00*sj8*x887))+((cj8*r01*x887))+(((0.01)*x880)));
evalcond[3]=((0.36442)+((x887*x888))+(((-1.0)*py))+(((0.37429)*x877))+((cj8*r11*x887))+(((0.01)*x883)));
evalcond[4]=(((r01*x885))+x877+(((-1.0)*r01*x878*x879))+(((-1.0)*r00*sj8*x879))+(((-1.0)*r00*sj6*x878))+(((-1.0)*x880*x882)));
evalcond[5]=(((r11*x885))+(((-1.0)*x879*x888))+(((-1.0)*x882*x883))+(((-1.0)*r10*sj6*x878))+(((-1.0)*x876))+(((-1.0)*r11*x878*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x890=((1.0)*sj7*sj8);
IkReal x891=((1.0)*cj8*sj7);
if( IKabs((((cj7*r22))+(((-1.0)*r21*x891))+(((-1.0)*r20*x890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x891))+(((-1.0)*r10*x890))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj7*r22))+(((-1.0)*r21*x891))+(((-1.0)*r20*x890))))+IKsqr(((((-1.0)*r11*x891))+(((-1.0)*r10*x890))+((cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj7*r22))+(((-1.0)*r21*x891))+(((-1.0)*r20*x890))), ((((-1.0)*r11*x891))+(((-1.0)*r10*x890))+((cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x892=IKsin(j5);
IkReal x893=IKcos(j5);
IkReal x894=((1.0)*cj7);
IkReal x895=(cj8*r11);
IkReal x896=(r12*sj7);
IkReal x897=((1.0)*cj6);
IkReal x898=(cj8*r21);
IkReal x899=((0.01)*cj7);
IkReal x900=(r22*sj7);
IkReal x901=(sj6*sj8);
IkReal x902=(r20*sj8);
IkReal x903=(r10*sj8);
IkReal x904=((1.0)*cj8*sj6);
evalcond[0]=(((sj7*x902))+((sj7*x898))+(((-1.0)*r22*x894))+x892);
evalcond[1]=((((-1.0)*r12*x894))+((sj7*x903))+((sj7*x895))+x893);
evalcond[2]=((0.069)+((x898*x899))+(((0.37429)*x892))+(((0.01)*x900))+(((-1.0)*pz))+((x899*x902)));
evalcond[3]=((0.36442)+(((0.37429)*x893))+((x895*x899))+(((-1.0)*py))+((x899*x903))+(((0.01)*x896)));
evalcond[4]=(((r21*x901))+(((-1.0)*x897*x900))+(((-1.0)*r20*x904))+(((-1.0)*cj6*x894*x902))+(((-1.0)*cj6*x894*x898))+x893);
evalcond[5]=((((-1.0)*x896*x897))+((r11*x901))+(((-1.0)*cj6*x894*x903))+(((-1.0)*x892))+(((-1.0)*cj6*x894*x895))+(((-1.0)*r10*x904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x905=(cj8*sj7);
IkReal x906=(sj7*sj8);
if( IKabs((((r21*x905))+((r20*x906))+(((-1.0)*cj7*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x905))+(((-1.0)*r10*x906))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x905))+((r20*x906))+(((-1.0)*cj7*r22))))+IKsqr(((((-1.0)*r11*x905))+(((-1.0)*r10*x906))+((cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r21*x905))+((r20*x906))+(((-1.0)*cj7*r22))), ((((-1.0)*r11*x905))+(((-1.0)*r10*x906))+((cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x907=IKsin(j5);
IkReal x908=IKcos(j5);
IkReal x909=((1.0)*cj7);
IkReal x910=(cj8*r11);
IkReal x911=(r12*sj7);
IkReal x912=((1.0)*cj6);
IkReal x913=(cj8*r21);
IkReal x914=((0.01)*cj7);
IkReal x915=(r22*sj7);
IkReal x916=(sj6*sj8);
IkReal x917=(r20*sj8);
IkReal x918=(r10*sj8);
IkReal x919=((1.0)*x907);
IkReal x920=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*r12*x909))+((sj7*x918))+((sj7*x910))+x908);
evalcond[1]=((((-1.0)*r22*x909))+(((-1.0)*x919))+((sj7*x917))+((sj7*x913)));
evalcond[2]=((-0.069)+((x914*x917))+(((-1.0)*pz))+(((-0.37429)*x907))+(((0.01)*x915))+((x913*x914)));
evalcond[3]=((0.36442)+((x910*x914))+(((0.37429)*x908))+((x914*x918))+(((-1.0)*py))+(((0.01)*x911)));
evalcond[4]=((((-1.0)*r20*x920))+(((-1.0)*cj6*x909*x917))+(((-1.0)*cj6*x909*x913))+(((-1.0)*x912*x915))+(((-1.0)*x908))+((r21*x916)));
evalcond[5]=((((-1.0)*r10*x920))+(((-1.0)*x919))+((r11*x916))+(((-1.0)*cj6*x909*x910))+(((-1.0)*cj6*x909*x918))+(((-1.0)*x911*x912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x921=((1.0)*sj7*sj8);
IkReal x922=((1.0)*cj8*sj7);
CheckValue<IkReal> x923=IKPowWithIntegerCheck(sj4,-1);
if(!x923.valid){
continue;
}
if( IKabs(((x923.value)*(((((-1.0)*r21*x922))+(((-1.0)*r20*x921))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x922))+(((-1.0)*r10*x921))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x923.value)*(((((-1.0)*r21*x922))+(((-1.0)*r20*x921))+((cj7*r22))))))+IKsqr(((((-1.0)*r11*x922))+(((-1.0)*r10*x921))+((cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x923.value)*(((((-1.0)*r21*x922))+(((-1.0)*r20*x921))+((cj7*r22))))), ((((-1.0)*r11*x922))+(((-1.0)*r10*x921))+((cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x924=IKsin(j5);
IkReal x925=IKcos(j5);
IkReal x926=((1.0)*cj7);
IkReal x927=(cj8*r11);
IkReal x928=(cj8*r21);
IkReal x929=(r00*sj8);
IkReal x930=((0.01)*sj7);
IkReal x931=(cj8*r01);
IkReal x932=((0.01)*cj7);
IkReal x933=(sj6*sj8);
IkReal x934=(r20*sj8);
IkReal x935=(r10*sj8);
IkReal x936=(cj4*x924);
IkReal x937=(sj4*x924);
IkReal x938=((1.0)*cj8*sj6);
IkReal x939=((1.0)*cj6*sj7);
evalcond[0]=((((-1.0)*r12*x926))+x925+((sj7*x935))+((sj7*x927)));
evalcond[1]=((((-1.0)*r22*x926))+x937+((sj7*x934))+((sj7*x928)));
evalcond[2]=((((-1.0)*r02*x926))+(((-1.0)*x936))+((sj7*x931))+((sj7*x929)));
evalcond[3]=((0.36442)+(((0.37429)*x925))+((x927*x932))+(((-1.0)*py))+((r12*x930))+((x932*x935)));
evalcond[4]=((((0.37429)*x937))+((r22*x930))+((x928*x932))+(((-1.0)*pz))+(((0.069)*sj4))+((x932*x934)));
evalcond[5]=((((-0.069)*cj4))+(((-1.0)*px))+((x931*x932))+(((-0.37429)*x936))+((x929*x932))+((r02*x930)));
evalcond[6]=((((-1.0)*r20*x938))+(((-1.0)*r22*x939))+((r21*x933))+((sj4*x925))+(((-1.0)*cj6*x926*x928))+(((-1.0)*cj6*x926*x934)));
evalcond[7]=((((-1.0)*r10*x938))+(((-1.0)*r12*x939))+(((-1.0)*x924))+((r11*x933))+(((-1.0)*cj6*x926*x927))+(((-1.0)*cj6*x926*x935)));
evalcond[8]=((((-1.0)*cj4*x925))+(((-1.0)*r02*x939))+(((-1.0)*cj6*x926*x929))+(((-1.0)*cj6*x926*x931))+((r01*x933))+(((-1.0)*r00*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x940=(sj7*sj8);
IkReal x941=(cj8*sj7);
CheckValue<IkReal> x942=IKPowWithIntegerCheck(cj4,-1);
if(!x942.valid){
continue;
}
if( IKabs(((x942.value)*((((r01*x941))+((r00*x940))+(((-1.0)*cj7*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x941))+(((-1.0)*r10*x940))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x942.value)*((((r01*x941))+((r00*x940))+(((-1.0)*cj7*r02))))))+IKsqr(((((-1.0)*r11*x941))+(((-1.0)*r10*x940))+((cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x942.value)*((((r01*x941))+((r00*x940))+(((-1.0)*cj7*r02))))), ((((-1.0)*r11*x941))+(((-1.0)*r10*x940))+((cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x943=IKsin(j5);
IkReal x944=IKcos(j5);
IkReal x945=((1.0)*cj7);
IkReal x946=(cj8*r11);
IkReal x947=(cj8*r21);
IkReal x948=(r00*sj8);
IkReal x949=((0.01)*sj7);
IkReal x950=(cj8*r01);
IkReal x951=((0.01)*cj7);
IkReal x952=(sj6*sj8);
IkReal x953=(r20*sj8);
IkReal x954=(r10*sj8);
IkReal x955=(cj4*x943);
IkReal x956=(sj4*x943);
IkReal x957=((1.0)*cj8*sj6);
IkReal x958=((1.0)*cj6*sj7);
evalcond[0]=(((sj7*x946))+(((-1.0)*r12*x945))+((sj7*x954))+x944);
evalcond[1]=(((sj7*x947))+((sj7*x953))+(((-1.0)*r22*x945))+x956);
evalcond[2]=((((-1.0)*r02*x945))+((sj7*x948))+((sj7*x950))+(((-1.0)*x955)));
evalcond[3]=((0.36442)+((x951*x954))+((r12*x949))+(((0.37429)*x944))+(((-1.0)*py))+((x946*x951)));
evalcond[4]=(((x951*x953))+((r22*x949))+(((-1.0)*pz))+((x947*x951))+(((0.069)*sj4))+(((0.37429)*x956)));
evalcond[5]=(((r02*x949))+(((-0.069)*cj4))+((x948*x951))+(((-1.0)*px))+(((-0.37429)*x955))+((x950*x951)));
evalcond[6]=((((-1.0)*cj6*x945*x947))+(((-1.0)*r20*x957))+((r21*x952))+(((-1.0)*cj6*x945*x953))+((sj4*x944))+(((-1.0)*r22*x958)));
evalcond[7]=((((-1.0)*r10*x957))+(((-1.0)*cj6*x945*x946))+(((-1.0)*x943))+(((-1.0)*cj6*x945*x954))+((r11*x952))+(((-1.0)*r12*x958)));
evalcond[8]=((((-1.0)*cj6*x945*x948))+(((-1.0)*r00*x957))+(((-1.0)*cj4*x944))+((r01*x952))+(((-1.0)*cj6*x945*x950))+(((-1.0)*r02*x958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x959=(sj7*sj8);
IkReal x960=(cj8*sj7);
if( IKabs(((((-1.0)*r20*x959))+(((-1.0)*r21*x960))+((cj7*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r12))+((r11*x960))+((r10*x959)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x959))+(((-1.0)*r21*x960))+((cj7*r22))))+IKsqr(((((-1.0)*cj7*r12))+((r11*x960))+((r10*x959))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r20*x959))+(((-1.0)*r21*x960))+((cj7*r22))), ((((-1.0)*cj7*r12))+((r11*x960))+((r10*x959))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x961=IKsin(j5);
IkReal x962=IKcos(j5);
IkReal x963=((1.0)*cj7);
IkReal x964=(cj8*r11);
IkReal x965=(r12*sj7);
IkReal x966=((1.0)*cj6);
IkReal x967=(cj8*r21);
IkReal x968=((0.01)*cj7);
IkReal x969=(r22*sj7);
IkReal x970=(sj6*sj8);
IkReal x971=(r20*sj8);
IkReal x972=(r10*sj8);
IkReal x973=((1.0)*cj8*sj6);
evalcond[0]=(((sj7*x967))+((sj7*x971))+(((-1.0)*r22*x963))+x961);
evalcond[1]=(((sj7*x964))+(((-1.0)*x962))+((sj7*x972))+(((-1.0)*r12*x963)));
evalcond[2]=((0.069)+(((0.01)*x969))+(((0.37429)*x961))+((x968*x971))+(((-1.0)*pz))+((x967*x968)));
evalcond[3]=((-0.36442)+(((0.01)*x965))+((x968*x972))+(((-1.0)*py))+((x964*x968))+(((-0.37429)*x962)));
evalcond[4]=((((-1.0)*r20*x973))+(((-1.0)*cj6*x963*x971))+((r21*x970))+(((-1.0)*x966*x969))+x962+(((-1.0)*cj6*x963*x967)));
evalcond[5]=((((-1.0)*x965*x966))+(((-1.0)*cj6*x963*x972))+((r11*x970))+x961+(((-1.0)*r10*x973))+(((-1.0)*cj6*x963*x964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x974=(sj7*sj8);
IkReal x975=(cj8*sj7);
IkReal x976=((1.0)*cj7);
if( IKabs((((r21*x975))+((r20*x974))+(((-1.0)*r22*x976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x974))+((r11*x975))+(((-1.0)*r12*x976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x975))+((r20*x974))+(((-1.0)*r22*x976))))+IKsqr((((r10*x974))+((r11*x975))+(((-1.0)*r12*x976))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r21*x975))+((r20*x974))+(((-1.0)*r22*x976))), (((r10*x974))+((r11*x975))+(((-1.0)*r12*x976))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x977=IKsin(j5);
IkReal x978=IKcos(j5);
IkReal x979=((1.0)*cj7);
IkReal x980=(cj8*r11);
IkReal x981=(r12*sj7);
IkReal x982=((1.0)*cj6);
IkReal x983=(cj8*r21);
IkReal x984=((0.01)*cj7);
IkReal x985=(r22*sj7);
IkReal x986=(sj6*sj8);
IkReal x987=(r20*sj8);
IkReal x988=(r10*sj8);
IkReal x989=((1.0)*x978);
IkReal x990=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*x977))+((sj7*x983))+((sj7*x987))+(((-1.0)*r22*x979)));
evalcond[1]=((((-1.0)*x989))+((sj7*x988))+((sj7*x980))+(((-1.0)*r12*x979)));
evalcond[2]=((-0.069)+((x983*x984))+(((0.01)*x985))+(((-1.0)*pz))+(((-0.37429)*x977))+((x984*x987)));
evalcond[3]=((-0.36442)+(((0.01)*x981))+(((-1.0)*py))+(((-0.37429)*x978))+((x984*x988))+((x980*x984)));
evalcond[4]=((((-1.0)*cj6*x979*x988))+(((-1.0)*cj6*x979*x980))+(((-1.0)*r10*x990))+((r11*x986))+(((-1.0)*x981*x982))+x977);
evalcond[5]=((((-1.0)*x989))+(((-1.0)*cj6*x979*x983))+(((-1.0)*cj6*x979*x987))+((r21*x986))+(((-1.0)*x982*x985))+(((-1.0)*r20*x990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x991=((1.0)*sj7);
if( IKabs(((((-1.0)*r00*sj8*x991))+(((-1.0)*cj8*r01*x991))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj8*x991))+(((-1.0)*cj8*r01*x991))+((cj7*r02))))+IKsqr((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r00*sj8*x991))+(((-1.0)*cj8*r01*x991))+((cj7*r02))), (((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x992=IKsin(j5);
IkReal x993=IKcos(j5);
IkReal x994=((1.0)*cj8);
IkReal x995=(cj6*cj7);
IkReal x996=(r02*sj7);
IkReal x997=(cj8*sj7);
IkReal x998=((1.0)*cj6);
IkReal x999=(r12*sj7);
IkReal x1000=((1.0)*cj7);
IkReal x1001=(sj6*sj8);
IkReal x1002=(sj7*sj8);
IkReal x1003=((0.01)*cj7);
IkReal x1004=(r10*sj8);
IkReal x1005=(cj7*r00*sj8);
evalcond[0]=(((r01*x997))+(((-1.0)*r02*x1000))+x992+((r00*x1002)));
evalcond[1]=((((-1.0)*x993))+(((-1.0)*r12*x1000))+((r11*x997))+((r10*x1002)));
evalcond[2]=((0.069)+((r00*sj8*x1003))+((cj8*r01*x1003))+(((-1.0)*px))+(((0.37429)*x992))+(((0.01)*x996)));
evalcond[3]=((-0.36442)+(((-0.37429)*x993))+(((-1.0)*py))+((cj8*r11*x1003))+(((0.01)*x999))+((x1003*x1004)));
evalcond[4]=((((-1.0)*x1004*x995))+((r11*x1001))+(((-1.0)*r10*sj6*x994))+(((-1.0)*r11*x994*x995))+(((-1.0)*x998*x999))+x992);
evalcond[5]=(((r01*x1001))+(((-1.0)*r01*x994*x995))+(((-1.0)*r00*sj6*x994))+(((-1.0)*x996*x998))+(((-1.0)*r00*sj8*x995))+x993);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1006=(sj7*sj8);
IkReal x1007=((1.0)*cj7);
IkReal x1008=(cj8*sj7);
if( IKabs((((r01*x1008))+(((-1.0)*r02*x1007))+((r00*x1006)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1007))+((r11*x1008))+((r10*x1006)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1008))+(((-1.0)*r02*x1007))+((r00*x1006))))+IKsqr(((((-1.0)*r12*x1007))+((r11*x1008))+((r10*x1006))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r01*x1008))+(((-1.0)*r02*x1007))+((r00*x1006))), ((((-1.0)*r12*x1007))+((r11*x1008))+((r10*x1006))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1009=IKsin(j5);
IkReal x1010=IKcos(j5);
IkReal x1011=((1.0)*cj8);
IkReal x1012=(cj6*cj7);
IkReal x1013=(r02*sj7);
IkReal x1014=(cj8*sj7);
IkReal x1015=((1.0)*cj6);
IkReal x1016=(r12*sj7);
IkReal x1017=((1.0)*cj7);
IkReal x1018=(sj6*sj8);
IkReal x1019=(sj7*sj8);
IkReal x1020=((0.01)*cj7);
IkReal x1021=(r10*sj8);
IkReal x1022=((1.0)*x1010);
IkReal x1023=(cj7*r00*sj8);
evalcond[0]=((((-1.0)*x1022))+(((-1.0)*r12*x1017))+((r10*x1019))+((r11*x1014)));
evalcond[1]=((((-1.0)*x1009))+(((-1.0)*r02*x1017))+((r01*x1014))+((r00*x1019)));
evalcond[2]=((-0.069)+(((0.01)*x1013))+((cj8*r01*x1020))+(((-0.37429)*x1009))+((r00*sj8*x1020))+(((-1.0)*px)));
evalcond[3]=((-0.36442)+((cj8*r11*x1020))+(((0.01)*x1016))+(((-0.37429)*x1010))+(((-1.0)*py))+((x1020*x1021)));
evalcond[4]=((((-1.0)*x1012*x1021))+x1009+(((-1.0)*x1015*x1016))+(((-1.0)*r11*x1011*x1012))+((r11*x1018))+(((-1.0)*r10*sj6*x1011)));
evalcond[5]=((((-1.0)*r00*sj6*x1011))+(((-1.0)*x1022))+(((-1.0)*r00*sj8*x1012))+(((-1.0)*x1013*x1015))+((r01*x1018))+(((-1.0)*r01*x1011*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1024=((1.0)*sj7);
CheckValue<IkReal> x1025=IKPowWithIntegerCheck(cj4,-1);
if(!x1025.valid){
continue;
}
if( IKabs(((x1025.value)*(((((-1.0)*r00*sj8*x1024))+(((-1.0)*cj8*r01*x1024))+((cj7*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1025.value)*(((((-1.0)*r00*sj8*x1024))+(((-1.0)*cj8*r01*x1024))+((cj7*r02))))))+IKsqr((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1025.value)*(((((-1.0)*r00*sj8*x1024))+(((-1.0)*cj8*r01*x1024))+((cj7*r02))))), (((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1026=IKsin(j5);
IkReal x1027=IKcos(j5);
IkReal x1028=((1.0)*cj7);
IkReal x1029=(cj8*r11);
IkReal x1030=(r00*sj8);
IkReal x1031=((0.01)*cj7);
IkReal x1032=(cj8*r21);
IkReal x1033=((0.01)*sj7);
IkReal x1034=(cj8*r01);
IkReal x1035=(sj6*sj8);
IkReal x1036=(r20*sj8);
IkReal x1037=(r10*sj8);
IkReal x1038=(sj4*x1026);
IkReal x1039=(cj4*x1026);
IkReal x1040=((1.0)*cj8*sj6);
IkReal x1041=((1.0)*cj6*sj7);
evalcond[0]=((((-1.0)*r22*x1028))+((sj7*x1036))+((sj7*x1032))+x1038);
evalcond[1]=((((-1.0)*r12*x1028))+((sj7*x1037))+(((-1.0)*x1027))+((sj7*x1029)));
evalcond[2]=(((sj7*x1030))+((sj7*x1034))+x1039+(((-1.0)*r02*x1028)));
evalcond[3]=((-0.36442)+((x1031*x1037))+(((-0.37429)*x1027))+(((-1.0)*py))+((x1029*x1031))+((r12*x1033)));
evalcond[4]=((((0.37429)*x1038))+((x1031*x1032))+((x1031*x1036))+((r22*x1033))+(((-1.0)*pz))+(((0.069)*sj4)));
evalcond[5]=((((0.37429)*x1039))+((x1031*x1034))+((x1030*x1031))+((r02*x1033))+(((0.069)*cj4))+(((-1.0)*px)));
evalcond[6]=(x1026+(((-1.0)*r10*x1040))+(((-1.0)*r12*x1041))+((r11*x1035))+(((-1.0)*cj6*x1028*x1029))+(((-1.0)*cj6*x1028*x1037)));
evalcond[7]=(((sj4*x1027))+(((-1.0)*r22*x1041))+((r21*x1035))+(((-1.0)*r20*x1040))+(((-1.0)*cj6*x1028*x1032))+(((-1.0)*cj6*x1028*x1036)));
evalcond[8]=((((-1.0)*r02*x1041))+(((-1.0)*r00*x1040))+((cj4*x1027))+((r01*x1035))+(((-1.0)*cj6*x1028*x1034))+(((-1.0)*cj6*x1028*x1030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1042=(sj7*sj8);
IkReal x1043=(cj8*sj7);
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(sj4,-1);
if(!x1044.valid){
continue;
}
if( IKabs(((x1044.value)*(((((-1.0)*r21*x1043))+((cj7*r22))+(((-1.0)*r20*x1042)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1043))+(((-1.0)*cj7*r12))+((r10*x1042)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1044.value)*(((((-1.0)*r21*x1043))+((cj7*r22))+(((-1.0)*r20*x1042))))))+IKsqr((((r11*x1043))+(((-1.0)*cj7*r12))+((r10*x1042))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1044.value)*(((((-1.0)*r21*x1043))+((cj7*r22))+(((-1.0)*r20*x1042))))), (((r11*x1043))+(((-1.0)*cj7*r12))+((r10*x1042))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1045=IKsin(j5);
IkReal x1046=IKcos(j5);
IkReal x1047=((1.0)*cj7);
IkReal x1048=(cj8*r11);
IkReal x1049=(r00*sj8);
IkReal x1050=((0.01)*cj7);
IkReal x1051=(cj8*r21);
IkReal x1052=((0.01)*sj7);
IkReal x1053=(cj8*r01);
IkReal x1054=(sj6*sj8);
IkReal x1055=(r20*sj8);
IkReal x1056=(r10*sj8);
IkReal x1057=(sj4*x1045);
IkReal x1058=(cj4*x1045);
IkReal x1059=((1.0)*cj8*sj6);
IkReal x1060=((1.0)*cj6*sj7);
evalcond[0]=(x1057+(((-1.0)*r22*x1047))+((sj7*x1055))+((sj7*x1051)));
evalcond[1]=(((sj7*x1056))+((sj7*x1048))+(((-1.0)*r12*x1047))+(((-1.0)*x1046)));
evalcond[2]=((((-1.0)*r02*x1047))+x1058+((sj7*x1053))+((sj7*x1049)));
evalcond[3]=((-0.36442)+((r12*x1052))+((x1050*x1056))+((x1048*x1050))+(((-1.0)*py))+(((-0.37429)*x1046)));
evalcond[4]=(((x1050*x1051))+((x1050*x1055))+(((-1.0)*pz))+(((0.069)*sj4))+((r22*x1052))+(((0.37429)*x1057)));
evalcond[5]=(((r02*x1052))+(((0.069)*cj4))+((x1050*x1053))+(((-1.0)*px))+((x1049*x1050))+(((0.37429)*x1058)));
evalcond[6]=(((r11*x1054))+x1045+(((-1.0)*r10*x1059))+(((-1.0)*r12*x1060))+(((-1.0)*cj6*x1047*x1048))+(((-1.0)*cj6*x1047*x1056)));
evalcond[7]=((((-1.0)*r22*x1060))+(((-1.0)*cj6*x1047*x1051))+(((-1.0)*cj6*x1047*x1055))+((r21*x1054))+(((-1.0)*r20*x1059))+((sj4*x1046)));
evalcond[8]=((((-1.0)*r00*x1059))+(((-1.0)*r02*x1060))+(((-1.0)*cj6*x1047*x1049))+(((-1.0)*cj6*x1047*x1053))+((r01*x1054))+((cj4*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1061=((1.0)*sj7);
if( IKabs(((((-1.0)*r20*sj8*x1061))+(((-1.0)*cj8*r21*x1061))+((cj7*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj8*r01*x1061))+(((-1.0)*r00*sj8*x1061))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj8*x1061))+(((-1.0)*cj8*r21*x1061))+((cj7*r22))))+IKsqr(((((-1.0)*cj8*r01*x1061))+(((-1.0)*r00*sj8*x1061))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r20*sj8*x1061))+(((-1.0)*cj8*r21*x1061))+((cj7*r22))), ((((-1.0)*cj8*r01*x1061))+(((-1.0)*r00*sj8*x1061))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1062=IKsin(j5);
IkReal x1063=IKcos(j5);
IkReal x1064=((0.01)*cj7);
IkReal x1065=(r00*sj8);
IkReal x1066=((1.0)*cj7);
IkReal x1067=(r02*sj7);
IkReal x1068=((1.0)*cj6);
IkReal x1069=(cj8*r21);
IkReal x1070=(cj8*r01);
IkReal x1071=(r22*sj7);
IkReal x1072=(r20*sj8);
IkReal x1073=(sj6*sj8);
IkReal x1074=((1.0)*cj8*sj6);
evalcond[0]=(x1062+(((-1.0)*r22*x1066))+((sj7*x1072))+((sj7*x1069)));
evalcond[1]=(x1063+(((-1.0)*r02*x1066))+((sj7*x1070))+((sj7*x1065)));
evalcond[2]=((0.069)+(((-1.0)*pz))+(((0.37429)*x1062))+(((0.01)*x1071))+((x1064*x1069))+((x1064*x1072)));
evalcond[3]=((0.36442)+(((-1.0)*px))+(((0.37429)*x1063))+(((0.01)*x1067))+((x1064*x1065))+((x1064*x1070)));
evalcond[4]=((((-1.0)*r20*x1074))+x1063+(((-1.0)*x1068*x1071))+(((-1.0)*cj6*x1066*x1072))+(((-1.0)*cj6*x1066*x1069))+((r21*x1073)));
evalcond[5]=((((-1.0)*cj6*x1065*x1066))+(((-1.0)*r00*x1074))+(((-1.0)*cj6*x1066*x1070))+(((-1.0)*x1067*x1068))+((r01*x1073))+(((-1.0)*x1062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1075=(cj8*sj7);
IkReal x1076=(sj7*sj8);
if( IKabs(((((-1.0)*cj7*r22))+((r20*x1076))+((r21*x1075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1076))+((cj7*r02))+(((-1.0)*r01*x1075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*r22))+((r20*x1076))+((r21*x1075))))+IKsqr(((((-1.0)*r00*x1076))+((cj7*r02))+(((-1.0)*r01*x1075))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*r22))+((r20*x1076))+((r21*x1075))), ((((-1.0)*r00*x1076))+((cj7*r02))+(((-1.0)*r01*x1075))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1077=IKsin(j5);
IkReal x1078=IKcos(j5);
IkReal x1079=((0.01)*cj7);
IkReal x1080=(r00*sj8);
IkReal x1081=((1.0)*cj7);
IkReal x1082=(r02*sj7);
IkReal x1083=((1.0)*cj6);
IkReal x1084=(cj8*r21);
IkReal x1085=(cj8*r01);
IkReal x1086=(r22*sj7);
IkReal x1087=(r20*sj8);
IkReal x1088=(sj6*sj8);
IkReal x1089=((1.0)*x1077);
IkReal x1090=((1.0)*cj8*sj6);
evalcond[0]=(x1078+((sj7*x1085))+((sj7*x1080))+(((-1.0)*r02*x1081)));
evalcond[1]=(((sj7*x1084))+((sj7*x1087))+(((-1.0)*x1089))+(((-1.0)*r22*x1081)));
evalcond[2]=((-0.069)+((x1079*x1084))+((x1079*x1087))+(((-1.0)*pz))+(((-0.37429)*x1077))+(((0.01)*x1086)));
evalcond[3]=((0.36442)+((x1079*x1080))+((x1079*x1085))+(((-1.0)*px))+(((0.01)*x1082))+(((0.37429)*x1078)));
evalcond[4]=((((-1.0)*cj6*x1081*x1087))+(((-1.0)*cj6*x1081*x1084))+(((-1.0)*x1078))+(((-1.0)*x1083*x1086))+(((-1.0)*r20*x1090))+((r21*x1088)));
evalcond[5]=((((-1.0)*cj6*x1081*x1085))+((r01*x1088))+(((-1.0)*x1082*x1083))+(((-1.0)*x1089))+(((-1.0)*cj6*x1080*x1081))+(((-1.0)*r00*x1090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1091=((1.0)*sj7);
if( IKabs(((((-1.0)*cj8*r11*x1091))+(((-1.0)*r10*sj8*x1091))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj8*r01*x1091))+(((-1.0)*r00*sj8*x1091))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*r11*x1091))+(((-1.0)*r10*sj8*x1091))+((cj7*r12))))+IKsqr(((((-1.0)*cj8*r01*x1091))+(((-1.0)*r00*sj8*x1091))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj8*r11*x1091))+(((-1.0)*r10*sj8*x1091))+((cj7*r12))), ((((-1.0)*cj8*r01*x1091))+(((-1.0)*r00*sj8*x1091))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1092=IKcos(j5);
IkReal x1093=IKsin(j5);
IkReal x1094=((1.0)*cj8);
IkReal x1095=(cj6*cj7);
IkReal x1096=(r02*sj7);
IkReal x1097=(cj8*sj7);
IkReal x1098=((1.0)*cj6);
IkReal x1099=(r12*sj7);
IkReal x1100=((1.0)*cj7);
IkReal x1101=(sj6*sj8);
IkReal x1102=(sj7*sj8);
IkReal x1103=((0.01)*cj7);
IkReal x1104=(r10*sj8);
IkReal x1105=(cj7*r00*sj8);
evalcond[0]=((((-1.0)*r12*x1100))+x1093+((r11*x1097))+((r10*x1102)));
evalcond[1]=(x1092+((r01*x1097))+((r00*x1102))+(((-1.0)*r02*x1100)));
evalcond[2]=((0.36442)+((r00*sj8*x1103))+(((0.37429)*x1092))+((cj8*r01*x1103))+(((0.01)*x1096))+(((-1.0)*px)));
evalcond[3]=((0.069)+(((0.37429)*x1093))+(((0.01)*x1099))+((cj8*r11*x1103))+(((-1.0)*py))+((x1103*x1104)));
evalcond[4]=((((-1.0)*x1095*x1104))+x1092+(((-1.0)*r11*x1094*x1095))+(((-1.0)*r10*sj6*x1094))+(((-1.0)*x1098*x1099))+((r11*x1101)));
evalcond[5]=((((-1.0)*r00*sj8*x1095))+(((-1.0)*x1096*x1098))+(((-1.0)*x1093))+((r01*x1101))+(((-1.0)*r01*x1094*x1095))+(((-1.0)*r00*sj6*x1094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1106=((1.0)*sj7);
if( IKabs((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj8*x1106))+(((-1.0)*cj8*r01*x1106))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))))+IKsqr(((((-1.0)*r00*sj8*x1106))+(((-1.0)*cj8*r01*x1106))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))), ((((-1.0)*r00*sj8*x1106))+(((-1.0)*cj8*r01*x1106))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1107=IKcos(j5);
IkReal x1108=IKsin(j5);
IkReal x1109=((1.0)*cj8);
IkReal x1110=(cj6*cj7);
IkReal x1111=(r02*sj7);
IkReal x1112=(cj8*sj7);
IkReal x1113=((1.0)*cj6);
IkReal x1114=(r12*sj7);
IkReal x1115=((1.0)*cj7);
IkReal x1116=(sj6*sj8);
IkReal x1117=(sj7*sj8);
IkReal x1118=((0.01)*cj7);
IkReal x1119=(r10*sj8);
IkReal x1120=((1.0)*x1108);
IkReal x1121=(cj7*r00*sj8);
evalcond[0]=(x1107+((r01*x1112))+((r00*x1117))+(((-1.0)*r02*x1115)));
evalcond[1]=((((-1.0)*r12*x1115))+(((-1.0)*x1120))+((r11*x1112))+((r10*x1117)));
evalcond[2]=((0.36442)+((cj8*r01*x1118))+(((0.37429)*x1107))+(((-1.0)*px))+(((0.01)*x1111))+((r00*sj8*x1118)));
evalcond[3]=((-0.069)+(((-0.37429)*x1108))+((cj8*r11*x1118))+(((-1.0)*py))+(((0.01)*x1114))+((x1118*x1119)));
evalcond[4]=((((-1.0)*x1110*x1119))+(((-1.0)*r10*sj6*x1109))+(((-1.0)*r11*x1109*x1110))+(((-1.0)*x1107))+(((-1.0)*x1113*x1114))+((r11*x1116)));
evalcond[5]=(((r01*x1116))+(((-1.0)*x1120))+(((-1.0)*r00*sj8*x1110))+(((-1.0)*r00*sj6*x1109))+(((-1.0)*r01*x1109*x1110))+(((-1.0)*x1111*x1113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1122=((1.0)*sj7);
CheckValue<IkReal> x1123=IKPowWithIntegerCheck(cj4,-1);
if(!x1123.valid){
continue;
}
if( IKabs(((x1123.value)*(((((-1.0)*cj8*r11*x1122))+((cj7*r12))+(((-1.0)*r10*sj8*x1122)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj8*r01*x1122))+((cj7*r02))+(((-1.0)*r00*sj8*x1122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1123.value)*(((((-1.0)*cj8*r11*x1122))+((cj7*r12))+(((-1.0)*r10*sj8*x1122))))))+IKsqr(((((-1.0)*cj8*r01*x1122))+((cj7*r02))+(((-1.0)*r00*sj8*x1122))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1123.value)*(((((-1.0)*cj8*r11*x1122))+((cj7*r12))+(((-1.0)*r10*sj8*x1122))))), ((((-1.0)*cj8*r01*x1122))+((cj7*r02))+(((-1.0)*r00*sj8*x1122))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1124=IKsin(j5);
IkReal x1125=IKcos(j5);
IkReal x1126=((1.0)*cj7);
IkReal x1127=(cj8*r11);
IkReal x1128=(cj8*r21);
IkReal x1129=((0.01)*sj7);
IkReal x1130=((0.01)*cj7);
IkReal x1131=(cj8*r01);
IkReal x1132=(sj6*sj8);
IkReal x1133=(r20*sj8);
IkReal x1134=(r10*sj8);
IkReal x1135=(cj7*r00*sj8);
IkReal x1136=((0.37429)*x1124);
IkReal x1137=((1.0)*cj8*sj6);
IkReal x1138=((1.0)*cj6*sj7);
evalcond[0]=(x1125+(((-1.0)*r02*x1126))+((sj7*x1131))+((r00*sj7*sj8)));
evalcond[1]=(((sj4*x1124))+(((-1.0)*r22*x1126))+((sj7*x1128))+((sj7*x1133)));
evalcond[2]=((((-1.0)*r12*x1126))+((cj4*x1124))+((sj7*x1127))+((sj7*x1134)));
evalcond[3]=((0.36442)+((x1130*x1131))+(((0.37429)*x1125))+(((-1.0)*px))+((r00*sj8*x1130))+((r02*x1129)));
evalcond[4]=(((x1130*x1133))+((sj4*x1136))+((r22*x1129))+(((-1.0)*pz))+(((0.069)*sj4))+((x1128*x1130)));
evalcond[5]=(((x1130*x1134))+(((0.069)*cj4))+(((-1.0)*py))+((cj4*x1136))+((r12*x1129))+((x1127*x1130)));
evalcond[6]=(((sj4*x1125))+((r21*x1132))+(((-1.0)*r22*x1138))+(((-1.0)*r20*x1137))+(((-1.0)*cj6*x1126*x1128))+(((-1.0)*cj6*x1126*x1133)));
evalcond[7]=((((-1.0)*r12*x1138))+(((-1.0)*r10*x1137))+((cj4*x1125))+(((-1.0)*cj6*x1126*x1127))+(((-1.0)*cj6*x1126*x1134))+((r11*x1132)));
evalcond[8]=(((r01*x1132))+(((-1.0)*cj6*r00*sj8*x1126))+(((-1.0)*x1124))+(((-1.0)*r02*x1138))+(((-1.0)*r00*x1137))+(((-1.0)*cj6*x1126*x1131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1139=((1.0)*sj7);
CheckValue<IkReal> x1140=IKPowWithIntegerCheck(sj4,-1);
if(!x1140.valid){
continue;
}
if( IKabs(((x1140.value)*(((((-1.0)*r20*sj8*x1139))+(((-1.0)*cj8*r21*x1139))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj8*x1139))+(((-1.0)*cj8*r01*x1139))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1140.value)*(((((-1.0)*r20*sj8*x1139))+(((-1.0)*cj8*r21*x1139))+((cj7*r22))))))+IKsqr(((((-1.0)*r00*sj8*x1139))+(((-1.0)*cj8*r01*x1139))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1140.value)*(((((-1.0)*r20*sj8*x1139))+(((-1.0)*cj8*r21*x1139))+((cj7*r22))))), ((((-1.0)*r00*sj8*x1139))+(((-1.0)*cj8*r01*x1139))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1141=IKsin(j5);
IkReal x1142=IKcos(j5);
IkReal x1143=((1.0)*cj7);
IkReal x1144=(cj8*r11);
IkReal x1145=(cj8*r21);
IkReal x1146=((0.01)*sj7);
IkReal x1147=((0.01)*cj7);
IkReal x1148=(cj8*r01);
IkReal x1149=(sj6*sj8);
IkReal x1150=(r20*sj8);
IkReal x1151=(r10*sj8);
IkReal x1152=(cj7*r00*sj8);
IkReal x1153=((0.37429)*x1141);
IkReal x1154=((1.0)*cj8*sj6);
IkReal x1155=((1.0)*cj6*sj7);
evalcond[0]=(x1142+((sj7*x1148))+(((-1.0)*r02*x1143))+((r00*sj7*sj8)));
evalcond[1]=(((sj4*x1141))+((sj7*x1145))+(((-1.0)*r22*x1143))+((sj7*x1150)));
evalcond[2]=(((sj7*x1144))+((cj4*x1141))+(((-1.0)*r12*x1143))+((sj7*x1151)));
evalcond[3]=((0.36442)+((r02*x1146))+((r00*sj8*x1147))+(((-1.0)*px))+((x1147*x1148))+(((0.37429)*x1142)));
evalcond[4]=(((x1145*x1147))+((r22*x1146))+(((-1.0)*pz))+((x1147*x1150))+(((0.069)*sj4))+((sj4*x1153)));
evalcond[5]=((((0.069)*cj4))+(((-1.0)*py))+((x1147*x1151))+((cj4*x1153))+((x1144*x1147))+((r12*x1146)));
evalcond[6]=(((sj4*x1142))+(((-1.0)*cj6*x1143*x1145))+(((-1.0)*cj6*x1143*x1150))+(((-1.0)*r20*x1154))+(((-1.0)*r22*x1155))+((r21*x1149)));
evalcond[7]=(((r11*x1149))+(((-1.0)*cj6*x1143*x1144))+(((-1.0)*cj6*x1143*x1151))+(((-1.0)*r10*x1154))+(((-1.0)*r12*x1155))+((cj4*x1142)));
evalcond[8]=((((-1.0)*r00*x1154))+(((-1.0)*cj6*x1143*x1148))+(((-1.0)*x1141))+(((-1.0)*r02*x1155))+((r01*x1149))+(((-1.0)*cj6*r00*sj8*x1143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1156=(sj7*sj8);
IkReal x1157=((1.0)*cj7);
IkReal x1158=(cj8*sj7);
if( IKabs((((r11*x1158))+(((-1.0)*r12*x1157))+((r10*x1156)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1156))+(((-1.0)*r02*x1157))+((r01*x1158)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1158))+(((-1.0)*r12*x1157))+((r10*x1156))))+IKsqr((((r00*x1156))+(((-1.0)*r02*x1157))+((r01*x1158))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r11*x1158))+(((-1.0)*r12*x1157))+((r10*x1156))), (((r00*x1156))+(((-1.0)*r02*x1157))+((r01*x1158))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1159=IKcos(j5);
IkReal x1160=IKsin(j5);
IkReal x1161=((1.0)*cj8);
IkReal x1162=(cj6*cj7);
IkReal x1163=(r02*sj7);
IkReal x1164=(cj8*sj7);
IkReal x1165=((1.0)*cj6);
IkReal x1166=(r12*sj7);
IkReal x1167=((1.0)*cj7);
IkReal x1168=(sj6*sj8);
IkReal x1169=(sj7*sj8);
IkReal x1170=((0.01)*cj7);
IkReal x1171=(r10*sj8);
IkReal x1172=((1.0)*x1159);
IkReal x1173=(cj7*r00*sj8);
evalcond[0]=(((r10*x1169))+(((-1.0)*r12*x1167))+((r11*x1164))+(((-1.0)*x1160)));
evalcond[1]=((((-1.0)*r02*x1167))+((r00*x1169))+((r01*x1164))+(((-1.0)*x1172)));
evalcond[2]=((-0.36442)+(((0.01)*x1163))+(((-1.0)*px))+((cj8*r01*x1170))+(((-0.37429)*x1159))+((r00*sj8*x1170)));
evalcond[3]=((-0.069)+(((0.01)*x1166))+(((-1.0)*py))+((cj8*r11*x1170))+((x1170*x1171))+(((-0.37429)*x1160)));
evalcond[4]=(x1160+(((-1.0)*x1163*x1165))+(((-1.0)*r01*x1161*x1162))+((r01*x1168))+(((-1.0)*r00*sj8*x1162))+(((-1.0)*r00*sj6*x1161)));
evalcond[5]=((((-1.0)*r11*x1161*x1162))+(((-1.0)*x1162*x1171))+((r11*x1168))+(((-1.0)*x1172))+(((-1.0)*r10*sj6*x1161))+(((-1.0)*x1165*x1166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1174=(sj7*sj8);
IkReal x1175=(cj8*sj7);
if( IKabs(((((-1.0)*r10*x1174))+((cj7*r12))+(((-1.0)*r11*x1175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1175))+((r00*x1174))+(((-1.0)*cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1174))+((cj7*r12))+(((-1.0)*r11*x1175))))+IKsqr((((r01*x1175))+((r00*x1174))+(((-1.0)*cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r10*x1174))+((cj7*r12))+(((-1.0)*r11*x1175))), (((r01*x1175))+((r00*x1174))+(((-1.0)*cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1176=IKcos(j5);
IkReal x1177=IKsin(j5);
IkReal x1178=((1.0)*cj8);
IkReal x1179=(cj6*cj7);
IkReal x1180=(r02*sj7);
IkReal x1181=(cj8*sj7);
IkReal x1182=((1.0)*cj6);
IkReal x1183=(r12*sj7);
IkReal x1184=((1.0)*cj7);
IkReal x1185=(sj6*sj8);
IkReal x1186=(sj7*sj8);
IkReal x1187=((0.01)*cj7);
IkReal x1188=(r10*sj8);
IkReal x1189=(cj7*r00*sj8);
evalcond[0]=(x1177+((r10*x1186))+((r11*x1181))+(((-1.0)*r12*x1184)));
evalcond[1]=(((r00*x1186))+((r01*x1181))+(((-1.0)*r02*x1184))+(((-1.0)*x1176)));
evalcond[2]=((-0.36442)+((cj8*r01*x1187))+(((-1.0)*px))+((r00*sj8*x1187))+(((0.01)*x1180))+(((-0.37429)*x1176)));
evalcond[3]=((0.069)+((x1187*x1188))+((cj8*r11*x1187))+(((0.37429)*x1177))+(((-1.0)*py))+(((0.01)*x1183)));
evalcond[4]=((((-1.0)*r10*sj6*x1178))+x1176+((r11*x1185))+(((-1.0)*x1182*x1183))+(((-1.0)*x1179*x1188))+(((-1.0)*r11*x1178*x1179)));
evalcond[5]=((((-1.0)*r01*x1178*x1179))+x1177+((r01*x1185))+(((-1.0)*r00*sj8*x1179))+(((-1.0)*x1180*x1182))+(((-1.0)*r00*sj6*x1178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1190=(sj7*sj8);
IkReal x1191=(cj8*sj7);
if( IKabs(((((-1.0)*r20*x1190))+(((-1.0)*r21*x1191))+((cj7*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1191))+((r00*x1190))+(((-1.0)*cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1190))+(((-1.0)*r21*x1191))+((cj7*r22))))+IKsqr((((r01*x1191))+((r00*x1190))+(((-1.0)*cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r20*x1190))+(((-1.0)*r21*x1191))+((cj7*r22))), (((r01*x1191))+((r00*x1190))+(((-1.0)*cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1192=IKsin(j5);
IkReal x1193=IKcos(j5);
IkReal x1194=((0.01)*cj7);
IkReal x1195=(r00*sj8);
IkReal x1196=((1.0)*cj7);
IkReal x1197=(r02*sj7);
IkReal x1198=((1.0)*cj6);
IkReal x1199=(cj8*r21);
IkReal x1200=(cj8*r01);
IkReal x1201=(r22*sj7);
IkReal x1202=(r20*sj8);
IkReal x1203=(sj6*sj8);
IkReal x1204=((1.0)*cj8*sj6);
evalcond[0]=(x1192+(((-1.0)*r22*x1196))+((sj7*x1202))+((sj7*x1199)));
evalcond[1]=(((sj7*x1200))+((sj7*x1195))+(((-1.0)*x1193))+(((-1.0)*r02*x1196)));
evalcond[2]=((0.069)+(((0.37429)*x1192))+((x1194*x1199))+(((0.01)*x1201))+(((-1.0)*pz))+((x1194*x1202)));
evalcond[3]=((-0.36442)+((x1194*x1195))+(((-0.37429)*x1193))+(((-1.0)*px))+((x1194*x1200))+(((0.01)*x1197)));
evalcond[4]=((((-1.0)*cj6*x1196*x1202))+x1193+(((-1.0)*cj6*x1196*x1199))+((r21*x1203))+(((-1.0)*r20*x1204))+(((-1.0)*x1198*x1201)));
evalcond[5]=((((-1.0)*cj6*x1196*x1200))+x1192+(((-1.0)*x1197*x1198))+(((-1.0)*r00*x1204))+((r01*x1203))+(((-1.0)*cj6*x1195*x1196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1205=(sj7*sj8);
IkReal x1206=(cj8*sj7);
IkReal x1207=((1.0)*cj7);
if( IKabs(((((-1.0)*r22*x1207))+((r21*x1206))+((r20*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1207))+((r01*x1206))+((r00*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1207))+((r21*x1206))+((r20*x1205))))+IKsqr(((((-1.0)*r02*x1207))+((r01*x1206))+((r00*x1205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r22*x1207))+((r21*x1206))+((r20*x1205))), ((((-1.0)*r02*x1207))+((r01*x1206))+((r00*x1205))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1208=IKsin(j5);
IkReal x1209=IKcos(j5);
IkReal x1210=((0.01)*cj7);
IkReal x1211=(r00*sj8);
IkReal x1212=((1.0)*cj7);
IkReal x1213=(r02*sj7);
IkReal x1214=((1.0)*cj6);
IkReal x1215=(cj8*r21);
IkReal x1216=(cj8*r01);
IkReal x1217=(r22*sj7);
IkReal x1218=(sj6*sj8);
IkReal x1219=(r20*sj8);
IkReal x1220=((1.0)*x1209);
IkReal x1221=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*r22*x1212))+(((-1.0)*x1208))+((sj7*x1219))+((sj7*x1215)));
evalcond[1]=((((-1.0)*r02*x1212))+(((-1.0)*x1220))+((sj7*x1216))+((sj7*x1211)));
evalcond[2]=((-0.069)+(((0.01)*x1217))+((x1210*x1219))+((x1210*x1215))+(((-1.0)*pz))+(((-0.37429)*x1208)));
evalcond[3]=((-0.36442)+(((0.01)*x1213))+((x1210*x1216))+((x1210*x1211))+(((-1.0)*px))+(((-0.37429)*x1209)));
evalcond[4]=((((-1.0)*cj6*x1211*x1212))+x1208+(((-1.0)*r00*x1221))+((r01*x1218))+(((-1.0)*x1213*x1214))+(((-1.0)*cj6*x1212*x1216)));
evalcond[5]=((((-1.0)*x1220))+(((-1.0)*x1214*x1217))+(((-1.0)*r20*x1221))+((r21*x1218))+(((-1.0)*cj6*x1212*x1215))+(((-1.0)*cj6*x1212*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1222=(sj7*sj8);
IkReal x1223=(cj8*sj7);
CheckValue<IkReal> x1224=IKPowWithIntegerCheck(sj4,-1);
if(!x1224.valid){
continue;
}
if( IKabs(((x1224.value)*(((((-1.0)*r20*x1222))+(((-1.0)*r21*x1223))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1223))+((r00*x1222))+(((-1.0)*cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1224.value)*(((((-1.0)*r20*x1222))+(((-1.0)*r21*x1223))+((cj7*r22))))))+IKsqr((((r01*x1223))+((r00*x1222))+(((-1.0)*cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1224.value)*(((((-1.0)*r20*x1222))+(((-1.0)*r21*x1223))+((cj7*r22))))), (((r01*x1223))+((r00*x1222))+(((-1.0)*cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1225=IKsin(j5);
IkReal x1226=IKcos(j5);
IkReal x1227=((1.0)*cj7);
IkReal x1228=(cj8*r11);
IkReal x1229=(cj8*r21);
IkReal x1230=((0.01)*sj7);
IkReal x1231=(cj8*r01);
IkReal x1232=((0.01)*cj7);
IkReal x1233=(sj6*sj8);
IkReal x1234=(r20*sj8);
IkReal x1235=(r00*sj8);
IkReal x1236=(r10*sj8);
IkReal x1237=(cj4*x1225);
IkReal x1238=(sj4*x1225);
IkReal x1239=((1.0)*cj8*sj6);
IkReal x1240=((1.0)*x1226);
IkReal x1241=((1.0)*cj6*sj7);
evalcond[0]=(((sj7*x1229))+x1238+(((-1.0)*r22*x1227))+((sj7*x1234)));
evalcond[1]=((((-1.0)*x1240))+(((-1.0)*r02*x1227))+((sj7*x1235))+((sj7*x1231)));
evalcond[2]=(((sj7*x1228))+(((-1.0)*x1237))+(((-1.0)*r12*x1227))+((sj7*x1236)));
evalcond[3]=((-0.36442)+(((-0.37429)*x1226))+(((-1.0)*px))+((r02*x1230))+((x1231*x1232))+((x1232*x1235)));
evalcond[4]=((((0.37429)*x1238))+(((-1.0)*pz))+((r22*x1230))+(((0.069)*sj4))+((x1232*x1234))+((x1229*x1232)));
evalcond[5]=((((-0.37429)*x1237))+(((-0.069)*cj4))+(((-1.0)*py))+((x1228*x1232))+((x1232*x1236))+((r12*x1230)));
evalcond[6]=((((-1.0)*r02*x1241))+(((-1.0)*r00*x1239))+x1225+((r01*x1233))+(((-1.0)*cj6*x1227*x1235))+(((-1.0)*cj6*x1227*x1231)));
evalcond[7]=((((-1.0)*r20*x1239))+(((-1.0)*r22*x1241))+((sj4*x1226))+(((-1.0)*cj6*x1227*x1234))+(((-1.0)*cj6*x1227*x1229))+((r21*x1233)));
evalcond[8]=((((-1.0)*cj4*x1240))+(((-1.0)*r12*x1241))+(((-1.0)*r10*x1239))+((r11*x1233))+(((-1.0)*cj6*x1227*x1236))+(((-1.0)*cj6*x1227*x1228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1242=(sj7*sj8);
IkReal x1243=((1.0)*cj7);
IkReal x1244=(cj8*sj7);
CheckValue<IkReal> x1245=IKPowWithIntegerCheck(cj4,-1);
if(!x1245.valid){
continue;
}
if( IKabs(((x1245.value)*(((((-1.0)*r12*x1243))+((r11*x1244))+((r10*x1242)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1243))+((r01*x1244))+((r00*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1245.value)*(((((-1.0)*r12*x1243))+((r11*x1244))+((r10*x1242))))))+IKsqr(((((-1.0)*r02*x1243))+((r01*x1244))+((r00*x1242))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1245.value)*(((((-1.0)*r12*x1243))+((r11*x1244))+((r10*x1242))))), ((((-1.0)*r02*x1243))+((r01*x1244))+((r00*x1242))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1246=IKsin(j5);
IkReal x1247=IKcos(j5);
IkReal x1248=((1.0)*cj7);
IkReal x1249=(cj8*r11);
IkReal x1250=(cj8*r21);
IkReal x1251=((0.01)*sj7);
IkReal x1252=(cj8*r01);
IkReal x1253=((0.01)*cj7);
IkReal x1254=(sj6*sj8);
IkReal x1255=(r20*sj8);
IkReal x1256=(r00*sj8);
IkReal x1257=(r10*sj8);
IkReal x1258=(cj4*x1246);
IkReal x1259=(sj4*x1246);
IkReal x1260=((1.0)*cj8*sj6);
IkReal x1261=((1.0)*x1247);
IkReal x1262=((1.0)*cj6*sj7);
evalcond[0]=(x1259+((sj7*x1255))+((sj7*x1250))+(((-1.0)*r22*x1248)));
evalcond[1]=((((-1.0)*r02*x1248))+((sj7*x1252))+((sj7*x1256))+(((-1.0)*x1261)));
evalcond[2]=(((sj7*x1257))+(((-1.0)*r12*x1248))+(((-1.0)*x1258))+((sj7*x1249)));
evalcond[3]=((-0.36442)+((r02*x1251))+((x1253*x1256))+(((-1.0)*px))+((x1252*x1253))+(((-0.37429)*x1247)));
evalcond[4]=(((r22*x1251))+(((0.37429)*x1259))+((x1253*x1255))+(((-1.0)*pz))+((x1250*x1253))+(((0.069)*sj4)));
evalcond[5]=(((r12*x1251))+(((-0.069)*cj4))+(((-0.37429)*x1258))+((x1253*x1257))+(((-1.0)*py))+((x1249*x1253)));
evalcond[6]=(x1246+(((-1.0)*r00*x1260))+(((-1.0)*cj6*x1248*x1256))+(((-1.0)*cj6*x1248*x1252))+(((-1.0)*r02*x1262))+((r01*x1254)));
evalcond[7]=((((-1.0)*r22*x1262))+((r21*x1254))+(((-1.0)*cj6*x1248*x1255))+(((-1.0)*cj6*x1248*x1250))+((sj4*x1247))+(((-1.0)*r20*x1260)));
evalcond[8]=((((-1.0)*r10*x1260))+((r11*x1254))+(((-1.0)*r12*x1262))+(((-1.0)*cj6*x1248*x1257))+(((-1.0)*cj4*x1261))+(((-1.0)*cj6*x1248*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1263=((1.0)*sj7);
CheckValue<IkReal> x1264=IKPowWithIntegerCheck(cj3,-1);
if(!x1264.valid){
continue;
}
if( IKabs(((((-1.0)*cj8*r21*x1263))+(((-1.0)*r20*sj8*x1263))+((cj7*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1264.value)*(((((-1.0)*r00*sj8*x1263))+((cj7*r02))+(((-1.0)*cj8*r01*x1263)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*r21*x1263))+(((-1.0)*r20*sj8*x1263))+((cj7*r22))))+IKsqr(((x1264.value)*(((((-1.0)*r00*sj8*x1263))+((cj7*r02))+(((-1.0)*cj8*r01*x1263))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj8*r21*x1263))+(((-1.0)*r20*sj8*x1263))+((cj7*r22))), ((x1264.value)*(((((-1.0)*r00*sj8*x1263))+((cj7*r02))+(((-1.0)*cj8*r01*x1263))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1265=IKcos(j5);
IkReal x1266=IKsin(j5);
IkReal x1267=((0.01)*cj7);
IkReal x1268=(r00*sj8);
IkReal x1269=((1.0)*cj7);
IkReal x1270=(cj8*r11);
IkReal x1271=(r02*sj7);
IkReal x1272=((1.0)*cj6);
IkReal x1273=(r12*sj7);
IkReal x1274=(cj8*r21);
IkReal x1275=(cj8*r01);
IkReal x1276=(r22*sj7);
IkReal x1277=(sj6*sj8);
IkReal x1278=(r20*sj8);
IkReal x1279=(r10*sj8);
IkReal x1280=(cj3*x1265);
IkReal x1281=(sj3*x1265);
IkReal x1282=((1.0)*cj8*sj6);
IkReal x1283=((1.0)*x1266);
evalcond[0]=(x1266+(((-1.0)*r22*x1269))+((sj7*x1274))+((sj7*x1278)));
evalcond[1]=((((-1.0)*r12*x1269))+x1281+((sj7*x1270))+((sj7*x1279)));
evalcond[2]=(x1280+((sj7*x1268))+((sj7*x1275))+(((-1.0)*r02*x1269)));
evalcond[3]=((0.069)+(((0.37429)*x1266))+((x1267*x1278))+((x1267*x1274))+(((-1.0)*pz))+(((0.01)*x1276)));
evalcond[4]=((((0.37429)*x1280))+(((0.36442)*cj3))+((x1267*x1275))+(((-1.0)*px))+((x1267*x1268))+(((0.01)*x1271)));
evalcond[5]=((((0.37429)*x1281))+(((0.36442)*sj3))+((x1267*x1279))+((x1267*x1270))+(((-1.0)*py))+(((0.01)*x1273)));
evalcond[6]=(x1265+((r21*x1277))+(((-1.0)*cj6*x1269*x1274))+(((-1.0)*cj6*x1269*x1278))+(((-1.0)*x1272*x1276))+(((-1.0)*r20*x1282)));
evalcond[7]=(((r11*x1277))+(((-1.0)*cj6*x1269*x1270))+(((-1.0)*cj6*x1269*x1279))+(((-1.0)*x1272*x1273))+(((-1.0)*r10*x1282))+(((-1.0)*sj3*x1283)));
evalcond[8]=((((-1.0)*cj6*x1269*x1275))+(((-1.0)*cj3*x1283))+(((-1.0)*x1271*x1272))+(((-1.0)*r00*x1282))+((r01*x1277))+(((-1.0)*cj6*x1268*x1269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1284=((1.0)*sj7*sj8);
IkReal x1285=((1.0)*cj8*sj7);
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(sj3,-1);
if(!x1286.valid){
continue;
}
if( IKabs(((((-1.0)*r21*x1285))+(((-1.0)*r20*x1284))+((cj7*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1286.value)*(((((-1.0)*r10*x1284))+((cj7*r12))+(((-1.0)*r11*x1285)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1285))+(((-1.0)*r20*x1284))+((cj7*r22))))+IKsqr(((x1286.value)*(((((-1.0)*r10*x1284))+((cj7*r12))+(((-1.0)*r11*x1285))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r21*x1285))+(((-1.0)*r20*x1284))+((cj7*r22))), ((x1286.value)*(((((-1.0)*r10*x1284))+((cj7*r12))+(((-1.0)*r11*x1285))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1287=IKcos(j5);
IkReal x1288=IKsin(j5);
IkReal x1289=((0.01)*cj7);
IkReal x1290=(r00*sj8);
IkReal x1291=((1.0)*cj7);
IkReal x1292=(cj8*r11);
IkReal x1293=(r02*sj7);
IkReal x1294=((1.0)*cj6);
IkReal x1295=(r12*sj7);
IkReal x1296=(cj8*r21);
IkReal x1297=(cj8*r01);
IkReal x1298=(r22*sj7);
IkReal x1299=(sj6*sj8);
IkReal x1300=(r20*sj8);
IkReal x1301=(r10*sj8);
IkReal x1302=(cj3*x1287);
IkReal x1303=(sj3*x1287);
IkReal x1304=((1.0)*cj8*sj6);
IkReal x1305=((1.0)*x1288);
evalcond[0]=(x1288+((sj7*x1296))+(((-1.0)*r22*x1291))+((sj7*x1300)));
evalcond[1]=(x1303+((sj7*x1292))+(((-1.0)*r12*x1291))+((sj7*x1301)));
evalcond[2]=(x1302+((sj7*x1297))+((sj7*x1290))+(((-1.0)*r02*x1291)));
evalcond[3]=((0.069)+(((0.37429)*x1288))+((x1289*x1300))+(((-1.0)*pz))+(((0.01)*x1298))+((x1289*x1296)));
evalcond[4]=((((0.36442)*cj3))+(((0.37429)*x1302))+(((-1.0)*px))+(((0.01)*x1293))+((x1289*x1297))+((x1289*x1290)));
evalcond[5]=((((0.37429)*x1303))+((x1289*x1301))+(((0.36442)*sj3))+(((-1.0)*py))+(((0.01)*x1295))+((x1289*x1292)));
evalcond[6]=(x1287+((r21*x1299))+(((-1.0)*r20*x1304))+(((-1.0)*cj6*x1291*x1296))+(((-1.0)*x1294*x1298))+(((-1.0)*cj6*x1291*x1300)));
evalcond[7]=((((-1.0)*cj6*x1291*x1292))+(((-1.0)*r10*x1304))+((r11*x1299))+(((-1.0)*sj3*x1305))+(((-1.0)*x1294*x1295))+(((-1.0)*cj6*x1291*x1301)));
evalcond[8]=((((-1.0)*cj3*x1305))+(((-1.0)*r00*x1304))+(((-1.0)*cj6*x1291*x1297))+(((-1.0)*x1293*x1294))+(((-1.0)*cj6*x1290*x1291))+((r01*x1299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1306=(cj8*sj7);
IkReal x1307=(sj7*sj8);
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(cj3,-1);
if(!x1308.valid){
continue;
}
if( IKabs(((((-1.0)*cj7*r22))+((r21*x1306))+((r20*x1307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1308.value)*(((((-1.0)*r00*x1307))+(((-1.0)*r01*x1306))+((cj7*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*r22))+((r21*x1306))+((r20*x1307))))+IKsqr(((x1308.value)*(((((-1.0)*r00*x1307))+(((-1.0)*r01*x1306))+((cj7*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*r22))+((r21*x1306))+((r20*x1307))), ((x1308.value)*(((((-1.0)*r00*x1307))+(((-1.0)*r01*x1306))+((cj7*r02))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1309=IKcos(j5);
IkReal x1310=IKsin(j5);
IkReal x1311=((0.01)*cj7);
IkReal x1312=(r00*sj8);
IkReal x1313=((1.0)*cj7);
IkReal x1314=(cj8*r11);
IkReal x1315=(r02*sj7);
IkReal x1316=((1.0)*cj6);
IkReal x1317=(r12*sj7);
IkReal x1318=(cj8*r21);
IkReal x1319=(cj8*r01);
IkReal x1320=(r22*sj7);
IkReal x1321=(sj6*sj8);
IkReal x1322=(r20*sj8);
IkReal x1323=(r10*sj8);
IkReal x1324=(cj3*x1309);
IkReal x1325=(sj3*x1309);
IkReal x1326=((1.0)*x1310);
IkReal x1327=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*r22*x1313))+(((-1.0)*x1326))+((sj7*x1318))+((sj7*x1322)));
evalcond[1]=(x1325+(((-1.0)*r12*x1313))+((sj7*x1314))+((sj7*x1323)));
evalcond[2]=(x1324+(((-1.0)*r02*x1313))+((sj7*x1319))+((sj7*x1312)));
evalcond[3]=((-0.069)+(((-0.37429)*x1310))+((x1311*x1318))+(((0.01)*x1320))+(((-1.0)*pz))+((x1311*x1322)));
evalcond[4]=(((x1311*x1319))+((x1311*x1312))+(((0.01)*x1315))+(((0.37429)*x1324))+(((0.36442)*cj3))+(((-1.0)*px)));
evalcond[5]=(((x1311*x1314))+(((0.01)*x1317))+(((0.37429)*x1325))+(((0.36442)*sj3))+(((-1.0)*py))+((x1311*x1323)));
evalcond[6]=((((-1.0)*x1309))+(((-1.0)*cj6*x1313*x1322))+((r21*x1321))+(((-1.0)*r20*x1327))+(((-1.0)*cj6*x1313*x1318))+(((-1.0)*x1316*x1320)));
evalcond[7]=(((r11*x1321))+(((-1.0)*cj6*x1313*x1323))+(((-1.0)*sj3*x1326))+(((-1.0)*cj6*x1313*x1314))+(((-1.0)*r10*x1327))+(((-1.0)*x1316*x1317)));
evalcond[8]=((((-1.0)*x1315*x1316))+(((-1.0)*cj3*x1326))+((r01*x1321))+(((-1.0)*cj6*x1312*x1313))+(((-1.0)*r00*x1327))+(((-1.0)*cj6*x1313*x1319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1328=(cj8*sj7);
IkReal x1329=(sj7*sj8);
CheckValue<IkReal> x1330=IKPowWithIntegerCheck(sj3,-1);
if(!x1330.valid){
continue;
}
if( IKabs(((((-1.0)*cj7*r22))+((r21*x1328))+((r20*x1329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1330.value)*(((((-1.0)*r10*x1329))+(((-1.0)*r11*x1328))+((cj7*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*r22))+((r21*x1328))+((r20*x1329))))+IKsqr(((x1330.value)*(((((-1.0)*r10*x1329))+(((-1.0)*r11*x1328))+((cj7*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*r22))+((r21*x1328))+((r20*x1329))), ((x1330.value)*(((((-1.0)*r10*x1329))+(((-1.0)*r11*x1328))+((cj7*r12))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1331=IKcos(j5);
IkReal x1332=IKsin(j5);
IkReal x1333=((0.01)*cj7);
IkReal x1334=(r00*sj8);
IkReal x1335=((1.0)*cj7);
IkReal x1336=(cj8*r11);
IkReal x1337=(r02*sj7);
IkReal x1338=((1.0)*cj6);
IkReal x1339=(r12*sj7);
IkReal x1340=(cj8*r21);
IkReal x1341=(cj8*r01);
IkReal x1342=(r22*sj7);
IkReal x1343=(sj6*sj8);
IkReal x1344=(r20*sj8);
IkReal x1345=(r10*sj8);
IkReal x1346=(cj3*x1331);
IkReal x1347=(sj3*x1331);
IkReal x1348=((1.0)*x1332);
IkReal x1349=((1.0)*cj8*sj6);
evalcond[0]=(((sj7*x1344))+((sj7*x1340))+(((-1.0)*x1348))+(((-1.0)*r22*x1335)));
evalcond[1]=(x1347+((sj7*x1345))+((sj7*x1336))+(((-1.0)*r12*x1335)));
evalcond[2]=(x1346+((sj7*x1341))+((sj7*x1334))+(((-1.0)*r02*x1335)));
evalcond[3]=((-0.069)+(((0.01)*x1342))+((x1333*x1344))+((x1333*x1340))+(((-1.0)*pz))+(((-0.37429)*x1332)));
evalcond[4]=((((0.37429)*x1346))+((x1333*x1341))+(((0.36442)*cj3))+(((0.01)*x1337))+(((-1.0)*px))+((x1333*x1334)));
evalcond[5]=((((0.37429)*x1347))+((x1333*x1345))+(((0.01)*x1339))+(((0.36442)*sj3))+(((-1.0)*py))+((x1333*x1336)));
evalcond[6]=((((-1.0)*r20*x1349))+(((-1.0)*x1338*x1342))+(((-1.0)*x1331))+(((-1.0)*cj6*x1335*x1344))+(((-1.0)*cj6*x1335*x1340))+((r21*x1343)));
evalcond[7]=((((-1.0)*cj6*x1335*x1345))+(((-1.0)*sj3*x1348))+(((-1.0)*cj6*x1335*x1336))+((r11*x1343))+(((-1.0)*x1338*x1339))+(((-1.0)*r10*x1349)));
evalcond[8]=((((-1.0)*cj6*x1335*x1341))+(((-1.0)*x1337*x1338))+(((-1.0)*r00*x1349))+(((-1.0)*cj3*x1348))+(((-1.0)*cj6*x1334*x1335))+((r01*x1343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1356=IKPowWithIntegerCheck(sj4,-1);
if(!x1356.valid){
continue;
}
IkReal x1350=x1356.value;
IkReal x1351=((1.0)*sj7);
IkReal x1352=(r20*sj8);
IkReal x1353=(cj4*sj3);
IkReal x1354=(cj8*r21);
IkReal x1355=(cj7*r22);
CheckValue<IkReal> x1357=IKPowWithIntegerCheck(cj3,-1);
if(!x1357.valid){
continue;
}
if( IKabs((x1350*((x1355+(((-1.0)*x1351*x1352))+(((-1.0)*x1351*x1354)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1350*(x1357.value)*(((((-1.0)*x1351*x1352*x1353))+(((-1.0)*x1351*x1353*x1354))+((cj7*r02*sj4))+((x1353*x1355))+(((-1.0)*cj8*r01*sj4*x1351))+(((-1.0)*r00*sj4*sj8*x1351)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1350*((x1355+(((-1.0)*x1351*x1352))+(((-1.0)*x1351*x1354))))))+IKsqr((x1350*(x1357.value)*(((((-1.0)*x1351*x1352*x1353))+(((-1.0)*x1351*x1353*x1354))+((cj7*r02*sj4))+((x1353*x1355))+(((-1.0)*cj8*r01*sj4*x1351))+(((-1.0)*r00*sj4*sj8*x1351))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1350*((x1355+(((-1.0)*x1351*x1352))+(((-1.0)*x1351*x1354))))), (x1350*(x1357.value)*(((((-1.0)*x1351*x1352*x1353))+(((-1.0)*x1351*x1353*x1354))+((cj7*r02*sj4))+((x1353*x1355))+(((-1.0)*cj8*r01*sj4*x1351))+(((-1.0)*r00*sj4*sj8*x1351))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1358=IKsin(j5);
IkReal x1359=IKcos(j5);
IkReal x1360=((1.0)*cj7);
IkReal x1361=(cj8*r11);
IkReal x1362=((0.01)*cj7);
IkReal x1363=(r00*sj8);
IkReal x1364=((0.37429)*sj3);
IkReal x1365=((1.0)*sj3);
IkReal x1366=(cj8*r21);
IkReal x1367=((0.069)*cj4);
IkReal x1368=((0.01)*sj7);
IkReal x1369=(cj8*r01);
IkReal x1370=(sj6*sj8);
IkReal x1371=(r10*sj8);
IkReal x1372=(r20*sj8);
IkReal x1373=(sj4*x1358);
IkReal x1374=(cj3*x1359);
IkReal x1375=(cj3*x1358);
IkReal x1376=((1.0)*cj6*sj7);
IkReal x1377=(cj4*x1358);
IkReal x1378=((1.0)*cj8*sj6);
evalcond[0]=(x1373+(((-1.0)*r22*x1360))+((sj7*x1372))+((sj7*x1366)));
evalcond[1]=((((-1.0)*r12*x1360))+((cj4*x1375))+((sj3*x1359))+((sj7*x1371))+((sj7*x1361)));
evalcond[2]=(x1374+(((-1.0)*x1365*x1377))+(((-1.0)*r02*x1360))+((sj7*x1363))+((sj7*x1369)));
evalcond[3]=(((r22*x1368))+(((-1.0)*pz))+((x1362*x1372))+(((0.37429)*x1373))+(((0.069)*sj4))+((x1362*x1366)));
evalcond[4]=(((sj4*x1359))+(((-1.0)*r22*x1376))+(((-1.0)*r20*x1378))+(((-1.0)*cj6*x1360*x1372))+((r21*x1370))+(((-1.0)*cj6*x1360*x1366)));
evalcond[5]=((((-1.0)*sj3*x1367))+((r02*x1368))+(((0.36442)*cj3))+(((-1.0)*px))+(((0.37429)*x1374))+(((-1.0)*x1364*x1377))+((x1362*x1369))+((x1362*x1363)));
evalcond[6]=(((x1361*x1362))+((x1359*x1364))+(((0.36442)*sj3))+(((-1.0)*py))+((x1362*x1371))+((r12*x1368))+((cj3*x1367))+(((0.37429)*cj4*x1375)));
evalcond[7]=(((cj4*x1374))+((r11*x1370))+(((-1.0)*cj6*x1360*x1371))+(((-1.0)*r10*x1378))+(((-1.0)*r12*x1376))+(((-1.0)*cj6*x1360*x1361))+(((-1.0)*x1358*x1365)));
evalcond[8]=((((-1.0)*r00*x1378))+(((-1.0)*x1375))+(((-1.0)*r02*x1376))+(((-1.0)*cj6*x1360*x1363))+(((-1.0)*cj6*x1360*x1369))+(((-1.0)*cj4*x1359*x1365))+((r01*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1385=IKPowWithIntegerCheck(sj4,-1);
if(!x1385.valid){
continue;
}
IkReal x1379=x1385.value;
IkReal x1380=(cj8*r21);
IkReal x1381=((1.0)*sj7);
IkReal x1382=(cj7*r22);
IkReal x1383=(sj8*x1381);
IkReal x1384=(cj3*cj4*sj7);
CheckValue<IkReal> x1386=IKPowWithIntegerCheck(sj3,-1);
if(!x1386.valid){
continue;
}
if( IKabs((x1379*((x1382+(((-1.0)*r20*x1383))+(((-1.0)*x1380*x1381)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1379*(x1386.value)*(((((-1.0)*cj8*r11*sj4*x1381))+((x1380*x1384))+((cj7*r12*sj4))+(((-1.0)*r10*sj4*x1383))+((r20*sj8*x1384))+(((-1.0)*cj3*cj4*x1382)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1379*((x1382+(((-1.0)*r20*x1383))+(((-1.0)*x1380*x1381))))))+IKsqr((x1379*(x1386.value)*(((((-1.0)*cj8*r11*sj4*x1381))+((x1380*x1384))+((cj7*r12*sj4))+(((-1.0)*r10*sj4*x1383))+((r20*sj8*x1384))+(((-1.0)*cj3*cj4*x1382))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1379*((x1382+(((-1.0)*r20*x1383))+(((-1.0)*x1380*x1381))))), (x1379*(x1386.value)*(((((-1.0)*cj8*r11*sj4*x1381))+((x1380*x1384))+((cj7*r12*sj4))+(((-1.0)*r10*sj4*x1383))+((r20*sj8*x1384))+(((-1.0)*cj3*cj4*x1382))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1387=IKsin(j5);
IkReal x1388=IKcos(j5);
IkReal x1389=((1.0)*cj7);
IkReal x1390=(cj8*r11);
IkReal x1391=((0.01)*cj7);
IkReal x1392=(r00*sj8);
IkReal x1393=((0.37429)*sj3);
IkReal x1394=((1.0)*sj3);
IkReal x1395=(cj8*r21);
IkReal x1396=((0.069)*cj4);
IkReal x1397=((0.01)*sj7);
IkReal x1398=(cj8*r01);
IkReal x1399=(sj6*sj8);
IkReal x1400=(r10*sj8);
IkReal x1401=(r20*sj8);
IkReal x1402=(sj4*x1387);
IkReal x1403=(cj3*x1388);
IkReal x1404=(cj3*x1387);
IkReal x1405=((1.0)*cj6*sj7);
IkReal x1406=(cj4*x1387);
IkReal x1407=((1.0)*cj8*sj6);
evalcond[0]=(((sj7*x1395))+((sj7*x1401))+x1402+(((-1.0)*r22*x1389)));
evalcond[1]=((((-1.0)*r12*x1389))+((sj7*x1390))+((sj7*x1400))+((cj4*x1404))+((sj3*x1388)));
evalcond[2]=((((-1.0)*r02*x1389))+((sj7*x1392))+((sj7*x1398))+x1403+(((-1.0)*x1394*x1406)));
evalcond[3]=((((0.37429)*x1402))+((x1391*x1401))+(((-1.0)*pz))+(((0.069)*sj4))+((x1391*x1395))+((r22*x1397)));
evalcond[4]=(((sj4*x1388))+((r21*x1399))+(((-1.0)*r22*x1405))+(((-1.0)*r20*x1407))+(((-1.0)*cj6*x1389*x1395))+(((-1.0)*cj6*x1389*x1401)));
evalcond[5]=((((0.37429)*x1403))+(((0.36442)*cj3))+(((-1.0)*px))+(((-1.0)*x1393*x1406))+((x1391*x1392))+((x1391*x1398))+((r02*x1397))+(((-1.0)*sj3*x1396)));
evalcond[6]=((((0.37429)*cj4*x1404))+((x1388*x1393))+((cj3*x1396))+((x1391*x1400))+((x1390*x1391))+(((0.36442)*sj3))+(((-1.0)*py))+((r12*x1397)));
evalcond[7]=((((-1.0)*r12*x1405))+((cj4*x1403))+(((-1.0)*r10*x1407))+((r11*x1399))+(((-1.0)*x1387*x1394))+(((-1.0)*cj6*x1389*x1390))+(((-1.0)*cj6*x1389*x1400)));
evalcond[8]=((((-1.0)*x1404))+(((-1.0)*cj4*x1388*x1394))+(((-1.0)*r00*x1407))+(((-1.0)*r02*x1405))+((r01*x1399))+(((-1.0)*cj6*x1389*x1392))+(((-1.0)*cj6*x1389*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1408=((1.0)*sj7);
IkReal x1409=(cj3*sj8);
IkReal x1410=(cj8*r11);
IkReal x1411=(cj7*r02);
IkReal x1412=(sj3*sj8);
IkReal x1413=(cj8*r01);
IkReal x1414=(cj7*r12);
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(cj4,-1);
if(!x1415.valid){
continue;
}
if( IKabs(((x1415.value)*(((((-1.0)*r10*x1408*x1409))+((sj3*sj7*x1413))+(((-1.0)*sj3*x1411))+(((-1.0)*cj3*x1408*x1410))+((r00*sj7*x1412))+((cj3*x1414)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x1408*x1410))+(((-1.0)*cj3*x1408*x1413))+(((-1.0)*r10*x1408*x1412))+(((-1.0)*r00*x1408*x1409))+((sj3*x1414))+((cj3*x1411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1415.value)*(((((-1.0)*r10*x1408*x1409))+((sj3*sj7*x1413))+(((-1.0)*sj3*x1411))+(((-1.0)*cj3*x1408*x1410))+((r00*sj7*x1412))+((cj3*x1414))))))+IKsqr(((((-1.0)*sj3*x1408*x1410))+(((-1.0)*cj3*x1408*x1413))+(((-1.0)*r10*x1408*x1412))+(((-1.0)*r00*x1408*x1409))+((sj3*x1414))+((cj3*x1411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1415.value)*(((((-1.0)*r10*x1408*x1409))+((sj3*sj7*x1413))+(((-1.0)*sj3*x1411))+(((-1.0)*cj3*x1408*x1410))+((r00*sj7*x1412))+((cj3*x1414))))), ((((-1.0)*sj3*x1408*x1410))+(((-1.0)*cj3*x1408*x1413))+(((-1.0)*r10*x1408*x1412))+(((-1.0)*r00*x1408*x1409))+((sj3*x1414))+((cj3*x1411))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1416=IKsin(j5);
IkReal x1417=IKcos(j5);
IkReal x1418=((1.0)*cj7);
IkReal x1419=(cj8*r11);
IkReal x1420=((0.01)*cj7);
IkReal x1421=(r00*sj8);
IkReal x1422=((0.37429)*sj3);
IkReal x1423=((1.0)*sj3);
IkReal x1424=(cj8*r21);
IkReal x1425=((0.069)*cj4);
IkReal x1426=((0.01)*sj7);
IkReal x1427=(cj8*r01);
IkReal x1428=(sj6*sj8);
IkReal x1429=(r10*sj8);
IkReal x1430=(r20*sj8);
IkReal x1431=(sj4*x1416);
IkReal x1432=(cj3*x1417);
IkReal x1433=(cj3*x1416);
IkReal x1434=((1.0)*cj6*sj7);
IkReal x1435=(cj4*x1416);
IkReal x1436=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*r22*x1418))+((sj7*x1430))+x1431+((sj7*x1424)));
evalcond[1]=(((cj4*x1433))+((sj7*x1419))+(((-1.0)*r12*x1418))+((sj7*x1429))+((sj3*x1417)));
evalcond[2]=((((-1.0)*r02*x1418))+x1432+((sj7*x1427))+((sj7*x1421))+(((-1.0)*x1423*x1435)));
evalcond[3]=((((0.37429)*x1431))+((x1420*x1424))+((r22*x1426))+(((-1.0)*pz))+(((0.069)*sj4))+((x1420*x1430)));
evalcond[4]=(((r21*x1428))+(((-1.0)*r22*x1434))+(((-1.0)*cj6*x1418*x1424))+((sj4*x1417))+(((-1.0)*r20*x1436))+(((-1.0)*cj6*x1418*x1430)));
evalcond[5]=((((0.37429)*x1432))+((x1420*x1427))+((x1420*x1421))+(((-1.0)*x1422*x1435))+(((0.36442)*cj3))+(((-1.0)*px))+((r02*x1426))+(((-1.0)*sj3*x1425)));
evalcond[6]=(((x1420*x1429))+((cj3*x1425))+(((0.36442)*sj3))+(((-1.0)*py))+((x1419*x1420))+((r12*x1426))+((x1417*x1422))+(((0.37429)*cj4*x1433)));
evalcond[7]=(((r11*x1428))+(((-1.0)*r12*x1434))+(((-1.0)*x1416*x1423))+(((-1.0)*cj6*x1418*x1419))+((cj4*x1432))+(((-1.0)*cj6*x1418*x1429))+(((-1.0)*r10*x1436)));
evalcond[8]=(((r01*x1428))+(((-1.0)*x1433))+(((-1.0)*cj6*x1418*x1421))+(((-1.0)*cj6*x1418*x1427))+(((-1.0)*r02*x1434))+(((-1.0)*r00*x1436))+(((-1.0)*cj4*x1417*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1437=(cj6*sj8);
IkReal x1438=(cj7*sj6);
IkReal x1439=(sj6*sj7);
IkReal x1440=((1.0)*cj6*cj8);
CheckValue<IkReal> x1441=IKPowWithIntegerCheck(sj3,-1);
if(!x1441.valid){
continue;
}
if( IKabs(((x1441.value)*((((r02*x1439))+(((-1.0)*r00*x1440))+((cj8*r01*x1438))+((r01*x1437))+((r00*sj8*x1438)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1440))+((cj8*r21*x1438))+((r21*x1437))+((r22*x1439))+((r20*sj8*x1438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1441.value)*((((r02*x1439))+(((-1.0)*r00*x1440))+((cj8*r01*x1438))+((r01*x1437))+((r00*sj8*x1438))))))+IKsqr(((((-1.0)*r20*x1440))+((cj8*r21*x1438))+((r21*x1437))+((r22*x1439))+((r20*sj8*x1438))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1441.value)*((((r02*x1439))+(((-1.0)*r00*x1440))+((cj8*r01*x1438))+((r01*x1437))+((r00*sj8*x1438))))), ((((-1.0)*r20*x1440))+((cj8*r21*x1438))+((r21*x1437))+((r22*x1439))+((r20*sj8*x1438))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1442=IKsin(j4);
IkReal x1443=(cj6*sj8);
IkReal x1444=(cj7*sj6);
IkReal x1445=(sj6*sj7);
IkReal x1446=((1.0)*cj6*cj8);
evalcond[0]=(((cj8*r21*x1444))+(((-1.0)*r20*x1446))+((r22*x1445))+((r20*sj8*x1444))+((r21*x1443))+(((-1.0)*(IKcos(j4)))));
evalcond[1]=(((r12*x1445))+((r11*x1443))+((cj8*r11*x1444))+(((-1.0)*r10*x1446))+((cj3*x1442))+((r10*sj8*x1444)));
evalcond[2]=((((-1.0)*r00*x1446))+((cj8*r01*x1444))+((r02*x1445))+(((-1.0)*sj3*x1442))+((r01*x1443))+((r00*sj8*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=sj4;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1447=((1.0)*sj7);
IkReal x1448=(cj3*sj8);
IkReal x1449=(cj8*r11);
IkReal x1450=(cj7*r02);
IkReal x1451=(sj3*sj8);
IkReal x1452=(cj8*r01);
IkReal x1453=(cj7*r12);
if( IKabs(((((-1.0)*sj3*x1450))+((sj3*sj7*x1452))+(((-1.0)*r10*x1447*x1448))+(((-1.0)*cj3*x1447*x1449))+((cj3*x1453))+((r00*sj7*x1451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj3*x1453))+(((-1.0)*r00*x1447*x1448))+((cj3*x1450))+(((-1.0)*cj3*x1447*x1452))+(((-1.0)*sj3*x1447*x1449))+(((-1.0)*r10*x1447*x1451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj3*x1450))+((sj3*sj7*x1452))+(((-1.0)*r10*x1447*x1448))+(((-1.0)*cj3*x1447*x1449))+((cj3*x1453))+((r00*sj7*x1451))))+IKsqr((((sj3*x1453))+(((-1.0)*r00*x1447*x1448))+((cj3*x1450))+(((-1.0)*cj3*x1447*x1452))+(((-1.0)*sj3*x1447*x1449))+(((-1.0)*r10*x1447*x1451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj3*x1450))+((sj3*sj7*x1452))+(((-1.0)*r10*x1447*x1448))+(((-1.0)*cj3*x1447*x1449))+((cj3*x1453))+((r00*sj7*x1451))), (((sj3*x1453))+(((-1.0)*r00*x1447*x1448))+((cj3*x1450))+(((-1.0)*cj3*x1447*x1452))+(((-1.0)*sj3*x1447*x1449))+(((-1.0)*r10*x1447*x1451))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1454=IKcos(j5);
IkReal x1455=IKsin(j5);
IkReal x1456=(cj8*r11);
IkReal x1457=((1.0)*cj6);
IkReal x1458=(r02*sj7);
IkReal x1459=(r12*sj7);
IkReal x1460=((1.0)*cj7);
IkReal x1461=(cj8*r01);
IkReal x1462=(sj6*sj8);
IkReal x1463=(sj7*sj8);
IkReal x1464=((0.01)*cj7);
IkReal x1465=(r10*sj8);
IkReal x1466=(cj3*x1454);
IkReal x1467=(cj7*r00*sj8);
IkReal x1468=(sj3*x1454);
IkReal x1469=(cj3*x1455);
IkReal x1470=(sj3*x1455);
IkReal x1471=((1.0)*cj8*sj6);
IkReal x1472=((1.0)*x1470);
evalcond[0]=(((sj7*x1456))+x1469+x1468+((r10*x1463))+(((-1.0)*r12*x1460)));
evalcond[1]=((((-1.0)*r02*x1460))+((r00*x1463))+x1466+(((-1.0)*x1472))+((sj7*x1461)));
evalcond[2]=(((x1461*x1464))+(((0.36442)*cj3))+((r00*sj8*x1464))+(((-1.0)*px))+(((-0.069)*sj3))+(((-0.37429)*x1470))+(((0.01)*x1458))+(((0.37429)*x1466)));
evalcond[3]=((((0.069)*cj3))+((x1464*x1465))+(((0.36442)*sj3))+(((-1.0)*py))+((x1456*x1464))+(((0.01)*x1459))+(((0.37429)*x1469))+(((0.37429)*x1468)));
evalcond[4]=((((-1.0)*x1457*x1459))+(((-1.0)*cj7*x1457*x1465))+(((-1.0)*r10*x1471))+x1466+(((-1.0)*x1472))+((r11*x1462))+(((-1.0)*cj7*x1456*x1457)));
evalcond[5]=((((-1.0)*x1457*x1458))+(((-1.0)*cj7*x1457*x1461))+(((-1.0)*r00*x1471))+((r01*x1462))+(((-1.0)*x1457*x1467))+(((-1.0)*x1469))+(((-1.0)*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1473=((1.0)*cj3);
IkReal x1474=(cj7*r12);
IkReal x1475=(r00*sj8);
IkReal x1476=(cj8*r11);
IkReal x1477=(cj8*r01);
IkReal x1478=(cj7*r02);
IkReal x1479=(r10*sj8);
IkReal x1480=(cj3*sj7);
IkReal x1481=((1.0)*sj3*sj7);
if( IKabs((((x1476*x1480))+(((-1.0)*x1475*x1481))+(((-1.0)*x1477*x1481))+((sj3*x1478))+((x1479*x1480))+(((-1.0)*x1473*x1474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1479*x1481))+((cj3*x1478))+((sj3*x1474))+(((-1.0)*x1476*x1481))+(((-1.0)*sj7*x1473*x1477))+(((-1.0)*sj7*x1473*x1475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1476*x1480))+(((-1.0)*x1475*x1481))+(((-1.0)*x1477*x1481))+((sj3*x1478))+((x1479*x1480))+(((-1.0)*x1473*x1474))))+IKsqr(((((-1.0)*x1479*x1481))+((cj3*x1478))+((sj3*x1474))+(((-1.0)*x1476*x1481))+(((-1.0)*sj7*x1473*x1477))+(((-1.0)*sj7*x1473*x1475))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((x1476*x1480))+(((-1.0)*x1475*x1481))+(((-1.0)*x1477*x1481))+((sj3*x1478))+((x1479*x1480))+(((-1.0)*x1473*x1474))), ((((-1.0)*x1479*x1481))+((cj3*x1478))+((sj3*x1474))+(((-1.0)*x1476*x1481))+(((-1.0)*sj7*x1473*x1477))+(((-1.0)*sj7*x1473*x1475))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1482=IKcos(j5);
IkReal x1483=IKsin(j5);
IkReal x1484=(cj8*r11);
IkReal x1485=((1.0)*cj6);
IkReal x1486=(r02*sj7);
IkReal x1487=(r12*sj7);
IkReal x1488=((1.0)*cj7);
IkReal x1489=(cj8*r01);
IkReal x1490=(sj6*sj8);
IkReal x1491=(sj7*sj8);
IkReal x1492=((0.01)*cj7);
IkReal x1493=(r10*sj8);
IkReal x1494=(sj3*x1482);
IkReal x1495=(cj7*r00*sj8);
IkReal x1496=(cj3*x1482);
IkReal x1497=(sj3*x1483);
IkReal x1498=(cj3*x1483);
IkReal x1499=((1.0)*cj8*sj6);
IkReal x1500=((1.0)*x1498);
evalcond[0]=(((r00*x1491))+(((-1.0)*r02*x1488))+x1496+x1497+((sj7*x1489)));
evalcond[1]=((((-1.0)*x1500))+((r10*x1491))+(((-1.0)*r12*x1488))+x1494+((sj7*x1484)));
evalcond[2]=((((0.01)*x1486))+((x1489*x1492))+(((0.36442)*cj3))+((r00*sj8*x1492))+(((-1.0)*px))+(((0.069)*sj3))+(((0.37429)*x1497))+(((0.37429)*x1496)));
evalcond[3]=((((-0.37429)*x1498))+(((0.01)*x1487))+(((-0.069)*cj3))+(((0.36442)*sj3))+(((-1.0)*py))+((x1484*x1492))+((x1492*x1493))+(((0.37429)*x1494)));
evalcond[4]=((((-1.0)*x1500))+(((-1.0)*r00*x1499))+(((-1.0)*x1485*x1486))+((r01*x1490))+(((-1.0)*cj7*x1485*x1489))+(((-1.0)*x1485*x1495))+x1494);
evalcond[5]=((((-1.0)*cj7*x1485*x1493))+(((-1.0)*x1485*x1487))+(((-1.0)*x1496))+(((-1.0)*x1497))+((r11*x1490))+(((-1.0)*cj7*x1484*x1485))+(((-1.0)*r10*x1499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1501=(sj7*sj8);
IkReal x1502=(cj8*sj7);
if( IKabs((((r01*x1502))+((r00*x1501))+(((-1.0)*cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1501))+((cj7*r12))+(((-1.0)*r11*x1502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1502))+((r00*x1501))+(((-1.0)*cj7*r02))))+IKsqr(((((-1.0)*r10*x1501))+((cj7*r12))+(((-1.0)*r11*x1502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r01*x1502))+((r00*x1501))+(((-1.0)*cj7*r02))), ((((-1.0)*r10*x1501))+((cj7*r12))+(((-1.0)*r11*x1502))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1503=IKsin(j5);
IkReal x1504=IKcos(j5);
IkReal x1505=((1.0)*cj8);
IkReal x1506=(cj6*cj7);
IkReal x1507=(r02*sj7);
IkReal x1508=(cj8*sj7);
IkReal x1509=((1.0)*cj6);
IkReal x1510=(r12*sj7);
IkReal x1511=((1.0)*cj7);
IkReal x1512=(sj6*sj8);
IkReal x1513=(sj7*sj8);
IkReal x1514=((0.01)*cj7);
IkReal x1515=(r10*sj8);
IkReal x1516=((1.0)*x1503);
IkReal x1517=(cj7*r00*sj8);
evalcond[0]=(((r11*x1508))+((r10*x1513))+x1504+(((-1.0)*r12*x1511)));
evalcond[1]=((((-1.0)*x1516))+((r01*x1508))+((r00*x1513))+(((-1.0)*r02*x1511)));
evalcond[2]=((-0.069)+(((-0.37429)*x1503))+(((0.01)*x1507))+(((-1.0)*px))+((cj8*r01*x1514))+((r00*sj8*x1514)));
evalcond[3]=((0.36442)+((x1514*x1515))+(((0.37429)*x1504))+(((0.01)*x1510))+(((-1.0)*py))+((cj8*r11*x1514)));
evalcond[4]=((((-1.0)*x1516))+((r11*x1512))+(((-1.0)*r10*sj6*x1505))+(((-1.0)*r11*x1505*x1506))+(((-1.0)*x1509*x1510))+(((-1.0)*x1506*x1515)));
evalcond[5]=((((-1.0)*x1504))+(((-1.0)*x1507*x1509))+(((-1.0)*r00*sj8*x1506))+((r01*x1512))+(((-1.0)*r01*x1505*x1506))+(((-1.0)*r00*sj6*x1505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1518=((1.0)*sj7);
if( IKabs(((((-1.0)*r00*sj8*x1518))+((cj7*r02))+(((-1.0)*cj8*r01*x1518)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj8*x1518))+(((-1.0)*cj8*r11*x1518))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj8*x1518))+((cj7*r02))+(((-1.0)*cj8*r01*x1518))))+IKsqr(((((-1.0)*r10*sj8*x1518))+(((-1.0)*cj8*r11*x1518))+((cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r00*sj8*x1518))+((cj7*r02))+(((-1.0)*cj8*r01*x1518))), ((((-1.0)*r10*sj8*x1518))+(((-1.0)*cj8*r11*x1518))+((cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1519=IKsin(j5);
IkReal x1520=IKcos(j5);
IkReal x1521=((1.0)*cj8);
IkReal x1522=(cj6*cj7);
IkReal x1523=(r02*sj7);
IkReal x1524=(cj8*sj7);
IkReal x1525=((1.0)*cj6);
IkReal x1526=(r12*sj7);
IkReal x1527=((1.0)*cj7);
IkReal x1528=(sj6*sj8);
IkReal x1529=(sj7*sj8);
IkReal x1530=((0.01)*cj7);
IkReal x1531=(r10*sj8);
IkReal x1532=(cj7*r00*sj8);
evalcond[0]=((((-1.0)*r12*x1527))+((r10*x1529))+((r11*x1524))+x1520);
evalcond[1]=(((r00*x1529))+((r01*x1524))+(((-1.0)*r02*x1527))+x1519);
evalcond[2]=((0.069)+((r00*sj8*x1530))+(((0.37429)*x1519))+(((-1.0)*px))+(((0.01)*x1523))+((cj8*r01*x1530)));
evalcond[3]=((0.36442)+(((0.37429)*x1520))+((x1530*x1531))+(((-1.0)*py))+(((0.01)*x1526))+((cj8*r11*x1530)));
evalcond[4]=((((-1.0)*r00*sj8*x1522))+(((-1.0)*r01*x1521*x1522))+((r01*x1528))+x1520+(((-1.0)*r00*sj6*x1521))+(((-1.0)*x1523*x1525)));
evalcond[5]=((((-1.0)*x1522*x1531))+(((-1.0)*x1519))+((r11*x1528))+(((-1.0)*x1525*x1526))+(((-1.0)*r11*x1521*x1522))+(((-1.0)*r10*sj6*x1521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1533=((1.0)*sj7*sj8);
IkReal x1534=((1.0)*cj8*sj7);
if( IKabs(((((-1.0)*r21*x1534))+((cj7*r22))+(((-1.0)*r20*x1533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1534))+((cj7*r12))+(((-1.0)*r10*x1533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1534))+((cj7*r22))+(((-1.0)*r20*x1533))))+IKsqr(((((-1.0)*r11*x1534))+((cj7*r12))+(((-1.0)*r10*x1533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r21*x1534))+((cj7*r22))+(((-1.0)*r20*x1533))), ((((-1.0)*r11*x1534))+((cj7*r12))+(((-1.0)*r10*x1533))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1535=IKsin(j5);
IkReal x1536=IKcos(j5);
IkReal x1537=((1.0)*cj7);
IkReal x1538=(cj8*r11);
IkReal x1539=(r12*sj7);
IkReal x1540=((1.0)*cj6);
IkReal x1541=(cj8*r21);
IkReal x1542=((0.01)*cj7);
IkReal x1543=(r22*sj7);
IkReal x1544=(sj6*sj8);
IkReal x1545=(r20*sj8);
IkReal x1546=(r10*sj8);
IkReal x1547=((1.0)*cj8*sj6);
evalcond[0]=(((sj7*x1545))+((sj7*x1541))+(((-1.0)*r22*x1537))+x1535);
evalcond[1]=(((sj7*x1546))+(((-1.0)*r12*x1537))+x1536+((sj7*x1538)));
evalcond[2]=((0.069)+((x1541*x1542))+(((0.37429)*x1535))+(((-1.0)*pz))+(((0.01)*x1543))+((x1542*x1545)));
evalcond[3]=((0.36442)+((x1538*x1542))+(((0.37429)*x1536))+(((-1.0)*py))+(((0.01)*x1539))+((x1542*x1546)));
evalcond[4]=((((-1.0)*x1540*x1543))+(((-1.0)*cj6*x1537*x1541))+(((-1.0)*cj6*x1537*x1545))+x1536+((r21*x1544))+(((-1.0)*r20*x1547)));
evalcond[5]=((((-1.0)*x1535))+(((-1.0)*cj6*x1537*x1546))+((r11*x1544))+(((-1.0)*x1539*x1540))+(((-1.0)*r10*x1547))+(((-1.0)*cj6*x1537*x1538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1548=(cj8*sj7);
IkReal x1549=(sj7*sj8);
if( IKabs(((((-1.0)*cj7*r22))+((r21*x1548))+((r20*x1549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1549))+((cj7*r12))+(((-1.0)*r11*x1548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*r22))+((r21*x1548))+((r20*x1549))))+IKsqr(((((-1.0)*r10*x1549))+((cj7*r12))+(((-1.0)*r11*x1548))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*r22))+((r21*x1548))+((r20*x1549))), ((((-1.0)*r10*x1549))+((cj7*r12))+(((-1.0)*r11*x1548))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1550=IKsin(j5);
IkReal x1551=IKcos(j5);
IkReal x1552=((1.0)*cj7);
IkReal x1553=(cj8*r11);
IkReal x1554=(r12*sj7);
IkReal x1555=((1.0)*cj6);
IkReal x1556=(cj8*r21);
IkReal x1557=((0.01)*cj7);
IkReal x1558=(r22*sj7);
IkReal x1559=(sj6*sj8);
IkReal x1560=(r20*sj8);
IkReal x1561=(r10*sj8);
IkReal x1562=((1.0)*x1550);
IkReal x1563=((1.0)*cj8*sj6);
evalcond[0]=(x1551+(((-1.0)*r12*x1552))+((sj7*x1553))+((sj7*x1561)));
evalcond[1]=((((-1.0)*r22*x1552))+((sj7*x1556))+(((-1.0)*x1562))+((sj7*x1560)));
evalcond[2]=((-0.069)+((x1556*x1557))+(((0.01)*x1558))+(((-1.0)*pz))+(((-0.37429)*x1550))+((x1557*x1560)));
evalcond[3]=((0.36442)+((x1553*x1557))+(((0.37429)*x1551))+(((0.01)*x1554))+(((-1.0)*py))+((x1557*x1561)));
evalcond[4]=((((-1.0)*x1551))+(((-1.0)*x1555*x1558))+(((-1.0)*cj6*x1552*x1556))+(((-1.0)*r20*x1563))+(((-1.0)*cj6*x1552*x1560))+((r21*x1559)));
evalcond[5]=(((r11*x1559))+(((-1.0)*cj6*x1552*x1553))+(((-1.0)*cj6*x1552*x1561))+(((-1.0)*r10*x1563))+(((-1.0)*x1562))+(((-1.0)*x1554*x1555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1564=((1.0)*sj7*sj8);
IkReal x1565=((1.0)*cj8*sj7);
CheckValue<IkReal> x1566=IKPowWithIntegerCheck(sj4,-1);
if(!x1566.valid){
continue;
}
if( IKabs(((x1566.value)*(((((-1.0)*r20*x1564))+(((-1.0)*r21*x1565))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj7*r12))+(((-1.0)*r10*x1564))+(((-1.0)*r11*x1565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1566.value)*(((((-1.0)*r20*x1564))+(((-1.0)*r21*x1565))+((cj7*r22))))))+IKsqr((((cj7*r12))+(((-1.0)*r10*x1564))+(((-1.0)*r11*x1565))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1566.value)*(((((-1.0)*r20*x1564))+(((-1.0)*r21*x1565))+((cj7*r22))))), (((cj7*r12))+(((-1.0)*r10*x1564))+(((-1.0)*r11*x1565))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1567=IKsin(j5);
IkReal x1568=IKcos(j5);
IkReal x1569=((1.0)*cj7);
IkReal x1570=(cj8*r11);
IkReal x1571=(cj8*r21);
IkReal x1572=(r00*sj8);
IkReal x1573=((0.01)*sj7);
IkReal x1574=(cj8*r01);
IkReal x1575=((0.01)*cj7);
IkReal x1576=(sj6*sj8);
IkReal x1577=(r20*sj8);
IkReal x1578=(r10*sj8);
IkReal x1579=(cj4*x1567);
IkReal x1580=(sj4*x1567);
IkReal x1581=((1.0)*cj8*sj6);
IkReal x1582=((1.0)*cj6*sj7);
evalcond[0]=(((sj7*x1570))+((sj7*x1578))+x1568+(((-1.0)*r12*x1569)));
evalcond[1]=(((sj7*x1577))+((sj7*x1571))+(((-1.0)*r22*x1569))+x1580);
evalcond[2]=(((sj7*x1572))+((sj7*x1574))+(((-1.0)*r02*x1569))+(((-1.0)*x1579)));
evalcond[3]=((0.36442)+((x1570*x1575))+(((0.37429)*x1568))+((x1575*x1578))+((r12*x1573))+(((-1.0)*py)));
evalcond[4]=(((x1571*x1575))+(((0.37429)*x1580))+((x1575*x1577))+(((-1.0)*pz))+(((0.069)*sj4))+((r22*x1573)));
evalcond[5]=(((x1572*x1575))+(((-0.069)*cj4))+(((-0.37429)*x1579))+(((-1.0)*px))+((r02*x1573))+((x1574*x1575)));
evalcond[6]=((((-1.0)*cj6*x1569*x1577))+(((-1.0)*cj6*x1569*x1571))+((sj4*x1568))+((r21*x1576))+(((-1.0)*r22*x1582))+(((-1.0)*r20*x1581)));
evalcond[7]=((((-1.0)*cj6*x1569*x1570))+(((-1.0)*cj6*x1569*x1578))+((r11*x1576))+(((-1.0)*x1567))+(((-1.0)*r12*x1582))+(((-1.0)*r10*x1581)));
evalcond[8]=((((-1.0)*cj6*x1569*x1574))+(((-1.0)*cj6*x1569*x1572))+(((-1.0)*r02*x1582))+(((-1.0)*r00*x1581))+((r01*x1576))+(((-1.0)*cj4*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1583=(sj7*sj8);
IkReal x1584=(cj8*sj7);
CheckValue<IkReal> x1585=IKPowWithIntegerCheck(cj4,-1);
if(!x1585.valid){
continue;
}
if( IKabs(((x1585.value)*((((r01*x1584))+(((-1.0)*cj7*r02))+((r00*x1583)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1584))+(((-1.0)*r10*x1583))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1585.value)*((((r01*x1584))+(((-1.0)*cj7*r02))+((r00*x1583))))))+IKsqr(((((-1.0)*r11*x1584))+(((-1.0)*r10*x1583))+((cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1585.value)*((((r01*x1584))+(((-1.0)*cj7*r02))+((r00*x1583))))), ((((-1.0)*r11*x1584))+(((-1.0)*r10*x1583))+((cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1586=IKsin(j5);
IkReal x1587=IKcos(j5);
IkReal x1588=((1.0)*cj7);
IkReal x1589=(cj8*r11);
IkReal x1590=(cj8*r21);
IkReal x1591=(r00*sj8);
IkReal x1592=((0.01)*sj7);
IkReal x1593=(cj8*r01);
IkReal x1594=((0.01)*cj7);
IkReal x1595=(sj6*sj8);
IkReal x1596=(r20*sj8);
IkReal x1597=(r10*sj8);
IkReal x1598=(cj4*x1586);
IkReal x1599=(sj4*x1586);
IkReal x1600=((1.0)*cj8*sj6);
IkReal x1601=((1.0)*cj6*sj7);
evalcond[0]=(x1587+((sj7*x1589))+((sj7*x1597))+(((-1.0)*r12*x1588)));
evalcond[1]=(x1599+(((-1.0)*r22*x1588))+((sj7*x1590))+((sj7*x1596)));
evalcond[2]=((((-1.0)*r02*x1588))+(((-1.0)*x1598))+((sj7*x1591))+((sj7*x1593)));
evalcond[3]=((0.36442)+(((0.37429)*x1587))+((x1594*x1597))+((r12*x1592))+((x1589*x1594))+(((-1.0)*py)));
evalcond[4]=(((x1590*x1594))+(((0.37429)*x1599))+((x1594*x1596))+(((-1.0)*pz))+((r22*x1592))+(((0.069)*sj4)));
evalcond[5]=(((x1593*x1594))+(((-0.069)*cj4))+(((-0.37429)*x1598))+(((-1.0)*px))+((x1591*x1594))+((r02*x1592)));
evalcond[6]=((((-1.0)*r20*x1600))+(((-1.0)*cj6*x1588*x1596))+(((-1.0)*cj6*x1588*x1590))+((sj4*x1587))+(((-1.0)*r22*x1601))+((r21*x1595)));
evalcond[7]=((((-1.0)*cj6*x1588*x1597))+(((-1.0)*cj6*x1588*x1589))+((r11*x1595))+(((-1.0)*x1586))+(((-1.0)*r10*x1600))+(((-1.0)*r12*x1601)));
evalcond[8]=(((r01*x1595))+(((-1.0)*cj4*x1587))+(((-1.0)*cj6*x1588*x1591))+(((-1.0)*cj6*x1588*x1593))+(((-1.0)*r00*x1600))+(((-1.0)*r02*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1602=(sj7*sj8);
IkReal x1603=(cj8*sj7);
if( IKabs(((((-1.0)*r21*x1603))+(((-1.0)*r20*x1602))+((cj7*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1603))+(((-1.0)*cj7*r12))+((r10*x1602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1603))+(((-1.0)*r20*x1602))+((cj7*r22))))+IKsqr((((r11*x1603))+(((-1.0)*cj7*r12))+((r10*x1602))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r21*x1603))+(((-1.0)*r20*x1602))+((cj7*r22))), (((r11*x1603))+(((-1.0)*cj7*r12))+((r10*x1602))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1604=IKsin(j5);
IkReal x1605=IKcos(j5);
IkReal x1606=((1.0)*cj7);
IkReal x1607=(cj8*r11);
IkReal x1608=(r12*sj7);
IkReal x1609=((1.0)*cj6);
IkReal x1610=(cj8*r21);
IkReal x1611=((0.01)*cj7);
IkReal x1612=(r22*sj7);
IkReal x1613=(sj6*sj8);
IkReal x1614=(r20*sj8);
IkReal x1615=(r10*sj8);
IkReal x1616=((1.0)*cj8*sj6);
evalcond[0]=(x1604+((sj7*x1610))+((sj7*x1614))+(((-1.0)*r22*x1606)));
evalcond[1]=(((sj7*x1607))+(((-1.0)*x1605))+((sj7*x1615))+(((-1.0)*r12*x1606)));
evalcond[2]=((0.069)+(((0.37429)*x1604))+(((-1.0)*pz))+(((0.01)*x1612))+((x1610*x1611))+((x1611*x1614)));
evalcond[3]=((-0.36442)+(((0.01)*x1608))+(((-1.0)*py))+((x1607*x1611))+(((-0.37429)*x1605))+((x1611*x1615)));
evalcond[4]=((((-1.0)*cj6*x1606*x1610))+(((-1.0)*cj6*x1606*x1614))+(((-1.0)*r20*x1616))+((r21*x1613))+x1605+(((-1.0)*x1609*x1612)));
evalcond[5]=((((-1.0)*cj6*x1606*x1615))+x1604+((r11*x1613))+(((-1.0)*r10*x1616))+(((-1.0)*x1608*x1609))+(((-1.0)*cj6*x1606*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1617=(sj7*sj8);
IkReal x1618=(cj8*sj7);
IkReal x1619=((1.0)*cj7);
if( IKabs((((r20*x1617))+((r21*x1618))+(((-1.0)*r22*x1619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1619))+((r11*x1618))+((r10*x1617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1617))+((r21*x1618))+(((-1.0)*r22*x1619))))+IKsqr(((((-1.0)*r12*x1619))+((r11*x1618))+((r10*x1617))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r20*x1617))+((r21*x1618))+(((-1.0)*r22*x1619))), ((((-1.0)*r12*x1619))+((r11*x1618))+((r10*x1617))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1620=IKsin(j5);
IkReal x1621=IKcos(j5);
IkReal x1622=((1.0)*cj7);
IkReal x1623=(cj8*r11);
IkReal x1624=(r12*sj7);
IkReal x1625=((1.0)*cj6);
IkReal x1626=(cj8*r21);
IkReal x1627=((0.01)*cj7);
IkReal x1628=(r22*sj7);
IkReal x1629=(sj6*sj8);
IkReal x1630=(r20*sj8);
IkReal x1631=(r10*sj8);
IkReal x1632=((1.0)*x1621);
IkReal x1633=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*x1620))+((sj7*x1626))+(((-1.0)*r22*x1622))+((sj7*x1630)));
evalcond[1]=((((-1.0)*r12*x1622))+((sj7*x1623))+(((-1.0)*x1632))+((sj7*x1631)));
evalcond[2]=((-0.069)+((x1627*x1630))+((x1626*x1627))+(((-1.0)*pz))+(((0.01)*x1628))+(((-0.37429)*x1620)));
evalcond[3]=((-0.36442)+((x1627*x1631))+((x1623*x1627))+(((-1.0)*py))+(((0.01)*x1624))+(((-0.37429)*x1621)));
evalcond[4]=(x1620+(((-1.0)*r10*x1633))+((r11*x1629))+(((-1.0)*x1624*x1625))+(((-1.0)*cj6*x1622*x1623))+(((-1.0)*cj6*x1622*x1631)));
evalcond[5]=(((r21*x1629))+(((-1.0)*x1632))+(((-1.0)*x1625*x1628))+(((-1.0)*r20*x1633))+(((-1.0)*cj6*x1622*x1626))+(((-1.0)*cj6*x1622*x1630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1634=((1.0)*sj7);
if( IKabs(((((-1.0)*cj8*r01*x1634))+((cj7*r02))+(((-1.0)*r00*sj8*x1634)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*r01*x1634))+((cj7*r02))+(((-1.0)*r00*sj8*x1634))))+IKsqr((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj8*r01*x1634))+((cj7*r02))+(((-1.0)*r00*sj8*x1634))), (((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1635=IKsin(j5);
IkReal x1636=IKcos(j5);
IkReal x1637=((1.0)*cj8);
IkReal x1638=(cj6*cj7);
IkReal x1639=(r02*sj7);
IkReal x1640=(cj8*sj7);
IkReal x1641=((1.0)*cj6);
IkReal x1642=(r12*sj7);
IkReal x1643=((1.0)*cj7);
IkReal x1644=(sj6*sj8);
IkReal x1645=(sj7*sj8);
IkReal x1646=((0.01)*cj7);
IkReal x1647=(r10*sj8);
IkReal x1648=(cj7*r00*sj8);
evalcond[0]=(x1635+((r00*x1645))+((r01*x1640))+(((-1.0)*r02*x1643)));
evalcond[1]=(((r11*x1640))+((r10*x1645))+(((-1.0)*r12*x1643))+(((-1.0)*x1636)));
evalcond[2]=((0.069)+((r00*sj8*x1646))+(((0.37429)*x1635))+(((-1.0)*px))+((cj8*r01*x1646))+(((0.01)*x1639)));
evalcond[3]=((-0.36442)+((cj8*r11*x1646))+(((-1.0)*py))+(((-0.37429)*x1636))+((x1646*x1647))+(((0.01)*x1642)));
evalcond[4]=((((-1.0)*r10*sj6*x1637))+((r11*x1644))+(((-1.0)*x1641*x1642))+(((-1.0)*x1638*x1647))+x1635+(((-1.0)*r11*x1637*x1638)));
evalcond[5]=(x1636+(((-1.0)*x1639*x1641))+(((-1.0)*r01*x1637*x1638))+(((-1.0)*r00*sj8*x1638))+((r01*x1644))+(((-1.0)*r00*sj6*x1637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1649=(sj7*sj8);
IkReal x1650=((1.0)*cj7);
IkReal x1651=(cj8*sj7);
if( IKabs((((r01*x1651))+((r00*x1649))+(((-1.0)*r02*x1650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1649))+((r11*x1651))+(((-1.0)*r12*x1650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1651))+((r00*x1649))+(((-1.0)*r02*x1650))))+IKsqr((((r10*x1649))+((r11*x1651))+(((-1.0)*r12*x1650))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r01*x1651))+((r00*x1649))+(((-1.0)*r02*x1650))), (((r10*x1649))+((r11*x1651))+(((-1.0)*r12*x1650))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1652=IKsin(j5);
IkReal x1653=IKcos(j5);
IkReal x1654=((1.0)*cj8);
IkReal x1655=(cj6*cj7);
IkReal x1656=(r02*sj7);
IkReal x1657=(cj8*sj7);
IkReal x1658=((1.0)*cj6);
IkReal x1659=(r12*sj7);
IkReal x1660=((1.0)*cj7);
IkReal x1661=(sj6*sj8);
IkReal x1662=(sj7*sj8);
IkReal x1663=((0.01)*cj7);
IkReal x1664=(r10*sj8);
IkReal x1665=((1.0)*x1653);
IkReal x1666=(cj7*r00*sj8);
evalcond[0]=(((r10*x1662))+(((-1.0)*r12*x1660))+((r11*x1657))+(((-1.0)*x1665)));
evalcond[1]=(((r00*x1662))+(((-1.0)*x1652))+((r01*x1657))+(((-1.0)*r02*x1660)));
evalcond[2]=((-0.069)+((r00*sj8*x1663))+(((-0.37429)*x1652))+(((-1.0)*px))+((cj8*r01*x1663))+(((0.01)*x1656)));
evalcond[3]=((-0.36442)+((cj8*r11*x1663))+(((-0.37429)*x1653))+(((-1.0)*py))+(((0.01)*x1659))+((x1663*x1664)));
evalcond[4]=((((-1.0)*r10*sj6*x1654))+x1652+((r11*x1661))+(((-1.0)*r11*x1654*x1655))+(((-1.0)*x1658*x1659))+(((-1.0)*x1655*x1664)));
evalcond[5]=((((-1.0)*x1656*x1658))+(((-1.0)*r01*x1654*x1655))+(((-1.0)*r00*sj8*x1655))+((r01*x1661))+(((-1.0)*x1665))+(((-1.0)*r00*sj6*x1654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1667=((1.0)*sj7);
CheckValue<IkReal> x1668=IKPowWithIntegerCheck(cj4,-1);
if(!x1668.valid){
continue;
}
if( IKabs(((x1668.value)*(((((-1.0)*cj8*r01*x1667))+(((-1.0)*r00*sj8*x1667))+((cj7*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1668.value)*(((((-1.0)*cj8*r01*x1667))+(((-1.0)*r00*sj8*x1667))+((cj7*r02))))))+IKsqr((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1668.value)*(((((-1.0)*cj8*r01*x1667))+(((-1.0)*r00*sj8*x1667))+((cj7*r02))))), (((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1669=IKsin(j5);
IkReal x1670=IKcos(j5);
IkReal x1671=((1.0)*cj7);
IkReal x1672=(cj8*r11);
IkReal x1673=(r00*sj8);
IkReal x1674=((0.01)*cj7);
IkReal x1675=(cj8*r21);
IkReal x1676=((0.01)*sj7);
IkReal x1677=(cj8*r01);
IkReal x1678=(sj6*sj8);
IkReal x1679=(r20*sj8);
IkReal x1680=(r10*sj8);
IkReal x1681=(sj4*x1669);
IkReal x1682=(cj4*x1669);
IkReal x1683=((1.0)*cj8*sj6);
IkReal x1684=((1.0)*cj6*sj7);
evalcond[0]=(x1681+((sj7*x1679))+((sj7*x1675))+(((-1.0)*r22*x1671)));
evalcond[1]=(((sj7*x1680))+(((-1.0)*r12*x1671))+((sj7*x1672))+(((-1.0)*x1670)));
evalcond[2]=((((-1.0)*r02*x1671))+x1682+((sj7*x1673))+((sj7*x1677)));
evalcond[3]=((-0.36442)+(((-0.37429)*x1670))+(((-1.0)*py))+((x1674*x1680))+((x1672*x1674))+((r12*x1676)));
evalcond[4]=(((x1674*x1675))+((x1674*x1679))+(((-1.0)*pz))+(((0.069)*sj4))+(((0.37429)*x1681))+((r22*x1676)));
evalcond[5]=(((r02*x1676))+((x1674*x1677))+((x1673*x1674))+(((0.069)*cj4))+(((-1.0)*px))+(((0.37429)*x1682)));
evalcond[6]=((((-1.0)*r12*x1684))+(((-1.0)*r10*x1683))+x1669+(((-1.0)*cj6*x1671*x1672))+(((-1.0)*cj6*x1671*x1680))+((r11*x1678)));
evalcond[7]=(((r21*x1678))+((sj4*x1670))+(((-1.0)*r20*x1683))+(((-1.0)*r22*x1684))+(((-1.0)*cj6*x1671*x1679))+(((-1.0)*cj6*x1671*x1675)));
evalcond[8]=(((cj4*x1670))+(((-1.0)*cj6*x1671*x1673))+(((-1.0)*cj6*x1671*x1677))+(((-1.0)*r02*x1684))+((r01*x1678))+(((-1.0)*r00*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1685=(sj7*sj8);
IkReal x1686=(cj8*sj7);
CheckValue<IkReal> x1687=IKPowWithIntegerCheck(sj4,-1);
if(!x1687.valid){
continue;
}
if( IKabs(((x1687.value)*(((((-1.0)*r21*x1686))+(((-1.0)*r20*x1685))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1686))+((r10*x1685))+(((-1.0)*cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1687.value)*(((((-1.0)*r21*x1686))+(((-1.0)*r20*x1685))+((cj7*r22))))))+IKsqr((((r11*x1686))+((r10*x1685))+(((-1.0)*cj7*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1687.value)*(((((-1.0)*r21*x1686))+(((-1.0)*r20*x1685))+((cj7*r22))))), (((r11*x1686))+((r10*x1685))+(((-1.0)*cj7*r12))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1688=IKsin(j5);
IkReal x1689=IKcos(j5);
IkReal x1690=((1.0)*cj7);
IkReal x1691=(cj8*r11);
IkReal x1692=(r00*sj8);
IkReal x1693=((0.01)*cj7);
IkReal x1694=(cj8*r21);
IkReal x1695=((0.01)*sj7);
IkReal x1696=(cj8*r01);
IkReal x1697=(sj6*sj8);
IkReal x1698=(r20*sj8);
IkReal x1699=(r10*sj8);
IkReal x1700=(sj4*x1688);
IkReal x1701=(cj4*x1688);
IkReal x1702=((1.0)*cj8*sj6);
IkReal x1703=((1.0)*cj6*sj7);
evalcond[0]=(x1700+((sj7*x1698))+((sj7*x1694))+(((-1.0)*r22*x1690)));
evalcond[1]=((((-1.0)*r12*x1690))+(((-1.0)*x1689))+((sj7*x1691))+((sj7*x1699)));
evalcond[2]=(x1701+((sj7*x1692))+((sj7*x1696))+(((-1.0)*r02*x1690)));
evalcond[3]=((-0.36442)+((r12*x1695))+(((-0.37429)*x1689))+((x1691*x1693))+(((-1.0)*py))+((x1693*x1699)));
evalcond[4]=((((0.37429)*x1700))+((r22*x1695))+(((-1.0)*pz))+(((0.069)*sj4))+((x1693*x1694))+((x1693*x1698)));
evalcond[5]=((((0.37429)*x1701))+(((0.069)*cj4))+((x1692*x1693))+(((-1.0)*px))+((r02*x1695))+((x1693*x1696)));
evalcond[6]=(x1688+((r11*x1697))+(((-1.0)*r10*x1702))+(((-1.0)*cj6*x1690*x1691))+(((-1.0)*cj6*x1690*x1699))+(((-1.0)*r12*x1703)));
evalcond[7]=(((r21*x1697))+(((-1.0)*r20*x1702))+((sj4*x1689))+(((-1.0)*cj6*x1690*x1698))+(((-1.0)*cj6*x1690*x1694))+(((-1.0)*r22*x1703)));
evalcond[8]=(((r01*x1697))+((cj4*x1689))+(((-1.0)*r02*x1703))+(((-1.0)*cj6*x1690*x1696))+(((-1.0)*cj6*x1690*x1692))+(((-1.0)*r00*x1702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1704=((1.0)*sj7);
if( IKabs(((((-1.0)*r20*sj8*x1704))+(((-1.0)*cj8*r21*x1704))+((cj7*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj8*x1704))+(((-1.0)*cj8*r01*x1704))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj8*x1704))+(((-1.0)*cj8*r21*x1704))+((cj7*r22))))+IKsqr(((((-1.0)*r00*sj8*x1704))+(((-1.0)*cj8*r01*x1704))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r20*sj8*x1704))+(((-1.0)*cj8*r21*x1704))+((cj7*r22))), ((((-1.0)*r00*sj8*x1704))+(((-1.0)*cj8*r01*x1704))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1705=IKsin(j5);
IkReal x1706=IKcos(j5);
IkReal x1707=((0.01)*cj7);
IkReal x1708=(r00*sj8);
IkReal x1709=((1.0)*cj7);
IkReal x1710=(r02*sj7);
IkReal x1711=((1.0)*cj6);
IkReal x1712=(cj8*r21);
IkReal x1713=(cj8*r01);
IkReal x1714=(r22*sj7);
IkReal x1715=(r20*sj8);
IkReal x1716=(sj6*sj8);
IkReal x1717=((1.0)*cj8*sj6);
evalcond[0]=(x1705+((sj7*x1715))+((sj7*x1712))+(((-1.0)*r22*x1709)));
evalcond[1]=(x1706+(((-1.0)*r02*x1709))+((sj7*x1713))+((sj7*x1708)));
evalcond[2]=((0.069)+(((0.37429)*x1705))+(((0.01)*x1714))+(((-1.0)*pz))+((x1707*x1712))+((x1707*x1715)));
evalcond[3]=((0.36442)+(((0.37429)*x1706))+(((0.01)*x1710))+(((-1.0)*px))+((x1707*x1713))+((x1707*x1708)));
evalcond[4]=((((-1.0)*cj6*x1709*x1712))+(((-1.0)*cj6*x1709*x1715))+x1706+(((-1.0)*r20*x1717))+(((-1.0)*x1711*x1714))+((r21*x1716)));
evalcond[5]=((((-1.0)*x1710*x1711))+(((-1.0)*r00*x1717))+(((-1.0)*cj6*x1709*x1713))+(((-1.0)*x1705))+((r01*x1716))+(((-1.0)*cj6*x1708*x1709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1718=(cj8*sj7);
IkReal x1719=(sj7*sj8);
if( IKabs(((((-1.0)*cj7*r22))+((r20*x1719))+((r21*x1718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1718))+(((-1.0)*r00*x1719))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*r22))+((r20*x1719))+((r21*x1718))))+IKsqr(((((-1.0)*r01*x1718))+(((-1.0)*r00*x1719))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*r22))+((r20*x1719))+((r21*x1718))), ((((-1.0)*r01*x1718))+(((-1.0)*r00*x1719))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1720=IKsin(j5);
IkReal x1721=IKcos(j5);
IkReal x1722=((0.01)*cj7);
IkReal x1723=(r00*sj8);
IkReal x1724=((1.0)*cj7);
IkReal x1725=(r02*sj7);
IkReal x1726=((1.0)*cj6);
IkReal x1727=(cj8*r21);
IkReal x1728=(cj8*r01);
IkReal x1729=(r22*sj7);
IkReal x1730=(r20*sj8);
IkReal x1731=(sj6*sj8);
IkReal x1732=((1.0)*x1720);
IkReal x1733=((1.0)*cj8*sj6);
evalcond[0]=(x1721+((sj7*x1728))+((sj7*x1723))+(((-1.0)*r02*x1724)));
evalcond[1]=((((-1.0)*r22*x1724))+((sj7*x1727))+((sj7*x1730))+(((-1.0)*x1732)));
evalcond[2]=((-0.069)+((x1722*x1727))+((x1722*x1730))+(((-1.0)*pz))+(((-0.37429)*x1720))+(((0.01)*x1729)));
evalcond[3]=((0.36442)+((x1722*x1728))+((x1722*x1723))+(((-1.0)*px))+(((0.37429)*x1721))+(((0.01)*x1725)));
evalcond[4]=((((-1.0)*x1726*x1729))+((r21*x1731))+(((-1.0)*cj6*x1724*x1730))+(((-1.0)*cj6*x1724*x1727))+(((-1.0)*x1721))+(((-1.0)*r20*x1733)));
evalcond[5]=(((r01*x1731))+(((-1.0)*r00*x1733))+(((-1.0)*x1725*x1726))+(((-1.0)*cj6*x1724*x1728))+(((-1.0)*cj6*x1723*x1724))+(((-1.0)*x1732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1734=((1.0)*sj7);
if( IKabs(((((-1.0)*cj8*r11*x1734))+(((-1.0)*r10*sj8*x1734))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj8*r01*x1734))+(((-1.0)*r00*sj8*x1734))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj8*r11*x1734))+(((-1.0)*r10*sj8*x1734))+((cj7*r12))))+IKsqr(((((-1.0)*cj8*r01*x1734))+(((-1.0)*r00*sj8*x1734))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj8*r11*x1734))+(((-1.0)*r10*sj8*x1734))+((cj7*r12))), ((((-1.0)*cj8*r01*x1734))+(((-1.0)*r00*sj8*x1734))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1735=IKcos(j5);
IkReal x1736=IKsin(j5);
IkReal x1737=((1.0)*cj8);
IkReal x1738=(cj6*cj7);
IkReal x1739=(r02*sj7);
IkReal x1740=(cj8*sj7);
IkReal x1741=((1.0)*cj6);
IkReal x1742=(r12*sj7);
IkReal x1743=((1.0)*cj7);
IkReal x1744=(sj6*sj8);
IkReal x1745=(sj7*sj8);
IkReal x1746=((0.01)*cj7);
IkReal x1747=(r10*sj8);
IkReal x1748=(cj7*r00*sj8);
evalcond[0]=((((-1.0)*r12*x1743))+x1736+((r11*x1740))+((r10*x1745)));
evalcond[1]=(x1735+((r00*x1745))+((r01*x1740))+(((-1.0)*r02*x1743)));
evalcond[2]=((0.36442)+((r00*sj8*x1746))+(((-1.0)*px))+(((0.37429)*x1735))+(((0.01)*x1739))+((cj8*r01*x1746)));
evalcond[3]=((0.069)+((cj8*r11*x1746))+((x1746*x1747))+(((-1.0)*py))+(((0.01)*x1742))+(((0.37429)*x1736)));
evalcond[4]=((((-1.0)*x1741*x1742))+x1735+(((-1.0)*r11*x1737*x1738))+(((-1.0)*r10*sj6*x1737))+(((-1.0)*x1738*x1747))+((r11*x1744)));
evalcond[5]=((((-1.0)*r00*sj6*x1737))+(((-1.0)*x1739*x1741))+(((-1.0)*r00*sj8*x1738))+(((-1.0)*x1736))+((r01*x1744))+(((-1.0)*r01*x1737*x1738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1749=((1.0)*sj7);
if( IKabs((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj8*r01*x1749))+(((-1.0)*r00*sj8*x1749))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))))+IKsqr(((((-1.0)*cj8*r01*x1749))+(((-1.0)*r00*sj8*x1749))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r10*sj7*sj8))+((cj8*r11*sj7))+(((-1.0)*cj7*r12))), ((((-1.0)*cj8*r01*x1749))+(((-1.0)*r00*sj8*x1749))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1750=IKcos(j5);
IkReal x1751=IKsin(j5);
IkReal x1752=((1.0)*cj8);
IkReal x1753=(cj6*cj7);
IkReal x1754=(r02*sj7);
IkReal x1755=(cj8*sj7);
IkReal x1756=((1.0)*cj6);
IkReal x1757=(r12*sj7);
IkReal x1758=((1.0)*cj7);
IkReal x1759=(sj6*sj8);
IkReal x1760=(sj7*sj8);
IkReal x1761=((0.01)*cj7);
IkReal x1762=(r10*sj8);
IkReal x1763=((1.0)*x1751);
IkReal x1764=(cj7*r00*sj8);
evalcond[0]=(x1750+((r00*x1760))+((r01*x1755))+(((-1.0)*r02*x1758)));
evalcond[1]=((((-1.0)*r12*x1758))+(((-1.0)*x1763))+((r10*x1760))+((r11*x1755)));
evalcond[2]=((0.36442)+((cj8*r01*x1761))+(((0.37429)*x1750))+(((-1.0)*px))+(((0.01)*x1754))+((r00*sj8*x1761)));
evalcond[3]=((-0.069)+(((-1.0)*py))+(((0.01)*x1757))+(((-0.37429)*x1751))+((x1761*x1762))+((cj8*r11*x1761)));
evalcond[4]=((((-1.0)*x1756*x1757))+(((-1.0)*x1753*x1762))+(((-1.0)*r10*sj6*x1752))+(((-1.0)*x1750))+((r11*x1759))+(((-1.0)*r11*x1752*x1753)));
evalcond[5]=((((-1.0)*r00*sj8*x1753))+(((-1.0)*x1763))+(((-1.0)*r00*sj6*x1752))+(((-1.0)*x1754*x1756))+((r01*x1759))+(((-1.0)*r01*x1752*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1765=((1.0)*sj7);
CheckValue<IkReal> x1766=IKPowWithIntegerCheck(cj4,-1);
if(!x1766.valid){
continue;
}
if( IKabs(((x1766.value)*(((((-1.0)*r10*sj8*x1765))+((cj7*r12))+(((-1.0)*cj8*r11*x1765)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj8*x1765))+(((-1.0)*cj8*r01*x1765))+((cj7*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1766.value)*(((((-1.0)*r10*sj8*x1765))+((cj7*r12))+(((-1.0)*cj8*r11*x1765))))))+IKsqr(((((-1.0)*r00*sj8*x1765))+(((-1.0)*cj8*r01*x1765))+((cj7*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1766.value)*(((((-1.0)*r10*sj8*x1765))+((cj7*r12))+(((-1.0)*cj8*r11*x1765))))), ((((-1.0)*r00*sj8*x1765))+(((-1.0)*cj8*r01*x1765))+((cj7*r02))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1767=IKsin(j5);
IkReal x1768=IKcos(j5);
IkReal x1769=((1.0)*cj7);
IkReal x1770=(cj8*r11);
IkReal x1771=(cj8*r21);
IkReal x1772=((0.01)*sj7);
IkReal x1773=((0.01)*cj7);
IkReal x1774=(cj8*r01);
IkReal x1775=(sj6*sj8);
IkReal x1776=(r20*sj8);
IkReal x1777=(r10*sj8);
IkReal x1778=(cj7*r00*sj8);
IkReal x1779=((0.37429)*x1767);
IkReal x1780=((1.0)*cj8*sj6);
IkReal x1781=((1.0)*cj6*sj7);
evalcond[0]=(x1768+(((-1.0)*r02*x1769))+((sj7*x1774))+((r00*sj7*sj8)));
evalcond[1]=((((-1.0)*r22*x1769))+((sj4*x1767))+((sj7*x1771))+((sj7*x1776)));
evalcond[2]=(((cj4*x1767))+(((-1.0)*r12*x1769))+((sj7*x1770))+((sj7*x1777)));
evalcond[3]=((0.36442)+((r00*sj8*x1773))+((r02*x1772))+((x1773*x1774))+(((-1.0)*px))+(((0.37429)*x1768)));
evalcond[4]=(((sj4*x1779))+((r22*x1772))+((x1771*x1773))+((x1773*x1776))+(((-1.0)*pz))+(((0.069)*sj4)));
evalcond[5]=(((r12*x1772))+((x1770*x1773))+(((0.069)*cj4))+((x1773*x1777))+((cj4*x1779))+(((-1.0)*py)));
evalcond[6]=((((-1.0)*r22*x1781))+((r21*x1775))+(((-1.0)*r20*x1780))+((sj4*x1768))+(((-1.0)*cj6*x1769*x1776))+(((-1.0)*cj6*x1769*x1771)));
evalcond[7]=((((-1.0)*r10*x1780))+((r11*x1775))+(((-1.0)*r12*x1781))+((cj4*x1768))+(((-1.0)*cj6*x1769*x1777))+(((-1.0)*cj6*x1769*x1770)));
evalcond[8]=((((-1.0)*x1767))+(((-1.0)*r00*x1780))+(((-1.0)*cj6*r00*sj8*x1769))+((r01*x1775))+(((-1.0)*cj6*x1769*x1774))+(((-1.0)*r02*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1782=((1.0)*sj7);
CheckValue<IkReal> x1783=IKPowWithIntegerCheck(sj4,-1);
if(!x1783.valid){
continue;
}
if( IKabs(((x1783.value)*(((((-1.0)*cj8*r21*x1782))+(((-1.0)*r20*sj8*x1782))+((cj7*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj8*x1782))+((cj7*r02))+(((-1.0)*cj8*r01*x1782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1783.value)*(((((-1.0)*cj8*r21*x1782))+(((-1.0)*r20*sj8*x1782))+((cj7*r22))))))+IKsqr(((((-1.0)*r00*sj8*x1782))+((cj7*r02))+(((-1.0)*cj8*r01*x1782))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1783.value)*(((((-1.0)*cj8*r21*x1782))+(((-1.0)*r20*sj8*x1782))+((cj7*r22))))), ((((-1.0)*r00*sj8*x1782))+((cj7*r02))+(((-1.0)*cj8*r01*x1782))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1784=IKsin(j5);
IkReal x1785=IKcos(j5);
IkReal x1786=((1.0)*cj7);
IkReal x1787=(cj8*r11);
IkReal x1788=(cj8*r21);
IkReal x1789=((0.01)*sj7);
IkReal x1790=((0.01)*cj7);
IkReal x1791=(cj8*r01);
IkReal x1792=(sj6*sj8);
IkReal x1793=(r20*sj8);
IkReal x1794=(r10*sj8);
IkReal x1795=(cj7*r00*sj8);
IkReal x1796=((0.37429)*x1784);
IkReal x1797=((1.0)*cj8*sj6);
IkReal x1798=((1.0)*cj6*sj7);
evalcond[0]=(x1785+((sj7*x1791))+((r00*sj7*sj8))+(((-1.0)*r02*x1786)));
evalcond[1]=((((-1.0)*r22*x1786))+((sj7*x1788))+((sj7*x1793))+((sj4*x1784)));
evalcond[2]=((((-1.0)*r12*x1786))+((sj7*x1787))+((sj7*x1794))+((cj4*x1784)));
evalcond[3]=((0.36442)+(((-1.0)*px))+((r00*sj8*x1790))+((r02*x1789))+(((0.37429)*x1785))+((x1790*x1791)));
evalcond[4]=((((-1.0)*pz))+((r22*x1789))+(((0.069)*sj4))+((sj4*x1796))+((x1790*x1793))+((x1788*x1790)));
evalcond[5]=((((0.069)*cj4))+((x1787*x1790))+(((-1.0)*py))+((r12*x1789))+((x1790*x1794))+((cj4*x1796)));
evalcond[6]=((((-1.0)*r22*x1798))+((r21*x1792))+((sj4*x1785))+(((-1.0)*cj6*x1786*x1793))+(((-1.0)*r20*x1797))+(((-1.0)*cj6*x1786*x1788)));
evalcond[7]=((((-1.0)*r10*x1797))+(((-1.0)*r12*x1798))+(((-1.0)*cj6*x1786*x1794))+(((-1.0)*cj6*x1786*x1787))+((r11*x1792))+((cj4*x1785)));
evalcond[8]=((((-1.0)*r00*x1797))+(((-1.0)*cj6*r00*sj8*x1786))+(((-1.0)*x1784))+(((-1.0)*cj6*x1786*x1791))+(((-1.0)*r02*x1798))+((r01*x1792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1799=(sj7*sj8);
IkReal x1800=((1.0)*cj7);
IkReal x1801=(cj8*sj7);
if( IKabs((((r10*x1799))+((r11*x1801))+(((-1.0)*r12*x1800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1799))+(((-1.0)*r02*x1800))+((r01*x1801)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1799))+((r11*x1801))+(((-1.0)*r12*x1800))))+IKsqr((((r00*x1799))+(((-1.0)*r02*x1800))+((r01*x1801))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r10*x1799))+((r11*x1801))+(((-1.0)*r12*x1800))), (((r00*x1799))+(((-1.0)*r02*x1800))+((r01*x1801))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1802=IKcos(j5);
IkReal x1803=IKsin(j5);
IkReal x1804=((1.0)*cj8);
IkReal x1805=(cj6*cj7);
IkReal x1806=(r02*sj7);
IkReal x1807=(cj8*sj7);
IkReal x1808=((1.0)*cj6);
IkReal x1809=(r12*sj7);
IkReal x1810=((1.0)*cj7);
IkReal x1811=(sj6*sj8);
IkReal x1812=(sj7*sj8);
IkReal x1813=((0.01)*cj7);
IkReal x1814=(r10*sj8);
IkReal x1815=((1.0)*x1802);
IkReal x1816=(cj7*r00*sj8);
evalcond[0]=((((-1.0)*r12*x1810))+((r11*x1807))+((r10*x1812))+(((-1.0)*x1803)));
evalcond[1]=((((-1.0)*x1815))+(((-1.0)*r02*x1810))+((r00*x1812))+((r01*x1807)));
evalcond[2]=((-0.36442)+(((-0.37429)*x1802))+((cj8*r01*x1813))+(((-1.0)*px))+(((0.01)*x1806))+((r00*sj8*x1813)));
evalcond[3]=((-0.069)+(((-0.37429)*x1803))+((x1813*x1814))+(((-1.0)*py))+(((0.01)*x1809))+((cj8*r11*x1813)));
evalcond[4]=(((r01*x1811))+x1803+(((-1.0)*x1806*x1808))+(((-1.0)*r00*sj8*x1805))+(((-1.0)*r00*sj6*x1804))+(((-1.0)*r01*x1804*x1805)));
evalcond[5]=((((-1.0)*x1815))+(((-1.0)*r11*x1804*x1805))+(((-1.0)*r10*sj6*x1804))+(((-1.0)*x1805*x1814))+(((-1.0)*x1808*x1809))+((r11*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1817=(sj7*sj8);
IkReal x1818=(cj8*sj7);
if( IKabs(((((-1.0)*r10*x1817))+(((-1.0)*r11*x1818))+((cj7*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r02))+((r01*x1818))+((r00*x1817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1817))+(((-1.0)*r11*x1818))+((cj7*r12))))+IKsqr(((((-1.0)*cj7*r02))+((r01*x1818))+((r00*x1817))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r10*x1817))+(((-1.0)*r11*x1818))+((cj7*r12))), ((((-1.0)*cj7*r02))+((r01*x1818))+((r00*x1817))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1819=IKcos(j5);
IkReal x1820=IKsin(j5);
IkReal x1821=((1.0)*cj8);
IkReal x1822=(cj6*cj7);
IkReal x1823=(r02*sj7);
IkReal x1824=(cj8*sj7);
IkReal x1825=((1.0)*cj6);
IkReal x1826=(r12*sj7);
IkReal x1827=((1.0)*cj7);
IkReal x1828=(sj6*sj8);
IkReal x1829=(sj7*sj8);
IkReal x1830=((0.01)*cj7);
IkReal x1831=(r10*sj8);
IkReal x1832=(cj7*r00*sj8);
evalcond[0]=(((r10*x1829))+(((-1.0)*r12*x1827))+x1820+((r11*x1824)));
evalcond[1]=(((r00*x1829))+((r01*x1824))+(((-1.0)*r02*x1827))+(((-1.0)*x1819)));
evalcond[2]=((-0.36442)+((r00*sj8*x1830))+(((0.01)*x1823))+((cj8*r01*x1830))+(((-1.0)*px))+(((-0.37429)*x1819)));
evalcond[3]=((0.069)+(((0.37429)*x1820))+(((0.01)*x1826))+(((-1.0)*py))+((x1830*x1831))+((cj8*r11*x1830)));
evalcond[4]=((((-1.0)*x1822*x1831))+(((-1.0)*r10*sj6*x1821))+(((-1.0)*x1825*x1826))+x1819+((r11*x1828))+(((-1.0)*r11*x1821*x1822)));
evalcond[5]=(((r01*x1828))+(((-1.0)*r00*sj8*x1822))+x1820+(((-1.0)*x1823*x1825))+(((-1.0)*r01*x1821*x1822))+(((-1.0)*r00*sj6*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1833=(sj7*sj8);
IkReal x1834=(cj8*sj7);
if( IKabs(((((-1.0)*r20*x1833))+((cj7*r22))+(((-1.0)*r21*x1834)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1834))+(((-1.0)*cj7*r02))+((r00*x1833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1833))+((cj7*r22))+(((-1.0)*r21*x1834))))+IKsqr((((r01*x1834))+(((-1.0)*cj7*r02))+((r00*x1833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r20*x1833))+((cj7*r22))+(((-1.0)*r21*x1834))), (((r01*x1834))+(((-1.0)*cj7*r02))+((r00*x1833))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1835=IKsin(j5);
IkReal x1836=IKcos(j5);
IkReal x1837=((0.01)*cj7);
IkReal x1838=(r00*sj8);
IkReal x1839=((1.0)*cj7);
IkReal x1840=(r02*sj7);
IkReal x1841=((1.0)*cj6);
IkReal x1842=(cj8*r21);
IkReal x1843=(cj8*r01);
IkReal x1844=(r22*sj7);
IkReal x1845=(r20*sj8);
IkReal x1846=(sj6*sj8);
IkReal x1847=((1.0)*cj8*sj6);
evalcond[0]=(((sj7*x1842))+((sj7*x1845))+x1835+(((-1.0)*r22*x1839)));
evalcond[1]=(((sj7*x1843))+(((-1.0)*x1836))+((sj7*x1838))+(((-1.0)*r02*x1839)));
evalcond[2]=((0.069)+((x1837*x1842))+((x1837*x1845))+(((0.01)*x1844))+(((-1.0)*pz))+(((0.37429)*x1835)));
evalcond[3]=((-0.36442)+((x1837*x1843))+(((-0.37429)*x1836))+(((0.01)*x1840))+(((-1.0)*px))+((x1837*x1838)));
evalcond[4]=((((-1.0)*cj6*x1839*x1842))+(((-1.0)*cj6*x1839*x1845))+(((-1.0)*x1841*x1844))+x1836+(((-1.0)*r20*x1847))+((r21*x1846)));
evalcond[5]=((((-1.0)*cj6*x1839*x1843))+(((-1.0)*r00*x1847))+((r01*x1846))+x1835+(((-1.0)*cj6*x1838*x1839))+(((-1.0)*x1840*x1841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1848=(sj7*sj8);
IkReal x1849=(cj8*sj7);
IkReal x1850=((1.0)*cj7);
if( IKabs(((((-1.0)*r22*x1850))+((r20*x1848))+((r21*x1849)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1848))+((r01*x1849))+(((-1.0)*r02*x1850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1850))+((r20*x1848))+((r21*x1849))))+IKsqr((((r00*x1848))+((r01*x1849))+(((-1.0)*r02*x1850))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r22*x1850))+((r20*x1848))+((r21*x1849))), (((r00*x1848))+((r01*x1849))+(((-1.0)*r02*x1850))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1851=IKsin(j5);
IkReal x1852=IKcos(j5);
IkReal x1853=((0.01)*cj7);
IkReal x1854=(r00*sj8);
IkReal x1855=((1.0)*cj7);
IkReal x1856=(r02*sj7);
IkReal x1857=((1.0)*cj6);
IkReal x1858=(cj8*r21);
IkReal x1859=(cj8*r01);
IkReal x1860=(r22*sj7);
IkReal x1861=(sj6*sj8);
IkReal x1862=(r20*sj8);
IkReal x1863=((1.0)*x1852);
IkReal x1864=((1.0)*cj8*sj6);
evalcond[0]=(((sj7*x1858))+(((-1.0)*x1851))+(((-1.0)*r22*x1855))+((sj7*x1862)));
evalcond[1]=(((sj7*x1859))+((sj7*x1854))+(((-1.0)*r02*x1855))+(((-1.0)*x1863)));
evalcond[2]=((-0.069)+(((0.01)*x1860))+(((-1.0)*pz))+((x1853*x1858))+((x1853*x1862))+(((-0.37429)*x1851)));
evalcond[3]=((-0.36442)+(((0.01)*x1856))+(((-1.0)*px))+((x1853*x1859))+((x1853*x1854))+(((-0.37429)*x1852)));
evalcond[4]=((((-1.0)*cj6*x1854*x1855))+(((-1.0)*x1856*x1857))+x1851+(((-1.0)*r00*x1864))+(((-1.0)*cj6*x1855*x1859))+((r01*x1861)));
evalcond[5]=((((-1.0)*cj6*x1855*x1862))+(((-1.0)*r20*x1864))+(((-1.0)*cj6*x1855*x1858))+(((-1.0)*x1863))+(((-1.0)*x1857*x1860))+((r21*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1865=(sj7*sj8);
IkReal x1866=(cj8*sj7);
CheckValue<IkReal> x1867=IKPowWithIntegerCheck(sj4,-1);
if(!x1867.valid){
continue;
}
if( IKabs(((x1867.value)*(((((-1.0)*r21*x1866))+((cj7*r22))+(((-1.0)*r20*x1865)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*r02))+((r01*x1866))+((r00*x1865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1867.value)*(((((-1.0)*r21*x1866))+((cj7*r22))+(((-1.0)*r20*x1865))))))+IKsqr(((((-1.0)*cj7*r02))+((r01*x1866))+((r00*x1865))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1867.value)*(((((-1.0)*r21*x1866))+((cj7*r22))+(((-1.0)*r20*x1865))))), ((((-1.0)*cj7*r02))+((r01*x1866))+((r00*x1865))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1868=IKsin(j5);
IkReal x1869=IKcos(j5);
IkReal x1870=((1.0)*cj7);
IkReal x1871=(cj8*r11);
IkReal x1872=(cj8*r21);
IkReal x1873=((0.01)*sj7);
IkReal x1874=(cj8*r01);
IkReal x1875=((0.01)*cj7);
IkReal x1876=(sj6*sj8);
IkReal x1877=(r20*sj8);
IkReal x1878=(r00*sj8);
IkReal x1879=(r10*sj8);
IkReal x1880=(cj4*x1868);
IkReal x1881=(sj4*x1868);
IkReal x1882=((1.0)*cj8*sj6);
IkReal x1883=((1.0)*x1869);
IkReal x1884=((1.0)*cj6*sj7);
evalcond[0]=(((sj7*x1872))+((sj7*x1877))+(((-1.0)*r22*x1870))+x1881);
evalcond[1]=(((sj7*x1878))+((sj7*x1874))+(((-1.0)*r02*x1870))+(((-1.0)*x1883)));
evalcond[2]=(((sj7*x1871))+((sj7*x1879))+(((-1.0)*r12*x1870))+(((-1.0)*x1880)));
evalcond[3]=((-0.36442)+(((-0.37429)*x1869))+((r02*x1873))+((x1874*x1875))+(((-1.0)*px))+((x1875*x1878)));
evalcond[4]=(((r22*x1873))+(((0.37429)*x1881))+(((-1.0)*pz))+(((0.069)*sj4))+((x1872*x1875))+((x1875*x1877)));
evalcond[5]=(((x1871*x1875))+(((-0.069)*cj4))+(((-1.0)*py))+((r12*x1873))+((x1875*x1879))+(((-0.37429)*x1880)));
evalcond[6]=((((-1.0)*cj6*x1870*x1878))+(((-1.0)*cj6*x1870*x1874))+(((-1.0)*r02*x1884))+((r01*x1876))+x1868+(((-1.0)*r00*x1882)));
evalcond[7]=(((sj4*x1869))+(((-1.0)*cj6*x1870*x1872))+(((-1.0)*cj6*x1870*x1877))+(((-1.0)*r22*x1884))+((r21*x1876))+(((-1.0)*r20*x1882)));
evalcond[8]=((((-1.0)*cj6*x1870*x1871))+(((-1.0)*cj6*x1870*x1879))+(((-1.0)*r12*x1884))+(((-1.0)*r10*x1882))+(((-1.0)*cj4*x1883))+((r11*x1876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1885=(sj7*sj8);
IkReal x1886=((1.0)*cj7);
IkReal x1887=(cj8*sj7);
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(cj4,-1);
if(!x1888.valid){
continue;
}
if( IKabs(((x1888.value)*(((((-1.0)*r12*x1886))+((r10*x1885))+((r11*x1887)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1886))+((r00*x1885))+((r01*x1887)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1888.value)*(((((-1.0)*r12*x1886))+((r10*x1885))+((r11*x1887))))))+IKsqr(((((-1.0)*r02*x1886))+((r00*x1885))+((r01*x1887))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1888.value)*(((((-1.0)*r12*x1886))+((r10*x1885))+((r11*x1887))))), ((((-1.0)*r02*x1886))+((r00*x1885))+((r01*x1887))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1889=IKsin(j5);
IkReal x1890=IKcos(j5);
IkReal x1891=((1.0)*cj7);
IkReal x1892=(cj8*r11);
IkReal x1893=(cj8*r21);
IkReal x1894=((0.01)*sj7);
IkReal x1895=(cj8*r01);
IkReal x1896=((0.01)*cj7);
IkReal x1897=(sj6*sj8);
IkReal x1898=(r20*sj8);
IkReal x1899=(r00*sj8);
IkReal x1900=(r10*sj8);
IkReal x1901=(cj4*x1889);
IkReal x1902=(sj4*x1889);
IkReal x1903=((1.0)*cj8*sj6);
IkReal x1904=((1.0)*x1890);
IkReal x1905=((1.0)*cj6*sj7);
evalcond[0]=(((sj7*x1893))+((sj7*x1898))+(((-1.0)*r22*x1891))+x1902);
evalcond[1]=((((-1.0)*r02*x1891))+((sj7*x1895))+((sj7*x1899))+(((-1.0)*x1904)));
evalcond[2]=(((sj7*x1900))+((sj7*x1892))+(((-1.0)*x1901))+(((-1.0)*r12*x1891)));
evalcond[3]=((-0.36442)+((r02*x1894))+((x1896*x1899))+(((-1.0)*px))+((x1895*x1896))+(((-0.37429)*x1890)));
evalcond[4]=(((r22*x1894))+((x1893*x1896))+((x1896*x1898))+(((-1.0)*pz))+(((0.069)*sj4))+(((0.37429)*x1902)));
evalcond[5]=(((x1892*x1896))+(((-0.069)*cj4))+(((-1.0)*py))+(((-0.37429)*x1901))+((x1896*x1900))+((r12*x1894)));
evalcond[6]=(((r01*x1897))+x1889+(((-1.0)*cj6*x1891*x1899))+(((-1.0)*cj6*x1891*x1895))+(((-1.0)*r02*x1905))+(((-1.0)*r00*x1903)));
evalcond[7]=((((-1.0)*r22*x1905))+(((-1.0)*r20*x1903))+((sj4*x1890))+((r21*x1897))+(((-1.0)*cj6*x1891*x1898))+(((-1.0)*cj6*x1891*x1893)));
evalcond[8]=((((-1.0)*cj4*x1904))+((r11*x1897))+(((-1.0)*r10*x1903))+(((-1.0)*cj6*x1891*x1900))+(((-1.0)*r12*x1905))+(((-1.0)*cj6*x1891*x1892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1906=((1.0)*sj7);
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(cj3,-1);
if(!x1907.valid){
continue;
}
if( IKabs((((cj7*r22))+(((-1.0)*r20*sj8*x1906))+(((-1.0)*cj8*r21*x1906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1907.value)*(((((-1.0)*cj8*r01*x1906))+(((-1.0)*r00*sj8*x1906))+((cj7*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj7*r22))+(((-1.0)*r20*sj8*x1906))+(((-1.0)*cj8*r21*x1906))))+IKsqr(((x1907.value)*(((((-1.0)*cj8*r01*x1906))+(((-1.0)*r00*sj8*x1906))+((cj7*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj7*r22))+(((-1.0)*r20*sj8*x1906))+(((-1.0)*cj8*r21*x1906))), ((x1907.value)*(((((-1.0)*cj8*r01*x1906))+(((-1.0)*r00*sj8*x1906))+((cj7*r02))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1908=IKcos(j5);
IkReal x1909=IKsin(j5);
IkReal x1910=((0.01)*cj7);
IkReal x1911=(r00*sj8);
IkReal x1912=((1.0)*cj7);
IkReal x1913=(cj8*r11);
IkReal x1914=(r02*sj7);
IkReal x1915=((1.0)*cj6);
IkReal x1916=(r12*sj7);
IkReal x1917=(cj8*r21);
IkReal x1918=(cj8*r01);
IkReal x1919=(r22*sj7);
IkReal x1920=(sj6*sj8);
IkReal x1921=(r20*sj8);
IkReal x1922=(r10*sj8);
IkReal x1923=(cj3*x1908);
IkReal x1924=(sj3*x1908);
IkReal x1925=((1.0)*cj8*sj6);
IkReal x1926=((1.0)*x1909);
evalcond[0]=(((sj7*x1921))+(((-1.0)*r22*x1912))+x1909+((sj7*x1917)));
evalcond[1]=(((sj7*x1922))+(((-1.0)*r12*x1912))+x1924+((sj7*x1913)));
evalcond[2]=((((-1.0)*r02*x1912))+x1923+((sj7*x1918))+((sj7*x1911)));
evalcond[3]=((0.069)+((x1910*x1917))+(((-1.0)*pz))+((x1910*x1921))+(((0.01)*x1919))+(((0.37429)*x1909)));
evalcond[4]=(((x1910*x1918))+((x1910*x1911))+(((0.37429)*x1923))+(((0.36442)*cj3))+(((-1.0)*px))+(((0.01)*x1914)));
evalcond[5]=(((x1910*x1913))+(((0.37429)*x1924))+(((0.36442)*sj3))+(((-1.0)*py))+((x1910*x1922))+(((0.01)*x1916)));
evalcond[6]=((((-1.0)*cj6*x1912*x1917))+(((-1.0)*r20*x1925))+(((-1.0)*x1915*x1919))+x1908+(((-1.0)*cj6*x1912*x1921))+((r21*x1920)));
evalcond[7]=((((-1.0)*cj6*x1912*x1913))+(((-1.0)*x1915*x1916))+(((-1.0)*cj6*x1912*x1922))+(((-1.0)*sj3*x1926))+((r11*x1920))+(((-1.0)*r10*x1925)));
evalcond[8]=(((r01*x1920))+(((-1.0)*x1914*x1915))+(((-1.0)*cj6*x1912*x1918))+(((-1.0)*r00*x1925))+(((-1.0)*cj6*x1911*x1912))+(((-1.0)*cj3*x1926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1927=((1.0)*sj7*sj8);
IkReal x1928=((1.0)*cj8*sj7);
CheckValue<IkReal> x1929=IKPowWithIntegerCheck(sj3,-1);
if(!x1929.valid){
continue;
}
if( IKabs(((((-1.0)*r21*x1928))+(((-1.0)*r20*x1927))+((cj7*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1929.value)*(((((-1.0)*r11*x1928))+((cj7*r12))+(((-1.0)*r10*x1927)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1928))+(((-1.0)*r20*x1927))+((cj7*r22))))+IKsqr(((x1929.value)*(((((-1.0)*r11*x1928))+((cj7*r12))+(((-1.0)*r10*x1927))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r21*x1928))+(((-1.0)*r20*x1927))+((cj7*r22))), ((x1929.value)*(((((-1.0)*r11*x1928))+((cj7*r12))+(((-1.0)*r10*x1927))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1930=IKcos(j5);
IkReal x1931=IKsin(j5);
IkReal x1932=((0.01)*cj7);
IkReal x1933=(r00*sj8);
IkReal x1934=((1.0)*cj7);
IkReal x1935=(cj8*r11);
IkReal x1936=(r02*sj7);
IkReal x1937=((1.0)*cj6);
IkReal x1938=(r12*sj7);
IkReal x1939=(cj8*r21);
IkReal x1940=(cj8*r01);
IkReal x1941=(r22*sj7);
IkReal x1942=(sj6*sj8);
IkReal x1943=(r20*sj8);
IkReal x1944=(r10*sj8);
IkReal x1945=(cj3*x1930);
IkReal x1946=(sj3*x1930);
IkReal x1947=((1.0)*cj8*sj6);
IkReal x1948=((1.0)*x1931);
evalcond[0]=((((-1.0)*r22*x1934))+((sj7*x1943))+x1931+((sj7*x1939)));
evalcond[1]=((((-1.0)*r12*x1934))+((sj7*x1944))+x1946+((sj7*x1935)));
evalcond[2]=(((sj7*x1940))+x1945+((sj7*x1933))+(((-1.0)*r02*x1934)));
evalcond[3]=((0.069)+((x1932*x1939))+(((-1.0)*pz))+((x1932*x1943))+(((0.01)*x1941))+(((0.37429)*x1931)));
evalcond[4]=(((x1932*x1933))+(((0.36442)*cj3))+(((-1.0)*px))+((x1932*x1940))+(((0.37429)*x1945))+(((0.01)*x1936)));
evalcond[5]=(((x1932*x1935))+(((0.36442)*sj3))+(((-1.0)*py))+((x1932*x1944))+(((0.37429)*x1946))+(((0.01)*x1938)));
evalcond[6]=((((-1.0)*cj6*x1934*x1943))+(((-1.0)*x1937*x1941))+x1930+((r21*x1942))+(((-1.0)*cj6*x1934*x1939))+(((-1.0)*r20*x1947)));
evalcond[7]=((((-1.0)*cj6*x1934*x1944))+(((-1.0)*x1937*x1938))+(((-1.0)*sj3*x1948))+((r11*x1942))+(((-1.0)*r10*x1947))+(((-1.0)*cj6*x1934*x1935)));
evalcond[8]=((((-1.0)*cj6*x1934*x1940))+(((-1.0)*cj6*x1933*x1934))+(((-1.0)*cj3*x1948))+(((-1.0)*r00*x1947))+((r01*x1942))+(((-1.0)*x1936*x1937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1949=(cj8*sj7);
IkReal x1950=(sj7*sj8);
CheckValue<IkReal> x1951=IKPowWithIntegerCheck(cj3,-1);
if(!x1951.valid){
continue;
}
if( IKabs((((r20*x1950))+(((-1.0)*cj7*r22))+((r21*x1949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1951.value)*(((((-1.0)*r01*x1949))+(((-1.0)*r00*x1950))+((cj7*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1950))+(((-1.0)*cj7*r22))+((r21*x1949))))+IKsqr(((x1951.value)*(((((-1.0)*r01*x1949))+(((-1.0)*r00*x1950))+((cj7*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r20*x1950))+(((-1.0)*cj7*r22))+((r21*x1949))), ((x1951.value)*(((((-1.0)*r01*x1949))+(((-1.0)*r00*x1950))+((cj7*r02))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1952=IKcos(j5);
IkReal x1953=IKsin(j5);
IkReal x1954=((0.01)*cj7);
IkReal x1955=(r00*sj8);
IkReal x1956=((1.0)*cj7);
IkReal x1957=(cj8*r11);
IkReal x1958=(r02*sj7);
IkReal x1959=((1.0)*cj6);
IkReal x1960=(r12*sj7);
IkReal x1961=(cj8*r21);
IkReal x1962=(cj8*r01);
IkReal x1963=(r22*sj7);
IkReal x1964=(sj6*sj8);
IkReal x1965=(r20*sj8);
IkReal x1966=(r10*sj8);
IkReal x1967=(cj3*x1952);
IkReal x1968=(sj3*x1952);
IkReal x1969=((1.0)*x1953);
IkReal x1970=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*r22*x1956))+(((-1.0)*x1969))+((sj7*x1965))+((sj7*x1961)));
evalcond[1]=(((sj7*x1957))+x1968+((sj7*x1966))+(((-1.0)*r12*x1956)));
evalcond[2]=((((-1.0)*r02*x1956))+((sj7*x1955))+x1967+((sj7*x1962)));
evalcond[3]=((-0.069)+((x1954*x1965))+((x1954*x1961))+(((-1.0)*pz))+(((-0.37429)*x1953))+(((0.01)*x1963)));
evalcond[4]=((((0.36442)*cj3))+((x1954*x1962))+((x1954*x1955))+(((-1.0)*px))+(((0.01)*x1958))+(((0.37429)*x1967)));
evalcond[5]=(((x1954*x1966))+(((0.36442)*sj3))+((x1954*x1957))+(((-1.0)*py))+(((0.37429)*x1968))+(((0.01)*x1960)));
evalcond[6]=((((-1.0)*x1959*x1963))+((r21*x1964))+(((-1.0)*x1952))+(((-1.0)*r20*x1970))+(((-1.0)*cj6*x1956*x1961))+(((-1.0)*cj6*x1956*x1965)));
evalcond[7]=((((-1.0)*x1959*x1960))+(((-1.0)*sj3*x1969))+((r11*x1964))+(((-1.0)*r10*x1970))+(((-1.0)*cj6*x1956*x1966))+(((-1.0)*cj6*x1956*x1957)));
evalcond[8]=((((-1.0)*cj6*x1955*x1956))+(((-1.0)*x1958*x1959))+(((-1.0)*r00*x1970))+(((-1.0)*cj3*x1969))+((r01*x1964))+(((-1.0)*cj6*x1956*x1962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1971=(cj8*sj7);
IkReal x1972=(sj7*sj8);
CheckValue<IkReal> x1973=IKPowWithIntegerCheck(sj3,-1);
if(!x1973.valid){
continue;
}
if( IKabs(((((-1.0)*cj7*r22))+((r20*x1972))+((r21*x1971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1973.value)*(((((-1.0)*r11*x1971))+(((-1.0)*r10*x1972))+((cj7*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*r22))+((r20*x1972))+((r21*x1971))))+IKsqr(((x1973.value)*(((((-1.0)*r11*x1971))+(((-1.0)*r10*x1972))+((cj7*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj7*r22))+((r20*x1972))+((r21*x1971))), ((x1973.value)*(((((-1.0)*r11*x1971))+(((-1.0)*r10*x1972))+((cj7*r12))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1974=IKcos(j5);
IkReal x1975=IKsin(j5);
IkReal x1976=((0.01)*cj7);
IkReal x1977=(r00*sj8);
IkReal x1978=((1.0)*cj7);
IkReal x1979=(cj8*r11);
IkReal x1980=(r02*sj7);
IkReal x1981=((1.0)*cj6);
IkReal x1982=(r12*sj7);
IkReal x1983=(cj8*r21);
IkReal x1984=(cj8*r01);
IkReal x1985=(r22*sj7);
IkReal x1986=(sj6*sj8);
IkReal x1987=(r20*sj8);
IkReal x1988=(r10*sj8);
IkReal x1989=(cj3*x1974);
IkReal x1990=(sj3*x1974);
IkReal x1991=((1.0)*x1975);
IkReal x1992=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*r22*x1978))+(((-1.0)*x1991))+((sj7*x1987))+((sj7*x1983)));
evalcond[1]=(x1990+((sj7*x1979))+((sj7*x1988))+(((-1.0)*r12*x1978)));
evalcond[2]=((((-1.0)*r02*x1978))+x1989+((sj7*x1977))+((sj7*x1984)));
evalcond[3]=((-0.069)+((x1976*x1987))+((x1976*x1983))+(((-0.37429)*x1975))+(((-1.0)*pz))+(((0.01)*x1985)));
evalcond[4]=(((x1976*x1977))+((x1976*x1984))+(((0.36442)*cj3))+(((-1.0)*px))+(((0.37429)*x1989))+(((0.01)*x1980)));
evalcond[5]=(((x1976*x1979))+((x1976*x1988))+(((0.37429)*x1990))+(((0.36442)*sj3))+(((-1.0)*py))+(((0.01)*x1982)));
evalcond[6]=((((-1.0)*x1981*x1985))+(((-1.0)*x1974))+((r21*x1986))+(((-1.0)*cj6*x1978*x1987))+(((-1.0)*cj6*x1978*x1983))+(((-1.0)*r20*x1992)));
evalcond[7]=((((-1.0)*x1981*x1982))+(((-1.0)*r10*x1992))+((r11*x1986))+(((-1.0)*cj6*x1978*x1988))+(((-1.0)*cj6*x1978*x1979))+(((-1.0)*sj3*x1991)));
evalcond[8]=((((-1.0)*cj3*x1991))+(((-1.0)*x1980*x1981))+(((-1.0)*r00*x1992))+(((-1.0)*cj6*x1977*x1978))+((r01*x1986))+(((-1.0)*cj6*x1978*x1984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1999=IKPowWithIntegerCheck(sj4,-1);
if(!x1999.valid){
continue;
}
IkReal x1993=x1999.value;
IkReal x1994=((1.0)*sj7);
IkReal x1995=(r20*sj8);
IkReal x1996=(cj4*sj3);
IkReal x1997=(cj8*r21);
IkReal x1998=(cj7*r22);
CheckValue<IkReal> x2000=IKPowWithIntegerCheck(cj3,-1);
if(!x2000.valid){
continue;
}
if( IKabs((x1993*((x1998+(((-1.0)*x1994*x1997))+(((-1.0)*x1994*x1995)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1993*(x2000.value)*(((((-1.0)*x1994*x1996*x1997))+((x1996*x1998))+(((-1.0)*r00*sj4*sj8*x1994))+(((-1.0)*cj8*r01*sj4*x1994))+((cj7*r02*sj4))+(((-1.0)*x1994*x1995*x1996)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1993*((x1998+(((-1.0)*x1994*x1997))+(((-1.0)*x1994*x1995))))))+IKsqr((x1993*(x2000.value)*(((((-1.0)*x1994*x1996*x1997))+((x1996*x1998))+(((-1.0)*r00*sj4*sj8*x1994))+(((-1.0)*cj8*r01*sj4*x1994))+((cj7*r02*sj4))+(((-1.0)*x1994*x1995*x1996))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1993*((x1998+(((-1.0)*x1994*x1997))+(((-1.0)*x1994*x1995))))), (x1993*(x2000.value)*(((((-1.0)*x1994*x1996*x1997))+((x1996*x1998))+(((-1.0)*r00*sj4*sj8*x1994))+(((-1.0)*cj8*r01*sj4*x1994))+((cj7*r02*sj4))+(((-1.0)*x1994*x1995*x1996))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2001=IKsin(j5);
IkReal x2002=IKcos(j5);
IkReal x2003=((1.0)*cj7);
IkReal x2004=(cj8*r11);
IkReal x2005=((0.01)*cj7);
IkReal x2006=(r00*sj8);
IkReal x2007=((0.37429)*sj3);
IkReal x2008=((1.0)*sj3);
IkReal x2009=(cj8*r21);
IkReal x2010=((0.069)*cj4);
IkReal x2011=((0.01)*sj7);
IkReal x2012=(cj8*r01);
IkReal x2013=(sj6*sj8);
IkReal x2014=(r10*sj8);
IkReal x2015=(r20*sj8);
IkReal x2016=(sj4*x2001);
IkReal x2017=(cj3*x2002);
IkReal x2018=(cj3*x2001);
IkReal x2019=((1.0)*cj6*sj7);
IkReal x2020=(cj4*x2001);
IkReal x2021=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*r22*x2003))+x2016+((sj7*x2015))+((sj7*x2009)));
evalcond[1]=(((sj3*x2002))+(((-1.0)*r12*x2003))+((sj7*x2014))+((sj7*x2004))+((cj4*x2018)));
evalcond[2]=(x2017+(((-1.0)*x2008*x2020))+((sj7*x2012))+(((-1.0)*r02*x2003))+((sj7*x2006)));
evalcond[3]=((((0.37429)*x2016))+((r22*x2011))+((x2005*x2015))+(((-1.0)*pz))+(((0.069)*sj4))+((x2005*x2009)));
evalcond[4]=((((-1.0)*cj6*x2003*x2009))+((r21*x2013))+(((-1.0)*cj6*x2003*x2015))+(((-1.0)*r20*x2021))+((sj4*x2002))+(((-1.0)*r22*x2019)));
evalcond[5]=((((0.37429)*x2017))+(((0.36442)*cj3))+((x2005*x2012))+(((-1.0)*px))+(((-1.0)*x2007*x2020))+((x2005*x2006))+(((-1.0)*sj3*x2010))+((r02*x2011)));
evalcond[6]=(((x2002*x2007))+(((0.36442)*sj3))+((x2005*x2014))+((cj3*x2010))+(((-1.0)*py))+(((0.37429)*cj4*x2018))+((r12*x2011))+((x2004*x2005)));
evalcond[7]=((((-1.0)*r10*x2021))+(((-1.0)*x2001*x2008))+(((-1.0)*cj6*x2003*x2004))+(((-1.0)*r12*x2019))+(((-1.0)*cj6*x2003*x2014))+((r11*x2013))+((cj4*x2017)));
evalcond[8]=((((-1.0)*r00*x2021))+((r01*x2013))+(((-1.0)*cj6*x2003*x2006))+(((-1.0)*cj6*x2003*x2012))+(((-1.0)*cj4*x2002*x2008))+(((-1.0)*x2018))+(((-1.0)*r02*x2019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2028=IKPowWithIntegerCheck(sj4,-1);
if(!x2028.valid){
continue;
}
IkReal x2022=x2028.value;
IkReal x2023=(cj8*r21);
IkReal x2024=((1.0)*sj7);
IkReal x2025=(cj7*r22);
IkReal x2026=(sj8*x2024);
IkReal x2027=(cj3*cj4*sj7);
CheckValue<IkReal> x2029=IKPowWithIntegerCheck(sj3,-1);
if(!x2029.valid){
continue;
}
if( IKabs((x2022*(((((-1.0)*x2023*x2024))+x2025+(((-1.0)*r20*x2026)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x2022*(x2029.value)*(((((-1.0)*cj3*cj4*x2025))+(((-1.0)*cj8*r11*sj4*x2024))+((cj7*r12*sj4))+((r20*sj8*x2027))+((x2023*x2027))+(((-1.0)*r10*sj4*x2026)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2022*(((((-1.0)*x2023*x2024))+x2025+(((-1.0)*r20*x2026))))))+IKsqr((x2022*(x2029.value)*(((((-1.0)*cj3*cj4*x2025))+(((-1.0)*cj8*r11*sj4*x2024))+((cj7*r12*sj4))+((r20*sj8*x2027))+((x2023*x2027))+(((-1.0)*r10*sj4*x2026))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x2022*(((((-1.0)*x2023*x2024))+x2025+(((-1.0)*r20*x2026))))), (x2022*(x2029.value)*(((((-1.0)*cj3*cj4*x2025))+(((-1.0)*cj8*r11*sj4*x2024))+((cj7*r12*sj4))+((r20*sj8*x2027))+((x2023*x2027))+(((-1.0)*r10*sj4*x2026))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2030=IKsin(j5);
IkReal x2031=IKcos(j5);
IkReal x2032=((1.0)*cj7);
IkReal x2033=(cj8*r11);
IkReal x2034=((0.01)*cj7);
IkReal x2035=(r00*sj8);
IkReal x2036=((0.37429)*sj3);
IkReal x2037=((1.0)*sj3);
IkReal x2038=(cj8*r21);
IkReal x2039=((0.069)*cj4);
IkReal x2040=((0.01)*sj7);
IkReal x2041=(cj8*r01);
IkReal x2042=(sj6*sj8);
IkReal x2043=(r10*sj8);
IkReal x2044=(r20*sj8);
IkReal x2045=(sj4*x2030);
IkReal x2046=(cj3*x2031);
IkReal x2047=(cj3*x2030);
IkReal x2048=((1.0)*cj6*sj7);
IkReal x2049=(cj4*x2030);
IkReal x2050=((1.0)*cj8*sj6);
evalcond[0]=((((-1.0)*r22*x2032))+x2045+((sj7*x2038))+((sj7*x2044)));
evalcond[1]=(((sj3*x2031))+(((-1.0)*r12*x2032))+((cj4*x2047))+((sj7*x2033))+((sj7*x2043)));
evalcond[2]=(x2046+(((-1.0)*r02*x2032))+((sj7*x2035))+(((-1.0)*x2037*x2049))+((sj7*x2041)));
evalcond[3]=(((r22*x2040))+((x2034*x2038))+(((-1.0)*pz))+(((0.37429)*x2045))+(((0.069)*sj4))+((x2034*x2044)));
evalcond[4]=(((r21*x2042))+(((-1.0)*r22*x2048))+(((-1.0)*cj6*x2032*x2044))+(((-1.0)*cj6*x2032*x2038))+((sj4*x2031))+(((-1.0)*r20*x2050)));
evalcond[5]=(((x2034*x2035))+((r02*x2040))+(((-1.0)*sj3*x2039))+(((0.36442)*cj3))+(((-1.0)*px))+(((0.37429)*x2046))+(((-1.0)*x2036*x2049))+((x2034*x2041)));
evalcond[6]=((((0.37429)*cj4*x2047))+((x2031*x2036))+((x2033*x2034))+((r12*x2040))+(((0.36442)*sj3))+(((-1.0)*py))+((cj3*x2039))+((x2034*x2043)));
evalcond[7]=((((-1.0)*r10*x2050))+(((-1.0)*cj6*x2032*x2043))+((r11*x2042))+(((-1.0)*cj6*x2032*x2033))+((cj4*x2046))+(((-1.0)*x2030*x2037))+(((-1.0)*r12*x2048)));
evalcond[8]=((((-1.0)*r00*x2050))+(((-1.0)*cj6*x2032*x2041))+(((-1.0)*r02*x2048))+(((-1.0)*cj6*x2032*x2035))+(((-1.0)*x2047))+(((-1.0)*cj4*x2031*x2037))+((r01*x2042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2051=((1.0)*sj7);
IkReal x2052=(cj3*sj8);
IkReal x2053=(cj8*r11);
IkReal x2054=(cj7*r02);
IkReal x2055=(sj3*sj8);
IkReal x2056=(cj8*r01);
IkReal x2057=(cj7*r12);
CheckValue<IkReal> x2058=IKPowWithIntegerCheck(cj4,-1);
if(!x2058.valid){
continue;
}
if( IKabs(((x2058.value)*((((sj3*sj7*x2056))+((r00*sj7*x2055))+(((-1.0)*sj3*x2054))+(((-1.0)*r10*x2051*x2052))+((cj3*x2057))+(((-1.0)*cj3*x2051*x2053)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2051*x2052))+((sj3*x2057))+(((-1.0)*r10*x2051*x2055))+((cj3*x2054))+(((-1.0)*cj3*x2051*x2056))+(((-1.0)*sj3*x2051*x2053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2058.value)*((((sj3*sj7*x2056))+((r00*sj7*x2055))+(((-1.0)*sj3*x2054))+(((-1.0)*r10*x2051*x2052))+((cj3*x2057))+(((-1.0)*cj3*x2051*x2053))))))+IKsqr(((((-1.0)*r00*x2051*x2052))+((sj3*x2057))+(((-1.0)*r10*x2051*x2055))+((cj3*x2054))+(((-1.0)*cj3*x2051*x2056))+(((-1.0)*sj3*x2051*x2053))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x2058.value)*((((sj3*sj7*x2056))+((r00*sj7*x2055))+(((-1.0)*sj3*x2054))+(((-1.0)*r10*x2051*x2052))+((cj3*x2057))+(((-1.0)*cj3*x2051*x2053))))), ((((-1.0)*r00*x2051*x2052))+((sj3*x2057))+(((-1.0)*r10*x2051*x2055))+((cj3*x2054))+(((-1.0)*cj3*x2051*x2056))+(((-1.0)*sj3*x2051*x2053))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2059=IKsin(j5);
IkReal x2060=IKcos(j5);
IkReal x2061=((1.0)*cj7);
IkReal x2062=(cj8*r11);
IkReal x2063=((0.01)*cj7);
IkReal x2064=(r00*sj8);
IkReal x2065=((0.37429)*sj3);
IkReal x2066=((1.0)*sj3);
IkReal x2067=(cj8*r21);
IkReal x2068=((0.069)*cj4);
IkReal x2069=((0.01)*sj7);
IkReal x2070=(cj8*r01);
IkReal x2071=(sj6*sj8);
IkReal x2072=(r10*sj8);
IkReal x2073=(r20*sj8);
IkReal x2074=(sj4*x2059);
IkReal x2075=(cj3*x2060);
IkReal x2076=(cj3*x2059);
IkReal x2077=((1.0)*cj6*sj7);
IkReal x2078=(cj4*x2059);
IkReal x2079=((1.0)*cj8*sj6);
evalcond[0]=(((sj7*x2067))+((sj7*x2073))+x2074+(((-1.0)*r22*x2061)));
evalcond[1]=(((sj3*x2060))+((sj7*x2062))+(((-1.0)*r12*x2061))+((sj7*x2072))+((cj4*x2076)));
evalcond[2]=(((sj7*x2064))+((sj7*x2070))+(((-1.0)*r02*x2061))+x2075+(((-1.0)*x2066*x2078)));
evalcond[3]=(((r22*x2069))+(((-1.0)*pz))+(((0.069)*sj4))+((x2063*x2073))+(((0.37429)*x2074))+((x2063*x2067)));
evalcond[4]=((((-1.0)*r22*x2077))+((sj4*x2060))+(((-1.0)*r20*x2079))+(((-1.0)*cj6*x2061*x2067))+(((-1.0)*cj6*x2061*x2073))+((r21*x2071)));
evalcond[5]=((((-1.0)*sj3*x2068))+(((0.36442)*cj3))+((r02*x2069))+(((-1.0)*px))+((x2063*x2070))+(((0.37429)*x2075))+(((-1.0)*x2065*x2078))+((x2063*x2064)));
evalcond[6]=(((r12*x2069))+(((0.36442)*sj3))+(((-1.0)*py))+((x2060*x2065))+((x2063*x2072))+((x2062*x2063))+(((0.37429)*cj4*x2076))+((cj3*x2068)));
evalcond[7]=((((-1.0)*r10*x2079))+(((-1.0)*r12*x2077))+((r11*x2071))+((cj4*x2075))+(((-1.0)*x2059*x2066))+(((-1.0)*cj6*x2061*x2062))+(((-1.0)*cj6*x2061*x2072)));
evalcond[8]=((((-1.0)*r02*x2077))+(((-1.0)*cj4*x2060*x2066))+(((-1.0)*x2076))+((r01*x2071))+(((-1.0)*r00*x2079))+(((-1.0)*cj6*x2061*x2064))+(((-1.0)*cj6*x2061*x2070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "a9244a345a56872b76cadb57277d0618"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
