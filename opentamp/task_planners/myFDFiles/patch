diff -r 9391422d05af -r a818e3127b32 src/search/globals.cc
--- a/src/search/globals.cc	Mon Jan 07 23:39:16 2013 +0100
+++ b/src/search/globals.cc	Tue Jan 15 21:35:55 2013 +0100
@@ -263,8 +263,10 @@
     for (int i = 0; i < g_variable_name.size(); i++)
         cout << "  " << g_variable_name[i]
              << " (range " << g_variable_domain[i] << ")" << endl;
-    cout << "Initial State:" << endl;
-    g_initial_state->dump();
+    cout << "Initial State (PDDL):" << endl;
+    g_initial_state->dump_pddl();
+    cout << "Initial State (FDR):" << endl;
+    g_initial_state->dump_fdr();
     dump_goal();
     /*
     cout << "Successor Generator:" << endl;
diff -r 9391422d05af -r a818e3127b32 src/search/search_space.cc
--- a/src/search/search_space.cc	Mon Jan 07 23:39:16 2013 +0100
+++ b/src/search/search_space.cc	Tue Jan 15 21:35:55 2013 +0100
@@ -129,7 +129,7 @@
 
 void SearchNode::dump() {
     cout << state_buffer << ": ";
-    State(state_buffer).dump();
+    State(state_buffer).dump_fdr();
     cout << " created by " << info.creating_operator->get_name()
          << " from " << info.parent_state << endl;
 }
@@ -170,6 +170,8 @@
 
 void SearchSpace::trace_path(const State &goal_state,
                              vector<const Operator *> &path) const {
+    vector<State> state_sequence;
+    state_sequence.push_back(goal_state);
     StateProxy current_state(&goal_state);
     assert(path.empty());
     for (;;) {
@@ -180,16 +182,24 @@
         if (op == 0)
             break;
         path.push_back(op);
-        current_state = StateProxy(const_cast<state_var_t *>(info.parent_state));
+        state_var_t *state_data = const_cast<state_var_t *>(info.parent_state);
+        current_state = StateProxy(state_data);
+        state_sequence.push_back(State(state_data));
     }
     reverse(path.begin(), path.end());
+    reverse(state_sequence.begin(), state_sequence.end());
+    for (size_t i = 0; i < state_sequence.size(); ++i) {
+        cout << "State #" << i << " in the solution:" << endl;
+        state_sequence[i].dump_pddl();
+        cout << endl;
+    }
 }
 
 void SearchSpace::dump() {
     int i = 0;
     for (HashTable::iterator iter = nodes->begin(); iter != nodes->end(); iter++) {
         cout << "#" << i++ << " (" << iter->first.state_data << "): ";
-        State(iter->first.state_data).dump();
+        State(iter->first.state_data).dump_fdr();
         if (iter->second.creating_operator &&
             iter->second.parent_state) {
             cout << " created by " << iter->second.creating_operator->get_name()
diff -r 9391422d05af -r a818e3127b32 src/search/state.cc
--- a/src/search/state.cc	Mon Jan 07 23:39:16 2013 +0100
+++ b/src/search/state.cc	Tue Jan 15 21:35:55 2013 +0100
@@ -72,11 +72,19 @@
     _deallocate();
 }
 
-void State::dump() const {
+void State::dump_pddl() const {
+    for (int i = 0; i < g_variable_domain.size(); i++) {
+        const string &fact_name = g_fact_names[i][vars[i]];
+        if (fact_name != "<none of those>")
+            cout << fact_name << endl;
+    }
+}
+
+void State::dump_fdr() const {
     // We cast the values to int since we'd get bad output otherwise
     // if state_var_t == char.
     for (int i = 0; i < g_variable_domain.size(); i++)
-        cout << "  " << g_variable_name[i] << ": "
+        cout << "  #" << i << " [" << g_variable_name[i] << "] -> "
              << static_cast<int>(vars[i]) << endl;
 }
 
diff -r 9391422d05af -r a818e3127b32 src/search/state.h
--- a/src/search/state.h	Mon Jan 07 23:39:16 2013 +0100
+++ b/src/search/state.h	Tue Jan 15 21:35:55 2013 +0100
@@ -28,7 +28,8 @@
     int operator[](int index) const {
         return vars[index];
     }
-    void dump() const;
+    void dump_pddl() const;
+    void dump_fdr() const;
     bool operator==(const State &other) const;
     bool operator<(const State &other) const;
     size_t hash() const;
diff -r 9391422d05af -r a818e3127b32 src/translate/translate.py
--- a/src/translate/translate.py	Mon Jan 07 23:39:16 2013 +0100
+++ b/src/translate/translate.py	Tue Jan 15 21:35:55 2013 +0100
@@ -414,6 +414,11 @@
     #for axiom in axioms:
     #  axiom.dump()
 
+    for fact in init:
+        if fact not in strips_to_sas:
+            if fact.predicate != "=":
+                print("pruned static init fact: %s" % fact)
+
     if DUMP_TASK:
         # Remove init facts that don't occur in strips_to_sas: they are constant.
         nonconstant_init = filter(strips_to_sas.get, init)
