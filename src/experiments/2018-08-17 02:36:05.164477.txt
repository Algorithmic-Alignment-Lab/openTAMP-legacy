{'agent': {'T': 1,
           'action_inds': {('pr2', 'gripper'): array([2]),
                           ('pr2', 'pose'): array([0, 1])},
           'conditions': 10,
           'dU': 3,
           'dX': 5,
           'env': RaveGetEnvironment(1),
           'get_hl_plan': <function hl_plan_for_state at 0x7f0579845050>,
           'get_plan': <function get_plan at 0x7f0579845140>,
           'hist_len': 1,
           'image_channels': 3,
           'image_height': 140,
           'image_width': 140,
           'model': None,
           'num_cans': 1,
           'obs_include': [1,
                           9,
                           6],
           'openrave_bodies': {'can0': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7f05798ac290>,
                               'pr2': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7f05798ac250>},
           'plans': {('grasp', 'can0'): <core.internal_repr.plan.Plan object at 0x7f057987ee50>,
                     ('putdown', 'can0'): <core.internal_repr.plan.Plan object at 0x7f05798acfd0>},
           'sensor_dims': {0: 3,
                           1: 5,
                           6: 3,
                           8: 2,
                           9: 4},
           'solver': <__main__.NAMOPolicySolver object at 0x7f057986fbd0>,
           'state_include': [1],
           'state_inds': {('can0', 'pose'): array([3, 4]),
                          ('can0_end_target', 'value'): array([12, 13]),
                          ('can0_init_target', 'value'): array([10, 11]),
                          ('grasp0', 'value'): array([5, 6]),
                          ('middle_target', 'value'): array([14, 15]),
                          ('pdp_target0', 'gripper'): array([21]),
                          ('pdp_target0', 'value'): array([19, 20]),
                          ('pr2', 'gripper'): array([2]),
                          ('pr2', 'pose'): array([0, 1]),
                          ('robot_end_pose', 'gripper'): array([18]),
                          ('robot_end_pose', 'value'): array([16, 17]),
                          ('robot_init_pose', 'gripper'): array([9]),
                          ('robot_init_pose', 'value'): array([7, 8])},
           'stochastic_conditions': True,
           'symbolic_bound': 5,
           'target_dim': 4,
           'target_inds': {('can0_end_target', 'value'): array([0, 1]),
                           ('middle_target', 'value'): array([2, 3])},
           'targets': [{'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]}],
           'task_breaks': [],
           'task_durations': {'grasp': 20,
                              'putdown': 20},
           'task_encoding': {'grasp': array([ 1.,  0.]),
                             'putdown': array([ 0.,  1.])},
           'task_list': ['grasp',
                         'putdown'],
           'type': <class 'policy_hooks.namo.namo_agent.NAMOSortingAgent'>,
           'viewer': None,
           'x0': [array([ 0.,  0.,  0., -2.,  0.,  0.,  0.,  0.,  0.,  0., -2.,  0.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0. ,  0. ,  0. ,  0. ,  4.5,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,
        4.5,  0. ,  6. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]),
                  array([ 0.,  0.,  0.,  2.,  2.,  0.,  0.,  0.,  0.,  0.,  2.,  2.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0., -1., -1.,  0.,  0.,  0.,  0.,  0., -1., -1.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0., -2.,  0.,  0.,  0.,  0.,  0.,  0., -2.,  0.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0., -2.,  2.,  0.,  0.,  0.,  0.,  0., -2.,  2.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0.,  1.,  2.,  0.,  0.,  0.,  0.,  0.,  1.,  2.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0. ,  0. ,  0. ,  0. ,  4.5,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,
        4.5,  0. ,  6. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ])]},
 'algorithm': {'grasp': {'T': 20,
                         'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7f057986fe90>,
                         'conditions': 10,
                         'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                'wp_final_multiplier': 1.0}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                            {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                'wp': array([[ 1.,  1.,  1.]])}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                  'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                  'weights': [1.0,
                                              1.0]},
                         'fit_dynamics': False,
                         'init_traj_distr': {'T': 20,
                                             'dQ': 3,
                                             'dU': 3,
                                             'dX': 5,
                                             'dt': 1.0,
                                             'init_var': 0.001,
                                             'pos_gains': 0.01,
                                             'type': <function init_pd at 0x7f057985a320>,
                                             'x0': [array([ 0.,  0.,  0., -2.,  0.]),
                                                    array([ 0.,  0.,  0.,  1., -1.]),
                                                    array([ 0. ,  0. ,  0. ,  0. ,  4.5]),
                                                    array([ 0.,  0.,  0.,  2.,  2.]),
                                                    array([ 0.,  0.,  0., -1., -1.]),
                                                    array([ 0.,  0.,  0., -1.,  0.]),
                                                    array([ 0.,  0.,  0., -2.,  0.]),
                                                    array([ 0.,  0.,  0., -2.,  2.]),
                                                    array([ 0.,  0.,  0.,  1.,  2.]),
                                                    array([ 0. ,  0. ,  0. ,  0. ,  4.5])]},
                         'iterations': 10,
                         'kl_step': 1.0,
                         'max_ent_traj': 0.0,
                         'max_step_mult': 3.0,
                         'min_step_mult': 0.5,
                         'opt_wt': 1000.0,
                         'policy_opt': {'batch_size': 3000,
                                        'distilled_network_model': <function tf_network at 0x7f05934fa9b0>,
                                        'distilled_network_params': {'dim_hidden': [300,
                                                                                    300],
                                                                     'image_channels': 3,
                                                                     'image_height': 140,
                                                                     'image_width': 140,
                                                                     'n_layers': 2,
                                                                     'num_filters': [5,
                                                                                     10],
                                                                     'obs_image_data': [],
                                                                     'obs_include': [1,
                                                                                     9,
                                                                                     6],
                                                                     'sensor_dims': {0: 3,
                                                                                     1: 5,
                                                                                     6: 3,
                                                                                     8: 2,
                                                                                     9: 4}},
                                        'gpu_fraction': 0.2,
                                        'image_channels': 3,
                                        'image_height': 140,
                                        'image_width': 140,
                                        'iterations': 5000,
                                        'lr': 0.001,
                                        'network_model': <function tf_network at 0x7f05934fa9b0>,
                                        'network_params': {'dim_hidden': [100],
                                                           'image_channels': 3,
                                                           'image_height': 140,
                                                           'image_width': 140,
                                                           'n_layers': 1,
                                                           'num_filters': [5,
                                                                           10],
                                                           'obs_image_data': [],
                                                           'obs_include': [1,
                                                                           9,
                                                                           6],
                                                           'sensor_dims': {0: 3,
                                                                           1: 5,
                                                                           6: 3,
                                                                           8: 2,
                                                                           9: 4}},
                                        'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7f057987e350>,
                                        'primitive_network_model': <function tf_classification_network at 0x7f057986ac08>,
                                        'task_list': ['grasp',
                                                      'putdown'],
                                        'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                        'weight_decay': 0.1,
                                        'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                         'policy_prior': {'max_clusters': 20,
                                          'max_samples': 20,
                                          'min_samples_per_cluster': 40,
                                          'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                         'policy_sample_mode': 'add',
                         'policy_transfer_coeff': 0.005,
                         'sample_on_policy': True,
                         'sample_ts_prob': 0.2,
                         'stochastic_conditions': True,
                         'traj_opt': {'covariance_damping': 0.01,
                                      'kl_threshold': 0.001,
                                      'min_temperature': 0.01,
                                      'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                         'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>},
               'putdown': {'T': 20,
                           'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7f057986fe90>,
                           'conditions': 10,
                           'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                  'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                  'wp_final_multiplier': 1.0}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                              {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                  'wp': array([[ 1.,  1.,  1.]])}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                    'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                    'weights': [1.0,
                                                1.0]},
                           'fit_dynamics': False,
                           'init_traj_distr': {'T': 20,
                                               'dQ': 3,
                                               'dU': 3,
                                               'dX': 5,
                                               'dt': 1.0,
                                               'init_var': 0.001,
                                               'pos_gains': 0.01,
                                               'type': <function init_pd at 0x7f057985a320>,
                                               'x0': [array([ 0.,  0.,  0., -2.,  0.]),
                                                      array([ 0.,  0.,  0.,  1., -1.]),
                                                      array([ 0. ,  0. ,  0. ,  0. ,  4.5]),
                                                      array([ 0.,  0.,  0.,  2.,  2.]),
                                                      array([ 0.,  0.,  0., -1., -1.]),
                                                      array([ 0.,  0.,  0., -1.,  0.]),
                                                      array([ 0.,  0.,  0., -2.,  0.]),
                                                      array([ 0.,  0.,  0., -2.,  2.]),
                                                      array([ 0.,  0.,  0.,  1.,  2.]),
                                                      array([ 0. ,  0. ,  0. ,  0. ,  4.5])]},
                           'iterations': 10,
                           'kl_step': 1.0,
                           'max_ent_traj': 0.0,
                           'max_step_mult': 3.0,
                           'min_step_mult': 0.5,
                           'opt_wt': 1000.0,
                           'policy_opt': {'batch_size': 3000,
                                          'distilled_network_model': <function tf_network at 0x7f05934fa9b0>,
                                          'distilled_network_params': {'dim_hidden': [300,
                                                                                      300],
                                                                       'image_channels': 3,
                                                                       'image_height': 140,
                                                                       'image_width': 140,
                                                                       'n_layers': 2,
                                                                       'num_filters': [5,
                                                                                       10],
                                                                       'obs_image_data': [],
                                                                       'obs_include': [1,
                                                                                       9,
                                                                                       6],
                                                                       'sensor_dims': {0: 3,
                                                                                       1: 5,
                                                                                       6: 3,
                                                                                       8: 2,
                                                                                       9: 4}},
                                          'gpu_fraction': 0.2,
                                          'image_channels': 3,
                                          'image_height': 140,
                                          'image_width': 140,
                                          'iterations': 5000,
                                          'lr': 0.001,
                                          'network_model': <function tf_network at 0x7f05934fa9b0>,
                                          'network_params': {'dim_hidden': [100],
                                                             'image_channels': 3,
                                                             'image_height': 140,
                                                             'image_width': 140,
                                                             'n_layers': 1,
                                                             'num_filters': [5,
                                                                             10],
                                                             'obs_image_data': [],
                                                             'obs_include': [1,
                                                                             9,
                                                                             6],
                                                             'sensor_dims': {0: 3,
                                                                             1: 5,
                                                                             6: 3,
                                                                             8: 2,
                                                                             9: 4}},
                                          'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7f057987e350>,
                                          'primitive_network_model': <function tf_classification_network at 0x7f057986ac08>,
                                          'task_list': ['grasp',
                                                        'putdown'],
                                          'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                          'weight_decay': 0.1,
                                          'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                           'policy_prior': {'max_clusters': 20,
                                            'max_samples': 20,
                                            'min_samples_per_cluster': 40,
                                            'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                           'policy_sample_mode': 'add',
                           'policy_transfer_coeff': 0.005,
                           'sample_on_policy': True,
                           'sample_ts_prob': 0.2,
                           'stochastic_conditions': True,
                           'traj_opt': {'covariance_damping': 0.01,
                                        'kl_threshold': 0.001,
                                        'min_temperature': 0.01,
                                        'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                           'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>}},
 'batch_size': 3000,
 'common': {'conditions': 10,
            'data_files_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/data_files/',
            'experiment_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/',
            'experiment_name': 'my_experiment_08-17-18_02-32',
            'log_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/log.txt',
            'target_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/target.npz'},
 'cost_f': <function cost_f at 0x7f0579845488>,
 'dQ': 3,
 'dim_hidden': [100],
 'goal_f': <function goal_f at 0x7f0579845500>,
 'gui_on': False,
 'hist_len': 1,
 'iterations': 10,
 'lr': 0.001,
 'max_tree_depth': 3,
 'mode': 'position',
 'n_layers': 1,
 'num_conds': 10,
 'num_distilled_samples': 0,
 'num_rollouts': 8,
 'num_samples': 15,
 'opt_wt': 1000.0,
 'plan_f': <function <lambda> at 0x7f05798a1b18>,
 'policy_coeff': 1.0,
 'sample_on_policy': True,
 'stochastic_conditions': True,
 'take_optimal_sample': True,
 'target_f': <function get_next_target at 0x7f0579845398>,
 'task_durations': {'grasp': 20,
                    'putdown': 20},
 'task_list': ['grasp',
               'putdown'],
 'train_iterations': 5000,
 'verbose_policy_trials': 1,
 'verbose_trials': 1,
 'weight_decay': 0.1}


<class 'gps.algorithm.cost.cost_sum.CostSum'>

STEP 0:
[[ 0.          0.          0.         -2.          0.        ]
 [-0.04502984 -0.05644486  0.01672023 -2.          0.        ]
 [-0.07706028 -0.06865528  0.02172958 -2.          0.        ]
 [-0.09637927 -0.07602087  0.02475157 -2.          0.        ]
 [-0.10861629 -0.07970043  0.02659824 -2.          0.        ]
 [-0.11709458 -0.08091397  0.02778694 -2.          0.        ]
 [-0.12322374 -0.08119661  0.02860641 -2.          0.        ]
 [-0.12770194 -0.08124444  0.0291944  -2.          0.        ]
 [-0.13098651 -0.08123763  0.02962281 -2.          0.        ]
 [-0.13339892 -0.0812216   0.02993673 -2.          0.        ]
 [-0.13517164 -0.08120693  0.03016721 -2.          0.        ]
 [-0.13647451 -0.08119538  0.03033655 -2.          0.        ]
 [-0.13743211 -0.0811867   0.030461   -2.          0.        ]
 [-0.13813598 -0.08118027  0.03055247 -2.          0.        ]
 [-0.13865334 -0.08117552  0.03061971 -2.          0.        ]
 [-0.13903362 -0.08117203  0.03066912 -2.          0.        ]
 [-0.13931315 -0.08116947  0.03070544 -2.          0.        ]
 [-0.13951859 -0.08116758  0.03073214 -2.          0.        ]
 [-0.1396696  -0.08116619  0.03075177 -2.          0.        ]
 [-0.13978061 -0.08116518  0.03076619 -2.          0.        ]]

STEP 1:
[[-0.13978061 -0.08116518  0.03076619 -2.          0.        ]
 [-0.13988756 -0.08116439  0.0307801  -2.          0.        ]
 [-0.13994081 -0.08116376  0.03078701 -2.          0.        ]
 [-0.13997996 -0.08116335  0.0307921  -2.          0.        ]
 [-0.14000875 -0.08116308  0.03079584 -2.          0.        ]
 [-0.14002989 -0.08116288  0.03079859 -2.          0.        ]
 [-0.14004543 -0.08116274  0.03080061 -2.          0.        ]
 [-0.14005685 -0.08116264  0.03080209 -2.          0.        ]
 [-0.14006525 -0.08116256  0.03080318 -2.          0.        ]
 [-0.14007142 -0.0811625   0.03080399 -2.          0.        ]
 [-0.14007597 -0.08116246  0.03080457 -2.          0.        ]
 [-0.14007929 -0.08116243  0.03080501 -2.          0.        ]
 [-0.14008175 -0.08116241  0.03080533 -2.          0.        ]
 [-0.14008355 -0.08116239  0.03080556 -2.          0.        ]
 [-0.14008489 -0.08116238  0.03080573 -2.          0.        ]
 [-0.14008586 -0.08116236  0.03080586 -2.          0.        ]
 [-0.14008658 -0.08116236  0.03080595 -2.          0.        ]
 [-0.1400871  -0.08116236  0.03080602 -2.          0.        ]
 [-0.14008749 -0.08116236  0.03080607 -2.          0.        ]
 [-0.14008777 -0.08116235  0.03080611 -2.          0.        ]]

STEP 2:
[[-0.14008777 -0.08116235  0.03080611 -2.          0.        ]
 [-0.14008805 -0.08116235  0.03080615 -2.          0.        ]
 [-0.14008819 -0.08116235  0.03080616 -2.          0.        ]
 [-0.14008829 -0.08116235  0.03080618 -2.          0.        ]
 [-0.14008835 -0.08116235  0.03080619 -2.          0.        ]
 [-0.14008841 -0.08116235  0.03080619 -2.          0.        ]
 [-0.14008845 -0.08116235  0.0308062  -2.          0.        ]
 [-0.14008847 -0.08116235  0.0308062  -2.          0.        ]
 [-0.1400885  -0.08116234  0.0308062  -2.          0.        ]
 [-0.14008853 -0.08116235  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116235  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]]

STEP 3:
[[-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]]

STEP 4:
[[-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]
 [-0.14008854 -0.08116234  0.03080621 -2.          0.        ]]

