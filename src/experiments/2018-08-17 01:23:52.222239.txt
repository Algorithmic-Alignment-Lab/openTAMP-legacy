{'agent': {'T': 1,
           'action_inds': {('pr2', 'gripper'): array([2]),
                           ('pr2', 'pose'): array([0, 1])},
           'conditions': 1,
           'dU': 3,
           'dX': 5,
           'env': RaveGetEnvironment(26),
           'get_hl_plan': <function hl_plan_for_state at 0x7fbda60d8050>,
           'get_plan': <function get_plan at 0x7fbda60d8140>,
           'hist_len': 3,
           'image_channels': 3,
           'image_height': 140,
           'image_width': 140,
           'model': None,
           'num_cans': 1,
           'obs_include': [1,
                           9,
                           6],
           'openrave_bodies': {'can0': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7fbd7d1bd190>,
                               'pr2': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7fbd7d1bd490>},
           'plans': {('grasp', 'can0'): <core.internal_repr.plan.Plan object at 0x7fbd30019990>,
                     ('putdown', 'can0'): <core.internal_repr.plan.Plan object at 0x7fbd7d1bd4d0>},
           'sensor_dims': {0: 3,
                           1: 5,
                           6: 9,
                           8: 2,
                           9: 4},
           'solver': <__main__.NAMOPolicySolver object at 0x7fbd7c03f1d0>,
           'state_include': [1],
           'state_inds': {('can0', 'pose'): array([3, 4]),
                          ('can0_end_target', 'value'): array([12, 13]),
                          ('can0_init_target', 'value'): array([10, 11]),
                          ('grasp0', 'value'): array([5, 6]),
                          ('middle_target', 'value'): array([14, 15]),
                          ('pdp_target0', 'gripper'): array([21]),
                          ('pdp_target0', 'value'): array([19, 20]),
                          ('pr2', 'gripper'): array([2]),
                          ('pr2', 'pose'): array([0, 1]),
                          ('robot_end_pose', 'gripper'): array([18]),
                          ('robot_end_pose', 'value'): array([16, 17]),
                          ('robot_init_pose', 'gripper'): array([9]),
                          ('robot_init_pose', 'value'): array([7, 8])},
           'stochastic_conditions': True,
           'symbolic_bound': 5,
           'target_dim': 4,
           'target_inds': {('can0_end_target', 'value'): array([0, 1]),
                           ('middle_target', 'value'): array([2, 3])},
           'targets': [{'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]}],
           'task_breaks': [],
           'task_durations': {'grasp': 20,
                              'putdown': 20},
           'task_encoding': {'grasp': array([ 1.,  0.]),
                             'putdown': array([ 0.,  1.])},
           'task_list': ['grasp',
                         'putdown'],
           'type': <class 'policy_hooks.namo.namo_agent.NAMOSortingAgent'>,
           'viewer': None,
           'x0': [array([ 0.,  0.,  0., -2.,  0.,  0.,  0.,  0.,  0.,  0., -2.,  0.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])]},
 'algorithm': {'grasp': {'T': 20,
                         'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7fbd7c03f090>,
                         'conditions': 1,
                         'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                'wp_final_multiplier': 1.0}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                            {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                'wp': array([[ 1.,  1.,  1.]])}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                  'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                  'weights': [1.0,
                                              1.0]},
                         'fit_dynamics': False,
                         'init_traj_distr': {'T': 20,
                                             'dQ': 3,
                                             'dU': 3,
                                             'dX': 5,
                                             'dt': 1.0,
                                             'init_var': 0.001,
                                             'pos_gains': 0.01,
                                             'type': <function init_pd at 0x7fbda60ed320>,
                                             'x0': [array([ 0.,  0.,  0., -2.,  0.])]},
                         'iterations': 10,
                         'kl_step': 0.1,
                         'max_ent_traj': 0.0,
                         'max_step_mult': 3.0,
                         'min_step_mult': 0.5,
                         'opt_wt': 10000.0,
                         'policy_opt': {'batch_size': 3000,
                                        'distilled_network_model': <function tf_network at 0x7fbdbfd499b0>,
                                        'distilled_network_params': {'dim_hidden': [300,
                                                                                    300],
                                                                     'image_channels': 3,
                                                                     'image_height': 140,
                                                                     'image_width': 140,
                                                                     'n_layers': 2,
                                                                     'num_filters': [5,
                                                                                     10],
                                                                     'obs_image_data': [],
                                                                     'obs_include': [1,
                                                                                     9,
                                                                                     6],
                                                                     'sensor_dims': {0: 3,
                                                                                     1: 5,
                                                                                     6: 9,
                                                                                     8: 2,
                                                                                     9: 4}},
                                        'gpu_fraction': 0.2,
                                        'image_channels': 3,
                                        'image_height': 140,
                                        'image_width': 140,
                                        'iterations': 5000,
                                        'lr': 0.001,
                                        'network_model': <function tf_network at 0x7fbdbfd499b0>,
                                        'network_params': {'dim_hidden': [100],
                                                           'image_channels': 3,
                                                           'image_height': 140,
                                                           'image_width': 140,
                                                           'n_layers': 1,
                                                           'num_filters': [5,
                                                                           10],
                                                           'obs_image_data': [],
                                                           'obs_include': [1,
                                                                           9,
                                                                           6],
                                                           'sensor_dims': {0: 3,
                                                                           1: 5,
                                                                           6: 9,
                                                                           8: 2,
                                                                           9: 4}},
                                        'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7fbd1fde4d50>,
                                        'primitive_network_model': <function tf_classification_network at 0x7fbda60fdc08>,
                                        'task_list': ['grasp',
                                                      'putdown'],
                                        'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                        'weight_decay': 0.1,
                                        'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                         'policy_prior': {'max_clusters': 20,
                                          'max_samples': 20,
                                          'min_samples_per_cluster': 40,
                                          'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                         'policy_sample_mode': 'add',
                         'policy_transfer_coeff': 0.005,
                         'sample_on_policy': True,
                         'sample_ts_prob': 0.2,
                         'stochastic_conditions': True,
                         'traj_opt': {'covariance_damping': 0.01,
                                      'kl_threshold': 0.001,
                                      'min_temperature': 0.01,
                                      'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                         'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>},
               'putdown': {'T': 20,
                           'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7fbd7c03f090>,
                           'conditions': 1,
                           'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                  'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                  'wp_final_multiplier': 1.0}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                              {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                  'wp': array([[ 1.,  1.,  1.]])}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                    'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                    'weights': [1.0,
                                                1.0]},
                           'fit_dynamics': False,
                           'init_traj_distr': {'T': 20,
                                               'dQ': 3,
                                               'dU': 3,
                                               'dX': 5,
                                               'dt': 1.0,
                                               'init_var': 0.001,
                                               'pos_gains': 0.01,
                                               'type': <function init_pd at 0x7fbda60ed320>,
                                               'x0': [array([ 0.,  0.,  0., -2.,  0.])]},
                           'iterations': 10,
                           'kl_step': 0.1,
                           'max_ent_traj': 0.0,
                           'max_step_mult': 3.0,
                           'min_step_mult': 0.5,
                           'opt_wt': 10000.0,
                           'policy_opt': {'batch_size': 3000,
                                          'distilled_network_model': <function tf_network at 0x7fbdbfd499b0>,
                                          'distilled_network_params': {'dim_hidden': [300,
                                                                                      300],
                                                                       'image_channels': 3,
                                                                       'image_height': 140,
                                                                       'image_width': 140,
                                                                       'n_layers': 2,
                                                                       'num_filters': [5,
                                                                                       10],
                                                                       'obs_image_data': [],
                                                                       'obs_include': [1,
                                                                                       9,
                                                                                       6],
                                                                       'sensor_dims': {0: 3,
                                                                                       1: 5,
                                                                                       6: 9,
                                                                                       8: 2,
                                                                                       9: 4}},
                                          'gpu_fraction': 0.2,
                                          'image_channels': 3,
                                          'image_height': 140,
                                          'image_width': 140,
                                          'iterations': 5000,
                                          'lr': 0.001,
                                          'network_model': <function tf_network at 0x7fbdbfd499b0>,
                                          'network_params': {'dim_hidden': [100],
                                                             'image_channels': 3,
                                                             'image_height': 140,
                                                             'image_width': 140,
                                                             'n_layers': 1,
                                                             'num_filters': [5,
                                                                             10],
                                                             'obs_image_data': [],
                                                             'obs_include': [1,
                                                                             9,
                                                                             6],
                                                             'sensor_dims': {0: 3,
                                                                             1: 5,
                                                                             6: 9,
                                                                             8: 2,
                                                                             9: 4}},
                                          'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7fbd1fde4d50>,
                                          'primitive_network_model': <function tf_classification_network at 0x7fbda60fdc08>,
                                          'task_list': ['grasp',
                                                        'putdown'],
                                          'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                          'weight_decay': 0.1,
                                          'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                           'policy_prior': {'max_clusters': 20,
                                            'max_samples': 20,
                                            'min_samples_per_cluster': 40,
                                            'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                           'policy_sample_mode': 'add',
                           'policy_transfer_coeff': 0.005,
                           'sample_on_policy': True,
                           'sample_ts_prob': 0.2,
                           'stochastic_conditions': True,
                           'traj_opt': {'covariance_damping': 0.01,
                                        'kl_threshold': 0.001,
                                        'min_temperature': 0.01,
                                        'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                           'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>}},
 'batch_size': 3000,
 'common': {'conditions': 1,
            'data_files_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/data_files/',
            'experiment_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/',
            'experiment_name': 'my_experiment_08-17-18_00-19',
            'log_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/log.txt',
            'target_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/target.npz'},
 'cost_f': <function cost_f at 0x7fbda60d8488>,
 'dQ': 3,
 'dim_hidden': [100],
 'goal_f': <function goal_f at 0x7fbda60d8500>,
 'gui_on': False,
 'hist_len': 3,
 'iterations': 10,
 'lr': 0.001,
 'max_tree_depth': 3,
 'mode': 'position',
 'n_layers': 1,
 'num_conds': 1,
 'num_distilled_samples': 0,
 'num_rollouts': 8,
 'num_samples': 15,
 'opt_wt': 10000.0,
 'plan_f': <function <lambda> at 0x7fbd9d2ee1b8>,
 'policy_coeff': 1.0,
 'sample_on_policy': True,
 'stochastic_conditions': True,
 'take_optimal_sample': True,
 'target_f': <function get_next_target at 0x7fbda60d8398>,
 'task_durations': {'grasp': 20,
                    'putdown': 20},
 'task_list': ['grasp',
               'putdown'],
 'train_iterations': 5000,
 'verbose_policy_trials': 1,
 'verbose_trials': 1,
 'weight_decay': 0.1}


<class 'gps.algorithm.cost.cost_sum.CostSum'>

STEP 0:
[[  0.00000000e+00   0.00000000e+00   0.00000000e+00  -2.00000000e+00
    0.00000000e+00]
 [ -1.38000444e-01  -2.87192073e-02   9.48649191e-04  -2.00000000e+00
    0.00000000e+00]
 [ -1.43050790e-01  -2.97389645e-02   1.32273068e-03  -2.00000000e+00
    0.00000000e+00]
 [ -1.60884693e-01  -3.33399661e-02   2.64371140e-03  -2.00000000e+00
    0.00000000e+00]
 [ -1.82615310e-01  -3.77277881e-02   4.25332692e-03  -2.00000000e+00
    0.00000000e+00]
 [ -1.94604218e-01  -4.01485749e-02   5.14136115e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.03856349e-01  -4.20167558e-02   5.82667952e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.11232692e-01  -4.35061827e-02   6.37305621e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.16587871e-01  -4.45874929e-02   6.76972046e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.20595449e-01  -4.53967005e-02   7.06656836e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.23619133e-01  -4.60072458e-02   7.29053747e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.25877598e-01  -4.64632697e-02   7.45782536e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.27568388e-01  -4.68046702e-02   7.58306263e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.28835821e-01  -4.70605865e-02   7.67694274e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.29784906e-01  -4.72522266e-02   7.74724223e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.30495721e-01  -4.73957509e-02   7.79989315e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.31028140e-01  -4.75032628e-02   7.83933140e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.31426924e-01  -4.75837886e-02   7.86887016e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.31725633e-01  -4.76440974e-02   7.89099466e-03  -2.00000000e+00
    0.00000000e+00]
 [ -2.31949329e-01  -4.76892665e-02   7.90756661e-03  -2.00000000e+00
    0.00000000e+00]]

STEP 1:
[[-0.23194933 -0.04768927  0.00790757 -2.          0.        ]
 [-0.23219302 -0.04773847  0.00792562 -2.          0.        ]
 [-0.23231447 -0.047763    0.00793461 -2.          0.        ]
 [-0.23239189 -0.04777863  0.00794035 -2.          0.        ]
 [-0.23244606 -0.04778957  0.00794436 -2.          0.        ]
 [-0.23248947 -0.04779833  0.00794757 -2.          0.        ]
 [-0.23252158 -0.04780482  0.00794995 -2.          0.        ]
 [-0.23254541 -0.04780963  0.00795172 -2.          0.        ]
 [-0.23256338 -0.04781325  0.00795305 -2.          0.        ]
 [-0.23257682 -0.04781597  0.00795404 -2.          0.        ]
 [-0.23258689 -0.04781801  0.00795479 -2.          0.        ]
 [-0.23259443 -0.04781953  0.00795535 -2.          0.        ]
 [-0.23260009 -0.04782066  0.00795577 -2.          0.        ]
 [-0.23260432 -0.04782152  0.00795608 -2.          0.        ]
 [-0.23260748 -0.04782216  0.00795632 -2.          0.        ]
 [-0.23260987 -0.04782264  0.00795649 -2.          0.        ]
 [-0.23261163 -0.047823    0.00795662 -2.          0.        ]
 [-0.23261297 -0.04782327  0.00795672 -2.          0.        ]
 [-0.23261395 -0.04782347  0.0079568  -2.          0.        ]
 [-0.2326147  -0.04782362  0.00795685 -2.          0.        ]]

STEP 2:
[[-0.2326147  -0.04782362  0.00795685 -2.          0.        ]
 [-0.2326155  -0.04782378  0.00795691 -2.          0.        ]
 [-0.2326159  -0.04782386  0.00795694 -2.          0.        ]
 [-0.23261619 -0.04782391  0.00795696 -2.          0.        ]
 [-0.23261636 -0.04782395  0.00795697 -2.          0.        ]
 [-0.23261651 -0.04782398  0.00795698 -2.          0.        ]
 [-0.2326166  -0.047824    0.00795699 -2.          0.        ]
 [-0.23261669 -0.04782402  0.007957   -2.          0.        ]
 [-0.23261675 -0.04782403  0.007957   -2.          0.        ]
 [-0.23261678 -0.04782404  0.00795701 -2.          0.        ]
 [-0.23261683 -0.04782405  0.00795701 -2.          0.        ]
 [-0.23261684 -0.04782405  0.00795701 -2.          0.        ]
 [-0.23261687 -0.04782405  0.00795701 -2.          0.        ]
 [-0.23261687 -0.04782405  0.00795701 -2.          0.        ]
 [-0.23261689 -0.04782406  0.00795701 -2.          0.        ]
 [-0.2326169  -0.04782406  0.00795701 -2.          0.        ]
 [-0.2326169  -0.04782406  0.00795701 -2.          0.        ]
 [-0.23261692 -0.04782406  0.00795701 -2.          0.        ]
 [-0.23261692 -0.04782406  0.00795701 -2.          0.        ]
 [-0.23261693 -0.04782406  0.00795701 -2.          0.        ]]

STEP 3:
[[-0.23261693 -0.04782406  0.00795701 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]]

STEP 4:
[[-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]
 [-0.23261693 -0.04782407  0.00795702 -2.          0.        ]]

