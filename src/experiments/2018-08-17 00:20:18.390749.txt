{'agent': {'T': 1,
           'action_inds': {('pr2', 'gripper'): array([2]),
                           ('pr2', 'pose'): array([0, 1])},
           'conditions': 1,
           'dU': 3,
           'dX': 5,
           'env': RaveGetEnvironment(2),
           'get_hl_plan': <function hl_plan_for_state at 0x7fbda60d8050>,
           'get_plan': <function get_plan at 0x7fbda60d8140>,
           'hist_len': 3,
           'image_channels': 3,
           'image_height': 140,
           'image_width': 140,
           'model': None,
           'num_cans': 1,
           'obs_include': [1,
                           9,
                           6],
           'openrave_bodies': {'can0': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7fbd74060bd0>,
                               'pr2': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7fbd74060f10>},
           'plans': {('grasp', 'can0'): <core.internal_repr.plan.Plan object at 0x7fbd74035f50>,
                     ('putdown', 'can0'): <core.internal_repr.plan.Plan object at 0x7fbd98215fd0>},
           'sensor_dims': {0: 3,
                           1: 5,
                           6: 9,
                           8: 2,
                           9: 4},
           'solver': <__main__.NAMOPolicySolver object at 0x7fbd9d044210>,
           'state_include': [1],
           'state_inds': {('can0', 'pose'): array([3, 4]),
                          ('can0_end_target', 'value'): array([12, 13]),
                          ('can0_init_target', 'value'): array([10, 11]),
                          ('grasp0', 'value'): array([5, 6]),
                          ('middle_target', 'value'): array([14, 15]),
                          ('pdp_target0', 'gripper'): array([21]),
                          ('pdp_target0', 'value'): array([19, 20]),
                          ('pr2', 'gripper'): array([2]),
                          ('pr2', 'pose'): array([0, 1]),
                          ('robot_end_pose', 'gripper'): array([18]),
                          ('robot_end_pose', 'value'): array([16, 17]),
                          ('robot_init_pose', 'gripper'): array([9]),
                          ('robot_init_pose', 'value'): array([7, 8])},
           'stochastic_conditions': True,
           'symbolic_bound': 5,
           'target_dim': 4,
           'target_inds': {('can0_end_target', 'value'): array([0, 1]),
                           ('middle_target', 'value'): array([2, 3])},
           'targets': [{'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]}],
           'task_breaks': [],
           'task_durations': {'grasp': 20,
                              'putdown': 20},
           'task_encoding': {'grasp': array([ 1.,  0.]),
                             'putdown': array([ 0.,  1.])},
           'task_list': ['grasp',
                         'putdown'],
           'type': <class 'policy_hooks.namo.namo_agent.NAMOSortingAgent'>,
           'viewer': None,
           'x0': [array([ 0.,  0.,  0.,  2.,  1.,  0.,  0.,  0.,  0.,  0.,  2.,  1.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])]},
 'algorithm': {'grasp': {'T': 20,
                         'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7fbd98215ed0>,
                         'conditions': 1,
                         'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                'wp_final_multiplier': 1.0}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                            {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                'wp': array([[ 1.,  1.,  1.]])}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                  'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                  'weights': [1.0,
                                              1.0]},
                         'fit_dynamics': False,
                         'init_traj_distr': {'T': 20,
                                             'dQ': 3,
                                             'dU': 3,
                                             'dX': 5,
                                             'dt': 1.0,
                                             'init_var': 0.001,
                                             'pos_gains': 0.01,
                                             'type': <function init_pd at 0x7fbda60ed320>,
                                             'x0': [array([ 0.,  0.,  0.,  2.,  1.])]},
                         'iterations': 10,
                         'kl_step': 0.1,
                         'max_ent_traj': 0.0,
                         'max_step_mult': 3.0,
                         'min_step_mult': 0.5,
                         'opt_wt': 10000.0,
                         'policy_opt': {'batch_size': 3000,
                                        'distilled_network_model': <function tf_network at 0x7fbdbfd499b0>,
                                        'distilled_network_params': {'dim_hidden': [300,
                                                                                    300],
                                                                     'image_channels': 3,
                                                                     'image_height': 140,
                                                                     'image_width': 140,
                                                                     'n_layers': 2,
                                                                     'num_filters': [5,
                                                                                     10],
                                                                     'obs_image_data': [],
                                                                     'obs_include': [1,
                                                                                     9,
                                                                                     6],
                                                                     'sensor_dims': {0: 3,
                                                                                     1: 5,
                                                                                     6: 9,
                                                                                     8: 2,
                                                                                     9: 4}},
                                        'gpu_fraction': 0.2,
                                        'image_channels': 3,
                                        'image_height': 140,
                                        'image_width': 140,
                                        'iterations': 1000,
                                        'lr': 0.001,
                                        'network_model': <function tf_network at 0x7fbdbfd499b0>,
                                        'network_params': {'dim_hidden': [20],
                                                           'image_channels': 3,
                                                           'image_height': 140,
                                                           'image_width': 140,
                                                           'n_layers': 1,
                                                           'num_filters': [5,
                                                                           10],
                                                           'obs_image_data': [],
                                                           'obs_include': [1,
                                                                           9,
                                                                           6],
                                                           'sensor_dims': {0: 3,
                                                                           1: 5,
                                                                           6: 9,
                                                                           8: 2,
                                                                           9: 4}},
                                        'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7fbd74060d10>,
                                        'primitive_network_model': <function tf_classification_network at 0x7fbda60fdc08>,
                                        'task_list': ['grasp',
                                                      'putdown'],
                                        'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                        'weight_decay': 0.1,
                                        'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                         'policy_prior': {'max_clusters': 20,
                                          'max_samples': 20,
                                          'min_samples_per_cluster': 40,
                                          'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                         'policy_sample_mode': 'add',
                         'policy_transfer_coeff': 0.005,
                         'sample_on_policy': True,
                         'sample_ts_prob': 0.2,
                         'stochastic_conditions': True,
                         'traj_opt': {'covariance_damping': 0.01,
                                      'kl_threshold': 0.001,
                                      'min_temperature': 0.01,
                                      'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                         'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>},
               'putdown': {'T': 20,
                           'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7fbd98215ed0>,
                           'conditions': 1,
                           'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                  'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                  'wp_final_multiplier': 1.0}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                              {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                  'wp': array([[ 1.,  1.,  1.]])}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                    'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                    'weights': [1.0,
                                                1.0]},
                           'fit_dynamics': False,
                           'init_traj_distr': {'T': 20,
                                               'dQ': 3,
                                               'dU': 3,
                                               'dX': 5,
                                               'dt': 1.0,
                                               'init_var': 0.001,
                                               'pos_gains': 0.01,
                                               'type': <function init_pd at 0x7fbda60ed320>,
                                               'x0': [array([ 0.,  0.,  0.,  2.,  1.])]},
                           'iterations': 10,
                           'kl_step': 0.1,
                           'max_ent_traj': 0.0,
                           'max_step_mult': 3.0,
                           'min_step_mult': 0.5,
                           'opt_wt': 10000.0,
                           'policy_opt': {'batch_size': 3000,
                                          'distilled_network_model': <function tf_network at 0x7fbdbfd499b0>,
                                          'distilled_network_params': {'dim_hidden': [300,
                                                                                      300],
                                                                       'image_channels': 3,
                                                                       'image_height': 140,
                                                                       'image_width': 140,
                                                                       'n_layers': 2,
                                                                       'num_filters': [5,
                                                                                       10],
                                                                       'obs_image_data': [],
                                                                       'obs_include': [1,
                                                                                       9,
                                                                                       6],
                                                                       'sensor_dims': {0: 3,
                                                                                       1: 5,
                                                                                       6: 9,
                                                                                       8: 2,
                                                                                       9: 4}},
                                          'gpu_fraction': 0.2,
                                          'image_channels': 3,
                                          'image_height': 140,
                                          'image_width': 140,
                                          'iterations': 1000,
                                          'lr': 0.001,
                                          'network_model': <function tf_network at 0x7fbdbfd499b0>,
                                          'network_params': {'dim_hidden': [20],
                                                             'image_channels': 3,
                                                             'image_height': 140,
                                                             'image_width': 140,
                                                             'n_layers': 1,
                                                             'num_filters': [5,
                                                                             10],
                                                             'obs_image_data': [],
                                                             'obs_include': [1,
                                                                             9,
                                                                             6],
                                                             'sensor_dims': {0: 3,
                                                                             1: 5,
                                                                             6: 9,
                                                                             8: 2,
                                                                             9: 4}},
                                          'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7fbd74060d10>,
                                          'primitive_network_model': <function tf_classification_network at 0x7fbda60fdc08>,
                                          'task_list': ['grasp',
                                                        'putdown'],
                                          'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                          'weight_decay': 0.1,
                                          'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                           'policy_prior': {'max_clusters': 20,
                                            'max_samples': 20,
                                            'min_samples_per_cluster': 40,
                                            'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                           'policy_sample_mode': 'add',
                           'policy_transfer_coeff': 0.005,
                           'sample_on_policy': True,
                           'sample_ts_prob': 0.2,
                           'stochastic_conditions': True,
                           'traj_opt': {'covariance_damping': 0.01,
                                        'kl_threshold': 0.001,
                                        'min_temperature': 0.01,
                                        'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                           'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>}},
 'batch_size': 3000,
 'common': {'conditions': 1,
            'data_files_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/data_files/',
            'experiment_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/',
            'experiment_name': 'my_experiment_08-17-18_00-19',
            'log_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/log.txt',
            'target_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/target.npz'},
 'cost_f': <function cost_f at 0x7fbda60d8488>,
 'dQ': 3,
 'dim_hidden': [20],
 'goal_f': <function goal_f at 0x7fbda60d8500>,
 'gui_on': False,
 'hist_len': 3,
 'iterations': 10,
 'lr': 0.001,
 'max_tree_depth': 3,
 'mode': 'position',
 'n_layers': 1,
 'num_conds': 1,
 'num_distilled_samples': 0,
 'num_rollouts': 8,
 'num_samples': 15,
 'opt_wt': 10000.0,
 'plan_f': <function <lambda> at 0x7fbd7c2dd7d0>,
 'policy_coeff': 1.0,
 'sample_on_policy': True,
 'stochastic_conditions': True,
 'take_optimal_sample': True,
 'target_f': <function get_next_target at 0x7fbda60d8398>,
 'task_durations': {'grasp': 20,
                    'putdown': 20},
 'task_list': ['grasp',
               'putdown'],
 'train_iterations': 1000,
 'verbose_policy_trials': 1,
 'verbose_trials': 1,
 'weight_decay': 0.1}


<class 'gps.algorithm.cost.cost_sum.CostSum'>

STEP 0:
[[  0.00000000e+00   0.00000000e+00   0.00000000e+00   2.00000000e+00
    1.00000000e+00]
 [  1.27480119e-01   3.81316058e-02  -2.99096620e-03   2.00000000e+00
    1.00000000e+00]
 [  1.27480119e-01   3.81316058e-02  -2.99096620e-03   2.00000000e+00
    1.00000000e+00]
 [  1.33234933e-01   3.98539975e-02  -2.03637080e-03   2.00000000e+00
    1.00000000e+00]
 [  1.50390968e-01   4.49887402e-02   8.09437595e-04   2.00000000e+00
    1.00000000e+00]
 [  1.59067631e-01   4.75856364e-02   2.24870443e-03   2.00000000e+00
    1.00000000e+00]
 [  1.65874511e-01   4.96229082e-02   3.37781617e-03   2.00000000e+00
    1.00000000e+00]
 [  1.71874285e-01   5.14186211e-02   4.37304517e-03   2.00000000e+00
    1.00000000e+00]
 [  1.76403299e-01   5.27741387e-02   5.12430863e-03   2.00000000e+00
    1.00000000e+00]
 [  1.79959208e-01   5.38384058e-02   5.71415341e-03   2.00000000e+00
    1.00000000e+00]
 [  1.82793826e-01   5.46867996e-02   6.18435582e-03   2.00000000e+00
    1.00000000e+00]
 [  1.85020819e-01   5.53533286e-02   6.55376585e-03   2.00000000e+00
    1.00000000e+00]
 [  1.86775491e-01   5.58784977e-02   6.84482651e-03   2.00000000e+00
    1.00000000e+00]
 [  1.88160509e-01   5.62930256e-02   7.07456982e-03   2.00000000e+00
    1.00000000e+00]
 [  1.89252287e-01   5.66197932e-02   7.25566922e-03   2.00000000e+00
    1.00000000e+00]
 [  1.90113068e-01   5.68774231e-02   7.39845494e-03   2.00000000e+00
    1.00000000e+00]
 [  1.90791845e-01   5.70805818e-02   7.51104997e-03   2.00000000e+00
    1.00000000e+00]
 [  1.91327065e-01   5.72407693e-02   7.59983109e-03   2.00000000e+00
    1.00000000e+00]
 [  1.91749066e-01   5.73670715e-02   7.66983395e-03   2.00000000e+00
    1.00000000e+00]
 [  1.92081839e-01   5.74666634e-02   7.72502972e-03   2.00000000e+00
    1.00000000e+00]]

STEP 1:
[[ 0.19208184  0.05746666  0.00772503  2.          1.        ]
 [ 0.19247824  0.05758531  0.00779078  2.          1.        ]
 [ 0.19268051  0.05764585  0.00782434  2.          1.        ]
 [ 0.19281787  0.05768695  0.00784712  2.          1.        ]
 [ 0.19292101  0.05771783  0.00786423  2.          1.        ]
 [ 0.19300684  0.05774352  0.00787847  2.          1.        ]
 [ 0.19307372  0.05776354  0.00788956  2.          1.        ]
 [ 0.19312614  0.05777922  0.00789826  2.          1.        ]
 [ 0.19316769  0.05779165  0.00790515  2.          1.        ]
 [ 0.19320041  0.05780145  0.00791058  2.          1.        ]
 [ 0.19322619  0.05780917  0.00791485  2.          1.        ]
 [ 0.19324654  0.05781526  0.00791823  2.          1.        ]
 [ 0.19326258  0.05782006  0.00792089  2.          1.        ]
 [ 0.19327521  0.05782384  0.00792299  2.          1.        ]
 [ 0.19328518  0.05782682  0.00792464  2.          1.        ]
 [ 0.19329306  0.05782918  0.00792594  2.          1.        ]
 [ 0.19329925  0.05783103  0.00792697  2.          1.        ]
 [ 0.19330415  0.0578325   0.00792778  2.          1.        ]
 [ 0.193308    0.05783365  0.00792842  2.          1.        ]
 [ 0.19331104  0.05783456  0.00792893  2.          1.        ]]

STEP 2:
[[ 0.19331104  0.05783456  0.00792893  2.          1.        ]
 [ 0.19331466  0.05783565  0.00792953  2.          1.        ]
 [ 0.19331649  0.0578362   0.00792983  2.          1.        ]
 [ 0.19331776  0.05783657  0.00793004  2.          1.        ]
 [ 0.19331869  0.05783686  0.0079302   2.          1.        ]
 [ 0.19331947  0.05783709  0.00793033  2.          1.        ]
 [ 0.1933201   0.05783727  0.00793043  2.          1.        ]
 [ 0.19332057  0.05783742  0.00793051  2.          1.        ]
 [ 0.19332096  0.05783753  0.00793057  2.          1.        ]
 [ 0.19332126  0.05783762  0.00793062  2.          1.        ]
 [ 0.1933215   0.05783769  0.00793066  2.          1.        ]
 [ 0.19332168  0.05783775  0.00793069  2.          1.        ]
 [ 0.19332182  0.05783779  0.00793072  2.          1.        ]
 [ 0.19332194  0.05783782  0.00793074  2.          1.        ]
 [ 0.19332203  0.05783785  0.00793075  2.          1.        ]
 [ 0.19332209  0.05783787  0.00793076  2.          1.        ]
 [ 0.19332215  0.05783789  0.00793077  2.          1.        ]
 [ 0.1933222   0.0578379   0.00793078  2.          1.        ]
 [ 0.19332224  0.05783791  0.00793079  2.          1.        ]
 [ 0.19332227  0.05783792  0.00793079  2.          1.        ]]

STEP 3:
[[ 0.19332227  0.05783792  0.00793079  2.          1.        ]
 [ 0.1933223   0.05783793  0.00793079  2.          1.        ]
 [ 0.19332232  0.05783794  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783794  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783794  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783794  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]]

STEP 4:
[[ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]
 [ 0.19332233  0.05783795  0.0079308   2.          1.        ]]

