{'agent': {'T': 1,
           'action_inds': {('pr2', 'gripper'): array([2]),
                           ('pr2', 'pose'): array([0, 1])},
           'conditions': 1,
           'dU': 3,
           'dX': 5,
           'env': RaveGetEnvironment(8),
           'get_hl_plan': <function hl_plan_for_state at 0x7fbda60d8050>,
           'get_plan': <function get_plan at 0x7fbda60d8140>,
           'hist_len': 3,
           'image_channels': 3,
           'image_height': 140,
           'image_width': 140,
           'model': None,
           'num_cans': 1,
           'obs_include': [1,
                           9,
                           6],
           'openrave_bodies': {'can0': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7fbd7d0368d0>,
                               'pr2': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7fbd7d036610>},
           'plans': {('grasp', 'can0'): <core.internal_repr.plan.Plan object at 0x7fbd7d29d190>,
                     ('putdown', 'can0'): <core.internal_repr.plan.Plan object at 0x7fbd7d036c50>},
           'sensor_dims': {0: 3,
                           1: 5,
                           6: 9,
                           8: 2,
                           9: 4},
           'solver': <__main__.NAMOPolicySolver object at 0x7fbd7d3c33d0>,
           'state_include': [1],
           'state_inds': {('can0', 'pose'): array([3, 4]),
                          ('can0_end_target', 'value'): array([12, 13]),
                          ('can0_init_target', 'value'): array([10, 11]),
                          ('grasp0', 'value'): array([5, 6]),
                          ('middle_target', 'value'): array([14, 15]),
                          ('pdp_target0', 'gripper'): array([21]),
                          ('pdp_target0', 'value'): array([19, 20]),
                          ('pr2', 'gripper'): array([2]),
                          ('pr2', 'pose'): array([0, 1]),
                          ('robot_end_pose', 'gripper'): array([18]),
                          ('robot_end_pose', 'value'): array([16, 17]),
                          ('robot_init_pose', 'gripper'): array([9]),
                          ('robot_init_pose', 'value'): array([7, 8])},
           'stochastic_conditions': True,
           'symbolic_bound': 5,
           'target_dim': 4,
           'target_inds': {('can0_end_target', 'value'): array([0, 1]),
                           ('middle_target', 'value'): array([2, 3])},
           'targets': [{'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]}],
           'task_breaks': [],
           'task_durations': {'grasp': 20,
                              'putdown': 20},
           'task_encoding': {'grasp': array([ 1.,  0.]),
                             'putdown': array([ 0.,  1.])},
           'task_list': ['grasp',
                         'putdown'],
           'type': <class 'policy_hooks.namo.namo_agent.NAMOSortingAgent'>,
           'viewer': None,
           'x0': [array([ 0.,  0.,  0.,  0.,  2.,  0.,  0.,  0.,  0.,  0.,  0.,  2.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])]},
 'algorithm': {'grasp': {'T': 20,
                         'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7fbd1f5d0d90>,
                         'conditions': 1,
                         'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                'wp_final_multiplier': 1.0}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                            {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                'wp': array([[ 1.,  1.,  1.]])}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                  'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                  'weights': [1.0,
                                              1.0]},
                         'fit_dynamics': False,
                         'init_traj_distr': {'T': 20,
                                             'dQ': 3,
                                             'dU': 3,
                                             'dX': 5,
                                             'dt': 1.0,
                                             'init_var': 1.0,
                                             'pos_gains': 0.01,
                                             'type': <function init_pd at 0x7fbda60ed320>,
                                             'x0': [array([ 0.,  0.,  0.,  0.,  2.])]},
                         'iterations': 10,
                         'kl_step': 0.1,
                         'max_ent_traj': 0.0,
                         'max_step_mult': 3.0,
                         'min_step_mult': 0.5,
                         'opt_wt': 10000.0,
                         'policy_opt': {'batch_size': 3000,
                                        'distilled_network_model': <function tf_network at 0x7fbdbfd499b0>,
                                        'distilled_network_params': {'dim_hidden': [300,
                                                                                    300],
                                                                     'image_channels': 3,
                                                                     'image_height': 140,
                                                                     'image_width': 140,
                                                                     'n_layers': 2,
                                                                     'num_filters': [5,
                                                                                     10],
                                                                     'obs_image_data': [],
                                                                     'obs_include': [1,
                                                                                     9,
                                                                                     6],
                                                                     'sensor_dims': {0: 3,
                                                                                     1: 5,
                                                                                     6: 9,
                                                                                     8: 2,
                                                                                     9: 4}},
                                        'gpu_fraction': 0.2,
                                        'image_channels': 3,
                                        'image_height': 140,
                                        'image_width': 140,
                                        'iterations': 1000,
                                        'lr': 0.001,
                                        'network_model': <function tf_network at 0x7fbdbfd499b0>,
                                        'network_params': {'dim_hidden': [20],
                                                           'image_channels': 3,
                                                           'image_height': 140,
                                                           'image_width': 140,
                                                           'n_layers': 1,
                                                           'num_filters': [5,
                                                                           10],
                                                           'obs_image_data': [],
                                                           'obs_include': [1,
                                                                           9,
                                                                           6],
                                                           'sensor_dims': {0: 3,
                                                                           1: 5,
                                                                           6: 9,
                                                                           8: 2,
                                                                           9: 4}},
                                        'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7fbd7cde7dd0>,
                                        'primitive_network_model': <function tf_classification_network at 0x7fbda60fdc08>,
                                        'task_list': ['grasp',
                                                      'putdown'],
                                        'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                        'weight_decay': 0.1,
                                        'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                         'policy_prior': {'max_clusters': 20,
                                          'max_samples': 20,
                                          'min_samples_per_cluster': 40,
                                          'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                         'policy_sample_mode': 'add',
                         'policy_transfer_coeff': 0.005,
                         'sample_on_policy': True,
                         'sample_ts_prob': 0.2,
                         'stochastic_conditions': True,
                         'traj_opt': {'covariance_damping': 10,
                                      'kl_threshold': 0.001,
                                      'min_temperature': 0.01,
                                      'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                         'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>},
               'putdown': {'T': 20,
                           'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7fbd1f5d0d90>,
                           'conditions': 1,
                           'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                  'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                  'wp_final_multiplier': 1.0}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                              {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                  'wp': array([[ 1.,  1.,  1.]])}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                    'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                    'weights': [1.0,
                                                1.0]},
                           'fit_dynamics': False,
                           'init_traj_distr': {'T': 20,
                                               'dQ': 3,
                                               'dU': 3,
                                               'dX': 5,
                                               'dt': 1.0,
                                               'init_var': 1.0,
                                               'pos_gains': 0.01,
                                               'type': <function init_pd at 0x7fbda60ed320>,
                                               'x0': [array([ 0.,  0.,  0.,  0.,  2.])]},
                           'iterations': 10,
                           'kl_step': 0.1,
                           'max_ent_traj': 0.0,
                           'max_step_mult': 3.0,
                           'min_step_mult': 0.5,
                           'opt_wt': 10000.0,
                           'policy_opt': {'batch_size': 3000,
                                          'distilled_network_model': <function tf_network at 0x7fbdbfd499b0>,
                                          'distilled_network_params': {'dim_hidden': [300,
                                                                                      300],
                                                                       'image_channels': 3,
                                                                       'image_height': 140,
                                                                       'image_width': 140,
                                                                       'n_layers': 2,
                                                                       'num_filters': [5,
                                                                                       10],
                                                                       'obs_image_data': [],
                                                                       'obs_include': [1,
                                                                                       9,
                                                                                       6],
                                                                       'sensor_dims': {0: 3,
                                                                                       1: 5,
                                                                                       6: 9,
                                                                                       8: 2,
                                                                                       9: 4}},
                                          'gpu_fraction': 0.2,
                                          'image_channels': 3,
                                          'image_height': 140,
                                          'image_width': 140,
                                          'iterations': 1000,
                                          'lr': 0.001,
                                          'network_model': <function tf_network at 0x7fbdbfd499b0>,
                                          'network_params': {'dim_hidden': [20],
                                                             'image_channels': 3,
                                                             'image_height': 140,
                                                             'image_width': 140,
                                                             'n_layers': 1,
                                                             'num_filters': [5,
                                                                             10],
                                                             'obs_image_data': [],
                                                             'obs_include': [1,
                                                                             9,
                                                                             6],
                                                             'sensor_dims': {0: 3,
                                                                             1: 5,
                                                                             6: 9,
                                                                             8: 2,
                                                                             9: 4}},
                                          'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7fbd7cde7dd0>,
                                          'primitive_network_model': <function tf_classification_network at 0x7fbda60fdc08>,
                                          'task_list': ['grasp',
                                                        'putdown'],
                                          'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                          'weight_decay': 0.1,
                                          'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                           'policy_prior': {'max_clusters': 20,
                                            'max_samples': 20,
                                            'min_samples_per_cluster': 40,
                                            'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                           'policy_sample_mode': 'add',
                           'policy_transfer_coeff': 0.005,
                           'sample_on_policy': True,
                           'sample_ts_prob': 0.2,
                           'stochastic_conditions': True,
                           'traj_opt': {'covariance_damping': 10,
                                        'kl_threshold': 0.001,
                                        'min_temperature': 0.01,
                                        'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                           'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>}},
 'batch_size': 3000,
 'common': {'conditions': 1,
            'data_files_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/data_files/',
            'experiment_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/',
            'experiment_name': 'my_experiment_08-17-18_00-19',
            'log_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/log.txt',
            'target_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/target.npz'},
 'cost_f': <function cost_f at 0x7fbda60d8488>,
 'dQ': 3,
 'dim_hidden': [20],
 'goal_f': <function goal_f at 0x7fbda60d8500>,
 'gui_on': False,
 'hist_len': 3,
 'iterations': 10,
 'lr': 0.001,
 'max_tree_depth': 3,
 'mode': 'position',
 'n_layers': 1,
 'num_conds': 1,
 'num_distilled_samples': 0,
 'num_rollouts': 8,
 'num_samples': 15,
 'opt_wt': 10000.0,
 'plan_f': <function <lambda> at 0x7fbd7cdad668>,
 'policy_coeff': 1.0,
 'sample_on_policy': True,
 'stochastic_conditions': True,
 'take_optimal_sample': True,
 'target_f': <function get_next_target at 0x7fbda60d8398>,
 'task_durations': {'grasp': 20,
                    'putdown': 20},
 'task_list': ['grasp',
               'putdown'],
 'train_iterations': 1000,
 'verbose_policy_trials': 1,
 'verbose_trials': 1,
 'weight_decay': 0.1}


<class 'gps.algorithm.cost.cost_sum.CostSum'>

STEP 0:
[[ 0.          0.          0.          0.          2.        ]
 [-0.02244402  0.35983595  0.02559491  0.          2.        ]
 [-0.02243856  0.50275439  0.04348012  0.          2.        ]
 [-0.02252289  0.59797716  0.05540136  0.          2.        ]
 [-0.02261028  0.68278819  0.0660199   0.          2.        ]
 [-0.02263039  0.7390027   0.07305614  0.          2.        ]
 [-0.02264909  0.77857172  0.07800913  0.          2.        ]
 [-0.02266352  0.80762124  0.08164541  0.          2.        ]
 [-0.02267292  0.8282392   0.08422622  0.          2.        ]
 [-0.02267979  0.84294486  0.08606698  0.          2.        ]
 [-0.02268476  0.8534956   0.08738765  0.          2.        ]
 [-0.02268829  0.86103666  0.08833159  0.          2.        ]
 [-0.02269081  0.8664279   0.08900645  0.          2.        ]
 [-0.02269262  0.87028539  0.0894893   0.          2.        ]
 [-0.02269391  0.87304425  0.08983463  0.          2.        ]
 [-0.02269484  0.8750174   0.09008162  0.          2.        ]
 [-0.0226955   0.87642872  0.09025827  0.          2.        ]
 [-0.02269597  0.87743819  0.09038463  0.          2.        ]
 [-0.02269631  0.87816012  0.090475    0.          2.        ]
 [-0.02269655  0.87867641  0.09053963  0.          2.        ]]

STEP 1:
[[-0.02269655  0.87867641  0.09053963  0.          2.        ]
 [-0.02269693  0.87921822  0.09060746  0.          2.        ]
 [-0.02269695  0.87946248  0.09063803  0.          2.        ]
 [-0.02269698  0.87961006  0.09065649  0.          2.        ]
 [-0.02269703  0.87970924  0.09066892  0.          2.        ]
 [-0.02269707  0.87978566  0.09067847  0.          2.        ]
 [-0.02269709  0.87983918  0.09068519  0.          2.        ]
 [-0.02269711  0.87987733  0.09068995  0.          2.        ]
 [-0.02269712  0.87990475  0.09069338  0.          2.        ]
 [-0.02269713  0.8799243   0.09069582  0.          2.        ]
 [-0.02269714  0.87993836  0.09069759  0.          2.        ]
 [-0.02269714  0.87994838  0.09069885  0.          2.        ]
 [-0.02269714  0.87995553  0.09069973  0.          2.        ]
 [-0.02269715  0.87996066  0.09070038  0.          2.        ]
 [-0.02269715  0.87996423  0.09070083  0.          2.        ]
 [-0.02269715  0.87996686  0.09070116  0.          2.        ]
 [-0.02269715  0.87996864  0.0907014   0.          2.        ]
 [-0.02269715  0.87997007  0.09070157  0.          2.        ]
 [-0.02269715  0.87997103  0.09070168  0.          2.        ]
 [-0.02269715  0.87997174  0.09070177  0.          2.        ]]

STEP 2:
[[-0.02269715  0.87997174  0.09070177  0.          2.        ]
 [-0.02269715  0.87997246  0.09070186  0.          2.        ]
 [-0.02269715  0.87997282  0.09070191  0.          2.        ]
 [-0.02269716  0.87997305  0.09070194  0.          2.        ]
 [-0.02269715  0.87997317  0.09070195  0.          2.        ]
 [-0.02269715  0.87997329  0.09070196  0.          2.        ]
 [-0.02269715  0.87997341  0.09070197  0.          2.        ]
 [-0.02269716  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]]

STEP 3:
[[-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]]

STEP 4:
[[-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]
 [-0.02269715  0.87997341  0.09070198  0.          2.        ]]

