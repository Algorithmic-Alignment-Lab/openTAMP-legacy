{'agent': {'T': 1,
           'action_inds': {('pr2', 'gripper'): array([2]),
                           ('pr2', 'pose'): array([0, 1])},
           'conditions': 10,
           'dU': 3,
           'dX': 5,
           'env': RaveGetEnvironment(2),
           'get_hl_plan': <function hl_plan_for_state at 0x7f0579845050>,
           'get_plan': <function get_plan at 0x7f0579845140>,
           'hist_len': 3,
           'image_channels': 3,
           'image_height': 140,
           'image_width': 140,
           'model': None,
           'num_cans': 1,
           'obs_include': [1,
                           9,
                           6],
           'openrave_bodies': {'can0': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7f0550042710>,
                               'pr2': <core.util_classes.openrave_body.OpenRAVEBody object at 0x7f0550042750>},
           'plans': {('grasp', 'can0'): <core.internal_repr.plan.Plan object at 0x7f056929cdd0>,
                     ('putdown', 'can0'): <core.internal_repr.plan.Plan object at 0x7f0550042fd0>},
           'sensor_dims': {0: 3,
                           1: 5,
                           6: 9,
                           8: 2,
                           9: 4},
           'solver': <__main__.NAMOPolicySolver object at 0x7f056935fa50>,
           'state_include': [1],
           'state_inds': {('can0', 'pose'): array([3, 4]),
                          ('can0_end_target', 'value'): array([12, 13]),
                          ('can0_init_target', 'value'): array([10, 11]),
                          ('grasp0', 'value'): array([5, 6]),
                          ('middle_target', 'value'): array([14, 15]),
                          ('pdp_target0', 'gripper'): array([21]),
                          ('pdp_target0', 'value'): array([19, 20]),
                          ('pr2', 'gripper'): array([2]),
                          ('pr2', 'pose'): array([0, 1]),
                          ('robot_end_pose', 'gripper'): array([18]),
                          ('robot_end_pose', 'value'): array([16, 17]),
                          ('robot_init_pose', 'gripper'): array([9]),
                          ('robot_init_pose', 'value'): array([7, 8])},
           'stochastic_conditions': True,
           'symbolic_bound': 5,
           'target_dim': 4,
           'target_inds': {('can0_end_target', 'value'): array([0, 1]),
                           ('middle_target', 'value'): array([2, 3])},
           'targets': [{'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]},
                       {'can0_end_target': [0.0,
                                            6.0],
                        'middle_target': [0.0,
                                          0.0]}],
           'task_breaks': [],
           'task_durations': {'grasp': 20,
                              'putdown': 20},
           'task_encoding': {'grasp': array([ 1.,  0.]),
                             'putdown': array([ 0.,  1.])},
           'task_list': ['grasp',
                         'putdown'],
           'type': <class 'policy_hooks.namo.namo_agent.NAMOSortingAgent'>,
           'viewer': None,
           'x0': [array([ 0.,  0.,  0., -2., -1.,  0.,  0.,  0.,  0.,  0., -2., -1.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0.,  2.,  2.,  0.,  0.,  0.,  0.,  0.,  2.,  2.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0. ,  0. ,  0. ,  0. ,  4.5,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,
        4.5,  0. ,  6. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]),
                  array([ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0.,  1.,  2.,  0.,  0.,  0.,  0.,  0.,  1.,  2.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0., -2.,  1.,  0.,  0.,  0.,  0.,  0., -2.,  1.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0., -3.,  2.,  0.,  0.,  0.,  0.,  0., -3.,  2.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
                  array([ 0.,  0.,  0.,  2.,  2.,  0.,  0.,  0.,  0.,  0.,  2.,  2.,  0.,
        6.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])]},
 'algorithm': {'grasp': {'T': 20,
                         'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7f0569369350>,
                         'conditions': 10,
                         'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                'wp_final_multiplier': 1.0}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                            {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                'wp': array([[ 1.,  1.,  1.]])}},
                                             'ramp_option': 1,
                                             'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                  'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                  'weights': [1.0,
                                              1.0]},
                         'fit_dynamics': False,
                         'init_traj_distr': {'T': 20,
                                             'dQ': 3,
                                             'dU': 3,
                                             'dX': 5,
                                             'dt': 1.0,
                                             'init_var': 0.001,
                                             'pos_gains': 0.01,
                                             'type': <function init_pd at 0x7f057985a320>,
                                             'x0': [array([ 0.,  0.,  0., -2., -1.]),
                                                    array([ 0.,  0.,  0.,  2.,  2.]),
                                                    array([ 0.,  0.,  0., -1.,  1.]),
                                                    array([ 0.,  0.,  0.,  1., -1.]),
                                                    array([ 0. ,  0. ,  0. ,  0. ,  4.5]),
                                                    array([ 0.,  0.,  0., -1.,  0.]),
                                                    array([ 0.,  0.,  0.,  1.,  2.]),
                                                    array([ 0.,  0.,  0., -2.,  1.]),
                                                    array([ 0.,  0.,  0., -3.,  2.]),
                                                    array([ 0.,  0.,  0.,  2.,  2.])]},
                         'iterations': 10,
                         'kl_step': 1.0,
                         'max_ent_traj': 0.0,
                         'max_step_mult': 3.0,
                         'min_step_mult': 0.5,
                         'opt_wt': 1000.0,
                         'policy_opt': {'batch_size': 3000,
                                        'distilled_network_model': <function tf_network at 0x7f05934fa9b0>,
                                        'distilled_network_params': {'dim_hidden': [300,
                                                                                    300],
                                                                     'image_channels': 3,
                                                                     'image_height': 140,
                                                                     'image_width': 140,
                                                                     'n_layers': 2,
                                                                     'num_filters': [5,
                                                                                     10],
                                                                     'obs_image_data': [],
                                                                     'obs_include': [1,
                                                                                     9,
                                                                                     6],
                                                                     'sensor_dims': {0: 3,
                                                                                     1: 5,
                                                                                     6: 9,
                                                                                     8: 2,
                                                                                     9: 4}},
                                        'gpu_fraction': 0.2,
                                        'image_channels': 3,
                                        'image_height': 140,
                                        'image_width': 140,
                                        'iterations': 5000,
                                        'lr': 0.001,
                                        'network_model': <function tf_network at 0x7f05934fa9b0>,
                                        'network_params': {'dim_hidden': [100],
                                                           'image_channels': 3,
                                                           'image_height': 140,
                                                           'image_width': 140,
                                                           'n_layers': 1,
                                                           'num_filters': [5,
                                                                           10],
                                                           'obs_image_data': [],
                                                           'obs_include': [1,
                                                                           9,
                                                                           6],
                                                           'sensor_dims': {0: 3,
                                                                           1: 5,
                                                                           6: 9,
                                                                           8: 2,
                                                                           9: 4}},
                                        'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7f056929c890>,
                                        'primitive_network_model': <function tf_classification_network at 0x7f057986ac08>,
                                        'task_list': ['grasp',
                                                      'putdown'],
                                        'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                        'weight_decay': 0.1,
                                        'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                         'policy_prior': {'max_clusters': 20,
                                          'max_samples': 20,
                                          'min_samples_per_cluster': 40,
                                          'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                         'policy_sample_mode': 'add',
                         'policy_transfer_coeff': 0.005,
                         'sample_on_policy': True,
                         'sample_ts_prob': 0.2,
                         'stochastic_conditions': True,
                         'traj_opt': {'covariance_damping': 0.01,
                                      'kl_threshold': 0.001,
                                      'min_temperature': 0.01,
                                      'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                         'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>},
               'putdown': {'T': 20,
                           'agent': <policy_hooks.namo.namo_agent.NAMOSortingAgent object at 0x7f0569369350>,
                           'conditions': 10,
                           'cost': {'costs': [{'data_types': {1: {'target_state': array([[ 0.,  0.,  0.,  0.,  0.]]),
                                                                  'wp': array([ 1.,  1.,  1.,  1.,  1.]),
                                                                  'wp_final_multiplier': 1.0}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.state_traj_cost.StateTrajCost'>},
                                              {'data_types': {0: {'target_state': array([[ 0.,  0.,  0.]]),
                                                                  'wp': array([[ 1.,  1.,  1.]])}},
                                               'ramp_option': 1,
                                               'type': <class 'policy_hooks.action_traj_cost.ActionTrajCost'>}],
                                    'type': <class 'gps.algorithm.cost.cost_sum.CostSum'>,
                                    'weights': [1.0,
                                                1.0]},
                           'fit_dynamics': False,
                           'init_traj_distr': {'T': 20,
                                               'dQ': 3,
                                               'dU': 3,
                                               'dX': 5,
                                               'dt': 1.0,
                                               'init_var': 0.001,
                                               'pos_gains': 0.01,
                                               'type': <function init_pd at 0x7f057985a320>,
                                               'x0': [array([ 0.,  0.,  0., -2., -1.]),
                                                      array([ 0.,  0.,  0.,  2.,  2.]),
                                                      array([ 0.,  0.,  0., -1.,  1.]),
                                                      array([ 0.,  0.,  0.,  1., -1.]),
                                                      array([ 0. ,  0. ,  0. ,  0. ,  4.5]),
                                                      array([ 0.,  0.,  0., -1.,  0.]),
                                                      array([ 0.,  0.,  0.,  1.,  2.]),
                                                      array([ 0.,  0.,  0., -2.,  1.]),
                                                      array([ 0.,  0.,  0., -3.,  2.]),
                                                      array([ 0.,  0.,  0.,  2.,  2.])]},
                           'iterations': 10,
                           'kl_step': 1.0,
                           'max_ent_traj': 0.0,
                           'max_step_mult': 3.0,
                           'min_step_mult': 0.5,
                           'opt_wt': 1000.0,
                           'policy_opt': {'batch_size': 3000,
                                          'distilled_network_model': <function tf_network at 0x7f05934fa9b0>,
                                          'distilled_network_params': {'dim_hidden': [300,
                                                                                      300],
                                                                       'image_channels': 3,
                                                                       'image_height': 140,
                                                                       'image_width': 140,
                                                                       'n_layers': 2,
                                                                       'num_filters': [5,
                                                                                       10],
                                                                       'obs_image_data': [],
                                                                       'obs_include': [1,
                                                                                       9,
                                                                                       6],
                                                                       'sensor_dims': {0: 3,
                                                                                       1: 5,
                                                                                       6: 9,
                                                                                       8: 2,
                                                                                       9: 4}},
                                          'gpu_fraction': 0.2,
                                          'image_channels': 3,
                                          'image_height': 140,
                                          'image_width': 140,
                                          'iterations': 5000,
                                          'lr': 0.001,
                                          'network_model': <function tf_network at 0x7f05934fa9b0>,
                                          'network_params': {'dim_hidden': [100],
                                                             'image_channels': 3,
                                                             'image_height': 140,
                                                             'image_width': 140,
                                                             'n_layers': 1,
                                                             'num_filters': [5,
                                                                             10],
                                                             'obs_image_data': [],
                                                             'obs_include': [1,
                                                                             9,
                                                                             6],
                                                             'sensor_dims': {0: 3,
                                                                             1: 5,
                                                                             6: 9,
                                                                             8: 2,
                                                                             9: 4}},
                                          'prev': <policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf object at 0x7f056929c890>,
                                          'primitive_network_model': <function tf_classification_network at 0x7f057986ac08>,
                                          'task_list': ['grasp',
                                                        'putdown'],
                                          'type': <class 'policy_hooks.multi_head_policy_opt_tf.MultiHeadPolicyOptTf'>,
                                          'weight_decay': 0.1,
                                          'weights_file_prefix': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks//experimentspolicy'},
                           'policy_prior': {'max_clusters': 20,
                                            'max_samples': 20,
                                            'min_samples_per_cluster': 40,
                                            'type': <class 'policy_hooks.policy_prior_gmm.PolicyPriorGMM'>},
                           'policy_sample_mode': 'add',
                           'policy_transfer_coeff': 0.005,
                           'sample_on_policy': True,
                           'sample_ts_prob': 0.2,
                           'stochastic_conditions': True,
                           'traj_opt': {'covariance_damping': 0.01,
                                        'kl_threshold': 0.001,
                                        'min_temperature': 0.01,
                                        'type': <class 'policy_hooks.traj_opt_pi2.TrajOptPI2'>},
                           'type': <class 'policy_hooks.algorithm_pigps.AlgorithmPIGPS'>}},
 'batch_size': 3000,
 'common': {'conditions': 10,
            'data_files_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/data_files/',
            'experiment_dir': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/',
            'experiment_name': 'my_experiment_08-17-18_02-32',
            'log_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/log.txt',
            'target_filename': '/home/michaelmcdonald/dependencies/tampy/src/policy_hooks/experiments/target.npz'},
 'cost_f': <function cost_f at 0x7f0579845488>,
 'dQ': 3,
 'dim_hidden': [100],
 'goal_f': <function goal_f at 0x7f0579845500>,
 'gui_on': False,
 'hist_len': 3,
 'iterations': 10,
 'lr': 0.001,
 'max_tree_depth': 3,
 'mode': 'position',
 'n_layers': 1,
 'num_conds': 10,
 'num_distilled_samples': 0,
 'num_rollouts': 8,
 'num_samples': 15,
 'opt_wt': 1000.0,
 'plan_f': <function <lambda> at 0x7f055030ab90>,
 'policy_coeff': 1.0,
 'sample_on_policy': True,
 'stochastic_conditions': True,
 'take_optimal_sample': True,
 'target_f': <function get_next_target at 0x7f0579845398>,
 'task_durations': {'grasp': 20,
                    'putdown': 20},
 'task_list': ['grasp',
               'putdown'],
 'train_iterations': 5000,
 'verbose_policy_trials': 1,
 'verbose_trials': 1,
 'weight_decay': 0.1}


<class 'gps.algorithm.cost.cost_sum.CostSum'>

STEP 0:
[[ 0.          0.          0.         -2.         -1.        ]
 [-0.03699165 -0.05172331  0.00834846 -2.         -1.        ]
 [-0.05207117 -0.05609992  0.01005322 -2.         -1.        ]
 [-0.061318   -0.05878055  0.0110959  -2.         -1.        ]
 [-0.07028226 -0.0613803   0.01210755 -2.         -1.        ]
 [-0.07551849 -0.06290166  0.0127008  -2.         -1.        ]
 [-0.07896569 -0.06390322  0.01309135 -2.         -1.        ]
 [-0.08143646 -0.06462108  0.01337128 -2.         -1.        ]
 [-0.08306737 -0.06509494  0.01355606 -2.         -1.        ]
 [-0.08416212 -0.06541301  0.01368009 -2.         -1.        ]
 [-0.08490881 -0.06562996  0.01376469 -2.         -1.        ]
 [-0.08541135 -0.06577597  0.01382162 -2.         -1.        ]
 [-0.08575027 -0.06587444  0.01386002 -2.         -1.        ]
 [-0.08597951 -0.06594104  0.01388599 -2.         -1.        ]
 [-0.08613424 -0.065986    0.01390352 -2.         -1.        ]
 [-0.0862387  -0.06601635  0.01391536 -2.         -1.        ]
 [-0.08630925 -0.06603685  0.01392335 -2.         -1.        ]
 [-0.0863569  -0.06605069  0.01392875 -2.         -1.        ]
 [-0.08638907 -0.06606004  0.01393239 -2.         -1.        ]
 [-0.0864108  -0.06606635  0.01393485 -2.         -1.        ]]

STEP 1:
[[-0.0864108  -0.06606635  0.01393485 -2.         -1.        ]
 [-0.08643249 -0.06607266  0.01393731 -2.         -1.        ]
 [-0.08644111 -0.06607516  0.01393829 -2.         -1.        ]
 [-0.08644598 -0.06607657  0.01393884 -2.         -1.        ]
 [-0.08644907 -0.06607747  0.01393919 -2.         -1.        ]
 [-0.08645135 -0.06607813  0.01393945 -2.         -1.        ]
 [-0.08645285 -0.06607857  0.01393962 -2.         -1.        ]
 [-0.08645386 -0.06607886  0.01393973 -2.         -1.        ]
 [-0.08645456 -0.06607907  0.01393981 -2.         -1.        ]
 [-0.08645501 -0.0660792   0.01393986 -2.         -1.        ]
 [-0.08645532 -0.06607929  0.0139399  -2.         -1.        ]
 [-0.08645553 -0.06607935  0.01393992 -2.         -1.        ]
 [-0.08645567 -0.06607939  0.01393994 -2.         -1.        ]
 [-0.08645577 -0.06607942  0.01393995 -2.         -1.        ]
 [-0.08645584 -0.06607944  0.01393996 -2.         -1.        ]
 [-0.08645589 -0.06607945  0.01393996 -2.         -1.        ]
 [-0.08645591 -0.06607946  0.01393997 -2.         -1.        ]
 [-0.08645593 -0.06607946  0.01393997 -2.         -1.        ]
 [-0.08645594 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645595 -0.06607947  0.01393997 -2.         -1.        ]]

STEP 2:
[[-0.08645595 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]]

STEP 3:
[[-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]]

STEP 4:
[[-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]
 [-0.08645596 -0.06607947  0.01393997 -2.         -1.        ]]

