// Generated by gencpp from file tamp_ros/PolicyUpdate.msg
// DO NOT EDIT!


#ifndef TAMP_ROS_MESSAGE_POLICYUPDATE_H
#define TAMP_ROS_MESSAGE_POLICYUPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tamp_ros
{
template <class ContainerAllocator>
struct PolicyUpdate_
{
  typedef PolicyUpdate_<ContainerAllocator> Type;

  PolicyUpdate_()
    : obs()
    , mu()
    , prc()
    , wt()
    , dO(0)
    , dPrimObs(0)
    , dValObs(0)
    , dU(0)
    , n(0)
    , rollout_len(0)  {
    }
  PolicyUpdate_(const ContainerAllocator& _alloc)
    : obs(_alloc)
    , mu(_alloc)
    , prc(_alloc)
    , wt(_alloc)
    , dO(0)
    , dPrimObs(0)
    , dValObs(0)
    , dU(0)
    , n(0)
    , rollout_len(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obs_type;
  _obs_type obs;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _mu_type;
  _mu_type mu;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _prc_type;
  _prc_type prc;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _wt_type;
  _wt_type wt;

   typedef int32_t _dO_type;
  _dO_type dO;

   typedef int32_t _dPrimObs_type;
  _dPrimObs_type dPrimObs;

   typedef int32_t _dValObs_type;
  _dValObs_type dValObs;

   typedef int32_t _dU_type;
  _dU_type dU;

   typedef int32_t _n_type;
  _n_type n;

   typedef int32_t _rollout_len_type;
  _rollout_len_type rollout_len;





  typedef boost::shared_ptr< ::tamp_ros::PolicyUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tamp_ros::PolicyUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct PolicyUpdate_

typedef ::tamp_ros::PolicyUpdate_<std::allocator<void> > PolicyUpdate;

typedef boost::shared_ptr< ::tamp_ros::PolicyUpdate > PolicyUpdatePtr;
typedef boost::shared_ptr< ::tamp_ros::PolicyUpdate const> PolicyUpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tamp_ros::PolicyUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tamp_ros::PolicyUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tamp_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'tamp_ros': ['/home/michaelmcdonald/tampy/src/ros_utils/src/tamp_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tamp_ros::PolicyUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tamp_ros::PolicyUpdate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tamp_ros::PolicyUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tamp_ros::PolicyUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tamp_ros::PolicyUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tamp_ros::PolicyUpdate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tamp_ros::PolicyUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1688550284fb9359a8dfabdfd917a70f";
  }

  static const char* value(const ::tamp_ros::PolicyUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1688550284fb9359ULL;
  static const uint64_t static_value2 = 0xa8dfabdfd917a70fULL;
};

template<class ContainerAllocator>
struct DataType< ::tamp_ros::PolicyUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tamp_ros/PolicyUpdate";
  }

  static const char* value(const ::tamp_ros::PolicyUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tamp_ros::PolicyUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] obs\n\
float32[] mu\n\
float32[] prc\n\
float32[] wt\n\
\n\
int32 dO\n\
int32 dPrimObs\n\
int32 dValObs\n\
int32 dU\n\
int32 n\n\
int32 rollout_len\n\
";
  }

  static const char* value(const ::tamp_ros::PolicyUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tamp_ros::PolicyUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obs);
      stream.next(m.mu);
      stream.next(m.prc);
      stream.next(m.wt);
      stream.next(m.dO);
      stream.next(m.dPrimObs);
      stream.next(m.dValObs);
      stream.next(m.dU);
      stream.next(m.n);
      stream.next(m.rollout_len);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolicyUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tamp_ros::PolicyUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tamp_ros::PolicyUpdate_<ContainerAllocator>& v)
  {
    s << indent << "obs[]" << std::endl;
    for (size_t i = 0; i < v.obs.size(); ++i)
    {
      s << indent << "  obs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obs[i]);
    }
    s << indent << "mu[]" << std::endl;
    for (size_t i = 0; i < v.mu.size(); ++i)
    {
      s << indent << "  mu[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mu[i]);
    }
    s << indent << "prc[]" << std::endl;
    for (size_t i = 0; i < v.prc.size(); ++i)
    {
      s << indent << "  prc[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.prc[i]);
    }
    s << indent << "wt[]" << std::endl;
    for (size_t i = 0; i < v.wt.size(); ++i)
    {
      s << indent << "  wt[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wt[i]);
    }
    s << indent << "dO: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dO);
    s << indent << "dPrimObs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dPrimObs);
    s << indent << "dValObs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dValObs);
    s << indent << "dU: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dU);
    s << indent << "n: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n);
    s << indent << "rollout_len: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rollout_len);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAMP_ROS_MESSAGE_POLICYUPDATE_H
