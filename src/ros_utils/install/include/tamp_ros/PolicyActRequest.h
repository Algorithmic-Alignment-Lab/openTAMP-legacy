// Generated by gencpp from file tamp_ros/PolicyActRequest.msg
// DO NOT EDIT!


#ifndef TAMP_ROS_MESSAGE_POLICYACTREQUEST_H
#define TAMP_ROS_MESSAGE_POLICYACTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tamp_ros
{
template <class ContainerAllocator>
struct PolicyActRequest_
{
  typedef PolicyActRequest_<ContainerAllocator> Type;

  PolicyActRequest_()
    : obs()
    , noise()
    , task()  {
    }
  PolicyActRequest_(const ContainerAllocator& _alloc)
    : obs(_alloc)
    , noise(_alloc)
    , task(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obs_type;
  _obs_type obs;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _noise_type;
  _noise_type noise;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _task_type;
  _task_type task;





  typedef boost::shared_ptr< ::tamp_ros::PolicyActRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tamp_ros::PolicyActRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PolicyActRequest_

typedef ::tamp_ros::PolicyActRequest_<std::allocator<void> > PolicyActRequest;

typedef boost::shared_ptr< ::tamp_ros::PolicyActRequest > PolicyActRequestPtr;
typedef boost::shared_ptr< ::tamp_ros::PolicyActRequest const> PolicyActRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tamp_ros::PolicyActRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tamp_ros::PolicyActRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tamp_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'tamp_ros': ['/home/michaelmcdonald/dependencies/tampy/src/ros_utils/src/tamp_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tamp_ros::PolicyActRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tamp_ros::PolicyActRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tamp_ros::PolicyActRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tamp_ros::PolicyActRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tamp_ros::PolicyActRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tamp_ros::PolicyActRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tamp_ros::PolicyActRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ac251624ebf069341d6a35799d6d1a6";
  }

  static const char* value(const ::tamp_ros::PolicyActRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ac251624ebf0693ULL;
  static const uint64_t static_value2 = 0x41d6a35799d6d1a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::tamp_ros::PolicyActRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tamp_ros/PolicyActRequest";
  }

  static const char* value(const ::tamp_ros::PolicyActRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tamp_ros::PolicyActRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] obs\n\
float32[] noise\n\
string task\n\
\n\
";
  }

  static const char* value(const ::tamp_ros::PolicyActRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tamp_ros::PolicyActRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obs);
      stream.next(m.noise);
      stream.next(m.task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolicyActRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tamp_ros::PolicyActRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tamp_ros::PolicyActRequest_<ContainerAllocator>& v)
  {
    s << indent << "obs[]" << std::endl;
    for (size_t i = 0; i < v.obs.size(); ++i)
    {
      s << indent << "  obs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obs[i]);
    }
    s << indent << "noise[]" << std::endl;
    for (size_t i = 0; i < v.noise.size(); ++i)
    {
      s << indent << "  noise[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.noise[i]);
    }
    s << indent << "task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAMP_ROS_MESSAGE_POLICYACTREQUEST_H
