from IPython import embed as shell
import itertools
import numpy as np
import random

import core.util_classes.hsr_constants as const

# SEED = 1234
NUM_PROBS = 1
NUM_OBJS = 1
NUM_SYMBOLS = NUM_OBJS
# filename = "hsr_probs/hsr.prob"
GOAL = "(HSRRobotAt hsr robot_end_pose)"


HSR_INIT_POSE = [0, 0, 0]
HSR_INIT_ARM = [0, 0, 0, 0, 0] # [0.5, -np.pi/2, 0, -np.pi/2, 0]

INT_GRIPPER = [const.GRIPPER_OPEN]
CLOSE_GRIPPER = [const.GRIPPER_CLOSE]

CAN_GEOM = [0.02, 0.02]

ROBOT_DIST_FROM_TABLE = 0.05

# TABLE_GEOM = [1.4, 1.4, 0.97/2]
TABLE_GEOM = [0.3, 0.6, 0.4/2]
# TABLE_POS = [0, 0, 0.97/2-0.375]
TABLE_POS = [1.75, 0.0, 0.4/2]
TABLE_ROT = [0,0,0]


def get_hsr_str(name, ARM = HSR_INIT_ARM, G = INT_GRIPPER, Pos = HSR_INIT_POSE):
    s = ""
    s += "(geom {})".format(name)
    s += "(arm {} {}), ".format(name, ARM)
    s += "(gripper {} {}), ".format(name, G)
    s += "(pose {} {}), ".format(name, Pos)
    return s

def get_robot_pose_str(name, ARM = HSR_INIT_ARM, G = INT_GRIPPER, Pos = HSR_INIT_POSE):
    s = ""
    s += "(arm {} {}), ".format(name, ARM)
    s += "(gripper {} {}), ".format(name, G)
    s += "(value {} {}), ".format(name, Pos)
    return s

def get_undefined_robot_pose_str(name):
    s = ""
    s += "(arm {} undefined), ".format(name)
    s += "(gripper {} undefined), ".format(name)
    s += "(value {} undefined), ".format(name)
    return s

def get_undefined_symbol(name):
    s = ""
    s += "(value {} undefined), ".format(name)
    s += "(rotation {} undefined), ".format(name)
    return s


def save_prob(filename, obstacles=[]):
    s = "# AUTOGENERATED. DO NOT EDIT.\n# Configuration file for CAN problem instance. Blank lines and lines beginning with # are filtered out.\n\n"

    s += "# The values after each attribute name are the values that get passed into the __init__ method for that attribute's class defined in the domain configuration.\n"
    s += "Objects: "

    s += "Robot (name {}); ".format("hsr")
    for i in range(NUM_OBJS):
        s += "Can (name can{0}); ".format(i)
        s += "CanTarget (name can{0}_init_target); ".format(i)
        s += "CanTarget (name can{0}_end_target); ".format(i)
        s += "RobotPose (name {}); ".format("can_grasp_begin_{0}".format(i))
        s += "RobotPose (name {}); ".format("can_grasp_end_{0}".format(i))
        s += "RobotPose (name {}); ".format("can_putdown_begin_{0}".format(i))
        s += "RobotPose (name {}); ".format("can_putdown_end_{0}".format(i)) 
        s += "EEPose (name {}); ".format("cg_ee_{0}".format(i))
        s += "EEPose (name {}); ".format("cp_ee_{0}".format(i))
    s += "EEPose (name cg_ee); "
    s += "EEPose (name cp_ee); "
    s += "RobotPose (name {}); ".format("robot_init_pose")
    s += "RobotPose (name {}); ".format("robot_end_pose")
    s += "RobotPose (name {}); ".format("can_grasp_begin")
    s += "RobotPose (name {}); ".format("can_grasp_end")
    s += "RobotPose (name {}); ".format("can_putdown_begin")
    s += "RobotPose (name {}); ".format("can_putdown_end")
    s += "CanTarget (name {}); ".format("can_end_target")
    for o in obstacles:
        s += "Obstacle (name {}); ".format(o[0])

    # s += "Obstacle (name {}); \n\n".format("table")
    s += "\n\n"

    s += "Init: "
    s += get_hsr_str('hsr', HSR_INIT_ARM, INT_GRIPPER, HSR_INIT_POSE)
    s += get_robot_pose_str('robot_init_pose', HSR_INIT_ARM, INT_GRIPPER, HSR_INIT_POSE)
    s += get_undefined_robot_pose_str("can_grasp_begin")
    s += get_undefined_robot_pose_str("can_grasp_end")
    s += get_undefined_robot_pose_str("can_putdown_begin")
    s += get_undefined_robot_pose_str("can_putdown_end")
    s += get_undefined_symbol("cg_ee")
    s += get_undefined_symbol("cp_ee")
    for i in range(NUM_SYMBOLS):
        s += get_undefined_robot_pose_str("can_grasp_begin_{0}".format(i))
        s += get_undefined_robot_pose_str("can_grasp_end_{0}".format(i))
        s += get_undefined_robot_pose_str("can_putdown_begin_{0}".format(i))
        s += get_undefined_robot_pose_str("can_putdown_end_{0}".format(i))
        s += get_undefined_symbol("cg_ee_{0}".format(i))
        s += get_undefined_symbol("cp_ee_{0}".format(i))


    for i in range(NUM_OBJS):
        s += "(geom can{} {} {}), ".format(i, CAN_GEOM[0], CAN_GEOM[1])
        s += "(pose can{} {}), ".format(i, [2, 2, 0])
        s += "(rotation can{} {}),".format(i, [0, 0, 0])

        s += "(value can{0}_init_target {1}), ".format(i, [0, 0, 0.615])
        s += "(rotation can{0}_init_target {1}), ".format(i, [0, 0, 0])

        s += "(value can{0}_end_target {1}), ".format(i, [0, 0, 0.615])
        s += "(rotation can{0}_end_target {1}), ".format(i, [0, 0, 0])
    s += get_undefined_robot_pose_str('robot_end_pose')

    for o in obstacles:
        s += "(geom {} {}), ".format(o[0], o[1])
        s += "(pose {} {}), ".format(o[0], o[2])
        s += "(rotation {} {}), ".format(o[0], o[3])

    # s += "(geom table {}), ".format(TABLE_GEOM)
    # s += "(pose table {}), ".format(TABLE_POS)
    # s += "(rotation table {}); ".format(TABLE_ROT)
    s += "(value can_end_target {0}), ".format([0, 0, 0.615])
    s += "(rotation can_end_target {0}); ".format([0, 0, 0])

    s += "(HSRRobotAt hsr robot_init_pose), "
    s += "(HSRIsMP hsr), "
    s += "(HSRWithinJointLimit hsr) \n\n"
    # for i in range(NUM_OBJS):
    #     s += "(HSRCanGraspValid cg_ee_{0} can{0}_init_target), ".format(i)
    #     s += "(HSRCanGraspValid cp_ee_{0} can{0}_end_target), ".format(i)
    # s += "(HSRStationaryW table) \n\n"

    s += "Goal: {}".format(GOAL)

    with open(filename, "w") as f:
        f.write(s)


if __name__ == "__main__":
    save_prob(filename)
