
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for CAN domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Basket, BasketTarget, RobotPose, Robot, EEPose, Obstacle, Washer, WasherPose, Cloth, ClothTarget, Rotation, Can, CanTarget, Region, Edge

# Define the class location of each non-standard attribute type used in the above parameter type descriptions.

Attribute Import Paths: HSR core.util_classes.robots, Vector1d core.util_classes.matrix, Vector2d core.util_classes.matrix, Vector3d core.util_classes.matrix, ArmPose5d core.util_classes.matrix, Table core.util_classes.items, Box core.util_classes.items, Basket core.util_classes.items, Washer core.util_classes.robots, Cloth core.util_classes.items, Can core.util_classes.items, Edge core.util_classes.items

Predicates Import Path: core.util_classes.hsr_predicates

Primitive Predicates: geom, WasherPose, Washer; value, WasherPose, Vector3d; rotation, WasherPose, Vector3d; door, WasherPose, Vector1d; geom, BasketTarget, Basket; value, BasketTarget, Vector3d; rotation, BasketTarget, Vector3d; value, CanTarget, Vector3d; rotation, CanTarget, Vector3d; value, Region, Vector2d; geom, Edge, Edge; pose, Edge, Vector3d; rotation, Edge, Vector3d; length, Edge, Vector1d; geom, Robot, HSR; pose, Robot, Vector3d; arm, Robot, ArmPose5d; gripper, Robot, Vector1d; value, RobotPose, Vector3d; arm, RobotPose, ArmPose5d; gripper, RobotPose, Vector1d; geom, Cloth, Cloth; pose, Cloth, Vector3d; rotation, Cloth, Vector3d; geom, Obstacle, Box; pose, Obstacle, Vector3d; rotation, Obstacle, Vector3d; geom, Can, Can; pose, Can, Vector3d; rotation, Can, Vector3d; value, EEPose, Vector3d; rotation, EEPose, Vector3d; geom, Basket, Basket; pose, Basket, Vector3d; rotation, Basket, Vector3d; geom, Washer, Washer; pose, Washer, Vector3d; rotation, Washer, Vector3d; door, Washer, Vector1d; value, ClothTarget, Vector3d; rotation, ClothTarget, Vector3d; value, Rotation, Vector1d

Derived Predicates: HSREEReachableVer, Robot, RobotPose, EEPose; HSRStationaryCan, Can; HSRGraspValid, EEPose; HSRTargetOnTable, Obstacle, CanTarget; HSRIsMP, Robot; HSRCanGraspValid, EEPose, CanTarget; HSRObstructsHoldingCan, Robot, RobotPose, RobotPose, Can, Can; HSRRCollides, Robot, Obstacle; HSROpenGripper, Robot; HSRCansStacked, Can, Can; HSRCloseGripper, Robot; HSRObstructsHolding, Robot, RobotPose, RobotPose, Can, Can; HSRStationaryWrist, Robot; HSRStationaryBase, Robot; HSREEReachableHor, Robot, RobotPose, EEPose; HSRCanAt, Can, CanTarget; HSRTargetCanStacked, Can, CanTarget; HSRStationaryW, Obstacle; HSRWithinJointLimit, Robot; HSRGripperAt, Robot, EEPose; HSRCanInGripper, Robot, Can; HSRStationaryEndJoints, Robot; HSRGripperLevel, Robot; HSRTargetsStacked, CanTarget, CanTarget; HSRCanAlmostInGripper, Robot, Can; HSRRobotAt, Robot, RobotPose; HSRRSelfCollides, Robot; HSRStationaryArm, Robot; HSRObstructsCan, Robot, RobotPose, RobotPose, Can; HSRStationaryNeqCan, Can, Can


# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold



Action moveto 20: (?robot - Robot ?start - RobotPose ?end - RobotPose) (and (HSRRobotAt ?robot ?start) (forall (?obj - Can)(not (HSRObstructsCan ?robot ?start ?end ?obj))) (forall (?obj - Can)(HSRStationaryCan ?obj)) (forall (?obs - Obstacle) (HSRStationaryW ?obs)) (HSRIsMP ?robot) (HSRWithinJointLimit ?robot) (HSROpenGripper ?robot) (forall (?w - Obstacle) (not (HSRRCollides ?robot ?w))) (not (HSRRSelfCollides ?robot)) )(and  (not (HSRRobotAt ?robot ?start)) (HSRRobotAt ?robot ?end) ) 0:0 0:18 0:18 0:18 0:18 0:19 1:18 0:19 1:18 19:18 19:19 

Action can_grasp 21: (?robot - Robot ?can - Can ?target - CanTarget ?sp - RobotPose ?ee - EEPose ?ep - RobotPose) (and (HSRCanAt ?can ?target) (HSRRobotAt ?robot ?sp) (HSRCanInGripper ?robot ?can) (HSROpenGripper ?robot) (HSRStationaryCan ?can) (forall (?obs - Can) (HSRStationaryNeqCan ?obs ?can)) (forall (?obs - Obstacle)(HSRStationaryW ?obs)) (HSRStationaryWrist ?robot) (HSRIsMP ?robot) (HSRWithinJointLimit ?robot) (forall (?obj - Can)(not (HSRObstructsCan ?robot ?sp ?ep ?obj))) (not (HSRRSelfCollides ?robot)) (forall (?obs - Obstacle)(not (HSRRCollides ?robot ?obs))) )(and (not (HSRCanAt ?can ?target)) (not (HSRRobotAt ?robot ?sp)) (HSRCloseGripper ?robot) (HSRRobotAt ?robot ?ep) (HSRCanInGripper ?robot ?can) (forall (?sym1 - Robotpose)(forall (?sym2 - RobotPose)(forall (?obj - Can) (not (HSRObstructsHoldingCan ?robot ?sym1 ?sym2 ?obj ?can))))) ) 1:1 0:0 10:10 0:9 0:9 0:19 0:19 0:10 0:19 0:20 0:9 1:19 0:20 20:19 20:19 10:20 20:20 20:20 10:20 

Action can_putdown 21: (?robot - Robot ?can - Can ?target - CanTarget ?sp - RobotPose ?ee - EEPose ?ep - RobotPose) (and (HSRRobotAt ?robot ?sp) (HSRCanInGripper ?robot ?can) (HSRCanInGripper ?robot ?can) (HSRCloseGripper ?robot) (HSRStationaryCan ?can) (HSRStationaryWrist ?robot) (forall (?obs - Obstacle)(HSRStationaryW ?obs)) (forall (?obs - Can) (HSRStationaryNeqCan ?obs ?can)) (HSRIsMP ?robot) (HSRWithinJointLimit ?robot) (not (HSRRSelfCollides ?robot)) (forall (?obs - Obstacle)(not (HSRRCollides ?robot ?obs))) (forall (?obj - Can)(not (HSRObstructsCan ?robot ?sp ?ep ?obj))) (forall (?obj - Can)(not (HSRObstructsHoldingCan ?robot ?sp ?ep ?obj ?can))) )(and (HSRCanAt ?can ?target) (not (HSRRobotAt ?robot ?sp)) (HSRRobotAt ?robot ?ep) (not (HSRCanInGripper ?robot ?can)) (HSROpenGripper ?robot) ) 0:0 0:0 10:10 0:10 10:19 0:10 0:19 0:19 0:19 0:20 1:19 0:20 11:20 0:10 20:20 20:19 20:20 20:19 11:20 

Action moveholding_can 20: (?robot - Robot ?start - RobotPose ?end - RobotPose ?can - Can) (and (HSRRobotAt ?robot ?start) (HSRCanAlmostInGripper ?robot ?can) (HSRCloseGripper ?robot) (forall (?obj - Can)(not (HSRObstructsHoldingCan ?robot ?start ?end ?obj ?can))) (forall (?obj - Can)(HSRStationaryNeqCan ?obj ?can)) (forall (?obs - Obstacle) (HSRStationaryW ?obs)) (HSRIsMP ?robot) (HSRWithinJointLimit ?robot) (not (HSRRSelfCollides ?robot)) (forall (?obs - Obstacle) (not (HSRRCollides ?robot ?obs))) )(and (HSRCanInGripper ?robot ?can) (not (HSRRobotAt ?robot ?start)) (HSRRobotAt ?robot ?end) ) 0:0 0:0 1:19 0:19 0:18 0:18 0:18 0:19 1:18 0:19 19:19 19:18 19:19 

Action stack_cans 21: (?robot - Robot ?held_can - Can ?target - CanTarget ?bottom_can - Can ?sp - RobotPose ?ee - EEPose ?ep - RobotPose) (and (HSRRobotAt ?robot ?sp) (HSRTargetCanStacked ?bottom_can ?target) (HSREEReachableHor ?robot ?sp ?ee) (HSRCanInGripper ?robot ?held_can) (HSRGraspValid ?ee ?target) (HSROpenGripper ?robot) (HSRCloseGripper ?robot) (HSRStationaryCan ?held_can) (forall (?obs - Obstacle)(HSRStationaryW ?obs)) (forall (?obs - Can) (HSRStationaryNeqCan ?obs ?held_can)) (HSRStationaryBase ?robot) (HSRIsMP ?robot) (HSRWithinJointLimit ?robot) (not (HSRRSelfCollides ?robot)) (forall (?obs - Obstacle)(not (HSRRCollides ?robot ?obs))) (forall (?obj - Can)(not (HSRObstructsHoldingCan ?robot ?sp ?ep ?obj ?held_can))) )(and (HSRCanAt ?held_can ?target) (HSRCansStacked ?held_can ?bottom_can) (not (HSRRobotAt ?robot ?sp)) (HSRRobotAt ?robot ?ep) (not (HSRCanInGripper ?robot ?held_can)) ) 0:0 0:0 10:10 0:10 10:10 10:20 0:9 10:19 0:19 0:19 0:19 0:19 0:20 1:19 0:20 0:20 20:20 20:19 20:19 20:20 20:20 