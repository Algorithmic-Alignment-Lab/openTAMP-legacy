
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for CAN domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Can, Target, RobotPose, Robot, Grasp, Obstacle

# Define the class location of each non-standard attribute type used in the above parameter type descriptions.

Attribute Import Paths: RedCircle core.util_classes.items, BlueCircle core.util_classes.items, GreenCircle core.util_classes.items, Vector1d core.util_classes.matrix, Vector2d core.util_classes.matrix, Wall core.util_classes.items

Predicates Import Path: core.util_classes.namo_predicates

Primitive Predicates: geom, Can, RedCircle; pose, Can, Vector2d; geom, Target, BlueCircle; value, Target, Vector2d; value, RobotPose, Vector2d; gripper, RobotPose, Vector1d; geom, RobotPose, BlueCircle; pose, Robot, Vector2d; gripper, Robot, Vector1d; value, Grasp, Vector2d; geom, Obstacle, Wall; pose, Obstacle, Vector2d; vel, RobotPose, Vector1d; acc, RobotPose, Vector1d; vel, Robot, Vector1d; acc, Robot, Vector1d; geom, Robot, GreenCircle

Derived Predicates: At, Can, Target; RobotAt, Robot, RobotPose; InGripper, Robot, Can, Grasp; Obstructs, Robot, Can, Can, Can; ObstructsHolding, Robot, Target, Target, Can, Can; WideObstructsHolding, Robot, Target, Target, Can, Can; Stationary, Can; RobotStationary, Robot; StationaryNEq, Can, Can; IsMP, Robot; StationaryW, Obstacle; Collides, Can, Obstacle; CanCollides, Can, Can; RCollides, Robot, Obstacle; GripperClosed, Robot; Near, Can, Target;  RobotAtGrasp, Robot, Can, Grasp; RobotWithinReach, Robot, Target; RobotNearGrasp, Robot, Can, Grasp; RobotWithinBounds, Robot; WideObstructs, Robot, Can, Can, Can; AtNEq, Can, Can, Target; PoseCollides, RobotPose, Obstacle; TargetCollides, Target, Obstacle; TargetGraspCollides, Target, Obstacle, Grasp; TargetCanGraspCollides, Target, Can, Grasp; CanGraspCollides, Can, Obstacle, Grasp; HLPoseUsed, RobotPose; HLAtGrasp, Robot, Can, Grasp; RobotPoseAtGrasp, RobotPose, Target, Grasp; HLPoseAtGrasp, RobotPose, Target, Grasp


# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold



Action moveto 20: (?robot - Robot ?can - Can ?target - Target ?sp - RobotPose ?gp - RobotPose ?g - Grasp ?end - Target) (and (At ?can ?target) (forall (?gr - Grasp) (not (RobotAtGrasp ?robot ?can ?gr))) (forall (?w - Obstacle) (not (CanGraspCollides ?can ?w ?g))) (not (GripperClosed ?robot)) (forall (?obj - Can) (Stationary ?obj)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (forall (?obj - Can) (not (Obstructs ?robot ?can ?can ?obj))) (forall (?obj - Can) (not (WideObstructs ?robot ?can ?can ?obj))) (forall (?obj - Can) (not (Obstructs ?robot ?can ?can ?obj))) (forall (?obj - Can) (not (Obstructs ?robot ?can ?can ?obj))) )(and (RobotAtGrasp ?robot ?can ?g) (forall (?obj - Can / ?can) (forall (?gr - Grasp) (not (RobotAtGrasp ?robot ?obj ?gr)))) (forall (?obj - Can) (forall (?gr - Grasp / ?g) (not (RobotAtGrasp ?robot ?obj ?gr)))) (forall (?obj - Can) (Stationary ?obj)) (RobotStationary ?robot) ) 0:0 0:0 0:0 1:18 0:18 0:18 0:18 0:18 0:18 0:0 1:17 1:17 18:18 19:19 19:18 19:18 19:18 18:18 

Action transfer 20: (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?t - Target ?g - Grasp ?init - Target) (and (RobotStationary ?robot) (forall (?obj - Can) (not (TargetCanGraspCollides ?t ?obj ?g))) (forall (?w - Obstacle) (not (TargetGraspCollides ?t ?w ?g))) (forall (?obj - Can) (not (Near ?obj ?t))) (GripperClosed ?robot) (InGripper ?robot ?c ?g) (RobotAtGrasp ?robot ?c ?g) (forall (?obj - Can) (not (ObstructsHolding ?robot ?init ?t ?obj ?c))) (forall (?obj - Can) (not (WideObstructsHolding ?robot ?init ?t ?obj ?c))) (forall (?obj - Can) (not (ObstructsHolding ?robot ?init ?t ?obj ?c))) (forall (?obj - Can) (not (ObstructsHolding ?robot ?init ?t ?obj ?c))) (forall (?obj - Can) (StationaryNEq ?obj ?c)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (RobotStationary ?robot) )(and (At ?c ?t) (Near ?c ?t) (forall (?targ - Target / ?t) (not (Near ?c ?targ))) (forall (?targ - Target / ?t) (not (At ?c ?targ))) (forall (?obj - Can) (not (Obstructs ?robot ?obj ?obj ?c))) (forall (?obj - Can) (not (WideObstructs ?robot ?obj ?obj ?c))) (forall (?obj - Can) (not (ObstructsHolding ?robot ?init ?t ?c ?obj))) (forall (?obj - Can) (not (WideObstructsHolding ?robot ?init ?t ?c ?obj))) (forall (?obj - Can) (Stationary ?obj)) (forall (?gr - Grasp) (forall (?obj - Can) (not (RobotAtGrasp ?robot ?obj ?g)))) ) 0:0 0:0 0:0 0:0 1:18 1:1 0:0 0:0 1:17 1:17 18:18 0:18 0:18 0:18 0:18 0:18 18:18 18:19 19:19 19:18 19:18 19:18 19:18 19:18 19:18 19:18 19:18 