# Configuration file for NAMO domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Can, Target, RobotPose, Robot, Grasp

# Define the class location of each non-standard attribute type used
# in the above parameter type description.

Attribute Import Paths:RedCircle core.util_classes.circle, BlueCircle core.util_classes.circle, GreenCircle core.util_classes.circle, Vector2d core.util_classes.matrix, GridWorldViewer core.util_classes.viewer

Predicates Import Path: core.util_classes.namo_predicates

Primitive Predicates: geom, Can, RedCircle; pose, Can, Vector2d; geom, Target, BlueCircle; value, Target, Vector2d; value, RobotPose, Vector2d; geom, Robot, GreenCircle; pose, Robot, Vector2d; value, Grasp, Vector2d

Derived Predicates: At, Can, Target; RobotAt, Robot, RobotPose; InGripper, Robot, Can, Grasp; InContact, Robot, RobotPose, Target; Obstructs, Robot, RobotPose, Can; ObstructsHolding, Robot, RobotPose, Can, Can; GraspValid, RobotPose, Target, Grasp; Stationary, Can; StationaryNEq, Can, Can; IsMP, Robot


# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold.

Action moveto 20: (?robot - Robot ?start - RobotPose ?end - RobotPose) (and (forall (?c - Can) (forall (?g - Grasp) (not (InGripper ?robot ?c ?g)))) (RobotAt ?robot ?start) (forall (?obj - Can ) (not (Obstructs ?robot ?end ?obj))) (forall (?obj - Can) (Stationary ?obj)) (IsMP ?robot)) (and (not (RobotAt ?robot ?start)) (RobotAt ?robot ?end)) 0:0 0:0 0:19 0:18 0:18 19:19 19:19

Action movetoholding 20: (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?g - Grasp) (and (RobotAt ?robot ?start) (InGripper ?robot ?c ?g) (forall (?obj - Can) (not (ObstructsHolding ?robot ?end ?obj ?c))) (forall (?obj - Can) (StationaryNEq ?obj ?c)) (IsMP ?robot)) (and (not (RobotAt ?robot ?start)) (RobotAt ?robot ?end)) 0:0 0:19 0:19 0:18 0:18 19:19 19:19

Action grasp 20: (?robot - Robot ?can - Can ?target - Target ?sp - RobotPose ?gp - RobotPose ?g - Grasp) (and (At ?can ?target)  (RobotAt ?robot ?sp)  (InContact ?robot ?gp ?target)  (GraspValid ?gp ?target ?g)  (forall (?obj - Can) (forall (?g - Grasp) (not (InGripper ?robot ?obj ?g))))  (forall (?obj - Can) (Stationary ?obj)) (IsMP ?robot) (forall (?obj - Can) (not (Obstructs ?robot ?gp ?obj))) (forall (?obj - Can) (not (ObstructsHolding ?robot ?gp ?obj ?can))) ) (and (not (At ?can ?target)) (not (RobotAt ?robot ?sp)) (RobotAt ?robot ?gp) (InGripper ?robot ?can ?g) (forall (?sym - RobotPose)(not (Obstructs ?robot ?sym ?can))) (forall (?sym1 - Robotpose)(forall (?obj - Can) (not (ObstructsHolding ?robot ?sym1 ?can ?obj))))) 0:0 0:0 0:0 0:0 0:0 0:18 0:18 0:18 19:19 19:18 19:19 19:19 19:18 19:18 19:18 

Action putdown 20: (?robot - Robot ?can - Can ?target - Target ?pdp - RobotPose ?endp - RobotPose ?g - Grasp) (and (RobotAt ?robot ?pdp) (InContact ?robot ?pdp ?target) (GraspValid ?pdp ?target ?g) (InGripper ?robot ?can ?g) (not (InContact ?robot ?endp ?target)) (forall (?obj - Can) (Stationary ?obj)) (IsMP ?robot) (forall (?obj - Can) (not (ObstructsHolding ?robot ?endp ?obj ?can))) (forall (?obj - Can) (not (Obstructs ?robot ?endp ?obj))) ) (and (not (RobotAt ?robot ?pdp)) (RobotAt ?robot ?endp) (At ?can ?target) (not (InGripper ?robot ?can ?g))) 0:0 0:0 0:0 0:0 0:0 0:18 0:18 0:18 19:19 19:19 19:19 19:19 19:19
