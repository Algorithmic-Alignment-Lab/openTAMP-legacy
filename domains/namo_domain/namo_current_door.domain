
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for CAN domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Can, Target, RobotPose, Robot, Grasp, Obstacle, Rotation, Door

# Define the class location of each non-standard attribute type used in the above parameter type descriptions.

Attribute Import Paths: RedCircle core.util_classes.items, BlueCircle core.util_classes.items, GreenCircle core.util_classes.items, Vector1d core.util_classes.matrix, Vector2d core.util_classes.matrix, Wall core.util_classes.items, NAMO core.util_classes.robots, Door2d core.util_classes.items

Predicates Import Path: core.util_classes.namo_grip_predicates

Primitive Predicates: geom, Can, RedCircle; pose, Can, Vector2d; geom, Target, BlueCircle; value, Target, Vector2d; value, RobotPose, Vector2d; gripper, RobotPose, Vector1d; geom, RobotPose, BlueCircle; geom, Robot, NAMO; pose, Robot, Vector2d; gripper, Robot, Vector1d; value, Grasp, Vector2d; geom, Obstacle, Wall; pose, Obstacle, Vector2d; value, Rotation, Vector1d; theta, Robot, Vector1d; theta, RobotPose, Vector1d; vel, RobotPose, Vector1d; acc, RobotPose, Vector1d; vel, Robot, Vector1d; acc, Robot, Vector1d; geom, Door, Door2d; theta, Door, Vector1d; pose, Door, Vector2d

Derived Predicates: At, Can, Target; AtInit, Can, Target; RobotAt, Robot, RobotPose; InGripper, Robot, Can, Grasp; Obstructs, Robot, RobotPose, RobotPose, Can; ObstructsHolding, Robot, RobotPose, RobotPose, Can, Can; WideObstructsHolding, Robot, RobotPose, RobotPose, Can, Can; StationaryRot, Robot; Stationary, Can; RobotStationary, Robot; StationaryNEq, Can, Can; IsMP, Robot; StationaryW, Obstacle; Collides, Can, Obstacle; CanCollides, Can, Can; RCollides, Robot, Obstacle; GripperClosed, Robot; Near, Can, Target;  RobotAtGrasp, Robot, Can, Grasp; RobotWithinReach, Robot, Target; RobotNearGrasp, Robot, Can, Grasp; RobotWithinBounds, Robot; WideObstructs, Robot, RobotPose, RobotPose, Can; AtNEq, Can, Can, Target; PoseCollides, RobotPose, Obstacle; TargetCollides, Target, Obstacle; TargetGraspCollides, Target, Obstacle, Grasp; TargetCanGraspCollides, Target, Can, Grasp; CanGraspCollides, Can, Obstacle, Grasp; HLPoseUsed, RobotPose; HLAtGrasp, Robot, Can, Grasp; RobotPoseAtGrasp, RobotPose, Target, Grasp; HLPoseAtGrasp, RobotPose, Target, Grasp; RobotRetreat, Robot, Grasp; RobotApproach, Robot, Grasp; LinearRetreat, Robot; LinearApproach, Robot; InGraspAngle, Robot, Can; NearGraspAngle, Robot, Can; ThetaDirValid, Robot; ForThetaDirValid, Robot; RevThetaDirValid, Robot; ScalarVelValid, Robot; DoorClosed, Door; InDoorAngle, Robot, Door; DoorIsMP, Door; StationaryDoor, Door; DoorInGrasp, Robot, Door; HandleAngleValid, Door; DoorNearClosed, Door; StationaryDoorPos, Door


# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold



Action moveto 20: (?robot - Robot ?can - Can ?target - Target ?sp - RobotPose ?gp - RobotPose ?g - Grasp ?end - Target) (and (At ?can ?target) (forall (?gr - Grasp) (forall (?obj - Can) (not (NearGraspAngle ?robot ?obj)))) (not (GripperClosed ?robot)) (forall (?obj - Can) (Stationary ?obj)) (forall (?obj - Door) (StationaryDoor ?obj)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (forall (?obj - Can) (not (Obstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (WideObstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (WideObstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (Obstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (ObstructsHolding ?robot ?sp ?gp ?obj ?can))) (ThetaDirValid ?robot) (ForThetaDirValid ?robot) (ScalarVelValid ?robot) )(and (NearGraspAngle ?robot ?can) (forall (?obj - Can / ?can) (forall (?gr - Grasp) (not (NearGraspAngle ?robot ?obj)))) (forall (?obj - Can) (Stationary ?obj)) (StationaryRot ?robot) (RobotStationary ?robot) ) 0:0 0:0 1:18 0:18 0:18 0:18 0:18 1:18 1:18 0:0 0:-1 1:15 16:16 17:18 1:16 16:18 0:18 19:19 19:18 19:18 16:18 18:18 

Action transfer 20: (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?t - Target ?g - Grasp ?init - Target) (and (At ?c ?init) (RobotStationary ?robot) (forall (?obj - Door) (StationaryDoor ?obj)) (NearGraspAngle ?robot ?c) (forall (?obj - Can) (not (Near ?obj ?t))) (GripperClosed ?robot) (NearGraspAngle ?robot ?c) (forall (?obj - Can) (not (ObstructsHolding ?robot ?start ?end ?obj ?c))) (forall (?obj - Can) (not (WideObstructsHolding ?robot ?start ?end ?obj ?c))) (forall (?obj - Can) (not (WideObstructsHolding ?robot ?start ?end ?obj ?c))) (forall (?obj - Can) (StationaryNEq ?obj ?c)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (RobotStationary ?robot) (StationaryRot ?robot) (not (GripperClosed ?robot)) (ThetaDirValid ?robot) (ScalarVelValid ?robot) )(and (At ?c ?t) (Near ?c ?t) (not (Near ?c ?init)) (not (At ?c ?init)) (forall (?obj - Can) (Stationary ?obj)) (forall (?obj - Can) (not (Obstructs ?robot ?start ?end ?c))) (forall (?obj - Can) (not (WideObstructs ?robot ?start ?end ?c))) (forall (?obj - Can) (forall (?targ - Target) (not (WideObstructsHolding ?robot ?start ?end ?c ?obj)))) (forall (?obj - Can) (forall (?targ - Target) (not (ObstructsHolding ?robot ?start ?end ?c ?obj)))) ) 0:0 0:0 0:18 0:0 0:0 1:18 19:19 0:0 0:-1 1:18 0:18 0:18 0:18 1:18 1:18 18:18 17:18 19:18 1:18 0:18 18:19 19:19 19:18 19:18 19:18 19:18 19:18 19:18 19:18 

Action place 5: (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?t - Target ?g - Grasp ?init - Target) (and (Near ?c ?t) (NearGraspAngle ?robot ?c) (not (GripperClosed ?robot)) (forall (?obj - Door) (StationaryDoor ?obj)) (forall (?obj - Can) (not (ObstructsHolding ?robot ?start ?end ?obj ?c))) (forall (?obj - Can ) (not (Obstructs ?robot ?start ?end ?obj))) (forall (?obj - Can) (Stationary ?obj)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (StationaryRot ?robot) (ScalarVelValid ?robot) (RobotStationary ?robot) (RobotStationary ?robot) )(and (not (Obstructs ?robot ?start ?end ?c)) (forall (?gr - Grasp) (forall (?obj - Can) (not (NearGraspAngle ?robot ?obj)))) (forall (?obj - Can) (Stationary ?obj)) ) 0:0 0:0 1:3 0:3 0:3 3:3 0:3 0:3 0:3 1:3 1:3 0:3 0:3 0:0 3:3 4:3 4:3 4:3 

Action open_door 25: (?robot - Robot ?door - Door ?sp - RobotPose ?gp - RobotPose) (and (DoorNearClosed ?door) (DoorClosed ?door) (forall (?gr - Grasp) (forall (?obj - Can) (not (NearGraspAngle ?robot ?obj)))) (not (GripperClosed ?robot)) (GripperClosed ?robot) (not (GripperClosed ?robot)) (InDoorAngle ?robot ?door) (DoorInGrasp ?robot ?door) (StationaryDoorPos ?door) (forall (?obj - Can) (Stationary ?obj)) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (DoorIsMP ?door) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (forall (?obj - Can) (not (Obstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (WideObstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (WideObstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (Obstructs ?robot ?sp ?gp ?obj))) (ThetaDirValid ?robot) (ForThetaDirValid ?robot) )(and (not (DoorClosed ?door)) (not (DoorNearClosed ?door)) (forall (?obj - Can) (forall (?gr - Grasp) (not (NearGraspAngle ?robot ?obj)))) (forall (?obj - Can) (Stationary ?obj)) ) 0:0 1:18 0:0 1:17 18:22 23:23 16:18 18:22 0:23 0:23 0:23 0:23 0:23 1:23 1:16 0:0 0:-1 1:20 21:21 1:16 16:17 23:24 23:24 24:23 24:23 

Action close_door 25: (?robot - Robot ?door - Door ?sp - RobotPose ?gp - RobotPose) (and (not (DoorNearClosed ?door)) (not (DoorClosed ?door)) (forall (?gr - Grasp) (forall (?obj - Can) (not (NearGraspAngle ?robot ?obj)))) (not (GripperClosed ?robot)) (GripperClosed ?robot) (not (GripperClosed ?robot)) (InDoorAngle ?robot ?door) (DoorInGrasp ?robot ?door) (forall (?obj - Can) (Stationary ?obj)) (StationaryDoorPos ?door) (forall (?w - Obstacle) (StationaryW ?w)) (IsMP ?robot) (DoorIsMP ?door) (forall (?w - Obstacle) (forall (?obj - Can) (not (Collides ?obj ?w)))) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) (forall (?obj - Can) (not (Obstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (WideObstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (WideObstructs ?robot ?sp ?gp ?obj))) (forall (?obj - Can) (not (Obstructs ?robot ?sp ?gp ?obj))) (ThetaDirValid ?robot) (ForThetaDirValid ?robot) (ThetaDirValid ?robot) )(and (DoorClosed ?door) (DoorNearClosed ?door) (forall (?obj - Can) (forall (?gr - Grasp) (not (NearGraspAngle ?robot ?obj)))) (forall (?obj - Can) (Stationary ?obj)) ) 0:0 1:18 0:0 1:17 18:22 23:23 16:23 17:22 0:23 0:23 0:23 0:23 0:23 1:23 1:23 0:0 0:-1 1:20 21:21 1:16 16:17 17:23 23:24 23:24 24:23 24:23 