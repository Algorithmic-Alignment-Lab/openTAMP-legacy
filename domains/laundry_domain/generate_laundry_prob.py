from IPython import embed as shell
import itertools
import numpy as np
import random

# SEED = 1234
NUM_PROBS = 1
filename = "laundry_probs/laundry.prob"
GOAL = "(BaxterAt basket end_target), (BaxterRobotAt baxter robot_end_pose), (BaxterWasherAt washer washer_end_pose)"


# init Baxter pose
BAXTER_INIT_POSE = [0]
R_ARM_INIT = [0, -0.785, 0, 0, 0, 0, 0]
L_ARM_INIT = [0, -0.785, 0, 0, 0, 0, 0]
INT_GRIPPER = [0.02]
CLOSE_GRIPPER = [0.015]
# init basket pose
BASKET_INIT_POS = [0.65 , -0.283,  0.81]
BASKET_INIT_ROT = [np.pi/2, 0, np.pi/2]

# end basket pose
BASKET_END_POS = [0.65, 0.323, 0.81]
BASKET_END_ROT = [np.pi/2, 0, np.pi/2]


ROBOT_DIST_FROM_TABLE = 0.05
TABLE_GEOM = [0.3, 0.6, 0.018]
TABLE_POS = [0.75, 0.02, 0.522]
TABLE_ROT = [0,0,0]

# WASHER_POS = [2,2,2]
WASHER_POS = [0.0472, 0.781, 0.284]
WASHER_ROT = [np.pi, 0, np.pi/2]
WASHER_DOOR = [0]
WASHER_END_DOOR = [-np.pi/2]
WASHER_CONFIG = [True, True]

"""
Intermediate Poses
"""
GRASP_POSE = [-np.pi/8]
GRASP_LARMPOSE = [-0.2       , -1.61656414, -0.61176606,  1.93732774, -0.02776806, 1.24185857, -0.40960045]
GRASP_RARMPOSE = [ 0.7       , -0.96198717,  0.03612888,  0.99775438, -0.02067175, 1.5353429 , -0.44772444]
GRASP_GRIPPER = [0.02]

PUTDOWN_POSE = [np.pi/8]
PUTDOWN_LARMPOSE = [-0.8       , -0.87594019,  0.2587353 ,  0.92223949,  2.97696004, -1.54149409, -2.5580562 ]
PUTDOWN_RARMPOSE = [-0.2       , -1.38881187,  1.25178981,  1.81230334, -0.18056559, 1.27622517,  0.70704811]
PUTDOWN_GRIPPER = [0.02]


def get_baxter_str(name, LArm = L_ARM_INIT, RArm = R_ARM_INIT, G = INT_GRIPPER, Pos = BAXTER_INIT_POSE):
    s = ""
    s += "(geom {})".format(name)
    s += "(lArmPose {} {}), ".format(name, LArm)
    s += "(lGripper {} {}), ".format(name, G)
    s += "(rArmPose {} {}), ".format(name, RArm)
    s += "(rGripper {} {}), ".format(name, G)
    s += "(pose {} {}), ".format(name, Pos)
    return s

def get_robot_pose_str(name, LArm = L_ARM_INIT, RArm = R_ARM_INIT, G = INT_GRIPPER, Pos = BAXTER_INIT_POSE):
    s = ""
    s += "(lArmPose {} {}), ".format(name, LArm)
    s += "(lGripper {} {}), ".format(name, G)
    s += "(rArmPose {} {}), ".format(name, RArm)
    s += "(rGripper {} {}), ".format(name, G)
    s += "(value {} {}), ".format(name, Pos)
    return s

def get_undefined_robot_pose_str(name):
    s = ""
    s += "(lArmPose {} undefined), ".format(name)
    s += "(lGripper {} undefined), ".format(name)
    s += "(rArmPose {} undefined), ".format(name)
    s += "(rGripper {} undefined), ".format(name)
    s += "(value {} undefined), ".format(name)
    return s

def get_underfine_symbol(name):
    s = ""
    s += "(value {} undefined), ".format(name)
    s += "(rotation {} undefined), ".format(name)
    return s

def get_underfine_washer_pose(name):
    s = ""
    s += "(value {} undefined), ".format(name)
    s += "(rotation {} undefined), ".format(name)
    s += "(door {} undefined), ".format(name)
    return s

def main():
    for iteration in range(NUM_PROBS):
        s = "# AUTOGENERATED. DO NOT EDIT.\n# Configuration file for CAN problem instance. Blank lines and lines beginning with # are filtered out.\n\n"

        s += "# The values after each attribute name are the values that get passed into the __init__ method for that attribute's class defined in the domain configuration.\n"
        s += "Objects: "
        s += "Basket (name {}); ".format("basket")
        s += "BasketTarget (name {}); ".format("init_target")
        s += "BasketTarget (name {}); ".format("end_target")
        s += "EEPose (name {}); ".format("grasp_ee_left")
        s += "EEPose (name {}); ".format("grasp_ee_right")
        s += "EEPose (name {}); ".format("putdown_ee_left")
        s += "EEPose (name {}); ".format("putdown_ee_right")
        s += "EEPose (name {}); ".format("washer_ee")
        s += "Robot (name {}); ".format("baxter")
        s += "RobotPose (name {}); ".format("robot_init_pose")
        s += "RobotPose (name {}); ".format("robot_grasp_begin")
        s += "RobotPose (name {}); ".format("robot_grasp_end")
        s += "RobotPose (name {}); ".format("robot_putdown_begin")
        s += "RobotPose (name {}); ".format("robot_putdown_end")
        s += "RobotPose (name {}); ".format("robot_washer_begin")
        s += "RobotPose (name {}); ".format("robot_washer_end")
        s += "RobotPose (name {}); ".format("robot_end_pose")
        s += "Washer (name {}); ".format("washer")
        s += "WasherPose (name {}); ".format("washer_init_pose")
        s += "WasherPose (name {}); ".format("washer_end_pose")
        s += "Obstacle (name {}) \n\n".format("table")

        s += "Init: "
        s += "(geom basket), "
        s += "(pose basket {}), ".format(BASKET_INIT_POS)
        s += "(rotation basket {}), ".format(BASKET_INIT_ROT)

        s += "(geom init_target)"
        s += "(value init_target {}), ".format(BASKET_INIT_POS)
        s += "(rotation init_target {}), ".format(BASKET_INIT_ROT)

        s += "(geom end_target), "
        s += "(value end_target {}), ".format(BASKET_END_POS)
        s += "(rotation end_target {}), ".format(BASKET_END_ROT)

        s += get_underfine_symbol("grasp_ee_left")
        s += get_underfine_symbol("grasp_ee_right")
        s += get_underfine_symbol("putdown_ee_left")
        s += get_underfine_symbol("putdown_ee_right")
        s += get_underfine_symbol("washer_ee")

        s += get_baxter_str('baxter', L_ARM_INIT, R_ARM_INIT, INT_GRIPPER, BAXTER_INIT_POSE)
        s += get_robot_pose_str('robot_init_pose', L_ARM_INIT, R_ARM_INIT, INT_GRIPPER, BAXTER_INIT_POSE)

        # s += get_robot_pose_str('robot_grasp_begin', GRASP_LARMPOSE, GRASP_RARMPOSE, GRASP_GRIPPER, GRASP_POSE)
        # s += get_robot_pose_str('robot_grasp_end', GRASP_LARMPOSE, GRASP_RARMPOSE, CLOSE_GRIPPER, GRASP_POSE)
        #
        # s += get_robot_pose_str('robot_putdown_begin', PUTDOWN_LARMPOSE, PUTDOWN_RARMPOSE, CLOSE_GRIPPER, PUTDOWN_POSE)
        # s += get_robot_pose_str('robot_putdown_end', PUTDOWN_LARMPOSE, PUTDOWN_RARMPOSE, PUTDOWN_GRIPPER, PUTDOWN_POSE)

        s += get_undefined_robot_pose_str("robot_grasp_begin")
        s += get_undefined_robot_pose_str("robot_grasp_end")
        s += get_undefined_robot_pose_str("robot_putdown_begin")
        s += get_undefined_robot_pose_str("robot_putdown_end")

        s += get_undefined_robot_pose_str("robot_washer_begin")
        s += get_undefined_robot_pose_str("robot_washer_end")
        s += get_robot_pose_str('robot_end_pose', L_ARM_INIT, R_ARM_INIT, INT_GRIPPER, BAXTER_INIT_POSE)

        s += "(geom washer {}), ".format(WASHER_CONFIG)
        s += "(pose washer {}), ".format(WASHER_POS)
        s += "(rotation washer {}), ".format(WASHER_ROT)
        s += "(door washer {}), ".format(WASHER_DOOR)

        s += "(geom washer_init_pose {}), ".format(WASHER_CONFIG)
        s += "(value washer_init_pose {}), ".format(WASHER_POS)
        s += "(rotation washer_init_pose {}), ".format(WASHER_ROT)
        s += "(door washer_init_pose {}), ".format(WASHER_DOOR)

        s += "(geom washer_end_pose {}), ".format(WASHER_CONFIG)
        s += "(value washer_end_pose {}), ".format(WASHER_POS)
        s += "(rotation washer_end_pose {}), ".format(WASHER_ROT)
        s += "(door washer_end_pose {}), ".format(WASHER_END_DOOR)

        s += "(geom table {}), ".format(TABLE_GEOM)
        s += "(pose table {}), ".format(TABLE_POS)
        s += "(rotation table {}); ".format(TABLE_ROT)


        s += "(BaxterAt basket init_target), "
        s += "(BaxterBasketLevel basket), "
        s += "(BaxterRobotAt baxter robot_init_pose), "
        s += "(BaxterWasherAt washer washer_init_pose), "
        s += "(BaxterEEReachableLeftVer baxter robot_grasp_begin grasp_ee_left), "
        s += "(BaxterEEReachableRightVer baxter robot_grasp_begin grasp_ee_right), "

        s += "(BaxterBasketGraspLeftPos grasp_ee_left init_target), "
        s += "(BaxterBasketGraspLeftRot grasp_ee_left init_target), "
        s += "(BaxterBasketGraspRightPos grasp_ee_right init_target), "
        s += "(BaxterBasketGraspRightRot grasp_ee_right init_target), "

        s += "(BaxterBasketGraspLeftPos putdown_ee_left end_target), "
        s += "(BaxterBasketGraspLeftRot putdown_ee_left end_target), "
        s += "(BaxterBasketGraspRightPos putdown_ee_right end_target), "
        s += "(BaxterBasketGraspRightRot putdown_ee_right end_target), "
        s += "(BaxterEEGraspValid washer_ee washer), "
        s += "(BaxterStationaryBase baxter), "
        s += "(BaxterIsMP baxter), "
        s += "(BaxterWithinJointLimit baxter), "
        s += "(BaxterStationaryW table) \n\n"

        s += "Goal: {}".format(GOAL)

        with open(filename, "w") as f:
            f.write(s)

if __name__ == "__main__":
    main()
