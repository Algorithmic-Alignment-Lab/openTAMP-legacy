(define (domain sorting_domain)
    (:requirements equality)
    (:types Cloth Target)
    (:predicates (ClothInLeftRegion ?cloth - Cloth)
                 (ClothInRightRegion ?cloth - Cloth)
                 (ClothAtTarget ?cloth - Cloth ?target - Target)
                 (ClothInGripper ?cloth - Cloth)
                 (BasketAtTarget ?target - Target)
                 (ClothInMiddle ?cloth)
    )

    (:action move_cloth_to_left_target
        :parameters (?cloth - Cloth ?target - Target)
        :precondition (and (ClothInLeftRegion ?cloth)
                           (forall (?c - Cloth) (not (ClothAtTarget ?c ?target))))
        :effect (and (ClothAtTarget ?cloth ?target)
                     (not (ClothInMiddle ?cloth))
                     (not (ClothInRightRegion ?cloth)))
    )

    (:action move_cloth_to_right_target
        :parameters (?cloth - Cloth ?target - Target)
        :precondition (and (ClothInRightRegion ?cloth)
                           (forall (?c - Cloth) (not (ClothAtTarget ?c ?target))))
        :effect (and (ClothAtTarget ?cloth ?target)
                     (not (ClothInMiddle ?cloth))
                     (not (ClothInLeftRegion ?cloth)))
    )

    (:action move_cloth_to_left_region
        :parameters (?cloth)
        :precondition (and (ClothInRightRegion ?cloth)
                           (forall (?c - Cloth) (not (ClothInMiddle ?c))))
        :effect (and (ClothInLeftRegion ?cloth)
                     (forall (?t - Target) (not (ClothAtTarget ?cloth ?t)))
                     (ClothInMiddle ?cloth))
    )

    (:action move_cloth_to_right_region
        :parameters (?cloth)
        :precondition (and (ClothInLeftRegion ?cloth)
                           (forall (?c - Cloth) (not (ClothInMiddle ?c))))
        :effect (and (ClothInRightRegion ?cloth)
                     (forall (?t - Target) (not (ClothAtTarget ?cloth ?t)))
                     (ClothInMiddle ?cloth))
    )
)
