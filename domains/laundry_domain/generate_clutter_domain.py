import sys
sys.path.insert(0, '../../src/')
import core.util_classes.baxter_constants as const
dom_str = """
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for CAN domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: RobotPose, Robot, EEPose, Obstacle, Cloth, ClothTarget, Rotation, Can, Region

# Define the class location of each non-standard attribute type used in the above parameter type descriptions.

Attribute Import Paths: Baxter core.util_classes.robots, Vector1d core.util_classes.matrix, Vector2d core.util_classes.matrix, Vector3d core.util_classes.matrix, ArmPose7d core.util_classes.matrix, Table core.util_classes.items, Box core.util_classes.items, Cloth core.util_classes.items, Can core.util_classes.items

Predicates Import Path: core.util_classes.baxter_predicates

"""

class PrimitivePredicates(object):
    def __init__(self):
        self.attr_dict = {}

    def add(self, name, attrs):
        self.attr_dict[name] = attrs

    def get_str(self):
        prim_str = 'Primitive Predicates: '
        first = True
        for name, attrs in list(self.attr_dict.items()):
            for attr_name, attr_type in attrs:
                pred_str = attr_name + ', ' + name + ', ' + attr_type
                if first:
                    prim_str += pred_str
                    first = False
                else:
                    prim_str += '; ' + pred_str
        return prim_str

pp = PrimitivePredicates()
pp.add('Cloth', [('geom', 'Cloth'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('ClothTarget', [('value', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('RobotPose', [('value', 'Vector1d'),
                    ('lArmPose', 'ArmPose7d'),
                    ('lGripper', 'Vector1d'),
                    ('rArmPose', 'ArmPose7d'),
                    ('rGripper', 'Vector1d')])
pp.add('Robot', [('geom', 'Baxter'),
                ('pose', 'Vector1d'),
                ('lArmPose', 'ArmPose7d'),
                ('lGripper', 'Vector1d'),
                ('rArmPose', 'ArmPose7d'),
                ('rGripper', 'Vector1d')])
pp.add('EEPose', [('value', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Obstacle', [('geom', 'Box'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Rotation', [('value', 'Vector1d')])
pp.add('Can', [('geom', 'Can'), ('pose', 'Vector3d'), ('rotation', 'Vector3d')])
pp.add('Region', [('value', 'Vector2d')])
# pp.add('Fabric', [('gripleft', 'Vector3d'), ('gripright', 'Vector3d')])
dom_str += pp.get_str() + '\n\n'

class DerivatedPredicates(object):
    def __init__(self):
        self.pred_dict = {}

    def add(self, name, args):
        self.pred_dict[name] = args

    def get_str(self):
        prim_str = 'Derived Predicates: '

        first = True
        for name, args in list(self.pred_dict.items()):
            pred_str = name
            for arg in args:
                pred_str += ', ' + arg

            if first:
                prim_str += pred_str
                first = False
            else:
                prim_str += '; ' + pred_str
        return prim_str

dp = DerivatedPredicates()
dp.add('BaxterClothAt', ['Cloth', 'ClothTarget'])
dp.add('BaxterClothTargetVer', ['Cloth', 'ClothTarget'])
dp.add('BaxterClothTargetHor', ['Cloth', 'ClothTarget'])
dp.add('BaxterEdgeAt', ['Can', 'ClothTarget'])
dp.add('BaxterRobotAt', ['Robot', 'RobotPose'])
dp.add('BaxterIsMP', ['Robot'])
dp.add('BaxterWithinJointLimit', ['Robot'])
dp.add('BaxterObjectWithinRotLimit', ['EEPose'])
dp.add('BaxterStationaryCloth', ['Cloth'])
dp.add('BaxterStationaryNeqCloth', ['Cloth', 'Cloth'])
dp.add('BaxterStationaryEdge', ['Can'])
dp.add('BaxterStationaryBase', ['Robot'])
dp.add('BaxterStationaryArms', ['Robot'])
dp.add('BaxterStationaryW', ['Obstacle'])

dp.add('BaxterClothGraspValid', ['EEPose', 'ClothTarget'])
dp.add('BaxterCloseGripperLeft', ['Robot'])
dp.add('BaxterCloseGripperRight', ['Robot'])
dp.add('BaxterOpenGripperLeft', ['Robot'])
dp.add('BaxterOpenGripperRight', ['Robot'])
dp.add('BaxterCloseGrippers', ['Robot'])
dp.add('BaxterOpenGrippers', ['Robot'])
dp.add('BaxterObstructsCloth', ['Robot', 'RobotPose', 'RobotPose', 'Cloth'])
dp.add('BaxterRCollides', ['Robot', 'Obstacle'])
dp.add('BaxterRSelfCollides', ['Robot'])
dp.add('BaxterEEReachableLeftVer', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEReachableRightVer', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEReachableLeftHor', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEReachableRightHor', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEApproachLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEApproachRight', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEERetreatLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEERetreatRight', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEApproachOpenDoorLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEEApproachCloseDoorLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEERetreatOpenDoorLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterEERetreatCloseDoorLeft', ['Robot', 'RobotPose', 'EEPose'])
dp.add('BaxterClothInGripperLeft', ['Robot', 'Cloth'])
dp.add('BaxterClothInGripperRight', ['Robot', 'Cloth'])
dp.add('BaxterPoseAtRotation', ['RobotPose', 'Rotation'])
dp.add('BaxterWithinRotLimit', ['Robot'])
dp.add('BaxterGripperAtLeft', ['Robot', 'EEPose'])
dp.add('BaxterGripperAtRight', ['Robot', 'EEPose'])
dp.add('BaxterClothAtPose', ['Cloth', 'EEPose'])
dp.add('BaxterClothBothGraspValidLeft', ['EEPose', 'ClothTarget', 'Can'])
dp.add('BaxterClothBothGraspValidRight', ['EEPose', 'ClothTarget', 'Can'])
dp.add('BaxterBothEndsInGripper', ['Robot', 'Can'])
dp.add('BaxterClothTargetAtRegion', ['ClothTarget', 'Region'])

dom_str += dp.get_str() + '\n'

dom_str += """

# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold

"""

class Action(object):
    def __init__(self, name, timesteps, pre=None, post=None):
        pass

    def to_str(self):
        time_str = ''
        cond_str = '(and '
        for pre, timesteps in self.pre:
            cond_str += pre + ' '
            time_str += timesteps + ' '
        cond_str += ')'

        cond_str += '(and '
        for eff, timesteps in self.eff:
            cond_str += eff + ' '
            time_str += timesteps + ' '
        cond_str += ')'

        return "Action " + self.name + ' ' + str(self.timesteps) + ': ' + self.args + ' ' + cond_str + ' ' + time_str


class Move(Action):
    def __init__(self):
        self.name = 'moveto'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '{}:{}'.format(0, 0)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryCloth ?obs))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterWithinJointLimit ?robot)', '{}:{}'.format(0, end)),
            ('(BaxterOpenGrippers ?robot)', '{}:{}'.format(1, end-1)),
            ('(forall (?w - Obstacle) (not (BaxterRCollides ?robot ?w)))', '{}:{}'.format(0, end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
        ]
        self.eff = [\
            (' (not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))]


class MoveHoldingClothLeft(Action):
    def __init__(self):
        self.name = 'moveholding_cloth_left'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose ?cloth - Cloth)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(0, 0)),
            ('(BaxterCloseGrippers ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '0:{}'.format(end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]


class MoveHoldingClothRight(Action):
    def __init__(self):
        self.name = 'moveholding_cloth_right'
        self.timesteps = 20
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?start - RobotPose ?end - RobotPose ?cloth - Cloth)'
        self.pre = [\
            ('(BaxterRobotAt ?robot ?start)', '0:0'),
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(0, 0)),
            ('(BaxterCloseGrippers ?robot)', '0:{}'.format(end)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Obstacle) (BaxterStationaryW ?obs))', '0:{}'.format(end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle) (not (BaxterRCollides ?robot ?obs)))', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?start))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?end)', '{}:{}'.format(end, end))
        ]


class GraspLeftVertical(Action):
    def __init__(self):
        self.name = 'grasp_left_vertical'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterClothAt ?cloth ?target)', '0:0'),
            ('(BaxterClothTargetVer ?target)', '0:0'),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(grasp_time, end)),
            ('(not (BaxterClothInGripperRight ?robot ?cloth))', '{}:{}'.format(0, end)),
            ('(BaxterClothGraspValid ?ee_left ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(grasp_time,  end)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(1, grasp_time-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(not (BaxterClothAt ?cloth ?target))', '{}:{}'.format(end, end-1)) ,
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(end, end)),
        ]


class GraspRightVertical(Action):
    def __init__(self):
        self.name = 'grasp_right_vertical'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_right - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterClothAt ?cloth ?target)', '0:0'),
            ('(BaxterClothTargetVer ?target)', '0:0'),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableRightVer ?robot ?sp ?ee_right)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(grasp_time, end)),
            ('(not (BaxterClothInGripperLeft ?robot ?cloth))', '{}:{}'.format(0, end)),
            ('(BaxterClothGraspValid ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGripperRight ?robot)', '{}:{}'.format(grasp_time,  end)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(1, grasp_time-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(not (BaxterClothAt ?cloth ?target))', '{}:{}'.format(end, end-1)) ,
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(end, end)),
        ]


class GraspLeftHorizontal(Action):
    def __init__(self):
        self.name = 'grasp_left_horizontal'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterClothAt ?cloth ?target)', '0:0'),
            ('(BaxterClothTargetHor ?target)', '0:0'),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftHor ?robot ?sp ?ee_left)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(grasp_time, end)),
            ('(not (BaxterClothInGripperRight ?robot ?cloth))', '{}:{}'.format(0, end)),
            ('(BaxterClothGraspValid ?ee_left ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(grasp_time,  end)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(1, grasp_time-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(not (BaxterClothAt ?cloth ?target))', '{}:{}'.format(end, end-1)) ,
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(end, end)),
        ]


class GraspRightHorizontal(Action):
    def __init__(self):
        self.name = 'grasp_right_horizontal'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_right - EEPose ?ep - RobotPose)'
        grasp_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterClothAt ?cloth ?target)', '0:0'),
            ('(BaxterClothTargetHor ?target)', '0:0'),
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableRightHor ?robot ?sp ?ee_right)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(grasp_time, end)),
            ('(not (BaxterClothInGripperLeft ?robot ?cloth))', '{}:{}'.format(0, end)),
            ('(BaxterClothGraspValid ?ee_right ?target)', '{}:{}'.format(grasp_time, grasp_time)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(0,  grasp_time-1)),
            ('(BaxterCloseGripperRight ?robot)', '{}:{}'.format(grasp_time,  end)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(1, grasp_time-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end)),
        ]
        self.eff = [\
            ('(not (BaxterClothAt ?cloth ?target))', '{}:{}'.format(end, end-1)) ,
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(end, end)),
        ]


class PutdownLeftVertical(Action):
    def __init__(self):
        self.name = 'putdown_left_vertical'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
        putdown_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftVer ?robot ?sp ?ee_left)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(0, putdown_time)),
            ('(BaxterClothGraspValid ?ee_left ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(putdown_time,  end)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(0,  putdown_time-1)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(putdown_time, end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterClothAt ?cloth ?target)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(not (BaxterClothInGripperLeft ?robot ?cloth))', '{}:{}'.format(end, end-1)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructsCloth ?robot ?sym1 ?sym2 ?cloth))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]


class PutdownRightVertical(Action):
    def __init__(self):
        self.name = 'putdown_right_vertical'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_right - EEPose ?ep - RobotPose)'
        putdown_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableRightVer ?robot ?sp ?ee_right)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(0, putdown_time)),
            ('(BaxterClothGraspValid ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(putdown_time,  end)),
            ('(BaxterCloseGripperRight ?robot)', '{}:{}'.format(0,  putdown_time-1)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(putdown_time, end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterClothAt ?cloth ?target)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(not (BaxterClothInGripperRight ?robot ?cloth))', '{}:{}'.format(end, end-1)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructsCloth ?robot ?sym1 ?sym2 ?cloth))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]


class PutdownLeftHorizontal(Action):
    def __init__(self):
        self.name = 'putdown_left_vertical'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_left - EEPose ?ep - RobotPose)'
        putdown_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableLeftHor ?robot ?sp ?ee_left)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterClothInGripperLeft ?robot ?cloth)', '{}:{}'.format(0, putdown_time)),
            ('(BaxterClothGraspValid ?ee_left ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterOpenGripperLeft ?robot)', '{}:{}'.format(putdown_time,  end)),
            ('(BaxterCloseGripperLeft ?robot)', '{}:{}'.format(0,  putdown_time-1)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(putdown_time, end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterClothAt ?cloth ?target)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(not (BaxterClothInGripperLeft ?robot ?cloth))', '{}:{}'.format(end, end-1)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructsCloth ?robot ?sym1 ?sym2 ?cloth))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]


class PutdownRightHorizontal(Action):
    def __init__(self):
        self.name = 'putdown_right_horizontal'
        self.timesteps = 2 * const.EEREACHABLE_STEPS + 11
        end = self.timesteps - 1
        self.args = '(?robot - Robot ?cloth - Cloth ?target - ClothTarget ?sp - RobotPose ?ee_right - EEPose ?ep - RobotPose)'
        putdown_time = const.EEREACHABLE_STEPS+5
        approach_time = 5
        retreat_time = end-5
        self.pre = [\
            ('(BaxterRobotAt ?robot ?sp)', '0:0'),
            ('(BaxterEEReachableRightHor ?robot ?sp ?ee_right)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterClothInGripperRight ?robot ?cloth)', '{}:{}'.format(0, putdown_time)),
            ('(BaxterClothGraspValid ?ee_right ?target)', '{}:{}'.format(putdown_time, putdown_time)),
            ('(BaxterOpenGripperRight ?robot)', '{}:{}'.format(putdown_time,  end)),
            ('(BaxterCloseGripperRight ?robot)', '{}:{}'.format(0,  putdown_time-1)),
            ('(BaxterStationaryCloth ?cloth)', '{}:{}'.format(putdown_time, end-1)),
            ('(forall (?obs - Obstacle)\
                (BaxterStationaryW ?obs)\
            )', '{}:{}'.format(0, end-1)),
            ('(forall (?obs - Cloth) (BaxterStationaryNeqCloth ?obs ?cloth))', '0:{}'.format(end-1)),
            ('(BaxterStationaryBase ?robot)', '{}:{}'.format(0, end-1)),
            ('(BaxterIsMP ?robot)', '0:{}'.format(end-1)),
            ('(BaxterWithinJointLimit ?robot)', '0:{}'.format(end)),
            ('(not (BaxterRSelfCollides ?robot))', '1:{}'.format(end-1)),
            ('(forall (?obs - Obstacle)\
                (not (BaxterRCollides ?robot ?obs))\
            )', '0:{}'.format(end))
        ]
        self.eff = [\
            ('(BaxterClothAt ?cloth ?target)', '{}:{}'.format(end, end)),
            ('(not (BaxterRobotAt ?robot ?sp))', '{}:{}'.format(end, end-1)),
            ('(BaxterRobotAt ?robot ?ep)', '{}:{}'.format(end, end)),
            ('(not (BaxterClothInGripperRight ?robot ?cloth))', '{}:{}'.format(end, end)),
            ('(forall (?sym1 - RobotPose)\
                (forall (?sym2 - RobotPose)\
                    (not (BaxterObstructsCloth ?robot ?sym1 ?sym2 ?cloth))\
                )\
            )', '{}:{}'.format(end, end-1))
        ]


actions = [Move(), MoveHoldingClothLeft(), MoveHoldingClothRight(), 
           GraspLeftVertical(), GraspRightVertical(), GraspLeftHorizontal(), 
           GraspRightHorizontal(), PutdownLeftVertical(), PutdownRightVertical(), 
           PutdownLeftHorizontal(), PutdownRightHorizontal()]

for action in actions:
    dom_str += '\n\n'
    dom_str += action.to_str()

# removes all the extra spaces
dom_str = dom_str.replace('            ', '')
dom_str = dom_str.replace('    ', '')
dom_str = dom_str.replace('    ', '')

print(dom_str)
f = open('clutter.domain', 'w')
f.write(dom_str)
