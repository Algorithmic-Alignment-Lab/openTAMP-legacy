from IPython import embed as shell
import itertools
import numpy as np
import random

# SEED = 1234
NUM_PROBS = 1
NUM_CLOTHS = 5
NUM_SYMBOLS = 2 * NUM_CLOTHS
filename = "laundry_probs/clutter_sort.prob"
GOAL = "(BaxterRobotAt baxter robot_end_pose)"
for i in range(NUM_CLOTHS):
    GOAL.append(", (BaxterClothAt cloth{0} cloth{0}_end_target)".format(i))

# init Baxter pose
BAXTER_INIT_POSE = [0]
R_ARM_INIT = [-np.pi/4, -np.pi/4, 0, 0, 0, 0, 0]
L_ARM_INIT = [np.pi/4, -np.pi/4, 0, 0, 0, 0, 0]
INT_GRIPPER = [0.02]
CLOSE_GRIPPER = [0.015]


ROBOT_DIST_FROM_TABLE = 0.05
SHELVES_GEOM = [0.25, 0.5, 0.522, 8]
SHELVES_POS = [1.75, 0.0, 0.522]
SHELVES_ROT = [0, 0, 0]

LEFT_TABLE_GEOM = [0.3, 0.6, 0.018]
LEFT_TABLE_POS = [0.75, 0.02, 0.522]
LEFT_TABLE_ROT = [0, 0, 0]

RIGHT_TABLE_GEOM = [0.3, 0.6, 0.018]
RIGHT_TABLE_POS = [0.75, 0.02, 0.522]
RIGHT_TABLE_ROT = [0, 0, 0]


def get_baxter_str(name, LArm = L_ARM_INIT, RArm = R_ARM_INIT, G = INT_GRIPPER, Pos = BAXTER_INIT_POSE):
    s = ""
    s += "(geom {})".format(name)
    s += "(lArmPose {} {}), ".format(name, LArm)
    s += "(lGripper {} {}), ".format(name, G)
    s += "(rArmPose {} {}), ".format(name, RArm)
    s += "(rGripper {} {}), ".format(name, G)
    s += "(pose {} {}), ".format(name, Pos)
    return s

def get_robot_pose_str(name, LArm = L_ARM_INIT, RArm = R_ARM_INIT, G = INT_GRIPPER, Pos = BAXTER_INIT_POSE):
    s = ""
    s += "(lArmPose {} {}), ".format(name, LArm)
    s += "(lGripper {} {}), ".format(name, G)
    s += "(rArmPose {} {}), ".format(name, RArm)
    s += "(rGripper {} {}), ".format(name, G)
    s += "(value {} {}), ".format(name, Pos)
    return s

def get_undefined_robot_pose_str(name):
    s = ""
    s += "(lArmPose {} undefined), ".format(name)
    s += "(lGripper {} undefined), ".format(name)
    s += "(rArmPose {} undefined), ".format(name)
    s += "(rGripper {} undefined), ".format(name)
    s += "(value {} undefined), ".format(name)
    return s

def get_underfine_symbol(name):
    s = ""
    s += "(value {} undefined), ".format(name)
    s += "(rotation {} undefined), ".format(name)
    return s


def main():
    for iteration in range(NUM_PROBS):
        s = "# AUTOGENERATED. DO NOT EDIT.\n# Configuration file for CAN problem instance. Blank lines and lines beginning with # are filtered out.\n\n"

        s += "# The values after each attribute name are the values that get passed into the __init__ method for that attribute's class defined in the domain configuration.\n"
        s += "Objects: "

        s += "Robot (name {}); ".format("baxter")
        for i in range(NUM_SYMBOLS):
            s += "EEPose (name {}); ".format("cg_ee_{0}".format(i))
            s += "EEPose (name {}); ".format("cp_ee_{0}".format(i))
            s += "RobotPose (name {}); ".format("cloth_grasp_begin_{0}".format(i))
            s += "RobotPose (name {}); ".format("cloth_grasp_end_{0}".format(i))
            s += "RobotPose (name {}); ".format("cloth_putdown_begin_{0}".format(i))
            s += "RobotPose (name {}); ".format("cloth_putdown_end_{0}".format(i))
        
        s += "RobotPose (name {}); ".format("robot_init_pose")
        s += "RobotPose (name {}); ".format("robot_end_pose")

        for i in range(NUM_CLOTHS):
            s += "Cloth (name {}); ".format("cloth{0}".format(i))
            s += "ClothTarget (name {}); ".format("cloth{0}_init_target".format(i))
            s += "ClothTarget (name {});".format("cloth{0}_end_target".format(i))

        s += "Obstacle (name {}); ".format("shelves")
        s += "Obstacle (name {}); ".format("left_table")
        s += "Obstacle (name {}) \n\n".format("right_table")

        s += "Init: "
        for i in range(NUM_CLOTHS):
            s += "(geom cloth{0}), ".format(i)
            s += "(pose cloth{0} {1}), ".format(i, [0, 0, 0])
            s += "(rotation cloth{0} {1}), ".format(i, [0, 0, 0])

            s += "(value cloth{0}_init_target {}), ".format(i, [0, 0, 0])
            s += "(rotation cloth{0}_init_target {}), ".format(i, [0, 0, 0])

            s += "(value cloth{0}_end_target {}), ".format(i, [0, 0, 0])
            s += "(rotation cloth{0}_end_target {}), ".format(i, [0, 0, 0])

        s += get_baxter_str('baxter', L_ARM_INIT, R_ARM_INIT, INT_GRIPPER, BAXTER_INIT_POSE)
        s += get_robot_pose_str('robot_init_pose', L_ARM_INIT, R_ARM_INIT, INT_GRIPPER, BAXTER_INIT_POSE)
        for i in range(NUM_SYMBOLS):
            s += get_undefined_robot_pose_str("cloth_grasp_begin_{0}".format(i))
            s += get_undefined_robot_pose_str("cloth_grasp_end_{0}".format(i))
            s += get_undefined_robot_pose_str("cloth_putdown_begin_{0}".format(i))
            s += get_undefined_robot_pose_str("cloth_putdown_end_{0}".format(i))
            s += get_underfine_symbol("cg_ee_{0}".format(i))
            s += get_underfine_symbol("cp_ee_{0}".format(i))
        s += get_robot_pose_str('robot_end_pose', L_ARM_INIT, R_ARM_INIT, INT_GRIPPER, BAXTER_INIT_POSE)

        s += "(geom left_table {}), ".format(LEFT_TABLE_GEOM)
        s += "(pose left_table {}), ".format(LEFT_TABLE_POS)
        s += "(rotation left_table {}), ".format(LEFT_TABLE_ROT)

        s += "(geom right_table {}), ".format(RIGHT_TABLE_GEOM)
        s += "(pose right_table {}), ".format(RIGHT_TABLE_POS)
        s += "(rotation right_table {}), ".format(RIGHT_TABLE_ROT)

        s += "(geom shelves {}), ".format(SHELVES_GEOM)
        s += "(pose shelves {}), ".format(SHELVES_POS)
        s += "(rotation shelves {}); ".format(SHELVES_ROT)

        s += "(BaxterRobotAt baxter robot_init_pose), "
        for i in range(NUM_CLOTHS):
            s += "(BaxterClothTargetHor cloth{0}_end_target), ".format(i)

        for i in range(NUM_CLOTHS):
            s += "(BaxterClothTargetVer cloth{0}_end_target), ".format(i)

        s += "(BaxterStationaryBase baxter), "
        s += "(BaxterIsMP baxter), "
        s += "(BaxterWithinJointLimit baxter), "
        s += "(BaxterStationaryW table) \n\n"

        s += "Goal: {}".format(GOAL)

        with open(filename, "w") as f:
            f.write(s)

if __name__ == "__main__":
    main()
