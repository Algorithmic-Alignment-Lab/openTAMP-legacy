from IPython import embed as shell
import itertools
import numpy as np
import random

# SEED = 1234
NUM_PROBS = 1
NUM_CLOTHS = 0
NUM_SYMBOLS = NUM_CLOTHS
filename = "laundry_probs/fold.prob"
GOAL = "(BaxterRobotAt baxter robot_end_pose)"
for i in range(NUM_CLOTHS):
    GOAL += ", (BaxterClothAt cloth{0} cloth{0}_end_target)".format(i)


CLOTH_CAPSULES = (6, 3)

# init Baxter pose
BAXTER_INIT_POSE = [0]
R_ARM_INIT = [-np.pi/4, -np.pi/4, 0, 0, 0, 0, 0]
L_ARM_INIT = [np.pi/4, -np.pi/4, 0, 0, 0, 0, 0]
INT_GRIPPER = [0.02]
CLOSE_GRIPPER = [0.015]


ROBOT_DIST_FROM_TABLE = 0.05

# TABLE_GEOM = [1.4, 1.4, 0.97/2]
TABLE_GEOM = [0.3, 0.6, 0.97/2]
# TABLE_POS = [0, 0, 0.97/2-0.375]
TABLE_POS = [0.75, 0.0, 0.97/2-0.375]
TABLE_ROT = [0,0,0]


def get_baxter_str(name, LArm = L_ARM_INIT, RArm = R_ARM_INIT, G = INT_GRIPPER, Pos = BAXTER_INIT_POSE):
    s = ""
    s += "(geom {})".format(name)
    s += "(lArmPose {} {}), ".format(name, LArm)
    s += "(lGripper {} {}), ".format(name, G)
    s += "(rArmPose {} {}), ".format(name, RArm)
    s += "(rGripper {} {}), ".format(name, G)
    s += "(pose {} {}), ".format(name, Pos)
    return s

def get_robot_pose_str(name, LArm = L_ARM_INIT, RArm = R_ARM_INIT, G = INT_GRIPPER, Pos = BAXTER_INIT_POSE):
    s = ""
    s += "(lArmPose {} {}), ".format(name, LArm)
    s += "(lGripper {} {}), ".format(name, G)
    s += "(rArmPose {} {}), ".format(name, RArm)
    s += "(rGripper {} {}), ".format(name, G)
    s += "(value {} {}), ".format(name, Pos)
    return s

def get_undefined_robot_pose_str(name):
    s = ""
    s += "(lArmPose {} undefined), ".format(name)
    s += "(lGripper {} undefined), ".format(name)
    s += "(rArmPose {} undefined), ".format(name)
    s += "(rGripper {} undefined), ".format(name)
    s += "(value {} undefined), ".format(name)
    return s

def get_underfine_symbol(name):
    s = ""
    s += "(value {} undefined), ".format(name)
    s += "(rotation {} undefined), ".format(name)
    return s


def main():
    for iteration in range(NUM_PROBS):
        s = "# AUTOGENERATED. DO NOT EDIT.\n# Configuration file for CAN problem instance. Blank lines and lines beginning with # are filtered out.\n\n"

        s += "# The values after each attribute name are the values that get passed into the __init__ method for that attribute's class defined in the domain configuration.\n"
        s += "Objects: "

        s += "Robot (name {}); ".format("baxter")
        s += "EEPose (name left_rest_pose); "
        s += "EEPose (name right_rest_pose); "
        s += "EEPose (name left_target_pose); "
        s += "EEPose (name right_target_pose); "

        # Finishing drag so both hands can reach
        s += "EEPose (name left_one_hand_1); "
        s += "EEPose (name right_one_hand_1); "

        # When lifting with both hands to get twist fold
        s += "EEPose (name left_two_hand_1); "
        s += "EEPose (name right_two_hand_1); "

        # When placing with both hands to get twist fold
        s += "EEPose (name left_two_hand_2); "
        s += "EEPose (name right_two_hand_2); "

        # When lifting from twist fold
        s += "EEPose (name left_two_hand_3); "
        s += "EEPose (name right_two_hand_3); "
        s += "EEPose (name front_two_hand_3); "
        s += "EEPose (name back_two_hand_3); "

        # Halfway through the first fold
        s += "EEPose (name left_two_hand_4); "
        s += "EEPose (name right_two_hand_4); "


        # Finishing the first fold
        s += "EEPose (name left_two_hand_5); "
        s += "EEPose (name right_two_hand_5); "

        s += "EEPose (name {}); ".format("cg_ee_left")
        s += "EEPose (name {}); ".format("cp_ee_left")
        s += "EEPose (name {}); ".format("cg_ee_right")
        s += "EEPose (name {}); ".format("cp_ee_right")
        s += "RobotPose (name {}); ".format("cloth_grasp_begin")
        s += "RobotPose (name {}); ".format("cloth_grasp_end")
        s += "RobotPose (name {}); ".format("cloth_putdown_begin")
        s += "RobotPose (name {}); ".format("cloth_putdown_end")
        
        for i in range(NUM_SYMBOLS):
            s += "EEPose (name {}); ".format("cg_ee_left_{0}".format(i))
            s += "EEPose (name {}); ".format("cp_ee_left_{0}".format(i))
            s += "EEPose (name {}); ".format("cg_ee_right_{0}".format(i))
            s += "EEPose (name {}); ".format("cp_ee_right_{0}".format(i))
            s += "RobotPose (name {}); ".format("cloth_grasp_begin_{0}".format(i))
            s += "RobotPose (name {}); ".format("cloth_grasp_end_{0}".format(i))
            s += "RobotPose (name {}); ".format("cloth_putdown_begin_{0}".format(i))
            s += "RobotPose (name {}); ".format("cloth_putdown_end_{0}".format(i))
        
        s += "RobotPose (name {}); ".format("robot_init_pose")
        s += "RobotPose (name {}); ".format("robot_end_pose")

        for i in range(NUM_CLOTHS):
            s += "Cloth (name {}); ".format("cloth{0}".format(i))
            s += "ClothTarget (name {}); ".format("cloth{0}_init_target".format(i))
            s += "ClothTarget (name {});".format("cloth{0}_end_target".format(i))

        s += "Cloth (name left_corner); "
        s += "Cloth (name right_corner); "
        s += "Cloth (name leftmost); "
        s += "Cloth (name rightmost); "
        s += "Cloth (name highest_left); "
        s += "Cloth (name highest_right); "
        s += "ClothTarget (name left_corner_init_target); "
        s += "ClothTarget (name left_corner_end_target); "
        s += "ClothTarget (name right_corner_init_target); "
        s += "ClothTarget (name right_corner_end_target); "
        s += "Can (name {});".format("long_edge")
        s += "Can (name {});".format("short_edge")
        s += "Can (name {});".format("diagonal_edge")
        s += "ClothTarget (name short_edge_init_target); "
        s += "ClothTarget (name short_edge_end_target); "
        s += "ClothTarget (name long_edge_init_target); "
        s += "ClothTarget (name long_edge_end_target); "
        s += "ClothTarget (name diagonal_edge_init_target); "
        s += "ClothTarget (name diagonal_edge_end_target); "


        s += "Obstacle (name {}); \n\n".format("table")

        s += "Init: "
        s += "(value left_rest_pose {0}), ".format([0.6, 0.5, 0.7])
        s += "(rotation left_rest_pose {0}), ".format([0, 1.57, 0])

        s += "(value right_rest_pose {0}), ".format([0.6, -0.5, 0.7])
        s += "(rotation right_rest_pose {0}), ".format([0, 1.57, 0])

        s += "(value left_target_pose {0}), ".format([0.6, 0.5, 0.7])
        s += "(rotation left_target_pose {0}), ".format([0, 1.57, 0])

        s += "(value right_target_pose {0}), ".format([0.6, -0.5, 0.7])
        s += "(rotation right_target_pose {0}), ".format([0, 1.57, 0])

        s += "(value left_one_hand_1 {0}), ".format([0.55, -0.2, 0.65])
        s += "(rotation left_one_hand_1 {0}), ".format([0, 0, 0])

        s += "(value right_one_hand_1 {0}), ".format([0.55, 0.2, 0.65])
        s += "(rotation right_one_hand_1 {0}), ".format([0, 0, 0])

        s += "(value left_two_hand_1 {0}), ".format([0.5, 0.2, 0.725])
        s += "(rotation left_two_hand_1 {0}), ".format([0, 0, 0])

        s += "(value right_two_hand_1 {0}), ".format([0.5, -0.2, 0.725])
        s += "(rotation right_two_hand_1 {0}), ".format([0, 0, 0])

        s += "(value left_two_hand_2 {0}), ".format([0.75, 0.2, 0.65])
        s += "(rotation left_two_hand_2 {0}), ".format([0, 0, 0])

        s += "(value right_two_hand_2 {0}), ".format([0.75, -0.2, 0.65])
        s += "(rotation right_two_hand_2 {0}), ".format([0, 0, 0])

        s += "(value left_two_hand_3 {0}), ".format([0.45, 0.1, 0.85])
        s += "(rotation left_two_hand_3 {0}), ".format([0, 0, 0])

        s += "(value right_two_hand_3 {0}), ".format([0.45, -0.1, 0.85])
        s += "(rotation right_two_hand_3 {0}), ".format([0, 0, 0])

        s += "(value front_two_hand_3 {0}), ".format([0.75, 0., 0.9])
        s += "(rotation front_two_hand_3 {0}), ".format([0, 0, 0])

        s += "(value back_two_hand_3 {0}), ".format([0.55, 0., 0.9])
        s += "(rotation back_two_hand_3 {0}), ".format([0, 0, 0])

        s += "(value left_two_hand_4 {0}), ".format([0.75, 0.1, 0.8])
        s += "(rotation left_two_hand_4 {0}), ".format([0, 0, 0])

        s += "(value right_two_hand_4 {0}), ".format([0.75, -0.1, 0.8])
        s += "(rotation right_two_hand_4 {0}), ".format([0, 0, 0])

        s += "(value left_two_hand_5 {0}), ".format([0.45, 0.1, 0.675])
        s += "(rotation left_two_hand_5 {0}), ".format([0, 0, 0])

        s += "(value right_two_hand_5 {0}), ".format([0.45, -0.1, 0.675])
        s += "(rotation right_two_hand_5 {0}), ".format([0, 0, 0])

        for i in range(NUM_CLOTHS):
            s += "(geom cloth{0}), ".format(i)
            s += "(pose cloth{0} {1}), ".format(i, [0, 0, 0.615])
            s += "(rotation cloth{0} {1}), ".format(i, [0, 0, 0])

            s += "(value cloth{0}_init_target {1}), ".format(i, [0, 0, 0.615])
            s += "(rotation cloth{0}_init_target {1}), ".format(i, [0, 0, 0])

            s += "(value cloth{0}_end_target {1}), ".format(i, [0, 0, 0.615])
            s += "(rotation cloth{0}_end_target {1}), ".format(i, [0, 0, 0])

        s += "(pose short_edge {0}), ".format([0, 0, 0])
        s += "(rotation short_edge {0}), ".format([0, 0, 0])
        s += "(geom short_edge {0} {1}), ".format(0.01, 0.375)
        s += "(value short_edge_init_target {0}), ".format([0, 0, 0])
        s += "(rotation short_edge_init_target {0}), ".format([0, 0, 0])
        s += "(value short_edge_end_target {0}), ".format([0, 0, 0])
        s += "(rotation short_edge_end_target {0}), ".format([0, 0, 0])

        s += "(pose long_edge {0}), ".format([0, 0, 0])
        s += "(rotation long_edge {0}), ".format([0, 0, 0])
        s += "(geom long_edge {0} {1}), ".format(0.01, 0.175)
        s += "(value long_edge_init_target {0}), ".format([0, 0, 0])
        s += "(rotation long_edge_init_target {0}), ".format([0, 0, 0])
        s += "(value long_edge_end_target {0}), ".format([0, 0, 0])
        s += "(rotation long_edge_end_target {0}), ".format([0, 0, 0])

        s += "(pose diagonal_edge {0}), ".format([0, 0, 0])
        s += "(rotation diagonal_edge {0}), ".format([0, 0, 0])
        s += "(geom diagonal_edge {0} {1}), ".format(0.01, 0.425)
        s += "(value diagonal_edge_init_target {0}), ".format([0, 0, 0])
        s += "(rotation diagonal_edge_init_target {0}), ".format([0, 0, 0])
        s += "(value diagonal_edge_end_target {0}), ".format([0, 0, 0])
        s += "(rotation diagonal_edge_end_target {0}), ".format([0, 0, 0])

        s += "(geom left_corner), "
        s += "(pose left_corner {0}), ".format([0, 0, 0])
        s += "(rotation left_corner {0}), ".format([0, 0, 0])
        s += "(geom right_corner), "
        s += "(pose right_corner {0}), ".format([0, 0, 0])
        s += "(rotation right_corner {0}), ".format([0, 0, 0])

        s += "(geom leftmost), "
        s += "(pose leftmost {0}), ".format([0, 0, 0])
        s += "(rotation leftmost {0}), ".format([0, 0, 0])
        s += "(geom rightmost), "
        s += "(pose rightmost {0}), ".format([0, 0, 0])
        s += "(rotation rightmost {0}), ".format([0, 0, 0])
        s += "(geom highest_left), "
        s += "(pose highest_left {0}), ".format([0, 0, 0])
        s += "(rotation highest_left {0}), ".format([0, 0, 0])
        s += "(geom highest_right), "
        s += "(pose highest_right {0}), ".format([0, 0, 0])
        s += "(rotation highest_right {0}), ".format([0, 0, 0])

        s += "(value left_corner_init_target {0}),".format([0.5, 0.5, 0.65])
        s += "(rotation left_corner_init_target {0}),".format([0, 0, 0])
        s += "(value right_corner_init_target {0}), ".format([0.5, -0.5, 0.65])
        s += "(rotation right_corner_init_target {0}), ".format([0, 0, 0])

        s += "(value left_corner_end_target {0}), ".format([0, 0, 0])
        s += "(rotation left_corner_end_target {0}), ".format([0, 0, 0])
        s += "(value right_corner_end_target {0}), ".format([0, 0, 0])
        s += "(rotation right_corner_end_target {0}), ".format([0, 0, 0])

        s += get_baxter_str('baxter', L_ARM_INIT, R_ARM_INIT, INT_GRIPPER, BAXTER_INIT_POSE)
        s += get_robot_pose_str('robot_init_pose', L_ARM_INIT, R_ARM_INIT, INT_GRIPPER, BAXTER_INIT_POSE)
        s += get_undefined_robot_pose_str("cloth_grasp_begin")
        s += get_undefined_robot_pose_str("cloth_grasp_end")
        s += get_undefined_robot_pose_str("cloth_putdown_begin")
        s += get_undefined_robot_pose_str("cloth_putdown_end")
        s += get_underfine_symbol("cg_ee_left")
        s += get_underfine_symbol("cp_ee_left")
        s += get_underfine_symbol("cg_ee_right")
        s += get_underfine_symbol("cp_ee_right")
        for i in range(NUM_SYMBOLS):
            s += get_undefined_robot_pose_str("cloth_grasp_begin_{0}".format(i))
            s += get_undefined_robot_pose_str("cloth_grasp_end_{0}".format(i))
            s += get_undefined_robot_pose_str("cloth_putdown_begin_{0}".format(i))
            s += get_undefined_robot_pose_str("cloth_putdown_end_{0}".format(i))
            s += get_underfine_symbol("cg_ee_left_{0}".format(i))
            s += get_underfine_symbol("cp_ee_left_{0}".format(i))
            s += get_underfine_symbol("cg_ee_right_{0}".format(i))
            s += get_underfine_symbol("cp_ee_right_{0}".format(i))
        s += get_undefined_robot_pose_str('robot_end_pose')

        s += "(geom table {}), ".format(TABLE_GEOM)
        s += "(pose table {}), ".format(TABLE_POS)
        s += "(rotation table {}); ".format(TABLE_ROT)

        s += "(BaxterRobotAt baxter robot_init_pose), "
        # for i in range(NUM_CLOTHS):
        #     s += "(BaxterClothTargetHor cloth{0}_end_target), ".format(i)

        # for i in range(NUM_CLOTHS):
        #     s += "(BaxterClothTargetVer cloth{0}_end_target), ".format(i)

        s += "(BaxterStationaryBase baxter), "
        s += "(BaxterIsMP baxter), "
        s += "(BaxterWithinJointLimit baxter), "
        s += "(BaxterTargetWithinReachLeft left_corner_init_target), "
        s += "(BaxterTargetWithinReachRight right_corner_init_target), "
        s += "(BaxterStationaryW table) \n\n"

        s += "Goal: {}".format(GOAL)

        with open(filename, "w") as f:
            f.write(s)

if __name__ == "__main__":
    main()
