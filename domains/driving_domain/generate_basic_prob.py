from IPython import embed as shell
import itertools
import numpy as np
import random

filename = "driving_probs/basic.prob"
GOAL = "(VehicleAt user end)"


VEHICLE_INIT_XY = [1., 45.]
VEHICLE_INIT_THETA = [0.]
VEHICLE_INIT_VEL = [0.]
VEHICLE_INIT_PHI = [0.]
VEHICLE_INIT_U1 = [0.]
VEHICLE_INIT_U2 = [0.]

VEHICLE_WHEELBASE = 3.
VEHICLE_WIDTH = 1.5

ROAD_XY = [60., 45.]
ROAD_DIR = [0.]
NUM_LANES = 1.
LANE_WIDTH = 3.
ROAD_LEN = 120.

X_LIMIT = 120.
Y_LIMIT = 90.

VEL_U_LIMIT = 11.176 # 25 mph
VEL_L_LIMIT = -2. # Only go slow in reverse
ACC_U_LIMIT = 1.
ACC_L_LIMIT = -2.

def get_vehicle_str(name, xy=VEHICLE_INIT_XY, theta=VEHICLE_INIT_THETA, vel=VEHICLE_INIT_VEL, phi=VEHICLE_INIT_PHI, u1=VEHICLE_INIT_U1, u2=VEHICLE_INIT_U2, user=True):
    s = ""
    s += "(geom {} 2 {} {} {} {} {} {})".format(name, xy[0], xy[1], theta[0], VEHICLE_WHEELBASE, VEHICLE_WIDTH, user)
    s += "(xy {} {}), ".format(name, xy)
    s += "(theta {} {}), ".format(name, theta)
    s += "(vel {} {}), ".format(name, vel)
    s += "(phi {} {}), ".format(name, phi)
    s += "(u1 {} {}), ".format(name, u1)
    s += "(u2 {} {}), ".format(name, u2)
    return s

def get_vehicle_pose_str(name, xy=VEHICLE_INIT_XY, theta=VEHICLE_INIT_THETA, vel=VEHICLE_INIT_VEL, phi=VEHICLE_INIT_PHI, u1=VEHICLE_INIT_U1, u2=VEHICLE_INIT_U2):
    s = ""
    s += "(value {} 0)".format(name)
    s += "(xy {} {}), ".format(name, xy)
    s += "(theta {} {}), ".format(name, theta)
    s += "(vel {} {}), ".format(name, vel)
    s += "(phi {} {}), ".format(name, phi)
    s += "(u1 {} {}), ".format(name, u1)
    s += "(u2 {} {}), ".format(name, u2)
    return s

def get_undefined_vehicle_pose_str(name):
    s = ""
    s += "(xy {} undefined), ".format(name)
    s += "(theta {} undefined), ".format(name)
    s += "(vel {} undefined), ".format(name)
    s += "(phi {} undefined), ".format(name)
    s += "(u1 {} undefined), ".format(name)
    s += "(u2 {} undefined), ".format(name)
    s += "(value {} undefined), ".format(name)
    return s

def get_undefined_symbol(name):
    s = ""
    s += "(value {} undefined), ".format(name)
    return s

def main():
    for iteration in range(NUM_PROBS):
        s = "# AUTOGENERATED. DO NOT EDIT.\n# Configuration file for CAN problem instance. Blank lines and lines beginning with # are filtered out.\n\n"

        s += "# The values after each attribute name are the values that get passed into the __init__ method for that attribute's class defined in the domain configuration.\n"
        s += "Objects: "
        s += "Vehicle (name {}); ".format("user0")
        s += "VehiclePose (name {}); ".format("start0")
        s += "VehiclePose (name {}); ".format("end0")
        s += "Road (name {}); ".format("road0")
        s += "Limit (name {}); ".format("x_limit")
        s += "Limit (name {}); ".format("y_limit")
        s += "Limit (name {}); ".format("vu_limit")
        s += "Limit (name {}); ".format("vl_limit")
        s += "Limit (name {}); ".format("au_limit")
        s += "Limit (name {}); ".format("al_limit")

        s += "Init: "
        s += get_vehicle_str('user0')

        s += "(geom road0 0 {} {} {} {} {} {}), ".format(ROAD_XY[0], ROAD_XY[1], ROAD_LEN. ROAD_DIR, NUM_LANES, LANE_WIDTH)
        s += '(xy road0 {}), '.format(ROAD_XY)
        s ++ '(dir road0 {}), '.format(ROAD_DIR)

        s += get_vehicle_pose_str('start0')
        s += get_undefined_vehicle_pose_str('end0')

        s += "(value x_limit {}), ".format(X_LIMIT)
        s += "(value y_limit {}), ".format(Y_LIMIT)
        s += "(value vu_limit {}), ".format(VU_LIMIT)
        s += "(value vl_limit {}), ".format(VL_LIMIT)
        s += "(value au_limit {}), ".format(AU_LIMIT)
        s += "(value al_limit {});".format(AL_LIMIT)


        s += "(VehicleAt vehicle0 start0) \n\n"

        s += "Goal: {}".format(GOAL)

        with open(filename, "w") as f:
            f.write(s)

if __name__ == "__main__":
    main()
