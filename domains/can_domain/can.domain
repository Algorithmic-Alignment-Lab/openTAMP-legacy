
# AUTOGENERATED. DO NOT EDIT.
# Configuration file for CAN domain. Blank lines and lines beginning with # are filtered out.

# implicity, all types require a name
Types: Can, Target, RobotPose, Robot, EEPose, Obstacle

# Define the class location of each non-standard attribute type used in the above parameter type descriptions.
Attribute Import Paths: RedCan core.util_classes.can, BlueCan core.util_classes.can, PR2 core.util_classes.pr2, Vector1d core.util_classes.matrix, Vector3d core.util_classes.matrix, PR2ArmPose core.util_classes.matrix, Table core.util_classes.table, Box core.util_classes.box

Predicates Import Path: core.util_classes.pr2_predicates

Primitive Predicates: geom, Target, BlueCan; value, Target, Vector3d; rotation, Target, Vector3d; geom, Robot, PR2; pose, Robot, Vector3d; backHeight, Robot, Vector1d; lArmPose, Robot, PR2ArmPose; lGripper, Robot, Vector1d; rArmPose, Robot, PR2ArmPose; rGripper, Robot, Vector1d; value, RobotPose, Vector3d; backHeight, RobotPose, Vector1d; lArmPose, RobotPose, PR2ArmPose; lGripper, RobotPose, Vector1d; rArmPose, RobotPose, PR2ArmPose; rGripper, RobotPose, Vector1d; geom, Obstacle, Box; pose, Obstacle, Vector3d; rotation, Obstacle, Vector3d; geom, Can, RedCan; pose, Can, Vector3d; rotation, Can, Vector3d; value, EEPose, Vector3d; rotation, EEPose, Vector3d

Derived Predicates: Obstructs, Robot, RobotPose, RobotPose, Can; IsMP, Robot; ObstructsHolding, Robot, RobotPose, RobotPose, Can, Can; Collides, Can, Obstacle; InGripperRot, Robot, Can; RCollides, Robot, Obstacle; GraspValid, EEPose, Target; EEReachable, Robot, RobotPose, EEPose; GraspValidRot, EEPose, Target; WithinJointLimit, Robot; InGripper, Robot, Can; EEReachableRot, Robot, RobotPose, EEPose; At, Can, Target; StationaryArms, Robot; RobotAt, Robot, RobotPose; InContact, Robot, EEPose, Target; StationaryBase, Robot; Stationary, Can; StationaryW, Obstacle; StationaryNEq, Can, Can


# The first set of parentheses after the colon contains the
# parameters. The second contains preconditions and the third contains
# effects. This split between preconditions and effects is only used
# for task planning purposes. Our system treats all predicates
# similarly, using the numbers at the end, which specify active
# timesteps during which each predicate must hold



Action moveto 40: (?robot - Robot ?start - RobotPose ?end - RobotPose) (and (forall (?c - Can)(not (InGripper ?robot ?c))) (forall (?c - Can)(not (InGripperRot ?robot ?c))) (RobotAt ?robot ?start) (forall (?w - Obstacle) (StationaryW ?w)) (StationaryArms ?robot) (IsMP ?robot) (WithinJointLimit ?robot) (forall (?w - Obstacle) (not (RCollides ?robot ?w))) )(and (not (RobotAt ?robot ?start)) (RobotAt ?robot ?end) ) 0:0 0:0 0:0 0:38 0:38 0:38 0:39 0:39 39:39 39:39 

Action movetoholding 20: (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can) (and (RobotAt ?robot ?start) (InGripper ?robot ?c) (InGripperRot ?robot ?c) (forall (?obj - Can) (StationaryNEq ?obj ?c)) (forall (?w - Obstacle) (StationaryW ?w)) (StationaryArms ?robot) (IsMP ?robot) (WithinJointLimit ?robot) )(and (not (RobotAt ?robot ?start)) (RobotAt ?robot ?end) ) 0:0 0:19 0:19 0:18 0:18 0:18 0:18 0:19 19:19 19:19 

Action grasp 40: (?robot - Robot ?can - Can ?target - Target ?sp - RobotPose ?ee - EEPose ?ep - RobotPose) (and (At ?can ?target) (RobotAt ?robot ?sp) (EEReachable ?robot ?sp ?ee) (EEReachableRot ?robot ?sp ?ee) (InContact ?robot ?ee ?target) (GraspValid ?ee ?target) (GraspValidRot ?ee ?target) (forall (?obj - Can)(not (InGripper ?robot ?obj))) (forall (?obj - Can)(not (InGripperRot ?robot ?obj))) (forall (?obj - Can) (Stationary ?obj)) (forall (?obj - Can) (StationaryNEq ?obj ?can)) (forall (?w - Obstacle)(StationaryW ?w)) (WithinJointLimit ?robot) (forall (?w - Obstacle)(not (RCollides ?robot ?w))) (forall (?obj - Can)(not (Obstructs ?robot ?sp ?ep ?obj))) (forall (?obj - Can)(not (ObstructsHolding ?robot ?sp ?ep ?obj ?can))) )(and (not (At ?can ?target)) (not (RobotAt ?robot ?sp)) (RobotAt ?robot ?ep) (InGripper ?robot ?can) (InGripperRot ?robot ?can) (forall (?sym1 - RobotPose)(forall (?sym2 - RobotPose)(not (Obstructs ?robot ?sym1 ?sym2 ?can)))) (forall (?sym1 - Robotpose)(forall (?sym2 - RobotPose)(forall (?obj - Can) (not (ObstructsHolding ?robot ?sym1 ?sym2 ?can ?obj))))) ) 0:0 0:0 20:20 17:23 20:38 20:20 20:20 0:0 0:0 0:19 20:38 0:38 0:39 0:39 0:17 18:39 39:38 39:38 39:39 21:39 21:39 39:38 39:38 

Action putdown 20: (?robot - Robot ?can - Can ?target - Target ?sp - RobotPose ?ee - EEPose ?ep - RobotPose) (and (RobotAt ?robot ?sp) (EEReachable ?robot ?sp ?ee) (EEReachableRot ?robot ?sp ?ee) (InContact ?robot ?ee ?target) (GraspValid ?ee ?target) (GraspValidRot ?ee ?target) (InGripper ?robot ?can) (InGripperRot ?robot ?can) (forall (?obj - Can)(Stationary ?obj)) (forall (?obj - Can) (StationaryNEq ?obj ?can)) (forall (?w - Obstacle)(StationaryW ?w)) (StationaryBase ?robot) (IsMP ?robot) (WithinJointLimit ?robot) )(and (not (RobotAt ?robot ?sp)) (RobotAt ?robot ?ep) (At ?can ?target) (not (InGripper ?robot ?can)) (not (InGripperRot ?robot ?can)) ) 0:0 10:10 10:10 0:10 0:0 0:0 0:10 0:10 10:18 0:9 0:18 0:18 0:18 0:19 19:19 19:19 19:19 19:19 19:19 