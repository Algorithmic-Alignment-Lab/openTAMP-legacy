from IPython import embed as shell
import itertools
import random

SEED = 1234
NUM_PROBS = 5
WIDTH = 8
LENGTH = 9
SIZE = 1
NUM_CANS = 1 # each can i starts at target i, so we must have NUM_CANS <= NUM_TARGETS
NUM_TARGETS = 1
GOAL = "(RobotAt pr2 robot_end_pose)"

CAN_ROTATION_INIT = [0,0,0]
CAN_GEOM = [0.05, 0.25]

BACKHEIGHT_INIT = [0.3]
# referred to as side2 pose in rapprentice
R_ARM_INIT = [-1.832, -0.332, -1.011, -1.437, -1.1, 0, -3.074]
# left arm is tucked
L_ARM_INIT = [0.06, 1.25, 1.79, -1.68, -1.73, -0.10, -0.09]
GRIPPER_INIT = [0.8]

TABLE_GEOM = [2.235, 0.94, 0.2, 1.3, 0.6, 0.6, False]

def get_pr2_attrs_str(name):
    s = ""
    s += "(backHeight {} {}), ".format(name, BACKHEIGHT_INIT)
    s += "(lArmPose {} {}), ".format(name, L_ARM_INIT)
    s += "(lGripper {} {}), ".format(name, GRIPPER_INIT)
    s += "(rArmPose {} {}), ".format(name, R_ARM_INIT)
    s += "(rGripper {} {}), ".format(name, GRIPPER_INIT)
    return s


def main():
    random.seed(SEED)
    for iteration in range(NUM_PROBS):
        s = "# AUTOGENERATED. DO NOT EDIT.\n# Configuration file for CAN problem instance. Blank lines and lines beginning with # are filtered out.\n\n"
        coords = list(itertools.product(range(WIDTH), range(LENGTH), [0]))
        random.shuffle(coords)
        coord_ind = 0
        s += "# The values after each attribute name are the values that get passed into the __init__ method for that attribute's class defined in the domain configuration.\n"
        s += "Objects: "
        for i in range(NUM_TARGETS):
            s += "Target (name target{}); ".format(i)
            s += "EEPose (name ee_target{}); ".format(i)
            if i < NUM_CANS:
                s += "Can (name can{}); ".format(i)
                # s += "RobotPose (name gp_can{}); ".format(i)
        s += "Robot (name {}); ".format("pr2")
        s += "RobotPose (name {}); ".format("robot_init_pose")
        s += "RobotPose (name {}); ".format("robot_end_pose")
        s += "Obstacle (name {}) \n\n".format("table")

        s += "Init: "
        for i in range(NUM_TARGETS):
            s += "(geom target{} {} {}), ".format(i, CAN_GEOM[0], CAN_GEOM[1])
            s += "(value target{} {}), ".format(i, list(coords[i]))
            s += "(rotation target{} {}),".format(i, CAN_ROTATION_INIT)
            s += "(value ee_target{} undefined), ".format(i)
        for i in range(NUM_CANS):
            s += "(geom can{} {} {}), ".format(i, CAN_GEOM[0], CAN_GEOM[1])
            s += "(pose can{} {}), ".format(i, list(coords[i]))
            s += "(rotation can{} {}),".format(i, CAN_ROTATION_INIT)
            # s += "(value gp_can{} undefined), ".format(i)
        s += "(geom {}), ".format("pr2")
        s += "(pose {} {}), ".format("pr2", list(coords[NUM_TARGETS]))
        # setting intial state of robot
        s += "(pose pr2 {}), ".format(list(coords[NUM_TARGETS]))
        s += get_pr2_attrs_str('pr2')

        s += "(value {} {}), ".format("robot_init_pose", list(coords[NUM_TARGETS]))
        s += get_pr2_attrs_str('robot_init_pose')
        s += "(value {} {}), ".format("robot_end_pose", list(coords[NUM_TARGETS+1]))
        s += get_pr2_attrs_str('robot_end_pose')
        s += "(pose {} [0, 0, 0]), ".format("table")
        s += "(geom {} {}); ".format("table", TABLE_GEOM)

        for i in range(NUM_CANS):
            s += "(At can{} target{}), ".format(i, i)
            s += "(Stationary can{}), ".format(i)
            for j in range(NUM_CANS):
                s += "(StationaryNEq can{} can{}), ".format(i, j)
            # s += "(InContact pr2 gp_can{} target{}), ".format(i, i)
            # s += "(GraspValid gp_can{} target{} grasp0), ".format(i, i)
        for i in range(NUM_TARGETS):
            s += "(InContact pr2 ee_target{} target{}), ".format(i, i)
            s += "(GraspValid ee_target{} target{}), ".format(i, i)
        s += "(RobotAt pr2 robot_init_pose), "
        s += "(StationaryArms pr2), "
        s += "(StationaryBase pr2), "
        s += "(IsMP pr2), "
        s += "(StationaryW table) \n\n"

        s += "Goal: {}".format(GOAL)

        with open("can_probs/can_{}_{}.prob".format(SEED, iteration), "w") as f:
            f.write(s)

if __name__ == "__main__":
    main()
