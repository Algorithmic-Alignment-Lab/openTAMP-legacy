; AUTOGENERATED. DO NOT EDIT.

(define (domain robotics)                  
(:requirements :strips :equality :typing)
(:types
Can Target RobotPose Robot Grasp Obstacle Rotation - base_object
)

(:predicates
(At ?var0 - Can ?var1 - Target )
(AtInit ?var0 - Can ?var1 - Target )
(RobotAt ?var0 - Robot ?var1 - RobotPose )
(InGripper ?var0 - Robot ?var1 - Can ?var2 - Grasp )
(Obstructs ?var0 - Robot ?var1 - Can ?var2 - Can ?var3 - Can )
(ObstructsHolding ?var0 - Robot ?var1 - Target ?var2 - Target ?var3 - Can ?var4 - Can )
(WideObstructsHolding ?var0 - Robot ?var1 - Target ?var2 - Target ?var3 - Can ?var4 - Can )
(StationaryRot ?var0 - Robot )
(Stationary ?var0 - Can )
(RobotStationary ?var0 - Robot )
(StationaryNEq ?var0 - Can ?var1 - Can )
(IsMP ?var0 - Robot )
(StationaryW ?var0 - Obstacle )
(Collides ?var0 - Can ?var1 - Obstacle )
(RCollides ?var0 - Robot ?var1 - Obstacle )
(GripperClosed ?var0 - Robot )
(Near ?var0 - Can ?var1 - Target )
(RobotAtGrasp ?var0 - Robot ?var1 - Can ?var2 - Grasp )
(RobotWithinReach ?var0 - Robot ?var1 - Target )
(RobotNearGrasp ?var0 - Robot ?var1 - Can ?var2 - Grasp )
(RobotWithinBounds ?var0 - Robot )
(WideObstructs ?var0 - Robot ?var1 - Can ?var2 - Can ?var3 - Can )
(AtNEq ?var0 - Can ?var1 - Can ?var2 - Target )
(PoseCollides ?var0 - RobotPose ?var1 - Obstacle )
(TargetCollides ?var0 - Target ?var1 - Obstacle )
(TargetGraspCollides ?var0 - Target ?var1 - Obstacle ?var2 - Grasp )
(TargetCanGraspCollides ?var0 - Target ?var1 - Can ?var2 - Grasp )
(CanGraspCollides ?var0 - Can ?var1 - Obstacle ?var2 - Grasp )
(HLPoseUsed ?var0 - RobotPose )
(HLAtGrasp ?var0 - Robot ?var1 - Can ?var2 - Grasp )
(RobotPoseAtGrasp ?var0 - RobotPose ?var1 - Target ?var2 - Grasp )
(HLPoseAtGrasp ?var0 - RobotPose ?var1 - Target ?var2 - Grasp )
(RobotRetreat ?var0 - Robot ?var1 - Grasp )
(RobotApproach ?var0 - Robot ?var1 - Grasp )
(LinearRetreat ?var0 - Robot )
(LinearApproach ?var0 - Robot )
(InGraspAngle ?var0 - Robot ?var1 - Can )
(NearGraspAngle ?var0 - Robot ?var1 - Can )
(TargNearGraspAngle ?var0 - Robot ?var1 - Target )
(AroundGraspAngle ?var0 - Robot ?var1 - Can )
(ThetaDirValid ?var0 - Robot )
(ForThetaDirValid ?var0 - Robot )
(RevThetaDirValid ?var0 - Robot )
(ScalarVelValid ?var0 - Robot )
(HLGraspFailed ?var0 - Can )
(HLTransferFailed ?var0 - Can ?var1 - Target )
(HLPlaceFailed ?var0 - Target )
)

(:action moveto
:parameters (?robot - Robot ?can - Can ?target - Target ?sp - RobotPose ?gp - RobotPose ?g - Grasp ?end - Target)
:precondition (and (At ?can ?target) (forall (?obj - Can) (not (NearGraspAngle ?robot ?obj))) (forall (?obj - Can) (not (Obstructs ?robot ?can ?can ?obj))))
:effect (and (NearGraspAngle ?robot ?can) (InGraspAngle ?robot ?can) (forall (?obj - Can) (when (not (= ?obj ?can)) (not (NearGraspAngle ?robot ?obj)))) (forall (?obj - Can) (Stationary ?obj)) (StationaryRot ?robot) (ForThetaDirValid ?robot) )
)

(:action transfer
:parameters (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?t - Target ?g - Grasp ?init - Target)
:precondition (and (At ?c ?init) (forall (?obj - Can) (not (AtInit ?obj ?t))) (forall (?obj - Can) (not (At ?obj ?t))) (forall (?obj - Can) (not (Near ?obj ?t))) (NearGraspAngle ?robot ?c) (forall (?obj - Can) (not (ObstructsHolding ?robot ?t ?t ?obj ?c))))
:effect (and (At ?c ?t) (forall (?obj - Can) (when (not (= ?obj ?c)) (not (NearGraspAngle ?robot ?obj)))) (Near ?c ?t) (forall (?targ - Target) (when (not (= ?targ ?t)) (not (Near ?c ?targ)))) (forall (?targ - Target) (when (not (= ?targ ?t)) (not (At ?c ?targ)))) (not (Near ?c ?init)) (not (At ?c ?init)) (forall (?obj - Can) (not (Obstructs ?robot ?obj ?obj ?c))) (forall (?obj - Can) (not (WideObstructs ?robot ?obj ?obj ?c))) (forall (?obj - Can) (forall (?targ - Target) (not (WideObstructsHolding ?robot ?targ ?targ ?c ?obj)))) (forall (?obj - Can) (forall (?targ - Target) (not (ObstructsHolding ?robot ?targ ?targ ?c ?obj)))) (forall (?obj - Can) (Stationary ?obj)) )
)

(:action place
:parameters (?robot - Robot ?start - RobotPose ?end - RobotPose ?c - Can ?t - Target ?g - Grasp ?init - Target)
:precondition (and (At ?c ?t) (Near ?c ?t) (NearGraspAngle ?robot ?c) (forall (?obj - Can) (not (ObstructsHolding ?robot ?t ?t ?obj ?c))))
:effect (and (forall (?obj - Can) (not (NearGraspAngle ?robot ?obj))) (not (TargNearGraspAngle ?robot ?t)) (forall (?obj - Can) (Stationary ?obj)) )
)

)